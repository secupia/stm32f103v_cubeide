
02_cdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f80  08005f80  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  08005f80  08005f80  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f80  08005f80  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f84  08005f84  00015f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08005f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b0  20000204  0800618c  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016b4  0800618c  000216b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d52  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003be8  00000000  00000000  00038f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  0003cb68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  0003d700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a3b8  00000000  00000000  0003e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e82  00000000  00000000  00058498  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078ea6  00000000  00000000  0006a31a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e31c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e08  00000000  00000000  000e323c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000204 	.word	0x20000204
 8000200:	00000000 	.word	0x00000000
 8000204:	08005eb4 	.word	0x08005eb4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000208 	.word	0x20000208
 8000220:	08005eb4 	.word	0x08005eb4

08000224 <apInit>:
extern uint8_t cdcRead(void);
extern void cdcDataIn(uint8_t rx_data);
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);

void apInit(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);  // USB
 8000228:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800022c:	2000      	movs	r0, #0
 800022e:	f000 fa79 	bl	8000724 <uartOpen>
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <apMain>:

void apMain(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 800023e:	f000 f838 	bl	80002b2 <millis>
 8000242:	6078      	str	r0, [r7, #4]

  while(1)
  {
    if(millis()-pre_time >= 500)
 8000244:	f000 f835 	bl	80002b2 <millis>
 8000248:	4602      	mov	r2, r0
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	1ad3      	subs	r3, r2, r3
 800024e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000252:	d305      	bcc.n	8000260 <apMain+0x28>
    {
      pre_time = millis();
 8000254:	f000 f82d 	bl	80002b2 <millis>
 8000258:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED3);
 800025a:	2002      	movs	r0, #2
 800025c:	f000 fa2c 	bl	80006b8 <ledToggle>
    //delay(500);

    //CDC_Transmit_FS("test\n", 6);
    //CDC_Transmit_FS("test\n", sizeof("test\n"));

    if (uartAvailable(_DEF_UART1) > 0)
 8000260:	2000      	movs	r0, #0
 8000262:	f000 fa79 	bl	8000758 <uartAvailable>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0eb      	beq.n	8000244 <apMain+0xc>
    {
      uint8_t rx_data;
      rx_data = uartRead(_DEF_UART1);
 800026c:	2000      	movs	r0, #0
 800026e:	f000 fa86 	bl	800077e <uartRead>
 8000272:	4603      	mov	r3, r0
 8000274:	70fb      	strb	r3, [r7, #3]

      uartPrintf(_DEF_UART1, "RxData : 0x%X %c\n", rx_data, rx_data);
 8000276:	78fa      	ldrb	r2, [r7, #3]
 8000278:	78fb      	ldrb	r3, [r7, #3]
 800027a:	4902      	ldr	r1, [pc, #8]	; (8000284 <apMain+0x4c>)
 800027c:	2000      	movs	r0, #0
 800027e:	f000 faa9 	bl	80007d4 <uartPrintf>
    if(millis()-pre_time >= 500)
 8000282:	e7df      	b.n	8000244 <apMain+0xc>
 8000284:	08005ecc 	.word	0x08005ecc

08000288 <bspInit>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


void bspInit(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  HAL_Init();
 800028c:	f000 fb14 	bl	80008b8 <HAL_Init>

  SystemClock_Config();
 8000290:	f000 f816 	bl	80002c0 <SystemClock_Config>

  MX_GPIO_Init();
 8000294:	f000 f870 	bl	8000378 <MX_GPIO_Init>

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <delay>:

void delay(uint32_t ms)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f000 fb69 	bl	800097c <HAL_Delay>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <millis>:

uint32_t millis(void)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80002b6:	f000 fb57 	bl	8000968 <HAL_GetTick>
 80002ba:	4603      	mov	r3, r0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	bd80      	pop	{r7, pc}

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b096      	sub	sp, #88	; 0x58
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ca:	2228      	movs	r2, #40	; 0x28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f005 f9bc 	bl	800564c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	f107 031c 	add.w	r3, r7, #28
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]
 80002f2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f4:	2301      	movs	r3, #1
 80002f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000302:	2301      	movs	r3, #1
 8000304:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000306:	2302      	movs	r3, #2
 8000308:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800030e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000310:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000314:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800031a:	4618      	mov	r0, r3
 800031c:	f001 fd44 	bl	8001da8 <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000326:	f000 f867 	bl	80003f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2302      	movs	r3, #2
 8000330:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000340:	f107 031c 	add.w	r3, r7, #28
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f001 ff92 	bl	8002270 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000352:	f000 f851 	bl	80003f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000356:	2310      	movs	r3, #16
 8000358:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f002 f911 	bl	8002588 <HAL_RCCEx_PeriphCLKConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800036c:	f000 f844 	bl	80003f8 <Error_Handler>
  }
}
 8000370:	bf00      	nop
 8000372:	3758      	adds	r7, #88	; 0x58
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_GPIO_Init+0x78>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a17      	ldr	r2, [pc, #92]	; (80003f0 <MX_GPIO_Init+0x78>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <MX_GPIO_Init+0x78>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0308 	and.w	r3, r3, #8
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <MX_GPIO_Init+0x78>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <MX_GPIO_Init+0x78>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <MX_GPIO_Init+0x78>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80003c2:	480c      	ldr	r0, [pc, #48]	; (80003f4 <MX_GPIO_Init+0x7c>)
 80003c4:	f000 fd74 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 80003c8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80003cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ce:	2301      	movs	r3, #1
 80003d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d6:	2302      	movs	r3, #2
 80003d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003da:	f107 0308 	add.w	r3, r7, #8
 80003de:	4619      	mov	r1, r3
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_GPIO_Init+0x7c>)
 80003e2:	f000 fbf7 	bl	8000bd4 <HAL_GPIO_Init>
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010c00 	.word	0x40010c00

080003f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <HAL_MspInit+0x5c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a14      	ldr	r2, [pc, #80]	; (8000460 <HAL_MspInit+0x5c>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <HAL_MspInit+0x5c>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <HAL_MspInit+0x5c>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <HAL_MspInit+0x5c>)
 8000428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800042c:	61d3      	str	r3, [r2, #28]
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <HAL_MspInit+0x5c>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <HAL_MspInit+0x60>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <HAL_MspInit+0x60>)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000
 8000464:	40010000 	.word	0x40010000

08000468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr

08000474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <HardFault_Handler+0x4>

0800047a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047e:	e7fe      	b.n	800047e <MemManage_Handler+0x4>

08000480 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <BusFault_Handler+0x4>

08000486 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800048a:	e7fe      	b.n	800048a <UsageFault_Handler+0x4>

0800048c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b4:	f000 fa46 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}

080004bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004c2:	f000 fe1e 	bl	8001102 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20001250 	.word	0x20001250

080004d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <_sbrk+0x50>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d102      	bne.n	80004e6 <_sbrk+0x16>
		heap_end = &end;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <_sbrk+0x50>)
 80004e2:	4a10      	ldr	r2, [pc, #64]	; (8000524 <_sbrk+0x54>)
 80004e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <_sbrk+0x50>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <_sbrk+0x50>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4413      	add	r3, r2
 80004f4:	466a      	mov	r2, sp
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d907      	bls.n	800050a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004fa:	f005 f87d 	bl	80055f8 <__errno>
 80004fe:	4602      	mov	r2, r0
 8000500:	230c      	movs	r3, #12
 8000502:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000504:	f04f 33ff 	mov.w	r3, #4294967295
 8000508:	e006      	b.n	8000518 <_sbrk+0x48>
	}

	heap_end += incr;
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <_sbrk+0x50>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	4a03      	ldr	r2, [pc, #12]	; (8000520 <_sbrk+0x50>)
 8000514:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000220 	.word	0x20000220
 8000524:	200016b8 	.word	0x200016b8

08000528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <SystemInit+0x5c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <SystemInit+0x5c>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <SystemInit+0x5c>)
 800053a:	685a      	ldr	r2, [r3, #4]
 800053c:	4911      	ldr	r1, [pc, #68]	; (8000584 <SystemInit+0x5c>)
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <SystemInit+0x60>)
 8000540:	4013      	ands	r3, r2
 8000542:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <SystemInit+0x5c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <SystemInit+0x5c>)
 800054a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800054e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000552:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <SystemInit+0x5c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <SystemInit+0x5c>)
 800055a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800055e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SystemInit+0x5c>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SystemInit+0x5c>)
 8000566:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800056a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <SystemInit+0x5c>)
 800056e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000572:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <SystemInit+0x64>)
 8000576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800057a:	609a      	str	r2, [r3, #8]
#endif 
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	f8ff0000 	.word	0xf8ff0000
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000590:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000592:	e003      	b.n	800059c <LoopCopyDataInit>

08000594 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000596:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000598:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800059a:	3104      	adds	r1, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800059c:	480a      	ldr	r0, [pc, #40]	; (80005c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005a4:	d3f6      	bcc.n	8000594 <CopyDataInit>
  ldr r2, =_sbss
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005a8:	e002      	b.n	80005b0 <LoopFillZerobss>

080005aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005ac:	f842 3b04 	str.w	r3, [r2], #4

080005b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005b4:	d3f9      	bcc.n	80005aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005b6:	f7ff ffb7 	bl	8000528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ba:	f005 f823 	bl	8005604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005be:	f005 f80f 	bl	80055e0 <main>
  bx lr
 80005c2:	4770      	bx	lr
  ldr r3, =_sidata
 80005c4:	08005f88 	.word	0x08005f88
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005cc:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 80005d0:	20000204 	.word	0x20000204
  ldr r3, = _ebss
 80005d4:	200016b4 	.word	0x200016b4

080005d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC1_2_IRQHandler>
	...

080005dc <ledInit>:
		{GPIOB, GPIO_PIN_14, GPIO_PIN_SET, GPIO_PIN_RESET},
		{GPIOB, GPIO_PIN_15, GPIO_PIN_SET, GPIO_PIN_RESET},
};

void ledInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#endif
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <ledInit+0x94>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a1e      	ldr	r2, [pc, #120]	; (8000670 <ledInit+0x94>)
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <ledInit+0x94>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0308 	and.w	r3, r3, #8
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <ledInit+0x94>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a18      	ldr	r2, [pc, #96]	; (8000670 <ledInit+0x94>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <ledInit+0x94>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  //GPIO_InitStruct.Pin = LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2302      	movs	r3, #2
 800062a:	61bb      	str	r3, [r7, #24]
  //HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
  for( int i=0; i<LED_MAX_CH; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	e017      	b.n	8000662 <ledInit+0x86>
  {
  	GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <ledInit+0x98>)
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	4413      	add	r3, r2
 800063a:	889b      	ldrh	r3, [r3, #4]
 800063c:	60fb      	str	r3, [r7, #12]
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800063e:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <ledInit+0x98>)
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fac1 	bl	8000bd4 <HAL_GPIO_Init>

  	ledOff(i);
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f80e 	bl	8000678 <ledOff>
  for( int i=0; i<LED_MAX_CH; i++)
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	3301      	adds	r3, #1
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	2b03      	cmp	r3, #3
 8000666:	dde4      	ble.n	8000632 <ledInit+0x56>
  }
}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	20000004 	.word	0x20000004

08000678 <ledOff>:
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d811      	bhi.n	80006ac <ledOff+0x34>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <ledOff+0x3c>)
 800068c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <ledOff+0x3c>)
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	4413      	add	r3, r2
 8000698:	8899      	ldrh	r1, [r3, #4]
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <ledOff+0x3c>)
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	4413      	add	r3, r2
 80006a2:	79db      	ldrb	r3, [r3, #7]
 80006a4:	461a      	mov	r2, r3
 80006a6:	f000 fc03 	bl	8000eb0 <HAL_GPIO_WritePin>
 80006aa:	e000      	b.n	80006ae <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 80006ac:	bf00      	nop
}
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	d80c      	bhi.n	80006e2 <ledToggle+0x2a>
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <ledToggle+0x34>)
 80006cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4a06      	ldr	r2, [pc, #24]	; (80006ec <ledToggle+0x34>)
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	4413      	add	r3, r2
 80006d8:	889b      	ldrh	r3, [r3, #4]
 80006da:	4619      	mov	r1, r3
 80006dc:	f000 fc00 	bl	8000ee0 <HAL_GPIO_TogglePin>
 80006e0:	e000      	b.n	80006e4 <ledToggle+0x2c>
	if(ch >= LED_MAX_CH) return;
 80006e2:	bf00      	nop
}
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000004 	.word	0x20000004

080006f0 <uartInit>:
DMA_HandleTypeDef  hdma_usart1_rx;



bool uartInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	e007      	b.n	800070c <uartInit+0x1c>
  {
    is_open[i] = false;
 80006fc:	4a08      	ldr	r2, [pc, #32]	; (8000720 <uartInit+0x30>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3301      	adds	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b01      	cmp	r3, #1
 8000710:	ddf4      	ble.n	80006fc <uartInit+0xc>
  }


  return true;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000224 	.word	0x20000224

08000724 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d106      	bne.n	8000748 <uartOpen+0x24>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	4a05      	ldr	r2, [pc, #20]	; (8000754 <uartOpen+0x30>)
 800073e:	2101      	movs	r1, #1
 8000740:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8000742:	2301      	movs	r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
      break;
 8000746:	bf00      	nop
      }
      break;
#endif
  }

  return ret;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	20000224 	.word	0x20000224

08000758 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d103      	bne.n	8000774 <uartAvailable+0x1c>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 800076c:	f004 fa30 	bl	8004bd0 <cdcAvailable>
 8000770:	60f8      	str	r0, [r7, #12]
      break;
 8000772:	bf00      	nop
      ret = qbufferAvailable(&qbuffer[ch]);
      break;
#endif
  }

  return ret;
 8000774:	68fb      	ldr	r3, [r7, #12]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b084      	sub	sp, #16
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d104      	bne.n	800079c <uartRead+0x1e>
  {
    case _DEF_UART1:
      ret = cdcRead();
 8000792:	f004 fa39 	bl	8004c08 <cdcRead>
 8000796:	4603      	mov	r3, r0
 8000798:	73fb      	strb	r3, [r7, #15]
      break;
 800079a:	bf00      	nop
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
      break;
#endif
  }

  return ret;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  //HAL_StatusTypeDef status;


  switch(ch)
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d105      	bne.n	80007ca <uartWrite+0x24>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	68b8      	ldr	r0, [r7, #8]
 80007c2:	f004 fa73 	bl	8004cac <cdcWrite>
 80007c6:	6178      	str	r0, [r7, #20]
      break;
 80007c8:	bf00      	nop
      }
      break;
#endif
  }

  return ret;
 80007ca:	697b      	ldr	r3, [r7, #20]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80007d4:	b40e      	push	{r1, r2, r3}
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b0c7      	sub	sp, #284	; 0x11c
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4602      	mov	r2, r0
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80007e2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	f107 0010 	add.w	r0, r7, #16
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80007fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fe:	f004 ff59 	bl	80056b4 <vsniprintf>
 8000802:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8000806:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800080a:	f107 0110 	add.w	r1, r7, #16
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ffc7 	bl	80007a6 <uartWrite>
 8000818:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 800081c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000820:	4618      	mov	r0, r3
 8000822:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000826:	46bd      	mov	sp, r7
 8000828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800082c:	b003      	add	sp, #12
 800082e:	4770      	bx	lr

08000830 <usbInit>:




bool usbInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
  bool ret = true;
 8000836:	2301      	movs	r3, #1
 8000838:	75fb      	strb	r3, [r7, #23]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800084c:	2311      	movs	r3, #17
 800084e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2302      	movs	r3, #2
 8000856:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4619      	mov	r1, r3
 800085c:	480f      	ldr	r0, [pc, #60]	; (800089c <usbInit+0x6c>)
 800085e:	f000 f9b9 	bl	8000bd4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <usbInit+0x6c>)
 800086a:	f000 fb21 	bl	8000eb0 <HAL_GPIO_WritePin>
  delay(200);
 800086e:	20c8      	movs	r0, #200	; 0xc8
 8000870:	f7ff fd14 	bl	800029c <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087a:	4808      	ldr	r0, [pc, #32]	; (800089c <usbInit+0x6c>)
 800087c:	f000 fb18 	bl	8000eb0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <usbInit+0x6c>)
 800088a:	f000 f9a3 	bl	8000bd4 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 800088e:	f004 f96f 	bl	8004b70 <MX_USB_DEVICE_Init>

  return ret;
 8000892:	7dfb      	ldrb	r3, [r7, #23]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40010800 	.word	0x40010800

080008a0 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  bspInit();
 80008a4:	f7ff fcf0 	bl	8000288 <bspInit>

  /* Initialize Hardware */
  ledInit();
 80008a8:	f7ff fe98 	bl	80005dc <ledInit>
  usbInit();
 80008ac:	f7ff ffc0 	bl	8000830 <usbInit>
  uartInit();
 80008b0:	f7ff ff1e 	bl	80006f0 <uartInit>

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_Init+0x28>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <HAL_Init+0x28>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f000 f941 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 f808 	bl	80008e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d4:	f7ff fd96 	bl	8000404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40022000 	.word	0x40022000

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x54>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x58>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f959 	bl	8000bba <HAL_SYSTICK_Config>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e00e      	b.n	8000930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d80a      	bhi.n	800092e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f000 f921 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <HAL_InitTick+0x5c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000000 	.word	0x20000000
 800093c:	20000028 	.word	0x20000028
 8000940:	20000024 	.word	0x20000024

08000944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_IncTick+0x1c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x20>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a03      	ldr	r2, [pc, #12]	; (8000964 <HAL_IncTick+0x20>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000028 	.word	0x20000028
 8000964:	20000458 	.word	0x20000458

08000968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b02      	ldr	r3, [pc, #8]	; (8000978 <HAL_GetTick+0x10>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000458 	.word	0x20000458

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff fff0 	bl	8000968 <HAL_GetTick>
 8000988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000994:	d005      	beq.n	80009a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_Delay+0x40>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a2:	bf00      	nop
 80009a4:	f7ff ffe0 	bl	8000968 <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <HAL_Delay+0x28>
  {
  }
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000028 	.word	0x20000028

080009c0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <NVIC_SetPriorityGrouping+0x44>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <NVIC_SetPriorityGrouping+0x44>)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	60d3      	str	r3, [r2, #12]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <NVIC_GetPriorityGrouping+0x18>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	f003 0307 	and.w	r3, r3, #7
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4906      	ldr	r1, [pc, #24]	; (8000a50 <NVIC_EnableIRQ+0x2c>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	da0b      	bge.n	8000a80 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <NVIC_SetPriority+0x4c>)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 030f 	and.w	r3, r3, #15
 8000a74:	3b04      	subs	r3, #4
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7e:	e009      	b.n	8000a94 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <NVIC_SetPriority+0x50>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff90 	bl	8000a54 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff31 	bl	80009c0 <NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff46 	bl	8000a08 <NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff90 	bl	8000aa8 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5f 	bl	8000a54 <NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff39 	bl	8000a24 <NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffa2 	bl	8000b0c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b08b      	sub	sp, #44	; 0x2c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf6:	e133      	b.n	8000e60 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f040 8122 	bne.w	8000e5a <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b12      	cmp	r3, #18
 8000c1c:	d034      	beq.n	8000c88 <HAL_GPIO_Init+0xb4>
 8000c1e:	2b12      	cmp	r3, #18
 8000c20:	d80d      	bhi.n	8000c3e <HAL_GPIO_Init+0x6a>
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d02b      	beq.n	8000c7e <HAL_GPIO_Init+0xaa>
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d804      	bhi.n	8000c34 <HAL_GPIO_Init+0x60>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d031      	beq.n	8000c92 <HAL_GPIO_Init+0xbe>
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d01c      	beq.n	8000c6c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c32:	e048      	b.n	8000cc6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d043      	beq.n	8000cc0 <HAL_GPIO_Init+0xec>
 8000c38:	2b11      	cmp	r3, #17
 8000c3a:	d01b      	beq.n	8000c74 <HAL_GPIO_Init+0xa0>
          break;
 8000c3c:	e043      	b.n	8000cc6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c3e:	4a8d      	ldr	r2, [pc, #564]	; (8000e74 <HAL_GPIO_Init+0x2a0>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d026      	beq.n	8000c92 <HAL_GPIO_Init+0xbe>
 8000c44:	4a8b      	ldr	r2, [pc, #556]	; (8000e74 <HAL_GPIO_Init+0x2a0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d806      	bhi.n	8000c58 <HAL_GPIO_Init+0x84>
 8000c4a:	4a8b      	ldr	r2, [pc, #556]	; (8000e78 <HAL_GPIO_Init+0x2a4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d020      	beq.n	8000c92 <HAL_GPIO_Init+0xbe>
 8000c50:	4a8a      	ldr	r2, [pc, #552]	; (8000e7c <HAL_GPIO_Init+0x2a8>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d01d      	beq.n	8000c92 <HAL_GPIO_Init+0xbe>
          break;
 8000c56:	e036      	b.n	8000cc6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c58:	4a89      	ldr	r2, [pc, #548]	; (8000e80 <HAL_GPIO_Init+0x2ac>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d019      	beq.n	8000c92 <HAL_GPIO_Init+0xbe>
 8000c5e:	4a89      	ldr	r2, [pc, #548]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d016      	beq.n	8000c92 <HAL_GPIO_Init+0xbe>
 8000c64:	4a88      	ldr	r2, [pc, #544]	; (8000e88 <HAL_GPIO_Init+0x2b4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d013      	beq.n	8000c92 <HAL_GPIO_Init+0xbe>
          break;
 8000c6a:	e02c      	b.n	8000cc6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e028      	b.n	8000cc6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e023      	b.n	8000cc6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	3308      	adds	r3, #8
 8000c84:	623b      	str	r3, [r7, #32]
          break;
 8000c86:	e01e      	b.n	8000cc6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	330c      	adds	r3, #12
 8000c8e:	623b      	str	r3, [r7, #32]
          break;
 8000c90:	e019      	b.n	8000cc6 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	623b      	str	r3, [r7, #32]
          break;
 8000c9e:	e012      	b.n	8000cc6 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	611a      	str	r2, [r3, #16]
          break;
 8000cb2:	e008      	b.n	8000cc6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	615a      	str	r2, [r3, #20]
          break;
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2bff      	cmp	r3, #255	; 0xff
 8000cca:	d801      	bhi.n	8000cd0 <HAL_GPIO_Init+0xfc>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	e001      	b.n	8000cd4 <HAL_GPIO_Init+0x100>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	2bff      	cmp	r3, #255	; 0xff
 8000cda:	d802      	bhi.n	8000ce2 <HAL_GPIO_Init+0x10e>
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	e002      	b.n	8000ce8 <HAL_GPIO_Init+0x114>
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	3b08      	subs	r3, #8
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	210f      	movs	r1, #15
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	6a39      	ldr	r1, [r7, #32]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	431a      	orrs	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 80a2 	beq.w	8000e5a <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d16:	4b5d      	ldr	r3, [pc, #372]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a5c      	ldr	r2, [pc, #368]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b5a      	ldr	r3, [pc, #360]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000d2e:	4a58      	ldr	r2, [pc, #352]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	3302      	adds	r3, #2
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	220f      	movs	r2, #15
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a4f      	ldr	r2, [pc, #316]	; (8000e94 <HAL_GPIO_Init+0x2c0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d01f      	beq.n	8000d9a <HAL_GPIO_Init+0x1c6>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a4e      	ldr	r2, [pc, #312]	; (8000e98 <HAL_GPIO_Init+0x2c4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d019      	beq.n	8000d96 <HAL_GPIO_Init+0x1c2>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4d      	ldr	r2, [pc, #308]	; (8000e9c <HAL_GPIO_Init+0x2c8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d013      	beq.n	8000d92 <HAL_GPIO_Init+0x1be>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ea0 <HAL_GPIO_Init+0x2cc>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d00d      	beq.n	8000d8e <HAL_GPIO_Init+0x1ba>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4b      	ldr	r2, [pc, #300]	; (8000ea4 <HAL_GPIO_Init+0x2d0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d007      	beq.n	8000d8a <HAL_GPIO_Init+0x1b6>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4a      	ldr	r2, [pc, #296]	; (8000ea8 <HAL_GPIO_Init+0x2d4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_GPIO_Init+0x1b2>
 8000d82:	2305      	movs	r3, #5
 8000d84:	e00a      	b.n	8000d9c <HAL_GPIO_Init+0x1c8>
 8000d86:	2306      	movs	r3, #6
 8000d88:	e008      	b.n	8000d9c <HAL_GPIO_Init+0x1c8>
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x1c8>
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e004      	b.n	8000d9c <HAL_GPIO_Init+0x1c8>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e002      	b.n	8000d9c <HAL_GPIO_Init+0x1c8>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <HAL_GPIO_Init+0x1c8>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d9e:	f002 0203 	and.w	r2, r2, #3
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	4093      	lsls	r3, r2
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000dac:	4938      	ldr	r1, [pc, #224]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d006      	beq.n	8000dd4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4938      	ldr	r1, [pc, #224]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
 8000dd2:	e006      	b.n	8000de2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4933      	ldr	r1, [pc, #204]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	492e      	ldr	r1, [pc, #184]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]
 8000dfa:	e006      	b.n	8000e0a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	4929      	ldr	r1, [pc, #164]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	4924      	ldr	r1, [pc, #144]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	608b      	str	r3, [r1, #8]
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	491f      	ldr	r1, [pc, #124]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d006      	beq.n	8000e4c <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	491a      	ldr	r1, [pc, #104]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60cb      	str	r3, [r1, #12]
 8000e4a:	e006      	b.n	8000e5a <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	4915      	ldr	r1, [pc, #84]	; (8000eac <HAL_GPIO_Init+0x2d8>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	f67f aec8 	bls.w	8000bf8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000e68:	bf00      	nop
 8000e6a:	372c      	adds	r7, #44	; 0x2c
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	10210000 	.word	0x10210000
 8000e78:	10110000 	.word	0x10110000
 8000e7c:	10120000 	.word	0x10120000
 8000e80:	10310000 	.word	0x10310000
 8000e84:	10320000 	.word	0x10320000
 8000e88:	10220000 	.word	0x10220000
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010000 	.word	0x40010000
 8000e94:	40010800 	.word	0x40010800
 8000e98:	40010c00 	.word	0x40010c00
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	40011400 	.word	0x40011400
 8000ea4:	40011800 	.word	0x40011800
 8000ea8:	40011c00 	.word	0x40011c00
 8000eac:	40010400 	.word	0x40010400

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	611a      	str	r2, [r3, #16]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	405a      	eors	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	60da      	str	r2, [r3, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f04:	b08b      	sub	sp, #44	; 0x2c
 8000f06:	af06      	add	r7, sp, #24
 8000f08:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e0ca      	b.n	80010ae <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d106      	bne.n	8000f32 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f004 f8b9 	bl	80050a4 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2203      	movs	r2, #3
 8000f36:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fc02 	bl	8002748 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	687e      	ldr	r6, [r7, #4]
 8000f4c:	466d      	mov	r5, sp
 8000f4e:	f106 0410 	add.w	r4, r6, #16
 8000f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	602b      	str	r3, [r5, #0]
 8000f5a:	1d33      	adds	r3, r6, #4
 8000f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f001 fbc8 	bl	80026f4 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fc08 	bl	8002780 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	e037      	b.n	8000fe6 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3329      	adds	r3, #41	; 0x29
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	b2d9      	uxtb	r1, r3
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	015b      	lsls	r3, r3, #5
 8000f8e:	4413      	add	r3, r2
 8000f90:	3328      	adds	r3, #40	; 0x28
 8000f92:	460a      	mov	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	b299      	uxth	r1, r3
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	015b      	lsls	r3, r3, #5
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3334      	adds	r3, #52	; 0x34
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	015b      	lsls	r3, r3, #5
 8000fae:	4413      	add	r3, r2
 8000fb0:	332b      	adds	r3, #43	; 0x2b
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	015b      	lsls	r3, r3, #5
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3338      	adds	r3, #56	; 0x38
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	015b      	lsls	r3, r3, #5
 8000fca:	4413      	add	r3, r2
 8000fcc:	333c      	adds	r3, #60	; 0x3c
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	015b      	lsls	r3, r3, #5
 8000fda:	4413      	add	r3, r2
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b0e      	cmp	r3, #14
 8000fea:	d9c4      	bls.n	8000f76 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e03c      	b.n	800106c <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f203 2329 	addw	r3, r3, #553	; 0x229
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	b2d9      	uxtb	r1, r3
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	015b      	lsls	r3, r3, #5
 800100c:	4413      	add	r3, r2
 800100e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001012:	460a      	mov	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	b299      	uxth	r1, r3
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	015b      	lsls	r3, r3, #5
 8001020:	4413      	add	r3, r2
 8001022:	3334      	adds	r3, #52	; 0x34
 8001024:	460a      	mov	r2, r1
 8001026:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	015b      	lsls	r3, r3, #5
 800102e:	4413      	add	r3, r2
 8001030:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	015b      	lsls	r3, r3, #5
 800103e:	4413      	add	r3, r2
 8001040:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	015b      	lsls	r3, r3, #5
 800104e:	4413      	add	r3, r2
 8001050:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3312      	adds	r3, #18
 800105e:	015b      	lsls	r3, r3, #5
 8001060:	4413      	add	r3, r2
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3301      	adds	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b0e      	cmp	r3, #14
 8001070:	d9bf      	bls.n	8000ff2 <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	687e      	ldr	r6, [r7, #4]
 800107a:	466d      	mov	r5, sp
 800107c:	f106 0410 	add.w	r4, r6, #16
 8001080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	602b      	str	r3, [r5, #0]
 8001088:	1d33      	adds	r3, r6, #4
 800108a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800108c:	6838      	ldr	r0, [r7, #0]
 800108e:	f001 fb83 	bl	8002798 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 fb6d 	bl	8003786 <USB_DevDisconnect>
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010b6 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_PCD_Start+0x16>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e016      	b.n	80010fa <HAL_PCD_Start+0x44>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80010d4:	2101      	movs	r1, #1
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f004 fa4b 	bl	8005572 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fb46 	bl	8003772 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fb12 	bl	8002714 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fb43 	bl	800379a <USB_ReadInterrupts>
 8001114:	4603      	mov	r3, r0
 8001116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800111a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800111e:	d102      	bne.n	8001126 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 fad9 	bl	80016d8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fb35 	bl	800379a <USB_ReadInterrupts>
 8001130:	4603      	mov	r3, r0
 8001132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113a:	d112      	bne.n	8001162 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800114e:	b292      	uxth	r2, r2
 8001150:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f004 f81a 	bl	800518e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 800115a:	2100      	movs	r1, #0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f8d2 	bl	8001306 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f002 fb17 	bl	800379a <USB_ReadInterrupts>
 800116c:	4603      	mov	r3, r0
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001176:	d10b      	bne.n	8001190 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001180:	b29a      	uxth	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800118a:	b292      	uxth	r2, r2
 800118c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fb00 	bl	800379a <USB_ReadInterrupts>
 800119a:	4603      	mov	r3, r0
 800119c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a4:	d10b      	bne.n	80011be <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011b8:	b292      	uxth	r2, r2
 80011ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fae9 	bl	800379a <USB_ReadInterrupts>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011d2:	d126      	bne.n	8001222 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0204 	bic.w	r2, r2, #4
 80011e6:	b292      	uxth	r2, r2
 80011e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0208 	bic.w	r2, r2, #8
 80011fe:	b292      	uxth	r2, r2
 8001200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f003 fffb 	bl	8005200 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001212:	b29a      	uxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800121c:	b292      	uxth	r2, r2
 800121e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fab7 	bl	800379a <USB_ReadInterrupts>
 800122c:	4603      	mov	r3, r0
 800122e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001236:	d131      	bne.n	800129c <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0208 	orr.w	r2, r2, #8
 800124a:	b292      	uxth	r2, r2
 800124c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001262:	b292      	uxth	r2, r2
 8001264:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001270:	b29a      	uxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0204 	orr.w	r2, r2, #4
 800127a:	b292      	uxth	r2, r2
 800127c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fa88 	bl	800379a <USB_ReadInterrupts>
 800128a:	4603      	mov	r3, r0
 800128c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001294:	d002      	beq.n	800129c <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f003 ff98 	bl	80051cc <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fa7a 	bl	800379a <USB_ReadInterrupts>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b0:	d10e      	bne.n	80012d0 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012c4:	b292      	uxth	r2, r2
 80012c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f003 ff51 	bl	8005172 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 fa60 	bl	800379a <USB_ReadInterrupts>
 80012da:	4603      	mov	r3, r0
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012e4:	d10b      	bne.n	80012fe <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f8:	b292      	uxth	r2, r2
 80012fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_PCD_SetAddress+0x1a>
 800131c:	2302      	movs	r3, #2
 800131e:	e013      	b.n	8001348 <HAL_PCD_SetAddress+0x42>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	78fa      	ldrb	r2, [r7, #3]
 800132c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	78fa      	ldrb	r2, [r7, #3]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fa07 	bl	800374c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4603      	mov	r3, r0
 8001360:	70fb      	strb	r3, [r7, #3]
 8001362:	460b      	mov	r3, r1
 8001364:	803b      	strh	r3, [r7, #0]
 8001366:	4613      	mov	r3, r2
 8001368:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001372:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001376:	2b00      	cmp	r3, #0
 8001378:	da08      	bge.n	800138c <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001380:	015b      	lsls	r3, r3, #5
 8001382:	3328      	adds	r3, #40	; 0x28
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	e008      	b.n	800139e <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001392:	015b      	lsls	r3, r3, #5
 8001394:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80013aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	09db      	lsrs	r3, r3, #7
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80013ba:	883a      	ldrh	r2, [r7, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	78ba      	ldrb	r2, [r7, #2]
 80013c4:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_PCD_EP_Open+0x84>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e00e      	b.n	80013f2 <HAL_PCD_EP_Open+0xa2>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68f9      	ldr	r1, [r7, #12]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 f9fc 	bl	80027e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 80013f0:	7afb      	ldrb	r3, [r7, #11]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 800140a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800140e:	2b00      	cmp	r3, #0
 8001410:	da08      	bge.n	8001424 <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001418:	015b      	lsls	r3, r3, #5
 800141a:	3328      	adds	r3, #40	; 0x28
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e008      	b.n	8001436 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800142a:	015b      	lsls	r3, r3, #5
 800142c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800143c:	b2da      	uxtb	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	09db      	lsrs	r3, r3, #7
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_PCD_EP_Close+0x66>
 800145c:	2302      	movs	r3, #2
 800145e:	e00e      	b.n	800147e <HAL_PCD_EP_Close+0x84>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fc78 	bl	8002d64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	460b      	mov	r3, r1
 8001494:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800149a:	7afb      	ldrb	r3, [r7, #11]
 800149c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014a0:	015b      	lsls	r3, r3, #5
 80014a2:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2200      	movs	r2, #0
 80014c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80014c4:	7afb      	ldrb	r3, [r7, #11]
 80014c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 80014d0:	7afb      	ldrb	r3, [r7, #11]
 80014d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6979      	ldr	r1, [r7, #20]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 fdc7 	bl	8003074 <USB_EPStartXfer>
 80014e6:	e005      	b.n	80014f4 <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6979      	ldr	r1, [r7, #20]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fdc0 	bl	8003074 <USB_EPStartXfer>
  }

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	3312      	adds	r3, #18
 8001514:	015b      	lsls	r3, r3, #5
 8001516:	4413      	add	r3, r2
 8001518:	3304      	adds	r3, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b29b      	uxth	r3, r3
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	460b      	mov	r3, r1
 8001536:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800153c:	7afb      	ldrb	r3, [r7, #11]
 800153e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001542:	015b      	lsls	r3, r3, #5
 8001544:	3328      	adds	r3, #40	; 0x28
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2201      	movs	r2, #1
 8001562:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001564:	7afb      	ldrb	r3, [r7, #11]
 8001566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800156a:	b2da      	uxtb	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8001570:	7afb      	ldrb	r3, [r7, #11]
 8001572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6979      	ldr	r1, [r7, #20]
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fd77 	bl	8003074 <USB_EPStartXfer>
 8001586:	e005      	b.n	8001594 <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6979      	ldr	r1, [r7, #20]
 800158e:	4618      	mov	r0, r3
 8001590:	f001 fd70 	bl	8003074 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 80015ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da08      	bge.n	80015c8 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015bc:	015b      	lsls	r3, r3, #5
 80015be:	3328      	adds	r3, #40	; 0x28
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e006      	b.n	80015d6 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	015b      	lsls	r3, r3, #5
 80015cc:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2201      	movs	r2, #1
 80015da:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80015e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	09db      	lsrs	r3, r3, #7
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_PCD_EP_SetStall+0x68>
 8001602:	2302      	movs	r3, #2
 8001604:	e01c      	b.n	8001640 <HAL_PCD_EP_SetStall+0xa2>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68f9      	ldr	r1, [r7, #12]
 8001614:	4618      	mov	r0, r3
 8001616:	f001 ffaf 	bl	8003578 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001620:	2b00      	cmp	r3, #0
 8001622:	d108      	bne.n	8001636 <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800162e:	4619      	mov	r1, r3
 8001630:	4610      	mov	r0, r2
 8001632:	f002 f8c3 	bl	80037bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8001658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800165c:	2b00      	cmp	r3, #0
 800165e:	da08      	bge.n	8001672 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001666:	015b      	lsls	r3, r3, #5
 8001668:	3328      	adds	r3, #40	; 0x28
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e006      	b.n	8001680 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	015b      	lsls	r3, r3, #5
 8001676:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800168c:	b2da      	uxtb	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	09db      	lsrs	r3, r3, #7
 800169a:	b2db      	uxtb	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_PCD_EP_ClrStall+0x68>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e00e      	b.n	80016ce <HAL_PCD_EP_ClrStall+0x86>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68f9      	ldr	r1, [r7, #12]
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 ffba 	bl	8003638 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  uint16_t count = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	837b      	strh	r3, [r7, #26]
  uint8_t epindex = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	767b      	strb	r3, [r7, #25]
  __IO uint16_t wIstr = 0;  
 80016ec:	2300      	movs	r3, #0
 80016ee:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80016f4:	e308      	b.n	8001d08 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016f6:	89fb      	ldrh	r3, [r7, #14]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	767b      	strb	r3, [r7, #25]
    
    if (epindex == 0)
 8001702:	7e7b      	ldrb	r3, [r7, #25]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f040 812a 	bne.w	800195e <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	b29b      	uxth	r3, r3
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d14d      	bne.n	80017b2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	b29b      	uxth	r3, r3
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800172a:	b29b      	uxth	r3, r3
 800172c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3328      	adds	r3, #40	; 0x28
 8001732:	61fb      	str	r3, [r7, #28]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800173c:	b29b      	uxth	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	3302      	adds	r3, #2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	4413      	add	r3, r2
 8001752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	441a      	add	r2, r3
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001770:	2100      	movs	r1, #0
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f003 fce6 	bl	8005144 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 82c1 	beq.w	8001d08 <PCD_EP_ISR_Handler+0x630>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 82bc 	bne.w	8001d08 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800179c:	b2da      	uxtb	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b292      	uxth	r2, r2
 80017a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017b0:	e2aa      	b.n	8001d08 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80017b8:	61fb      	str	r3, [r7, #28]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d031      	beq.n	8001834 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017d8:	b29b      	uxth	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	3306      	adds	r3, #6
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	889a      	ldrh	r2, [r3, #4]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	b29b      	uxth	r3, r3
 8001812:	f002 f824 	bl	800385e <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b299      	uxth	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001826:	400b      	ands	r3, r1
 8001828:	b29b      	uxth	r3, r3
 800182a:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f003 fc5f 	bl	80050f0 <HAL_PCD_SetupStageCallback>
 8001832:	e269      	b.n	8001d08 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001834:	89bb      	ldrh	r3, [r7, #12]
 8001836:	b29b      	uxth	r3, r3
 8001838:	b21b      	sxth	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	f280 8264 	bge.w	8001d08 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b299      	uxth	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001850:	400b      	ands	r3, r1
 8001852:	b29b      	uxth	r3, r3
 8001854:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800185e:	b29b      	uxth	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	3306      	adds	r3, #6
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	4413      	add	r3, r2
 8001874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d011      	beq.n	80018b0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	6959      	ldr	r1, [r3, #20]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	889a      	ldrh	r2, [r3, #4]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	b29b      	uxth	r3, r3
 800189e:	f001 ffde 	bl	800385e <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	441a      	add	r2, r3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018b0:	2100      	movs	r1, #0
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f003 fc2e 	bl	8005114 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3306      	adds	r3, #6
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b3e      	cmp	r3, #62	; 0x3e
 80018d8:	d918      	bls.n	800190c <PCD_EP_ISR_Handler+0x234>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	82fb      	strh	r3, [r7, #22]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <PCD_EP_ISR_Handler+0x21c>
 80018ee:	8afb      	ldrh	r3, [r7, #22]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	82fb      	strh	r3, [r7, #22]
 80018f4:	8afb      	ldrh	r3, [r7, #22]
 80018f6:	029b      	lsls	r3, r3, #10
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001902:	b29b      	uxth	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e012      	b.n	8001932 <PCD_EP_ISR_Handler+0x25a>
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	82fb      	strh	r3, [r7, #22]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <PCD_EP_ISR_Handler+0x24e>
 8001920:	8afb      	ldrh	r3, [r7, #22]
 8001922:	3301      	adds	r3, #1
 8001924:	82fb      	strh	r3, [r7, #22]
 8001926:	8afb      	ldrh	r3, [r7, #22]
 8001928:	029b      	lsls	r3, r3, #10
 800192a:	b29b      	uxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800193e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001942:	b29c      	uxth	r4, r3
 8001944:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001948:	b29c      	uxth	r4, r3
 800194a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800194e:	b29c      	uxth	r4, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b98      	ldr	r3, [pc, #608]	; (8001bb8 <PCD_EP_ISR_Handler+0x4e0>)
 8001956:	4323      	orrs	r3, r4
 8001958:	b29b      	uxth	r3, r3
 800195a:	8013      	strh	r3, [r2, #0]
 800195c:	e1d4      	b.n	8001d08 <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	7e7b      	ldrb	r3, [r7, #25]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001970:	89bb      	ldrh	r3, [r7, #12]
 8001972:	b29b      	uxth	r3, r3
 8001974:	b21b      	sxth	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	f280 80d0 	bge.w	8001b1c <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	7e7b      	ldrb	r3, [r7, #25]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b299      	uxth	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	7e7b      	ldrb	r3, [r7, #25]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	441a      	add	r2, r3
 8001998:	f640 738f 	movw	r3, #3983	; 0xf8f
 800199c:	400b      	ands	r3, r1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019a2:	7e7b      	ldrb	r3, [r7, #25]
 80019a4:	015b      	lsls	r3, r3, #5
 80019a6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	61fb      	str	r3, [r7, #28]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	7a9b      	ldrb	r3, [r3, #10]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d122      	bne.n	80019fe <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	3306      	adds	r3, #6
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019e2:	837b      	strh	r3, [r7, #26]
          if (count != 0U)
 80019e4:	8b7b      	ldrh	r3, [r7, #26]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d073      	beq.n	8001ad2 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	6959      	ldr	r1, [r3, #20]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	889a      	ldrh	r2, [r3, #4]
 80019f6:	8b7b      	ldrh	r3, [r7, #26]
 80019f8:	f001 ff31 	bl	800385e <USB_ReadPMA>
 80019fc:	e069      	b.n	8001ad2 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d022      	beq.n	8001a5e <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a42:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8001a44:	8b7b      	ldrh	r3, [r7, #26]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d02b      	beq.n	8001aa2 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	6959      	ldr	r1, [r3, #20]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	88da      	ldrh	r2, [r3, #6]
 8001a56:	8b7b      	ldrh	r3, [r7, #26]
 8001a58:	f001 ff01 	bl	800385e <USB_ReadPMA>
 8001a5c:	e021      	b.n	8001aa2 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	3306      	adds	r3, #6
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a88:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8001a8a:	8b7b      	ldrh	r3, [r7, #26]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	6959      	ldr	r1, [r3, #20]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	891a      	ldrh	r2, [r3, #8]
 8001a9c:	8b7b      	ldrh	r3, [r7, #26]
 8001a9e:	f001 fede 	bl	800385e <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001ab8:	4013      	ands	r3, r2
 8001aba:	b299      	uxth	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	441a      	add	r2, r3
 8001aca:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <PCD_EP_ISR_Handler+0x4e4>)
 8001acc:	430b      	orrs	r3, r1
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	69da      	ldr	r2, [r3, #28]
 8001ad6:	8b7b      	ldrh	r3, [r7, #26]
 8001ad8:	441a      	add	r2, r3
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	8b7b      	ldrh	r3, [r7, #26]
 8001ae4:	441a      	add	r2, r3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d004      	beq.n	8001afc <PCD_EP_ISR_Handler+0x424>
 8001af2:	8b7a      	ldrh	r2, [r7, #26]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d206      	bcs.n	8001b0a <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f003 fb06 	bl	8005114 <HAL_PCD_DataOutStageCallback>
 8001b08:	e008      	b.n	8001b1c <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	7819      	ldrb	r1, [r3, #0]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fcb5 	bl	8001486 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b1c:	89bb      	ldrh	r3, [r7, #12]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80ef 	beq.w	8001d08 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b2a:	7e7b      	ldrb	r3, [r7, #25]
 8001b2c:	015b      	lsls	r3, r3, #5
 8001b2e:	3328      	adds	r3, #40	; 0x28
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	61fb      	str	r3, [r7, #28]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	7e7b      	ldrb	r3, [r7, #25]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	7e7a      	ldrb	r2, [r7, #25]
 8001b4e:	0092      	lsls	r2, r2, #2
 8001b50:	440a      	add	r2, r1
 8001b52:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	7a9b      	ldrb	r3, [r3, #10]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d12c      	bne.n	8001bc0 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 8083 	beq.w	8001ca4 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	6959      	ldr	r1, [r3, #20]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	889a      	ldrh	r2, [r3, #4]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f001 fe0f 	bl	80037d2 <USB_WritePMA>
 8001bb4:	e076      	b.n	8001ca4 <PCD_EP_ISR_Handler+0x5cc>
 8001bb6:	bf00      	nop
 8001bb8:	ffff8080 	.word	0xffff8080
 8001bbc:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d026      	beq.n	8001c28 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4413      	add	r3, r2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d031      	beq.n	8001c74 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	6959      	ldr	r1, [r3, #20]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	88da      	ldrh	r2, [r3, #6]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f001 fdd6 	bl	80037d2 <USB_WritePMA>
 8001c26:	e025      	b.n	8001c74 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3306      	adds	r3, #6
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	6959      	ldr	r1, [r3, #20]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	891a      	ldrh	r2, [r3, #8]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	f001 fdaf 	bl	80037d2 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	b299      	uxth	r1, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	441a      	add	r2, r3
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <PCD_EP_ISR_Handler+0x650>)
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	441a      	add	r2, r3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d106      	bne.n	8001cf6 <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f003 fa28 	bl	8005144 <HAL_PCD_DataInStageCallback>
 8001cf4:	e008      	b.n	8001d08 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	7819      	ldrb	r1, [r3, #0]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fc10 	bl	8001528 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	81fa      	strh	r2, [r7, #14]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f6ff acec 	blt.w	80016f6 <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3724      	adds	r7, #36	; 0x24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	ffffc080 	.word	0xffffc080

08001d2c <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	817b      	strh	r3, [r7, #10]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d52:	015b      	lsls	r3, r3, #5
 8001d54:	3328      	adds	r3, #40	; 0x28
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4413      	add	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e006      	b.n	8001d6c <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d5e:	897b      	ldrh	r3, [r7, #10]
 8001d60:	015b      	lsls	r3, r3, #5
 8001d62:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001d6c:	893b      	ldrh	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d107      	bne.n	8001d82 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2200      	movs	r2, #0
 8001d76:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	809a      	strh	r2, [r3, #4]
 8001d80:	e00b      	b.n	8001d9a <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2201      	movs	r2, #1
 8001d86:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8087 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dc2:	4b92      	ldr	r3, [pc, #584]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d00c      	beq.n	8001de8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dce:	4b8f      	ldr	r3, [pc, #572]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d112      	bne.n	8001e00 <HAL_RCC_OscConfig+0x58>
 8001dda:	4b8c      	ldr	r3, [pc, #560]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de6:	d10b      	bne.n	8001e00 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d06c      	beq.n	8001ece <HAL_RCC_OscConfig+0x126>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d168      	bne.n	8001ece <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e22d      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e08:	d106      	bne.n	8001e18 <HAL_RCC_OscConfig+0x70>
 8001e0a:	4b80      	ldr	r3, [pc, #512]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7f      	ldr	r2, [pc, #508]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e02e      	b.n	8001e76 <HAL_RCC_OscConfig+0xce>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10c      	bne.n	8001e3a <HAL_RCC_OscConfig+0x92>
 8001e20:	4b7a      	ldr	r3, [pc, #488]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a79      	ldr	r2, [pc, #484]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b77      	ldr	r3, [pc, #476]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a76      	ldr	r2, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e01d      	b.n	8001e76 <HAL_RCC_OscConfig+0xce>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0xb6>
 8001e44:	4b71      	ldr	r3, [pc, #452]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a70      	ldr	r2, [pc, #448]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b6e      	ldr	r3, [pc, #440]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a6d      	ldr	r2, [pc, #436]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0xce>
 8001e5e:	4b6b      	ldr	r3, [pc, #428]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a6a      	ldr	r2, [pc, #424]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b68      	ldr	r3, [pc, #416]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a67      	ldr	r2, [pc, #412]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d013      	beq.n	8001ea6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7fe fd73 	bl	8000968 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e86:	f7fe fd6f 	bl	8000968 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b64      	cmp	r3, #100	; 0x64
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1e1      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e98:	4b5c      	ldr	r3, [pc, #368]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0xde>
 8001ea4:	e014      	b.n	8001ed0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fd5f 	bl	8000968 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eae:	f7fe fd5b 	bl	8000968 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	; 0x64
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1cd      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec0:	4b52      	ldr	r3, [pc, #328]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x106>
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ece:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d063      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001edc:	4b4b      	ldr	r3, [pc, #300]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00b      	beq.n	8001f00 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ee8:	4b48      	ldr	r3, [pc, #288]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d11c      	bne.n	8001f2e <HAL_RCC_OscConfig+0x186>
 8001ef4:	4b45      	ldr	r3, [pc, #276]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d116      	bne.n	8001f2e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f00:	4b42      	ldr	r3, [pc, #264]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_OscConfig+0x170>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e1a1      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	4b3c      	ldr	r3, [pc, #240]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4939      	ldr	r1, [pc, #228]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2c:	e03a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d020      	beq.n	8001f78 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f36:	4b36      	ldr	r3, [pc, #216]	; (8002010 <HAL_RCC_OscConfig+0x268>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fd14 	bl	8000968 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f44:	f7fe fd10 	bl	8000968 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e182      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f56:	4b2d      	ldr	r3, [pc, #180]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4926      	ldr	r1, [pc, #152]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
 8001f76:	e015      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_RCC_OscConfig+0x268>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7fe fcf3 	bl	8000968 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f86:	f7fe fcef 	bl	8000968 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e161      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f98:	4b1c      	ldr	r3, [pc, #112]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d039      	beq.n	8002024 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d019      	beq.n	8001fec <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7fe fcd3 	bl	8000968 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7fe fccf 	bl	8000968 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e141      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_RCC_OscConfig+0x264>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f000 fab1 	bl	800254c <RCC_Delay>
 8001fea:	e01b      	b.n	8002024 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7fe fcb9 	bl	8000968 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e00e      	b.n	8002018 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7fe fcb5 	bl	8000968 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d907      	bls.n	8002018 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e127      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
 800200c:	40021000 	.word	0x40021000
 8002010:	42420000 	.word	0x42420000
 8002014:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b92      	ldr	r3, [pc, #584]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ea      	bne.n	8001ffa <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80a6 	beq.w	800217e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002036:	4b8b      	ldr	r3, [pc, #556]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10d      	bne.n	800205e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	4b88      	ldr	r3, [pc, #544]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a87      	ldr	r2, [pc, #540]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204c:	61d3      	str	r3, [r2, #28]
 800204e:	4b85      	ldr	r3, [pc, #532]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800205a:	2301      	movs	r3, #1
 800205c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	4b82      	ldr	r3, [pc, #520]	; (8002268 <HAL_RCC_OscConfig+0x4c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d118      	bne.n	800209c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206a:	4b7f      	ldr	r3, [pc, #508]	; (8002268 <HAL_RCC_OscConfig+0x4c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a7e      	ldr	r2, [pc, #504]	; (8002268 <HAL_RCC_OscConfig+0x4c0>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002076:	f7fe fc77 	bl	8000968 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207e:	f7fe fc73 	bl	8000968 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b64      	cmp	r3, #100	; 0x64
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0e5      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	4b75      	ldr	r3, [pc, #468]	; (8002268 <HAL_RCC_OscConfig+0x4c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x30a>
 80020a4:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4a6e      	ldr	r2, [pc, #440]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6213      	str	r3, [r2, #32]
 80020b0:	e02d      	b.n	800210e <HAL_RCC_OscConfig+0x366>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x32c>
 80020ba:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a69      	ldr	r2, [pc, #420]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6213      	str	r3, [r2, #32]
 80020c6:	4b67      	ldr	r3, [pc, #412]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a66      	ldr	r2, [pc, #408]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	6213      	str	r3, [r2, #32]
 80020d2:	e01c      	b.n	800210e <HAL_RCC_OscConfig+0x366>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d10c      	bne.n	80020f6 <HAL_RCC_OscConfig+0x34e>
 80020dc:	4b61      	ldr	r3, [pc, #388]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4a60      	ldr	r2, [pc, #384]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020e2:	f043 0304 	orr.w	r3, r3, #4
 80020e6:	6213      	str	r3, [r2, #32]
 80020e8:	4b5e      	ldr	r3, [pc, #376]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4a5d      	ldr	r2, [pc, #372]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6213      	str	r3, [r2, #32]
 80020f4:	e00b      	b.n	800210e <HAL_RCC_OscConfig+0x366>
 80020f6:	4b5b      	ldr	r3, [pc, #364]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a5a      	ldr	r2, [pc, #360]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6213      	str	r3, [r2, #32]
 8002102:	4b58      	ldr	r3, [pc, #352]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a57      	ldr	r2, [pc, #348]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d015      	beq.n	8002142 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002116:	f7fe fc27 	bl	8000968 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fc23 	bl	8000968 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	; 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e093      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	4b4b      	ldr	r3, [pc, #300]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ee      	beq.n	800211e <HAL_RCC_OscConfig+0x376>
 8002140:	e014      	b.n	800216c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002142:	f7fe fc11 	bl	8000968 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe fc0d 	bl	8000968 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e07d      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002160:	4b40      	ldr	r3, [pc, #256]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ee      	bne.n	800214a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d105      	bne.n	800217e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002172:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a3b      	ldr	r2, [pc, #236]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d069      	beq.n	800225a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002186:	4b37      	ldr	r3, [pc, #220]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b08      	cmp	r3, #8
 8002190:	d061      	beq.n	8002256 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d146      	bne.n	8002228 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCC_OscConfig+0x4c4>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe fbe2 	bl	8000968 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a8:	f7fe fbde 	bl	8000968 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e050      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ba:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ce:	d108      	bne.n	80021e2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4921      	ldr	r1, [pc, #132]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a19      	ldr	r1, [r3, #32]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	430b      	orrs	r3, r1
 80021f4:	491b      	ldr	r1, [pc, #108]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe fbb2 	bl	8000968 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fbae 	bl	8000968 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e020      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x460>
 8002226:	e018      	b.n	800225a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_RCC_OscConfig+0x4c4>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7fe fb9b 	bl	8000968 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002236:	f7fe fb97 	bl	8000968 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e009      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_OscConfig+0x4bc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x48e>
 8002254:	e001      	b.n	800225a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	40007000 	.word	0x40007000
 800226c:	42420060 	.word	0x42420060

08002270 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800227e:	4b7e      	ldr	r3, [pc, #504]	; (8002478 <HAL_RCC_ClockConfig+0x208>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d910      	bls.n	80022ae <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228c:	4b7a      	ldr	r3, [pc, #488]	; (8002478 <HAL_RCC_ClockConfig+0x208>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 0207 	bic.w	r2, r3, #7
 8002294:	4978      	ldr	r1, [pc, #480]	; (8002478 <HAL_RCC_ClockConfig+0x208>)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800229c:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCC_ClockConfig+0x208>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0e0      	b.n	8002470 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d020      	beq.n	80022fc <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c6:	4b6d      	ldr	r3, [pc, #436]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a6c      	ldr	r2, [pc, #432]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 80022cc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022d0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022de:	4b67      	ldr	r3, [pc, #412]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a66      	ldr	r2, [pc, #408]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 80022e4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022e8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ea:	4b64      	ldr	r3, [pc, #400]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	4961      	ldr	r1, [pc, #388]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d06a      	beq.n	80023de <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d107      	bne.n	8002320 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002310:	4b5a      	ldr	r3, [pc, #360]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d115      	bne.n	8002348 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0a7      	b.n	8002470 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d107      	bne.n	8002338 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002328:	4b54      	ldr	r3, [pc, #336]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e09b      	b.n	8002470 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	4b50      	ldr	r3, [pc, #320]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e093      	b.n	8002470 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002348:	4b4c      	ldr	r3, [pc, #304]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 0203 	bic.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4949      	ldr	r1, [pc, #292]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800235a:	f7fe fb05 	bl	8000968 <HAL_GetTick>
 800235e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d112      	bne.n	800238e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002368:	e00a      	b.n	8002380 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236a:	f7fe fafd 	bl	8000968 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e077      	b.n	8002470 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002380:	4b3e      	ldr	r3, [pc, #248]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b04      	cmp	r3, #4
 800238a:	d1ee      	bne.n	800236a <HAL_RCC_ClockConfig+0xfa>
 800238c:	e027      	b.n	80023de <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d11d      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002396:	e00a      	b.n	80023ae <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002398:	f7fe fae6 	bl	8000968 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e060      	b.n	8002470 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ae:	4b33      	ldr	r3, [pc, #204]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d1ee      	bne.n	8002398 <HAL_RCC_ClockConfig+0x128>
 80023ba:	e010      	b.n	80023de <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7fe fad4 	bl	8000968 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e04e      	b.n	8002470 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1ee      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <HAL_RCC_ClockConfig+0x208>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d210      	bcs.n	800240e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ec:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_RCC_ClockConfig+0x208>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 0207 	bic.w	r2, r3, #7
 80023f4:	4920      	ldr	r1, [pc, #128]	; (8002478 <HAL_RCC_ClockConfig+0x208>)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_RCC_ClockConfig+0x208>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d001      	beq.n	800240e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e030      	b.n	8002470 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4915      	ldr	r1, [pc, #84]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	490d      	ldr	r1, [pc, #52]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244c:	f000 f81c 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002450:	4601      	mov	r1, r0
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x20c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_RCC_ClockConfig+0x210>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	fa21 f303 	lsr.w	r3, r1, r3
 8002464:	4a07      	ldr	r2, [pc, #28]	; (8002484 <HAL_RCC_ClockConfig+0x214>)
 8002466:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe fa3b 	bl	80008e4 <HAL_InitTick>
  
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40022000 	.word	0x40022000
 800247c:	40021000 	.word	0x40021000
 8002480:	08005f3c 	.word	0x08005f3c
 8002484:	20000000 	.word	0x20000000

08002488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	b490      	push	{r4, r7}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002490:	1d3c      	adds	r4, r7, #4
 8002492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002498:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_RCC_GetSysClockFreq+0xb4>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024b2:	4b23      	ldr	r3, [pc, #140]	; (8002540 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d002      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x40>
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x46>
 80024c6:	e02d      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024ca:	623b      	str	r3, [r7, #32]
      break;
 80024cc:	e02d      	b.n	800252a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	0c9b      	lsrs	r3, r3, #18
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024da:	4413      	add	r3, r2
 80024dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0c5b      	lsrs	r3, r3, #17
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024fa:	4413      	add	r3, r2
 80024fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002500:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002506:	fb02 f203 	mul.w	r2, r2, r3
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
 8002512:	e004      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	623b      	str	r3, [r7, #32]
      break;
 8002522:	e002      	b.n	800252a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002526:	623b      	str	r3, [r7, #32]
      break;
 8002528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252a:	6a3b      	ldr	r3, [r7, #32]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3728      	adds	r7, #40	; 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc90      	pop	{r4, r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	08005ee0 	.word	0x08005ee0
 800253c:	08005ef0 	.word	0x08005ef0
 8002540:	40021000 	.word	0x40021000
 8002544:	007a1200 	.word	0x007a1200
 8002548:	003d0900 	.word	0x003d0900

0800254c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <RCC_Delay+0x34>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <RCC_Delay+0x38>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0a5b      	lsrs	r3, r3, #9
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002568:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1e5a      	subs	r2, r3, #1
 800256e:	60fa      	str	r2, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f9      	bne.n	8002568 <RCC_Delay+0x1c>
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000000 	.word	0x20000000
 8002584:	10624dd3 	.word	0x10624dd3

08002588 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d07d      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a8:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10d      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	4a4b      	ldr	r2, [pc, #300]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	61d3      	str	r3, [r2, #28]
 80025c0:	4b49      	ldr	r3, [pc, #292]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d118      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025dc:	4b43      	ldr	r3, [pc, #268]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a42      	ldr	r2, [pc, #264]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e8:	f7fe f9be 	bl	8000968 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	e008      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f0:	f7fe f9ba 	bl	8000968 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e06d      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002602:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002616:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02e      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d027      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800262c:	4b2e      	ldr	r3, [pc, #184]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002634:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002636:	4b2e      	ldr	r3, [pc, #184]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800263c:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002642:	4a29      	ldr	r2, [pc, #164]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d014      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7fe f989 	bl	8000968 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	e00a      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe f985 	bl	8000968 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e036      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ee      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4917      	ldr	r1, [pc, #92]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268a:	4313      	orrs	r3, r2
 800268c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	4a13      	ldr	r2, [pc, #76]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	490b      	ldr	r1, [pc, #44]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	4904      	ldr	r1, [pc, #16]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40007000 	.word	0x40007000
 80026f0:	42420440 	.word	0x42420440

080026f4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80026f4:	b084      	sub	sp, #16
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	f107 0014 	add.w	r0, r7, #20
 8002702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	b004      	add	sp, #16
 8002712:	4770      	bx	lr

08002714 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002720:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002724:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	b29b      	uxth	r3, r3
 8002732:	4313      	orrs	r3, r2
 8002734:	b29a      	uxth	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002754:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8002758:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	b29b      	uxth	r3, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	b29b      	uxth	r3, r3
 800276a:	4013      	ands	r3, r2
 800276c:	b29a      	uxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002798:	b084      	sub	sp, #16
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	f107 0014 	add.w	r0, r7, #20
 80027a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ffa2 	bl	8002714 <USB_EnableGlobalInt>
    
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027dc:	b004      	add	sp, #16
 80027de:	4770      	bx	lr

080027e0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80027e0:	b490      	push	{r4, r7}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	78db      	ldrb	r3, [r3, #3]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d85f      	bhi.n	80028b2 <USB_ActivateEndpoint+0xd2>
 80027f2:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <USB_ActivateEndpoint+0x18>)
 80027f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f8:	08002809 	.word	0x08002809
 80027fc:	08002887 	.word	0x08002887
 8002800:	08002835 	.word	0x08002835
 8002804:	0800285b 	.word	0x0800285b
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	b29a      	uxth	r2, r3
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282e:	b292      	uxth	r2, r2
 8002830:	801a      	strh	r2, [r3, #0]
    break;
 8002832:	e03f      	b.n	80028b4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	7812      	ldrb	r2, [r2, #0]
 8002848:	0092      	lsls	r2, r2, #2
 800284a:	440a      	add	r2, r1
 800284c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002854:	b29b      	uxth	r3, r3
 8002856:	8013      	strh	r3, [r2, #0]
    break;
 8002858:	e02c      	b.n	80028b4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800286c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002870:	b29a      	uxth	r2, r3
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8002880:	b292      	uxth	r2, r2
 8002882:	801a      	strh	r2, [r3, #0]
    break;
 8002884:	e016      	b.n	80028b4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289c:	b29a      	uxth	r2, r3
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028ac:	b292      	uxth	r2, r2
 80028ae:	801a      	strh	r2, [r3, #0]
    break;
 80028b0:	e000      	b.n	80028b4 <USB_ActivateEndpoint+0xd4>
  default:
      break;
 80028b2:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80028c6:	4013      	ands	r3, r2
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b299      	uxth	r1, r3
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	441a      	add	r2, r3
 80028de:	4b75      	ldr	r3, [pc, #468]	; (8002ab4 <USB_ActivateEndpoint+0x2d4>)
 80028e0:	430b      	orrs	r3, r1
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	7a9b      	ldrb	r3, [r3, #10]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 80e8 	bne.w	8002ac0 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d04c      	beq.n	8002992 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	889b      	ldrh	r3, [r3, #4]
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	b29b      	uxth	r3, r3
 8002900:	0059      	lsls	r1, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002908:	b29b      	uxth	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	005a      	lsls	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800291e:	460a      	mov	r2, r1
 8002920:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <USB_ActivateEndpoint+0x180>
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29a      	uxth	r2, r3
 8002946:	f640 730f 	movw	r3, #3855	; 0xf0f
 800294a:	4013      	ands	r3, r2
 800294c:	b299      	uxth	r1, r3
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	441a      	add	r2, r3
 8002958:	4b57      	ldr	r3, [pc, #348]	; (8002ab8 <USB_ActivateEndpoint+0x2d8>)
 800295a:	430b      	orrs	r3, r1
 800295c:	b29b      	uxth	r3, r3
 800295e:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002976:	b29c      	uxth	r4, r3
 8002978:	f084 0320 	eor.w	r3, r4, #32
 800297c:	b29c      	uxth	r4, r3
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	441a      	add	r2, r3
 8002988:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <USB_ActivateEndpoint+0x2d4>)
 800298a:	4323      	orrs	r3, r4
 800298c:	b29b      	uxth	r3, r3
 800298e:	8013      	strh	r3, [r2, #0]
 8002990:	e1d9      	b.n	8002d46 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	889b      	ldrh	r3, [r3, #4]
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	b29b      	uxth	r3, r3
 800299a:	0059      	lsls	r1, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	3304      	adds	r3, #4
 80029b0:	005a      	lsls	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ba:	460a      	mov	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	3306      	adds	r3, #6
 80029d2:	005a      	lsls	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b3e      	cmp	r3, #62	; 0x3e
 80029e4:	d918      	bls.n	8002a18 <USB_ActivateEndpoint+0x238>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	81fb      	strh	r3, [r7, #14]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <USB_ActivateEndpoint+0x220>
 80029fa:	89fb      	ldrh	r3, [r7, #14]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	81fb      	strh	r3, [r7, #14]
 8002a00:	89fb      	ldrh	r3, [r7, #14]
 8002a02:	029b      	lsls	r3, r3, #10
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e012      	b.n	8002a3e <USB_ActivateEndpoint+0x25e>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	81fb      	strh	r3, [r7, #14]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <USB_ActivateEndpoint+0x252>
 8002a2c:	89fb      	ldrh	r3, [r7, #14]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	81fb      	strh	r3, [r7, #14]
 8002a32:	89fb      	ldrh	r3, [r7, #14]
 8002a34:	029b      	lsls	r3, r3, #10
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <USB_ActivateEndpoint+0x29c>
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002a66:	4013      	ands	r3, r2
 8002a68:	b299      	uxth	r1, r3
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	441a      	add	r2, r3
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <USB_ActivateEndpoint+0x2dc>)
 8002a76:	430b      	orrs	r3, r1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a92:	b29c      	uxth	r4, r3
 8002a94:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002a98:	b29c      	uxth	r4, r3
 8002a9a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002a9e:	b29c      	uxth	r4, r3
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	4b02      	ldr	r3, [pc, #8]	; (8002ab4 <USB_ActivateEndpoint+0x2d4>)
 8002aac:	4323      	orrs	r3, r4
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	8013      	strh	r3, [r2, #0]
 8002ab2:	e148      	b.n	8002d46 <USB_ActivateEndpoint+0x566>
 8002ab4:	ffff8080 	.word	0xffff8080
 8002ab8:	ffff80c0 	.word	0xffff80c0
 8002abc:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	b299      	uxth	r1, r3
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	441a      	add	r2, r3
 8002ae0:	4b9c      	ldr	r3, [pc, #624]	; (8002d54 <USB_ActivateEndpoint+0x574>)
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	88db      	ldrh	r3, [r3, #6]
 8002aec:	085b      	lsrs	r3, r3, #1
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	0059      	lsls	r1, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	005a      	lsls	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b0e:	460a      	mov	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	891b      	ldrh	r3, [r3, #8]
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	0059      	lsls	r1, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3304      	adds	r3, #4
 8002b30:	005a      	lsls	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b3a:	460a      	mov	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]
    
    if (ep->is_in==0)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	785b      	ldrb	r3, [r3, #1]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 8083 	bne.w	8002c4e <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d013      	beq.n	8002b86 <USB_ActivateEndpoint+0x3a6>
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002b70:	4013      	ands	r3, r2
 8002b72:	b299      	uxth	r1, r3
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <USB_ActivateEndpoint+0x578>)
 8002b80:	430b      	orrs	r3, r1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <USB_ActivateEndpoint+0x3e4>
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b299      	uxth	r1, r3
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	441a      	add	r2, r3
 8002bbc:	4b67      	ldr	r3, [pc, #412]	; (8002d5c <USB_ActivateEndpoint+0x57c>)
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	b299      	uxth	r1, r3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	441a      	add	r2, r3
 8002be4:	4b5d      	ldr	r3, [pc, #372]	; (8002d5c <USB_ActivateEndpoint+0x57c>)
 8002be6:	430b      	orrs	r3, r1
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	b29c      	uxth	r4, r3
 8002c04:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002c08:	b29c      	uxth	r4, r3
 8002c0a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002c0e:	b29c      	uxth	r4, r3
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	441a      	add	r2, r3
 8002c1a:	4b51      	ldr	r3, [pc, #324]	; (8002d60 <USB_ActivateEndpoint+0x580>)
 8002c1c:	4323      	orrs	r3, r4
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c38:	b29c      	uxth	r4, r3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	441a      	add	r2, r3
 8002c44:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <USB_ActivateEndpoint+0x580>)
 8002c46:	4323      	orrs	r3, r4
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	8013      	strh	r3, [r2, #0]
 8002c4c:	e07b      	b.n	8002d46 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <USB_ActivateEndpoint+0x4ac>
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002c76:	4013      	ands	r3, r2
 8002c78:	b299      	uxth	r1, r3
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	441a      	add	r2, r3
 8002c84:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <USB_ActivateEndpoint+0x578>)
 8002c86:	430b      	orrs	r3, r1
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d013      	beq.n	8002cca <USB_ActivateEndpoint+0x4ea>
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b299      	uxth	r1, r3
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <USB_ActivateEndpoint+0x57c>)
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002cdc:	4013      	ands	r3, r2
 8002cde:	b299      	uxth	r1, r3
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	441a      	add	r2, r3
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <USB_ActivateEndpoint+0x578>)
 8002cec:	430b      	orrs	r3, r1
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d08:	b29c      	uxth	r4, r3
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	441a      	add	r2, r3
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <USB_ActivateEndpoint+0x580>)
 8002d16:	4323      	orrs	r3, r4
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	b29c      	uxth	r4, r3
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <USB_ActivateEndpoint+0x580>)
 8002d40:	4323      	orrs	r3, r4
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc90      	pop	{r4, r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	ffff8180 	.word	0xffff8180
 8002d58:	ffffc080 	.word	0xffffc080
 8002d5c:	ffff80c0 	.word	0xffff80c0
 8002d60:	ffff8080 	.word	0xffff8080

08002d64 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d64:	b490      	push	{r4, r7}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	7a9b      	ldrb	r3, [r3, #10]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d16d      	bne.n	8002e52 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	785b      	ldrb	r3, [r3, #1]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d034      	beq.n	8002de8 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <USB_DeactivateEndpoint+0x58>
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002da6:	4013      	ands	r3, r2
 8002da8:	b299      	uxth	r1, r3
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	441a      	add	r2, r3
 8002db4:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <USB_DeactivateEndpoint+0x1f4>)
 8002db6:	430b      	orrs	r3, r1
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd2:	b29c      	uxth	r4, r3
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	441a      	add	r2, r3
 8002dde:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <USB_DeactivateEndpoint+0x1f8>)
 8002de0:	4323      	orrs	r3, r4
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	8013      	strh	r3, [r2, #0]
 8002de6:	e139      	b.n	800305c <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d013      	beq.n	8002e26 <USB_DeactivateEndpoint+0xc2>
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002e10:	4013      	ands	r3, r2
 8002e12:	b299      	uxth	r1, r3
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	441a      	add	r2, r3
 8002e1e:	4b50      	ldr	r3, [pc, #320]	; (8002f60 <USB_DeactivateEndpoint+0x1fc>)
 8002e20:	430b      	orrs	r3, r1
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3c:	b29c      	uxth	r4, r3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	441a      	add	r2, r3
 8002e48:	4b44      	ldr	r3, [pc, #272]	; (8002f5c <USB_DeactivateEndpoint+0x1f8>)
 8002e4a:	4323      	orrs	r3, r4
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	8013      	strh	r3, [r2, #0]
 8002e50:	e104      	b.n	800305c <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	785b      	ldrb	r3, [r3, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f040 8084 	bne.w	8002f64 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d013      	beq.n	8002e9a <USB_DeactivateEndpoint+0x136>
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002e84:	4013      	ands	r3, r2
 8002e86:	b299      	uxth	r1, r3
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	441a      	add	r2, r3
 8002e92:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <USB_DeactivateEndpoint+0x1fc>)
 8002e94:	430b      	orrs	r3, r1
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <USB_DeactivateEndpoint+0x174>
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b299      	uxth	r1, r3
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	441a      	add	r2, r3
 8002ed0:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <USB_DeactivateEndpoint+0x1f4>)
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002eea:	4013      	ands	r3, r2
 8002eec:	b299      	uxth	r1, r3
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	441a      	add	r2, r3
 8002ef8:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <USB_DeactivateEndpoint+0x1f4>)
 8002efa:	430b      	orrs	r3, r1
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	b29c      	uxth	r4, r3
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	441a      	add	r2, r3
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <USB_DeactivateEndpoint+0x1f8>)
 8002f24:	4323      	orrs	r3, r4
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f40:	b29c      	uxth	r4, r3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <USB_DeactivateEndpoint+0x1f8>)
 8002f4e:	4323      	orrs	r3, r4
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	8013      	strh	r3, [r2, #0]
 8002f54:	e082      	b.n	800305c <USB_DeactivateEndpoint+0x2f8>
 8002f56:	bf00      	nop
 8002f58:	ffff80c0 	.word	0xffff80c0
 8002f5c:	ffff8080 	.word	0xffff8080
 8002f60:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d013      	beq.n	8002fa2 <USB_DeactivateEndpoint+0x23e>
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	b299      	uxth	r1, r3
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	441a      	add	r2, r3
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <USB_DeactivateEndpoint+0x304>)
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d013      	beq.n	8002fe0 <USB_DeactivateEndpoint+0x27c>
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002fca:	4013      	ands	r3, r2
 8002fcc:	b299      	uxth	r1, r3
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	441a      	add	r2, r3
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <USB_DeactivateEndpoint+0x308>)
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b299      	uxth	r1, r3
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	441a      	add	r2, r3
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <USB_DeactivateEndpoint+0x304>)
 8003002:	430b      	orrs	r3, r1
 8003004:	b29b      	uxth	r3, r3
 8003006:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800301e:	b29c      	uxth	r4, r3
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	441a      	add	r2, r3
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <USB_DeactivateEndpoint+0x30c>)
 800302c:	4323      	orrs	r3, r4
 800302e:	b29b      	uxth	r3, r3
 8003030:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	b29c      	uxth	r4, r3
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	441a      	add	r2, r3
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <USB_DeactivateEndpoint+0x30c>)
 8003056:	4323      	orrs	r3, r4
 8003058:	b29b      	uxth	r3, r3
 800305a:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bc90      	pop	{r4, r7}
 8003066:	4770      	bx	lr
 8003068:	ffffc080 	.word	0xffffc080
 800306c:	ffff80c0 	.word	0xffff80c0
 8003070:	ffff8080 	.word	0xffff8080

08003074 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b08d      	sub	sp, #52	; 0x34
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	785b      	ldrb	r3, [r3, #1]
 800308c:	2b01      	cmp	r3, #1
 800308e:	f040 8149 	bne.w	8003324 <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	429a      	cmp	r2, r3
 800309c:	d909      	bls.n	80030b2 <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	699a      	ldr	r2, [r3, #24]
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030aa:	1ad2      	subs	r2, r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	619a      	str	r2, [r3, #24]
 80030b0:	e005      	b.n	80030be <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	7a9b      	ldrb	r3, [r3, #10]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11b      	bne.n	80030fe <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6959      	ldr	r1, [r3, #20]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	889a      	ldrh	r2, [r3, #4]
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fb7d 	bl	80037d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	3302      	adds	r3, #2
 80030ec:	005a      	lsls	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030f6:	461a      	mov	r2, r3
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	e0f6      	b.n	80032ec <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d059      	beq.n	80031c8 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d13b      	bne.n	8003194 <USB_EPStartXfer+0x120>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003122:	b29b      	uxth	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	3306      	adds	r3, #6
 8003130:	005a      	lsls	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	2b3e      	cmp	r3, #62	; 0x3e
 8003140:	d916      	bls.n	8003170 <USB_EPStartXfer+0xfc>
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <USB_EPStartXfer+0xe4>
 8003152:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003154:	3b01      	subs	r3, #1
 8003156:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003158:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800315a:	029b      	lsls	r3, r3, #10
 800315c:	b29b      	uxth	r3, r3
 800315e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003166:	b29b      	uxth	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e027      	b.n	80031c0 <USB_EPStartXfer+0x14c>
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <USB_EPStartXfer+0x112>
 8003180:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003182:	3301      	adds	r3, #1
 8003184:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003186:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003188:	029b      	lsls	r3, r3, #10
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	e015      	b.n	80031c0 <USB_EPStartXfer+0x14c>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	785b      	ldrb	r3, [r3, #1]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d111      	bne.n	80031c0 <USB_EPStartXfer+0x14c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	3302      	adds	r3, #2
 80031b0:	005a      	lsls	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ba:	461a      	mov	r2, r3
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	891b      	ldrh	r3, [r3, #8]
 80031c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80031c6:	e058      	b.n	800327a <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	785b      	ldrb	r3, [r3, #1]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d13b      	bne.n	8003248 <USB_EPStartXfer+0x1d4>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	3302      	adds	r3, #2
 80031e4:	005a      	lsls	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	2b3e      	cmp	r3, #62	; 0x3e
 80031f4:	d916      	bls.n	8003224 <USB_EPStartXfer+0x1b0>
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <USB_EPStartXfer+0x198>
 8003206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003208:	3b01      	subs	r3, #1
 800320a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800320c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800320e:	029b      	lsls	r3, r3, #10
 8003210:	b29b      	uxth	r3, r3
 8003212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e027      	b.n	8003274 <USB_EPStartXfer+0x200>
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	84bb      	strh	r3, [r7, #36]	; 0x24
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <USB_EPStartXfer+0x1c6>
 8003234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003236:	3301      	adds	r3, #1
 8003238:	84bb      	strh	r3, [r7, #36]	; 0x24
 800323a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800323c:	029b      	lsls	r3, r3, #10
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e015      	b.n	8003274 <USB_EPStartXfer+0x200>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	785b      	ldrb	r3, [r3, #1]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d111      	bne.n	8003274 <USB_EPStartXfer+0x200>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003256:	b29b      	uxth	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	3302      	adds	r3, #2
 8003264:	005a      	lsls	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800326e:	461a      	mov	r2, r3
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	88db      	ldrh	r3, [r3, #6]
 8003278:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	6959      	ldr	r1, [r3, #20]
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	b29b      	uxth	r3, r3
 8003282:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 faa4 	bl	80037d2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	785b      	ldrb	r3, [r3, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d114      	bne.n	80032bc <USB_EPStartXfer+0x248>
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29a      	uxth	r2, r3
 80032a0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80032a4:	4013      	ands	r3, r2
 80032a6:	b299      	uxth	r1, r3
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	4b92      	ldr	r3, [pc, #584]	; (80034fc <USB_EPStartXfer+0x488>)
 80032b4:	430b      	orrs	r3, r1
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	8013      	strh	r3, [r2, #0]
 80032ba:	e017      	b.n	80032ec <USB_EPStartXfer+0x278>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	785b      	ldrb	r3, [r3, #1]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d113      	bne.n	80032ec <USB_EPStartXfer+0x278>
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80032d6:	4013      	ands	r3, r2
 80032d8:	b299      	uxth	r1, r3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	441a      	add	r2, r3
 80032e4:	4b86      	ldr	r3, [pc, #536]	; (8003500 <USB_EPStartXfer+0x48c>)
 80032e6:	430b      	orrs	r3, r1
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003302:	b29c      	uxth	r4, r3
 8003304:	f084 0310 	eor.w	r3, r4, #16
 8003308:	b29c      	uxth	r4, r3
 800330a:	f084 0320 	eor.w	r3, r4, #32
 800330e:	b29c      	uxth	r4, r3
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	441a      	add	r2, r3
 800331a:	4b7a      	ldr	r3, [pc, #488]	; (8003504 <USB_EPStartXfer+0x490>)
 800331c:	4323      	orrs	r3, r4
 800331e:	b29b      	uxth	r3, r3
 8003320:	8013      	strh	r3, [r2, #0]
 8003322:	e122      	b.n	800356a <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	429a      	cmp	r2, r3
 800332e:	d909      	bls.n	8003344 <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	1ad2      	subs	r2, r2, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	619a      	str	r2, [r3, #24]
 8003342:	e005      	b.n	8003350 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	7a9b      	ldrb	r3, [r3, #10]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d13b      	bne.n	80033d0 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800335e:	b29b      	uxth	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	3306      	adds	r3, #6
 800336c:	005a      	lsls	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337a:	2b3e      	cmp	r3, #62	; 0x3e
 800337c:	d916      	bls.n	80033ac <USB_EPStartXfer+0x338>
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	847b      	strh	r3, [r7, #34]	; 0x22
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <USB_EPStartXfer+0x320>
 800338e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003390:	3b01      	subs	r3, #1
 8003392:	847b      	strh	r3, [r7, #34]	; 0x22
 8003394:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003396:	029b      	lsls	r3, r3, #10
 8003398:	b29b      	uxth	r3, r3
 800339a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800339e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e0c3      	b.n	8003534 <USB_EPStartXfer+0x4c0>
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	847b      	strh	r3, [r7, #34]	; 0x22
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <USB_EPStartXfer+0x34e>
 80033bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033be:	3301      	adds	r3, #1
 80033c0:	847b      	strh	r3, [r7, #34]	; 0x22
 80033c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033c4:	029b      	lsls	r3, r3, #10
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e0b1      	b.n	8003534 <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	785b      	ldrb	r3, [r3, #1]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d13b      	bne.n	8003450 <USB_EPStartXfer+0x3dc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033de:	b29b      	uxth	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	3302      	adds	r3, #2
 80033ec:	005a      	lsls	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	2b3e      	cmp	r3, #62	; 0x3e
 80033fc:	d916      	bls.n	800342c <USB_EPStartXfer+0x3b8>
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	843b      	strh	r3, [r7, #32]
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <USB_EPStartXfer+0x3a0>
 800340e:	8c3b      	ldrh	r3, [r7, #32]
 8003410:	3b01      	subs	r3, #1
 8003412:	843b      	strh	r3, [r7, #32]
 8003414:	8c3b      	ldrh	r3, [r7, #32]
 8003416:	029b      	lsls	r3, r3, #10
 8003418:	b29b      	uxth	r3, r3
 800341a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e027      	b.n	800347c <USB_EPStartXfer+0x408>
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	843b      	strh	r3, [r7, #32]
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <USB_EPStartXfer+0x3ce>
 800343c:	8c3b      	ldrh	r3, [r7, #32]
 800343e:	3301      	adds	r3, #1
 8003440:	843b      	strh	r3, [r7, #32]
 8003442:	8c3b      	ldrh	r3, [r7, #32]
 8003444:	029b      	lsls	r3, r3, #10
 8003446:	b29b      	uxth	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e015      	b.n	800347c <USB_EPStartXfer+0x408>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d111      	bne.n	800347c <USB_EPStartXfer+0x408>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345e:	b29b      	uxth	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	3302      	adds	r3, #2
 800346c:	005a      	lsls	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003476:	461a      	mov	r2, r3
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	785b      	ldrb	r3, [r3, #1]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d141      	bne.n	8003508 <USB_EPStartXfer+0x494>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800348a:	b29b      	uxth	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4413      	add	r3, r2
 8003496:	3306      	adds	r3, #6
 8003498:	005a      	lsls	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	2b3e      	cmp	r3, #62	; 0x3e
 80034a8:	d916      	bls.n	80034d8 <USB_EPStartXfer+0x464>
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	83fb      	strh	r3, [r7, #30]
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <USB_EPStartXfer+0x44c>
 80034ba:	8bfb      	ldrh	r3, [r7, #30]
 80034bc:	3b01      	subs	r3, #1
 80034be:	83fb      	strh	r3, [r7, #30]
 80034c0:	8bfb      	ldrh	r3, [r7, #30]
 80034c2:	029b      	lsls	r3, r3, #10
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e02d      	b.n	8003534 <USB_EPStartXfer+0x4c0>
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	83fb      	strh	r3, [r7, #30]
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <USB_EPStartXfer+0x47a>
 80034e8:	8bfb      	ldrh	r3, [r7, #30]
 80034ea:	3301      	adds	r3, #1
 80034ec:	83fb      	strh	r3, [r7, #30]
 80034ee:	8bfb      	ldrh	r3, [r7, #30]
 80034f0:	029b      	lsls	r3, r3, #10
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e01b      	b.n	8003534 <USB_EPStartXfer+0x4c0>
 80034fc:	ffff80c0 	.word	0xffff80c0
 8003500:	ffffc080 	.word	0xffffc080
 8003504:	ffff8080 	.word	0xffff8080
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	785b      	ldrb	r3, [r3, #1]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d111      	bne.n	8003534 <USB_EPStartXfer+0x4c0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003516:	b29b      	uxth	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	3302      	adds	r3, #2
 8003524:	005a      	lsls	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800352e:	461a      	mov	r2, r3
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	b29c      	uxth	r4, r3
 800354c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003550:	b29c      	uxth	r4, r3
 8003552:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003556:	b29c      	uxth	r4, r3
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	441a      	add	r2, r3
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <USB_EPStartXfer+0x500>)
 8003564:	4323      	orrs	r3, r4
 8003566:	b29b      	uxth	r3, r3
 8003568:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3734      	adds	r7, #52	; 0x34
 8003570:	46bd      	mov	sp, r7
 8003572:	bd90      	pop	{r4, r7, pc}
 8003574:	ffff8080 	.word	0xffff8080

08003578 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003578:	b490      	push	{r4, r7}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d118      	bne.n	80035bc <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800359c:	401c      	ands	r4, r3
 800359e:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 80035a2:	f084 0410 	eor.w	r4, r4, #16
 80035a6:	b2a1      	uxth	r1, r4
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <USB_EPSetStall+0xbc>)
 80035b4:	430b      	orrs	r3, r1
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	8013      	strh	r3, [r2, #0]
 80035ba:	e034      	b.n	8003626 <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	785b      	ldrb	r3, [r3, #1]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d018      	beq.n	80035f6 <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035da:	b29c      	uxth	r4, r3
 80035dc:	f084 0310 	eor.w	r3, r4, #16
 80035e0:	b29c      	uxth	r4, r3
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	441a      	add	r2, r3
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <USB_EPSetStall+0xbc>)
 80035ee:	4323      	orrs	r3, r4
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	8013      	strh	r3, [r2, #0]
 80035f4:	e017      	b.n	8003626 <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360c:	b29c      	uxth	r4, r3
 800360e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003612:	b29c      	uxth	r4, r3
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <USB_EPSetStall+0xbc>)
 8003620:	4323      	orrs	r3, r4
 8003622:	b29b      	uxth	r3, r3
 8003624:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bc90      	pop	{r4, r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	ffff8080 	.word	0xffff8080

08003638 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003638:	b490      	push	{r4, r7}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d03a      	beq.n	80036c0 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <USB_EPClearStall+0x50>
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	b29a      	uxth	r2, r3
 800366e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003672:	4013      	ands	r3, r2
 8003674:	b299      	uxth	r1, r3
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	441a      	add	r2, r3
 8003680:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <USB_EPClearStall+0x108>)
 8003682:	430b      	orrs	r3, r1
 8003684:	b29b      	uxth	r3, r3
 8003686:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800369e:	b29c      	uxth	r4, r3
 80036a0:	f084 0310 	eor.w	r3, r4, #16
 80036a4:	b29c      	uxth	r4, r3
 80036a6:	f084 0320 	eor.w	r3, r4, #32
 80036aa:	b29c      	uxth	r4, r3
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <USB_EPClearStall+0x10c>)
 80036b8:	4323      	orrs	r3, r4
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	8013      	strh	r3, [r2, #0]
 80036be:	e039      	b.n	8003734 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d013      	beq.n	80036fe <USB_EPClearStall+0xc6>
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80036e8:	4013      	ands	r3, r2
 80036ea:	b299      	uxth	r1, r3
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	441a      	add	r2, r3
 80036f6:	4b14      	ldr	r3, [pc, #80]	; (8003748 <USB_EPClearStall+0x110>)
 80036f8:	430b      	orrs	r3, r1
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003714:	b29c      	uxth	r4, r3
 8003716:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800371a:	b29c      	uxth	r4, r3
 800371c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003720:	b29c      	uxth	r4, r3
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	441a      	add	r2, r3
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <USB_EPClearStall+0x10c>)
 800372e:	4323      	orrs	r3, r4
 8003730:	b29b      	uxth	r3, r3
 8003732:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bc90      	pop	{r4, r7}
 800373e:	4770      	bx	lr
 8003740:	ffff80c0 	.word	0xffff80c0
 8003744:	ffff8080 	.word	0xffff8080
 8003748:	ffffc080 	.word	0xffffc080

0800374c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80037b0:	68fb      	ldr	r3, [r7, #12]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr

080037d2 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b08b      	sub	sp, #44	; 0x2c
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	4611      	mov	r1, r2
 80037de:	461a      	mov	r2, r3
 80037e0:	460b      	mov	r3, r1
 80037e2:	80fb      	strh	r3, [r7, #6]
 80037e4:	4613      	mov	r3, r2
 80037e6:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80037e8:	88bb      	ldrh	r3, [r7, #4]
 80037ea:	3301      	adds	r3, #1
 80037ec:	105b      	asrs	r3, r3, #1
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	461a      	mov	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800380e:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
 8003814:	e01b      	b.n	800384e <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	3301      	adds	r3, #1
 8003820:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	461a      	mov	r2, r3
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	1c9a      	adds	r2, r3, #2
 8003834:	623a      	str	r2, [r7, #32]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	b292      	uxth	r2, r2
 800383a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	3302      	adds	r3, #2
 8003840:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3301      	adds	r3, #1
 8003846:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	3b01      	subs	r3, #1
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e0      	bne.n	8003816 <USB_WritePMA+0x44>
  }
}
 8003854:	bf00      	nop
 8003856:	372c      	adds	r7, #44	; 0x2c
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800385e:	b480      	push	{r7}
 8003860:	b089      	sub	sp, #36	; 0x24
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	4611      	mov	r1, r2
 800386a:	461a      	mov	r2, r3
 800386c:	460b      	mov	r3, r1
 800386e:	80fb      	strh	r3, [r7, #6]
 8003870:	4613      	mov	r3, r2
 8003872:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8003874:	88bb      	ldrh	r3, [r7, #4]
 8003876:	3301      	adds	r3, #1
 8003878:	105b      	asrs	r3, r3, #1
 800387a:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	461a      	mov	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003892:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	e00e      	b.n	80038b8 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	1d1a      	adds	r2, r3, #4
 800389e:	61ba      	str	r2, [r7, #24]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	60ba      	str	r2, [r7, #8]
 80038a8:	b28a      	uxth	r2, r1
 80038aa:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ed      	bne.n	800389a <USB_ReadPMA+0x3c>
  }
}
 80038be:	bf00      	nop
 80038c0:	3724      	adds	r7, #36	; 0x24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7c1b      	ldrb	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10e      	bne.n	80038fe <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80038e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038e4:	2202      	movs	r2, #2
 80038e6:	2181      	movs	r1, #129	; 0x81
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f001 fd0c 	bl	8005306 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80038ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f2:	2202      	movs	r2, #2
 80038f4:	2101      	movs	r1, #1
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f001 fd05 	bl	8005306 <USBD_LL_OpenEP>
 80038fc:	e00b      	b.n	8003916 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80038fe:	2340      	movs	r3, #64	; 0x40
 8003900:	2202      	movs	r2, #2
 8003902:	2181      	movs	r1, #129	; 0x81
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f001 fcfe 	bl	8005306 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800390a:	2340      	movs	r3, #64	; 0x40
 800390c:	2202      	movs	r2, #2
 800390e:	2101      	movs	r1, #1
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f001 fcf8 	bl	8005306 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8003916:	2308      	movs	r3, #8
 8003918:	2203      	movs	r2, #3
 800391a:	2182      	movs	r1, #130	; 0x82
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f001 fcf2 	bl	8005306 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003922:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003926:	f001 fe0f 	bl	8005548 <USBD_static_malloc>
 800392a:	4602      	mov	r2, r0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	e026      	b.n	8003990 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003948:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2200      	movs	r2, #0
 8003960:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	7c1b      	ldrb	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003976:	2101      	movs	r1, #1
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f001 fdae 	bl	80054da <USBD_LL_PrepareReceive>
 800397e:	e007      	b.n	8003990 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003986:	2340      	movs	r3, #64	; 0x40
 8003988:	2101      	movs	r1, #1
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f001 fda5 	bl	80054da <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80039aa:	2181      	movs	r1, #129	; 0x81
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f001 fcd0 	bl	8005352 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 80039b2:	2101      	movs	r1, #1
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f001 fccc 	bl	8005352 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 80039ba:	2182      	movs	r1, #130	; 0x82
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f001 fcc8 	bl	8005352 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00e      	beq.n	80039ea <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80039dc:	4618      	mov	r0, r3
 80039de:	f001 fdbf 	bl	8005560 <USBD_static_free>
    pdev->pClassData = NULL;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003a04:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d03a      	beq.n	8003a88 <USBD_CDC_Setup+0x94>
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d000      	beq.n	8003a18 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8003a16:	e043      	b.n	8003aa0 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	88db      	ldrh	r3, [r3, #6]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d029      	beq.n	8003a74 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	da11      	bge.n	8003a4e <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8003a36:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	88d2      	ldrh	r2, [r2, #6]
 8003a3c:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8003a3e:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	88db      	ldrh	r3, [r3, #6]
 8003a44:	461a      	mov	r2, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f001 f80e 	bl	8004a68 <USBD_CtlSendData>
    break;
 8003a4c:	e029      	b.n	8003aa2 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	785a      	ldrb	r2, [r3, #1]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	88db      	ldrh	r3, [r3, #6]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8003a64:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	88db      	ldrh	r3, [r3, #6]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f001 f829 	bl	8004ac4 <USBD_CtlPrepareRx>
    break;
 8003a72:	e016      	b.n	8003aa2 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	7850      	ldrb	r0, [r2, #1]
 8003a80:	2200      	movs	r2, #0
 8003a82:	6839      	ldr	r1, [r7, #0]
 8003a84:	4798      	blx	r3
    break;
 8003a86:	e00c      	b.n	8003aa2 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	785b      	ldrb	r3, [r3, #1]
 8003a8c:	2b0a      	cmp	r3, #10
 8003a8e:	d001      	beq.n	8003a94 <USBD_CDC_Setup+0xa0>
 8003a90:	2b0b      	cmp	r3, #11
      break;
 8003a92:	e005      	b.n	8003aa0 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8003a94:	2201      	movs	r2, #1
 8003a96:	4905      	ldr	r1, [pc, #20]	; (8003aac <USBD_CDC_Setup+0xb8>)
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 ffe5 	bl	8004a68 <USBD_CtlSendData>
      break;
 8003a9e:	bf00      	nop
    break;
 8003aa0:	bf00      	nop
  }
  return USBD_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000226 	.word	0x20000226

08003ab0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003ac2:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr

08003ae6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003af8:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f001 fd0e 	bl	8005520 <USBD_LL_GetRxDataSize>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00d      	beq.n	8003b32 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4798      	blx	r3

    return USBD_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e000      	b.n	8003b34 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8003b32:	2302      	movs	r3, #2
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003b4a:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d015      	beq.n	8003b82 <USBD_CDC_EP0_RxReady+0x46>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003b5c:	2bff      	cmp	r3, #255	; 0xff
 8003b5e:	d010      	beq.n	8003b82 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8003b6e:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003b76:	b292      	uxth	r2, r2
 8003b78:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	22ff      	movs	r2, #255	; 0xff
 8003b7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2243      	movs	r2, #67	; 0x43
 8003b98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8003b9a:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	200000b4 	.word	0x200000b4

08003bac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2243      	movs	r2, #67	; 0x43
 8003bb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8003bba:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000070 	.word	0x20000070

08003bcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2243      	movs	r2, #67	; 0x43
 8003bd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8003bda:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	200000f8 	.word	0x200000f8

08003bec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	220a      	movs	r2, #10
 8003bf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8003bfa:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	2000002c 	.word	0x2000002c

08003c0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8003c16:	2302      	movs	r3, #2
 8003c18:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003c4c:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr

08003c6a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003c7a:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003c9e:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d017      	beq.n	8003cda <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d110      	bne.n	8003cd6 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2181      	movs	r1, #129	; 0x81
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f001 fbe1 	bl	8005494 <USBD_LL_Transmit>
      
      return USBD_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e002      	b.n	8003cdc <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8003cda:	2302      	movs	r3, #2
  }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003cf2:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d017      	beq.n	8003d2e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7c1b      	ldrb	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d10:	2101      	movs	r1, #1
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f001 fbe1 	bl	80054da <USBD_LL_PrepareReceive>
 8003d18:	e007      	b.n	8003d2a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d20:	2340      	movs	r3, #64	; 0x40
 8003d22:	2101      	movs	r1, #1
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f001 fbd8 	bl	80054da <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e000      	b.n	8003d30 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8003d2e:	2302      	movs	r3, #2
  }
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	4613      	mov	r3, r2
 8003d44:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e01a      	b.n	8003d86 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	79fa      	ldrb	r2, [r7, #7]
 8003d7c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f001 fa4c 	bl	800521c <USBD_LL_Init>
  
  return USBD_OK; 
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d006      	beq.n	8003db0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
 8003dae:	e001      	b.n	8003db4 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003db0:	2302      	movs	r3, #2
 8003db2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr

08003dc0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f001 fa81 	bl	80052d0 <USBD_LL_Start>
  
  return USBD_OK;  
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00c      	beq.n	8003e20 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	4611      	mov	r1, r2
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	4611      	mov	r1, r2
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	4798      	blx	r3
  return USBD_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e60:	6839      	ldr	r1, [r7, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fd59 	bl	800491a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8003e76:	461a      	mov	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d00b      	beq.n	8003ea4 <USBD_LL_SetupStage+0x54>
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d011      	beq.n	8003eb4 <USBD_LL_SetupStage+0x64>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d117      	bne.n	8003ec4 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f987 	bl	80041b0 <USBD_StdDevReq>
    break;
 8003ea2:	e01a      	b.n	8003eda <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f9cf 	bl	8004250 <USBD_StdItfReq>
    break;
 8003eb2:	e012      	b.n	8003eda <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f9fa 	bl	80042b6 <USBD_StdEPReq>
    break;
 8003ec2:	e00a      	b.n	8003eda <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003eca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f001 fa5c 	bl	8005390 <USBD_LL_StallEP>
    break;
 8003ed8:	bf00      	nop
  }  
  return USBD_OK;  
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	460b      	mov	r3, r1
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003ef2:	7afb      	ldrb	r3, [r7, #11]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d138      	bne.n	8003f6a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003efe:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d142      	bne.n	8003f90 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d914      	bls.n	8003f40 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	1ad2      	subs	r2, r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	bf28      	it	cs
 8003f30:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fde1 	bl	8004b00 <USBD_CtlContinueRx>
 8003f3e:	e027      	b.n	8003f90 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d105      	bne.n	8003f62 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fdde 	bl	8004b24 <USBD_CtlSendStatus>
 8003f68:	e012      	b.n	8003f90 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00c      	beq.n	8003f90 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d107      	bne.n	8003f90 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	7afa      	ldrb	r2, [r7, #11]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	4798      	blx	r3
  }  
  return USBD_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b086      	sub	sp, #24
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003fa8:	7afb      	ldrb	r3, [r7, #11]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d16c      	bne.n	8004088 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d157      	bne.n	800406e <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d915      	bls.n	8003ff6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	1ad2      	subs	r2, r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fd5c 	bl	8004aa0 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2200      	movs	r2, #0
 8003fec:	2100      	movs	r1, #0
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f001 fa73 	bl	80054da <USBD_LL_PrepareReceive>
 8003ff4:	e03b      	b.n	800406e <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	68d2      	ldr	r2, [r2, #12]
 8003ffe:	fbb3 f1f2 	udiv	r1, r3, r2
 8004002:	fb02 f201 	mul.w	r2, r2, r1
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d11c      	bne.n	8004046 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004014:	429a      	cmp	r2, r3
 8004016:	d316      	bcc.n	8004046 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004022:	429a      	cmp	r2, r3
 8004024:	d20f      	bcs.n	8004046 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004026:	2200      	movs	r2, #0
 8004028:	2100      	movs	r1, #0
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fd38 	bl	8004aa0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004038:	2300      	movs	r3, #0
 800403a:	2200      	movs	r2, #0
 800403c:	2100      	movs	r1, #0
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f001 fa4b 	bl	80054da <USBD_LL_PrepareReceive>
 8004044:	e013      	b.n	800406e <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004058:	2b03      	cmp	r3, #3
 800405a:	d105      	bne.n	8004068 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fd6e 	bl	8004b4a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004074:	2b01      	cmp	r3, #1
 8004076:	d11a      	bne.n	80040ae <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7ff fead 	bl	8003dd8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004086:	e012      	b.n	80040ae <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00c      	beq.n	80040ae <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800409a:	2b03      	cmp	r3, #3
 800409c:	d107      	bne.n	80040ae <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	7afa      	ldrb	r2, [r7, #11]
 80040a8:	4611      	mov	r1, r2
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	4798      	blx	r3
  }  
  return USBD_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80040c0:	2340      	movs	r3, #64	; 0x40
 80040c2:	2200      	movs	r2, #0
 80040c4:	2100      	movs	r1, #0
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f001 f91d 	bl	8005306 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2240      	movs	r2, #64	; 0x40
 80040d0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80040d4:	2340      	movs	r3, #64	; 0x40
 80040d6:	2200      	movs	r2, #0
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f001 f913 	bl	8005306 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6852      	ldr	r2, [r2, #4]
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	4611      	mov	r1, r2
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
 
  
  return USBD_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr

08004134 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2204      	movs	r2, #4
 800414c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800418a:	2b03      	cmp	r3, #3
 800418c:	d10b      	bne.n	80041a6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	2b09      	cmp	r3, #9
 80041c4:	d839      	bhi.n	800423a <USBD_StdDevReq+0x8a>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <USBD_StdDevReq+0x1c>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	0800421d 	.word	0x0800421d
 80041d0:	08004231 	.word	0x08004231
 80041d4:	0800423b 	.word	0x0800423b
 80041d8:	08004227 	.word	0x08004227
 80041dc:	0800423b 	.word	0x0800423b
 80041e0:	080041ff 	.word	0x080041ff
 80041e4:	080041f5 	.word	0x080041f5
 80041e8:	0800423b 	.word	0x0800423b
 80041ec:	08004213 	.word	0x08004213
 80041f0:	08004209 	.word	0x08004209
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f936 	bl	8004468 <USBD_GetDescriptor>
    break;
 80041fc:	e022      	b.n	8004244 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80041fe:	6839      	ldr	r1, [r7, #0]
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fa25 	bl	8004650 <USBD_SetAddress>
    break;
 8004206:	e01d      	b.n	8004244 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fa5e 	bl	80046cc <USBD_SetConfig>
    break;
 8004210:	e018      	b.n	8004244 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004212:	6839      	ldr	r1, [r7, #0]
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fae1 	bl	80047dc <USBD_GetConfig>
    break;
 800421a:	e013      	b.n	8004244 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800421c:	6839      	ldr	r1, [r7, #0]
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fb0e 	bl	8004840 <USBD_GetStatus>
    break;
 8004224:	e00e      	b.n	8004244 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fb33 	bl	8004894 <USBD_SetFeature>
    break;
 800422e:	e009      	b.n	8004244 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004230:	6839      	ldr	r1, [r7, #0]
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fb49 	bl	80048ca <USBD_ClrFeature>
    break;
 8004238:	e004      	b.n	8004244 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800423a:	6839      	ldr	r1, [r7, #0]
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fba8 	bl	8004992 <USBD_CtlError>
    break;
 8004242:	bf00      	nop
  }
  
  return ret;
 8004244:	7bfb      	ldrb	r3, [r7, #15]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop

08004250 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004264:	2b03      	cmp	r3, #3
 8004266:	d11b      	bne.n	80042a0 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	889b      	ldrh	r3, [r3, #4]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d811      	bhi.n	8004296 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	88db      	ldrh	r3, [r3, #6]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d110      	bne.n	80042aa <USBD_StdItfReq+0x5a>
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10d      	bne.n	80042aa <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fc48 	bl	8004b24 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004294:	e009      	b.n	80042aa <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8004296:	6839      	ldr	r1, [r7, #0]
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fb7a 	bl	8004992 <USBD_CtlError>
    break;
 800429e:	e004      	b.n	80042aa <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fb75 	bl	8004992 <USBD_CtlError>
    break;
 80042a8:	e000      	b.n	80042ac <USBD_StdItfReq+0x5c>
    break;
 80042aa:	bf00      	nop
  }
  return USBD_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	889b      	ldrh	r3, [r3, #4]
 80042c8:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d108      	bne.n	80042e8 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	6839      	ldr	r1, [r7, #0]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
    
    return USBD_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e0ba      	b.n	800445e <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	785b      	ldrb	r3, [r3, #1]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d039      	beq.n	8004364 <USBD_StdEPReq+0xae>
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d002      	beq.n	80042fa <USBD_StdEPReq+0x44>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d06b      	beq.n	80043d0 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 80042f8:	e0b0      	b.n	800445c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004300:	2b02      	cmp	r3, #2
 8004302:	d002      	beq.n	800430a <USBD_StdEPReq+0x54>
 8004304:	2b03      	cmp	r3, #3
 8004306:	d00c      	beq.n	8004322 <USBD_StdEPReq+0x6c>
 8004308:	e025      	b.n	8004356 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800430a:	7bbb      	ldrb	r3, [r7, #14]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d027      	beq.n	8004360 <USBD_StdEPReq+0xaa>
 8004310:	7bbb      	ldrb	r3, [r7, #14]
 8004312:	2b80      	cmp	r3, #128	; 0x80
 8004314:	d024      	beq.n	8004360 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8004316:	7bbb      	ldrb	r3, [r7, #14]
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f001 f838 	bl	8005390 <USBD_LL_StallEP>
      break;	
 8004320:	e01e      	b.n	8004360 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	885b      	ldrh	r3, [r3, #2]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800432a:	7bbb      	ldrb	r3, [r7, #14]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <USBD_StdEPReq+0x8a>
 8004330:	7bbb      	ldrb	r3, [r7, #14]
 8004332:	2b80      	cmp	r3, #128	; 0x80
 8004334:	d004      	beq.n	8004340 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8004336:	7bbb      	ldrb	r3, [r7, #14]
 8004338:	4619      	mov	r1, r3
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f001 f828 	bl	8005390 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	6839      	ldr	r1, [r7, #0]
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fbe8 	bl	8004b24 <USBD_CtlSendStatus>
      break;
 8004354:	e005      	b.n	8004362 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8004356:	6839      	ldr	r1, [r7, #0]
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fb1a 	bl	8004992 <USBD_CtlError>
      break;    
 800435e:	e000      	b.n	8004362 <USBD_StdEPReq+0xac>
      break;	
 8004360:	bf00      	nop
    break;
 8004362:	e07b      	b.n	800445c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800436a:	2b02      	cmp	r3, #2
 800436c:	d002      	beq.n	8004374 <USBD_StdEPReq+0xbe>
 800436e:	2b03      	cmp	r3, #3
 8004370:	d00c      	beq.n	800438c <USBD_StdEPReq+0xd6>
 8004372:	e024      	b.n	80043be <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004374:	7bbb      	ldrb	r3, [r7, #14]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d026      	beq.n	80043c8 <USBD_StdEPReq+0x112>
 800437a:	7bbb      	ldrb	r3, [r7, #14]
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d023      	beq.n	80043c8 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8004380:	7bbb      	ldrb	r3, [r7, #14]
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f001 f803 	bl	8005390 <USBD_LL_StallEP>
      break;	
 800438a:	e01d      	b.n	80043c8 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	885b      	ldrh	r3, [r3, #2]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d11b      	bne.n	80043cc <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8004394:	7bbb      	ldrb	r3, [r7, #14]
 8004396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800439e:	7bbb      	ldrb	r3, [r7, #14]
 80043a0:	4619      	mov	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f001 f813 	bl	80053ce <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	6839      	ldr	r1, [r7, #0]
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fbb4 	bl	8004b24 <USBD_CtlSendStatus>
      break;
 80043bc:	e006      	b.n	80043cc <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 80043be:	6839      	ldr	r1, [r7, #0]
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fae6 	bl	8004992 <USBD_CtlError>
      break;    
 80043c6:	e002      	b.n	80043ce <USBD_StdEPReq+0x118>
      break;	
 80043c8:	bf00      	nop
 80043ca:	e047      	b.n	800445c <USBD_StdEPReq+0x1a6>
      break;
 80043cc:	bf00      	nop
    break;
 80043ce:	e045      	b.n	800445c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d002      	beq.n	80043e0 <USBD_StdEPReq+0x12a>
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d00b      	beq.n	80043f6 <USBD_StdEPReq+0x140>
 80043de:	e036      	b.n	800444e <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 80043e0:	7bbb      	ldrb	r3, [r7, #14]
 80043e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d036      	beq.n	8004458 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 80043ea:	7bbb      	ldrb	r3, [r7, #14]
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 ffce 	bl	8005390 <USBD_LL_StallEP>
      break;	
 80043f4:	e030      	b.n	8004458 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80043f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	da08      	bge.n	8004410 <USBD_StdEPReq+0x15a>
 80043fe:	7bbb      	ldrb	r3, [r7, #14]
 8004400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004404:	3301      	adds	r3, #1
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4413      	add	r3, r2
 800440c:	3304      	adds	r3, #4
 800440e:	e007      	b.n	8004420 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004410:	7bbb      	ldrb	r3, [r7, #14]
 8004412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004416:	3310      	adds	r3, #16
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	4413      	add	r3, r2
 800441e:	3304      	adds	r3, #4
 8004420:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004422:	7bbb      	ldrb	r3, [r7, #14]
 8004424:	4619      	mov	r1, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fff0 	bl	800540c <USBD_LL_IsStallEP>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e002      	b.n	8004440 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8004440:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8004442:	2202      	movs	r2, #2
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fb0e 	bl	8004a68 <USBD_CtlSendData>
      break;
 800444c:	e005      	b.n	800445a <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800444e:	6839      	ldr	r1, [r7, #0]
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fa9e 	bl	8004992 <USBD_CtlError>
      break;
 8004456:	e000      	b.n	800445a <USBD_StdEPReq+0x1a4>
      break;	
 8004458:	bf00      	nop
    break;
 800445a:	bf00      	nop
  }
  return ret;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	885b      	ldrh	r3, [r3, #2]
 8004476:	0a1b      	lsrs	r3, r3, #8
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	2b06      	cmp	r3, #6
 800447e:	f200 80c9 	bhi.w	8004614 <USBD_GetDescriptor+0x1ac>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <USBD_GetDescriptor+0x20>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044a5 	.word	0x080044a5
 800448c:	080044bd 	.word	0x080044bd
 8004490:	080044fd 	.word	0x080044fd
 8004494:	08004615 	.word	0x08004615
 8004498:	08004615 	.word	0x08004615
 800449c:	080045c1 	.word	0x080045c1
 80044a0:	080045e7 	.word	0x080045e7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	7c12      	ldrb	r2, [r2, #16]
 80044b0:	f107 010a 	add.w	r1, r7, #10
 80044b4:	4610      	mov	r0, r2
 80044b6:	4798      	blx	r3
 80044b8:	60f8      	str	r0, [r7, #12]
    break;
 80044ba:	e0b0      	b.n	800461e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7c1b      	ldrb	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10d      	bne.n	80044e0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	f107 020a 	add.w	r2, r7, #10
 80044d0:	4610      	mov	r0, r2
 80044d2:	4798      	blx	r3
 80044d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3301      	adds	r3, #1
 80044da:	2202      	movs	r2, #2
 80044dc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80044de:	e09e      	b.n	800461e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	f107 020a 	add.w	r2, r7, #10
 80044ec:	4610      	mov	r0, r2
 80044ee:	4798      	blx	r3
 80044f0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3301      	adds	r3, #1
 80044f6:	2202      	movs	r2, #2
 80044f8:	701a      	strb	r2, [r3, #0]
    break;
 80044fa:	e090      	b.n	800461e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	885b      	ldrh	r3, [r3, #2]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b05      	cmp	r3, #5
 8004504:	d856      	bhi.n	80045b4 <USBD_GetDescriptor+0x14c>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <USBD_GetDescriptor+0xa4>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004525 	.word	0x08004525
 8004510:	0800453d 	.word	0x0800453d
 8004514:	08004555 	.word	0x08004555
 8004518:	0800456d 	.word	0x0800456d
 800451c:	08004585 	.word	0x08004585
 8004520:	0800459d 	.word	0x0800459d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	7c12      	ldrb	r2, [r2, #16]
 8004530:	f107 010a 	add.w	r1, r7, #10
 8004534:	4610      	mov	r0, r2
 8004536:	4798      	blx	r3
 8004538:	60f8      	str	r0, [r7, #12]
      break;
 800453a:	e040      	b.n	80045be <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	7c12      	ldrb	r2, [r2, #16]
 8004548:	f107 010a 	add.w	r1, r7, #10
 800454c:	4610      	mov	r0, r2
 800454e:	4798      	blx	r3
 8004550:	60f8      	str	r0, [r7, #12]
      break;
 8004552:	e034      	b.n	80045be <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	7c12      	ldrb	r2, [r2, #16]
 8004560:	f107 010a 	add.w	r1, r7, #10
 8004564:	4610      	mov	r0, r2
 8004566:	4798      	blx	r3
 8004568:	60f8      	str	r0, [r7, #12]
      break;
 800456a:	e028      	b.n	80045be <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	7c12      	ldrb	r2, [r2, #16]
 8004578:	f107 010a 	add.w	r1, r7, #10
 800457c:	4610      	mov	r0, r2
 800457e:	4798      	blx	r3
 8004580:	60f8      	str	r0, [r7, #12]
      break;
 8004582:	e01c      	b.n	80045be <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	7c12      	ldrb	r2, [r2, #16]
 8004590:	f107 010a 	add.w	r1, r7, #10
 8004594:	4610      	mov	r0, r2
 8004596:	4798      	blx	r3
 8004598:	60f8      	str	r0, [r7, #12]
      break;
 800459a:	e010      	b.n	80045be <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	7c12      	ldrb	r2, [r2, #16]
 80045a8:	f107 010a 	add.w	r1, r7, #10
 80045ac:	4610      	mov	r0, r2
 80045ae:	4798      	blx	r3
 80045b0:	60f8      	str	r0, [r7, #12]
      break;
 80045b2:	e004      	b.n	80045be <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f9eb 	bl	8004992 <USBD_CtlError>
      return;
 80045bc:	e044      	b.n	8004648 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 80045be:	e02e      	b.n	800461e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	7c1b      	ldrb	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d0:	f107 020a 	add.w	r2, r7, #10
 80045d4:	4610      	mov	r0, r2
 80045d6:	4798      	blx	r3
 80045d8:	60f8      	str	r0, [r7, #12]
      break;
 80045da:	e020      	b.n	800461e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80045dc:	6839      	ldr	r1, [r7, #0]
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f9d7 	bl	8004992 <USBD_CtlError>
      return;
 80045e4:	e030      	b.n	8004648 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	7c1b      	ldrb	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10d      	bne.n	800460a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	f107 020a 	add.w	r2, r7, #10
 80045fa:	4610      	mov	r0, r2
 80045fc:	4798      	blx	r3
 80045fe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3301      	adds	r3, #1
 8004604:	2207      	movs	r2, #7
 8004606:	701a      	strb	r2, [r3, #0]
      break; 
 8004608:	e009      	b.n	800461e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800460a:	6839      	ldr	r1, [r7, #0]
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f9c0 	bl	8004992 <USBD_CtlError>
      return;
 8004612:	e019      	b.n	8004648 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8004614:	6839      	ldr	r1, [r7, #0]
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f9bb 	bl	8004992 <USBD_CtlError>
    return;
 800461c:	e014      	b.n	8004648 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800461e:	897b      	ldrh	r3, [r7, #10]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d011      	beq.n	8004648 <USBD_GetDescriptor+0x1e0>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	88db      	ldrh	r3, [r3, #6]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	88da      	ldrh	r2, [r3, #6]
 8004630:	897b      	ldrh	r3, [r7, #10]
 8004632:	4293      	cmp	r3, r2
 8004634:	bf28      	it	cs
 8004636:	4613      	movcs	r3, r2
 8004638:	b29b      	uxth	r3, r3
 800463a:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800463c:	897b      	ldrh	r3, [r7, #10]
 800463e:	461a      	mov	r2, r3
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fa10 	bl	8004a68 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop

08004650 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	889b      	ldrh	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d12c      	bne.n	80046bc <USBD_SetAddress+0x6c>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	88db      	ldrh	r3, [r3, #6]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d128      	bne.n	80046bc <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	885b      	ldrh	r3, [r3, #2]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004674:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800467c:	2b03      	cmp	r3, #3
 800467e:	d104      	bne.n	800468a <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f985 	bl	8004992 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004688:	e01c      	b.n	80046c4 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	7bfa      	ldrb	r2, [r7, #15]
 800468e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fedd 	bl	8005456 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fa41 	bl	8004b24 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d004      	beq.n	80046b2 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80046b0:	e008      	b.n	80046c4 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80046ba:	e003      	b.n	80046c4 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80046bc:	6839      	ldr	r1, [r7, #0]
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f967 	bl	8004992 <USBD_CtlError>
  } 
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	885b      	ldrh	r3, [r3, #2]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	4b3e      	ldr	r3, [pc, #248]	; (80047d8 <USBD_SetConfig+0x10c>)
 80046de:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80046e0:	4b3d      	ldr	r3, [pc, #244]	; (80047d8 <USBD_SetConfig+0x10c>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d904      	bls.n	80046f2 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80046e8:	6839      	ldr	r1, [r7, #0]
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f951 	bl	8004992 <USBD_CtlError>
 80046f0:	e06f      	b.n	80047d2 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d002      	beq.n	8004702 <USBD_SetConfig+0x36>
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d023      	beq.n	8004748 <USBD_SetConfig+0x7c>
 8004700:	e062      	b.n	80047c8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8004702:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <USBD_SetConfig+0x10c>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01a      	beq.n	8004740 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800470a:	4b33      	ldr	r3, [pc, #204]	; (80047d8 <USBD_SetConfig+0x10c>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2203      	movs	r2, #3
 8004718:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800471c:	4b2e      	ldr	r3, [pc, #184]	; (80047d8 <USBD_SetConfig+0x10c>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff fb62 	bl	8003dec <USBD_SetClassConfig>
 8004728:	4603      	mov	r3, r0
 800472a:	2b02      	cmp	r3, #2
 800472c:	d104      	bne.n	8004738 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f92e 	bl	8004992 <USBD_CtlError>
          return;
 8004736:	e04c      	b.n	80047d2 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f9f3 	bl	8004b24 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800473e:	e048      	b.n	80047d2 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f9ef 	bl	8004b24 <USBD_CtlSendStatus>
      break;
 8004746:	e044      	b.n	80047d2 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004748:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <USBD_SetConfig+0x10c>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d112      	bne.n	8004776 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004758:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <USBD_SetConfig+0x10c>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <USBD_SetConfig+0x10c>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff fb5e 	bl	8003e2a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f9d8 	bl	8004b24 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004774:	e02d      	b.n	80047d2 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8004776:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <USBD_SetConfig+0x10c>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	d01d      	beq.n	80047c0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	4619      	mov	r1, r3
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fb4c 	bl	8003e2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <USBD_SetConfig+0x10c>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800479c:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <USBD_SetConfig+0x10c>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	4619      	mov	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fb22 	bl	8003dec <USBD_SetClassConfig>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d104      	bne.n	80047b8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f8ee 	bl	8004992 <USBD_CtlError>
          return;
 80047b6:	e00c      	b.n	80047d2 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f9b3 	bl	8004b24 <USBD_CtlSendStatus>
      break;
 80047be:	e008      	b.n	80047d2 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f9af 	bl	8004b24 <USBD_CtlSendStatus>
      break;
 80047c6:	e004      	b.n	80047d2 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f8e1 	bl	8004992 <USBD_CtlError>
      break;
 80047d0:	bf00      	nop
    }
  }
}
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000227 	.word	0x20000227

080047dc <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	88db      	ldrh	r3, [r3, #6]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d004      	beq.n	80047f8 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80047ee:	6839      	ldr	r1, [r7, #0]
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f8ce 	bl	8004992 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80047f6:	e01f      	b.n	8004838 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d002      	beq.n	8004808 <USBD_GetConfig+0x2c>
 8004802:	2b03      	cmp	r3, #3
 8004804:	d00b      	beq.n	800481e <USBD_GetConfig+0x42>
 8004806:	e012      	b.n	800482e <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8004812:	2201      	movs	r2, #1
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f926 	bl	8004a68 <USBD_CtlSendData>
      break;
 800481c:	e00c      	b.n	8004838 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8004822:	2201      	movs	r2, #1
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f91e 	bl	8004a68 <USBD_CtlSendData>
      break;
 800482c:	e004      	b.n	8004838 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f8ae 	bl	8004992 <USBD_CtlError>
      break;
 8004836:	bf00      	nop
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004850:	3b02      	subs	r3, #2
 8004852:	2b01      	cmp	r3, #1
 8004854:	d815      	bhi.n	8004882 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f043 0202 	orr.w	r2, r3, #2
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8004876:	2202      	movs	r2, #2
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8f4 	bl	8004a68 <USBD_CtlSendData>
                      2);
    break;
 8004880:	e004      	b.n	800488c <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8004882:	6839      	ldr	r1, [r7, #0]
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f884 	bl	8004992 <USBD_CtlError>
    break;
 800488a:	bf00      	nop
  }
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	885b      	ldrh	r3, [r3, #2]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d10d      	bne.n	80048c2 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	6839      	ldr	r1, [r7, #0]
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f931 	bl	8004b24 <USBD_CtlSendStatus>
  }

}
 80048c2:	bf00      	nop
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80048da:	3b02      	subs	r3, #2
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d812      	bhi.n	8004906 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	885b      	ldrh	r3, [r3, #2]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d113      	bne.n	8004910 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	6839      	ldr	r1, [r7, #0]
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f910 	bl	8004b24 <USBD_CtlSendStatus>
    }
    break;
 8004904:	e004      	b.n	8004910 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8004906:	6839      	ldr	r1, [r7, #0]
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f842 	bl	8004992 <USBD_CtlError>
    break;
 800490e:	e000      	b.n	8004912 <USBD_ClrFeature+0x48>
    break;
 8004910:	bf00      	nop
  }
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781a      	ldrb	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	785a      	ldrb	r2, [r3, #1]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	3302      	adds	r3, #2
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b29a      	uxth	r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	3303      	adds	r3, #3
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	b29b      	uxth	r3, r3
 8004948:	4413      	add	r3, r2
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	3304      	adds	r3, #4
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b29a      	uxth	r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	3305      	adds	r3, #5
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	b29b      	uxth	r3, r3
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	b29b      	uxth	r3, r3
 8004964:	4413      	add	r3, r2
 8004966:	b29a      	uxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	3306      	adds	r3, #6
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	b29a      	uxth	r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	3307      	adds	r3, #7
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	021b      	lsls	r3, r3, #8
 800497e:	b29b      	uxth	r3, r3
 8004980:	4413      	add	r3, r2
 8004982:	b29a      	uxth	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	80da      	strh	r2, [r3, #6]

}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800499c:	2180      	movs	r1, #128	; 0x80
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fcf6 	bl	8005390 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80049a4:	2100      	movs	r1, #0
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fcf2 	bl	8005390 <USBD_LL_StallEP>
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d033      	beq.n	8004a32 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f835 	bl	8004a3a <USBD_GetLen>
 80049d0:	4603      	mov	r3, r0
 80049d2:	3301      	adds	r3, #1
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	881a      	ldrh	r2, [r3, #0]
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	1c59      	adds	r1, r3, #1
 80049e6:	75f9      	strb	r1, [r7, #23]
 80049e8:	4619      	mov	r1, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	440b      	add	r3, r1
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	75fa      	strb	r2, [r7, #23]
 80049f8:	461a      	mov	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	2203      	movs	r2, #3
 8004a00:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8004a02:	e012      	b.n	8004a2a <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	60fa      	str	r2, [r7, #12]
 8004a0a:	7dfa      	ldrb	r2, [r7, #23]
 8004a0c:	1c51      	adds	r1, r2, #1
 8004a0e:	75f9      	strb	r1, [r7, #23]
 8004a10:	4611      	mov	r1, r2
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	440a      	add	r2, r1
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	75fa      	strb	r2, [r7, #23]
 8004a20:	461a      	mov	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4413      	add	r3, r2
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e8      	bne.n	8004a04 <USBD_GetString+0x50>
    }
  } 
}
 8004a32:	bf00      	nop
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8004a46:	e005      	b.n	8004a54 <USBD_GetLen+0x1a>
    {
        len++;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
        buf++;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3301      	adds	r3, #1
 8004a52:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f5      	bne.n	8004a48 <USBD_GetLen+0xe>
    }

    return len;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8004a7e:	88fa      	ldrh	r2, [r7, #6]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8004a84:	88fa      	ldrh	r2, [r7, #6]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	2100      	movs	r1, #0
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fcff 	bl	8005494 <USBD_LL_Transmit>
  
  return USBD_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 fced 	bl	8005494 <USBD_LL_Transmit>
  
  return USBD_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	2100      	movs	r1, #0
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fcf2 	bl	80054da <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	2100      	movs	r1, #0
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fce0 	bl	80054da <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004b34:	2300      	movs	r3, #0
 8004b36:	2200      	movs	r2, #0
 8004b38:	2100      	movs	r1, #0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fcaa 	bl	8005494 <USBD_LL_Transmit>
  
  return USBD_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2205      	movs	r2, #5
 8004b56:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2100      	movs	r1, #0
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fcba 	bl	80054da <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004b74:	2200      	movs	r2, #0
 8004b76:	4912      	ldr	r1, [pc, #72]	; (8004bc0 <MX_USB_DEVICE_Init+0x50>)
 8004b78:	4812      	ldr	r0, [pc, #72]	; (8004bc4 <MX_USB_DEVICE_Init+0x54>)
 8004b7a:	f7ff f8dd 	bl	8003d38 <USBD_Init>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8004b84:	f7fb fc38 	bl	80003f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004b88:	490f      	ldr	r1, [pc, #60]	; (8004bc8 <MX_USB_DEVICE_Init+0x58>)
 8004b8a:	480e      	ldr	r0, [pc, #56]	; (8004bc4 <MX_USB_DEVICE_Init+0x54>)
 8004b8c:	f7ff f8ff 	bl	8003d8e <USBD_RegisterClass>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8004b96:	f7fb fc2f 	bl	80003f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004b9a:	490c      	ldr	r1, [pc, #48]	; (8004bcc <MX_USB_DEVICE_Init+0x5c>)
 8004b9c:	4809      	ldr	r0, [pc, #36]	; (8004bc4 <MX_USB_DEVICE_Init+0x54>)
 8004b9e:	f7ff f835 	bl	8003c0c <USBD_CDC_RegisterInterface>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8004ba8:	f7fb fc26 	bl	80003f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004bac:	4805      	ldr	r0, [pc, #20]	; (8004bc4 <MX_USB_DEVICE_Init+0x54>)
 8004bae:	f7ff f907 	bl	8003dc0 <USBD_Start>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8004bb8:	f7fb fc1e 	bl	80003f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004bbc:	bf00      	nop
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000150 	.word	0x20000150
 8004bc4:	2000045c 	.word	0x2000045c
 8004bc8:	20000038 	.word	0x20000038
 8004bcc:	20000140 	.word	0x20000140

08004bd0 <cdcAvailable>:
uint32_t rx_out = 0;
uint32_t rx_len = 512;
uint8_t rx_buf[512];

uint32_t cdcAvailable(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <cdcAvailable+0x2c>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <cdcAvailable+0x30>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	4a08      	ldr	r2, [pc, #32]	; (8004c04 <cdcAvailable+0x34>)
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004be8:	fb02 f201 	mul.w	r2, r2, r1
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	607b      	str	r3, [r7, #4]

  return ret;
 8004bf0:	687b      	ldr	r3, [r7, #4]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	20000228 	.word	0x20000228
 8004c00:	2000022c 	.word	0x2000022c
 8004c04:	2000013c 	.word	0x2000013c

08004c08 <cdcRead>:

uint8_t cdcRead(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <cdcRead+0x40>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a0e      	ldr	r2, [pc, #56]	; (8004c4c <cdcRead+0x44>)
 8004c14:	5cd3      	ldrb	r3, [r2, r3]
 8004c16:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <cdcRead+0x40>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <cdcRead+0x48>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d00b      	beq.n	8004c3c <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 8004c24:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <cdcRead+0x40>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <cdcRead+0x4c>)
 8004c2c:	6812      	ldr	r2, [r2, #0]
 8004c2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c32:	fb02 f201 	mul.w	r2, r2, r1
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	4a03      	ldr	r2, [pc, #12]	; (8004c48 <cdcRead+0x40>)
 8004c3a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr
 8004c48:	2000022c 	.word	0x2000022c
 8004c4c:	20000e50 	.word	0x20000e50
 8004c50:	20000228 	.word	0x20000228
 8004c54:	2000013c 	.word	0x2000013c

08004c58 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;    // overwrite
 8004c62:	4b0e      	ldr	r3, [pc, #56]	; (8004c9c <cdcDataIn+0x44>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	490e      	ldr	r1, [pc, #56]	; (8004ca0 <cdcDataIn+0x48>)
 8004c68:	79fa      	ldrb	r2, [r7, #7]
 8004c6a:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <cdcDataIn+0x44>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3301      	adds	r3, #1
 8004c72:	4a0c      	ldr	r2, [pc, #48]	; (8004ca4 <cdcDataIn+0x4c>)
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c7a:	fb02 f201 	mul.w	r2, r2, r1
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <cdcDataIn+0x50>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d002      	beq.n	8004c92 <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8004c8c:	4a03      	ldr	r2, [pc, #12]	; (8004c9c <cdcDataIn+0x44>)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6013      	str	r3, [r2, #0]
  }
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	20000228 	.word	0x20000228
 8004ca0:	20000e50 	.word	0x20000e50
 8004ca4:	2000013c 	.word	0x2000013c
 8004ca8:	2000022c 	.word	0x2000022c

08004cac <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8004cb6:	f7fb fafc 	bl	80002b2 <millis>
 8004cba:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f8ba 	bl	8004e3c <CDC_Transmit_FS>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 8004ccc:	7afb      	ldrb	r3, [r7, #11]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <cdcWrite+0x2a>
    {
      return length;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	e00e      	b.n	8004cf4 <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 8004cd6:	7afb      	ldrb	r3, [r7, #11]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d101      	bne.n	8004ce0 <cdcWrite+0x34>
    {
      return 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	e009      	b.n	8004cf4 <cdcWrite+0x48>
    }

    if(millis() - pre_time >= 100)    // time out handling.
 8004ce0:	f7fb fae7 	bl	80002b2 <millis>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b63      	cmp	r3, #99	; 0x63
 8004cec:	d800      	bhi.n	8004cf0 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8004cee:	e7e5      	b.n	8004cbc <cdcWrite+0x10>
    {
      break;
 8004cf0:	bf00      	nop
    }
  }
  return 0;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	4905      	ldr	r1, [pc, #20]	; (8004d18 <CDC_Init_FS+0x1c>)
 8004d04:	4805      	ldr	r0, [pc, #20]	; (8004d1c <CDC_Init_FS+0x20>)
 8004d06:	f7fe ff97 	bl	8003c38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004d0a:	4905      	ldr	r1, [pc, #20]	; (8004d20 <CDC_Init_FS+0x24>)
 8004d0c:	4803      	ldr	r0, [pc, #12]	; (8004d1c <CDC_Init_FS+0x20>)
 8004d0e:	f7fe ffac 	bl	8003c6a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8004d12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000a68 	.word	0x20000a68
 8004d1c:	2000045c 	.word	0x2000045c
 8004d20:	20000680 	.word	0x20000680

08004d24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8004d28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr
	...

08004d34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	6039      	str	r1, [r7, #0]
 8004d3e:	71fb      	strb	r3, [r7, #7]
 8004d40:	4613      	mov	r3, r2
 8004d42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	2b23      	cmp	r3, #35	; 0x23
 8004d48:	d84a      	bhi.n	8004de0 <CDC_Control_FS+0xac>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <CDC_Control_FS+0x1c>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004de1 	.word	0x08004de1
 8004d54:	08004de1 	.word	0x08004de1
 8004d58:	08004de1 	.word	0x08004de1
 8004d5c:	08004de1 	.word	0x08004de1
 8004d60:	08004de1 	.word	0x08004de1
 8004d64:	08004de1 	.word	0x08004de1
 8004d68:	08004de1 	.word	0x08004de1
 8004d6c:	08004de1 	.word	0x08004de1
 8004d70:	08004de1 	.word	0x08004de1
 8004d74:	08004de1 	.word	0x08004de1
 8004d78:	08004de1 	.word	0x08004de1
 8004d7c:	08004de1 	.word	0x08004de1
 8004d80:	08004de1 	.word	0x08004de1
 8004d84:	08004de1 	.word	0x08004de1
 8004d88:	08004de1 	.word	0x08004de1
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004de1 	.word	0x08004de1
 8004d94:	08004de1 	.word	0x08004de1
 8004d98:	08004de1 	.word	0x08004de1
 8004d9c:	08004de1 	.word	0x08004de1
 8004da0:	08004de1 	.word	0x08004de1
 8004da4:	08004de1 	.word	0x08004de1
 8004da8:	08004de1 	.word	0x08004de1
 8004dac:	08004de1 	.word	0x08004de1
 8004db0:	08004de1 	.word	0x08004de1
 8004db4:	08004de1 	.word	0x08004de1
 8004db8:	08004de1 	.word	0x08004de1
 8004dbc:	08004de1 	.word	0x08004de1
 8004dc0:	08004de1 	.word	0x08004de1
 8004dc4:	08004de1 	.word	0x08004de1
 8004dc8:	08004de1 	.word	0x08004de1
 8004dcc:	08004de1 	.word	0x08004de1
 8004dd0:	08004de1 	.word	0x08004de1
 8004dd4:	08004de1 	.word	0x08004de1
 8004dd8:	08004de1 	.word	0x08004de1
 8004ddc:	08004de1 	.word	0x08004de1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004de0:	bf00      	nop
  }

  return (USBD_OK);
 8004de2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop

08004df0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	480e      	ldr	r0, [pc, #56]	; (8004e38 <CDC_Receive_FS+0x48>)
 8004dfe:	f7fe ff34 	bl	8003c6a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004e02:	480d      	ldr	r0, [pc, #52]	; (8004e38 <CDC_Receive_FS+0x48>)
 8004e04:	f7fe ff6e 	bl	8003ce4 <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	e009      	b.n	8004e22 <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff ff1e 	bl	8004c58 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d8f0      	bhi.n	8004e0e <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 8004e2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2000045c 	.word	0x2000045c

08004e3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <CDC_Transmit_FS+0x48>)
 8004e4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004e52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e00b      	b.n	8004e7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004e62:	887b      	ldrh	r3, [r7, #2]
 8004e64:	461a      	mov	r2, r3
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4806      	ldr	r0, [pc, #24]	; (8004e84 <CDC_Transmit_FS+0x48>)
 8004e6a:	f7fe fee5 	bl	8003c38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004e6e:	4805      	ldr	r0, [pc, #20]	; (8004e84 <CDC_Transmit_FS+0x48>)
 8004e70:	f7fe ff0e 	bl	8003c90 <USBD_CDC_TransmitPacket>
 8004e74:	4603      	mov	r3, r0
 8004e76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	2000045c 	.word	0x2000045c

08004e88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	6039      	str	r1, [r7, #0]
 8004e92:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2212      	movs	r2, #18
 8004e98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8004e9a:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	2000016c 	.word	0x2000016c

08004eac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	6039      	str	r1, [r7, #0]
 8004eb6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2204      	movs	r2, #4
 8004ebc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004ebe:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bc80      	pop	{r7}
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000180 	.word	0x20000180

08004ed0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	6039      	str	r1, [r7, #0]
 8004eda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d105      	bne.n	8004eee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	4907      	ldr	r1, [pc, #28]	; (8004f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8004ee6:	4808      	ldr	r0, [pc, #32]	; (8004f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8004ee8:	f7ff fd64 	bl	80049b4 <USBD_GetString>
 8004eec:	e004      	b.n	8004ef8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	4904      	ldr	r1, [pc, #16]	; (8004f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8004ef2:	4805      	ldr	r0, [pc, #20]	; (8004f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8004ef4:	f7ff fd5e 	bl	80049b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004ef8:	4b02      	ldr	r3, [pc, #8]	; (8004f04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20001050 	.word	0x20001050
 8004f08:	08005ef4 	.word	0x08005ef4

08004f0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	6039      	str	r1, [r7, #0]
 8004f16:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	4904      	ldr	r1, [pc, #16]	; (8004f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8004f1c:	4804      	ldr	r0, [pc, #16]	; (8004f30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8004f1e:	f7ff fd49 	bl	80049b4 <USBD_GetString>
  return USBD_StrDesc;
 8004f22:	4b02      	ldr	r3, [pc, #8]	; (8004f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20001050 	.word	0x20001050
 8004f30:	08005f0c 	.word	0x08005f0c

08004f34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	6039      	str	r1, [r7, #0]
 8004f3e:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	221a      	movs	r2, #26
 8004f44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004f46:	f000 f843 	bl	8004fd0 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8004f4a:	4b02      	ldr	r3, [pc, #8]	; (8004f54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000184 	.word	0x20000184

08004f58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	6039      	str	r1, [r7, #0]
 8004f62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d105      	bne.n	8004f76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	4907      	ldr	r1, [pc, #28]	; (8004f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8004f6e:	4808      	ldr	r0, [pc, #32]	; (8004f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004f70:	f7ff fd20 	bl	80049b4 <USBD_GetString>
 8004f74:	e004      	b.n	8004f80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	4904      	ldr	r1, [pc, #16]	; (8004f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8004f7a:	4805      	ldr	r0, [pc, #20]	; (8004f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8004f7c:	f7ff fd1a 	bl	80049b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004f80:	4b02      	ldr	r3, [pc, #8]	; (8004f8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20001050 	.word	0x20001050
 8004f90:	08005f20 	.word	0x08005f20

08004f94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	6039      	str	r1, [r7, #0]
 8004f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d105      	bne.n	8004fb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	4907      	ldr	r1, [pc, #28]	; (8004fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004faa:	4808      	ldr	r0, [pc, #32]	; (8004fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004fac:	f7ff fd02 	bl	80049b4 <USBD_GetString>
 8004fb0:	e004      	b.n	8004fbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	4904      	ldr	r1, [pc, #16]	; (8004fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004fb6:	4805      	ldr	r0, [pc, #20]	; (8004fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004fb8:	f7ff fcfc 	bl	80049b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004fbc:	4b02      	ldr	r3, [pc, #8]	; (8004fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20001050 	.word	0x20001050
 8004fcc:	08005f2c 	.word	0x08005f2c

08004fd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <Get_SerialNum+0x44>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <Get_SerialNum+0x48>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004fe2:	4b0e      	ldr	r3, [pc, #56]	; (800501c <Get_SerialNum+0x4c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	4909      	ldr	r1, [pc, #36]	; (8005020 <Get_SerialNum+0x50>)
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f814 	bl	8005028 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005000:	2204      	movs	r2, #4
 8005002:	4908      	ldr	r1, [pc, #32]	; (8005024 <Get_SerialNum+0x54>)
 8005004:	68b8      	ldr	r0, [r7, #8]
 8005006:	f000 f80f 	bl	8005028 <IntToUnicode>
  }
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	1ffff7e8 	.word	0x1ffff7e8
 8005018:	1ffff7ec 	.word	0x1ffff7ec
 800501c:	1ffff7f0 	.word	0x1ffff7f0
 8005020:	20000186 	.word	0x20000186
 8005024:	20000196 	.word	0x20000196

08005028 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	4613      	mov	r3, r2
 8005034:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800503a:	2300      	movs	r3, #0
 800503c:	75fb      	strb	r3, [r7, #23]
 800503e:	e027      	b.n	8005090 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	0f1b      	lsrs	r3, r3, #28
 8005044:	2b09      	cmp	r3, #9
 8005046:	d80b      	bhi.n	8005060 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	0f1b      	lsrs	r3, r3, #28
 800504c:	b2da      	uxtb	r2, r3
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	4619      	mov	r1, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	440b      	add	r3, r1
 8005058:	3230      	adds	r2, #48	; 0x30
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	e00a      	b.n	8005076 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	0f1b      	lsrs	r3, r3, #28
 8005064:	b2da      	uxtb	r2, r3
 8005066:	7dfb      	ldrb	r3, [r7, #23]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	4619      	mov	r1, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	440b      	add	r3, r1
 8005070:	3237      	adds	r2, #55	; 0x37
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800507c:	7dfb      	ldrb	r3, [r7, #23]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	3301      	adds	r3, #1
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	4413      	add	r3, r2
 8005086:	2200      	movs	r2, #0
 8005088:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800508a:	7dfb      	ldrb	r3, [r7, #23]
 800508c:	3301      	adds	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
 8005090:	7dfa      	ldrb	r2, [r7, #23]
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	429a      	cmp	r2, r3
 8005096:	d3d3      	bcc.n	8005040 <IntToUnicode+0x18>
  }
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr
	...

080050a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0d      	ldr	r2, [pc, #52]	; (80050e8 <HAL_PCD_MspInit+0x44>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d113      	bne.n	80050de <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <HAL_PCD_MspInit+0x48>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	4a0c      	ldr	r2, [pc, #48]	; (80050ec <HAL_PCD_MspInit+0x48>)
 80050bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050c0:	61d3      	str	r3, [r2, #28]
 80050c2:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <HAL_PCD_MspInit+0x48>)
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80050ce:	2200      	movs	r2, #0
 80050d0:	2100      	movs	r1, #0
 80050d2:	2014      	movs	r0, #20
 80050d4:	f7fb fd47 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80050d8:	2014      	movs	r0, #20
 80050da:	f7fb fd60 	bl	8000b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40005c00 	.word	0x40005c00
 80050ec:	40021000 	.word	0x40021000

080050f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8005104:	4619      	mov	r1, r3
 8005106:	4610      	mov	r0, r2
 8005108:	f7fe fea2 	bl	8003e50 <USBD_LL_SetupStage>
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	015b      	lsls	r3, r3, #5
 800512c:	4413      	add	r3, r2
 800512e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	4619      	mov	r1, r3
 8005138:	f7fe fed4 	bl	8003ee4 <USBD_LL_DataOutStage>
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	015b      	lsls	r3, r3, #5
 800515c:	4413      	add	r3, r2
 800515e:	333c      	adds	r3, #60	; 0x3c
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	4619      	mov	r1, r3
 8005166:	f7fe ff18 	bl	8003f9a <USBD_LL_DataInStage>
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe fffb 	bl	800417c <USBD_LL_SOF>
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005196:	2301      	movs	r3, #1
 8005198:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d001      	beq.n	80051a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80051a2:	f7fb f929 	bl	80003f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 80051ac:	7bfa      	ldrb	r2, [r7, #15]
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe ffb0 	bl	8004116 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe ff7b 	bl	80040b8 <USBD_LL_Reset>
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe ffaa 	bl	8004134 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80051e8:	4b04      	ldr	r3, [pc, #16]	; (80051fc <HAL_PCD_SuspendCallback+0x30>)
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	4a03      	ldr	r2, [pc, #12]	; (80051fc <HAL_PCD_SuspendCallback+0x30>)
 80051ee:	f043 0306 	orr.w	r3, r3, #6
 80051f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	e000ed00 	.word	0xe000ed00

08005200 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe ffa4 	bl	800415c <USBD_LL_Resume>
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005224:	4a28      	ldr	r2, [pc, #160]	; (80052c8 <USBD_LL_Init+0xac>)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a26      	ldr	r2, [pc, #152]	; (80052c8 <USBD_LL_Init+0xac>)
 8005230:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8005234:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <USBD_LL_Init+0xac>)
 8005236:	4a25      	ldr	r2, [pc, #148]	; (80052cc <USBD_LL_Init+0xb0>)
 8005238:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800523a:	4b23      	ldr	r3, [pc, #140]	; (80052c8 <USBD_LL_Init+0xac>)
 800523c:	2208      	movs	r2, #8
 800523e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005240:	4b21      	ldr	r3, [pc, #132]	; (80052c8 <USBD_LL_Init+0xac>)
 8005242:	2202      	movs	r2, #2
 8005244:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005246:	4b20      	ldr	r3, [pc, #128]	; (80052c8 <USBD_LL_Init+0xac>)
 8005248:	2200      	movs	r2, #0
 800524a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800524c:	4b1e      	ldr	r3, [pc, #120]	; (80052c8 <USBD_LL_Init+0xac>)
 800524e:	2200      	movs	r2, #0
 8005250:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005252:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <USBD_LL_Init+0xac>)
 8005254:	2200      	movs	r2, #0
 8005256:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005258:	481b      	ldr	r0, [pc, #108]	; (80052c8 <USBD_LL_Init+0xac>)
 800525a:	f7fb fe52 	bl	8000f02 <HAL_PCD_Init>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005264:	f7fb f8c8 	bl	80003f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800526e:	2318      	movs	r3, #24
 8005270:	2200      	movs	r2, #0
 8005272:	2100      	movs	r1, #0
 8005274:	f7fc fd5a 	bl	8001d2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800527e:	2358      	movs	r3, #88	; 0x58
 8005280:	2200      	movs	r2, #0
 8005282:	2180      	movs	r1, #128	; 0x80
 8005284:	f7fc fd52 	bl	8001d2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800528e:	23c0      	movs	r3, #192	; 0xc0
 8005290:	2200      	movs	r2, #0
 8005292:	2181      	movs	r1, #129	; 0x81
 8005294:	f7fc fd4a 	bl	8001d2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800529e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80052a2:	2200      	movs	r2, #0
 80052a4:	2101      	movs	r1, #1
 80052a6:	f7fc fd41 	bl	8001d2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80052b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052b4:	2200      	movs	r2, #0
 80052b6:	2182      	movs	r1, #130	; 0x82
 80052b8:	f7fc fd38 	bl	8001d2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20001250 	.word	0x20001250
 80052cc:	40005c00 	.word	0x40005c00

080052d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb fee5 	bl	80010b6 <HAL_PCD_Start>
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f948 	bl	8005588 <USBD_Get_USB_Status>
 80052f8:	4603      	mov	r3, r0
 80052fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	4608      	mov	r0, r1
 8005310:	4611      	mov	r1, r2
 8005312:	461a      	mov	r2, r3
 8005314:	4603      	mov	r3, r0
 8005316:	70fb      	strb	r3, [r7, #3]
 8005318:	460b      	mov	r3, r1
 800531a:	70bb      	strb	r3, [r7, #2]
 800531c:	4613      	mov	r3, r2
 800531e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800532e:	78bb      	ldrb	r3, [r7, #2]
 8005330:	883a      	ldrh	r2, [r7, #0]
 8005332:	78f9      	ldrb	r1, [r7, #3]
 8005334:	f7fc f80c 	bl	8001350 <HAL_PCD_EP_Open>
 8005338:	4603      	mov	r3, r0
 800533a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f922 	bl	8005588 <USBD_Get_USB_Status>
 8005344:	4603      	mov	r3, r0
 8005346:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005348:	7bbb      	ldrb	r3, [r7, #14]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800536c:	78fa      	ldrb	r2, [r7, #3]
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f7fc f842 	bl	80013fa <HAL_PCD_EP_Close>
 8005376:	4603      	mov	r3, r0
 8005378:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f903 	bl	8005588 <USBD_Get_USB_Status>
 8005382:	4603      	mov	r3, r0
 8005384:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005386:	7bbb      	ldrb	r3, [r7, #14]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	4611      	mov	r1, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fc f8f5 	bl	800159e <HAL_PCD_EP_SetStall>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f8e4 	bl	8005588 <USBD_Get_USB_Status>
 80053c0:	4603      	mov	r3, r0
 80053c2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80053c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	4611      	mov	r1, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fc f92b 	bl	8001648 <HAL_PCD_EP_ClrStall>
 80053f2:	4603      	mov	r3, r0
 80053f4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 f8c5 	bl	8005588 <USBD_Get_USB_Status>
 80053fe:	4603      	mov	r3, r0
 8005400:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005402:	7bbb      	ldrb	r3, [r7, #14]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800541e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005424:	2b00      	cmp	r3, #0
 8005426:	da08      	bge.n	800543a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	015b      	lsls	r3, r3, #5
 8005432:	4413      	add	r3, r2
 8005434:	332a      	adds	r3, #42	; 0x2a
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	e008      	b.n	800544c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	015b      	lsls	r3, r3, #5
 8005444:	4413      	add	r3, r2
 8005446:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800544a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr

08005456 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	460b      	mov	r3, r1
 8005460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	4611      	mov	r1, r2
 8005474:	4618      	mov	r0, r3
 8005476:	f7fb ff46 	bl	8001306 <HAL_PCD_SetAddress>
 800547a:	4603      	mov	r3, r0
 800547c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f881 	bl	8005588 <USBD_Get_USB_Status>
 8005486:	4603      	mov	r3, r0
 8005488:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800548a:	7bbb      	ldrb	r3, [r7, #14]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	461a      	mov	r2, r3
 80054a0:	460b      	mov	r3, r1
 80054a2:	72fb      	strb	r3, [r7, #11]
 80054a4:	4613      	mov	r3, r2
 80054a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80054b6:	893b      	ldrh	r3, [r7, #8]
 80054b8:	7af9      	ldrb	r1, [r7, #11]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	f7fc f834 	bl	8001528 <HAL_PCD_EP_Transmit>
 80054c0:	4603      	mov	r3, r0
 80054c2:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f85e 	bl	8005588 <USBD_Get_USB_Status>
 80054cc:	4603      	mov	r3, r0
 80054ce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80054d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b086      	sub	sp, #24
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	461a      	mov	r2, r3
 80054e6:	460b      	mov	r3, r1
 80054e8:	72fb      	strb	r3, [r7, #11]
 80054ea:	4613      	mov	r3, r2
 80054ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80054fc:	893b      	ldrh	r3, [r7, #8]
 80054fe:	7af9      	ldrb	r1, [r7, #11]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	f7fb ffc0 	bl	8001486 <HAL_PCD_EP_Receive>
 8005506:	4603      	mov	r3, r0
 8005508:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800550a:	7dfb      	ldrb	r3, [r7, #23]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 f83b 	bl	8005588 <USBD_Get_USB_Status>
 8005512:	4603      	mov	r3, r0
 8005514:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005516:	7dbb      	ldrb	r3, [r7, #22]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	4611      	mov	r1, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f7fb ffe1 	bl	80014fe <HAL_PCD_EP_GetRxCount>
 800553c:	4603      	mov	r3, r0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005550:	4b02      	ldr	r3, [pc, #8]	; (800555c <USBD_static_malloc+0x14>)
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr
 800555c:	20000230 	.word	0x20000230

08005560 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr

08005572 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	2b03      	cmp	r3, #3
 800559a:	d817      	bhi.n	80055cc <USBD_Get_USB_Status+0x44>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <USBD_Get_USB_Status+0x1c>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055b5 	.word	0x080055b5
 80055a8:	080055bb 	.word	0x080055bb
 80055ac:	080055c1 	.word	0x080055c1
 80055b0:	080055c7 	.word	0x080055c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	73fb      	strb	r3, [r7, #15]
    break;
 80055b8:	e00b      	b.n	80055d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80055ba:	2302      	movs	r3, #2
 80055bc:	73fb      	strb	r3, [r7, #15]
    break;
 80055be:	e008      	b.n	80055d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
    break;
 80055c4:	e005      	b.n	80055d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80055c6:	2302      	movs	r3, #2
 80055c8:	73fb      	strb	r3, [r7, #15]
    break;
 80055ca:	e002      	b.n	80055d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80055cc:	2302      	movs	r3, #2
 80055ce:	73fb      	strb	r3, [r7, #15]
    break;
 80055d0:	bf00      	nop
  }
  return usb_status;
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop

080055e0 <main>:
 */

#include "main.h"

int main(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  hwInit();
 80055e4:	f7fb f95c 	bl	80008a0 <hwInit>
  apInit();
 80055e8:	f7fa fe1c 	bl	8000224 <apInit>

  apMain();
 80055ec:	f7fa fe24 	bl	8000238 <apMain>

  return 0;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <__errno>:
 80055f8:	4b01      	ldr	r3, [pc, #4]	; (8005600 <__errno+0x8>)
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	200001a0 	.word	0x200001a0

08005604 <__libc_init_array>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	2500      	movs	r5, #0
 8005608:	4e0c      	ldr	r6, [pc, #48]	; (800563c <__libc_init_array+0x38>)
 800560a:	4c0d      	ldr	r4, [pc, #52]	; (8005640 <__libc_init_array+0x3c>)
 800560c:	1ba4      	subs	r4, r4, r6
 800560e:	10a4      	asrs	r4, r4, #2
 8005610:	42a5      	cmp	r5, r4
 8005612:	d109      	bne.n	8005628 <__libc_init_array+0x24>
 8005614:	f000 fc4e 	bl	8005eb4 <_init>
 8005618:	2500      	movs	r5, #0
 800561a:	4e0a      	ldr	r6, [pc, #40]	; (8005644 <__libc_init_array+0x40>)
 800561c:	4c0a      	ldr	r4, [pc, #40]	; (8005648 <__libc_init_array+0x44>)
 800561e:	1ba4      	subs	r4, r4, r6
 8005620:	10a4      	asrs	r4, r4, #2
 8005622:	42a5      	cmp	r5, r4
 8005624:	d105      	bne.n	8005632 <__libc_init_array+0x2e>
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800562c:	4798      	blx	r3
 800562e:	3501      	adds	r5, #1
 8005630:	e7ee      	b.n	8005610 <__libc_init_array+0xc>
 8005632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005636:	4798      	blx	r3
 8005638:	3501      	adds	r5, #1
 800563a:	e7f2      	b.n	8005622 <__libc_init_array+0x1e>
 800563c:	08005f80 	.word	0x08005f80
 8005640:	08005f80 	.word	0x08005f80
 8005644:	08005f80 	.word	0x08005f80
 8005648:	08005f84 	.word	0x08005f84

0800564c <memset>:
 800564c:	4603      	mov	r3, r0
 800564e:	4402      	add	r2, r0
 8005650:	4293      	cmp	r3, r2
 8005652:	d100      	bne.n	8005656 <memset+0xa>
 8005654:	4770      	bx	lr
 8005656:	f803 1b01 	strb.w	r1, [r3], #1
 800565a:	e7f9      	b.n	8005650 <memset+0x4>

0800565c <_vsniprintf_r>:
 800565c:	b530      	push	{r4, r5, lr}
 800565e:	1e14      	subs	r4, r2, #0
 8005660:	4605      	mov	r5, r0
 8005662:	b09b      	sub	sp, #108	; 0x6c
 8005664:	4618      	mov	r0, r3
 8005666:	da05      	bge.n	8005674 <_vsniprintf_r+0x18>
 8005668:	238b      	movs	r3, #139	; 0x8b
 800566a:	f04f 30ff 	mov.w	r0, #4294967295
 800566e:	602b      	str	r3, [r5, #0]
 8005670:	b01b      	add	sp, #108	; 0x6c
 8005672:	bd30      	pop	{r4, r5, pc}
 8005674:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005678:	f8ad 300c 	strh.w	r3, [sp, #12]
 800567c:	bf0c      	ite	eq
 800567e:	4623      	moveq	r3, r4
 8005680:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005684:	9302      	str	r3, [sp, #8]
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800568c:	9100      	str	r1, [sp, #0]
 800568e:	9104      	str	r1, [sp, #16]
 8005690:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005694:	4602      	mov	r2, r0
 8005696:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005698:	4669      	mov	r1, sp
 800569a:	4628      	mov	r0, r5
 800569c:	f000 f872 	bl	8005784 <_svfiprintf_r>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	bfbc      	itt	lt
 80056a4:	238b      	movlt	r3, #139	; 0x8b
 80056a6:	602b      	strlt	r3, [r5, #0]
 80056a8:	2c00      	cmp	r4, #0
 80056aa:	d0e1      	beq.n	8005670 <_vsniprintf_r+0x14>
 80056ac:	2200      	movs	r2, #0
 80056ae:	9b00      	ldr	r3, [sp, #0]
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e7dd      	b.n	8005670 <_vsniprintf_r+0x14>

080056b4 <vsniprintf>:
 80056b4:	b507      	push	{r0, r1, r2, lr}
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	4613      	mov	r3, r2
 80056ba:	460a      	mov	r2, r1
 80056bc:	4601      	mov	r1, r0
 80056be:	4803      	ldr	r0, [pc, #12]	; (80056cc <vsniprintf+0x18>)
 80056c0:	6800      	ldr	r0, [r0, #0]
 80056c2:	f7ff ffcb 	bl	800565c <_vsniprintf_r>
 80056c6:	b003      	add	sp, #12
 80056c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80056cc:	200001a0 	.word	0x200001a0

080056d0 <__ssputs_r>:
 80056d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d4:	688e      	ldr	r6, [r1, #8]
 80056d6:	4682      	mov	sl, r0
 80056d8:	429e      	cmp	r6, r3
 80056da:	460c      	mov	r4, r1
 80056dc:	4690      	mov	r8, r2
 80056de:	4699      	mov	r9, r3
 80056e0:	d837      	bhi.n	8005752 <__ssputs_r+0x82>
 80056e2:	898a      	ldrh	r2, [r1, #12]
 80056e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056e8:	d031      	beq.n	800574e <__ssputs_r+0x7e>
 80056ea:	2302      	movs	r3, #2
 80056ec:	6825      	ldr	r5, [r4, #0]
 80056ee:	6909      	ldr	r1, [r1, #16]
 80056f0:	1a6f      	subs	r7, r5, r1
 80056f2:	6965      	ldr	r5, [r4, #20]
 80056f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80056fc:	f109 0301 	add.w	r3, r9, #1
 8005700:	443b      	add	r3, r7
 8005702:	429d      	cmp	r5, r3
 8005704:	bf38      	it	cc
 8005706:	461d      	movcc	r5, r3
 8005708:	0553      	lsls	r3, r2, #21
 800570a:	d530      	bpl.n	800576e <__ssputs_r+0x9e>
 800570c:	4629      	mov	r1, r5
 800570e:	f000 fb37 	bl	8005d80 <_malloc_r>
 8005712:	4606      	mov	r6, r0
 8005714:	b950      	cbnz	r0, 800572c <__ssputs_r+0x5c>
 8005716:	230c      	movs	r3, #12
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	f8ca 3000 	str.w	r3, [sl]
 8005720:	89a3      	ldrh	r3, [r4, #12]
 8005722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005726:	81a3      	strh	r3, [r4, #12]
 8005728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800572c:	463a      	mov	r2, r7
 800572e:	6921      	ldr	r1, [r4, #16]
 8005730:	f000 fab6 	bl	8005ca0 <memcpy>
 8005734:	89a3      	ldrh	r3, [r4, #12]
 8005736:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800573a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573e:	81a3      	strh	r3, [r4, #12]
 8005740:	6126      	str	r6, [r4, #16]
 8005742:	443e      	add	r6, r7
 8005744:	6026      	str	r6, [r4, #0]
 8005746:	464e      	mov	r6, r9
 8005748:	6165      	str	r5, [r4, #20]
 800574a:	1bed      	subs	r5, r5, r7
 800574c:	60a5      	str	r5, [r4, #8]
 800574e:	454e      	cmp	r6, r9
 8005750:	d900      	bls.n	8005754 <__ssputs_r+0x84>
 8005752:	464e      	mov	r6, r9
 8005754:	4632      	mov	r2, r6
 8005756:	4641      	mov	r1, r8
 8005758:	6820      	ldr	r0, [r4, #0]
 800575a:	f000 faac 	bl	8005cb6 <memmove>
 800575e:	68a3      	ldr	r3, [r4, #8]
 8005760:	2000      	movs	r0, #0
 8005762:	1b9b      	subs	r3, r3, r6
 8005764:	60a3      	str	r3, [r4, #8]
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	441e      	add	r6, r3
 800576a:	6026      	str	r6, [r4, #0]
 800576c:	e7dc      	b.n	8005728 <__ssputs_r+0x58>
 800576e:	462a      	mov	r2, r5
 8005770:	f000 fb60 	bl	8005e34 <_realloc_r>
 8005774:	4606      	mov	r6, r0
 8005776:	2800      	cmp	r0, #0
 8005778:	d1e2      	bne.n	8005740 <__ssputs_r+0x70>
 800577a:	6921      	ldr	r1, [r4, #16]
 800577c:	4650      	mov	r0, sl
 800577e:	f000 fab3 	bl	8005ce8 <_free_r>
 8005782:	e7c8      	b.n	8005716 <__ssputs_r+0x46>

08005784 <_svfiprintf_r>:
 8005784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005788:	461d      	mov	r5, r3
 800578a:	898b      	ldrh	r3, [r1, #12]
 800578c:	b09d      	sub	sp, #116	; 0x74
 800578e:	061f      	lsls	r7, r3, #24
 8005790:	4680      	mov	r8, r0
 8005792:	460c      	mov	r4, r1
 8005794:	4616      	mov	r6, r2
 8005796:	d50f      	bpl.n	80057b8 <_svfiprintf_r+0x34>
 8005798:	690b      	ldr	r3, [r1, #16]
 800579a:	b96b      	cbnz	r3, 80057b8 <_svfiprintf_r+0x34>
 800579c:	2140      	movs	r1, #64	; 0x40
 800579e:	f000 faef 	bl	8005d80 <_malloc_r>
 80057a2:	6020      	str	r0, [r4, #0]
 80057a4:	6120      	str	r0, [r4, #16]
 80057a6:	b928      	cbnz	r0, 80057b4 <_svfiprintf_r+0x30>
 80057a8:	230c      	movs	r3, #12
 80057aa:	f8c8 3000 	str.w	r3, [r8]
 80057ae:	f04f 30ff 	mov.w	r0, #4294967295
 80057b2:	e0c8      	b.n	8005946 <_svfiprintf_r+0x1c2>
 80057b4:	2340      	movs	r3, #64	; 0x40
 80057b6:	6163      	str	r3, [r4, #20]
 80057b8:	2300      	movs	r3, #0
 80057ba:	9309      	str	r3, [sp, #36]	; 0x24
 80057bc:	2320      	movs	r3, #32
 80057be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057c2:	2330      	movs	r3, #48	; 0x30
 80057c4:	f04f 0b01 	mov.w	fp, #1
 80057c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057cc:	9503      	str	r5, [sp, #12]
 80057ce:	4637      	mov	r7, r6
 80057d0:	463d      	mov	r5, r7
 80057d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80057d6:	b10b      	cbz	r3, 80057dc <_svfiprintf_r+0x58>
 80057d8:	2b25      	cmp	r3, #37	; 0x25
 80057da:	d13e      	bne.n	800585a <_svfiprintf_r+0xd6>
 80057dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80057e0:	d00b      	beq.n	80057fa <_svfiprintf_r+0x76>
 80057e2:	4653      	mov	r3, sl
 80057e4:	4632      	mov	r2, r6
 80057e6:	4621      	mov	r1, r4
 80057e8:	4640      	mov	r0, r8
 80057ea:	f7ff ff71 	bl	80056d0 <__ssputs_r>
 80057ee:	3001      	adds	r0, #1
 80057f0:	f000 80a4 	beq.w	800593c <_svfiprintf_r+0x1b8>
 80057f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f6:	4453      	add	r3, sl
 80057f8:	9309      	str	r3, [sp, #36]	; 0x24
 80057fa:	783b      	ldrb	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 809d 	beq.w	800593c <_svfiprintf_r+0x1b8>
 8005802:	2300      	movs	r3, #0
 8005804:	f04f 32ff 	mov.w	r2, #4294967295
 8005808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800580c:	9304      	str	r3, [sp, #16]
 800580e:	9307      	str	r3, [sp, #28]
 8005810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005814:	931a      	str	r3, [sp, #104]	; 0x68
 8005816:	462f      	mov	r7, r5
 8005818:	2205      	movs	r2, #5
 800581a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800581e:	4850      	ldr	r0, [pc, #320]	; (8005960 <_svfiprintf_r+0x1dc>)
 8005820:	f000 fa30 	bl	8005c84 <memchr>
 8005824:	9b04      	ldr	r3, [sp, #16]
 8005826:	b9d0      	cbnz	r0, 800585e <_svfiprintf_r+0xda>
 8005828:	06d9      	lsls	r1, r3, #27
 800582a:	bf44      	itt	mi
 800582c:	2220      	movmi	r2, #32
 800582e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005832:	071a      	lsls	r2, r3, #28
 8005834:	bf44      	itt	mi
 8005836:	222b      	movmi	r2, #43	; 0x2b
 8005838:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800583c:	782a      	ldrb	r2, [r5, #0]
 800583e:	2a2a      	cmp	r2, #42	; 0x2a
 8005840:	d015      	beq.n	800586e <_svfiprintf_r+0xea>
 8005842:	462f      	mov	r7, r5
 8005844:	2000      	movs	r0, #0
 8005846:	250a      	movs	r5, #10
 8005848:	9a07      	ldr	r2, [sp, #28]
 800584a:	4639      	mov	r1, r7
 800584c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005850:	3b30      	subs	r3, #48	; 0x30
 8005852:	2b09      	cmp	r3, #9
 8005854:	d94d      	bls.n	80058f2 <_svfiprintf_r+0x16e>
 8005856:	b1b8      	cbz	r0, 8005888 <_svfiprintf_r+0x104>
 8005858:	e00f      	b.n	800587a <_svfiprintf_r+0xf6>
 800585a:	462f      	mov	r7, r5
 800585c:	e7b8      	b.n	80057d0 <_svfiprintf_r+0x4c>
 800585e:	4a40      	ldr	r2, [pc, #256]	; (8005960 <_svfiprintf_r+0x1dc>)
 8005860:	463d      	mov	r5, r7
 8005862:	1a80      	subs	r0, r0, r2
 8005864:	fa0b f000 	lsl.w	r0, fp, r0
 8005868:	4318      	orrs	r0, r3
 800586a:	9004      	str	r0, [sp, #16]
 800586c:	e7d3      	b.n	8005816 <_svfiprintf_r+0x92>
 800586e:	9a03      	ldr	r2, [sp, #12]
 8005870:	1d11      	adds	r1, r2, #4
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	9103      	str	r1, [sp, #12]
 8005876:	2a00      	cmp	r2, #0
 8005878:	db01      	blt.n	800587e <_svfiprintf_r+0xfa>
 800587a:	9207      	str	r2, [sp, #28]
 800587c:	e004      	b.n	8005888 <_svfiprintf_r+0x104>
 800587e:	4252      	negs	r2, r2
 8005880:	f043 0302 	orr.w	r3, r3, #2
 8005884:	9207      	str	r2, [sp, #28]
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	783b      	ldrb	r3, [r7, #0]
 800588a:	2b2e      	cmp	r3, #46	; 0x2e
 800588c:	d10c      	bne.n	80058a8 <_svfiprintf_r+0x124>
 800588e:	787b      	ldrb	r3, [r7, #1]
 8005890:	2b2a      	cmp	r3, #42	; 0x2a
 8005892:	d133      	bne.n	80058fc <_svfiprintf_r+0x178>
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	3702      	adds	r7, #2
 8005898:	1d1a      	adds	r2, r3, #4
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	9203      	str	r2, [sp, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bfb8      	it	lt
 80058a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80058a6:	9305      	str	r3, [sp, #20]
 80058a8:	4d2e      	ldr	r5, [pc, #184]	; (8005964 <_svfiprintf_r+0x1e0>)
 80058aa:	2203      	movs	r2, #3
 80058ac:	7839      	ldrb	r1, [r7, #0]
 80058ae:	4628      	mov	r0, r5
 80058b0:	f000 f9e8 	bl	8005c84 <memchr>
 80058b4:	b138      	cbz	r0, 80058c6 <_svfiprintf_r+0x142>
 80058b6:	2340      	movs	r3, #64	; 0x40
 80058b8:	1b40      	subs	r0, r0, r5
 80058ba:	fa03 f000 	lsl.w	r0, r3, r0
 80058be:	9b04      	ldr	r3, [sp, #16]
 80058c0:	3701      	adds	r7, #1
 80058c2:	4303      	orrs	r3, r0
 80058c4:	9304      	str	r3, [sp, #16]
 80058c6:	7839      	ldrb	r1, [r7, #0]
 80058c8:	2206      	movs	r2, #6
 80058ca:	4827      	ldr	r0, [pc, #156]	; (8005968 <_svfiprintf_r+0x1e4>)
 80058cc:	1c7e      	adds	r6, r7, #1
 80058ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058d2:	f000 f9d7 	bl	8005c84 <memchr>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d038      	beq.n	800594c <_svfiprintf_r+0x1c8>
 80058da:	4b24      	ldr	r3, [pc, #144]	; (800596c <_svfiprintf_r+0x1e8>)
 80058dc:	bb13      	cbnz	r3, 8005924 <_svfiprintf_r+0x1a0>
 80058de:	9b03      	ldr	r3, [sp, #12]
 80058e0:	3307      	adds	r3, #7
 80058e2:	f023 0307 	bic.w	r3, r3, #7
 80058e6:	3308      	adds	r3, #8
 80058e8:	9303      	str	r3, [sp, #12]
 80058ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ec:	444b      	add	r3, r9
 80058ee:	9309      	str	r3, [sp, #36]	; 0x24
 80058f0:	e76d      	b.n	80057ce <_svfiprintf_r+0x4a>
 80058f2:	fb05 3202 	mla	r2, r5, r2, r3
 80058f6:	2001      	movs	r0, #1
 80058f8:	460f      	mov	r7, r1
 80058fa:	e7a6      	b.n	800584a <_svfiprintf_r+0xc6>
 80058fc:	2300      	movs	r3, #0
 80058fe:	250a      	movs	r5, #10
 8005900:	4619      	mov	r1, r3
 8005902:	3701      	adds	r7, #1
 8005904:	9305      	str	r3, [sp, #20]
 8005906:	4638      	mov	r0, r7
 8005908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800590c:	3a30      	subs	r2, #48	; 0x30
 800590e:	2a09      	cmp	r2, #9
 8005910:	d903      	bls.n	800591a <_svfiprintf_r+0x196>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0c8      	beq.n	80058a8 <_svfiprintf_r+0x124>
 8005916:	9105      	str	r1, [sp, #20]
 8005918:	e7c6      	b.n	80058a8 <_svfiprintf_r+0x124>
 800591a:	fb05 2101 	mla	r1, r5, r1, r2
 800591e:	2301      	movs	r3, #1
 8005920:	4607      	mov	r7, r0
 8005922:	e7f0      	b.n	8005906 <_svfiprintf_r+0x182>
 8005924:	ab03      	add	r3, sp, #12
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	4622      	mov	r2, r4
 800592a:	4b11      	ldr	r3, [pc, #68]	; (8005970 <_svfiprintf_r+0x1ec>)
 800592c:	a904      	add	r1, sp, #16
 800592e:	4640      	mov	r0, r8
 8005930:	f3af 8000 	nop.w
 8005934:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005938:	4681      	mov	r9, r0
 800593a:	d1d6      	bne.n	80058ea <_svfiprintf_r+0x166>
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	065b      	lsls	r3, r3, #25
 8005940:	f53f af35 	bmi.w	80057ae <_svfiprintf_r+0x2a>
 8005944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005946:	b01d      	add	sp, #116	; 0x74
 8005948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594c:	ab03      	add	r3, sp, #12
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	4622      	mov	r2, r4
 8005952:	4b07      	ldr	r3, [pc, #28]	; (8005970 <_svfiprintf_r+0x1ec>)
 8005954:	a904      	add	r1, sp, #16
 8005956:	4640      	mov	r0, r8
 8005958:	f000 f882 	bl	8005a60 <_printf_i>
 800595c:	e7ea      	b.n	8005934 <_svfiprintf_r+0x1b0>
 800595e:	bf00      	nop
 8005960:	08005f4c 	.word	0x08005f4c
 8005964:	08005f52 	.word	0x08005f52
 8005968:	08005f56 	.word	0x08005f56
 800596c:	00000000 	.word	0x00000000
 8005970:	080056d1 	.word	0x080056d1

08005974 <_printf_common>:
 8005974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005978:	4691      	mov	r9, r2
 800597a:	461f      	mov	r7, r3
 800597c:	688a      	ldr	r2, [r1, #8]
 800597e:	690b      	ldr	r3, [r1, #16]
 8005980:	4606      	mov	r6, r0
 8005982:	4293      	cmp	r3, r2
 8005984:	bfb8      	it	lt
 8005986:	4613      	movlt	r3, r2
 8005988:	f8c9 3000 	str.w	r3, [r9]
 800598c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005990:	460c      	mov	r4, r1
 8005992:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005996:	b112      	cbz	r2, 800599e <_printf_common+0x2a>
 8005998:	3301      	adds	r3, #1
 800599a:	f8c9 3000 	str.w	r3, [r9]
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	0699      	lsls	r1, r3, #26
 80059a2:	bf42      	ittt	mi
 80059a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80059a8:	3302      	addmi	r3, #2
 80059aa:	f8c9 3000 	strmi.w	r3, [r9]
 80059ae:	6825      	ldr	r5, [r4, #0]
 80059b0:	f015 0506 	ands.w	r5, r5, #6
 80059b4:	d107      	bne.n	80059c6 <_printf_common+0x52>
 80059b6:	f104 0a19 	add.w	sl, r4, #25
 80059ba:	68e3      	ldr	r3, [r4, #12]
 80059bc:	f8d9 2000 	ldr.w	r2, [r9]
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	42ab      	cmp	r3, r5
 80059c4:	dc29      	bgt.n	8005a1a <_printf_common+0xa6>
 80059c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	3300      	adds	r3, #0
 80059ce:	bf18      	it	ne
 80059d0:	2301      	movne	r3, #1
 80059d2:	0692      	lsls	r2, r2, #26
 80059d4:	d42e      	bmi.n	8005a34 <_printf_common+0xc0>
 80059d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059da:	4639      	mov	r1, r7
 80059dc:	4630      	mov	r0, r6
 80059de:	47c0      	blx	r8
 80059e0:	3001      	adds	r0, #1
 80059e2:	d021      	beq.n	8005a28 <_printf_common+0xb4>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	68e5      	ldr	r5, [r4, #12]
 80059e8:	f003 0306 	and.w	r3, r3, #6
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	bf18      	it	ne
 80059f0:	2500      	movne	r5, #0
 80059f2:	f8d9 2000 	ldr.w	r2, [r9]
 80059f6:	f04f 0900 	mov.w	r9, #0
 80059fa:	bf08      	it	eq
 80059fc:	1aad      	subeq	r5, r5, r2
 80059fe:	68a3      	ldr	r3, [r4, #8]
 8005a00:	6922      	ldr	r2, [r4, #16]
 8005a02:	bf08      	it	eq
 8005a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	bfc4      	itt	gt
 8005a0c:	1a9b      	subgt	r3, r3, r2
 8005a0e:	18ed      	addgt	r5, r5, r3
 8005a10:	341a      	adds	r4, #26
 8005a12:	454d      	cmp	r5, r9
 8005a14:	d11a      	bne.n	8005a4c <_printf_common+0xd8>
 8005a16:	2000      	movs	r0, #0
 8005a18:	e008      	b.n	8005a2c <_printf_common+0xb8>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4652      	mov	r2, sl
 8005a1e:	4639      	mov	r1, r7
 8005a20:	4630      	mov	r0, r6
 8005a22:	47c0      	blx	r8
 8005a24:	3001      	adds	r0, #1
 8005a26:	d103      	bne.n	8005a30 <_printf_common+0xbc>
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a30:	3501      	adds	r5, #1
 8005a32:	e7c2      	b.n	80059ba <_printf_common+0x46>
 8005a34:	2030      	movs	r0, #48	; 0x30
 8005a36:	18e1      	adds	r1, r4, r3
 8005a38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a42:	4422      	add	r2, r4
 8005a44:	3302      	adds	r3, #2
 8005a46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a4a:	e7c4      	b.n	80059d6 <_printf_common+0x62>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	4622      	mov	r2, r4
 8005a50:	4639      	mov	r1, r7
 8005a52:	4630      	mov	r0, r6
 8005a54:	47c0      	blx	r8
 8005a56:	3001      	adds	r0, #1
 8005a58:	d0e6      	beq.n	8005a28 <_printf_common+0xb4>
 8005a5a:	f109 0901 	add.w	r9, r9, #1
 8005a5e:	e7d8      	b.n	8005a12 <_printf_common+0x9e>

08005a60 <_printf_i>:
 8005a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a68:	460c      	mov	r4, r1
 8005a6a:	7e09      	ldrb	r1, [r1, #24]
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	296e      	cmp	r1, #110	; 0x6e
 8005a70:	4617      	mov	r7, r2
 8005a72:	4606      	mov	r6, r0
 8005a74:	4698      	mov	r8, r3
 8005a76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a78:	f000 80b3 	beq.w	8005be2 <_printf_i+0x182>
 8005a7c:	d822      	bhi.n	8005ac4 <_printf_i+0x64>
 8005a7e:	2963      	cmp	r1, #99	; 0x63
 8005a80:	d036      	beq.n	8005af0 <_printf_i+0x90>
 8005a82:	d80a      	bhi.n	8005a9a <_printf_i+0x3a>
 8005a84:	2900      	cmp	r1, #0
 8005a86:	f000 80b9 	beq.w	8005bfc <_printf_i+0x19c>
 8005a8a:	2958      	cmp	r1, #88	; 0x58
 8005a8c:	f000 8083 	beq.w	8005b96 <_printf_i+0x136>
 8005a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005a98:	e032      	b.n	8005b00 <_printf_i+0xa0>
 8005a9a:	2964      	cmp	r1, #100	; 0x64
 8005a9c:	d001      	beq.n	8005aa2 <_printf_i+0x42>
 8005a9e:	2969      	cmp	r1, #105	; 0x69
 8005aa0:	d1f6      	bne.n	8005a90 <_printf_i+0x30>
 8005aa2:	6820      	ldr	r0, [r4, #0]
 8005aa4:	6813      	ldr	r3, [r2, #0]
 8005aa6:	0605      	lsls	r5, r0, #24
 8005aa8:	f103 0104 	add.w	r1, r3, #4
 8005aac:	d52a      	bpl.n	8005b04 <_printf_i+0xa4>
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6011      	str	r1, [r2, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	da03      	bge.n	8005abe <_printf_i+0x5e>
 8005ab6:	222d      	movs	r2, #45	; 0x2d
 8005ab8:	425b      	negs	r3, r3
 8005aba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005abe:	486f      	ldr	r0, [pc, #444]	; (8005c7c <_printf_i+0x21c>)
 8005ac0:	220a      	movs	r2, #10
 8005ac2:	e039      	b.n	8005b38 <_printf_i+0xd8>
 8005ac4:	2973      	cmp	r1, #115	; 0x73
 8005ac6:	f000 809d 	beq.w	8005c04 <_printf_i+0x1a4>
 8005aca:	d808      	bhi.n	8005ade <_printf_i+0x7e>
 8005acc:	296f      	cmp	r1, #111	; 0x6f
 8005ace:	d020      	beq.n	8005b12 <_printf_i+0xb2>
 8005ad0:	2970      	cmp	r1, #112	; 0x70
 8005ad2:	d1dd      	bne.n	8005a90 <_printf_i+0x30>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	f043 0320 	orr.w	r3, r3, #32
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	e003      	b.n	8005ae6 <_printf_i+0x86>
 8005ade:	2975      	cmp	r1, #117	; 0x75
 8005ae0:	d017      	beq.n	8005b12 <_printf_i+0xb2>
 8005ae2:	2978      	cmp	r1, #120	; 0x78
 8005ae4:	d1d4      	bne.n	8005a90 <_printf_i+0x30>
 8005ae6:	2378      	movs	r3, #120	; 0x78
 8005ae8:	4865      	ldr	r0, [pc, #404]	; (8005c80 <_printf_i+0x220>)
 8005aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005aee:	e055      	b.n	8005b9c <_printf_i+0x13c>
 8005af0:	6813      	ldr	r3, [r2, #0]
 8005af2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005af6:	1d19      	adds	r1, r3, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6011      	str	r1, [r2, #0]
 8005afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b00:	2301      	movs	r3, #1
 8005b02:	e08c      	b.n	8005c1e <_printf_i+0x1be>
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b0a:	6011      	str	r1, [r2, #0]
 8005b0c:	bf18      	it	ne
 8005b0e:	b21b      	sxthne	r3, r3
 8005b10:	e7cf      	b.n	8005ab2 <_printf_i+0x52>
 8005b12:	6813      	ldr	r3, [r2, #0]
 8005b14:	6825      	ldr	r5, [r4, #0]
 8005b16:	1d18      	adds	r0, r3, #4
 8005b18:	6010      	str	r0, [r2, #0]
 8005b1a:	0628      	lsls	r0, r5, #24
 8005b1c:	d501      	bpl.n	8005b22 <_printf_i+0xc2>
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	e002      	b.n	8005b28 <_printf_i+0xc8>
 8005b22:	0668      	lsls	r0, r5, #25
 8005b24:	d5fb      	bpl.n	8005b1e <_printf_i+0xbe>
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	296f      	cmp	r1, #111	; 0x6f
 8005b2a:	bf14      	ite	ne
 8005b2c:	220a      	movne	r2, #10
 8005b2e:	2208      	moveq	r2, #8
 8005b30:	4852      	ldr	r0, [pc, #328]	; (8005c7c <_printf_i+0x21c>)
 8005b32:	2100      	movs	r1, #0
 8005b34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b38:	6865      	ldr	r5, [r4, #4]
 8005b3a:	2d00      	cmp	r5, #0
 8005b3c:	60a5      	str	r5, [r4, #8]
 8005b3e:	f2c0 8095 	blt.w	8005c6c <_printf_i+0x20c>
 8005b42:	6821      	ldr	r1, [r4, #0]
 8005b44:	f021 0104 	bic.w	r1, r1, #4
 8005b48:	6021      	str	r1, [r4, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d13d      	bne.n	8005bca <_printf_i+0x16a>
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	f040 808e 	bne.w	8005c70 <_printf_i+0x210>
 8005b54:	4665      	mov	r5, ip
 8005b56:	2a08      	cmp	r2, #8
 8005b58:	d10b      	bne.n	8005b72 <_printf_i+0x112>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	07db      	lsls	r3, r3, #31
 8005b5e:	d508      	bpl.n	8005b72 <_printf_i+0x112>
 8005b60:	6923      	ldr	r3, [r4, #16]
 8005b62:	6862      	ldr	r2, [r4, #4]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	bfde      	ittt	le
 8005b68:	2330      	movle	r3, #48	; 0x30
 8005b6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b72:	ebac 0305 	sub.w	r3, ip, r5
 8005b76:	6123      	str	r3, [r4, #16]
 8005b78:	f8cd 8000 	str.w	r8, [sp]
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	aa03      	add	r2, sp, #12
 8005b80:	4621      	mov	r1, r4
 8005b82:	4630      	mov	r0, r6
 8005b84:	f7ff fef6 	bl	8005974 <_printf_common>
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d14d      	bne.n	8005c28 <_printf_i+0x1c8>
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	b005      	add	sp, #20
 8005b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b96:	4839      	ldr	r0, [pc, #228]	; (8005c7c <_printf_i+0x21c>)
 8005b98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005b9c:	6813      	ldr	r3, [r2, #0]
 8005b9e:	6821      	ldr	r1, [r4, #0]
 8005ba0:	1d1d      	adds	r5, r3, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6015      	str	r5, [r2, #0]
 8005ba6:	060a      	lsls	r2, r1, #24
 8005ba8:	d50b      	bpl.n	8005bc2 <_printf_i+0x162>
 8005baa:	07ca      	lsls	r2, r1, #31
 8005bac:	bf44      	itt	mi
 8005bae:	f041 0120 	orrmi.w	r1, r1, #32
 8005bb2:	6021      	strmi	r1, [r4, #0]
 8005bb4:	b91b      	cbnz	r3, 8005bbe <_printf_i+0x15e>
 8005bb6:	6822      	ldr	r2, [r4, #0]
 8005bb8:	f022 0220 	bic.w	r2, r2, #32
 8005bbc:	6022      	str	r2, [r4, #0]
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	e7b7      	b.n	8005b32 <_printf_i+0xd2>
 8005bc2:	064d      	lsls	r5, r1, #25
 8005bc4:	bf48      	it	mi
 8005bc6:	b29b      	uxthmi	r3, r3
 8005bc8:	e7ef      	b.n	8005baa <_printf_i+0x14a>
 8005bca:	4665      	mov	r5, ip
 8005bcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bd0:	fb02 3311 	mls	r3, r2, r1, r3
 8005bd4:	5cc3      	ldrb	r3, [r0, r3]
 8005bd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005bda:	460b      	mov	r3, r1
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	d1f5      	bne.n	8005bcc <_printf_i+0x16c>
 8005be0:	e7b9      	b.n	8005b56 <_printf_i+0xf6>
 8005be2:	6813      	ldr	r3, [r2, #0]
 8005be4:	6825      	ldr	r5, [r4, #0]
 8005be6:	1d18      	adds	r0, r3, #4
 8005be8:	6961      	ldr	r1, [r4, #20]
 8005bea:	6010      	str	r0, [r2, #0]
 8005bec:	0628      	lsls	r0, r5, #24
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	d501      	bpl.n	8005bf6 <_printf_i+0x196>
 8005bf2:	6019      	str	r1, [r3, #0]
 8005bf4:	e002      	b.n	8005bfc <_printf_i+0x19c>
 8005bf6:	066a      	lsls	r2, r5, #25
 8005bf8:	d5fb      	bpl.n	8005bf2 <_printf_i+0x192>
 8005bfa:	8019      	strh	r1, [r3, #0]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4665      	mov	r5, ip
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	e7b9      	b.n	8005b78 <_printf_i+0x118>
 8005c04:	6813      	ldr	r3, [r2, #0]
 8005c06:	1d19      	adds	r1, r3, #4
 8005c08:	6011      	str	r1, [r2, #0]
 8005c0a:	681d      	ldr	r5, [r3, #0]
 8005c0c:	6862      	ldr	r2, [r4, #4]
 8005c0e:	2100      	movs	r1, #0
 8005c10:	4628      	mov	r0, r5
 8005c12:	f000 f837 	bl	8005c84 <memchr>
 8005c16:	b108      	cbz	r0, 8005c1c <_printf_i+0x1bc>
 8005c18:	1b40      	subs	r0, r0, r5
 8005c1a:	6060      	str	r0, [r4, #4]
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	6123      	str	r3, [r4, #16]
 8005c20:	2300      	movs	r3, #0
 8005c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c26:	e7a7      	b.n	8005b78 <_printf_i+0x118>
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	462a      	mov	r2, r5
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	4630      	mov	r0, r6
 8005c30:	47c0      	blx	r8
 8005c32:	3001      	adds	r0, #1
 8005c34:	d0aa      	beq.n	8005b8c <_printf_i+0x12c>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	079b      	lsls	r3, r3, #30
 8005c3a:	d413      	bmi.n	8005c64 <_printf_i+0x204>
 8005c3c:	68e0      	ldr	r0, [r4, #12]
 8005c3e:	9b03      	ldr	r3, [sp, #12]
 8005c40:	4298      	cmp	r0, r3
 8005c42:	bfb8      	it	lt
 8005c44:	4618      	movlt	r0, r3
 8005c46:	e7a3      	b.n	8005b90 <_printf_i+0x130>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	464a      	mov	r2, r9
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	4630      	mov	r0, r6
 8005c50:	47c0      	blx	r8
 8005c52:	3001      	adds	r0, #1
 8005c54:	d09a      	beq.n	8005b8c <_printf_i+0x12c>
 8005c56:	3501      	adds	r5, #1
 8005c58:	68e3      	ldr	r3, [r4, #12]
 8005c5a:	9a03      	ldr	r2, [sp, #12]
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	42ab      	cmp	r3, r5
 8005c60:	dcf2      	bgt.n	8005c48 <_printf_i+0x1e8>
 8005c62:	e7eb      	b.n	8005c3c <_printf_i+0x1dc>
 8005c64:	2500      	movs	r5, #0
 8005c66:	f104 0919 	add.w	r9, r4, #25
 8005c6a:	e7f5      	b.n	8005c58 <_printf_i+0x1f8>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1ac      	bne.n	8005bca <_printf_i+0x16a>
 8005c70:	7803      	ldrb	r3, [r0, #0]
 8005c72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c7a:	e76c      	b.n	8005b56 <_printf_i+0xf6>
 8005c7c:	08005f5d 	.word	0x08005f5d
 8005c80:	08005f6e 	.word	0x08005f6e

08005c84 <memchr>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	b2c9      	uxtb	r1, r1
 8005c88:	4402      	add	r2, r0
 8005c8a:	4290      	cmp	r0, r2
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	d101      	bne.n	8005c94 <memchr+0x10>
 8005c90:	2300      	movs	r3, #0
 8005c92:	e003      	b.n	8005c9c <memchr+0x18>
 8005c94:	781c      	ldrb	r4, [r3, #0]
 8005c96:	3001      	adds	r0, #1
 8005c98:	428c      	cmp	r4, r1
 8005c9a:	d1f6      	bne.n	8005c8a <memchr+0x6>
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	bd10      	pop	{r4, pc}

08005ca0 <memcpy>:
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	1e43      	subs	r3, r0, #1
 8005ca4:	440a      	add	r2, r1
 8005ca6:	4291      	cmp	r1, r2
 8005ca8:	d100      	bne.n	8005cac <memcpy+0xc>
 8005caa:	bd10      	pop	{r4, pc}
 8005cac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cb4:	e7f7      	b.n	8005ca6 <memcpy+0x6>

08005cb6 <memmove>:
 8005cb6:	4288      	cmp	r0, r1
 8005cb8:	b510      	push	{r4, lr}
 8005cba:	eb01 0302 	add.w	r3, r1, r2
 8005cbe:	d807      	bhi.n	8005cd0 <memmove+0x1a>
 8005cc0:	1e42      	subs	r2, r0, #1
 8005cc2:	4299      	cmp	r1, r3
 8005cc4:	d00a      	beq.n	8005cdc <memmove+0x26>
 8005cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cca:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005cce:	e7f8      	b.n	8005cc2 <memmove+0xc>
 8005cd0:	4283      	cmp	r3, r0
 8005cd2:	d9f5      	bls.n	8005cc0 <memmove+0xa>
 8005cd4:	1881      	adds	r1, r0, r2
 8005cd6:	1ad2      	subs	r2, r2, r3
 8005cd8:	42d3      	cmn	r3, r2
 8005cda:	d100      	bne.n	8005cde <memmove+0x28>
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ce2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ce6:	e7f7      	b.n	8005cd8 <memmove+0x22>

08005ce8 <_free_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4605      	mov	r5, r0
 8005cec:	2900      	cmp	r1, #0
 8005cee:	d043      	beq.n	8005d78 <_free_r+0x90>
 8005cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf4:	1f0c      	subs	r4, r1, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bfb8      	it	lt
 8005cfa:	18e4      	addlt	r4, r4, r3
 8005cfc:	f000 f8d0 	bl	8005ea0 <__malloc_lock>
 8005d00:	4a1e      	ldr	r2, [pc, #120]	; (8005d7c <_free_r+0x94>)
 8005d02:	6813      	ldr	r3, [r2, #0]
 8005d04:	4610      	mov	r0, r2
 8005d06:	b933      	cbnz	r3, 8005d16 <_free_r+0x2e>
 8005d08:	6063      	str	r3, [r4, #4]
 8005d0a:	6014      	str	r4, [r2, #0]
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d12:	f000 b8c6 	b.w	8005ea2 <__malloc_unlock>
 8005d16:	42a3      	cmp	r3, r4
 8005d18:	d90b      	bls.n	8005d32 <_free_r+0x4a>
 8005d1a:	6821      	ldr	r1, [r4, #0]
 8005d1c:	1862      	adds	r2, r4, r1
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	bf01      	itttt	eq
 8005d22:	681a      	ldreq	r2, [r3, #0]
 8005d24:	685b      	ldreq	r3, [r3, #4]
 8005d26:	1852      	addeq	r2, r2, r1
 8005d28:	6022      	streq	r2, [r4, #0]
 8005d2a:	6063      	str	r3, [r4, #4]
 8005d2c:	6004      	str	r4, [r0, #0]
 8005d2e:	e7ed      	b.n	8005d0c <_free_r+0x24>
 8005d30:	4613      	mov	r3, r2
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	b10a      	cbz	r2, 8005d3a <_free_r+0x52>
 8005d36:	42a2      	cmp	r2, r4
 8005d38:	d9fa      	bls.n	8005d30 <_free_r+0x48>
 8005d3a:	6819      	ldr	r1, [r3, #0]
 8005d3c:	1858      	adds	r0, r3, r1
 8005d3e:	42a0      	cmp	r0, r4
 8005d40:	d10b      	bne.n	8005d5a <_free_r+0x72>
 8005d42:	6820      	ldr	r0, [r4, #0]
 8005d44:	4401      	add	r1, r0
 8005d46:	1858      	adds	r0, r3, r1
 8005d48:	4282      	cmp	r2, r0
 8005d4a:	6019      	str	r1, [r3, #0]
 8005d4c:	d1de      	bne.n	8005d0c <_free_r+0x24>
 8005d4e:	6810      	ldr	r0, [r2, #0]
 8005d50:	6852      	ldr	r2, [r2, #4]
 8005d52:	4401      	add	r1, r0
 8005d54:	6019      	str	r1, [r3, #0]
 8005d56:	605a      	str	r2, [r3, #4]
 8005d58:	e7d8      	b.n	8005d0c <_free_r+0x24>
 8005d5a:	d902      	bls.n	8005d62 <_free_r+0x7a>
 8005d5c:	230c      	movs	r3, #12
 8005d5e:	602b      	str	r3, [r5, #0]
 8005d60:	e7d4      	b.n	8005d0c <_free_r+0x24>
 8005d62:	6820      	ldr	r0, [r4, #0]
 8005d64:	1821      	adds	r1, r4, r0
 8005d66:	428a      	cmp	r2, r1
 8005d68:	bf01      	itttt	eq
 8005d6a:	6811      	ldreq	r1, [r2, #0]
 8005d6c:	6852      	ldreq	r2, [r2, #4]
 8005d6e:	1809      	addeq	r1, r1, r0
 8005d70:	6021      	streq	r1, [r4, #0]
 8005d72:	6062      	str	r2, [r4, #4]
 8005d74:	605c      	str	r4, [r3, #4]
 8005d76:	e7c9      	b.n	8005d0c <_free_r+0x24>
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000450 	.word	0x20000450

08005d80 <_malloc_r>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	1ccd      	adds	r5, r1, #3
 8005d84:	f025 0503 	bic.w	r5, r5, #3
 8005d88:	3508      	adds	r5, #8
 8005d8a:	2d0c      	cmp	r5, #12
 8005d8c:	bf38      	it	cc
 8005d8e:	250c      	movcc	r5, #12
 8005d90:	2d00      	cmp	r5, #0
 8005d92:	4606      	mov	r6, r0
 8005d94:	db01      	blt.n	8005d9a <_malloc_r+0x1a>
 8005d96:	42a9      	cmp	r1, r5
 8005d98:	d903      	bls.n	8005da2 <_malloc_r+0x22>
 8005d9a:	230c      	movs	r3, #12
 8005d9c:	6033      	str	r3, [r6, #0]
 8005d9e:	2000      	movs	r0, #0
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
 8005da2:	f000 f87d 	bl	8005ea0 <__malloc_lock>
 8005da6:	4a21      	ldr	r2, [pc, #132]	; (8005e2c <_malloc_r+0xac>)
 8005da8:	6814      	ldr	r4, [r2, #0]
 8005daa:	4621      	mov	r1, r4
 8005dac:	b991      	cbnz	r1, 8005dd4 <_malloc_r+0x54>
 8005dae:	4c20      	ldr	r4, [pc, #128]	; (8005e30 <_malloc_r+0xb0>)
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	b91b      	cbnz	r3, 8005dbc <_malloc_r+0x3c>
 8005db4:	4630      	mov	r0, r6
 8005db6:	f000 f863 	bl	8005e80 <_sbrk_r>
 8005dba:	6020      	str	r0, [r4, #0]
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f000 f85e 	bl	8005e80 <_sbrk_r>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d124      	bne.n	8005e12 <_malloc_r+0x92>
 8005dc8:	230c      	movs	r3, #12
 8005dca:	4630      	mov	r0, r6
 8005dcc:	6033      	str	r3, [r6, #0]
 8005dce:	f000 f868 	bl	8005ea2 <__malloc_unlock>
 8005dd2:	e7e4      	b.n	8005d9e <_malloc_r+0x1e>
 8005dd4:	680b      	ldr	r3, [r1, #0]
 8005dd6:	1b5b      	subs	r3, r3, r5
 8005dd8:	d418      	bmi.n	8005e0c <_malloc_r+0x8c>
 8005dda:	2b0b      	cmp	r3, #11
 8005ddc:	d90f      	bls.n	8005dfe <_malloc_r+0x7e>
 8005dde:	600b      	str	r3, [r1, #0]
 8005de0:	18cc      	adds	r4, r1, r3
 8005de2:	50cd      	str	r5, [r1, r3]
 8005de4:	4630      	mov	r0, r6
 8005de6:	f000 f85c 	bl	8005ea2 <__malloc_unlock>
 8005dea:	f104 000b 	add.w	r0, r4, #11
 8005dee:	1d23      	adds	r3, r4, #4
 8005df0:	f020 0007 	bic.w	r0, r0, #7
 8005df4:	1ac3      	subs	r3, r0, r3
 8005df6:	d0d3      	beq.n	8005da0 <_malloc_r+0x20>
 8005df8:	425a      	negs	r2, r3
 8005dfa:	50e2      	str	r2, [r4, r3]
 8005dfc:	e7d0      	b.n	8005da0 <_malloc_r+0x20>
 8005dfe:	684b      	ldr	r3, [r1, #4]
 8005e00:	428c      	cmp	r4, r1
 8005e02:	bf16      	itet	ne
 8005e04:	6063      	strne	r3, [r4, #4]
 8005e06:	6013      	streq	r3, [r2, #0]
 8005e08:	460c      	movne	r4, r1
 8005e0a:	e7eb      	b.n	8005de4 <_malloc_r+0x64>
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	6849      	ldr	r1, [r1, #4]
 8005e10:	e7cc      	b.n	8005dac <_malloc_r+0x2c>
 8005e12:	1cc4      	adds	r4, r0, #3
 8005e14:	f024 0403 	bic.w	r4, r4, #3
 8005e18:	42a0      	cmp	r0, r4
 8005e1a:	d005      	beq.n	8005e28 <_malloc_r+0xa8>
 8005e1c:	1a21      	subs	r1, r4, r0
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f000 f82e 	bl	8005e80 <_sbrk_r>
 8005e24:	3001      	adds	r0, #1
 8005e26:	d0cf      	beq.n	8005dc8 <_malloc_r+0x48>
 8005e28:	6025      	str	r5, [r4, #0]
 8005e2a:	e7db      	b.n	8005de4 <_malloc_r+0x64>
 8005e2c:	20000450 	.word	0x20000450
 8005e30:	20000454 	.word	0x20000454

08005e34 <_realloc_r>:
 8005e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e36:	4607      	mov	r7, r0
 8005e38:	4614      	mov	r4, r2
 8005e3a:	460e      	mov	r6, r1
 8005e3c:	b921      	cbnz	r1, 8005e48 <_realloc_r+0x14>
 8005e3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e42:	4611      	mov	r1, r2
 8005e44:	f7ff bf9c 	b.w	8005d80 <_malloc_r>
 8005e48:	b922      	cbnz	r2, 8005e54 <_realloc_r+0x20>
 8005e4a:	f7ff ff4d 	bl	8005ce8 <_free_r>
 8005e4e:	4625      	mov	r5, r4
 8005e50:	4628      	mov	r0, r5
 8005e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e54:	f000 f826 	bl	8005ea4 <_malloc_usable_size_r>
 8005e58:	42a0      	cmp	r0, r4
 8005e5a:	d20f      	bcs.n	8005e7c <_realloc_r+0x48>
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4638      	mov	r0, r7
 8005e60:	f7ff ff8e 	bl	8005d80 <_malloc_r>
 8005e64:	4605      	mov	r5, r0
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d0f2      	beq.n	8005e50 <_realloc_r+0x1c>
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	f7ff ff17 	bl	8005ca0 <memcpy>
 8005e72:	4631      	mov	r1, r6
 8005e74:	4638      	mov	r0, r7
 8005e76:	f7ff ff37 	bl	8005ce8 <_free_r>
 8005e7a:	e7e9      	b.n	8005e50 <_realloc_r+0x1c>
 8005e7c:	4635      	mov	r5, r6
 8005e7e:	e7e7      	b.n	8005e50 <_realloc_r+0x1c>

08005e80 <_sbrk_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	2300      	movs	r3, #0
 8005e84:	4c05      	ldr	r4, [pc, #20]	; (8005e9c <_sbrk_r+0x1c>)
 8005e86:	4605      	mov	r5, r0
 8005e88:	4608      	mov	r0, r1
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	f7fa fb20 	bl	80004d0 <_sbrk>
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	d102      	bne.n	8005e9a <_sbrk_r+0x1a>
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	b103      	cbz	r3, 8005e9a <_sbrk_r+0x1a>
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	200016b0 	.word	0x200016b0

08005ea0 <__malloc_lock>:
 8005ea0:	4770      	bx	lr

08005ea2 <__malloc_unlock>:
 8005ea2:	4770      	bx	lr

08005ea4 <_malloc_usable_size_r>:
 8005ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea8:	1f18      	subs	r0, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bfbc      	itt	lt
 8005eae:	580b      	ldrlt	r3, [r1, r0]
 8005eb0:	18c0      	addlt	r0, r0, r3
 8005eb2:	4770      	bx	lr

08005eb4 <_init>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	bf00      	nop
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr

08005ec0 <_fini>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr
