
03_ResetCount.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006318  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e0  080065e0  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  080065e0  080065e0  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065e0  080065e0  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080065e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c8  20000204  080067ec  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016cc  080067ec  000216cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc4e  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047cb  00000000  00000000  0003de7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e28  00000000  00000000  00042648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  00043470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ba4d  00000000  00000000  00044090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015fee  00000000  00000000  0005fadd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b9c0  00000000  00000000  00075acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f148b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037fc  00000000  00000000  000f1508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000204 	.word	0x20000204
 8000200:	00000000 	.word	0x00000000
 8000204:	080064e4 	.word	0x080064e4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000208 	.word	0x20000208
 8000220:	080064e4 	.word	0x080064e4

08000224 <apInit>:
extern uint8_t cdcRead(void);
extern void cdcDataIn(uint8_t rx_data);
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);

void apInit(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);  // USB
 8000228:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800022c:	2000      	movs	r0, #0
 800022e:	f000 fb3d 	bl	80008ac <uartOpen>
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <apMain>:

void apMain(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
  uint32_t pre_time;
  //uint32_t pre_baud;
  uint32_t led_blink_time = 500;
 800023e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000242:	60bb      	str	r3, [r7, #8]

  //pre_baud = uartGetBaud(_DEF_UART1);
  pre_time = millis();
 8000244:	f000 f849 	bl	80002da <millis>
 8000248:	60f8      	str	r0, [r7, #12]

  while(1)
  {
    if(resetGetCount() >= 2 )
 800024a:	f000 fa97 	bl	800077c <resetGetCount>
 800024e:	4603      	mov	r3, r0
 8000250:	2b01      	cmp	r3, #1
 8000252:	d901      	bls.n	8000258 <apMain+0x20>
    {
      led_blink_time = 100;
 8000254:	2364      	movs	r3, #100	; 0x64
 8000256:	60bb      	str	r3, [r7, #8]
    }
    //if(millis()-pre_time >= 500)
    if(millis()-pre_time >= led_blink_time)
 8000258:	f000 f83f 	bl	80002da <millis>
 800025c:	4602      	mov	r2, r0
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	1ad3      	subs	r3, r2, r3
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	429a      	cmp	r2, r3
 8000266:	d80d      	bhi.n	8000284 <apMain+0x4c>
    {
      pre_time = millis();
 8000268:	f000 f837 	bl	80002da <millis>
 800026c:	60f8      	str	r0, [r7, #12]
      ledToggle(_DEF_LED3);
 800026e:	2002      	movs	r0, #2
 8000270:	f000 fa3c 	bl	80006ec <ledToggle>

      uartPrintf(_DEF_UART1, "ResetCount : %d \n", resetGetCount());
 8000274:	f000 fa82 	bl	800077c <resetGetCount>
 8000278:	4603      	mov	r3, r0
 800027a:	461a      	mov	r2, r3
 800027c:	490a      	ldr	r1, [pc, #40]	; (80002a8 <apMain+0x70>)
 800027e:	2000      	movs	r0, #0
 8000280:	f000 fb6c 	bl	800095c <uartPrintf>
    //delay(500);

    //CDC_Transmit_FS("test\n", 6);
    //CDC_Transmit_FS("test\n", sizeof("test\n"));

    if (uartAvailable(_DEF_UART1) > 0)
 8000284:	2000      	movs	r0, #0
 8000286:	f000 fb2b 	bl	80008e0 <uartAvailable>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d0dc      	beq.n	800024a <apMain+0x12>
    {
      uint8_t rx_data;
      rx_data = uartRead(_DEF_UART1);
 8000290:	2000      	movs	r0, #0
 8000292:	f000 fb38 	bl	8000906 <uartRead>
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]

      uartPrintf(_DEF_UART1, "RxData : 0x%X %c\n", rx_data, rx_data);
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	4903      	ldr	r1, [pc, #12]	; (80002ac <apMain+0x74>)
 80002a0:	2000      	movs	r0, #0
 80002a2:	f000 fb5b 	bl	800095c <uartPrintf>
    if(resetGetCount() >= 2 )
 80002a6:	e7d0      	b.n	800024a <apMain+0x12>
 80002a8:	080064fc 	.word	0x080064fc
 80002ac:	08006510 	.word	0x08006510

080002b0 <bspInit>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


void bspInit(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  HAL_Init();
 80002b4:	f000 fbba 	bl	8000a2c <HAL_Init>

  SystemClock_Config();
 80002b8:	f000 f816 	bl	80002e8 <SystemClock_Config>

  MX_GPIO_Init();
 80002bc:	f000 f876 	bl	80003ac <MX_GPIO_Init>

}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <delay>:

void delay(uint32_t ms)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f000 fc0f 	bl	8000af0 <HAL_Delay>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <millis>:

uint32_t millis(void)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80002de:	f000 fbfd 	bl	8000adc <HAL_GetTick>
 80002e2:	4603      	mov	r3, r0
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b096      	sub	sp, #88	; 0x58
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f005 fcc0 	bl	8005c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	f107 031c 	add.w	r3, r7, #28
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]
 800031a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800031c:	2305      	movs	r3, #5
 800031e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000324:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800032a:	2301      	movs	r3, #1
 800032c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	2302      	movs	r3, #2
 8000334:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800033c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000340:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fdf4 	bl	8001f34 <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000352:	f000 f86b 	bl	800042c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	230f      	movs	r3, #15
 8000358:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035a:	2302      	movs	r3, #2
 800035c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	2102      	movs	r1, #2
 8000372:	4618      	mov	r0, r3
 8000374:	f002 f842 	bl	80023fc <HAL_RCC_ClockConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800037e:	f000 f855 	bl	800042c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000382:	2311      	movs	r3, #17
 8000384:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800038a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800038c:	2300      	movs	r3, #0
 800038e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4618      	mov	r0, r3
 8000394:	f002 f9dc 	bl	8002750 <HAL_RCCEx_PeriphCLKConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800039e:	f000 f845 	bl	800042c <Error_Handler>
  }
}
 80003a2:	bf00      	nop
 80003a4:	3758      	adds	r7, #88	; 0x58
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_GPIO_Init+0x78>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a17      	ldr	r2, [pc, #92]	; (8000424 <MX_GPIO_Init+0x78>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <MX_GPIO_Init+0x78>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <MX_GPIO_Init+0x78>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a11      	ldr	r2, [pc, #68]	; (8000424 <MX_GPIO_Init+0x78>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <MX_GPIO_Init+0x78>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80003f6:	480c      	ldr	r0, [pc, #48]	; (8000428 <MX_GPIO_Init+0x7c>)
 80003f8:	f000 fe14 	bl	8001024 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 80003fc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	2301      	movs	r3, #1
 8000404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040a:	2302      	movs	r3, #2
 800040c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	4619      	mov	r1, r3
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <MX_GPIO_Init+0x7c>)
 8000416:	f000 fc97 	bl	8000d48 <HAL_GPIO_Init>
}
 800041a:	bf00      	nop
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000
 8000428:	40010c00 	.word	0x40010c00

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a14      	ldr	r2, [pc, #80]	; (8000494 <HAL_MspInit+0x5c>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_MspInit+0x5c>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <HAL_MspInit+0x60>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <HAL_MspInit+0x60>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <HardFault_Handler+0x4>

080004ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <MemManage_Handler+0x4>

080004b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <BusFault_Handler+0x4>

080004ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <UsageFault_Handler+0x4>

080004c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e8:	f000 fae6 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004f6:	f000 febe 	bl	8001276 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20001268 	.word	0x20001268

08000504 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <_sbrk+0x50>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d102      	bne.n	800051a <_sbrk+0x16>
		heap_end = &end;
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <_sbrk+0x50>)
 8000516:	4a10      	ldr	r2, [pc, #64]	; (8000558 <_sbrk+0x54>)
 8000518:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <_sbrk+0x50>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <_sbrk+0x50>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4413      	add	r3, r2
 8000528:	466a      	mov	r2, sp
 800052a:	4293      	cmp	r3, r2
 800052c:	d907      	bls.n	800053e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800052e:	f005 fb7b 	bl	8005c28 <__errno>
 8000532:	4602      	mov	r2, r0
 8000534:	230c      	movs	r3, #12
 8000536:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	e006      	b.n	800054c <_sbrk+0x48>
	}

	heap_end += incr;
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <_sbrk+0x50>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	4a03      	ldr	r2, [pc, #12]	; (8000554 <_sbrk+0x50>)
 8000548:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800054a:	68fb      	ldr	r3, [r7, #12]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000220 	.word	0x20000220
 8000558:	200016d0 	.word	0x200016d0

0800055c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <SystemInit+0x5c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <SystemInit+0x5c>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <SystemInit+0x5c>)
 800056e:	685a      	ldr	r2, [r3, #4]
 8000570:	4911      	ldr	r1, [pc, #68]	; (80005b8 <SystemInit+0x5c>)
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <SystemInit+0x60>)
 8000574:	4013      	ands	r3, r2
 8000576:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <SystemInit+0x5c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <SystemInit+0x5c>)
 800057e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000586:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <SystemInit+0x5c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <SystemInit+0x5c>)
 800058e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000592:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <SystemInit+0x5c>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <SystemInit+0x5c>)
 800059a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800059e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <SystemInit+0x5c>)
 80005a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005a6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <SystemInit+0x64>)
 80005aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ae:	609a      	str	r2, [r3, #8]
#endif 
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000
 80005bc:	f8ff0000 	.word	0xf8ff0000
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005c6:	e003      	b.n	80005d0 <LoopCopyDataInit>

080005c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005ce:	3104      	adds	r1, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005d8:	d3f6      	bcc.n	80005c8 <CopyDataInit>
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005dc:	e002      	b.n	80005e4 <LoopFillZerobss>

080005de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005e0:	f842 3b04 	str.w	r3, [r2], #4

080005e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005e8:	d3f9      	bcc.n	80005de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ea:	f7ff ffb7 	bl	800055c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f005 fb21 	bl	8005c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f2:	f005 fb0d 	bl	8005c10 <main>
  bx lr
 80005f6:	4770      	bx	lr
  ldr r3, =_sidata
 80005f8:	080065e8 	.word	0x080065e8
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000600:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 8000604:	20000204 	.word	0x20000204
  ldr r3, = _ebss
 8000608:	200016cc 	.word	0x200016cc

0800060c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_2_IRQHandler>
	...

08000610 <ledInit>:
		{GPIOB, GPIO_PIN_14, GPIO_PIN_SET, GPIO_PIN_RESET},
		{GPIOB, GPIO_PIN_15, GPIO_PIN_SET, GPIO_PIN_RESET},
};

void ledInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#endif
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <ledInit+0x94>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <ledInit+0x94>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <ledInit+0x94>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <ledInit+0x94>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <ledInit+0x94>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <ledInit+0x94>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  //GPIO_InitStruct.Pin = LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2302      	movs	r3, #2
 800065e:	61bb      	str	r3, [r7, #24]
  //HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
  for( int i=0; i<LED_MAX_CH; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
 8000664:	e017      	b.n	8000696 <ledInit+0x86>
  {
  	GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <ledInit+0x98>)
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	4413      	add	r3, r2
 800066e:	889b      	ldrh	r3, [r3, #4]
 8000670:	60fb      	str	r3, [r7, #12]
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000672:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <ledInit+0x98>)
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800067a:	f107 020c 	add.w	r2, r7, #12
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fb61 	bl	8000d48 <HAL_GPIO_Init>

  	ledOff(i);
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f80e 	bl	80006ac <ledOff>
  for( int i=0; i<LED_MAX_CH; i++)
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	3301      	adds	r3, #1
 8000694:	61fb      	str	r3, [r7, #28]
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	2b03      	cmp	r3, #3
 800069a:	dde4      	ble.n	8000666 <ledInit+0x56>
  }
}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000
 80006a8:	20000004 	.word	0x20000004

080006ac <ledOff>:
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d811      	bhi.n	80006e0 <ledOff+0x34>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <ledOff+0x3c>)
 80006c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <ledOff+0x3c>)
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	4413      	add	r3, r2
 80006cc:	8899      	ldrh	r1, [r3, #4]
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <ledOff+0x3c>)
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	4413      	add	r3, r2
 80006d6:	79db      	ldrb	r3, [r3, #7]
 80006d8:	461a      	mov	r2, r3
 80006da:	f000 fca3 	bl	8001024 <HAL_GPIO_WritePin>
 80006de:	e000      	b.n	80006e2 <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 80006e0:	bf00      	nop
}
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000004 	.word	0x20000004

080006ec <ledToggle>:

void ledToggle(uint8_t ch)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	d80c      	bhi.n	8000716 <ledToggle+0x2a>
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <ledToggle+0x34>)
 8000700:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4a06      	ldr	r2, [pc, #24]	; (8000720 <ledToggle+0x34>)
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	4413      	add	r3, r2
 800070c:	889b      	ldrh	r3, [r3, #4]
 800070e:	4619      	mov	r1, r3
 8000710:	f000 fca0 	bl	8001054 <HAL_GPIO_TogglePin>
 8000714:	e000      	b.n	8000718 <ledToggle+0x2c>
	if(ch >= LED_MAX_CH) return;
 8000716:	bf00      	nop
}
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000004 	.word	0x20000004

08000724 <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  bool ret = true;
 800072a:	2301      	movs	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]

  /* if reset pin on */
  if(RCC->CSR & (1<<26))
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <resetInit+0x50>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000736:	2b00      	cmp	r3, #0
 8000738:	d012      	beq.n	8000760 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f858 	bl	80007f0 <rtcBackupRegRead>
 8000740:	4603      	mov	r3, r0
 8000742:	3301      	adds	r3, #1
 8000744:	4619      	mov	r1, r3
 8000746:	2001      	movs	r0, #1
 8000748:	f000 f862 	bl	8000810 <rtcBackupRegWrite>
    delay(500);
 800074c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000750:	f7ff fdb8 	bl	80002c4 <delay>
    reset_count = rtcBackupRegRead(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f000 f84b 	bl	80007f0 <rtcBackupRegRead>
 800075a:	4602      	mov	r2, r0
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <resetInit+0x54>)
 800075e:	601a      	str	r2, [r3, #0]
  }

  rtcBackupRegWrite(1, 0);
 8000760:	2100      	movs	r1, #0
 8000762:	2001      	movs	r0, #1
 8000764:	f000 f854 	bl	8000810 <rtcBackupRegWrite>

  return ret;
 8000768:	79fb      	ldrb	r3, [r7, #7]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	20000224 	.word	0x20000224

0800077c <resetGetCount>:

uint32_t resetGetCount(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return reset_count;
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <resetGetCount+0x10>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	20000224 	.word	0x20000224

08000790 <rtcInit>:


RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  bool ret = true;
 8000796:	2301      	movs	r3, #1
 8000798:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <rtcInit+0x54>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a11      	ldr	r2, [pc, #68]	; (80007e4 <rtcInit+0x54>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <rtcInit+0x54>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /** Initialize RTC Only */
  hrtc.Instance           = RTC;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <rtcInit+0x58>)
 80007b4:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <rtcInit+0x5c>)
 80007b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <rtcInit+0x58>)
 80007ba:	f04f 32ff 	mov.w	r2, #4294967295
 80007be:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <rtcInit+0x58>)
 80007c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <rtcInit+0x58>)
 80007ca:	f002 f961 	bl	8002a90 <HAL_RTC_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <rtcInit+0x48>
  {
    Error_Handler();
 80007d4:	f7ff fe2a 	bl	800042c <Error_Handler>
  }

  return ret;
 80007d8:	79fb      	ldrb	r3, [r7, #7]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	2000045c 	.word	0x2000045c
 80007ec:	40002800 	.word	0x40002800

080007f0 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <rtcBackupRegRead+0x1c>)
 80007fc:	f002 fa76 	bl	8002cec <HAL_RTCEx_BKUPRead>
 8000800:	4603      	mov	r3, r0

}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000045c 	.word	0x2000045c

08000810 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	4803      	ldr	r0, [pc, #12]	; (800082c <rtcBackupRegWrite+0x1c>)
 8000820:	f002 fa4a 	bl	8002cb8 <HAL_RTCEx_BKUPWrite>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000045c 	.word	0x2000045c

08000830 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <HAL_RTC_MspInit+0x3c>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d110      	bne.n	8000864 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000842:	f001 fb6b 	bl	8001f1c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_RTC_MspInit+0x40>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a09      	ldr	r2, [pc, #36]	; (8000870 <HAL_RTC_MspInit+0x40>)
 800084c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_RTC_MspInit+0x40>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_RTC_MspInit+0x44>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40002800 	.word	0x40002800
 8000870:	40021000 	.word	0x40021000
 8000874:	4242043c 	.word	0x4242043c

08000878 <uartInit>:
DMA_HandleTypeDef  hdma_usart1_rx;



bool uartInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	e007      	b.n	8000894 <uartInit+0x1c>
  {
    is_open[i] = false;
 8000884:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <uartInit+0x30>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3301      	adds	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	ddf4      	ble.n	8000884 <uartInit+0xc>
  }


  return true;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000228 	.word	0x20000228

080008ac <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d106      	bne.n	80008d0 <uartOpen+0x24>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4a05      	ldr	r2, [pc, #20]	; (80008dc <uartOpen+0x30>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	54d1      	strb	r1, [r2, r3]
      ret = true;
 80008ca:	2301      	movs	r3, #1
 80008cc:	73fb      	strb	r3, [r7, #15]
      break;
 80008ce:	bf00      	nop
      }
      break;
#endif
  }

  return ret;
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	20000228 	.word	0x20000228

080008e0 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d103      	bne.n	80008fc <uartAvailable+0x1c>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 80008f4:	f004 fc84 	bl	8005200 <cdcAvailable>
 80008f8:	60f8      	str	r0, [r7, #12]
      break;
 80008fa:	bf00      	nop
      ret = qbufferAvailable(&qbuffer[ch]);
      break;
#endif
  }

  return ret;
 80008fc:	68fb      	ldr	r3, [r7, #12]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d104      	bne.n	8000924 <uartRead+0x1e>
  {
    case _DEF_UART1:
      ret = cdcRead();
 800091a:	f004 fc8d 	bl	8005238 <cdcRead>
 800091e:	4603      	mov	r3, r0
 8000920:	73fb      	strb	r3, [r7, #15]
      break;
 8000922:	bf00      	nop
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
      break;
#endif
  }

  return ret;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  //HAL_StatusTypeDef status;


  switch(ch)
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d105      	bne.n	8000952 <uartWrite+0x24>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	68b8      	ldr	r0, [r7, #8]
 800094a:	f004 fcc7 	bl	80052dc <cdcWrite>
 800094e:	6178      	str	r0, [r7, #20]
      break;
 8000950:	bf00      	nop
      }
      break;
#endif
  }

  return ret;
 8000952:	697b      	ldr	r3, [r7, #20]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800095c:	b40e      	push	{r1, r2, r3}
 800095e:	b580      	push	{r7, lr}
 8000960:	b0c7      	sub	sp, #284	; 0x11c
 8000962:	af00      	add	r7, sp, #0
 8000964:	4602      	mov	r2, r0
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800096a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	f107 0010 	add.w	r0, r7, #16
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000986:	f005 f9ad 	bl	8005ce4 <vsniprintf>
 800098a:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800098e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000992:	f107 0110 	add.w	r1, r7, #16
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ffc7 	bl	800092e <uartWrite>
 80009a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 80009a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80009ae:	46bd      	mov	sp, r7
 80009b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009b4:	b003      	add	sp, #12
 80009b6:	4770      	bx	lr

080009b8 <usbInit>:




bool usbInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
  bool ret = true;
 80009be:	2301      	movs	r3, #1
 80009c0:	75fb      	strb	r3, [r7, #23]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009d4:	2311      	movs	r3, #17
 80009d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2302      	movs	r3, #2
 80009de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <usbInit+0x50>)
 80009e6:	f000 f9af 	bl	8000d48 <HAL_GPIO_Init>
#if 0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
  delay(200);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
#endif
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <usbInit+0x50>)
 80009f4:	f000 f9a8 	bl	8000d48 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 80009f8:	f004 fbd2 	bl	80051a0 <MX_USB_DEVICE_Init>

  return ret;
 80009fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40010800 	.word	0x40010800

08000a0c <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  bspInit();
 8000a10:	f7ff fc4e 	bl	80002b0 <bspInit>
  rtcInit();
 8000a14:	f7ff febc 	bl	8000790 <rtcInit>

  resetInit();
 8000a18:	f7ff fe84 	bl	8000724 <resetInit>
  ledInit();
 8000a1c:	f7ff fdf8 	bl	8000610 <ledInit>
  usbInit();
 8000a20:	f7ff ffca 	bl	80009b8 <usbInit>
  uartInit();
 8000a24:	f7ff ff28 	bl	8000878 <uartInit>

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_Init+0x28>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_Init+0x28>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f941 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f000 f808 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fcf6 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x54>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_InitTick+0x58>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f959 	bl	8000d2e <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00e      	b.n	8000aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d80a      	bhi.n	8000aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 f921 	bl	8000cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4a06      	ldr	r2, [pc, #24]	; (8000ab4 <HAL_InitTick+0x5c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000028 	.word	0x20000028
 8000ab4:	20000024 	.word	0x20000024

08000ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x1c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x20>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <HAL_IncTick+0x20>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000028 	.word	0x20000028
 8000ad8:	20000470 	.word	0x20000470

08000adc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <HAL_GetTick+0x10>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	20000470 	.word	0x20000470

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff fff0 	bl	8000adc <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_Delay+0x40>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffe0 	bl	8000adc <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000028 	.word	0x20000028

08000b34 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4906      	ldr	r1, [pc, #24]	; (8000bc4 <NVIC_EnableIRQ+0x2c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	da0b      	bge.n	8000bf4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <NVIC_SetPriority+0x4c>)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	3b04      	subs	r3, #4
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf2:	e009      	b.n	8000c08 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <NVIC_SetPriority+0x50>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff90 	bl	8000bc8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff31 	bl	8000b34 <NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff46 	bl	8000b7c <NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff90 	bl	8000c1c <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5f 	bl	8000bc8 <NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff39 	bl	8000b98 <NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffa2 	bl	8000c80 <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b08b      	sub	sp, #44	; 0x2c
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6a:	e133      	b.n	8000fd4 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	69fa      	ldr	r2, [r7, #28]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	f040 8122 	bne.w	8000fce <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b12      	cmp	r3, #18
 8000d90:	d034      	beq.n	8000dfc <HAL_GPIO_Init+0xb4>
 8000d92:	2b12      	cmp	r3, #18
 8000d94:	d80d      	bhi.n	8000db2 <HAL_GPIO_Init+0x6a>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d02b      	beq.n	8000df2 <HAL_GPIO_Init+0xaa>
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d804      	bhi.n	8000da8 <HAL_GPIO_Init+0x60>
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d031      	beq.n	8000e06 <HAL_GPIO_Init+0xbe>
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d01c      	beq.n	8000de0 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000da6:	e048      	b.n	8000e3a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d043      	beq.n	8000e34 <HAL_GPIO_Init+0xec>
 8000dac:	2b11      	cmp	r3, #17
 8000dae:	d01b      	beq.n	8000de8 <HAL_GPIO_Init+0xa0>
          break;
 8000db0:	e043      	b.n	8000e3a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000db2:	4a8d      	ldr	r2, [pc, #564]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d026      	beq.n	8000e06 <HAL_GPIO_Init+0xbe>
 8000db8:	4a8b      	ldr	r2, [pc, #556]	; (8000fe8 <HAL_GPIO_Init+0x2a0>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d806      	bhi.n	8000dcc <HAL_GPIO_Init+0x84>
 8000dbe:	4a8b      	ldr	r2, [pc, #556]	; (8000fec <HAL_GPIO_Init+0x2a4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d020      	beq.n	8000e06 <HAL_GPIO_Init+0xbe>
 8000dc4:	4a8a      	ldr	r2, [pc, #552]	; (8000ff0 <HAL_GPIO_Init+0x2a8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d01d      	beq.n	8000e06 <HAL_GPIO_Init+0xbe>
          break;
 8000dca:	e036      	b.n	8000e3a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000dcc:	4a89      	ldr	r2, [pc, #548]	; (8000ff4 <HAL_GPIO_Init+0x2ac>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d019      	beq.n	8000e06 <HAL_GPIO_Init+0xbe>
 8000dd2:	4a89      	ldr	r2, [pc, #548]	; (8000ff8 <HAL_GPIO_Init+0x2b0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d016      	beq.n	8000e06 <HAL_GPIO_Init+0xbe>
 8000dd8:	4a88      	ldr	r2, [pc, #544]	; (8000ffc <HAL_GPIO_Init+0x2b4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0xbe>
          break;
 8000dde:	e02c      	b.n	8000e3a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	623b      	str	r3, [r7, #32]
          break;
 8000de6:	e028      	b.n	8000e3a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	3304      	adds	r3, #4
 8000dee:	623b      	str	r3, [r7, #32]
          break;
 8000df0:	e023      	b.n	8000e3a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	3308      	adds	r3, #8
 8000df8:	623b      	str	r3, [r7, #32]
          break;
 8000dfa:	e01e      	b.n	8000e3a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	330c      	adds	r3, #12
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	e019      	b.n	8000e3a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e012      	b.n	8000e3a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d105      	bne.n	8000e28 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	611a      	str	r2, [r3, #16]
          break;
 8000e26:	e008      	b.n	8000e3a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	615a      	str	r2, [r3, #20]
          break;
 8000e32:	e002      	b.n	8000e3a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
          break;
 8000e38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2bff      	cmp	r3, #255	; 0xff
 8000e3e:	d801      	bhi.n	8000e44 <HAL_GPIO_Init+0xfc>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	e001      	b.n	8000e48 <HAL_GPIO_Init+0x100>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3304      	adds	r3, #4
 8000e48:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	d802      	bhi.n	8000e56 <HAL_GPIO_Init+0x10e>
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_Init+0x114>
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	3b08      	subs	r3, #8
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	210f      	movs	r1, #15
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	6a39      	ldr	r1, [r7, #32]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	431a      	orrs	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80a2 	beq.w	8000fce <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a5c      	ldr	r2, [pc, #368]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6193      	str	r3, [r2, #24]
 8000e96:	4b5a      	ldr	r3, [pc, #360]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000ea2:	4a58      	ldr	r2, [pc, #352]	; (8001004 <HAL_GPIO_Init+0x2bc>)
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4f      	ldr	r2, [pc, #316]	; (8001008 <HAL_GPIO_Init+0x2c0>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d01f      	beq.n	8000f0e <HAL_GPIO_Init+0x1c6>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4e      	ldr	r2, [pc, #312]	; (800100c <HAL_GPIO_Init+0x2c4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d019      	beq.n	8000f0a <HAL_GPIO_Init+0x1c2>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4d      	ldr	r2, [pc, #308]	; (8001010 <HAL_GPIO_Init+0x2c8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0x1be>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4c      	ldr	r2, [pc, #304]	; (8001014 <HAL_GPIO_Init+0x2cc>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00d      	beq.n	8000f02 <HAL_GPIO_Init+0x1ba>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4b      	ldr	r2, [pc, #300]	; (8001018 <HAL_GPIO_Init+0x2d0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d007      	beq.n	8000efe <HAL_GPIO_Init+0x1b6>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4a      	ldr	r2, [pc, #296]	; (800101c <HAL_GPIO_Init+0x2d4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_GPIO_Init+0x1b2>
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	e00a      	b.n	8000f10 <HAL_GPIO_Init+0x1c8>
 8000efa:	2306      	movs	r3, #6
 8000efc:	e008      	b.n	8000f10 <HAL_GPIO_Init+0x1c8>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x1c8>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x1c8>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x1c8>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x1c8>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f12:	f002 0203 	and.w	r2, r2, #3
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000f20:	4938      	ldr	r1, [pc, #224]	; (8001004 <HAL_GPIO_Init+0x2bc>)
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d006      	beq.n	8000f48 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4938      	ldr	r1, [pc, #224]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
 8000f46:	e006      	b.n	8000f56 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	4933      	ldr	r1, [pc, #204]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	492e      	ldr	r1, [pc, #184]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	604b      	str	r3, [r1, #4]
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	4929      	ldr	r1, [pc, #164]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	4924      	ldr	r1, [pc, #144]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	608b      	str	r3, [r1, #8]
 8000f96:	e006      	b.n	8000fa6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	491f      	ldr	r1, [pc, #124]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	491a      	ldr	r1, [pc, #104]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60cb      	str	r3, [r1, #12]
 8000fbe:	e006      	b.n	8000fce <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	4915      	ldr	r1, [pc, #84]	; (8001020 <HAL_GPIO_Init+0x2d8>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	f67f aec8 	bls.w	8000d6c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000fdc:	bf00      	nop
 8000fde:	372c      	adds	r7, #44	; 0x2c
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	10210000 	.word	0x10210000
 8000fec:	10110000 	.word	0x10110000
 8000ff0:	10120000 	.word	0x10120000
 8000ff4:	10310000 	.word	0x10310000
 8000ff8:	10320000 	.word	0x10320000
 8000ffc:	10220000 	.word	0x10220000
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000
 8001008:	40010800 	.word	0x40010800
 800100c:	40010c00 	.word	0x40010c00
 8001010:	40011000 	.word	0x40011000
 8001014:	40011400 	.word	0x40011400
 8001018:	40011800 	.word	0x40011800
 800101c:	40011c00 	.word	0x40011c00
 8001020:	40010400 	.word	0x40010400

08001024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	041a      	lsls	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	611a      	str	r2, [r3, #16]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	405a      	eors	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60da      	str	r2, [r3, #12]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001078:	b08b      	sub	sp, #44	; 0x2c
 800107a:	af06      	add	r7, sp, #24
 800107c:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e0ca      	b.n	8001222 <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d106      	bne.n	80010a6 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f004 fb17 	bl	80056d4 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 fe60 	bl	8002d78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	687e      	ldr	r6, [r7, #4]
 80010c0:	466d      	mov	r5, sp
 80010c2:	f106 0410 	add.w	r4, r6, #16
 80010c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	602b      	str	r3, [r5, #0]
 80010ce:	1d33      	adds	r3, r6, #4
 80010d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d2:	6838      	ldr	r0, [r7, #0]
 80010d4:	f001 fe26 	bl	8002d24 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 fe66 	bl	8002db0 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e037      	b.n	800115a <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	015b      	lsls	r3, r3, #5
 80010f0:	4413      	add	r3, r2
 80010f2:	3329      	adds	r3, #41	; 0x29
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	b2d9      	uxtb	r1, r3
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	015b      	lsls	r3, r3, #5
 8001102:	4413      	add	r3, r2
 8001104:	3328      	adds	r3, #40	; 0x28
 8001106:	460a      	mov	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	b299      	uxth	r1, r3
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	015b      	lsls	r3, r3, #5
 8001114:	4413      	add	r3, r2
 8001116:	3334      	adds	r3, #52	; 0x34
 8001118:	460a      	mov	r2, r1
 800111a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	015b      	lsls	r3, r3, #5
 8001122:	4413      	add	r3, r2
 8001124:	332b      	adds	r3, #43	; 0x2b
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	015b      	lsls	r3, r3, #5
 8001130:	4413      	add	r3, r2
 8001132:	3338      	adds	r3, #56	; 0x38
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	015b      	lsls	r3, r3, #5
 800113e:	4413      	add	r3, r2
 8001140:	333c      	adds	r3, #60	; 0x3c
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3302      	adds	r3, #2
 800114c:	015b      	lsls	r3, r3, #5
 800114e:	4413      	add	r3, r2
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b0e      	cmp	r3, #14
 800115e:	d9c4      	bls.n	80010ea <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e03c      	b.n	80011e0 <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	015b      	lsls	r3, r3, #5
 800116c:	4413      	add	r3, r2
 800116e:	f203 2329 	addw	r3, r3, #553	; 0x229
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b2d9      	uxtb	r1, r3
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	015b      	lsls	r3, r3, #5
 8001180:	4413      	add	r3, r2
 8001182:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001186:	460a      	mov	r2, r1
 8001188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	b299      	uxth	r1, r3
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	015b      	lsls	r3, r3, #5
 8001194:	4413      	add	r3, r2
 8001196:	3334      	adds	r3, #52	; 0x34
 8001198:	460a      	mov	r2, r1
 800119a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	015b      	lsls	r3, r3, #5
 80011a2:	4413      	add	r3, r2
 80011a4:	f203 232b 	addw	r3, r3, #555	; 0x22b
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	015b      	lsls	r3, r3, #5
 80011b2:	4413      	add	r3, r2
 80011b4:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	015b      	lsls	r3, r3, #5
 80011c2:	4413      	add	r3, r2
 80011c4:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3312      	adds	r3, #18
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	4413      	add	r3, r2
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b0e      	cmp	r3, #14
 80011e4:	d9bf      	bls.n	8001166 <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	687e      	ldr	r6, [r7, #4]
 80011ee:	466d      	mov	r5, sp
 80011f0:	f106 0410 	add.w	r4, r6, #16
 80011f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	602b      	str	r3, [r5, #0]
 80011fc:	1d33      	adds	r3, r6, #4
 80011fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001200:	6838      	ldr	r0, [r7, #0]
 8001202:	f001 fde1 	bl	8002dc8 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fdcb 	bl	8003db6 <USB_DevDisconnect>
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800122a <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_PCD_Start+0x16>
 800123c:	2302      	movs	r3, #2
 800123e:	e016      	b.n	800126e <HAL_PCD_Start+0x44>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8001248:	2101      	movs	r1, #1
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f004 fca9 	bl	8005ba2 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f002 fda4 	bl	8003da2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fd70 	bl	8002d44 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fda1 	bl	8003dca <USB_ReadInterrupts>
 8001288:	4603      	mov	r3, r0
 800128a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800128e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001292:	d102      	bne.n	800129a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 fad9 	bl	800184c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fd93 	bl	8003dca <USB_ReadInterrupts>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ae:	d112      	bne.n	80012d6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012c2:	b292      	uxth	r2, r2
 80012c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f004 fa78 	bl	80057be <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80012ce:	2100      	movs	r1, #0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f8d2 	bl	800147a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 fd75 	bl	8003dca <USB_ReadInterrupts>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012ea:	d10b      	bne.n	8001304 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012fe:	b292      	uxth	r2, r2
 8001300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fd5e 	bl	8003dca <USB_ReadInterrupts>
 800130e:	4603      	mov	r3, r0
 8001310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001318:	d10b      	bne.n	8001332 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800132c:	b292      	uxth	r2, r2
 800132e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fd47 	bl	8003dca <USB_ReadInterrupts>
 800133c:	4603      	mov	r3, r0
 800133e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001346:	d126      	bne.n	8001396 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001350:	b29a      	uxth	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0204 	bic.w	r2, r2, #4
 800135a:	b292      	uxth	r2, r2
 800135c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001368:	b29a      	uxth	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0208 	bic.w	r2, r2, #8
 8001372:	b292      	uxth	r2, r2
 8001374:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f004 fa59 	bl	8005830 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001390:	b292      	uxth	r2, r2
 8001392:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f002 fd15 	bl	8003dca <USB_ReadInterrupts>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013aa:	d131      	bne.n	8001410 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0208 	orr.w	r2, r2, #8
 80013be:	b292      	uxth	r2, r2
 80013c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013d6:	b292      	uxth	r2, r2
 80013d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0204 	orr.w	r2, r2, #4
 80013ee:	b292      	uxth	r2, r2
 80013f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fce6 	bl	8003dca <USB_ReadInterrupts>
 80013fe:	4603      	mov	r3, r0
 8001400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001408:	d002      	beq.n	8001410 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f004 f9f6 	bl	80057fc <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fcd8 	bl	8003dca <USB_ReadInterrupts>
 800141a:	4603      	mov	r3, r0
 800141c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001424:	d10e      	bne.n	8001444 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001438:	b292      	uxth	r2, r2
 800143a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f004 f9af 	bl	80057a2 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 fcbe 	bl	8003dca <USB_ReadInterrupts>
 800144e:	4603      	mov	r3, r0
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001458:	d10b      	bne.n	8001472 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001462:	b29a      	uxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800146c:	b292      	uxth	r2, r2
 800146e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_PCD_SetAddress+0x1a>
 8001490:	2302      	movs	r3, #2
 8001492:	e013      	b.n	80014bc <HAL_PCD_SetAddress+0x42>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	78fa      	ldrb	r2, [r7, #3]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 fc65 	bl	8003d7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	4608      	mov	r0, r1
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	70fb      	strb	r3, [r7, #3]
 80014d6:	460b      	mov	r3, r1
 80014d8:	803b      	strh	r3, [r7, #0]
 80014da:	4613      	mov	r3, r2
 80014dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 80014e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	da08      	bge.n	8001500 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014f4:	015b      	lsls	r3, r3, #5
 80014f6:	3328      	adds	r3, #40	; 0x28
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e008      	b.n	8001512 <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001506:	015b      	lsls	r3, r3, #5
 8001508:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001518:	b2da      	uxtb	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800151e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	09db      	lsrs	r3, r3, #7
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800152e:	883a      	ldrh	r2, [r7, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	78ba      	ldrb	r2, [r7, #2]
 8001538:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_PCD_EP_Open+0x84>
 8001544:	2302      	movs	r3, #2
 8001546:	e00e      	b.n	8001566 <HAL_PCD_EP_Open+0xa2>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68f9      	ldr	r1, [r7, #12]
 8001556:	4618      	mov	r0, r3
 8001558:	f001 fc5a 	bl	8002e10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 8001564:	7afb      	ldrb	r3, [r7, #11]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 800157e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da08      	bge.n	8001598 <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800158c:	015b      	lsls	r3, r3, #5
 800158e:	3328      	adds	r3, #40	; 0x28
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	e008      	b.n	80015aa <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800159e:	015b      	lsls	r3, r3, #5
 80015a0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80015b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	09db      	lsrs	r3, r3, #7
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_PCD_EP_Close+0x66>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e00e      	b.n	80015f2 <HAL_PCD_EP_Close+0x84>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fed6 	bl	8003394 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	460b      	mov	r3, r1
 8001608:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800160e:	7afb      	ldrb	r3, [r7, #11]
 8001610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4413      	add	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2200      	movs	r2, #0
 8001636:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001638:	7afb      	ldrb	r3, [r7, #11]
 800163a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800163e:	b2da      	uxtb	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8001644:	7afb      	ldrb	r3, [r7, #11]
 8001646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800164a:	2b00      	cmp	r3, #0
 800164c:	d106      	bne.n	800165c <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	4618      	mov	r0, r3
 8001656:	f002 f825 	bl	80036a4 <USB_EPStartXfer>
 800165a:	e005      	b.n	8001668 <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6979      	ldr	r1, [r7, #20]
 8001662:	4618      	mov	r0, r3
 8001664:	f002 f81e 	bl	80036a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	3312      	adds	r3, #18
 8001688:	015b      	lsls	r3, r3, #5
 800168a:	4413      	add	r3, r2
 800168c:	3304      	adds	r3, #4
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	460b      	mov	r3, r1
 80016aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80016b0:	7afb      	ldrb	r3, [r7, #11]
 80016b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016b6:	015b      	lsls	r3, r3, #5
 80016b8:	3328      	adds	r3, #40	; 0x28
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2201      	movs	r2, #1
 80016d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80016d8:	7afb      	ldrb	r3, [r7, #11]
 80016da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 80016e4:	7afb      	ldrb	r3, [r7, #11]
 80016e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6979      	ldr	r1, [r7, #20]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 ffd5 	bl	80036a4 <USB_EPStartXfer>
 80016fa:	e005      	b.n	8001708 <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6979      	ldr	r1, [r7, #20]
 8001702:	4618      	mov	r0, r3
 8001704:	f001 ffce 	bl	80036a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8001722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001726:	2b00      	cmp	r3, #0
 8001728:	da08      	bge.n	800173c <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001730:	015b      	lsls	r3, r3, #5
 8001732:	3328      	adds	r3, #40	; 0x28
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e006      	b.n	800174a <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	015b      	lsls	r3, r3, #5
 8001740:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2201      	movs	r2, #1
 800174e:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001756:	b2da      	uxtb	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800175c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	09db      	lsrs	r3, r3, #7
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_PCD_EP_SetStall+0x68>
 8001776:	2302      	movs	r3, #2
 8001778:	e01c      	b.n	80017b4 <HAL_PCD_EP_SetStall+0xa2>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68f9      	ldr	r1, [r7, #12]
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fa0d 	bl	8003ba8 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001794:	2b00      	cmp	r3, #0
 8001796:	d108      	bne.n	80017aa <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 80017a2:	4619      	mov	r1, r3
 80017a4:	4610      	mov	r0, r2
 80017a6:	f002 fb21 	bl	8003dec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 80017cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da08      	bge.n	80017e6 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017da:	015b      	lsls	r3, r3, #5
 80017dc:	3328      	adds	r3, #40	; 0x28
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e006      	b.n	80017f4 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001800:	b2da      	uxtb	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	09db      	lsrs	r3, r3, #7
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_PCD_EP_ClrStall+0x68>
 8001820:	2302      	movs	r3, #2
 8001822:	e00e      	b.n	8001842 <HAL_PCD_EP_ClrStall+0x86>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68f9      	ldr	r1, [r7, #12]
 8001832:	4618      	mov	r0, r3
 8001834:	f002 fa18 	bl	8003c68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  uint16_t count = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	837b      	strh	r3, [r7, #26]
  uint8_t epindex = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	767b      	strb	r3, [r7, #25]
  __IO uint16_t wIstr = 0;  
 8001860:	2300      	movs	r3, #0
 8001862:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001868:	e308      	b.n	8001e7c <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800186a:	89fb      	ldrh	r3, [r7, #14]
 800186c:	b29b      	uxth	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	767b      	strb	r3, [r7, #25]
    
    if (epindex == 0)
 8001876:	7e7b      	ldrb	r3, [r7, #25]
 8001878:	2b00      	cmp	r3, #0
 800187a:	f040 812a 	bne.w	8001ad2 <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	b29b      	uxth	r3, r3
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d14d      	bne.n	8001926 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800189a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800189e:	b29b      	uxth	r3, r3
 80018a0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3328      	adds	r3, #40	; 0x28
 80018a6:	61fb      	str	r3, [r7, #28]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	3302      	adds	r3, #2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	441a      	add	r2, r3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018e4:	2100      	movs	r1, #0
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f003 ff44 	bl	8005774 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 82c1 	beq.w	8001e7c <PCD_EP_ISR_Handler+0x630>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 82bc 	bne.w	8001e7c <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	b292      	uxth	r2, r2
 8001918:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001924:	e2aa      	b.n	8001e7c <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800192c:	61fb      	str	r3, [r7, #28]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	b29b      	uxth	r3, r3
 8001936:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001938:	89bb      	ldrh	r3, [r7, #12]
 800193a:	b29b      	uxth	r3, r3
 800193c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001940:	2b00      	cmp	r3, #0
 8001942:	d031      	beq.n	80019a8 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800194c:	b29b      	uxth	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	3306      	adds	r3, #6
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	4413      	add	r3, r2
 8001962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	889a      	ldrh	r2, [r3, #4]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	b29b      	uxth	r3, r3
 8001986:	f002 fa82 	bl	8003e8e <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	b299      	uxth	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	f640 738f 	movw	r3, #3983	; 0xf8f
 800199a:	400b      	ands	r3, r1
 800199c:	b29b      	uxth	r3, r3
 800199e:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f003 febd 	bl	8005720 <HAL_PCD_SetupStageCallback>
 80019a6:	e269      	b.n	8001e7c <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019a8:	89bb      	ldrh	r3, [r7, #12]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f280 8264 	bge.w	8001e7c <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b299      	uxth	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019c4:	400b      	ands	r3, r1
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4413      	add	r3, r2
 80019de:	3306      	adds	r3, #6
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d011      	beq.n	8001a24 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	6959      	ldr	r1, [r3, #20]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	889a      	ldrh	r2, [r3, #4]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	f002 fa3c 	bl	8003e8e <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	441a      	add	r2, r3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a24:	2100      	movs	r1, #0
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f003 fe8c 	bl	8005744 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3306      	adds	r3, #6
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b3e      	cmp	r3, #62	; 0x3e
 8001a4c:	d918      	bls.n	8001a80 <PCD_EP_ISR_Handler+0x234>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	82fb      	strh	r3, [r7, #22]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <PCD_EP_ISR_Handler+0x21c>
 8001a62:	8afb      	ldrh	r3, [r7, #22]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	82fb      	strh	r3, [r7, #22]
 8001a68:	8afb      	ldrh	r3, [r7, #22]
 8001a6a:	029b      	lsls	r3, r3, #10
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e012      	b.n	8001aa6 <PCD_EP_ISR_Handler+0x25a>
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	82fb      	strh	r3, [r7, #22]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <PCD_EP_ISR_Handler+0x24e>
 8001a94:	8afb      	ldrh	r3, [r7, #22]
 8001a96:	3301      	adds	r3, #1
 8001a98:	82fb      	strh	r3, [r7, #22]
 8001a9a:	8afb      	ldrh	r3, [r7, #22]
 8001a9c:	029b      	lsls	r3, r3, #10
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab6:	b29c      	uxth	r4, r3
 8001ab8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001abc:	b29c      	uxth	r4, r3
 8001abe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001ac2:	b29c      	uxth	r4, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b98      	ldr	r3, [pc, #608]	; (8001d2c <PCD_EP_ISR_Handler+0x4e0>)
 8001aca:	4323      	orrs	r3, r4
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	8013      	strh	r3, [r2, #0]
 8001ad0:	e1d4      	b.n	8001e7c <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	7e7b      	ldrb	r3, [r7, #25]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ae4:	89bb      	ldrh	r3, [r7, #12]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f280 80d0 	bge.w	8001c90 <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	7e7b      	ldrb	r3, [r7, #25]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b299      	uxth	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	7e7b      	ldrb	r3, [r7, #25]
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	441a      	add	r2, r3
 8001b0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b10:	400b      	ands	r3, r1
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b16:	7e7b      	ldrb	r3, [r7, #25]
 8001b18:	015b      	lsls	r3, r3, #5
 8001b1a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	61fb      	str	r3, [r7, #28]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	7a9b      	ldrb	r3, [r3, #10]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d122      	bne.n	8001b72 <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	3306      	adds	r3, #6
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b56:	837b      	strh	r3, [r7, #26]
          if (count != 0U)
 8001b58:	8b7b      	ldrh	r3, [r7, #26]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d073      	beq.n	8001c46 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	6959      	ldr	r1, [r3, #20]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	889a      	ldrh	r2, [r3, #4]
 8001b6a:	8b7b      	ldrh	r3, [r7, #26]
 8001b6c:	f002 f98f 	bl	8003e8e <USB_ReadPMA>
 8001b70:	e069      	b.n	8001c46 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d022      	beq.n	8001bd2 <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb6:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8001bb8:	8b7b      	ldrh	r3, [r7, #26]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d02b      	beq.n	8001c16 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	6959      	ldr	r1, [r3, #20]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	88da      	ldrh	r2, [r3, #6]
 8001bca:	8b7b      	ldrh	r3, [r7, #26]
 8001bcc:	f002 f95f 	bl	8003e8e <USB_ReadPMA>
 8001bd0:	e021      	b.n	8001c16 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	3306      	adds	r3, #6
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bfc:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8001bfe:	8b7b      	ldrh	r3, [r7, #26]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	6959      	ldr	r1, [r3, #20]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	891a      	ldrh	r2, [r3, #8]
 8001c10:	8b7b      	ldrh	r3, [r7, #26]
 8001c12:	f002 f93c 	bl	8003e8e <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	b299      	uxth	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	441a      	add	r2, r3
 8001c3e:	4b3c      	ldr	r3, [pc, #240]	; (8001d30 <PCD_EP_ISR_Handler+0x4e4>)
 8001c40:	430b      	orrs	r3, r1
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	8b7b      	ldrh	r3, [r7, #26]
 8001c4c:	441a      	add	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	8b7b      	ldrh	r3, [r7, #26]
 8001c58:	441a      	add	r2, r3
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <PCD_EP_ISR_Handler+0x424>
 8001c66:	8b7a      	ldrh	r2, [r7, #26]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d206      	bcs.n	8001c7e <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f003 fd64 	bl	8005744 <HAL_PCD_DataOutStageCallback>
 8001c7c:	e008      	b.n	8001c90 <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	7819      	ldrb	r1, [r3, #0]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fcb5 	bl	80015fa <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c90:	89bb      	ldrh	r3, [r7, #12]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80ef 	beq.w	8001e7c <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c9e:	7e7b      	ldrb	r3, [r7, #25]
 8001ca0:	015b      	lsls	r3, r3, #5
 8001ca2:	3328      	adds	r3, #40	; 0x28
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	61fb      	str	r3, [r7, #28]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	7e7b      	ldrb	r3, [r7, #25]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	7e7a      	ldrb	r2, [r7, #25]
 8001cc2:	0092      	lsls	r2, r2, #2
 8001cc4:	440a      	add	r2, r1
 8001cc6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	7a9b      	ldrb	r3, [r3, #10]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d12c      	bne.n	8001d34 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8083 	beq.w	8001e18 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	6959      	ldr	r1, [r3, #20]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	889a      	ldrh	r2, [r3, #4]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f002 f86d 	bl	8003e02 <USB_WritePMA>
 8001d28:	e076      	b.n	8001e18 <PCD_EP_ISR_Handler+0x5cc>
 8001d2a:	bf00      	nop
 8001d2c:	ffff8080 	.word	0xffff8080
 8001d30:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d026      	beq.n	8001d9c <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	3302      	adds	r3, #2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d031      	beq.n	8001de8 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	6959      	ldr	r1, [r3, #20]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	88da      	ldrh	r2, [r3, #6]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	f002 f834 	bl	8003e02 <USB_WritePMA>
 8001d9a:	e025      	b.n	8001de8 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	3306      	adds	r3, #6
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	6959      	ldr	r1, [r3, #20]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	891a      	ldrh	r2, [r3, #8]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	f002 f80d 	bl	8003e02 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001dfe:	4013      	ands	r3, r2
 8001e00:	b299      	uxth	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	441a      	add	r2, r3
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <PCD_EP_ISR_Handler+0x650>)
 8001e12:	430b      	orrs	r3, r1
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	441a      	add	r2, r3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d106      	bne.n	8001e6a <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f003 fc86 	bl	8005774 <HAL_PCD_DataInStageCallback>
 8001e68:	e008      	b.n	8001e7c <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	7819      	ldrb	r1, [r3, #0]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fc10 	bl	800169c <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	81fa      	strh	r2, [r7, #14]
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f6ff acec 	blt.w	800186a <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3724      	adds	r7, #36	; 0x24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd90      	pop	{r4, r7, pc}
 8001e9c:	ffffc080 	.word	0xffffc080

08001ea0 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	817b      	strh	r3, [r7, #10]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001eb6:	897b      	ldrh	r3, [r7, #10]
 8001eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001ec0:	897b      	ldrh	r3, [r7, #10]
 8001ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ec6:	015b      	lsls	r3, r3, #5
 8001ec8:	3328      	adds	r3, #40	; 0x28
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4413      	add	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e006      	b.n	8001ee0 <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ed2:	897b      	ldrh	r3, [r7, #10]
 8001ed4:	015b      	lsls	r3, r3, #5
 8001ed6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4413      	add	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001ee0:	893b      	ldrh	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d107      	bne.n	8001ef6 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	809a      	strh	r2, [r3, #4]
 8001ef4:	e00b      	b.n	8001f0e <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0c1b      	lsrs	r3, r3, #16
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	420e0020 	.word	0x420e0020

08001f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8087 	beq.w	800205c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f4e:	4b92      	ldr	r3, [pc, #584]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d00c      	beq.n	8001f74 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f5a:	4b8f      	ldr	r3, [pc, #572]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d112      	bne.n	8001f8c <HAL_RCC_OscConfig+0x58>
 8001f66:	4b8c      	ldr	r3, [pc, #560]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f72:	d10b      	bne.n	8001f8c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	4b88      	ldr	r3, [pc, #544]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d06c      	beq.n	800205a <HAL_RCC_OscConfig+0x126>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d168      	bne.n	800205a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e22d      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d106      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x70>
 8001f96:	4b80      	ldr	r3, [pc, #512]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7f      	ldr	r2, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e02e      	b.n	8002002 <HAL_RCC_OscConfig+0xce>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x92>
 8001fac:	4b7a      	ldr	r3, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a79      	ldr	r2, [pc, #484]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b77      	ldr	r3, [pc, #476]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a76      	ldr	r2, [pc, #472]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e01d      	b.n	8002002 <HAL_RCC_OscConfig+0xce>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fce:	d10c      	bne.n	8001fea <HAL_RCC_OscConfig+0xb6>
 8001fd0:	4b71      	ldr	r3, [pc, #452]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a70      	ldr	r2, [pc, #448]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b6e      	ldr	r3, [pc, #440]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6d      	ldr	r2, [pc, #436]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0xce>
 8001fea:	4b6b      	ldr	r3, [pc, #428]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6a      	ldr	r2, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b68      	ldr	r3, [pc, #416]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a67      	ldr	r2, [pc, #412]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d013      	beq.n	8002032 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fd67 	bl	8000adc <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002012:	f7fe fd63 	bl	8000adc <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	; 0x64
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e1e1      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002024:	4b5c      	ldr	r3, [pc, #368]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0xde>
 8002030:	e014      	b.n	800205c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe fd53 	bl	8000adc <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203a:	f7fe fd4f 	bl	8000adc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b64      	cmp	r3, #100	; 0x64
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e1cd      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204c:	4b52      	ldr	r3, [pc, #328]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x106>
 8002058:	e000      	b.n	800205c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d063      	beq.n	8002130 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002068:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00b      	beq.n	800208c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002074:	4b48      	ldr	r3, [pc, #288]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d11c      	bne.n	80020ba <HAL_RCC_OscConfig+0x186>
 8002080:	4b45      	ldr	r3, [pc, #276]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d116      	bne.n	80020ba <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208c:	4b42      	ldr	r3, [pc, #264]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x170>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e1a1      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a4:	4b3c      	ldr	r3, [pc, #240]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4939      	ldr	r1, [pc, #228]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b8:	e03a      	b.n	8002130 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d020      	beq.n	8002104 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x268>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe fd08 	bl	8000adc <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d0:	f7fe fd04 	bl	8000adc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e182      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4926      	ldr	r1, [pc, #152]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
 8002102:	e015      	b.n	8002130 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002104:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_RCC_OscConfig+0x268>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fce7 	bl	8000adc <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002112:	f7fe fce3 	bl	8000adc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e161      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002124:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d039      	beq.n	80021b0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d019      	beq.n	8002178 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7fe fcc7 	bl	8000adc <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002152:	f7fe fcc3 	bl	8000adc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e141      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_OscConfig+0x264>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002170:	2001      	movs	r0, #1
 8002172:	f000 facf 	bl	8002714 <RCC_Delay>
 8002176:	e01b      	b.n	80021b0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe fcad 	bl	8000adc <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	e00e      	b.n	80021a4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002186:	f7fe fca9 	bl	8000adc <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d907      	bls.n	80021a4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e127      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
 8002198:	40021000 	.word	0x40021000
 800219c:	42420000 	.word	0x42420000
 80021a0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	4b92      	ldr	r3, [pc, #584]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1ea      	bne.n	8002186 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a6 	beq.w	800230a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c2:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10d      	bne.n	80021ea <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a87      	ldr	r2, [pc, #540]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	61d3      	str	r3, [r2, #28]
 80021da:	4b85      	ldr	r3, [pc, #532]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021e6:	2301      	movs	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b82      	ldr	r3, [pc, #520]	; (80023f4 <HAL_RCC_OscConfig+0x4c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0x4c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a7e      	ldr	r2, [pc, #504]	; (80023f4 <HAL_RCC_OscConfig+0x4c0>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7fe fc6b 	bl	8000adc <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7fe fc67 	bl	8000adc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b64      	cmp	r3, #100	; 0x64
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0e5      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b75      	ldr	r3, [pc, #468]	; (80023f4 <HAL_RCC_OscConfig+0x4c0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x30a>
 8002230:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	e02d      	b.n	800229a <HAL_RCC_OscConfig+0x366>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x32c>
 8002246:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a69      	ldr	r2, [pc, #420]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	6213      	str	r3, [r2, #32]
 8002252:	4b67      	ldr	r3, [pc, #412]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a66      	ldr	r2, [pc, #408]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002258:	f023 0304 	bic.w	r3, r3, #4
 800225c:	6213      	str	r3, [r2, #32]
 800225e:	e01c      	b.n	800229a <HAL_RCC_OscConfig+0x366>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x34e>
 8002268:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a60      	ldr	r2, [pc, #384]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0x366>
 8002282:	4b5b      	ldr	r3, [pc, #364]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a5a      	ldr	r2, [pc, #360]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b58      	ldr	r3, [pc, #352]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a57      	ldr	r2, [pc, #348]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d015      	beq.n	80022ce <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7fe fc1b 	bl	8000adc <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7fe fc17 	bl	8000adc <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e093      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c0:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ee      	beq.n	80022aa <HAL_RCC_OscConfig+0x376>
 80022cc:	e014      	b.n	80022f8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7fe fc05 	bl	8000adc <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7fe fc01 	bl	8000adc <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e07d      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ec:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ee      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d105      	bne.n	800230a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fe:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002308:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d069      	beq.n	80023e6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002312:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b08      	cmp	r3, #8
 800231c:	d061      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d146      	bne.n	80023b4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b34      	ldr	r3, [pc, #208]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fbd6 	bl	8000adc <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fbd2 	bl	8000adc <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e050      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235a:	d108      	bne.n	800236e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4921      	ldr	r1, [pc, #132]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a19      	ldr	r1, [r3, #32]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	430b      	orrs	r3, r1
 8002380:	491b      	ldr	r1, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002386:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fba6 	bl	8000adc <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002394:	f7fe fba2 	bl	8000adc <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e020      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x460>
 80023b2:	e018      	b.n	80023e6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7fe fb8f 	bl	8000adc <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe fb8b 	bl	8000adc <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e009      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_RCC_OscConfig+0x4bc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x48e>
 80023e0:	e001      	b.n	80023e6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
 80023f8:	42420060 	.word	0x42420060

080023fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800240a:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <HAL_RCC_ClockConfig+0x208>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d910      	bls.n	800243a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002418:	4b7a      	ldr	r3, [pc, #488]	; (8002604 <HAL_RCC_ClockConfig+0x208>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 0207 	bic.w	r2, r3, #7
 8002420:	4978      	ldr	r1, [pc, #480]	; (8002604 <HAL_RCC_ClockConfig+0x208>)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002428:	4b76      	ldr	r3, [pc, #472]	; (8002604 <HAL_RCC_ClockConfig+0x208>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d001      	beq.n	800243a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0e0      	b.n	80025fc <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002452:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4a6c      	ldr	r2, [pc, #432]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 8002458:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800245c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800246a:	4b67      	ldr	r3, [pc, #412]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4a66      	ldr	r2, [pc, #408]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 8002470:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002474:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002476:	4b64      	ldr	r3, [pc, #400]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4961      	ldr	r1, [pc, #388]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d06a      	beq.n	800256a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d107      	bne.n	80024ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249c:	4b5a      	ldr	r3, [pc, #360]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d115      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0a7      	b.n	80025fc <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b4:	4b54      	ldr	r3, [pc, #336]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d109      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e09b      	b.n	80025fc <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	4b50      	ldr	r3, [pc, #320]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e093      	b.n	80025fc <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 0203 	bic.w	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4949      	ldr	r1, [pc, #292]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e6:	f7fe faf9 	bl	8000adc <HAL_GetTick>
 80024ea:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d112      	bne.n	800251a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f6:	f7fe faf1 	bl	8000adc <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e077      	b.n	80025fc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	4b3e      	ldr	r3, [pc, #248]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b04      	cmp	r3, #4
 8002516:	d1ee      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xfa>
 8002518:	e027      	b.n	800256a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d11d      	bne.n	800255e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe fada 	bl	8000adc <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e060      	b.n	80025fc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800253a:	4b33      	ldr	r3, [pc, #204]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d1ee      	bne.n	8002524 <HAL_RCC_ClockConfig+0x128>
 8002546:	e010      	b.n	800256a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fac8 	bl	8000adc <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e04e      	b.n	80025fc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800255e:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1ee      	bne.n	8002548 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800256a:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_RCC_ClockConfig+0x208>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d210      	bcs.n	800259a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002578:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_RCC_ClockConfig+0x208>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 0207 	bic.w	r2, r3, #7
 8002580:	4920      	ldr	r1, [pc, #128]	; (8002604 <HAL_RCC_ClockConfig+0x208>)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <HAL_RCC_ClockConfig+0x208>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e030      	b.n	80025fc <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4915      	ldr	r1, [pc, #84]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d009      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025c4:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	490d      	ldr	r1, [pc, #52]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d8:	f000 f81c 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025dc:	4601      	mov	r1, r0
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x20c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_RCC_ClockConfig+0x210>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	fa21 f303 	lsr.w	r3, r1, r3
 80025f0:	4a07      	ldr	r2, [pc, #28]	; (8002610 <HAL_RCC_ClockConfig+0x214>)
 80025f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7fe fa2f 	bl	8000a58 <HAL_InitTick>
  
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40022000 	.word	0x40022000
 8002608:	40021000 	.word	0x40021000
 800260c:	08006594 	.word	0x08006594
 8002610:	20000000 	.word	0x20000000

08002614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b490      	push	{r4, r7}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800261c:	1d3c      	adds	r4, r7, #4
 800261e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002624:	4b28      	ldr	r3, [pc, #160]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x40>
 800264e:	2b08      	cmp	r3, #8
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x46>
 8002652:	e02d      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002656:	623b      	str	r3, [r7, #32]
      break;
 8002658:	e02d      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	0c9b      	lsrs	r3, r3, #18
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002666:	4413      	add	r3, r2
 8002668:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800266c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0c5b      	lsrs	r3, r3, #17
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002686:	4413      	add	r3, r2
 8002688:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800268c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002692:	fb02 f203 	mul.w	r2, r2, r3
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	e004      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	623b      	str	r3, [r7, #32]
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026b2:	623b      	str	r3, [r7, #32]
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	6a3b      	ldr	r3, [r7, #32]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3728      	adds	r7, #40	; 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc90      	pop	{r4, r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	08006524 	.word	0x08006524
 80026c8:	08006534 	.word	0x08006534
 80026cc:	40021000 	.word	0x40021000
 80026d0:	007a1200 	.word	0x007a1200
 80026d4:	003d0900 	.word	0x003d0900

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	20000000 	.word	0x20000000

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f0:	f7ff fff2 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f4:	4601      	mov	r1, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	0adb      	lsrs	r3, r3, #11
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	080065a4 	.word	0x080065a4

08002714 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <RCC_Delay+0x34>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0a      	ldr	r2, [pc, #40]	; (800274c <RCC_Delay+0x38>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	0a5b      	lsrs	r3, r3, #9
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002730:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	60fa      	str	r2, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f9      	bne.n	8002730 <RCC_Delay+0x1c>
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000000 	.word	0x20000000
 800274c:	10624dd3 	.word	0x10624dd3

08002750 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d07d      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800276c:	2300      	movs	r3, #0
 800276e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002770:	4b4f      	ldr	r3, [pc, #316]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10d      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	4b4c      	ldr	r3, [pc, #304]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	4a4b      	ldr	r2, [pc, #300]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002786:	61d3      	str	r3, [r2, #28]
 8002788:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002794:	2301      	movs	r3, #1
 8002796:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d118      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a4:	4b43      	ldr	r3, [pc, #268]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a42      	ldr	r2, [pc, #264]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b0:	f7fe f994 	bl	8000adc <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	e008      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b8:	f7fe f990 	bl	8000adc <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e06d      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ca:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027d6:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027de:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d02e      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d027      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027f4:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027fe:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002804:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800280a:	4a29      	ldr	r2, [pc, #164]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d014      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7fe f95f 	bl	8000adc <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	e00a      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe f95b 	bl	8000adc <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e036      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ee      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002844:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4917      	ldr	r1, [pc, #92]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002852:	4313      	orrs	r3, r2
 8002854:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002866:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	490b      	ldr	r1, [pc, #44]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	4904      	ldr	r1, [pc, #16]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40007000 	.word	0x40007000
 80028b8:	42420440 	.word	0x42420440

080028bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b08d      	sub	sp, #52	; 0x34
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028c4:	4b6c      	ldr	r3, [pc, #432]	; (8002a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80028c6:	f107 040c 	add.w	r4, r7, #12
 80028ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028d0:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028de:	2300      	movs	r3, #0
 80028e0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	2300      	movs	r3, #0
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	f200 80b9 	bhi.w	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80028f4:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	080029df 	.word	0x080029df
 8002900:	08002a4b 	.word	0x08002a4b
 8002904:	08002a67 	.word	0x08002a67
 8002908:	080029cf 	.word	0x080029cf
 800290c:	08002a67 	.word	0x08002a67
 8002910:	08002a67 	.word	0x08002a67
 8002914:	08002a67 	.word	0x08002a67
 8002918:	080029d7 	.word	0x080029d7
 800291c:	08002a67 	.word	0x08002a67
 8002920:	08002a67 	.word	0x08002a67
 8002924:	08002a67 	.word	0x08002a67
 8002928:	08002a67 	.word	0x08002a67
 800292c:	08002a67 	.word	0x08002a67
 8002930:	08002a67 	.word	0x08002a67
 8002934:	08002a67 	.word	0x08002a67
 8002938:	0800293d 	.word	0x0800293d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8002942:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 808d 	beq.w	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800295c:	4413      	add	r3, r2
 800295e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002962:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d018      	beq.n	80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800296e:	4b44      	ldr	r3, [pc, #272]	; (8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0c5b      	lsrs	r3, r3, #17
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800297c:	4413      	add	r3, r2
 800297e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00d      	beq.n	80029aa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800298e:	4a3d      	ldr	r2, [pc, #244]	; (8002a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	fbb2 f2f3 	udiv	r2, r2, r3
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299e:	e004      	b.n	80029aa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	4a39      	ldr	r2, [pc, #228]	; (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 80029a4:	fb02 f303 	mul.w	r3, r2, r3
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80029aa:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b6:	d102      	bne.n	80029be <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80029bc:	e055      	b.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          frequency = (pllclk * 2) / 3;
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4a32      	ldr	r2, [pc, #200]	; (8002a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029cc:	e04d      	b.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80029ce:	f7ff fe21 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80029d2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80029d4:	e04a      	b.n	8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80029d6:	f7ff fe1d 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80029da:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80029dc:	e046      	b.n	8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80029de:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ee:	d108      	bne.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 80029fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a00:	e022      	b.n	8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8002a1a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a20:	e012      	b.n	8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        frequency = HSE_VALUE / 128U;
 8002a3a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a40:	e002      	b.n	8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8002a46:	e011      	b.n	8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8002a48:	e010      	b.n	8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a4a:	f7ff fe4f 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	0b9b      	lsrs	r3, r3, #14
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a64:	e002      	b.n	8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  default: 
    {
      break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      break;
 8002a6a:	bf00      	nop
    }
  }
  return(frequency);
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3734      	adds	r7, #52	; 0x34
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd90      	pop	{r4, r7, pc}
 8002a76:	bf00      	nop
 8002a78:	08006538 	.word	0x08006538
 8002a7c:	08006548 	.word	0x08006548
 8002a80:	40021000 	.word	0x40021000
 8002a84:	007a1200 	.word	0x007a1200
 8002a88:	003d0900 	.word	0x003d0900
 8002a8c:	aaaaaaab 	.word	0xaaaaaaab

08002a90 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e084      	b.n	8002bb0 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7c5b      	ldrb	r3, [r3, #17]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fd feba 	bl	8000830 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f87a 	bl	8002bbc <HAL_RTC_WaitForSynchro>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e06b      	b.n	8002bb0 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f89c 	bl	8002c16 <RTC_EnterInitMode>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e060      	b.n	8002bb0 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0207 	bic.w	r2, r2, #7
 8002afc:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002b06:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <HAL_RTC_Init+0x128>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a2b      	ldr	r2, [pc, #172]	; (8002bb8 <HAL_RTC_Init+0x128>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002b12:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <HAL_RTC_Init+0x128>)
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4926      	ldr	r1, [pc, #152]	; (8002bb8 <HAL_RTC_Init+0x128>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d003      	beq.n	8002b36 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e00e      	b.n	8002b54 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002b36:	2001      	movs	r0, #1
 8002b38:	f7ff fec0 	bl	80028bc <HAL_RCCEx_GetPeriphCLKFreq>
 8002b3c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e030      	b.n	8002bb0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 010f 	bic.w	r1, r3, #15
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	0c1a      	lsrs	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	b291      	uxth	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f870 	bl	8002c66 <RTC_ExitInitMode>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00c      	b.n	8002bb0 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
  }
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40006c00 	.word	0x40006c00

08002bbc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e01d      	b.n	8002c0e <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0208 	bic.w	r2, r2, #8
 8002be0:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8002be2:	f7fd ff7b 	bl	8000adc <HAL_GetTick>
 8002be6:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002be8:	e009      	b.n	8002bfe <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8002bea:	f7fd ff77 	bl	8000adc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bf8:	d901      	bls.n	8002bfe <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e007      	b.n	8002c0e <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ee      	beq.n	8002bea <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 8002c22:	f7fd ff5b 	bl	8000adc <HAL_GetTick>
 8002c26:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c28:	e009      	b.n	8002c3e <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c2a:	f7fd ff57 	bl	8000adc <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c38:	d901      	bls.n	8002c3e <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e00f      	b.n	8002c5e <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ee      	beq.n	8002c2a <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0210 	orr.w	r2, r2, #16
 8002c5a:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0210 	bic.w	r2, r2, #16
 8002c80:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8002c82:	f7fd ff2b 	bl	8000adc <HAL_GetTick>
 8002c86:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c88:	e009      	b.n	8002c9e <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c8a:	f7fd ff27 	bl	8000adc <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c98:	d901      	bls.n	8002c9e <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e007      	b.n	8002cae <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ee      	beq.n	8002c8a <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_RTCEx_BKUPWrite+0x30>)
 8002cca:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	601a      	str	r2, [r3, #0]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	40006c00 	.word	0x40006c00

08002cec <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_RTCEx_BKUPRead+0x34>)
 8002d00:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4413      	add	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8002d14:	68bb      	ldr	r3, [r7, #8]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	40006c00 	.word	0x40006c00

08002d24 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d24:	b084      	sub	sp, #16
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	f107 0014 	add.w	r0, r7, #20
 8002d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	b004      	add	sp, #16
 8002d42:	4770      	bx	lr

08002d44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002d50:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002d54:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4313      	orrs	r3, r2
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002d84:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8002d88:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002dc8:	b084      	sub	sp, #16
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	f107 0014 	add.w	r0, r7, #20
 8002dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ffa2 	bl	8002d44 <USB_EnableGlobalInt>
    
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e0c:	b004      	add	sp, #16
 8002e0e:	4770      	bx	lr

08002e10 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e10:	b490      	push	{r4, r7}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	78db      	ldrb	r3, [r3, #3]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d85f      	bhi.n	8002ee2 <USB_ActivateEndpoint+0xd2>
 8002e22:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <USB_ActivateEndpoint+0x18>)
 8002e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e28:	08002e39 	.word	0x08002e39
 8002e2c:	08002eb7 	.word	0x08002eb7
 8002e30:	08002e65 	.word	0x08002e65
 8002e34:	08002e8b 	.word	0x08002e8b
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5e:	b292      	uxth	r2, r2
 8002e60:	801a      	strh	r2, [r3, #0]
    break;
 8002e62:	e03f      	b.n	8002ee4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	0092      	lsls	r2, r2, #2
 8002e7a:	440a      	add	r2, r1
 8002e7c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	8013      	strh	r3, [r2, #0]
    break;
 8002e88:	e02c      	b.n	8002ee4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	801a      	strh	r2, [r3, #0]
    break;
 8002eb4:	e016      	b.n	8002ee4 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002edc:	b292      	uxth	r2, r2
 8002ede:	801a      	strh	r2, [r3, #0]
    break;
 8002ee0:	e000      	b.n	8002ee4 <USB_ActivateEndpoint+0xd4>
  default:
      break;
 8002ee2:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b299      	uxth	r1, r3
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	441a      	add	r2, r3
 8002f0e:	4b75      	ldr	r3, [pc, #468]	; (80030e4 <USB_ActivateEndpoint+0x2d4>)
 8002f10:	430b      	orrs	r3, r1
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	7a9b      	ldrb	r3, [r3, #10]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 80e8 	bne.w	80030f0 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d04c      	beq.n	8002fc2 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	889b      	ldrh	r3, [r3, #4]
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	0059      	lsls	r1, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	005a      	lsls	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f4e:	460a      	mov	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <USB_ActivateEndpoint+0x180>
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b299      	uxth	r1, r3
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	441a      	add	r2, r3
 8002f88:	4b57      	ldr	r3, [pc, #348]	; (80030e8 <USB_ActivateEndpoint+0x2d8>)
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa6:	b29c      	uxth	r4, r3
 8002fa8:	f084 0320 	eor.w	r3, r4, #32
 8002fac:	b29c      	uxth	r4, r3
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	441a      	add	r2, r3
 8002fb8:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <USB_ActivateEndpoint+0x2d4>)
 8002fba:	4323      	orrs	r3, r4
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	8013      	strh	r3, [r2, #0]
 8002fc0:	e1d9      	b.n	8003376 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	889b      	ldrh	r3, [r3, #4]
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	0059      	lsls	r1, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3304      	adds	r3, #4
 8002fe0:	005a      	lsls	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fea:	460a      	mov	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	3306      	adds	r3, #6
 8003002:	005a      	lsls	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b3e      	cmp	r3, #62	; 0x3e
 8003014:	d918      	bls.n	8003048 <USB_ActivateEndpoint+0x238>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	81fb      	strh	r3, [r7, #14]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <USB_ActivateEndpoint+0x220>
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	3b01      	subs	r3, #1
 800302e:	81fb      	strh	r3, [r7, #14]
 8003030:	89fb      	ldrh	r3, [r7, #14]
 8003032:	029b      	lsls	r3, r3, #10
 8003034:	b29b      	uxth	r3, r3
 8003036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800303a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800303e:	b29b      	uxth	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e012      	b.n	800306e <USB_ActivateEndpoint+0x25e>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	81fb      	strh	r3, [r7, #14]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <USB_ActivateEndpoint+0x252>
 800305c:	89fb      	ldrh	r3, [r7, #14]
 800305e:	3301      	adds	r3, #1
 8003060:	81fb      	strh	r3, [r7, #14]
 8003062:	89fb      	ldrh	r3, [r7, #14]
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	b29b      	uxth	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <USB_ActivateEndpoint+0x29c>
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b29a      	uxth	r2, r3
 8003092:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003096:	4013      	ands	r3, r2
 8003098:	b299      	uxth	r1, r3
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	441a      	add	r2, r3
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <USB_ActivateEndpoint+0x2dc>)
 80030a6:	430b      	orrs	r3, r1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	b29c      	uxth	r4, r3
 80030c4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80030c8:	b29c      	uxth	r4, r3
 80030ca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80030ce:	b29c      	uxth	r4, r3
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	4b02      	ldr	r3, [pc, #8]	; (80030e4 <USB_ActivateEndpoint+0x2d4>)
 80030dc:	4323      	orrs	r3, r4
 80030de:	b29b      	uxth	r3, r3
 80030e0:	8013      	strh	r3, [r2, #0]
 80030e2:	e148      	b.n	8003376 <USB_ActivateEndpoint+0x566>
 80030e4:	ffff8080 	.word	0xffff8080
 80030e8:	ffff80c0 	.word	0xffff80c0
 80030ec:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	f640 630f 	movw	r3, #3599	; 0xe0f
 8003102:	4013      	ands	r3, r2
 8003104:	b299      	uxth	r1, r3
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	441a      	add	r2, r3
 8003110:	4b9c      	ldr	r3, [pc, #624]	; (8003384 <USB_ActivateEndpoint+0x574>)
 8003112:	430b      	orrs	r3, r1
 8003114:	b29b      	uxth	r3, r3
 8003116:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	88db      	ldrh	r3, [r3, #6]
 800311c:	085b      	lsrs	r3, r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	0059      	lsls	r1, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003128:	b29b      	uxth	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	005a      	lsls	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800313e:	460a      	mov	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	891b      	ldrh	r3, [r3, #8]
 8003146:	085b      	lsrs	r3, r3, #1
 8003148:	b29b      	uxth	r3, r3
 800314a:	0059      	lsls	r1, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003152:	b29b      	uxth	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	3304      	adds	r3, #4
 8003160:	005a      	lsls	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800316a:	460a      	mov	r2, r1
 800316c:	601a      	str	r2, [r3, #0]
    
    if (ep->is_in==0)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	785b      	ldrb	r3, [r3, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 8083 	bne.w	800327e <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d013      	beq.n	80031b6 <USB_ActivateEndpoint+0x3a6>
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29a      	uxth	r2, r3
 800319c:	f640 730f 	movw	r3, #3855	; 0xf0f
 80031a0:	4013      	ands	r3, r2
 80031a2:	b299      	uxth	r1, r3
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	4b76      	ldr	r3, [pc, #472]	; (8003388 <USB_ActivateEndpoint+0x578>)
 80031b0:	430b      	orrs	r3, r1
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d013      	beq.n	80031f4 <USB_ActivateEndpoint+0x3e4>
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	f640 730f 	movw	r3, #3855	; 0xf0f
 80031de:	4013      	ands	r3, r2
 80031e0:	b299      	uxth	r1, r3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	441a      	add	r2, r3
 80031ec:	4b67      	ldr	r3, [pc, #412]	; (800338c <USB_ActivateEndpoint+0x57c>)
 80031ee:	430b      	orrs	r3, r1
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	b29a      	uxth	r2, r3
 8003202:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003206:	4013      	ands	r3, r2
 8003208:	b299      	uxth	r1, r3
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	441a      	add	r2, r3
 8003214:	4b5d      	ldr	r3, [pc, #372]	; (800338c <USB_ActivateEndpoint+0x57c>)
 8003216:	430b      	orrs	r3, r1
 8003218:	b29b      	uxth	r3, r3
 800321a:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	b29c      	uxth	r4, r3
 8003234:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003238:	b29c      	uxth	r4, r3
 800323a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800323e:	b29c      	uxth	r4, r3
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	441a      	add	r2, r3
 800324a:	4b51      	ldr	r3, [pc, #324]	; (8003390 <USB_ActivateEndpoint+0x580>)
 800324c:	4323      	orrs	r3, r4
 800324e:	b29b      	uxth	r3, r3
 8003250:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003268:	b29c      	uxth	r4, r3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	441a      	add	r2, r3
 8003274:	4b46      	ldr	r3, [pc, #280]	; (8003390 <USB_ActivateEndpoint+0x580>)
 8003276:	4323      	orrs	r3, r4
 8003278:	b29b      	uxth	r3, r3
 800327a:	8013      	strh	r3, [r2, #0]
 800327c:	e07b      	b.n	8003376 <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <USB_ActivateEndpoint+0x4ac>
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80032a6:	4013      	ands	r3, r2
 80032a8:	b299      	uxth	r1, r3
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	441a      	add	r2, r3
 80032b4:	4b34      	ldr	r3, [pc, #208]	; (8003388 <USB_ActivateEndpoint+0x578>)
 80032b6:	430b      	orrs	r3, r1
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d013      	beq.n	80032fa <USB_ActivateEndpoint+0x4ea>
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29a      	uxth	r2, r3
 80032e0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80032e4:	4013      	ands	r3, r2
 80032e6:	b299      	uxth	r1, r3
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	4b26      	ldr	r3, [pc, #152]	; (800338c <USB_ActivateEndpoint+0x57c>)
 80032f4:	430b      	orrs	r3, r1
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	b29a      	uxth	r2, r3
 8003308:	f640 730f 	movw	r3, #3855	; 0xf0f
 800330c:	4013      	ands	r3, r2
 800330e:	b299      	uxth	r1, r3
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	441a      	add	r2, r3
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <USB_ActivateEndpoint+0x578>)
 800331c:	430b      	orrs	r3, r1
 800331e:	b29b      	uxth	r3, r3
 8003320:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003338:	b29c      	uxth	r4, r3
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	441a      	add	r2, r3
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <USB_ActivateEndpoint+0x580>)
 8003346:	4323      	orrs	r3, r4
 8003348:	b29b      	uxth	r3, r3
 800334a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	b29c      	uxth	r4, r3
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <USB_ActivateEndpoint+0x580>)
 8003370:	4323      	orrs	r3, r4
 8003372:	b29b      	uxth	r3, r3
 8003374:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bc90      	pop	{r4, r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	ffff8180 	.word	0xffff8180
 8003388:	ffffc080 	.word	0xffffc080
 800338c:	ffff80c0 	.word	0xffff80c0
 8003390:	ffff8080 	.word	0xffff8080

08003394 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003394:	b490      	push	{r4, r7}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	7a9b      	ldrb	r3, [r3, #10]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d16d      	bne.n	8003482 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	785b      	ldrb	r3, [r3, #1]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d034      	beq.n	8003418 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d013      	beq.n	80033ec <USB_DeactivateEndpoint+0x58>
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80033d6:	4013      	ands	r3, r2
 80033d8:	b299      	uxth	r1, r3
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	441a      	add	r2, r3
 80033e4:	4b68      	ldr	r3, [pc, #416]	; (8003588 <USB_DeactivateEndpoint+0x1f4>)
 80033e6:	430b      	orrs	r3, r1
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003402:	b29c      	uxth	r4, r3
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	4b5f      	ldr	r3, [pc, #380]	; (800358c <USB_DeactivateEndpoint+0x1f8>)
 8003410:	4323      	orrs	r3, r4
 8003412:	b29b      	uxth	r3, r3
 8003414:	8013      	strh	r3, [r2, #0]
 8003416:	e139      	b.n	800368c <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b29b      	uxth	r3, r3
 8003426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d013      	beq.n	8003456 <USB_DeactivateEndpoint+0xc2>
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29a      	uxth	r2, r3
 800343c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003440:	4013      	ands	r3, r2
 8003442:	b299      	uxth	r1, r3
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	4b50      	ldr	r3, [pc, #320]	; (8003590 <USB_DeactivateEndpoint+0x1fc>)
 8003450:	430b      	orrs	r3, r1
 8003452:	b29b      	uxth	r3, r3
 8003454:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346c:	b29c      	uxth	r4, r3
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	441a      	add	r2, r3
 8003478:	4b44      	ldr	r3, [pc, #272]	; (800358c <USB_DeactivateEndpoint+0x1f8>)
 800347a:	4323      	orrs	r3, r4
 800347c:	b29b      	uxth	r3, r3
 800347e:	8013      	strh	r3, [r2, #0]
 8003480:	e104      	b.n	800368c <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	785b      	ldrb	r3, [r3, #1]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8084 	bne.w	8003594 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d013      	beq.n	80034ca <USB_DeactivateEndpoint+0x136>
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80034b4:	4013      	ands	r3, r2
 80034b6:	b299      	uxth	r1, r3
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	441a      	add	r2, r3
 80034c2:	4b33      	ldr	r3, [pc, #204]	; (8003590 <USB_DeactivateEndpoint+0x1fc>)
 80034c4:	430b      	orrs	r3, r1
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <USB_DeactivateEndpoint+0x174>
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	f640 730f 	movw	r3, #3855	; 0xf0f
 80034f2:	4013      	ands	r3, r2
 80034f4:	b299      	uxth	r1, r3
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	441a      	add	r2, r3
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <USB_DeactivateEndpoint+0x1f4>)
 8003502:	430b      	orrs	r3, r1
 8003504:	b29b      	uxth	r3, r3
 8003506:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29a      	uxth	r2, r3
 8003516:	f640 730f 	movw	r3, #3855	; 0xf0f
 800351a:	4013      	ands	r3, r2
 800351c:	b299      	uxth	r1, r3
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	441a      	add	r2, r3
 8003528:	4b17      	ldr	r3, [pc, #92]	; (8003588 <USB_DeactivateEndpoint+0x1f4>)
 800352a:	430b      	orrs	r3, r1
 800352c:	b29b      	uxth	r3, r3
 800352e:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003546:	b29c      	uxth	r4, r3
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	4b0e      	ldr	r3, [pc, #56]	; (800358c <USB_DeactivateEndpoint+0x1f8>)
 8003554:	4323      	orrs	r3, r4
 8003556:	b29b      	uxth	r3, r3
 8003558:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003570:	b29c      	uxth	r4, r3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	441a      	add	r2, r3
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <USB_DeactivateEndpoint+0x1f8>)
 800357e:	4323      	orrs	r3, r4
 8003580:	b29b      	uxth	r3, r3
 8003582:	8013      	strh	r3, [r2, #0]
 8003584:	e082      	b.n	800368c <USB_DeactivateEndpoint+0x2f8>
 8003586:	bf00      	nop
 8003588:	ffff80c0 	.word	0xffff80c0
 800358c:	ffff8080 	.word	0xffff8080
 8003590:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d013      	beq.n	80035d2 <USB_DeactivateEndpoint+0x23e>
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80035bc:	4013      	ands	r3, r2
 80035be:	b299      	uxth	r1, r3
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	441a      	add	r2, r3
 80035ca:	4b33      	ldr	r3, [pc, #204]	; (8003698 <USB_DeactivateEndpoint+0x304>)
 80035cc:	430b      	orrs	r3, r1
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <USB_DeactivateEndpoint+0x27c>
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80035fa:	4013      	ands	r3, r2
 80035fc:	b299      	uxth	r1, r3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	441a      	add	r2, r3
 8003608:	4b24      	ldr	r3, [pc, #144]	; (800369c <USB_DeactivateEndpoint+0x308>)
 800360a:	430b      	orrs	r3, r1
 800360c:	b29b      	uxth	r3, r3
 800360e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29a      	uxth	r2, r3
 800361e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003622:	4013      	ands	r3, r2
 8003624:	b299      	uxth	r1, r3
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	441a      	add	r2, r3
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <USB_DeactivateEndpoint+0x304>)
 8003632:	430b      	orrs	r3, r1
 8003634:	b29b      	uxth	r3, r3
 8003636:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800364e:	b29c      	uxth	r4, r3
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	441a      	add	r2, r3
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <USB_DeactivateEndpoint+0x30c>)
 800365c:	4323      	orrs	r3, r4
 800365e:	b29b      	uxth	r3, r3
 8003660:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003678:	b29c      	uxth	r4, r3
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	441a      	add	r2, r3
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <USB_DeactivateEndpoint+0x30c>)
 8003686:	4323      	orrs	r3, r4
 8003688:	b29b      	uxth	r3, r3
 800368a:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bc90      	pop	{r4, r7}
 8003696:	4770      	bx	lr
 8003698:	ffffc080 	.word	0xffffc080
 800369c:	ffff80c0 	.word	0xffff80c0
 80036a0:	ffff8080 	.word	0xffff8080

080036a4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b08d      	sub	sp, #52	; 0x34
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	f040 8149 	bne.w	8003954 <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d909      	bls.n	80036e2 <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	1ad2      	subs	r2, r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	619a      	str	r2, [r3, #24]
 80036e0:	e005      	b.n	80036ee <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	7a9b      	ldrb	r3, [r3, #10]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d11b      	bne.n	800372e <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6959      	ldr	r1, [r3, #20]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	889a      	ldrh	r2, [r3, #4]
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	b29b      	uxth	r3, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fb7d 	bl	8003e02 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800370e:	b29b      	uxth	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	3302      	adds	r3, #2
 800371c:	005a      	lsls	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003726:	461a      	mov	r2, r3
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e0f6      	b.n	800391c <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d059      	beq.n	80037f8 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d13b      	bne.n	80037c4 <USB_EPStartXfer+0x120>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	3306      	adds	r3, #6
 8003760:	005a      	lsls	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	2b3e      	cmp	r3, #62	; 0x3e
 8003770:	d916      	bls.n	80037a0 <USB_EPStartXfer+0xfc>
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <USB_EPStartXfer+0xe4>
 8003782:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003784:	3b01      	subs	r3, #1
 8003786:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003788:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800378a:	029b      	lsls	r3, r3, #10
 800378c:	b29b      	uxth	r3, r3
 800378e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e027      	b.n	80037f0 <USB_EPStartXfer+0x14c>
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <USB_EPStartXfer+0x112>
 80037b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037b2:	3301      	adds	r3, #1
 80037b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80037b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037b8:	029b      	lsls	r3, r3, #10
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e015      	b.n	80037f0 <USB_EPStartXfer+0x14c>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	785b      	ldrb	r3, [r3, #1]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d111      	bne.n	80037f0 <USB_EPStartXfer+0x14c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	3302      	adds	r3, #2
 80037e0:	005a      	lsls	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037ea:	461a      	mov	r2, r3
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	891b      	ldrh	r3, [r3, #8]
 80037f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80037f6:	e058      	b.n	80038aa <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	785b      	ldrb	r3, [r3, #1]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d13b      	bne.n	8003878 <USB_EPStartXfer+0x1d4>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003806:	b29b      	uxth	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	3302      	adds	r3, #2
 8003814:	005a      	lsls	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	2b3e      	cmp	r3, #62	; 0x3e
 8003824:	d916      	bls.n	8003854 <USB_EPStartXfer+0x1b0>
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <USB_EPStartXfer+0x198>
 8003836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003838:	3b01      	subs	r3, #1
 800383a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800383c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	b29b      	uxth	r3, r3
 8003842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800384a:	b29b      	uxth	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e027      	b.n	80038a4 <USB_EPStartXfer+0x200>
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	84bb      	strh	r3, [r7, #36]	; 0x24
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <USB_EPStartXfer+0x1c6>
 8003864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003866:	3301      	adds	r3, #1
 8003868:	84bb      	strh	r3, [r7, #36]	; 0x24
 800386a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800386c:	029b      	lsls	r3, r3, #10
 800386e:	b29b      	uxth	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e015      	b.n	80038a4 <USB_EPStartXfer+0x200>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	785b      	ldrb	r3, [r3, #1]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d111      	bne.n	80038a4 <USB_EPStartXfer+0x200>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003886:	b29b      	uxth	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	3302      	adds	r3, #2
 8003894:	005a      	lsls	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800389e:	461a      	mov	r2, r3
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	88db      	ldrh	r3, [r3, #6]
 80038a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6959      	ldr	r1, [r3, #20]
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 faa4 	bl	8003e02 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d114      	bne.n	80038ec <USB_EPStartXfer+0x248>
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80038d4:	4013      	ands	r3, r2
 80038d6:	b299      	uxth	r1, r3
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	4b92      	ldr	r3, [pc, #584]	; (8003b2c <USB_EPStartXfer+0x488>)
 80038e4:	430b      	orrs	r3, r1
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	8013      	strh	r3, [r2, #0]
 80038ea:	e017      	b.n	800391c <USB_EPStartXfer+0x278>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	785b      	ldrb	r3, [r3, #1]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d113      	bne.n	800391c <USB_EPStartXfer+0x278>
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29a      	uxth	r2, r3
 8003902:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003906:	4013      	ands	r3, r2
 8003908:	b299      	uxth	r1, r3
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	441a      	add	r2, r3
 8003914:	4b86      	ldr	r3, [pc, #536]	; (8003b30 <USB_EPStartXfer+0x48c>)
 8003916:	430b      	orrs	r3, r1
 8003918:	b29b      	uxth	r3, r3
 800391a:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003932:	b29c      	uxth	r4, r3
 8003934:	f084 0310 	eor.w	r3, r4, #16
 8003938:	b29c      	uxth	r4, r3
 800393a:	f084 0320 	eor.w	r3, r4, #32
 800393e:	b29c      	uxth	r4, r3
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	441a      	add	r2, r3
 800394a:	4b7a      	ldr	r3, [pc, #488]	; (8003b34 <USB_EPStartXfer+0x490>)
 800394c:	4323      	orrs	r3, r4
 800394e:	b29b      	uxth	r3, r3
 8003950:	8013      	strh	r3, [r2, #0]
 8003952:	e122      	b.n	8003b9a <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	429a      	cmp	r2, r3
 800395e:	d909      	bls.n	8003974 <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	1ad2      	subs	r2, r2, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	619a      	str	r2, [r3, #24]
 8003972:	e005      	b.n	8003980 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	7a9b      	ldrb	r3, [r3, #10]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d13b      	bne.n	8003a00 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	3306      	adds	r3, #6
 800399c:	005a      	lsls	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	2b3e      	cmp	r3, #62	; 0x3e
 80039ac:	d916      	bls.n	80039dc <USB_EPStartXfer+0x338>
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <USB_EPStartXfer+0x320>
 80039be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039c0:	3b01      	subs	r3, #1
 80039c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80039c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039c6:	029b      	lsls	r3, r3, #10
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e0c3      	b.n	8003b64 <USB_EPStartXfer+0x4c0>
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <USB_EPStartXfer+0x34e>
 80039ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039ee:	3301      	adds	r3, #1
 80039f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80039f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039f4:	029b      	lsls	r3, r3, #10
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e0b1      	b.n	8003b64 <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d13b      	bne.n	8003a80 <USB_EPStartXfer+0x3dc>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	005a      	lsls	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	2b3e      	cmp	r3, #62	; 0x3e
 8003a2c:	d916      	bls.n	8003a5c <USB_EPStartXfer+0x3b8>
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	843b      	strh	r3, [r7, #32]
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <USB_EPStartXfer+0x3a0>
 8003a3e:	8c3b      	ldrh	r3, [r7, #32]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	843b      	strh	r3, [r7, #32]
 8003a44:	8c3b      	ldrh	r3, [r7, #32]
 8003a46:	029b      	lsls	r3, r3, #10
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e027      	b.n	8003aac <USB_EPStartXfer+0x408>
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	843b      	strh	r3, [r7, #32]
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <USB_EPStartXfer+0x3ce>
 8003a6c:	8c3b      	ldrh	r3, [r7, #32]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	843b      	strh	r3, [r7, #32]
 8003a72:	8c3b      	ldrh	r3, [r7, #32]
 8003a74:	029b      	lsls	r3, r3, #10
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e015      	b.n	8003aac <USB_EPStartXfer+0x408>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d111      	bne.n	8003aac <USB_EPStartXfer+0x408>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	005a      	lsls	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d141      	bne.n	8003b38 <USB_EPStartXfer+0x494>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3306      	adds	r3, #6
 8003ac8:	005a      	lsls	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ad8:	d916      	bls.n	8003b08 <USB_EPStartXfer+0x464>
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	83fb      	strh	r3, [r7, #30]
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d102      	bne.n	8003af0 <USB_EPStartXfer+0x44c>
 8003aea:	8bfb      	ldrh	r3, [r7, #30]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	83fb      	strh	r3, [r7, #30]
 8003af0:	8bfb      	ldrh	r3, [r7, #30]
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e02d      	b.n	8003b64 <USB_EPStartXfer+0x4c0>
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	83fb      	strh	r3, [r7, #30]
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <USB_EPStartXfer+0x47a>
 8003b18:	8bfb      	ldrh	r3, [r7, #30]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	83fb      	strh	r3, [r7, #30]
 8003b1e:	8bfb      	ldrh	r3, [r7, #30]
 8003b20:	029b      	lsls	r3, r3, #10
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e01b      	b.n	8003b64 <USB_EPStartXfer+0x4c0>
 8003b2c:	ffff80c0 	.word	0xffff80c0
 8003b30:	ffffc080 	.word	0xffffc080
 8003b34:	ffff8080 	.word	0xffff8080
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	785b      	ldrb	r3, [r3, #1]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d111      	bne.n	8003b64 <USB_EPStartXfer+0x4c0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	3302      	adds	r3, #2
 8003b54:	005a      	lsls	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b5e:	461a      	mov	r2, r3
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	b29c      	uxth	r4, r3
 8003b7c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003b80:	b29c      	uxth	r4, r3
 8003b82:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003b86:	b29c      	uxth	r4, r3
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	441a      	add	r2, r3
 8003b92:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <USB_EPStartXfer+0x500>)
 8003b94:	4323      	orrs	r3, r4
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3734      	adds	r7, #52	; 0x34
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd90      	pop	{r4, r7, pc}
 8003ba4:	ffff8080 	.word	0xffff8080

08003ba8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8003ba8:	b490      	push	{r4, r7}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d118      	bne.n	8003bec <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8003bcc:	401c      	ands	r4, r3
 8003bce:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8003bd2:	f084 0410 	eor.w	r4, r4, #16
 8003bd6:	b2a1      	uxth	r1, r4
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	441a      	add	r2, r3
 8003be2:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <USB_EPSetStall+0xbc>)
 8003be4:	430b      	orrs	r3, r1
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	8013      	strh	r3, [r2, #0]
 8003bea:	e034      	b.n	8003c56 <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	785b      	ldrb	r3, [r3, #1]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d018      	beq.n	8003c26 <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0a:	b29c      	uxth	r4, r3
 8003c0c:	f084 0310 	eor.w	r3, r4, #16
 8003c10:	b29c      	uxth	r4, r3
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	441a      	add	r2, r3
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <USB_EPSetStall+0xbc>)
 8003c1e:	4323      	orrs	r3, r4
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	8013      	strh	r3, [r2, #0]
 8003c24:	e017      	b.n	8003c56 <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3c:	b29c      	uxth	r4, r3
 8003c3e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c42:	b29c      	uxth	r4, r3
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <USB_EPSetStall+0xbc>)
 8003c50:	4323      	orrs	r3, r4
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc90      	pop	{r4, r7}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	ffff8080 	.word	0xffff8080

08003c68 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c68:	b490      	push	{r4, r7}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d03a      	beq.n	8003cf0 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <USB_EPClearStall+0x50>
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	b299      	uxth	r1, r3
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	441a      	add	r2, r3
 8003cb0:	4b2f      	ldr	r3, [pc, #188]	; (8003d70 <USB_EPClearStall+0x108>)
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cce:	b29c      	uxth	r4, r3
 8003cd0:	f084 0310 	eor.w	r3, r4, #16
 8003cd4:	b29c      	uxth	r4, r3
 8003cd6:	f084 0320 	eor.w	r3, r4, #32
 8003cda:	b29c      	uxth	r4, r3
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	441a      	add	r2, r3
 8003ce6:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <USB_EPClearStall+0x10c>)
 8003ce8:	4323      	orrs	r3, r4
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	8013      	strh	r3, [r2, #0]
 8003cee:	e039      	b.n	8003d64 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d013      	beq.n	8003d2e <USB_EPClearStall+0xc6>
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003d18:	4013      	ands	r3, r2
 8003d1a:	b299      	uxth	r1, r3
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	441a      	add	r2, r3
 8003d26:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <USB_EPClearStall+0x110>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d44:	b29c      	uxth	r4, r3
 8003d46:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d4a:	b29c      	uxth	r4, r3
 8003d4c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d50:	b29c      	uxth	r4, r3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	441a      	add	r2, r3
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <USB_EPClearStall+0x10c>)
 8003d5e:	4323      	orrs	r3, r4
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc90      	pop	{r4, r7}
 8003d6e:	4770      	bx	lr
 8003d70:	ffff80c0 	.word	0xffff80c0
 8003d74:	ffff8080 	.word	0xffff8080
 8003d78:	ffffc080 	.word	0xffffc080

08003d7c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2280      	movs	r2, #128	; 0x80
 8003d92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr

08003db6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003de0:	68fb      	ldr	r3, [r7, #12]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b08b      	sub	sp, #44	; 0x2c
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	461a      	mov	r2, r3
 8003e10:	460b      	mov	r3, r1
 8003e12:	80fb      	strh	r3, [r7, #6]
 8003e14:	4613      	mov	r3, r2
 8003e16:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8003e18:	88bb      	ldrh	r3, [r7, #4]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	105b      	asrs	r3, r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
 8003e24:	2300      	movs	r3, #0
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	461a      	mov	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e3e:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
 8003e44:	e01b      	b.n	8003e7e <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	461a      	mov	r2, r3
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	1c9a      	adds	r2, r3, #2
 8003e64:	623a      	str	r2, [r7, #32]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	b292      	uxth	r2, r2
 8003e6a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	3302      	adds	r3, #2
 8003e70:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e0      	bne.n	8003e46 <USB_WritePMA+0x44>
  }
}
 8003e84:	bf00      	nop
 8003e86:	372c      	adds	r7, #44	; 0x2c
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b089      	sub	sp, #36	; 0x24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	4611      	mov	r1, r2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	80fb      	strh	r3, [r7, #6]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8003ea4:	88bb      	ldrh	r3, [r7, #4]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	105b      	asrs	r3, r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ec2:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	e00e      	b.n	8003ee8 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	1d1a      	adds	r2, r3, #4
 8003ece:	61ba      	str	r2, [r7, #24]
 8003ed0:	6819      	ldr	r1, [r3, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	60ba      	str	r2, [r7, #8]
 8003ed8:	b28a      	uxth	r2, r1
 8003eda:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ed      	bne.n	8003eca <USB_ReadPMA+0x3c>
  }
}
 8003eee:	bf00      	nop
 8003ef0:	3724      	adds	r7, #36	; 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	7c1b      	ldrb	r3, [r3, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10e      	bne.n	8003f2e <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f14:	2202      	movs	r2, #2
 8003f16:	2181      	movs	r1, #129	; 0x81
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f001 fd0c 	bl	8005936 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f22:	2202      	movs	r2, #2
 8003f24:	2101      	movs	r1, #1
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f001 fd05 	bl	8005936 <USBD_LL_OpenEP>
 8003f2c:	e00b      	b.n	8003f46 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003f2e:	2340      	movs	r3, #64	; 0x40
 8003f30:	2202      	movs	r2, #2
 8003f32:	2181      	movs	r1, #129	; 0x81
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f001 fcfe 	bl	8005936 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003f3a:	2340      	movs	r3, #64	; 0x40
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	2101      	movs	r1, #1
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f001 fcf8 	bl	8005936 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8003f46:	2308      	movs	r3, #8
 8003f48:	2203      	movs	r2, #3
 8003f4a:	2182      	movs	r1, #130	; 0x82
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f001 fcf2 	bl	8005936 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003f52:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003f56:	f001 fe0f 	bl	8005b78 <USBD_static_malloc>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
 8003f70:	e026      	b.n	8003fc0 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f78:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	7c1b      	ldrb	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f001 fdae 	bl	8005b0a <USBD_LL_PrepareReceive>
 8003fae:	e007      	b.n	8003fc0 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003fb6:	2340      	movs	r3, #64	; 0x40
 8003fb8:	2101      	movs	r1, #1
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f001 fda5 	bl	8005b0a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8003fda:	2181      	movs	r1, #129	; 0x81
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f001 fcd0 	bl	8005982 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f001 fccc 	bl	8005982 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8003fea:	2182      	movs	r1, #130	; 0x82
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f001 fcc8 	bl	8005982 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00e      	beq.n	800401a <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800400c:	4618      	mov	r0, r3
 800400e:	f001 fdbf 	bl	8005b90 <USBD_static_free>
    pdev->pClassData = NULL;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004034:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800403e:	2b00      	cmp	r3, #0
 8004040:	d03a      	beq.n	80040b8 <USBD_CDC_Setup+0x94>
 8004042:	2b20      	cmp	r3, #32
 8004044:	d000      	beq.n	8004048 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8004046:	e043      	b.n	80040d0 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	88db      	ldrh	r3, [r3, #6]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d029      	beq.n	80040a4 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	b25b      	sxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	da11      	bge.n	800407e <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004066:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	88d2      	ldrh	r2, [r2, #6]
 800406c:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 800406e:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	88db      	ldrh	r3, [r3, #6]
 8004074:	461a      	mov	r2, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f001 f80e 	bl	8005098 <USBD_CtlSendData>
    break;
 800407c:	e029      	b.n	80040d2 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	785a      	ldrb	r2, [r3, #1]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	88db      	ldrh	r3, [r3, #6]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8004094:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	88db      	ldrh	r3, [r3, #6]
 800409a:	461a      	mov	r2, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f001 f829 	bl	80050f4 <USBD_CtlPrepareRx>
    break;
 80040a2:	e016      	b.n	80040d2 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	7850      	ldrb	r0, [r2, #1]
 80040b0:	2200      	movs	r2, #0
 80040b2:	6839      	ldr	r1, [r7, #0]
 80040b4:	4798      	blx	r3
    break;
 80040b6:	e00c      	b.n	80040d2 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	2b0a      	cmp	r3, #10
 80040be:	d001      	beq.n	80040c4 <USBD_CDC_Setup+0xa0>
 80040c0:	2b0b      	cmp	r3, #11
      break;
 80040c2:	e005      	b.n	80040d0 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 80040c4:	2201      	movs	r2, #1
 80040c6:	4905      	ldr	r1, [pc, #20]	; (80040dc <USBD_CDC_Setup+0xb8>)
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 ffe5 	bl	8005098 <USBD_CtlSendData>
      break;
 80040ce:	bf00      	nop
    break;
 80040d0:	bf00      	nop
  }
  return USBD_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000229 	.word	0x20000229

080040e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80040f2:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004128:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f001 fd0e 	bl	8005b50 <USBD_LL_GetRxDataSize>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800415a:	4611      	mov	r1, r2
 800415c:	4798      	blx	r3

    return USBD_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800417a:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d015      	beq.n	80041b2 <USBD_CDC_EP0_RxReady+0x46>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800418c:	2bff      	cmp	r3, #255	; 0xff
 800418e:	d010      	beq.n	80041b2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800419e:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80041a6:	b292      	uxth	r2, r2
 80041a8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	22ff      	movs	r2, #255	; 0xff
 80041ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2243      	movs	r2, #67	; 0x43
 80041c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80041ca:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	200000b4 	.word	0x200000b4

080041dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2243      	movs	r2, #67	; 0x43
 80041e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80041ea:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000070 	.word	0x20000070

080041fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2243      	movs	r2, #67	; 0x43
 8004208:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800420a:	4b03      	ldr	r3, [pc, #12]	; (8004218 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	200000f8 	.word	0x200000f8

0800421c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	220a      	movs	r2, #10
 8004228:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800422a:	4b03      	ldr	r3, [pc, #12]	; (8004238 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	2000002c 	.word	0x2000002c

0800423c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004246:	2302      	movs	r3, #2
 8004248:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	4613      	mov	r3, r2
 8004274:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800427c:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8004286:	88fa      	ldrh	r2, [r7, #6]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80042aa:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80042ce:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d017      	beq.n	800430a <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d110      	bne.n	8004306 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2181      	movs	r1, #129	; 0x81
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 fbe1 	bl	8005ac4 <USBD_LL_Transmit>
      
      return USBD_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e002      	b.n	800430c <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 800430a:	2302      	movs	r3, #2
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004322:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800432a:	2b00      	cmp	r3, #0
 800432c:	d017      	beq.n	800435e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	7c1b      	ldrb	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800433c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004340:	2101      	movs	r1, #1
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f001 fbe1 	bl	8005b0a <USBD_LL_PrepareReceive>
 8004348:	e007      	b.n	800435a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004350:	2340      	movs	r3, #64	; 0x40
 8004352:	2101      	movs	r1, #1
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f001 fbd8 	bl	8005b0a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	4613      	mov	r3, r2
 8004374:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800437c:	2302      	movs	r3, #2
 800437e:	e01a      	b.n	80043b6 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	79fa      	ldrb	r2, [r7, #7]
 80043ac:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f001 fa4c 	bl	800584c <USBD_LL_Init>
  
  return USBD_OK; 
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d006      	beq.n	80043e0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]
 80043de:	e001      	b.n	80043e4 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80043e0:	2302      	movs	r3, #2
 80043e2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f001 fa81 	bl	8005900 <USBD_LL_Start>
  
  return USBD_OK;  
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004428:	2302      	movs	r3, #2
 800442a:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00c      	beq.n	8004450 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	4611      	mov	r1, r2
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8004450:	7bfb      	ldrb	r3, [r7, #15]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	460b      	mov	r3, r1
 8004464:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	4611      	mov	r1, r2
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
  return USBD_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fd59 	bl	8004f4a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80044a6:	461a      	mov	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d00b      	beq.n	80044d4 <USBD_LL_SetupStage+0x54>
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d011      	beq.n	80044e4 <USBD_LL_SetupStage+0x64>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d117      	bne.n	80044f4 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044ca:	4619      	mov	r1, r3
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f987 	bl	80047e0 <USBD_StdDevReq>
    break;
 80044d2:	e01a      	b.n	800450a <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044da:	4619      	mov	r1, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f9cf 	bl	8004880 <USBD_StdItfReq>
    break;
 80044e2:	e012      	b.n	800450a <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f9fa 	bl	80048e6 <USBD_StdEPReq>
    break;
 80044f2:	e00a      	b.n	800450a <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80044fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f001 fa5c 	bl	80059c0 <USBD_LL_StallEP>
    break;
 8004508:	bf00      	nop
  }  
  return USBD_OK;  
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	460b      	mov	r3, r1
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004522:	7afb      	ldrb	r3, [r7, #11]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d138      	bne.n	800459a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800452e:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004536:	2b03      	cmp	r3, #3
 8004538:	d142      	bne.n	80045c0 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	429a      	cmp	r2, r3
 8004544:	d914      	bls.n	8004570 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4293      	cmp	r3, r2
 800455e:	bf28      	it	cs
 8004560:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8004562:	b29b      	uxth	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fde1 	bl	8005130 <USBD_CtlContinueRx>
 800456e:	e027      	b.n	80045c0 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004582:	2b03      	cmp	r3, #3
 8004584:	d105      	bne.n	8004592 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fdde 	bl	8005154 <USBD_CtlSendStatus>
 8004598:	e012      	b.n	80045c0 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00c      	beq.n	80045c0 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d107      	bne.n	80045c0 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	7afa      	ldrb	r2, [r7, #11]
 80045ba:	4611      	mov	r1, r2
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	4798      	blx	r3
  }  
  return USBD_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	460b      	mov	r3, r1
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80045d8:	7afb      	ldrb	r3, [r7, #11]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d16c      	bne.n	80046b8 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3314      	adds	r3, #20
 80045e2:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d157      	bne.n	800469e <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d915      	bls.n	8004626 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	1ad2      	subs	r2, r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800460c:	b29b      	uxth	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fd5c 	bl	80050d0 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004618:	2300      	movs	r3, #0
 800461a:	2200      	movs	r2, #0
 800461c:	2100      	movs	r1, #0
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f001 fa73 	bl	8005b0a <USBD_LL_PrepareReceive>
 8004624:	e03b      	b.n	800469e <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	68d2      	ldr	r2, [r2, #12]
 800462e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004632:	fb02 f201 	mul.w	r2, r2, r1
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d11c      	bne.n	8004676 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004644:	429a      	cmp	r2, r3
 8004646:	d316      	bcc.n	8004676 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004652:	429a      	cmp	r2, r3
 8004654:	d20f      	bcs.n	8004676 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004656:	2200      	movs	r2, #0
 8004658:	2100      	movs	r1, #0
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fd38 	bl	80050d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004668:	2300      	movs	r3, #0
 800466a:	2200      	movs	r2, #0
 800466c:	2100      	movs	r1, #0
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f001 fa4b 	bl	8005b0a <USBD_LL_PrepareReceive>
 8004674:	e013      	b.n	800469e <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004688:	2b03      	cmp	r3, #3
 800468a:	d105      	bne.n	8004698 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 fd6e 	bl	800517a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d11a      	bne.n	80046de <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f7ff fead 	bl	8004408 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80046b6:	e012      	b.n	80046de <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00c      	beq.n	80046de <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d107      	bne.n	80046de <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	7afa      	ldrb	r2, [r7, #11]
 80046d8:	4611      	mov	r1, r2
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	4798      	blx	r3
  }  
  return USBD_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80046f0:	2340      	movs	r3, #64	; 0x40
 80046f2:	2200      	movs	r2, #0
 80046f4:	2100      	movs	r1, #0
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f001 f91d 	bl	8005936 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2240      	movs	r2, #64	; 0x40
 8004700:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004704:	2340      	movs	r3, #64	; 0x40
 8004706:	2200      	movs	r2, #0
 8004708:	2180      	movs	r1, #128	; 0x80
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f001 f913 	bl	8005936 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2240      	movs	r2, #64	; 0x40
 8004714:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6852      	ldr	r2, [r2, #4]
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	4611      	mov	r1, r2
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4798      	blx	r3
 
  
  return USBD_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	460b      	mov	r3, r1
 8004750:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	78fa      	ldrb	r2, [r7, #3]
 8004756:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2204      	movs	r2, #4
 800477c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d10b      	bne.n	80047d6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 80047ea:	2300      	movs	r3, #0
 80047ec:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	785b      	ldrb	r3, [r3, #1]
 80047f2:	2b09      	cmp	r3, #9
 80047f4:	d839      	bhi.n	800486a <USBD_StdDevReq+0x8a>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <USBD_StdDevReq+0x1c>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	0800484d 	.word	0x0800484d
 8004800:	08004861 	.word	0x08004861
 8004804:	0800486b 	.word	0x0800486b
 8004808:	08004857 	.word	0x08004857
 800480c:	0800486b 	.word	0x0800486b
 8004810:	0800482f 	.word	0x0800482f
 8004814:	08004825 	.word	0x08004825
 8004818:	0800486b 	.word	0x0800486b
 800481c:	08004843 	.word	0x08004843
 8004820:	08004839 	.word	0x08004839
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004824:	6839      	ldr	r1, [r7, #0]
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f936 	bl	8004a98 <USBD_GetDescriptor>
    break;
 800482c:	e022      	b.n	8004874 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fa25 	bl	8004c80 <USBD_SetAddress>
    break;
 8004836:	e01d      	b.n	8004874 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa5e 	bl	8004cfc <USBD_SetConfig>
    break;
 8004840:	e018      	b.n	8004874 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fae1 	bl	8004e0c <USBD_GetConfig>
    break;
 800484a:	e013      	b.n	8004874 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fb0e 	bl	8004e70 <USBD_GetStatus>
    break;
 8004854:	e00e      	b.n	8004874 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fb33 	bl	8004ec4 <USBD_SetFeature>
    break;
 800485e:	e009      	b.n	8004874 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fb49 	bl	8004efa <USBD_ClrFeature>
    break;
 8004868:	e004      	b.n	8004874 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fba8 	bl	8004fc2 <USBD_CtlError>
    break;
 8004872:	bf00      	nop
  }
  
  return ret;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop

08004880 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800488a:	2300      	movs	r3, #0
 800488c:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004894:	2b03      	cmp	r3, #3
 8004896:	d11b      	bne.n	80048d0 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	889b      	ldrh	r3, [r3, #4]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d811      	bhi.n	80048c6 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	6839      	ldr	r1, [r7, #0]
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	88db      	ldrh	r3, [r3, #6]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d110      	bne.n	80048da <USBD_StdItfReq+0x5a>
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10d      	bne.n	80048da <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fc48 	bl	8005154 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80048c4:	e009      	b.n	80048da <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80048c6:	6839      	ldr	r1, [r7, #0]
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fb7a 	bl	8004fc2 <USBD_CtlError>
    break;
 80048ce:	e004      	b.n	80048da <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fb75 	bl	8004fc2 <USBD_CtlError>
    break;
 80048d8:	e000      	b.n	80048dc <USBD_StdItfReq+0x5c>
    break;
 80048da:	bf00      	nop
  }
  return USBD_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	889b      	ldrh	r3, [r3, #4]
 80048f8:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004902:	2b20      	cmp	r3, #32
 8004904:	d108      	bne.n	8004918 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
    
    return USBD_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e0ba      	b.n	8004a8e <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d039      	beq.n	8004994 <USBD_StdEPReq+0xae>
 8004920:	2b03      	cmp	r3, #3
 8004922:	d002      	beq.n	800492a <USBD_StdEPReq+0x44>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d06b      	beq.n	8004a00 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8004928:	e0b0      	b.n	8004a8c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004930:	2b02      	cmp	r3, #2
 8004932:	d002      	beq.n	800493a <USBD_StdEPReq+0x54>
 8004934:	2b03      	cmp	r3, #3
 8004936:	d00c      	beq.n	8004952 <USBD_StdEPReq+0x6c>
 8004938:	e025      	b.n	8004986 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800493a:	7bbb      	ldrb	r3, [r7, #14]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d027      	beq.n	8004990 <USBD_StdEPReq+0xaa>
 8004940:	7bbb      	ldrb	r3, [r7, #14]
 8004942:	2b80      	cmp	r3, #128	; 0x80
 8004944:	d024      	beq.n	8004990 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8004946:	7bbb      	ldrb	r3, [r7, #14]
 8004948:	4619      	mov	r1, r3
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f001 f838 	bl	80059c0 <USBD_LL_StallEP>
      break;	
 8004950:	e01e      	b.n	8004990 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	885b      	ldrh	r3, [r3, #2]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800495a:	7bbb      	ldrb	r3, [r7, #14]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <USBD_StdEPReq+0x8a>
 8004960:	7bbb      	ldrb	r3, [r7, #14]
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d004      	beq.n	8004970 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8004966:	7bbb      	ldrb	r3, [r7, #14]
 8004968:	4619      	mov	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f001 f828 	bl	80059c0 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	6839      	ldr	r1, [r7, #0]
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fbe8 	bl	8005154 <USBD_CtlSendStatus>
      break;
 8004984:	e005      	b.n	8004992 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fb1a 	bl	8004fc2 <USBD_CtlError>
      break;    
 800498e:	e000      	b.n	8004992 <USBD_StdEPReq+0xac>
      break;	
 8004990:	bf00      	nop
    break;
 8004992:	e07b      	b.n	8004a8c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800499a:	2b02      	cmp	r3, #2
 800499c:	d002      	beq.n	80049a4 <USBD_StdEPReq+0xbe>
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d00c      	beq.n	80049bc <USBD_StdEPReq+0xd6>
 80049a2:	e024      	b.n	80049ee <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80049a4:	7bbb      	ldrb	r3, [r7, #14]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d026      	beq.n	80049f8 <USBD_StdEPReq+0x112>
 80049aa:	7bbb      	ldrb	r3, [r7, #14]
 80049ac:	2b80      	cmp	r3, #128	; 0x80
 80049ae:	d023      	beq.n	80049f8 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 80049b0:	7bbb      	ldrb	r3, [r7, #14]
 80049b2:	4619      	mov	r1, r3
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f001 f803 	bl	80059c0 <USBD_LL_StallEP>
      break;	
 80049ba:	e01d      	b.n	80049f8 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	885b      	ldrh	r3, [r3, #2]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d11b      	bne.n	80049fc <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 80049c4:	7bbb      	ldrb	r3, [r7, #14]
 80049c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80049ce:	7bbb      	ldrb	r3, [r7, #14]
 80049d0:	4619      	mov	r1, r3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f001 f813 	bl	80059fe <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fbb4 	bl	8005154 <USBD_CtlSendStatus>
      break;
 80049ec:	e006      	b.n	80049fc <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 80049ee:	6839      	ldr	r1, [r7, #0]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fae6 	bl	8004fc2 <USBD_CtlError>
      break;    
 80049f6:	e002      	b.n	80049fe <USBD_StdEPReq+0x118>
      break;	
 80049f8:	bf00      	nop
 80049fa:	e047      	b.n	8004a8c <USBD_StdEPReq+0x1a6>
      break;
 80049fc:	bf00      	nop
    break;
 80049fe:	e045      	b.n	8004a8c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d002      	beq.n	8004a10 <USBD_StdEPReq+0x12a>
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d00b      	beq.n	8004a26 <USBD_StdEPReq+0x140>
 8004a0e:	e036      	b.n	8004a7e <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8004a10:	7bbb      	ldrb	r3, [r7, #14]
 8004a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d036      	beq.n	8004a88 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8004a1a:	7bbb      	ldrb	r3, [r7, #14]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 ffce 	bl	80059c0 <USBD_LL_StallEP>
      break;	
 8004a24:	e030      	b.n	8004a88 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004a26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	da08      	bge.n	8004a40 <USBD_StdEPReq+0x15a>
 8004a2e:	7bbb      	ldrb	r3, [r7, #14]
 8004a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a34:	3301      	adds	r3, #1
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	e007      	b.n	8004a50 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004a40:	7bbb      	ldrb	r3, [r7, #14]
 8004a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004a46:	3310      	adds	r3, #16
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3304      	adds	r3, #4
 8004a50:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004a52:	7bbb      	ldrb	r3, [r7, #14]
 8004a54:	4619      	mov	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fff0 	bl	8005a3c <USBD_LL_IsStallEP>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2201      	movs	r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e002      	b.n	8004a70 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8004a70:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8004a72:	2202      	movs	r2, #2
 8004a74:	4619      	mov	r1, r3
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fb0e 	bl	8005098 <USBD_CtlSendData>
      break;
 8004a7c:	e005      	b.n	8004a8a <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8004a7e:	6839      	ldr	r1, [r7, #0]
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fa9e 	bl	8004fc2 <USBD_CtlError>
      break;
 8004a86:	e000      	b.n	8004a8a <USBD_StdEPReq+0x1a4>
      break;	
 8004a88:	bf00      	nop
    break;
 8004a8a:	bf00      	nop
  }
  return ret;
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	885b      	ldrh	r3, [r3, #2]
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	f200 80c9 	bhi.w	8004c44 <USBD_GetDescriptor+0x1ac>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <USBD_GetDescriptor+0x20>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004ad5 	.word	0x08004ad5
 8004abc:	08004aed 	.word	0x08004aed
 8004ac0:	08004b2d 	.word	0x08004b2d
 8004ac4:	08004c45 	.word	0x08004c45
 8004ac8:	08004c45 	.word	0x08004c45
 8004acc:	08004bf1 	.word	0x08004bf1
 8004ad0:	08004c17 	.word	0x08004c17
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	7c12      	ldrb	r2, [r2, #16]
 8004ae0:	f107 010a 	add.w	r1, r7, #10
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4798      	blx	r3
 8004ae8:	60f8      	str	r0, [r7, #12]
    break;
 8004aea:	e0b0      	b.n	8004c4e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	7c1b      	ldrb	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10d      	bne.n	8004b10 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	f107 020a 	add.w	r2, r7, #10
 8004b00:	4610      	mov	r0, r2
 8004b02:	4798      	blx	r3
 8004b04:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004b0e:	e09e      	b.n	8004c4e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	f107 020a 	add.w	r2, r7, #10
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4798      	blx	r3
 8004b20:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3301      	adds	r3, #1
 8004b26:	2202      	movs	r2, #2
 8004b28:	701a      	strb	r2, [r3, #0]
    break;
 8004b2a:	e090      	b.n	8004c4e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	885b      	ldrh	r3, [r3, #2]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b05      	cmp	r3, #5
 8004b34:	d856      	bhi.n	8004be4 <USBD_GetDescriptor+0x14c>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <USBD_GetDescriptor+0xa4>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b55 	.word	0x08004b55
 8004b40:	08004b6d 	.word	0x08004b6d
 8004b44:	08004b85 	.word	0x08004b85
 8004b48:	08004b9d 	.word	0x08004b9d
 8004b4c:	08004bb5 	.word	0x08004bb5
 8004b50:	08004bcd 	.word	0x08004bcd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	7c12      	ldrb	r2, [r2, #16]
 8004b60:	f107 010a 	add.w	r1, r7, #10
 8004b64:	4610      	mov	r0, r2
 8004b66:	4798      	blx	r3
 8004b68:	60f8      	str	r0, [r7, #12]
      break;
 8004b6a:	e040      	b.n	8004bee <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	7c12      	ldrb	r2, [r2, #16]
 8004b78:	f107 010a 	add.w	r1, r7, #10
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4798      	blx	r3
 8004b80:	60f8      	str	r0, [r7, #12]
      break;
 8004b82:	e034      	b.n	8004bee <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	7c12      	ldrb	r2, [r2, #16]
 8004b90:	f107 010a 	add.w	r1, r7, #10
 8004b94:	4610      	mov	r0, r2
 8004b96:	4798      	blx	r3
 8004b98:	60f8      	str	r0, [r7, #12]
      break;
 8004b9a:	e028      	b.n	8004bee <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	7c12      	ldrb	r2, [r2, #16]
 8004ba8:	f107 010a 	add.w	r1, r7, #10
 8004bac:	4610      	mov	r0, r2
 8004bae:	4798      	blx	r3
 8004bb0:	60f8      	str	r0, [r7, #12]
      break;
 8004bb2:	e01c      	b.n	8004bee <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	7c12      	ldrb	r2, [r2, #16]
 8004bc0:	f107 010a 	add.w	r1, r7, #10
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4798      	blx	r3
 8004bc8:	60f8      	str	r0, [r7, #12]
      break;
 8004bca:	e010      	b.n	8004bee <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	7c12      	ldrb	r2, [r2, #16]
 8004bd8:	f107 010a 	add.w	r1, r7, #10
 8004bdc:	4610      	mov	r0, r2
 8004bde:	4798      	blx	r3
 8004be0:	60f8      	str	r0, [r7, #12]
      break;
 8004be2:	e004      	b.n	8004bee <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8004be4:	6839      	ldr	r1, [r7, #0]
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f9eb 	bl	8004fc2 <USBD_CtlError>
      return;
 8004bec:	e044      	b.n	8004c78 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8004bee:	e02e      	b.n	8004c4e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	7c1b      	ldrb	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c00:	f107 020a 	add.w	r2, r7, #10
 8004c04:	4610      	mov	r0, r2
 8004c06:	4798      	blx	r3
 8004c08:	60f8      	str	r0, [r7, #12]
      break;
 8004c0a:	e020      	b.n	8004c4e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004c0c:	6839      	ldr	r1, [r7, #0]
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f9d7 	bl	8004fc2 <USBD_CtlError>
      return;
 8004c14:	e030      	b.n	8004c78 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	7c1b      	ldrb	r3, [r3, #16]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10d      	bne.n	8004c3a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	f107 020a 	add.w	r2, r7, #10
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4798      	blx	r3
 8004c2e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3301      	adds	r3, #1
 8004c34:	2207      	movs	r2, #7
 8004c36:	701a      	strb	r2, [r3, #0]
      break; 
 8004c38:	e009      	b.n	8004c4e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f9c0 	bl	8004fc2 <USBD_CtlError>
      return;
 8004c42:	e019      	b.n	8004c78 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9bb 	bl	8004fc2 <USBD_CtlError>
    return;
 8004c4c:	e014      	b.n	8004c78 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8004c4e:	897b      	ldrh	r3, [r7, #10]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d011      	beq.n	8004c78 <USBD_GetDescriptor+0x1e0>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	88db      	ldrh	r3, [r3, #6]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00d      	beq.n	8004c78 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	88da      	ldrh	r2, [r3, #6]
 8004c60:	897b      	ldrh	r3, [r7, #10]
 8004c62:	4293      	cmp	r3, r2
 8004c64:	bf28      	it	cs
 8004c66:	4613      	movcs	r3, r2
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8004c6c:	897b      	ldrh	r3, [r7, #10]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	68f9      	ldr	r1, [r7, #12]
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa10 	bl	8005098 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop

08004c80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	889b      	ldrh	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d12c      	bne.n	8004cec <USBD_SetAddress+0x6c>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	88db      	ldrh	r3, [r3, #6]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d128      	bne.n	8004cec <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	885b      	ldrh	r3, [r3, #2]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca4:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d104      	bne.n	8004cba <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8004cb0:	6839      	ldr	r1, [r7, #0]
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f985 	bl	8004fc2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004cb8:	e01c      	b.n	8004cf4 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	7bfa      	ldrb	r2, [r7, #15]
 8004cbe:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fedd 	bl	8005a86 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fa41 	bl	8005154 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004ce0:	e008      	b.n	8004cf4 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004cea:	e003      	b.n	8004cf4 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8004cec:	6839      	ldr	r1, [r7, #0]
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f967 	bl	8004fc2 <USBD_CtlError>
  } 
}
 8004cf4:	bf00      	nop
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	885b      	ldrh	r3, [r3, #2]
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4b3e      	ldr	r3, [pc, #248]	; (8004e08 <USBD_SetConfig+0x10c>)
 8004d0e:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004d10:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <USBD_SetConfig+0x10c>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d904      	bls.n	8004d22 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8004d18:	6839      	ldr	r1, [r7, #0]
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f951 	bl	8004fc2 <USBD_CtlError>
 8004d20:	e06f      	b.n	8004e02 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d002      	beq.n	8004d32 <USBD_SetConfig+0x36>
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d023      	beq.n	8004d78 <USBD_SetConfig+0x7c>
 8004d30:	e062      	b.n	8004df8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8004d32:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <USBD_SetConfig+0x10c>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01a      	beq.n	8004d70 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004d3a:	4b33      	ldr	r3, [pc, #204]	; (8004e08 <USBD_SetConfig+0x10c>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2203      	movs	r2, #3
 8004d48:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004d4c:	4b2e      	ldr	r3, [pc, #184]	; (8004e08 <USBD_SetConfig+0x10c>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff fb62 	bl	800441c <USBD_SetClassConfig>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d104      	bne.n	8004d68 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f92e 	bl	8004fc2 <USBD_CtlError>
          return;
 8004d66:	e04c      	b.n	8004e02 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f9f3 	bl	8005154 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8004d6e:	e048      	b.n	8004e02 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f9ef 	bl	8005154 <USBD_CtlSendStatus>
      break;
 8004d76:	e044      	b.n	8004e02 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004d78:	4b23      	ldr	r3, [pc, #140]	; (8004e08 <USBD_SetConfig+0x10c>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d112      	bne.n	8004da6 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004d88:	4b1f      	ldr	r3, [pc, #124]	; (8004e08 <USBD_SetConfig+0x10c>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004d92:	4b1d      	ldr	r3, [pc, #116]	; (8004e08 <USBD_SetConfig+0x10c>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff fb5e 	bl	800445a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f9d8 	bl	8005154 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004da4:	e02d      	b.n	8004e02 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8004da6:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <USBD_SetConfig+0x10c>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d01d      	beq.n	8004df0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff fb4c 	bl	800445a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004dc2:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <USBD_SetConfig+0x10c>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <USBD_SetConfig+0x10c>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fb22 	bl	800441c <USBD_SetClassConfig>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d104      	bne.n	8004de8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8004dde:	6839      	ldr	r1, [r7, #0]
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f8ee 	bl	8004fc2 <USBD_CtlError>
          return;
 8004de6:	e00c      	b.n	8004e02 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f9b3 	bl	8005154 <USBD_CtlSendStatus>
      break;
 8004dee:	e008      	b.n	8004e02 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f9af 	bl	8005154 <USBD_CtlSendStatus>
      break;
 8004df6:	e004      	b.n	8004e02 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8e1 	bl	8004fc2 <USBD_CtlError>
      break;
 8004e00:	bf00      	nop
    }
  }
}
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	2000022a 	.word	0x2000022a

08004e0c <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	88db      	ldrh	r3, [r3, #6]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d004      	beq.n	8004e28 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f8ce 	bl	8004fc2 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8004e26:	e01f      	b.n	8004e68 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d002      	beq.n	8004e38 <USBD_GetConfig+0x2c>
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d00b      	beq.n	8004e4e <USBD_GetConfig+0x42>
 8004e36:	e012      	b.n	8004e5e <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8004e42:	2201      	movs	r2, #1
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f926 	bl	8005098 <USBD_CtlSendData>
      break;
 8004e4c:	e00c      	b.n	8004e68 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8004e52:	2201      	movs	r2, #1
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f91e 	bl	8005098 <USBD_CtlSendData>
      break;
 8004e5c:	e004      	b.n	8004e68 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f8ae 	bl	8004fc2 <USBD_CtlError>
      break;
 8004e66:	bf00      	nop
}
 8004e68:	bf00      	nop
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004e80:	3b02      	subs	r3, #2
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d815      	bhi.n	8004eb2 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f043 0202 	orr.w	r2, r3, #2
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f8f4 	bl	8005098 <USBD_CtlSendData>
                      2);
    break;
 8004eb0:	e004      	b.n	8004ebc <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8004eb2:	6839      	ldr	r1, [r7, #0]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f884 	bl	8004fc2 <USBD_CtlError>
    break;
 8004eba:	bf00      	nop
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	885b      	ldrh	r3, [r3, #2]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d10d      	bne.n	8004ef2 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f931 	bl	8005154 <USBD_CtlSendStatus>
  }

}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004f0a:	3b02      	subs	r3, #2
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d812      	bhi.n	8004f36 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	885b      	ldrh	r3, [r3, #2]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d113      	bne.n	8004f40 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	6839      	ldr	r1, [r7, #0]
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f910 	bl	8005154 <USBD_CtlSendStatus>
    }
    break;
 8004f34:	e004      	b.n	8004f40 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8004f36:	6839      	ldr	r1, [r7, #0]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f842 	bl	8004fc2 <USBD_CtlError>
    break;
 8004f3e:	e000      	b.n	8004f42 <USBD_ClrFeature+0x48>
    break;
 8004f40:	bf00      	nop
  }
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781a      	ldrb	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	785a      	ldrb	r2, [r3, #1]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	3302      	adds	r3, #2
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	3303      	adds	r3, #3
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	3304      	adds	r3, #4
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	3305      	adds	r3, #5
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	4413      	add	r3, r2
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	3306      	adds	r3, #6
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	3307      	adds	r3, #7
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	80da      	strh	r2, [r3, #6]

}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fcf6 	bl	80059c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fcf2 	bl	80059c0 <USBD_LL_StallEP>
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d033      	beq.n	8005062 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f835 	bl	800506a <USBD_GetLen>
 8005000:	4603      	mov	r3, r0
 8005002:	3301      	adds	r3, #1
 8005004:	b29b      	uxth	r3, r3
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	881a      	ldrh	r2, [r3, #0]
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	1c59      	adds	r1, r3, #1
 8005016:	75f9      	strb	r1, [r7, #23]
 8005018:	4619      	mov	r1, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	440b      	add	r3, r1
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8005022:	7dfb      	ldrb	r3, [r7, #23]
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	75fa      	strb	r2, [r7, #23]
 8005028:	461a      	mov	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4413      	add	r3, r2
 800502e:	2203      	movs	r2, #3
 8005030:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8005032:	e012      	b.n	800505a <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	60fa      	str	r2, [r7, #12]
 800503a:	7dfa      	ldrb	r2, [r7, #23]
 800503c:	1c51      	adds	r1, r2, #1
 800503e:	75f9      	strb	r1, [r7, #23]
 8005040:	4611      	mov	r1, r2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	440a      	add	r2, r1
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	75fa      	strb	r2, [r7, #23]
 8005050:	461a      	mov	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4413      	add	r3, r2
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e8      	bne.n	8005034 <USBD_GetString+0x50>
    }
  } 
}
 8005062:	bf00      	nop
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8005076:	e005      	b.n	8005084 <USBD_GetLen+0x1a>
    {
        len++;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	3301      	adds	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
        buf++;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3301      	adds	r3, #1
 8005082:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f5      	bne.n	8005078 <USBD_GetLen+0xe>
    }

    return len;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2202      	movs	r2, #2
 80050aa:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	2100      	movs	r1, #0
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 fcff 	bl	8005ac4 <USBD_LL_Transmit>
  
  return USBD_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	2100      	movs	r1, #0
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fced 	bl	8005ac4 <USBD_LL_Transmit>
  
  return USBD_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	4613      	mov	r3, r2
 8005100:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2203      	movs	r2, #3
 8005106:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800510a:	88fa      	ldrh	r2, [r7, #6]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	2100      	movs	r1, #0
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fcf2 	bl	8005b0a <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	2100      	movs	r1, #0
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 fce0 	bl	8005b0a <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2204      	movs	r2, #4
 8005160:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8005164:	2300      	movs	r3, #0
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fcaa 	bl	8005ac4 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2205      	movs	r2, #5
 8005186:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800518a:	2300      	movs	r3, #0
 800518c:	2200      	movs	r2, #0
 800518e:	2100      	movs	r1, #0
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fcba 	bl	8005b0a <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80051a4:	2200      	movs	r2, #0
 80051a6:	4912      	ldr	r1, [pc, #72]	; (80051f0 <MX_USB_DEVICE_Init+0x50>)
 80051a8:	4812      	ldr	r0, [pc, #72]	; (80051f4 <MX_USB_DEVICE_Init+0x54>)
 80051aa:	f7ff f8dd 	bl	8004368 <USBD_Init>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80051b4:	f7fb f93a 	bl	800042c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80051b8:	490f      	ldr	r1, [pc, #60]	; (80051f8 <MX_USB_DEVICE_Init+0x58>)
 80051ba:	480e      	ldr	r0, [pc, #56]	; (80051f4 <MX_USB_DEVICE_Init+0x54>)
 80051bc:	f7ff f8ff 	bl	80043be <USBD_RegisterClass>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80051c6:	f7fb f931 	bl	800042c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80051ca:	490c      	ldr	r1, [pc, #48]	; (80051fc <MX_USB_DEVICE_Init+0x5c>)
 80051cc:	4809      	ldr	r0, [pc, #36]	; (80051f4 <MX_USB_DEVICE_Init+0x54>)
 80051ce:	f7ff f835 	bl	800423c <USBD_CDC_RegisterInterface>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80051d8:	f7fb f928 	bl	800042c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80051dc:	4805      	ldr	r0, [pc, #20]	; (80051f4 <MX_USB_DEVICE_Init+0x54>)
 80051de:	f7ff f907 	bl	80043f0 <USBD_Start>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80051e8:	f7fb f920 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80051ec:	bf00      	nop
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000150 	.word	0x20000150
 80051f4:	20000474 	.word	0x20000474
 80051f8:	20000038 	.word	0x20000038
 80051fc:	20000140 	.word	0x20000140

08005200 <cdcAvailable>:
uint32_t rx_out = 0;
uint32_t rx_len = 512;
uint8_t rx_buf[512];

uint32_t cdcAvailable(void)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <cdcAvailable+0x2c>)
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <cdcAvailable+0x30>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	4a08      	ldr	r2, [pc, #32]	; (8005234 <cdcAvailable+0x34>)
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	fbb3 f1f2 	udiv	r1, r3, r2
 8005218:	fb02 f201 	mul.w	r2, r2, r1
 800521c:	1a9b      	subs	r3, r3, r2
 800521e:	607b      	str	r3, [r7, #4]

  return ret;
 8005220:	687b      	ldr	r3, [r7, #4]
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr
 800522c:	2000022c 	.word	0x2000022c
 8005230:	20000230 	.word	0x20000230
 8005234:	2000013c 	.word	0x2000013c

08005238 <cdcRead>:

uint8_t cdcRead(void)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 800523e:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <cdcRead+0x40>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a0e      	ldr	r2, [pc, #56]	; (800527c <cdcRead+0x44>)
 8005244:	5cd3      	ldrb	r3, [r2, r3]
 8005246:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <cdcRead+0x40>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <cdcRead+0x48>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d00b      	beq.n	800526c <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 8005254:	4b08      	ldr	r3, [pc, #32]	; (8005278 <cdcRead+0x40>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3301      	adds	r3, #1
 800525a:	4a0a      	ldr	r2, [pc, #40]	; (8005284 <cdcRead+0x4c>)
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005262:	fb02 f201 	mul.w	r2, r2, r1
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	4a03      	ldr	r2, [pc, #12]	; (8005278 <cdcRead+0x40>)
 800526a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800526c:	79fb      	ldrb	r3, [r7, #7]
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr
 8005278:	20000230 	.word	0x20000230
 800527c:	20000e68 	.word	0x20000e68
 8005280:	2000022c 	.word	0x2000022c
 8005284:	2000013c 	.word	0x2000013c

08005288 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;    // overwrite
 8005292:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <cdcDataIn+0x44>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	490e      	ldr	r1, [pc, #56]	; (80052d0 <cdcDataIn+0x48>)
 8005298:	79fa      	ldrb	r2, [r7, #7]
 800529a:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 800529c:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <cdcDataIn+0x44>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3301      	adds	r3, #1
 80052a2:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <cdcDataIn+0x4c>)
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80052aa:	fb02 f201 	mul.w	r2, r2, r1
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 80052b2:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <cdcDataIn+0x50>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d002      	beq.n	80052c2 <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 80052bc:	4a03      	ldr	r2, [pc, #12]	; (80052cc <cdcDataIn+0x44>)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6013      	str	r3, [r2, #0]
  }
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr
 80052cc:	2000022c 	.word	0x2000022c
 80052d0:	20000e68 	.word	0x20000e68
 80052d4:	2000013c 	.word	0x2000013c
 80052d8:	20000230 	.word	0x20000230

080052dc <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 80052e6:	f7fa fff8 	bl	80002da <millis>
 80052ea:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f8ba 	bl	800546c <CDC_Transmit_FS>
 80052f8:	4603      	mov	r3, r0
 80052fa:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 80052fc:	7afb      	ldrb	r3, [r7, #11]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <cdcWrite+0x2a>
    {
      return length;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	e00e      	b.n	8005324 <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 8005306:	7afb      	ldrb	r3, [r7, #11]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d101      	bne.n	8005310 <cdcWrite+0x34>
    {
      return 0;
 800530c:	2300      	movs	r3, #0
 800530e:	e009      	b.n	8005324 <cdcWrite+0x48>
    }

    if(millis() - pre_time >= 100)    // time out handling.
 8005310:	f7fa ffe3 	bl	80002da <millis>
 8005314:	4602      	mov	r2, r0
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b63      	cmp	r3, #99	; 0x63
 800531c:	d800      	bhi.n	8005320 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 800531e:	e7e5      	b.n	80052ec <cdcWrite+0x10>
    {
      break;
 8005320:	bf00      	nop
    }
  }
  return 0;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005330:	2200      	movs	r2, #0
 8005332:	4905      	ldr	r1, [pc, #20]	; (8005348 <CDC_Init_FS+0x1c>)
 8005334:	4805      	ldr	r0, [pc, #20]	; (800534c <CDC_Init_FS+0x20>)
 8005336:	f7fe ff97 	bl	8004268 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800533a:	4905      	ldr	r1, [pc, #20]	; (8005350 <CDC_Init_FS+0x24>)
 800533c:	4803      	ldr	r0, [pc, #12]	; (800534c <CDC_Init_FS+0x20>)
 800533e:	f7fe ffac 	bl	800429a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005342:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005344:	4618      	mov	r0, r3
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000a80 	.word	0x20000a80
 800534c:	20000474 	.word	0x20000474
 8005350:	20000698 	.word	0x20000698

08005354 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005358:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800535a:	4618      	mov	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
	...

08005364 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	6039      	str	r1, [r7, #0]
 800536e:	71fb      	strb	r3, [r7, #7]
 8005370:	4613      	mov	r3, r2
 8005372:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	2b23      	cmp	r3, #35	; 0x23
 8005378:	d84a      	bhi.n	8005410 <CDC_Control_FS+0xac>
 800537a:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <CDC_Control_FS+0x1c>)
 800537c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005380:	08005411 	.word	0x08005411
 8005384:	08005411 	.word	0x08005411
 8005388:	08005411 	.word	0x08005411
 800538c:	08005411 	.word	0x08005411
 8005390:	08005411 	.word	0x08005411
 8005394:	08005411 	.word	0x08005411
 8005398:	08005411 	.word	0x08005411
 800539c:	08005411 	.word	0x08005411
 80053a0:	08005411 	.word	0x08005411
 80053a4:	08005411 	.word	0x08005411
 80053a8:	08005411 	.word	0x08005411
 80053ac:	08005411 	.word	0x08005411
 80053b0:	08005411 	.word	0x08005411
 80053b4:	08005411 	.word	0x08005411
 80053b8:	08005411 	.word	0x08005411
 80053bc:	08005411 	.word	0x08005411
 80053c0:	08005411 	.word	0x08005411
 80053c4:	08005411 	.word	0x08005411
 80053c8:	08005411 	.word	0x08005411
 80053cc:	08005411 	.word	0x08005411
 80053d0:	08005411 	.word	0x08005411
 80053d4:	08005411 	.word	0x08005411
 80053d8:	08005411 	.word	0x08005411
 80053dc:	08005411 	.word	0x08005411
 80053e0:	08005411 	.word	0x08005411
 80053e4:	08005411 	.word	0x08005411
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005411 	.word	0x08005411
 80053f4:	08005411 	.word	0x08005411
 80053f8:	08005411 	.word	0x08005411
 80053fc:	08005411 	.word	0x08005411
 8005400:	08005411 	.word	0x08005411
 8005404:	08005411 	.word	0x08005411
 8005408:	08005411 	.word	0x08005411
 800540c:	08005411 	.word	0x08005411
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005410:	bf00      	nop
  }

  return (USBD_OK);
 8005412:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop

08005420 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	480e      	ldr	r0, [pc, #56]	; (8005468 <CDC_Receive_FS+0x48>)
 800542e:	f7fe ff34 	bl	800429a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005432:	480d      	ldr	r0, [pc, #52]	; (8005468 <CDC_Receive_FS+0x48>)
 8005434:	f7fe ff6e 	bl	8004314 <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	e009      	b.n	8005452 <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	4413      	add	r3, r2
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff ff1e 	bl	8005288 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3301      	adds	r3, #1
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	429a      	cmp	r2, r3
 800545a:	d8f0      	bhi.n	800543e <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 800545c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000474 	.word	0x20000474

0800546c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800547c:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <CDC_Transmit_FS+0x48>)
 800547e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005482:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800548e:	2301      	movs	r3, #1
 8005490:	e00b      	b.n	80054aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005492:	887b      	ldrh	r3, [r7, #2]
 8005494:	461a      	mov	r2, r3
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4806      	ldr	r0, [pc, #24]	; (80054b4 <CDC_Transmit_FS+0x48>)
 800549a:	f7fe fee5 	bl	8004268 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800549e:	4805      	ldr	r0, [pc, #20]	; (80054b4 <CDC_Transmit_FS+0x48>)
 80054a0:	f7fe ff0e 	bl	80042c0 <USBD_CDC_TransmitPacket>
 80054a4:	4603      	mov	r3, r0
 80054a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000474 	.word	0x20000474

080054b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	6039      	str	r1, [r7, #0]
 80054c2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2212      	movs	r2, #18
 80054c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80054ca:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	2000016c 	.word	0x2000016c

080054dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	6039      	str	r1, [r7, #0]
 80054e6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2204      	movs	r2, #4
 80054ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80054ee:	4b03      	ldr	r3, [pc, #12]	; (80054fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20000180 	.word	0x20000180

08005500 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	6039      	str	r1, [r7, #0]
 800550a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d105      	bne.n	800551e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	4907      	ldr	r1, [pc, #28]	; (8005534 <USBD_FS_ProductStrDescriptor+0x34>)
 8005516:	4808      	ldr	r0, [pc, #32]	; (8005538 <USBD_FS_ProductStrDescriptor+0x38>)
 8005518:	f7ff fd64 	bl	8004fe4 <USBD_GetString>
 800551c:	e004      	b.n	8005528 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	4904      	ldr	r1, [pc, #16]	; (8005534 <USBD_FS_ProductStrDescriptor+0x34>)
 8005522:	4805      	ldr	r0, [pc, #20]	; (8005538 <USBD_FS_ProductStrDescriptor+0x38>)
 8005524:	f7ff fd5e 	bl	8004fe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005528:	4b02      	ldr	r3, [pc, #8]	; (8005534 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20001068 	.word	0x20001068
 8005538:	0800654c 	.word	0x0800654c

0800553c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	6039      	str	r1, [r7, #0]
 8005546:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	4904      	ldr	r1, [pc, #16]	; (800555c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800554c:	4804      	ldr	r0, [pc, #16]	; (8005560 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800554e:	f7ff fd49 	bl	8004fe4 <USBD_GetString>
  return USBD_StrDesc;
 8005552:	4b02      	ldr	r3, [pc, #8]	; (800555c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20001068 	.word	0x20001068
 8005560:	08006564 	.word	0x08006564

08005564 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	6039      	str	r1, [r7, #0]
 800556e:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	221a      	movs	r2, #26
 8005574:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005576:	f000 f843 	bl	8005600 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800557a:	4b02      	ldr	r3, [pc, #8]	; (8005584 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20000184 	.word	0x20000184

08005588 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	6039      	str	r1, [r7, #0]
 8005592:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	4907      	ldr	r1, [pc, #28]	; (80055bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800559e:	4808      	ldr	r0, [pc, #32]	; (80055c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80055a0:	f7ff fd20 	bl	8004fe4 <USBD_GetString>
 80055a4:	e004      	b.n	80055b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	4904      	ldr	r1, [pc, #16]	; (80055bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80055aa:	4805      	ldr	r0, [pc, #20]	; (80055c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80055ac:	f7ff fd1a 	bl	8004fe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80055b0:	4b02      	ldr	r3, [pc, #8]	; (80055bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20001068 	.word	0x20001068
 80055c0:	08006578 	.word	0x08006578

080055c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	6039      	str	r1, [r7, #0]
 80055ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d105      	bne.n	80055e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	4907      	ldr	r1, [pc, #28]	; (80055f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80055da:	4808      	ldr	r0, [pc, #32]	; (80055fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80055dc:	f7ff fd02 	bl	8004fe4 <USBD_GetString>
 80055e0:	e004      	b.n	80055ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	4904      	ldr	r1, [pc, #16]	; (80055f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80055e6:	4805      	ldr	r0, [pc, #20]	; (80055fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80055e8:	f7ff fcfc 	bl	8004fe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80055ec:	4b02      	ldr	r3, [pc, #8]	; (80055f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20001068 	.word	0x20001068
 80055fc:	08006584 	.word	0x08006584

08005600 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005606:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <Get_SerialNum+0x44>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800560c:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <Get_SerialNum+0x48>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005612:	4b0e      	ldr	r3, [pc, #56]	; (800564c <Get_SerialNum+0x4c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4413      	add	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005626:	2208      	movs	r2, #8
 8005628:	4909      	ldr	r1, [pc, #36]	; (8005650 <Get_SerialNum+0x50>)
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f814 	bl	8005658 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005630:	2204      	movs	r2, #4
 8005632:	4908      	ldr	r1, [pc, #32]	; (8005654 <Get_SerialNum+0x54>)
 8005634:	68b8      	ldr	r0, [r7, #8]
 8005636:	f000 f80f 	bl	8005658 <IntToUnicode>
  }
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	1ffff7e8 	.word	0x1ffff7e8
 8005648:	1ffff7ec 	.word	0x1ffff7ec
 800564c:	1ffff7f0 	.word	0x1ffff7f0
 8005650:	20000186 	.word	0x20000186
 8005654:	20000196 	.word	0x20000196

08005658 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800566a:	2300      	movs	r3, #0
 800566c:	75fb      	strb	r3, [r7, #23]
 800566e:	e027      	b.n	80056c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	0f1b      	lsrs	r3, r3, #28
 8005674:	2b09      	cmp	r3, #9
 8005676:	d80b      	bhi.n	8005690 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	0f1b      	lsrs	r3, r3, #28
 800567c:	b2da      	uxtb	r2, r3
 800567e:	7dfb      	ldrb	r3, [r7, #23]
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4619      	mov	r1, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	440b      	add	r3, r1
 8005688:	3230      	adds	r2, #48	; 0x30
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e00a      	b.n	80056a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	0f1b      	lsrs	r3, r3, #28
 8005694:	b2da      	uxtb	r2, r3
 8005696:	7dfb      	ldrb	r3, [r7, #23]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4619      	mov	r1, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	440b      	add	r3, r1
 80056a0:	3237      	adds	r2, #55	; 0x37
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	3301      	adds	r3, #1
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	4413      	add	r3, r2
 80056b6:	2200      	movs	r2, #0
 80056b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	3301      	adds	r3, #1
 80056be:	75fb      	strb	r3, [r7, #23]
 80056c0:	7dfa      	ldrb	r2, [r7, #23]
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d3d3      	bcc.n	8005670 <IntToUnicode+0x18>
  }
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
	...

080056d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a0d      	ldr	r2, [pc, #52]	; (8005718 <HAL_PCD_MspInit+0x44>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d113      	bne.n	800570e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80056e6:	4b0d      	ldr	r3, [pc, #52]	; (800571c <HAL_PCD_MspInit+0x48>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	4a0c      	ldr	r2, [pc, #48]	; (800571c <HAL_PCD_MspInit+0x48>)
 80056ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056f0:	61d3      	str	r3, [r2, #28]
 80056f2:	4b0a      	ldr	r3, [pc, #40]	; (800571c <HAL_PCD_MspInit+0x48>)
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80056fe:	2200      	movs	r2, #0
 8005700:	2100      	movs	r1, #0
 8005702:	2014      	movs	r0, #20
 8005704:	f7fb fae9 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005708:	2014      	movs	r0, #20
 800570a:	f7fb fb02 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40005c00 	.word	0x40005c00
 800571c:	40021000 	.word	0x40021000

08005720 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f7fe fea2 	bl	8004480 <USBD_LL_SetupStage>
}
 800573c:	bf00      	nop
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	015b      	lsls	r3, r3, #5
 800575c:	4413      	add	r3, r2
 800575e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	4619      	mov	r1, r3
 8005768:	f7fe fed4 	bl	8004514 <USBD_LL_DataOutStage>
}
 800576c:	bf00      	nop
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	015b      	lsls	r3, r3, #5
 800578c:	4413      	add	r3, r2
 800578e:	333c      	adds	r3, #60	; 0x3c
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	4619      	mov	r1, r3
 8005796:	f7fe ff18 	bl	80045ca <USBD_LL_DataInStage>
}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fe fffb 	bl	80047ac <USBD_LL_SOF>
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d001      	beq.n	80057d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80057d2:	f7fa fe2b 	bl	800042c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 80057dc:	7bfa      	ldrb	r2, [r7, #15]
 80057de:	4611      	mov	r1, r2
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe ffb0 	bl	8004746 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fe ff7b 	bl	80046e8 <USBD_LL_Reset>
}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe ffaa 	bl	8004764 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005818:	4b04      	ldr	r3, [pc, #16]	; (800582c <HAL_PCD_SuspendCallback+0x30>)
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	4a03      	ldr	r2, [pc, #12]	; (800582c <HAL_PCD_SuspendCallback+0x30>)
 800581e:	f043 0306 	orr.w	r3, r3, #6
 8005822:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	e000ed00 	.word	0xe000ed00

08005830 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe ffa4 	bl	800478c <USBD_LL_Resume>
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005854:	4a28      	ldr	r2, [pc, #160]	; (80058f8 <USBD_LL_Init+0xac>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <USBD_LL_Init+0xac>)
 8005860:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8005864:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <USBD_LL_Init+0xac>)
 8005866:	4a25      	ldr	r2, [pc, #148]	; (80058fc <USBD_LL_Init+0xb0>)
 8005868:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800586a:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <USBD_LL_Init+0xac>)
 800586c:	2208      	movs	r2, #8
 800586e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005870:	4b21      	ldr	r3, [pc, #132]	; (80058f8 <USBD_LL_Init+0xac>)
 8005872:	2202      	movs	r2, #2
 8005874:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005876:	4b20      	ldr	r3, [pc, #128]	; (80058f8 <USBD_LL_Init+0xac>)
 8005878:	2200      	movs	r2, #0
 800587a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800587c:	4b1e      	ldr	r3, [pc, #120]	; (80058f8 <USBD_LL_Init+0xac>)
 800587e:	2200      	movs	r2, #0
 8005880:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005882:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <USBD_LL_Init+0xac>)
 8005884:	2200      	movs	r2, #0
 8005886:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005888:	481b      	ldr	r0, [pc, #108]	; (80058f8 <USBD_LL_Init+0xac>)
 800588a:	f7fb fbf4 	bl	8001076 <HAL_PCD_Init>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005894:	f7fa fdca 	bl	800042c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800589e:	2318      	movs	r3, #24
 80058a0:	2200      	movs	r2, #0
 80058a2:	2100      	movs	r1, #0
 80058a4:	f7fc fafc 	bl	8001ea0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80058ae:	2358      	movs	r3, #88	; 0x58
 80058b0:	2200      	movs	r2, #0
 80058b2:	2180      	movs	r1, #128	; 0x80
 80058b4:	f7fc faf4 	bl	8001ea0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80058be:	23c0      	movs	r3, #192	; 0xc0
 80058c0:	2200      	movs	r2, #0
 80058c2:	2181      	movs	r1, #129	; 0x81
 80058c4:	f7fc faec 	bl	8001ea0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80058ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 80058d2:	2200      	movs	r2, #0
 80058d4:	2101      	movs	r1, #1
 80058d6:	f7fc fae3 	bl	8001ea0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80058e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058e4:	2200      	movs	r2, #0
 80058e6:	2182      	movs	r1, #130	; 0x82
 80058e8:	f7fc fada 	bl	8001ea0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20001268 	.word	0x20001268
 80058fc:	40005c00 	.word	0x40005c00

08005900 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005916:	4618      	mov	r0, r3
 8005918:	f7fb fc87 	bl	800122a <HAL_PCD_Start>
 800591c:	4603      	mov	r3, r0
 800591e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 f948 	bl	8005bb8 <USBD_Get_USB_Status>
 8005928:	4603      	mov	r3, r0
 800592a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800592c:	7bbb      	ldrb	r3, [r7, #14]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	4608      	mov	r0, r1
 8005940:	4611      	mov	r1, r2
 8005942:	461a      	mov	r2, r3
 8005944:	4603      	mov	r3, r0
 8005946:	70fb      	strb	r3, [r7, #3]
 8005948:	460b      	mov	r3, r1
 800594a:	70bb      	strb	r3, [r7, #2]
 800594c:	4613      	mov	r3, r2
 800594e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800595e:	78bb      	ldrb	r3, [r7, #2]
 8005960:	883a      	ldrh	r2, [r7, #0]
 8005962:	78f9      	ldrb	r1, [r7, #3]
 8005964:	f7fb fdae 	bl	80014c4 <HAL_PCD_EP_Open>
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f922 	bl	8005bb8 <USBD_Get_USB_Status>
 8005974:	4603      	mov	r3, r0
 8005976:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005978:	7bbb      	ldrb	r3, [r7, #14]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	460b      	mov	r3, r1
 800598c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	4611      	mov	r1, r2
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fb fde4 	bl	800156e <HAL_PCD_EP_Close>
 80059a6:	4603      	mov	r3, r0
 80059a8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 f903 	bl	8005bb8 <USBD_Get_USB_Status>
 80059b2:	4603      	mov	r3, r0
 80059b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80059da:	78fa      	ldrb	r2, [r7, #3]
 80059dc:	4611      	mov	r1, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fb fe97 	bl	8001712 <HAL_PCD_EP_SetStall>
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 f8e4 	bl	8005bb8 <USBD_Get_USB_Status>
 80059f0:	4603      	mov	r3, r0
 80059f2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fb fecd 	bl	80017bc <HAL_PCD_EP_ClrStall>
 8005a22:	4603      	mov	r3, r0
 8005a24:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 f8c5 	bl	8005bb8 <USBD_Get_USB_Status>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005a32:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005a4e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	da08      	bge.n	8005a6a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	015b      	lsls	r3, r3, #5
 8005a62:	4413      	add	r3, r2
 8005a64:	332a      	adds	r3, #42	; 0x2a
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	e008      	b.n	8005a7c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	015b      	lsls	r3, r3, #5
 8005a74:	4413      	add	r3, r2
 8005a76:	f203 232a 	addw	r3, r3, #554	; 0x22a
 8005a7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr

08005a86 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fb fce8 	bl	800147a <HAL_PCD_SetAddress>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 f881 	bl	8005bb8 <USBD_Get_USB_Status>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005aba:	7bbb      	ldrb	r3, [r7, #14]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	607a      	str	r2, [r7, #4]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	72fb      	strb	r3, [r7, #11]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005ae6:	893b      	ldrh	r3, [r7, #8]
 8005ae8:	7af9      	ldrb	r1, [r7, #11]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	f7fb fdd6 	bl	800169c <HAL_PCD_EP_Transmit>
 8005af0:	4603      	mov	r3, r0
 8005af2:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f85e 	bl	8005bb8 <USBD_Get_USB_Status>
 8005afc:	4603      	mov	r3, r0
 8005afe:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005b00:	7dbb      	ldrb	r3, [r7, #22]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b086      	sub	sp, #24
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	461a      	mov	r2, r3
 8005b16:	460b      	mov	r3, r1
 8005b18:	72fb      	strb	r3, [r7, #11]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8005b2c:	893b      	ldrh	r3, [r7, #8]
 8005b2e:	7af9      	ldrb	r1, [r7, #11]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	f7fb fd62 	bl	80015fa <HAL_PCD_EP_Receive>
 8005b36:	4603      	mov	r3, r0
 8005b38:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 f83b 	bl	8005bb8 <USBD_Get_USB_Status>
 8005b42:	4603      	mov	r3, r0
 8005b44:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005b46:	7dbb      	ldrb	r3, [r7, #22]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	4611      	mov	r1, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fb fd83 	bl	8001672 <HAL_PCD_EP_GetRxCount>
 8005b6c:	4603      	mov	r3, r0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005b80:	4b02      	ldr	r3, [pc, #8]	; (8005b8c <USBD_static_malloc+0x14>)
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bc80      	pop	{r7}
 8005b8a:	4770      	bx	lr
 8005b8c:	20000234 	.word	0x20000234

08005b90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]

}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d817      	bhi.n	8005bfc <USBD_Get_USB_Status+0x44>
 8005bcc:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <USBD_Get_USB_Status+0x1c>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005be5 	.word	0x08005be5
 8005bd8:	08005beb 	.word	0x08005beb
 8005bdc:	08005bf1 	.word	0x08005bf1
 8005be0:	08005bf7 	.word	0x08005bf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	73fb      	strb	r3, [r7, #15]
    break;
 8005be8:	e00b      	b.n	8005c02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005bea:	2302      	movs	r3, #2
 8005bec:	73fb      	strb	r3, [r7, #15]
    break;
 8005bee:	e008      	b.n	8005c02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8005bf4:	e005      	b.n	8005c02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8005bfa:	e002      	b.n	8005c02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8005c00:	bf00      	nop
  }
  return usb_status;
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bc80      	pop	{r7}
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop

08005c10 <main>:
 */

#include "main.h"

int main(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  hwInit();
 8005c14:	f7fa fefa 	bl	8000a0c <hwInit>
  apInit();
 8005c18:	f7fa fb04 	bl	8000224 <apInit>

  apMain();
 8005c1c:	f7fa fb0c 	bl	8000238 <apMain>

  return 0;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <__errno>:
 8005c28:	4b01      	ldr	r3, [pc, #4]	; (8005c30 <__errno+0x8>)
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	200001a0 	.word	0x200001a0

08005c34 <__libc_init_array>:
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	2500      	movs	r5, #0
 8005c38:	4e0c      	ldr	r6, [pc, #48]	; (8005c6c <__libc_init_array+0x38>)
 8005c3a:	4c0d      	ldr	r4, [pc, #52]	; (8005c70 <__libc_init_array+0x3c>)
 8005c3c:	1ba4      	subs	r4, r4, r6
 8005c3e:	10a4      	asrs	r4, r4, #2
 8005c40:	42a5      	cmp	r5, r4
 8005c42:	d109      	bne.n	8005c58 <__libc_init_array+0x24>
 8005c44:	f000 fc4e 	bl	80064e4 <_init>
 8005c48:	2500      	movs	r5, #0
 8005c4a:	4e0a      	ldr	r6, [pc, #40]	; (8005c74 <__libc_init_array+0x40>)
 8005c4c:	4c0a      	ldr	r4, [pc, #40]	; (8005c78 <__libc_init_array+0x44>)
 8005c4e:	1ba4      	subs	r4, r4, r6
 8005c50:	10a4      	asrs	r4, r4, #2
 8005c52:	42a5      	cmp	r5, r4
 8005c54:	d105      	bne.n	8005c62 <__libc_init_array+0x2e>
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
 8005c58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c5c:	4798      	blx	r3
 8005c5e:	3501      	adds	r5, #1
 8005c60:	e7ee      	b.n	8005c40 <__libc_init_array+0xc>
 8005c62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c66:	4798      	blx	r3
 8005c68:	3501      	adds	r5, #1
 8005c6a:	e7f2      	b.n	8005c52 <__libc_init_array+0x1e>
 8005c6c:	080065e0 	.word	0x080065e0
 8005c70:	080065e0 	.word	0x080065e0
 8005c74:	080065e0 	.word	0x080065e0
 8005c78:	080065e4 	.word	0x080065e4

08005c7c <memset>:
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	4402      	add	r2, r0
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d100      	bne.n	8005c86 <memset+0xa>
 8005c84:	4770      	bx	lr
 8005c86:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8a:	e7f9      	b.n	8005c80 <memset+0x4>

08005c8c <_vsniprintf_r>:
 8005c8c:	b530      	push	{r4, r5, lr}
 8005c8e:	1e14      	subs	r4, r2, #0
 8005c90:	4605      	mov	r5, r0
 8005c92:	b09b      	sub	sp, #108	; 0x6c
 8005c94:	4618      	mov	r0, r3
 8005c96:	da05      	bge.n	8005ca4 <_vsniprintf_r+0x18>
 8005c98:	238b      	movs	r3, #139	; 0x8b
 8005c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9e:	602b      	str	r3, [r5, #0]
 8005ca0:	b01b      	add	sp, #108	; 0x6c
 8005ca2:	bd30      	pop	{r4, r5, pc}
 8005ca4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005ca8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005cac:	bf0c      	ite	eq
 8005cae:	4623      	moveq	r3, r4
 8005cb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005cb4:	9302      	str	r3, [sp, #8]
 8005cb6:	9305      	str	r3, [sp, #20]
 8005cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cbc:	9100      	str	r1, [sp, #0]
 8005cbe:	9104      	str	r1, [sp, #16]
 8005cc0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cc8:	4669      	mov	r1, sp
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 f872 	bl	8005db4 <_svfiprintf_r>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	bfbc      	itt	lt
 8005cd4:	238b      	movlt	r3, #139	; 0x8b
 8005cd6:	602b      	strlt	r3, [r5, #0]
 8005cd8:	2c00      	cmp	r4, #0
 8005cda:	d0e1      	beq.n	8005ca0 <_vsniprintf_r+0x14>
 8005cdc:	2200      	movs	r2, #0
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e7dd      	b.n	8005ca0 <_vsniprintf_r+0x14>

08005ce4 <vsniprintf>:
 8005ce4:	b507      	push	{r0, r1, r2, lr}
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	460a      	mov	r2, r1
 8005cec:	4601      	mov	r1, r0
 8005cee:	4803      	ldr	r0, [pc, #12]	; (8005cfc <vsniprintf+0x18>)
 8005cf0:	6800      	ldr	r0, [r0, #0]
 8005cf2:	f7ff ffcb 	bl	8005c8c <_vsniprintf_r>
 8005cf6:	b003      	add	sp, #12
 8005cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cfc:	200001a0 	.word	0x200001a0

08005d00 <__ssputs_r>:
 8005d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d04:	688e      	ldr	r6, [r1, #8]
 8005d06:	4682      	mov	sl, r0
 8005d08:	429e      	cmp	r6, r3
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	4690      	mov	r8, r2
 8005d0e:	4699      	mov	r9, r3
 8005d10:	d837      	bhi.n	8005d82 <__ssputs_r+0x82>
 8005d12:	898a      	ldrh	r2, [r1, #12]
 8005d14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d18:	d031      	beq.n	8005d7e <__ssputs_r+0x7e>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	6825      	ldr	r5, [r4, #0]
 8005d1e:	6909      	ldr	r1, [r1, #16]
 8005d20:	1a6f      	subs	r7, r5, r1
 8005d22:	6965      	ldr	r5, [r4, #20]
 8005d24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d28:	fb95 f5f3 	sdiv	r5, r5, r3
 8005d2c:	f109 0301 	add.w	r3, r9, #1
 8005d30:	443b      	add	r3, r7
 8005d32:	429d      	cmp	r5, r3
 8005d34:	bf38      	it	cc
 8005d36:	461d      	movcc	r5, r3
 8005d38:	0553      	lsls	r3, r2, #21
 8005d3a:	d530      	bpl.n	8005d9e <__ssputs_r+0x9e>
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	f000 fb37 	bl	80063b0 <_malloc_r>
 8005d42:	4606      	mov	r6, r0
 8005d44:	b950      	cbnz	r0, 8005d5c <__ssputs_r+0x5c>
 8005d46:	230c      	movs	r3, #12
 8005d48:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4c:	f8ca 3000 	str.w	r3, [sl]
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d5c:	463a      	mov	r2, r7
 8005d5e:	6921      	ldr	r1, [r4, #16]
 8005d60:	f000 fab6 	bl	80062d0 <memcpy>
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	6126      	str	r6, [r4, #16]
 8005d72:	443e      	add	r6, r7
 8005d74:	6026      	str	r6, [r4, #0]
 8005d76:	464e      	mov	r6, r9
 8005d78:	6165      	str	r5, [r4, #20]
 8005d7a:	1bed      	subs	r5, r5, r7
 8005d7c:	60a5      	str	r5, [r4, #8]
 8005d7e:	454e      	cmp	r6, r9
 8005d80:	d900      	bls.n	8005d84 <__ssputs_r+0x84>
 8005d82:	464e      	mov	r6, r9
 8005d84:	4632      	mov	r2, r6
 8005d86:	4641      	mov	r1, r8
 8005d88:	6820      	ldr	r0, [r4, #0]
 8005d8a:	f000 faac 	bl	80062e6 <memmove>
 8005d8e:	68a3      	ldr	r3, [r4, #8]
 8005d90:	2000      	movs	r0, #0
 8005d92:	1b9b      	subs	r3, r3, r6
 8005d94:	60a3      	str	r3, [r4, #8]
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	441e      	add	r6, r3
 8005d9a:	6026      	str	r6, [r4, #0]
 8005d9c:	e7dc      	b.n	8005d58 <__ssputs_r+0x58>
 8005d9e:	462a      	mov	r2, r5
 8005da0:	f000 fb60 	bl	8006464 <_realloc_r>
 8005da4:	4606      	mov	r6, r0
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d1e2      	bne.n	8005d70 <__ssputs_r+0x70>
 8005daa:	6921      	ldr	r1, [r4, #16]
 8005dac:	4650      	mov	r0, sl
 8005dae:	f000 fab3 	bl	8006318 <_free_r>
 8005db2:	e7c8      	b.n	8005d46 <__ssputs_r+0x46>

08005db4 <_svfiprintf_r>:
 8005db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	461d      	mov	r5, r3
 8005dba:	898b      	ldrh	r3, [r1, #12]
 8005dbc:	b09d      	sub	sp, #116	; 0x74
 8005dbe:	061f      	lsls	r7, r3, #24
 8005dc0:	4680      	mov	r8, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	4616      	mov	r6, r2
 8005dc6:	d50f      	bpl.n	8005de8 <_svfiprintf_r+0x34>
 8005dc8:	690b      	ldr	r3, [r1, #16]
 8005dca:	b96b      	cbnz	r3, 8005de8 <_svfiprintf_r+0x34>
 8005dcc:	2140      	movs	r1, #64	; 0x40
 8005dce:	f000 faef 	bl	80063b0 <_malloc_r>
 8005dd2:	6020      	str	r0, [r4, #0]
 8005dd4:	6120      	str	r0, [r4, #16]
 8005dd6:	b928      	cbnz	r0, 8005de4 <_svfiprintf_r+0x30>
 8005dd8:	230c      	movs	r3, #12
 8005dda:	f8c8 3000 	str.w	r3, [r8]
 8005dde:	f04f 30ff 	mov.w	r0, #4294967295
 8005de2:	e0c8      	b.n	8005f76 <_svfiprintf_r+0x1c2>
 8005de4:	2340      	movs	r3, #64	; 0x40
 8005de6:	6163      	str	r3, [r4, #20]
 8005de8:	2300      	movs	r3, #0
 8005dea:	9309      	str	r3, [sp, #36]	; 0x24
 8005dec:	2320      	movs	r3, #32
 8005dee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005df2:	2330      	movs	r3, #48	; 0x30
 8005df4:	f04f 0b01 	mov.w	fp, #1
 8005df8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dfc:	9503      	str	r5, [sp, #12]
 8005dfe:	4637      	mov	r7, r6
 8005e00:	463d      	mov	r5, r7
 8005e02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e06:	b10b      	cbz	r3, 8005e0c <_svfiprintf_r+0x58>
 8005e08:	2b25      	cmp	r3, #37	; 0x25
 8005e0a:	d13e      	bne.n	8005e8a <_svfiprintf_r+0xd6>
 8005e0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005e10:	d00b      	beq.n	8005e2a <_svfiprintf_r+0x76>
 8005e12:	4653      	mov	r3, sl
 8005e14:	4632      	mov	r2, r6
 8005e16:	4621      	mov	r1, r4
 8005e18:	4640      	mov	r0, r8
 8005e1a:	f7ff ff71 	bl	8005d00 <__ssputs_r>
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f000 80a4 	beq.w	8005f6c <_svfiprintf_r+0x1b8>
 8005e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e26:	4453      	add	r3, sl
 8005e28:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2a:	783b      	ldrb	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 809d 	beq.w	8005f6c <_svfiprintf_r+0x1b8>
 8005e32:	2300      	movs	r3, #0
 8005e34:	f04f 32ff 	mov.w	r2, #4294967295
 8005e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e3c:	9304      	str	r3, [sp, #16]
 8005e3e:	9307      	str	r3, [sp, #28]
 8005e40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e44:	931a      	str	r3, [sp, #104]	; 0x68
 8005e46:	462f      	mov	r7, r5
 8005e48:	2205      	movs	r2, #5
 8005e4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005e4e:	4850      	ldr	r0, [pc, #320]	; (8005f90 <_svfiprintf_r+0x1dc>)
 8005e50:	f000 fa30 	bl	80062b4 <memchr>
 8005e54:	9b04      	ldr	r3, [sp, #16]
 8005e56:	b9d0      	cbnz	r0, 8005e8e <_svfiprintf_r+0xda>
 8005e58:	06d9      	lsls	r1, r3, #27
 8005e5a:	bf44      	itt	mi
 8005e5c:	2220      	movmi	r2, #32
 8005e5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e62:	071a      	lsls	r2, r3, #28
 8005e64:	bf44      	itt	mi
 8005e66:	222b      	movmi	r2, #43	; 0x2b
 8005e68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e6c:	782a      	ldrb	r2, [r5, #0]
 8005e6e:	2a2a      	cmp	r2, #42	; 0x2a
 8005e70:	d015      	beq.n	8005e9e <_svfiprintf_r+0xea>
 8005e72:	462f      	mov	r7, r5
 8005e74:	2000      	movs	r0, #0
 8005e76:	250a      	movs	r5, #10
 8005e78:	9a07      	ldr	r2, [sp, #28]
 8005e7a:	4639      	mov	r1, r7
 8005e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e80:	3b30      	subs	r3, #48	; 0x30
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	d94d      	bls.n	8005f22 <_svfiprintf_r+0x16e>
 8005e86:	b1b8      	cbz	r0, 8005eb8 <_svfiprintf_r+0x104>
 8005e88:	e00f      	b.n	8005eaa <_svfiprintf_r+0xf6>
 8005e8a:	462f      	mov	r7, r5
 8005e8c:	e7b8      	b.n	8005e00 <_svfiprintf_r+0x4c>
 8005e8e:	4a40      	ldr	r2, [pc, #256]	; (8005f90 <_svfiprintf_r+0x1dc>)
 8005e90:	463d      	mov	r5, r7
 8005e92:	1a80      	subs	r0, r0, r2
 8005e94:	fa0b f000 	lsl.w	r0, fp, r0
 8005e98:	4318      	orrs	r0, r3
 8005e9a:	9004      	str	r0, [sp, #16]
 8005e9c:	e7d3      	b.n	8005e46 <_svfiprintf_r+0x92>
 8005e9e:	9a03      	ldr	r2, [sp, #12]
 8005ea0:	1d11      	adds	r1, r2, #4
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	9103      	str	r1, [sp, #12]
 8005ea6:	2a00      	cmp	r2, #0
 8005ea8:	db01      	blt.n	8005eae <_svfiprintf_r+0xfa>
 8005eaa:	9207      	str	r2, [sp, #28]
 8005eac:	e004      	b.n	8005eb8 <_svfiprintf_r+0x104>
 8005eae:	4252      	negs	r2, r2
 8005eb0:	f043 0302 	orr.w	r3, r3, #2
 8005eb4:	9207      	str	r2, [sp, #28]
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	783b      	ldrb	r3, [r7, #0]
 8005eba:	2b2e      	cmp	r3, #46	; 0x2e
 8005ebc:	d10c      	bne.n	8005ed8 <_svfiprintf_r+0x124>
 8005ebe:	787b      	ldrb	r3, [r7, #1]
 8005ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ec2:	d133      	bne.n	8005f2c <_svfiprintf_r+0x178>
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	3702      	adds	r7, #2
 8005ec8:	1d1a      	adds	r2, r3, #4
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	9203      	str	r2, [sp, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bfb8      	it	lt
 8005ed2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ed6:	9305      	str	r3, [sp, #20]
 8005ed8:	4d2e      	ldr	r5, [pc, #184]	; (8005f94 <_svfiprintf_r+0x1e0>)
 8005eda:	2203      	movs	r2, #3
 8005edc:	7839      	ldrb	r1, [r7, #0]
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f000 f9e8 	bl	80062b4 <memchr>
 8005ee4:	b138      	cbz	r0, 8005ef6 <_svfiprintf_r+0x142>
 8005ee6:	2340      	movs	r3, #64	; 0x40
 8005ee8:	1b40      	subs	r0, r0, r5
 8005eea:	fa03 f000 	lsl.w	r0, r3, r0
 8005eee:	9b04      	ldr	r3, [sp, #16]
 8005ef0:	3701      	adds	r7, #1
 8005ef2:	4303      	orrs	r3, r0
 8005ef4:	9304      	str	r3, [sp, #16]
 8005ef6:	7839      	ldrb	r1, [r7, #0]
 8005ef8:	2206      	movs	r2, #6
 8005efa:	4827      	ldr	r0, [pc, #156]	; (8005f98 <_svfiprintf_r+0x1e4>)
 8005efc:	1c7e      	adds	r6, r7, #1
 8005efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f02:	f000 f9d7 	bl	80062b4 <memchr>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d038      	beq.n	8005f7c <_svfiprintf_r+0x1c8>
 8005f0a:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <_svfiprintf_r+0x1e8>)
 8005f0c:	bb13      	cbnz	r3, 8005f54 <_svfiprintf_r+0x1a0>
 8005f0e:	9b03      	ldr	r3, [sp, #12]
 8005f10:	3307      	adds	r3, #7
 8005f12:	f023 0307 	bic.w	r3, r3, #7
 8005f16:	3308      	adds	r3, #8
 8005f18:	9303      	str	r3, [sp, #12]
 8005f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1c:	444b      	add	r3, r9
 8005f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f20:	e76d      	b.n	8005dfe <_svfiprintf_r+0x4a>
 8005f22:	fb05 3202 	mla	r2, r5, r2, r3
 8005f26:	2001      	movs	r0, #1
 8005f28:	460f      	mov	r7, r1
 8005f2a:	e7a6      	b.n	8005e7a <_svfiprintf_r+0xc6>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	250a      	movs	r5, #10
 8005f30:	4619      	mov	r1, r3
 8005f32:	3701      	adds	r7, #1
 8005f34:	9305      	str	r3, [sp, #20]
 8005f36:	4638      	mov	r0, r7
 8005f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f3c:	3a30      	subs	r2, #48	; 0x30
 8005f3e:	2a09      	cmp	r2, #9
 8005f40:	d903      	bls.n	8005f4a <_svfiprintf_r+0x196>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0c8      	beq.n	8005ed8 <_svfiprintf_r+0x124>
 8005f46:	9105      	str	r1, [sp, #20]
 8005f48:	e7c6      	b.n	8005ed8 <_svfiprintf_r+0x124>
 8005f4a:	fb05 2101 	mla	r1, r5, r1, r2
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4607      	mov	r7, r0
 8005f52:	e7f0      	b.n	8005f36 <_svfiprintf_r+0x182>
 8005f54:	ab03      	add	r3, sp, #12
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	4622      	mov	r2, r4
 8005f5a:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <_svfiprintf_r+0x1ec>)
 8005f5c:	a904      	add	r1, sp, #16
 8005f5e:	4640      	mov	r0, r8
 8005f60:	f3af 8000 	nop.w
 8005f64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f68:	4681      	mov	r9, r0
 8005f6a:	d1d6      	bne.n	8005f1a <_svfiprintf_r+0x166>
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	065b      	lsls	r3, r3, #25
 8005f70:	f53f af35 	bmi.w	8005dde <_svfiprintf_r+0x2a>
 8005f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f76:	b01d      	add	sp, #116	; 0x74
 8005f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7c:	ab03      	add	r3, sp, #12
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	4622      	mov	r2, r4
 8005f82:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <_svfiprintf_r+0x1ec>)
 8005f84:	a904      	add	r1, sp, #16
 8005f86:	4640      	mov	r0, r8
 8005f88:	f000 f882 	bl	8006090 <_printf_i>
 8005f8c:	e7ea      	b.n	8005f64 <_svfiprintf_r+0x1b0>
 8005f8e:	bf00      	nop
 8005f90:	080065ac 	.word	0x080065ac
 8005f94:	080065b2 	.word	0x080065b2
 8005f98:	080065b6 	.word	0x080065b6
 8005f9c:	00000000 	.word	0x00000000
 8005fa0:	08005d01 	.word	0x08005d01

08005fa4 <_printf_common>:
 8005fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa8:	4691      	mov	r9, r2
 8005faa:	461f      	mov	r7, r3
 8005fac:	688a      	ldr	r2, [r1, #8]
 8005fae:	690b      	ldr	r3, [r1, #16]
 8005fb0:	4606      	mov	r6, r0
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	bfb8      	it	lt
 8005fb6:	4613      	movlt	r3, r2
 8005fb8:	f8c9 3000 	str.w	r3, [r9]
 8005fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fc6:	b112      	cbz	r2, 8005fce <_printf_common+0x2a>
 8005fc8:	3301      	adds	r3, #1
 8005fca:	f8c9 3000 	str.w	r3, [r9]
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	0699      	lsls	r1, r3, #26
 8005fd2:	bf42      	ittt	mi
 8005fd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005fd8:	3302      	addmi	r3, #2
 8005fda:	f8c9 3000 	strmi.w	r3, [r9]
 8005fde:	6825      	ldr	r5, [r4, #0]
 8005fe0:	f015 0506 	ands.w	r5, r5, #6
 8005fe4:	d107      	bne.n	8005ff6 <_printf_common+0x52>
 8005fe6:	f104 0a19 	add.w	sl, r4, #25
 8005fea:	68e3      	ldr	r3, [r4, #12]
 8005fec:	f8d9 2000 	ldr.w	r2, [r9]
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	42ab      	cmp	r3, r5
 8005ff4:	dc29      	bgt.n	800604a <_printf_common+0xa6>
 8005ff6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ffa:	6822      	ldr	r2, [r4, #0]
 8005ffc:	3300      	adds	r3, #0
 8005ffe:	bf18      	it	ne
 8006000:	2301      	movne	r3, #1
 8006002:	0692      	lsls	r2, r2, #26
 8006004:	d42e      	bmi.n	8006064 <_printf_common+0xc0>
 8006006:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800600a:	4639      	mov	r1, r7
 800600c:	4630      	mov	r0, r6
 800600e:	47c0      	blx	r8
 8006010:	3001      	adds	r0, #1
 8006012:	d021      	beq.n	8006058 <_printf_common+0xb4>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	68e5      	ldr	r5, [r4, #12]
 8006018:	f003 0306 	and.w	r3, r3, #6
 800601c:	2b04      	cmp	r3, #4
 800601e:	bf18      	it	ne
 8006020:	2500      	movne	r5, #0
 8006022:	f8d9 2000 	ldr.w	r2, [r9]
 8006026:	f04f 0900 	mov.w	r9, #0
 800602a:	bf08      	it	eq
 800602c:	1aad      	subeq	r5, r5, r2
 800602e:	68a3      	ldr	r3, [r4, #8]
 8006030:	6922      	ldr	r2, [r4, #16]
 8006032:	bf08      	it	eq
 8006034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006038:	4293      	cmp	r3, r2
 800603a:	bfc4      	itt	gt
 800603c:	1a9b      	subgt	r3, r3, r2
 800603e:	18ed      	addgt	r5, r5, r3
 8006040:	341a      	adds	r4, #26
 8006042:	454d      	cmp	r5, r9
 8006044:	d11a      	bne.n	800607c <_printf_common+0xd8>
 8006046:	2000      	movs	r0, #0
 8006048:	e008      	b.n	800605c <_printf_common+0xb8>
 800604a:	2301      	movs	r3, #1
 800604c:	4652      	mov	r2, sl
 800604e:	4639      	mov	r1, r7
 8006050:	4630      	mov	r0, r6
 8006052:	47c0      	blx	r8
 8006054:	3001      	adds	r0, #1
 8006056:	d103      	bne.n	8006060 <_printf_common+0xbc>
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006060:	3501      	adds	r5, #1
 8006062:	e7c2      	b.n	8005fea <_printf_common+0x46>
 8006064:	2030      	movs	r0, #48	; 0x30
 8006066:	18e1      	adds	r1, r4, r3
 8006068:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006072:	4422      	add	r2, r4
 8006074:	3302      	adds	r3, #2
 8006076:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800607a:	e7c4      	b.n	8006006 <_printf_common+0x62>
 800607c:	2301      	movs	r3, #1
 800607e:	4622      	mov	r2, r4
 8006080:	4639      	mov	r1, r7
 8006082:	4630      	mov	r0, r6
 8006084:	47c0      	blx	r8
 8006086:	3001      	adds	r0, #1
 8006088:	d0e6      	beq.n	8006058 <_printf_common+0xb4>
 800608a:	f109 0901 	add.w	r9, r9, #1
 800608e:	e7d8      	b.n	8006042 <_printf_common+0x9e>

08006090 <_printf_i>:
 8006090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006094:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006098:	460c      	mov	r4, r1
 800609a:	7e09      	ldrb	r1, [r1, #24]
 800609c:	b085      	sub	sp, #20
 800609e:	296e      	cmp	r1, #110	; 0x6e
 80060a0:	4617      	mov	r7, r2
 80060a2:	4606      	mov	r6, r0
 80060a4:	4698      	mov	r8, r3
 80060a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060a8:	f000 80b3 	beq.w	8006212 <_printf_i+0x182>
 80060ac:	d822      	bhi.n	80060f4 <_printf_i+0x64>
 80060ae:	2963      	cmp	r1, #99	; 0x63
 80060b0:	d036      	beq.n	8006120 <_printf_i+0x90>
 80060b2:	d80a      	bhi.n	80060ca <_printf_i+0x3a>
 80060b4:	2900      	cmp	r1, #0
 80060b6:	f000 80b9 	beq.w	800622c <_printf_i+0x19c>
 80060ba:	2958      	cmp	r1, #88	; 0x58
 80060bc:	f000 8083 	beq.w	80061c6 <_printf_i+0x136>
 80060c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80060c8:	e032      	b.n	8006130 <_printf_i+0xa0>
 80060ca:	2964      	cmp	r1, #100	; 0x64
 80060cc:	d001      	beq.n	80060d2 <_printf_i+0x42>
 80060ce:	2969      	cmp	r1, #105	; 0x69
 80060d0:	d1f6      	bne.n	80060c0 <_printf_i+0x30>
 80060d2:	6820      	ldr	r0, [r4, #0]
 80060d4:	6813      	ldr	r3, [r2, #0]
 80060d6:	0605      	lsls	r5, r0, #24
 80060d8:	f103 0104 	add.w	r1, r3, #4
 80060dc:	d52a      	bpl.n	8006134 <_printf_i+0xa4>
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6011      	str	r1, [r2, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	da03      	bge.n	80060ee <_printf_i+0x5e>
 80060e6:	222d      	movs	r2, #45	; 0x2d
 80060e8:	425b      	negs	r3, r3
 80060ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80060ee:	486f      	ldr	r0, [pc, #444]	; (80062ac <_printf_i+0x21c>)
 80060f0:	220a      	movs	r2, #10
 80060f2:	e039      	b.n	8006168 <_printf_i+0xd8>
 80060f4:	2973      	cmp	r1, #115	; 0x73
 80060f6:	f000 809d 	beq.w	8006234 <_printf_i+0x1a4>
 80060fa:	d808      	bhi.n	800610e <_printf_i+0x7e>
 80060fc:	296f      	cmp	r1, #111	; 0x6f
 80060fe:	d020      	beq.n	8006142 <_printf_i+0xb2>
 8006100:	2970      	cmp	r1, #112	; 0x70
 8006102:	d1dd      	bne.n	80060c0 <_printf_i+0x30>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	f043 0320 	orr.w	r3, r3, #32
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	e003      	b.n	8006116 <_printf_i+0x86>
 800610e:	2975      	cmp	r1, #117	; 0x75
 8006110:	d017      	beq.n	8006142 <_printf_i+0xb2>
 8006112:	2978      	cmp	r1, #120	; 0x78
 8006114:	d1d4      	bne.n	80060c0 <_printf_i+0x30>
 8006116:	2378      	movs	r3, #120	; 0x78
 8006118:	4865      	ldr	r0, [pc, #404]	; (80062b0 <_printf_i+0x220>)
 800611a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800611e:	e055      	b.n	80061cc <_printf_i+0x13c>
 8006120:	6813      	ldr	r3, [r2, #0]
 8006122:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006126:	1d19      	adds	r1, r3, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6011      	str	r1, [r2, #0]
 800612c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006130:	2301      	movs	r3, #1
 8006132:	e08c      	b.n	800624e <_printf_i+0x1be>
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f010 0f40 	tst.w	r0, #64	; 0x40
 800613a:	6011      	str	r1, [r2, #0]
 800613c:	bf18      	it	ne
 800613e:	b21b      	sxthne	r3, r3
 8006140:	e7cf      	b.n	80060e2 <_printf_i+0x52>
 8006142:	6813      	ldr	r3, [r2, #0]
 8006144:	6825      	ldr	r5, [r4, #0]
 8006146:	1d18      	adds	r0, r3, #4
 8006148:	6010      	str	r0, [r2, #0]
 800614a:	0628      	lsls	r0, r5, #24
 800614c:	d501      	bpl.n	8006152 <_printf_i+0xc2>
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	e002      	b.n	8006158 <_printf_i+0xc8>
 8006152:	0668      	lsls	r0, r5, #25
 8006154:	d5fb      	bpl.n	800614e <_printf_i+0xbe>
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	296f      	cmp	r1, #111	; 0x6f
 800615a:	bf14      	ite	ne
 800615c:	220a      	movne	r2, #10
 800615e:	2208      	moveq	r2, #8
 8006160:	4852      	ldr	r0, [pc, #328]	; (80062ac <_printf_i+0x21c>)
 8006162:	2100      	movs	r1, #0
 8006164:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006168:	6865      	ldr	r5, [r4, #4]
 800616a:	2d00      	cmp	r5, #0
 800616c:	60a5      	str	r5, [r4, #8]
 800616e:	f2c0 8095 	blt.w	800629c <_printf_i+0x20c>
 8006172:	6821      	ldr	r1, [r4, #0]
 8006174:	f021 0104 	bic.w	r1, r1, #4
 8006178:	6021      	str	r1, [r4, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d13d      	bne.n	80061fa <_printf_i+0x16a>
 800617e:	2d00      	cmp	r5, #0
 8006180:	f040 808e 	bne.w	80062a0 <_printf_i+0x210>
 8006184:	4665      	mov	r5, ip
 8006186:	2a08      	cmp	r2, #8
 8006188:	d10b      	bne.n	80061a2 <_printf_i+0x112>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	07db      	lsls	r3, r3, #31
 800618e:	d508      	bpl.n	80061a2 <_printf_i+0x112>
 8006190:	6923      	ldr	r3, [r4, #16]
 8006192:	6862      	ldr	r2, [r4, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	bfde      	ittt	le
 8006198:	2330      	movle	r3, #48	; 0x30
 800619a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800619e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061a2:	ebac 0305 	sub.w	r3, ip, r5
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	f8cd 8000 	str.w	r8, [sp]
 80061ac:	463b      	mov	r3, r7
 80061ae:	aa03      	add	r2, sp, #12
 80061b0:	4621      	mov	r1, r4
 80061b2:	4630      	mov	r0, r6
 80061b4:	f7ff fef6 	bl	8005fa4 <_printf_common>
 80061b8:	3001      	adds	r0, #1
 80061ba:	d14d      	bne.n	8006258 <_printf_i+0x1c8>
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	b005      	add	sp, #20
 80061c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061c6:	4839      	ldr	r0, [pc, #228]	; (80062ac <_printf_i+0x21c>)
 80061c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80061cc:	6813      	ldr	r3, [r2, #0]
 80061ce:	6821      	ldr	r1, [r4, #0]
 80061d0:	1d1d      	adds	r5, r3, #4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6015      	str	r5, [r2, #0]
 80061d6:	060a      	lsls	r2, r1, #24
 80061d8:	d50b      	bpl.n	80061f2 <_printf_i+0x162>
 80061da:	07ca      	lsls	r2, r1, #31
 80061dc:	bf44      	itt	mi
 80061de:	f041 0120 	orrmi.w	r1, r1, #32
 80061e2:	6021      	strmi	r1, [r4, #0]
 80061e4:	b91b      	cbnz	r3, 80061ee <_printf_i+0x15e>
 80061e6:	6822      	ldr	r2, [r4, #0]
 80061e8:	f022 0220 	bic.w	r2, r2, #32
 80061ec:	6022      	str	r2, [r4, #0]
 80061ee:	2210      	movs	r2, #16
 80061f0:	e7b7      	b.n	8006162 <_printf_i+0xd2>
 80061f2:	064d      	lsls	r5, r1, #25
 80061f4:	bf48      	it	mi
 80061f6:	b29b      	uxthmi	r3, r3
 80061f8:	e7ef      	b.n	80061da <_printf_i+0x14a>
 80061fa:	4665      	mov	r5, ip
 80061fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006200:	fb02 3311 	mls	r3, r2, r1, r3
 8006204:	5cc3      	ldrb	r3, [r0, r3]
 8006206:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800620a:	460b      	mov	r3, r1
 800620c:	2900      	cmp	r1, #0
 800620e:	d1f5      	bne.n	80061fc <_printf_i+0x16c>
 8006210:	e7b9      	b.n	8006186 <_printf_i+0xf6>
 8006212:	6813      	ldr	r3, [r2, #0]
 8006214:	6825      	ldr	r5, [r4, #0]
 8006216:	1d18      	adds	r0, r3, #4
 8006218:	6961      	ldr	r1, [r4, #20]
 800621a:	6010      	str	r0, [r2, #0]
 800621c:	0628      	lsls	r0, r5, #24
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	d501      	bpl.n	8006226 <_printf_i+0x196>
 8006222:	6019      	str	r1, [r3, #0]
 8006224:	e002      	b.n	800622c <_printf_i+0x19c>
 8006226:	066a      	lsls	r2, r5, #25
 8006228:	d5fb      	bpl.n	8006222 <_printf_i+0x192>
 800622a:	8019      	strh	r1, [r3, #0]
 800622c:	2300      	movs	r3, #0
 800622e:	4665      	mov	r5, ip
 8006230:	6123      	str	r3, [r4, #16]
 8006232:	e7b9      	b.n	80061a8 <_printf_i+0x118>
 8006234:	6813      	ldr	r3, [r2, #0]
 8006236:	1d19      	adds	r1, r3, #4
 8006238:	6011      	str	r1, [r2, #0]
 800623a:	681d      	ldr	r5, [r3, #0]
 800623c:	6862      	ldr	r2, [r4, #4]
 800623e:	2100      	movs	r1, #0
 8006240:	4628      	mov	r0, r5
 8006242:	f000 f837 	bl	80062b4 <memchr>
 8006246:	b108      	cbz	r0, 800624c <_printf_i+0x1bc>
 8006248:	1b40      	subs	r0, r0, r5
 800624a:	6060      	str	r0, [r4, #4]
 800624c:	6863      	ldr	r3, [r4, #4]
 800624e:	6123      	str	r3, [r4, #16]
 8006250:	2300      	movs	r3, #0
 8006252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006256:	e7a7      	b.n	80061a8 <_printf_i+0x118>
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	462a      	mov	r2, r5
 800625c:	4639      	mov	r1, r7
 800625e:	4630      	mov	r0, r6
 8006260:	47c0      	blx	r8
 8006262:	3001      	adds	r0, #1
 8006264:	d0aa      	beq.n	80061bc <_printf_i+0x12c>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	079b      	lsls	r3, r3, #30
 800626a:	d413      	bmi.n	8006294 <_printf_i+0x204>
 800626c:	68e0      	ldr	r0, [r4, #12]
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	4298      	cmp	r0, r3
 8006272:	bfb8      	it	lt
 8006274:	4618      	movlt	r0, r3
 8006276:	e7a3      	b.n	80061c0 <_printf_i+0x130>
 8006278:	2301      	movs	r3, #1
 800627a:	464a      	mov	r2, r9
 800627c:	4639      	mov	r1, r7
 800627e:	4630      	mov	r0, r6
 8006280:	47c0      	blx	r8
 8006282:	3001      	adds	r0, #1
 8006284:	d09a      	beq.n	80061bc <_printf_i+0x12c>
 8006286:	3501      	adds	r5, #1
 8006288:	68e3      	ldr	r3, [r4, #12]
 800628a:	9a03      	ldr	r2, [sp, #12]
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	42ab      	cmp	r3, r5
 8006290:	dcf2      	bgt.n	8006278 <_printf_i+0x1e8>
 8006292:	e7eb      	b.n	800626c <_printf_i+0x1dc>
 8006294:	2500      	movs	r5, #0
 8006296:	f104 0919 	add.w	r9, r4, #25
 800629a:	e7f5      	b.n	8006288 <_printf_i+0x1f8>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1ac      	bne.n	80061fa <_printf_i+0x16a>
 80062a0:	7803      	ldrb	r3, [r0, #0]
 80062a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062aa:	e76c      	b.n	8006186 <_printf_i+0xf6>
 80062ac:	080065bd 	.word	0x080065bd
 80062b0:	080065ce 	.word	0x080065ce

080062b4 <memchr>:
 80062b4:	b510      	push	{r4, lr}
 80062b6:	b2c9      	uxtb	r1, r1
 80062b8:	4402      	add	r2, r0
 80062ba:	4290      	cmp	r0, r2
 80062bc:	4603      	mov	r3, r0
 80062be:	d101      	bne.n	80062c4 <memchr+0x10>
 80062c0:	2300      	movs	r3, #0
 80062c2:	e003      	b.n	80062cc <memchr+0x18>
 80062c4:	781c      	ldrb	r4, [r3, #0]
 80062c6:	3001      	adds	r0, #1
 80062c8:	428c      	cmp	r4, r1
 80062ca:	d1f6      	bne.n	80062ba <memchr+0x6>
 80062cc:	4618      	mov	r0, r3
 80062ce:	bd10      	pop	{r4, pc}

080062d0 <memcpy>:
 80062d0:	b510      	push	{r4, lr}
 80062d2:	1e43      	subs	r3, r0, #1
 80062d4:	440a      	add	r2, r1
 80062d6:	4291      	cmp	r1, r2
 80062d8:	d100      	bne.n	80062dc <memcpy+0xc>
 80062da:	bd10      	pop	{r4, pc}
 80062dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062e4:	e7f7      	b.n	80062d6 <memcpy+0x6>

080062e6 <memmove>:
 80062e6:	4288      	cmp	r0, r1
 80062e8:	b510      	push	{r4, lr}
 80062ea:	eb01 0302 	add.w	r3, r1, r2
 80062ee:	d807      	bhi.n	8006300 <memmove+0x1a>
 80062f0:	1e42      	subs	r2, r0, #1
 80062f2:	4299      	cmp	r1, r3
 80062f4:	d00a      	beq.n	800630c <memmove+0x26>
 80062f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80062fe:	e7f8      	b.n	80062f2 <memmove+0xc>
 8006300:	4283      	cmp	r3, r0
 8006302:	d9f5      	bls.n	80062f0 <memmove+0xa>
 8006304:	1881      	adds	r1, r0, r2
 8006306:	1ad2      	subs	r2, r2, r3
 8006308:	42d3      	cmn	r3, r2
 800630a:	d100      	bne.n	800630e <memmove+0x28>
 800630c:	bd10      	pop	{r4, pc}
 800630e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006312:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006316:	e7f7      	b.n	8006308 <memmove+0x22>

08006318 <_free_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4605      	mov	r5, r0
 800631c:	2900      	cmp	r1, #0
 800631e:	d043      	beq.n	80063a8 <_free_r+0x90>
 8006320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006324:	1f0c      	subs	r4, r1, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	bfb8      	it	lt
 800632a:	18e4      	addlt	r4, r4, r3
 800632c:	f000 f8d0 	bl	80064d0 <__malloc_lock>
 8006330:	4a1e      	ldr	r2, [pc, #120]	; (80063ac <_free_r+0x94>)
 8006332:	6813      	ldr	r3, [r2, #0]
 8006334:	4610      	mov	r0, r2
 8006336:	b933      	cbnz	r3, 8006346 <_free_r+0x2e>
 8006338:	6063      	str	r3, [r4, #4]
 800633a:	6014      	str	r4, [r2, #0]
 800633c:	4628      	mov	r0, r5
 800633e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006342:	f000 b8c6 	b.w	80064d2 <__malloc_unlock>
 8006346:	42a3      	cmp	r3, r4
 8006348:	d90b      	bls.n	8006362 <_free_r+0x4a>
 800634a:	6821      	ldr	r1, [r4, #0]
 800634c:	1862      	adds	r2, r4, r1
 800634e:	4293      	cmp	r3, r2
 8006350:	bf01      	itttt	eq
 8006352:	681a      	ldreq	r2, [r3, #0]
 8006354:	685b      	ldreq	r3, [r3, #4]
 8006356:	1852      	addeq	r2, r2, r1
 8006358:	6022      	streq	r2, [r4, #0]
 800635a:	6063      	str	r3, [r4, #4]
 800635c:	6004      	str	r4, [r0, #0]
 800635e:	e7ed      	b.n	800633c <_free_r+0x24>
 8006360:	4613      	mov	r3, r2
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	b10a      	cbz	r2, 800636a <_free_r+0x52>
 8006366:	42a2      	cmp	r2, r4
 8006368:	d9fa      	bls.n	8006360 <_free_r+0x48>
 800636a:	6819      	ldr	r1, [r3, #0]
 800636c:	1858      	adds	r0, r3, r1
 800636e:	42a0      	cmp	r0, r4
 8006370:	d10b      	bne.n	800638a <_free_r+0x72>
 8006372:	6820      	ldr	r0, [r4, #0]
 8006374:	4401      	add	r1, r0
 8006376:	1858      	adds	r0, r3, r1
 8006378:	4282      	cmp	r2, r0
 800637a:	6019      	str	r1, [r3, #0]
 800637c:	d1de      	bne.n	800633c <_free_r+0x24>
 800637e:	6810      	ldr	r0, [r2, #0]
 8006380:	6852      	ldr	r2, [r2, #4]
 8006382:	4401      	add	r1, r0
 8006384:	6019      	str	r1, [r3, #0]
 8006386:	605a      	str	r2, [r3, #4]
 8006388:	e7d8      	b.n	800633c <_free_r+0x24>
 800638a:	d902      	bls.n	8006392 <_free_r+0x7a>
 800638c:	230c      	movs	r3, #12
 800638e:	602b      	str	r3, [r5, #0]
 8006390:	e7d4      	b.n	800633c <_free_r+0x24>
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	1821      	adds	r1, r4, r0
 8006396:	428a      	cmp	r2, r1
 8006398:	bf01      	itttt	eq
 800639a:	6811      	ldreq	r1, [r2, #0]
 800639c:	6852      	ldreq	r2, [r2, #4]
 800639e:	1809      	addeq	r1, r1, r0
 80063a0:	6021      	streq	r1, [r4, #0]
 80063a2:	6062      	str	r2, [r4, #4]
 80063a4:	605c      	str	r4, [r3, #4]
 80063a6:	e7c9      	b.n	800633c <_free_r+0x24>
 80063a8:	bd38      	pop	{r3, r4, r5, pc}
 80063aa:	bf00      	nop
 80063ac:	20000454 	.word	0x20000454

080063b0 <_malloc_r>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	1ccd      	adds	r5, r1, #3
 80063b4:	f025 0503 	bic.w	r5, r5, #3
 80063b8:	3508      	adds	r5, #8
 80063ba:	2d0c      	cmp	r5, #12
 80063bc:	bf38      	it	cc
 80063be:	250c      	movcc	r5, #12
 80063c0:	2d00      	cmp	r5, #0
 80063c2:	4606      	mov	r6, r0
 80063c4:	db01      	blt.n	80063ca <_malloc_r+0x1a>
 80063c6:	42a9      	cmp	r1, r5
 80063c8:	d903      	bls.n	80063d2 <_malloc_r+0x22>
 80063ca:	230c      	movs	r3, #12
 80063cc:	6033      	str	r3, [r6, #0]
 80063ce:	2000      	movs	r0, #0
 80063d0:	bd70      	pop	{r4, r5, r6, pc}
 80063d2:	f000 f87d 	bl	80064d0 <__malloc_lock>
 80063d6:	4a21      	ldr	r2, [pc, #132]	; (800645c <_malloc_r+0xac>)
 80063d8:	6814      	ldr	r4, [r2, #0]
 80063da:	4621      	mov	r1, r4
 80063dc:	b991      	cbnz	r1, 8006404 <_malloc_r+0x54>
 80063de:	4c20      	ldr	r4, [pc, #128]	; (8006460 <_malloc_r+0xb0>)
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	b91b      	cbnz	r3, 80063ec <_malloc_r+0x3c>
 80063e4:	4630      	mov	r0, r6
 80063e6:	f000 f863 	bl	80064b0 <_sbrk_r>
 80063ea:	6020      	str	r0, [r4, #0]
 80063ec:	4629      	mov	r1, r5
 80063ee:	4630      	mov	r0, r6
 80063f0:	f000 f85e 	bl	80064b0 <_sbrk_r>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d124      	bne.n	8006442 <_malloc_r+0x92>
 80063f8:	230c      	movs	r3, #12
 80063fa:	4630      	mov	r0, r6
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	f000 f868 	bl	80064d2 <__malloc_unlock>
 8006402:	e7e4      	b.n	80063ce <_malloc_r+0x1e>
 8006404:	680b      	ldr	r3, [r1, #0]
 8006406:	1b5b      	subs	r3, r3, r5
 8006408:	d418      	bmi.n	800643c <_malloc_r+0x8c>
 800640a:	2b0b      	cmp	r3, #11
 800640c:	d90f      	bls.n	800642e <_malloc_r+0x7e>
 800640e:	600b      	str	r3, [r1, #0]
 8006410:	18cc      	adds	r4, r1, r3
 8006412:	50cd      	str	r5, [r1, r3]
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f85c 	bl	80064d2 <__malloc_unlock>
 800641a:	f104 000b 	add.w	r0, r4, #11
 800641e:	1d23      	adds	r3, r4, #4
 8006420:	f020 0007 	bic.w	r0, r0, #7
 8006424:	1ac3      	subs	r3, r0, r3
 8006426:	d0d3      	beq.n	80063d0 <_malloc_r+0x20>
 8006428:	425a      	negs	r2, r3
 800642a:	50e2      	str	r2, [r4, r3]
 800642c:	e7d0      	b.n	80063d0 <_malloc_r+0x20>
 800642e:	684b      	ldr	r3, [r1, #4]
 8006430:	428c      	cmp	r4, r1
 8006432:	bf16      	itet	ne
 8006434:	6063      	strne	r3, [r4, #4]
 8006436:	6013      	streq	r3, [r2, #0]
 8006438:	460c      	movne	r4, r1
 800643a:	e7eb      	b.n	8006414 <_malloc_r+0x64>
 800643c:	460c      	mov	r4, r1
 800643e:	6849      	ldr	r1, [r1, #4]
 8006440:	e7cc      	b.n	80063dc <_malloc_r+0x2c>
 8006442:	1cc4      	adds	r4, r0, #3
 8006444:	f024 0403 	bic.w	r4, r4, #3
 8006448:	42a0      	cmp	r0, r4
 800644a:	d005      	beq.n	8006458 <_malloc_r+0xa8>
 800644c:	1a21      	subs	r1, r4, r0
 800644e:	4630      	mov	r0, r6
 8006450:	f000 f82e 	bl	80064b0 <_sbrk_r>
 8006454:	3001      	adds	r0, #1
 8006456:	d0cf      	beq.n	80063f8 <_malloc_r+0x48>
 8006458:	6025      	str	r5, [r4, #0]
 800645a:	e7db      	b.n	8006414 <_malloc_r+0x64>
 800645c:	20000454 	.word	0x20000454
 8006460:	20000458 	.word	0x20000458

08006464 <_realloc_r>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	4607      	mov	r7, r0
 8006468:	4614      	mov	r4, r2
 800646a:	460e      	mov	r6, r1
 800646c:	b921      	cbnz	r1, 8006478 <_realloc_r+0x14>
 800646e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006472:	4611      	mov	r1, r2
 8006474:	f7ff bf9c 	b.w	80063b0 <_malloc_r>
 8006478:	b922      	cbnz	r2, 8006484 <_realloc_r+0x20>
 800647a:	f7ff ff4d 	bl	8006318 <_free_r>
 800647e:	4625      	mov	r5, r4
 8006480:	4628      	mov	r0, r5
 8006482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006484:	f000 f826 	bl	80064d4 <_malloc_usable_size_r>
 8006488:	42a0      	cmp	r0, r4
 800648a:	d20f      	bcs.n	80064ac <_realloc_r+0x48>
 800648c:	4621      	mov	r1, r4
 800648e:	4638      	mov	r0, r7
 8006490:	f7ff ff8e 	bl	80063b0 <_malloc_r>
 8006494:	4605      	mov	r5, r0
 8006496:	2800      	cmp	r0, #0
 8006498:	d0f2      	beq.n	8006480 <_realloc_r+0x1c>
 800649a:	4631      	mov	r1, r6
 800649c:	4622      	mov	r2, r4
 800649e:	f7ff ff17 	bl	80062d0 <memcpy>
 80064a2:	4631      	mov	r1, r6
 80064a4:	4638      	mov	r0, r7
 80064a6:	f7ff ff37 	bl	8006318 <_free_r>
 80064aa:	e7e9      	b.n	8006480 <_realloc_r+0x1c>
 80064ac:	4635      	mov	r5, r6
 80064ae:	e7e7      	b.n	8006480 <_realloc_r+0x1c>

080064b0 <_sbrk_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	2300      	movs	r3, #0
 80064b4:	4c05      	ldr	r4, [pc, #20]	; (80064cc <_sbrk_r+0x1c>)
 80064b6:	4605      	mov	r5, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	6023      	str	r3, [r4, #0]
 80064bc:	f7fa f822 	bl	8000504 <_sbrk>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d102      	bne.n	80064ca <_sbrk_r+0x1a>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	b103      	cbz	r3, 80064ca <_sbrk_r+0x1a>
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
 80064cc:	200016c8 	.word	0x200016c8

080064d0 <__malloc_lock>:
 80064d0:	4770      	bx	lr

080064d2 <__malloc_unlock>:
 80064d2:	4770      	bx	lr

080064d4 <_malloc_usable_size_r>:
 80064d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064d8:	1f18      	subs	r0, r3, #4
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bfbc      	itt	lt
 80064de:	580b      	ldrlt	r3, [r1, r0]
 80064e0:	18c0      	addlt	r0, r0, r3
 80064e2:	4770      	bx	lr

080064e4 <_init>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr

080064f0 <_fini>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	bf00      	nop
 80064f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f6:	bc08      	pop	{r3}
 80064f8:	469e      	mov	lr, r3
 80064fa:	4770      	bx	lr
