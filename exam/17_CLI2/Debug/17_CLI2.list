
17_CLI2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b774  080051e8  080051e8  000051e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08010960  08010960  00010960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e20  08010e20  00020374  2**0
                  CONTENTS
  4 .ARM          00000000  08010e20  08010e20  00020374  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010e20  08010e20  00020374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e20  08010e20  00010e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e24  08010e24  00010e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000374  20000000  08010e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002218  20000374  0801119c  00020374  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000258c  0801119c  0002258c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ed7  00000000  00000000  0002039d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005511  00000000  00000000  00044274  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  00049788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  0004a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cf33  00000000  00000000  0004b960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a3e0  00000000  00000000  00068893  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e5b2  00000000  00000000  00082c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101225  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005300  00000000  00000000  001012a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080051e8 <__do_global_dtors_aux>:
 80051e8:	b510      	push	{r4, lr}
 80051ea:	4c05      	ldr	r4, [pc, #20]	; (8005200 <__do_global_dtors_aux+0x18>)
 80051ec:	7823      	ldrb	r3, [r4, #0]
 80051ee:	b933      	cbnz	r3, 80051fe <__do_global_dtors_aux+0x16>
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <__do_global_dtors_aux+0x1c>)
 80051f2:	b113      	cbz	r3, 80051fa <__do_global_dtors_aux+0x12>
 80051f4:	4804      	ldr	r0, [pc, #16]	; (8005208 <__do_global_dtors_aux+0x20>)
 80051f6:	f3af 8000 	nop.w
 80051fa:	2301      	movs	r3, #1
 80051fc:	7023      	strb	r3, [r4, #0]
 80051fe:	bd10      	pop	{r4, pc}
 8005200:	20000374 	.word	0x20000374
 8005204:	00000000 	.word	0x00000000
 8005208:	08010944 	.word	0x08010944

0800520c <frame_dummy>:
 800520c:	b508      	push	{r3, lr}
 800520e:	4b03      	ldr	r3, [pc, #12]	; (800521c <frame_dummy+0x10>)
 8005210:	b11b      	cbz	r3, 800521a <frame_dummy+0xe>
 8005212:	4903      	ldr	r1, [pc, #12]	; (8005220 <frame_dummy+0x14>)
 8005214:	4803      	ldr	r0, [pc, #12]	; (8005224 <frame_dummy+0x18>)
 8005216:	f3af 8000 	nop.w
 800521a:	bd08      	pop	{r3, pc}
 800521c:	00000000 	.word	0x00000000
 8005220:	20000378 	.word	0x20000378
 8005224:	08010944 	.word	0x08010944

08005228 <strcmp>:
 8005228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800522c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005230:	2a01      	cmp	r2, #1
 8005232:	bf28      	it	cs
 8005234:	429a      	cmpcs	r2, r3
 8005236:	d0f7      	beq.n	8005228 <strcmp>
 8005238:	1ad0      	subs	r0, r2, r3
 800523a:	4770      	bx	lr

0800523c <strlen>:
 800523c:	4603      	mov	r3, r0
 800523e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005242:	2a00      	cmp	r2, #0
 8005244:	d1fb      	bne.n	800523e <strlen+0x2>
 8005246:	1a18      	subs	r0, r3, r0
 8005248:	3801      	subs	r0, #1
 800524a:	4770      	bx	lr

0800524c <__aeabi_drsub>:
 800524c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005250:	e002      	b.n	8005258 <__adddf3>
 8005252:	bf00      	nop

08005254 <__aeabi_dsub>:
 8005254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005258 <__adddf3>:
 8005258:	b530      	push	{r4, r5, lr}
 800525a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800525e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005262:	ea94 0f05 	teq	r4, r5
 8005266:	bf08      	it	eq
 8005268:	ea90 0f02 	teqeq	r0, r2
 800526c:	bf1f      	itttt	ne
 800526e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800527a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800527e:	f000 80e2 	beq.w	8005446 <__adddf3+0x1ee>
 8005282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800528a:	bfb8      	it	lt
 800528c:	426d      	neglt	r5, r5
 800528e:	dd0c      	ble.n	80052aa <__adddf3+0x52>
 8005290:	442c      	add	r4, r5
 8005292:	ea80 0202 	eor.w	r2, r0, r2
 8005296:	ea81 0303 	eor.w	r3, r1, r3
 800529a:	ea82 0000 	eor.w	r0, r2, r0
 800529e:	ea83 0101 	eor.w	r1, r3, r1
 80052a2:	ea80 0202 	eor.w	r2, r0, r2
 80052a6:	ea81 0303 	eor.w	r3, r1, r3
 80052aa:	2d36      	cmp	r5, #54	; 0x36
 80052ac:	bf88      	it	hi
 80052ae:	bd30      	pophi	{r4, r5, pc}
 80052b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80052b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80052b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80052bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80052c0:	d002      	beq.n	80052c8 <__adddf3+0x70>
 80052c2:	4240      	negs	r0, r0
 80052c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80052c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80052cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80052d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80052d4:	d002      	beq.n	80052dc <__adddf3+0x84>
 80052d6:	4252      	negs	r2, r2
 80052d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80052dc:	ea94 0f05 	teq	r4, r5
 80052e0:	f000 80a7 	beq.w	8005432 <__adddf3+0x1da>
 80052e4:	f1a4 0401 	sub.w	r4, r4, #1
 80052e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80052ec:	db0d      	blt.n	800530a <__adddf3+0xb2>
 80052ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80052f2:	fa22 f205 	lsr.w	r2, r2, r5
 80052f6:	1880      	adds	r0, r0, r2
 80052f8:	f141 0100 	adc.w	r1, r1, #0
 80052fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8005300:	1880      	adds	r0, r0, r2
 8005302:	fa43 f305 	asr.w	r3, r3, r5
 8005306:	4159      	adcs	r1, r3
 8005308:	e00e      	b.n	8005328 <__adddf3+0xd0>
 800530a:	f1a5 0520 	sub.w	r5, r5, #32
 800530e:	f10e 0e20 	add.w	lr, lr, #32
 8005312:	2a01      	cmp	r2, #1
 8005314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005318:	bf28      	it	cs
 800531a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800531e:	fa43 f305 	asr.w	r3, r3, r5
 8005322:	18c0      	adds	r0, r0, r3
 8005324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800532c:	d507      	bpl.n	800533e <__adddf3+0xe6>
 800532e:	f04f 0e00 	mov.w	lr, #0
 8005332:	f1dc 0c00 	rsbs	ip, ip, #0
 8005336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800533a:	eb6e 0101 	sbc.w	r1, lr, r1
 800533e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005342:	d31b      	bcc.n	800537c <__adddf3+0x124>
 8005344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005348:	d30c      	bcc.n	8005364 <__adddf3+0x10c>
 800534a:	0849      	lsrs	r1, r1, #1
 800534c:	ea5f 0030 	movs.w	r0, r0, rrx
 8005350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005354:	f104 0401 	add.w	r4, r4, #1
 8005358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800535c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005360:	f080 809a 	bcs.w	8005498 <__adddf3+0x240>
 8005364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005368:	bf08      	it	eq
 800536a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800536e:	f150 0000 	adcs.w	r0, r0, #0
 8005372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005376:	ea41 0105 	orr.w	r1, r1, r5
 800537a:	bd30      	pop	{r4, r5, pc}
 800537c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005380:	4140      	adcs	r0, r0
 8005382:	eb41 0101 	adc.w	r1, r1, r1
 8005386:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800538a:	f1a4 0401 	sub.w	r4, r4, #1
 800538e:	d1e9      	bne.n	8005364 <__adddf3+0x10c>
 8005390:	f091 0f00 	teq	r1, #0
 8005394:	bf04      	itt	eq
 8005396:	4601      	moveq	r1, r0
 8005398:	2000      	moveq	r0, #0
 800539a:	fab1 f381 	clz	r3, r1
 800539e:	bf08      	it	eq
 80053a0:	3320      	addeq	r3, #32
 80053a2:	f1a3 030b 	sub.w	r3, r3, #11
 80053a6:	f1b3 0220 	subs.w	r2, r3, #32
 80053aa:	da0c      	bge.n	80053c6 <__adddf3+0x16e>
 80053ac:	320c      	adds	r2, #12
 80053ae:	dd08      	ble.n	80053c2 <__adddf3+0x16a>
 80053b0:	f102 0c14 	add.w	ip, r2, #20
 80053b4:	f1c2 020c 	rsb	r2, r2, #12
 80053b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80053bc:	fa21 f102 	lsr.w	r1, r1, r2
 80053c0:	e00c      	b.n	80053dc <__adddf3+0x184>
 80053c2:	f102 0214 	add.w	r2, r2, #20
 80053c6:	bfd8      	it	le
 80053c8:	f1c2 0c20 	rsble	ip, r2, #32
 80053cc:	fa01 f102 	lsl.w	r1, r1, r2
 80053d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80053d4:	bfdc      	itt	le
 80053d6:	ea41 010c 	orrle.w	r1, r1, ip
 80053da:	4090      	lslle	r0, r2
 80053dc:	1ae4      	subs	r4, r4, r3
 80053de:	bfa2      	ittt	ge
 80053e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80053e4:	4329      	orrge	r1, r5
 80053e6:	bd30      	popge	{r4, r5, pc}
 80053e8:	ea6f 0404 	mvn.w	r4, r4
 80053ec:	3c1f      	subs	r4, #31
 80053ee:	da1c      	bge.n	800542a <__adddf3+0x1d2>
 80053f0:	340c      	adds	r4, #12
 80053f2:	dc0e      	bgt.n	8005412 <__adddf3+0x1ba>
 80053f4:	f104 0414 	add.w	r4, r4, #20
 80053f8:	f1c4 0220 	rsb	r2, r4, #32
 80053fc:	fa20 f004 	lsr.w	r0, r0, r4
 8005400:	fa01 f302 	lsl.w	r3, r1, r2
 8005404:	ea40 0003 	orr.w	r0, r0, r3
 8005408:	fa21 f304 	lsr.w	r3, r1, r4
 800540c:	ea45 0103 	orr.w	r1, r5, r3
 8005410:	bd30      	pop	{r4, r5, pc}
 8005412:	f1c4 040c 	rsb	r4, r4, #12
 8005416:	f1c4 0220 	rsb	r2, r4, #32
 800541a:	fa20 f002 	lsr.w	r0, r0, r2
 800541e:	fa01 f304 	lsl.w	r3, r1, r4
 8005422:	ea40 0003 	orr.w	r0, r0, r3
 8005426:	4629      	mov	r1, r5
 8005428:	bd30      	pop	{r4, r5, pc}
 800542a:	fa21 f004 	lsr.w	r0, r1, r4
 800542e:	4629      	mov	r1, r5
 8005430:	bd30      	pop	{r4, r5, pc}
 8005432:	f094 0f00 	teq	r4, #0
 8005436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800543a:	bf06      	itte	eq
 800543c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005440:	3401      	addeq	r4, #1
 8005442:	3d01      	subne	r5, #1
 8005444:	e74e      	b.n	80052e4 <__adddf3+0x8c>
 8005446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800544a:	bf18      	it	ne
 800544c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005450:	d029      	beq.n	80054a6 <__adddf3+0x24e>
 8005452:	ea94 0f05 	teq	r4, r5
 8005456:	bf08      	it	eq
 8005458:	ea90 0f02 	teqeq	r0, r2
 800545c:	d005      	beq.n	800546a <__adddf3+0x212>
 800545e:	ea54 0c00 	orrs.w	ip, r4, r0
 8005462:	bf04      	itt	eq
 8005464:	4619      	moveq	r1, r3
 8005466:	4610      	moveq	r0, r2
 8005468:	bd30      	pop	{r4, r5, pc}
 800546a:	ea91 0f03 	teq	r1, r3
 800546e:	bf1e      	ittt	ne
 8005470:	2100      	movne	r1, #0
 8005472:	2000      	movne	r0, #0
 8005474:	bd30      	popne	{r4, r5, pc}
 8005476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800547a:	d105      	bne.n	8005488 <__adddf3+0x230>
 800547c:	0040      	lsls	r0, r0, #1
 800547e:	4149      	adcs	r1, r1
 8005480:	bf28      	it	cs
 8005482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005486:	bd30      	pop	{r4, r5, pc}
 8005488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800548c:	bf3c      	itt	cc
 800548e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005492:	bd30      	popcc	{r4, r5, pc}
 8005494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800549c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80054a0:	f04f 0000 	mov.w	r0, #0
 80054a4:	bd30      	pop	{r4, r5, pc}
 80054a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80054aa:	bf1a      	itte	ne
 80054ac:	4619      	movne	r1, r3
 80054ae:	4610      	movne	r0, r2
 80054b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80054b4:	bf1c      	itt	ne
 80054b6:	460b      	movne	r3, r1
 80054b8:	4602      	movne	r2, r0
 80054ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80054be:	bf06      	itte	eq
 80054c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80054c4:	ea91 0f03 	teqeq	r1, r3
 80054c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80054cc:	bd30      	pop	{r4, r5, pc}
 80054ce:	bf00      	nop

080054d0 <__aeabi_ui2d>:
 80054d0:	f090 0f00 	teq	r0, #0
 80054d4:	bf04      	itt	eq
 80054d6:	2100      	moveq	r1, #0
 80054d8:	4770      	bxeq	lr
 80054da:	b530      	push	{r4, r5, lr}
 80054dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80054e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80054e4:	f04f 0500 	mov.w	r5, #0
 80054e8:	f04f 0100 	mov.w	r1, #0
 80054ec:	e750      	b.n	8005390 <__adddf3+0x138>
 80054ee:	bf00      	nop

080054f0 <__aeabi_i2d>:
 80054f0:	f090 0f00 	teq	r0, #0
 80054f4:	bf04      	itt	eq
 80054f6:	2100      	moveq	r1, #0
 80054f8:	4770      	bxeq	lr
 80054fa:	b530      	push	{r4, r5, lr}
 80054fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005508:	bf48      	it	mi
 800550a:	4240      	negmi	r0, r0
 800550c:	f04f 0100 	mov.w	r1, #0
 8005510:	e73e      	b.n	8005390 <__adddf3+0x138>
 8005512:	bf00      	nop

08005514 <__aeabi_f2d>:
 8005514:	0042      	lsls	r2, r0, #1
 8005516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800551a:	ea4f 0131 	mov.w	r1, r1, rrx
 800551e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005522:	bf1f      	itttt	ne
 8005524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800552c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005530:	4770      	bxne	lr
 8005532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8005536:	bf08      	it	eq
 8005538:	4770      	bxeq	lr
 800553a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800553e:	bf04      	itt	eq
 8005540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005544:	4770      	bxeq	lr
 8005546:	b530      	push	{r4, r5, lr}
 8005548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800554c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005554:	e71c      	b.n	8005390 <__adddf3+0x138>
 8005556:	bf00      	nop

08005558 <__aeabi_ul2d>:
 8005558:	ea50 0201 	orrs.w	r2, r0, r1
 800555c:	bf08      	it	eq
 800555e:	4770      	bxeq	lr
 8005560:	b530      	push	{r4, r5, lr}
 8005562:	f04f 0500 	mov.w	r5, #0
 8005566:	e00a      	b.n	800557e <__aeabi_l2d+0x16>

08005568 <__aeabi_l2d>:
 8005568:	ea50 0201 	orrs.w	r2, r0, r1
 800556c:	bf08      	it	eq
 800556e:	4770      	bxeq	lr
 8005570:	b530      	push	{r4, r5, lr}
 8005572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005576:	d502      	bpl.n	800557e <__aeabi_l2d+0x16>
 8005578:	4240      	negs	r0, r0
 800557a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800557e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800558a:	f43f aed8 	beq.w	800533e <__adddf3+0xe6>
 800558e:	f04f 0203 	mov.w	r2, #3
 8005592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005596:	bf18      	it	ne
 8005598:	3203      	addne	r2, #3
 800559a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800559e:	bf18      	it	ne
 80055a0:	3203      	addne	r2, #3
 80055a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80055a6:	f1c2 0320 	rsb	r3, r2, #32
 80055aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80055ae:	fa20 f002 	lsr.w	r0, r0, r2
 80055b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80055b6:	ea40 000e 	orr.w	r0, r0, lr
 80055ba:	fa21 f102 	lsr.w	r1, r1, r2
 80055be:	4414      	add	r4, r2
 80055c0:	e6bd      	b.n	800533e <__adddf3+0xe6>
 80055c2:	bf00      	nop

080055c4 <__aeabi_dmul>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80055ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80055ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80055d2:	bf1d      	ittte	ne
 80055d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80055d8:	ea94 0f0c 	teqne	r4, ip
 80055dc:	ea95 0f0c 	teqne	r5, ip
 80055e0:	f000 f8de 	bleq	80057a0 <__aeabi_dmul+0x1dc>
 80055e4:	442c      	add	r4, r5
 80055e6:	ea81 0603 	eor.w	r6, r1, r3
 80055ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80055ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80055f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80055f6:	bf18      	it	ne
 80055f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80055fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005604:	d038      	beq.n	8005678 <__aeabi_dmul+0xb4>
 8005606:	fba0 ce02 	umull	ip, lr, r0, r2
 800560a:	f04f 0500 	mov.w	r5, #0
 800560e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800561a:	f04f 0600 	mov.w	r6, #0
 800561e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005622:	f09c 0f00 	teq	ip, #0
 8005626:	bf18      	it	ne
 8005628:	f04e 0e01 	orrne.w	lr, lr, #1
 800562c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005638:	d204      	bcs.n	8005644 <__aeabi_dmul+0x80>
 800563a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800563e:	416d      	adcs	r5, r5
 8005640:	eb46 0606 	adc.w	r6, r6, r6
 8005644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800564c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800565c:	bf88      	it	hi
 800565e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005662:	d81e      	bhi.n	80056a2 <__aeabi_dmul+0xde>
 8005664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005668:	bf08      	it	eq
 800566a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800566e:	f150 0000 	adcs.w	r0, r0, #0
 8005672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800567c:	ea46 0101 	orr.w	r1, r6, r1
 8005680:	ea40 0002 	orr.w	r0, r0, r2
 8005684:	ea81 0103 	eor.w	r1, r1, r3
 8005688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800568c:	bfc2      	ittt	gt
 800568e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005696:	bd70      	popgt	{r4, r5, r6, pc}
 8005698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800569c:	f04f 0e00 	mov.w	lr, #0
 80056a0:	3c01      	subs	r4, #1
 80056a2:	f300 80ab 	bgt.w	80057fc <__aeabi_dmul+0x238>
 80056a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80056aa:	bfde      	ittt	le
 80056ac:	2000      	movle	r0, #0
 80056ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80056b2:	bd70      	pople	{r4, r5, r6, pc}
 80056b4:	f1c4 0400 	rsb	r4, r4, #0
 80056b8:	3c20      	subs	r4, #32
 80056ba:	da35      	bge.n	8005728 <__aeabi_dmul+0x164>
 80056bc:	340c      	adds	r4, #12
 80056be:	dc1b      	bgt.n	80056f8 <__aeabi_dmul+0x134>
 80056c0:	f104 0414 	add.w	r4, r4, #20
 80056c4:	f1c4 0520 	rsb	r5, r4, #32
 80056c8:	fa00 f305 	lsl.w	r3, r0, r5
 80056cc:	fa20 f004 	lsr.w	r0, r0, r4
 80056d0:	fa01 f205 	lsl.w	r2, r1, r5
 80056d4:	ea40 0002 	orr.w	r0, r0, r2
 80056d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80056dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80056e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80056e4:	fa21 f604 	lsr.w	r6, r1, r4
 80056e8:	eb42 0106 	adc.w	r1, r2, r6
 80056ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80056f0:	bf08      	it	eq
 80056f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80056f6:	bd70      	pop	{r4, r5, r6, pc}
 80056f8:	f1c4 040c 	rsb	r4, r4, #12
 80056fc:	f1c4 0520 	rsb	r5, r4, #32
 8005700:	fa00 f304 	lsl.w	r3, r0, r4
 8005704:	fa20 f005 	lsr.w	r0, r0, r5
 8005708:	fa01 f204 	lsl.w	r2, r1, r4
 800570c:	ea40 0002 	orr.w	r0, r0, r2
 8005710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005718:	f141 0100 	adc.w	r1, r1, #0
 800571c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005720:	bf08      	it	eq
 8005722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005726:	bd70      	pop	{r4, r5, r6, pc}
 8005728:	f1c4 0520 	rsb	r5, r4, #32
 800572c:	fa00 f205 	lsl.w	r2, r0, r5
 8005730:	ea4e 0e02 	orr.w	lr, lr, r2
 8005734:	fa20 f304 	lsr.w	r3, r0, r4
 8005738:	fa01 f205 	lsl.w	r2, r1, r5
 800573c:	ea43 0302 	orr.w	r3, r3, r2
 8005740:	fa21 f004 	lsr.w	r0, r1, r4
 8005744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005748:	fa21 f204 	lsr.w	r2, r1, r4
 800574c:	ea20 0002 	bic.w	r0, r0, r2
 8005750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005758:	bf08      	it	eq
 800575a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	f094 0f00 	teq	r4, #0
 8005764:	d10f      	bne.n	8005786 <__aeabi_dmul+0x1c2>
 8005766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800576a:	0040      	lsls	r0, r0, #1
 800576c:	eb41 0101 	adc.w	r1, r1, r1
 8005770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005774:	bf08      	it	eq
 8005776:	3c01      	subeq	r4, #1
 8005778:	d0f7      	beq.n	800576a <__aeabi_dmul+0x1a6>
 800577a:	ea41 0106 	orr.w	r1, r1, r6
 800577e:	f095 0f00 	teq	r5, #0
 8005782:	bf18      	it	ne
 8005784:	4770      	bxne	lr
 8005786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800578a:	0052      	lsls	r2, r2, #1
 800578c:	eb43 0303 	adc.w	r3, r3, r3
 8005790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005794:	bf08      	it	eq
 8005796:	3d01      	subeq	r5, #1
 8005798:	d0f7      	beq.n	800578a <__aeabi_dmul+0x1c6>
 800579a:	ea43 0306 	orr.w	r3, r3, r6
 800579e:	4770      	bx	lr
 80057a0:	ea94 0f0c 	teq	r4, ip
 80057a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80057a8:	bf18      	it	ne
 80057aa:	ea95 0f0c 	teqne	r5, ip
 80057ae:	d00c      	beq.n	80057ca <__aeabi_dmul+0x206>
 80057b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80057b4:	bf18      	it	ne
 80057b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80057ba:	d1d1      	bne.n	8005760 <__aeabi_dmul+0x19c>
 80057bc:	ea81 0103 	eor.w	r1, r1, r3
 80057c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80057c4:	f04f 0000 	mov.w	r0, #0
 80057c8:	bd70      	pop	{r4, r5, r6, pc}
 80057ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80057ce:	bf06      	itte	eq
 80057d0:	4610      	moveq	r0, r2
 80057d2:	4619      	moveq	r1, r3
 80057d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80057d8:	d019      	beq.n	800580e <__aeabi_dmul+0x24a>
 80057da:	ea94 0f0c 	teq	r4, ip
 80057de:	d102      	bne.n	80057e6 <__aeabi_dmul+0x222>
 80057e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80057e4:	d113      	bne.n	800580e <__aeabi_dmul+0x24a>
 80057e6:	ea95 0f0c 	teq	r5, ip
 80057ea:	d105      	bne.n	80057f8 <__aeabi_dmul+0x234>
 80057ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80057f0:	bf1c      	itt	ne
 80057f2:	4610      	movne	r0, r2
 80057f4:	4619      	movne	r1, r3
 80057f6:	d10a      	bne.n	800580e <__aeabi_dmul+0x24a>
 80057f8:	ea81 0103 	eor.w	r1, r1, r3
 80057fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005808:	f04f 0000 	mov.w	r0, #0
 800580c:	bd70      	pop	{r4, r5, r6, pc}
 800580e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005816:	bd70      	pop	{r4, r5, r6, pc}

08005818 <__aeabi_ddiv>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800581e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005826:	bf1d      	ittte	ne
 8005828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800582c:	ea94 0f0c 	teqne	r4, ip
 8005830:	ea95 0f0c 	teqne	r5, ip
 8005834:	f000 f8a7 	bleq	8005986 <__aeabi_ddiv+0x16e>
 8005838:	eba4 0405 	sub.w	r4, r4, r5
 800583c:	ea81 0e03 	eor.w	lr, r1, r3
 8005840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005848:	f000 8088 	beq.w	800595c <__aeabi_ddiv+0x144>
 800584c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800585c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800586c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005870:	429d      	cmp	r5, r3
 8005872:	bf08      	it	eq
 8005874:	4296      	cmpeq	r6, r2
 8005876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800587a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800587e:	d202      	bcs.n	8005886 <__aeabi_ddiv+0x6e>
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	ea4f 0232 	mov.w	r2, r2, rrx
 8005886:	1ab6      	subs	r6, r6, r2
 8005888:	eb65 0503 	sbc.w	r5, r5, r3
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800589a:	ebb6 0e02 	subs.w	lr, r6, r2
 800589e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80058a2:	bf22      	ittt	cs
 80058a4:	1ab6      	subcs	r6, r6, r2
 80058a6:	4675      	movcs	r5, lr
 80058a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80058b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80058b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80058ba:	bf22      	ittt	cs
 80058bc:	1ab6      	subcs	r6, r6, r2
 80058be:	4675      	movcs	r5, lr
 80058c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80058ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80058ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80058d2:	bf22      	ittt	cs
 80058d4:	1ab6      	subcs	r6, r6, r2
 80058d6:	4675      	movcs	r5, lr
 80058d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	ea4f 0232 	mov.w	r2, r2, rrx
 80058e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80058e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80058ea:	bf22      	ittt	cs
 80058ec:	1ab6      	subcs	r6, r6, r2
 80058ee:	4675      	movcs	r5, lr
 80058f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80058f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80058f8:	d018      	beq.n	800592c <__aeabi_ddiv+0x114>
 80058fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80058fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800590a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800590e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005916:	d1c0      	bne.n	800589a <__aeabi_ddiv+0x82>
 8005918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800591c:	d10b      	bne.n	8005936 <__aeabi_ddiv+0x11e>
 800591e:	ea41 0100 	orr.w	r1, r1, r0
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800592a:	e7b6      	b.n	800589a <__aeabi_ddiv+0x82>
 800592c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005930:	bf04      	itt	eq
 8005932:	4301      	orreq	r1, r0
 8005934:	2000      	moveq	r0, #0
 8005936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800593a:	bf88      	it	hi
 800593c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005940:	f63f aeaf 	bhi.w	80056a2 <__aeabi_dmul+0xde>
 8005944:	ebb5 0c03 	subs.w	ip, r5, r3
 8005948:	bf04      	itt	eq
 800594a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800594e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005952:	f150 0000 	adcs.w	r0, r0, #0
 8005956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005968:	bfc2      	ittt	gt
 800596a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800596e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005972:	bd70      	popgt	{r4, r5, r6, pc}
 8005974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005978:	f04f 0e00 	mov.w	lr, #0
 800597c:	3c01      	subs	r4, #1
 800597e:	e690      	b.n	80056a2 <__aeabi_dmul+0xde>
 8005980:	ea45 0e06 	orr.w	lr, r5, r6
 8005984:	e68d      	b.n	80056a2 <__aeabi_dmul+0xde>
 8005986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800598a:	ea94 0f0c 	teq	r4, ip
 800598e:	bf08      	it	eq
 8005990:	ea95 0f0c 	teqeq	r5, ip
 8005994:	f43f af3b 	beq.w	800580e <__aeabi_dmul+0x24a>
 8005998:	ea94 0f0c 	teq	r4, ip
 800599c:	d10a      	bne.n	80059b4 <__aeabi_ddiv+0x19c>
 800599e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80059a2:	f47f af34 	bne.w	800580e <__aeabi_dmul+0x24a>
 80059a6:	ea95 0f0c 	teq	r5, ip
 80059aa:	f47f af25 	bne.w	80057f8 <__aeabi_dmul+0x234>
 80059ae:	4610      	mov	r0, r2
 80059b0:	4619      	mov	r1, r3
 80059b2:	e72c      	b.n	800580e <__aeabi_dmul+0x24a>
 80059b4:	ea95 0f0c 	teq	r5, ip
 80059b8:	d106      	bne.n	80059c8 <__aeabi_ddiv+0x1b0>
 80059ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80059be:	f43f aefd 	beq.w	80057bc <__aeabi_dmul+0x1f8>
 80059c2:	4610      	mov	r0, r2
 80059c4:	4619      	mov	r1, r3
 80059c6:	e722      	b.n	800580e <__aeabi_dmul+0x24a>
 80059c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80059cc:	bf18      	it	ne
 80059ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80059d2:	f47f aec5 	bne.w	8005760 <__aeabi_dmul+0x19c>
 80059d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80059da:	f47f af0d 	bne.w	80057f8 <__aeabi_dmul+0x234>
 80059de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80059e2:	f47f aeeb 	bne.w	80057bc <__aeabi_dmul+0x1f8>
 80059e6:	e712      	b.n	800580e <__aeabi_dmul+0x24a>

080059e8 <__gedf2>:
 80059e8:	f04f 3cff 	mov.w	ip, #4294967295
 80059ec:	e006      	b.n	80059fc <__cmpdf2+0x4>
 80059ee:	bf00      	nop

080059f0 <__ledf2>:
 80059f0:	f04f 0c01 	mov.w	ip, #1
 80059f4:	e002      	b.n	80059fc <__cmpdf2+0x4>
 80059f6:	bf00      	nop

080059f8 <__cmpdf2>:
 80059f8:	f04f 0c01 	mov.w	ip, #1
 80059fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005a0c:	bf18      	it	ne
 8005a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005a12:	d01b      	beq.n	8005a4c <__cmpdf2+0x54>
 8005a14:	b001      	add	sp, #4
 8005a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005a1a:	bf0c      	ite	eq
 8005a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005a20:	ea91 0f03 	teqne	r1, r3
 8005a24:	bf02      	ittt	eq
 8005a26:	ea90 0f02 	teqeq	r0, r2
 8005a2a:	2000      	moveq	r0, #0
 8005a2c:	4770      	bxeq	lr
 8005a2e:	f110 0f00 	cmn.w	r0, #0
 8005a32:	ea91 0f03 	teq	r1, r3
 8005a36:	bf58      	it	pl
 8005a38:	4299      	cmppl	r1, r3
 8005a3a:	bf08      	it	eq
 8005a3c:	4290      	cmpeq	r0, r2
 8005a3e:	bf2c      	ite	cs
 8005a40:	17d8      	asrcs	r0, r3, #31
 8005a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005a46:	f040 0001 	orr.w	r0, r0, #1
 8005a4a:	4770      	bx	lr
 8005a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a54:	d102      	bne.n	8005a5c <__cmpdf2+0x64>
 8005a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005a5a:	d107      	bne.n	8005a6c <__cmpdf2+0x74>
 8005a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a64:	d1d6      	bne.n	8005a14 <__cmpdf2+0x1c>
 8005a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005a6a:	d0d3      	beq.n	8005a14 <__cmpdf2+0x1c>
 8005a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop

08005a74 <__aeabi_cdrcmple>:
 8005a74:	4684      	mov	ip, r0
 8005a76:	4610      	mov	r0, r2
 8005a78:	4662      	mov	r2, ip
 8005a7a:	468c      	mov	ip, r1
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4663      	mov	r3, ip
 8005a80:	e000      	b.n	8005a84 <__aeabi_cdcmpeq>
 8005a82:	bf00      	nop

08005a84 <__aeabi_cdcmpeq>:
 8005a84:	b501      	push	{r0, lr}
 8005a86:	f7ff ffb7 	bl	80059f8 <__cmpdf2>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	bf48      	it	mi
 8005a8e:	f110 0f00 	cmnmi.w	r0, #0
 8005a92:	bd01      	pop	{r0, pc}

08005a94 <__aeabi_dcmpeq>:
 8005a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005a98:	f7ff fff4 	bl	8005a84 <__aeabi_cdcmpeq>
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2001      	moveq	r0, #1
 8005aa0:	2000      	movne	r0, #0
 8005aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005aa6:	bf00      	nop

08005aa8 <__aeabi_dcmplt>:
 8005aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005aac:	f7ff ffea 	bl	8005a84 <__aeabi_cdcmpeq>
 8005ab0:	bf34      	ite	cc
 8005ab2:	2001      	movcc	r0, #1
 8005ab4:	2000      	movcs	r0, #0
 8005ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005aba:	bf00      	nop

08005abc <__aeabi_dcmple>:
 8005abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ac0:	f7ff ffe0 	bl	8005a84 <__aeabi_cdcmpeq>
 8005ac4:	bf94      	ite	ls
 8005ac6:	2001      	movls	r0, #1
 8005ac8:	2000      	movhi	r0, #0
 8005aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8005ace:	bf00      	nop

08005ad0 <__aeabi_dcmpge>:
 8005ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ad4:	f7ff ffce 	bl	8005a74 <__aeabi_cdrcmple>
 8005ad8:	bf94      	ite	ls
 8005ada:	2001      	movls	r0, #1
 8005adc:	2000      	movhi	r0, #0
 8005ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8005ae2:	bf00      	nop

08005ae4 <__aeabi_dcmpgt>:
 8005ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ae8:	f7ff ffc4 	bl	8005a74 <__aeabi_cdrcmple>
 8005aec:	bf34      	ite	cc
 8005aee:	2001      	movcc	r0, #1
 8005af0:	2000      	movcs	r0, #0
 8005af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005af6:	bf00      	nop

08005af8 <__aeabi_dcmpun>:
 8005af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005b00:	d102      	bne.n	8005b08 <__aeabi_dcmpun+0x10>
 8005b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005b06:	d10a      	bne.n	8005b1e <__aeabi_dcmpun+0x26>
 8005b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005b10:	d102      	bne.n	8005b18 <__aeabi_dcmpun+0x20>
 8005b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005b16:	d102      	bne.n	8005b1e <__aeabi_dcmpun+0x26>
 8005b18:	f04f 0000 	mov.w	r0, #0
 8005b1c:	4770      	bx	lr
 8005b1e:	f04f 0001 	mov.w	r0, #1
 8005b22:	4770      	bx	lr

08005b24 <__aeabi_d2iz>:
 8005b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005b2c:	d215      	bcs.n	8005b5a <__aeabi_d2iz+0x36>
 8005b2e:	d511      	bpl.n	8005b54 <__aeabi_d2iz+0x30>
 8005b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005b38:	d912      	bls.n	8005b60 <__aeabi_d2iz+0x3c>
 8005b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8005b4e:	bf18      	it	ne
 8005b50:	4240      	negne	r0, r0
 8005b52:	4770      	bx	lr
 8005b54:	f04f 0000 	mov.w	r0, #0
 8005b58:	4770      	bx	lr
 8005b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005b5e:	d105      	bne.n	8005b6c <__aeabi_d2iz+0x48>
 8005b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005b64:	bf08      	it	eq
 8005b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005b6a:	4770      	bx	lr
 8005b6c:	f04f 0000 	mov.w	r0, #0
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop

08005b74 <__aeabi_d2uiz>:
 8005b74:	004a      	lsls	r2, r1, #1
 8005b76:	d211      	bcs.n	8005b9c <__aeabi_d2uiz+0x28>
 8005b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005b7c:	d211      	bcs.n	8005ba2 <__aeabi_d2uiz+0x2e>
 8005b7e:	d50d      	bpl.n	8005b9c <__aeabi_d2uiz+0x28>
 8005b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005b88:	d40e      	bmi.n	8005ba8 <__aeabi_d2uiz+0x34>
 8005b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005b96:	fa23 f002 	lsr.w	r0, r3, r2
 8005b9a:	4770      	bx	lr
 8005b9c:	f04f 0000 	mov.w	r0, #0
 8005ba0:	4770      	bx	lr
 8005ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005ba6:	d102      	bne.n	8005bae <__aeabi_d2uiz+0x3a>
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bac:	4770      	bx	lr
 8005bae:	f04f 0000 	mov.w	r0, #0
 8005bb2:	4770      	bx	lr

08005bb4 <__aeabi_d2f>:
 8005bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005bbc:	bf24      	itt	cs
 8005bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005bc6:	d90d      	bls.n	8005be4 <__aeabi_d2f+0x30>
 8005bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005bdc:	bf08      	it	eq
 8005bde:	f020 0001 	biceq.w	r0, r0, #1
 8005be2:	4770      	bx	lr
 8005be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005be8:	d121      	bne.n	8005c2e <__aeabi_d2f+0x7a>
 8005bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005bee:	bfbc      	itt	lt
 8005bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005bf4:	4770      	bxlt	lr
 8005bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005bfe:	f1c2 0218 	rsb	r2, r2, #24
 8005c02:	f1c2 0c20 	rsb	ip, r2, #32
 8005c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8005c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8005c0e:	bf18      	it	ne
 8005c10:	f040 0001 	orrne.w	r0, r0, #1
 8005c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005c20:	ea40 000c 	orr.w	r0, r0, ip
 8005c24:	fa23 f302 	lsr.w	r3, r3, r2
 8005c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005c2c:	e7cc      	b.n	8005bc8 <__aeabi_d2f+0x14>
 8005c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005c32:	d107      	bne.n	8005c44 <__aeabi_d2f+0x90>
 8005c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005c38:	bf1e      	ittt	ne
 8005c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005c42:	4770      	bxne	lr
 8005c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop

08005c54 <__gesf2>:
 8005c54:	f04f 3cff 	mov.w	ip, #4294967295
 8005c58:	e006      	b.n	8005c68 <__cmpsf2+0x4>
 8005c5a:	bf00      	nop

08005c5c <__lesf2>:
 8005c5c:	f04f 0c01 	mov.w	ip, #1
 8005c60:	e002      	b.n	8005c68 <__cmpsf2+0x4>
 8005c62:	bf00      	nop

08005c64 <__cmpsf2>:
 8005c64:	f04f 0c01 	mov.w	ip, #1
 8005c68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005c6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005c70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005c74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005c78:	bf18      	it	ne
 8005c7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005c7e:	d011      	beq.n	8005ca4 <__cmpsf2+0x40>
 8005c80:	b001      	add	sp, #4
 8005c82:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005c86:	bf18      	it	ne
 8005c88:	ea90 0f01 	teqne	r0, r1
 8005c8c:	bf58      	it	pl
 8005c8e:	ebb2 0003 	subspl.w	r0, r2, r3
 8005c92:	bf88      	it	hi
 8005c94:	17c8      	asrhi	r0, r1, #31
 8005c96:	bf38      	it	cc
 8005c98:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005c9c:	bf18      	it	ne
 8005c9e:	f040 0001 	orrne.w	r0, r0, #1
 8005ca2:	4770      	bx	lr
 8005ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005ca8:	d102      	bne.n	8005cb0 <__cmpsf2+0x4c>
 8005caa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005cae:	d105      	bne.n	8005cbc <__cmpsf2+0x58>
 8005cb0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005cb4:	d1e4      	bne.n	8005c80 <__cmpsf2+0x1c>
 8005cb6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005cba:	d0e1      	beq.n	8005c80 <__cmpsf2+0x1c>
 8005cbc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop

08005cc4 <__aeabi_cfrcmple>:
 8005cc4:	4684      	mov	ip, r0
 8005cc6:	4608      	mov	r0, r1
 8005cc8:	4661      	mov	r1, ip
 8005cca:	e7ff      	b.n	8005ccc <__aeabi_cfcmpeq>

08005ccc <__aeabi_cfcmpeq>:
 8005ccc:	b50f      	push	{r0, r1, r2, r3, lr}
 8005cce:	f7ff ffc9 	bl	8005c64 <__cmpsf2>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	bf48      	it	mi
 8005cd6:	f110 0f00 	cmnmi.w	r0, #0
 8005cda:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005cdc <__aeabi_fcmpeq>:
 8005cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ce0:	f7ff fff4 	bl	8005ccc <__aeabi_cfcmpeq>
 8005ce4:	bf0c      	ite	eq
 8005ce6:	2001      	moveq	r0, #1
 8005ce8:	2000      	movne	r0, #0
 8005cea:	f85d fb08 	ldr.w	pc, [sp], #8
 8005cee:	bf00      	nop

08005cf0 <__aeabi_fcmplt>:
 8005cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005cf4:	f7ff ffea 	bl	8005ccc <__aeabi_cfcmpeq>
 8005cf8:	bf34      	ite	cc
 8005cfa:	2001      	movcc	r0, #1
 8005cfc:	2000      	movcs	r0, #0
 8005cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8005d02:	bf00      	nop

08005d04 <__aeabi_fcmple>:
 8005d04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005d08:	f7ff ffe0 	bl	8005ccc <__aeabi_cfcmpeq>
 8005d0c:	bf94      	ite	ls
 8005d0e:	2001      	movls	r0, #1
 8005d10:	2000      	movhi	r0, #0
 8005d12:	f85d fb08 	ldr.w	pc, [sp], #8
 8005d16:	bf00      	nop

08005d18 <__aeabi_fcmpge>:
 8005d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005d1c:	f7ff ffd2 	bl	8005cc4 <__aeabi_cfrcmple>
 8005d20:	bf94      	ite	ls
 8005d22:	2001      	movls	r0, #1
 8005d24:	2000      	movhi	r0, #0
 8005d26:	f85d fb08 	ldr.w	pc, [sp], #8
 8005d2a:	bf00      	nop

08005d2c <__aeabi_fcmpgt>:
 8005d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005d30:	f7ff ffc8 	bl	8005cc4 <__aeabi_cfrcmple>
 8005d34:	bf34      	ite	cc
 8005d36:	2001      	movcc	r0, #1
 8005d38:	2000      	movcs	r0, #0
 8005d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005d3e:	bf00      	nop

08005d40 <__aeabi_fcmpun>:
 8005d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005d44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005d48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005d4c:	d102      	bne.n	8005d54 <__aeabi_fcmpun+0x14>
 8005d4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005d52:	d108      	bne.n	8005d66 <__aeabi_fcmpun+0x26>
 8005d54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005d58:	d102      	bne.n	8005d60 <__aeabi_fcmpun+0x20>
 8005d5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005d5e:	d102      	bne.n	8005d66 <__aeabi_fcmpun+0x26>
 8005d60:	f04f 0000 	mov.w	r0, #0
 8005d64:	4770      	bx	lr
 8005d66:	f04f 0001 	mov.w	r0, #1
 8005d6a:	4770      	bx	lr

08005d6c <apInit>:
#include "ap.h"



void apInit(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);  // USB
 8005d70:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005d74:	2000      	movs	r0, #0
 8005d76:	f001 fbf3 	bl	8007560 <uartOpen>
  uartOpen(_DEF_UART2, 57600);  // UART1
 8005d7a:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005d7e:	2001      	movs	r0, #1
 8005d80:	f001 fbee 	bl	8007560 <uartOpen>

  cliOpen(_DEF_UART1, 57600);
 8005d84:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005d88:	2000      	movs	r0, #0
 8005d8a:	f000 faef 	bl	800636c <cliOpen>
  cliOpenLog(_DEF_UART2, 57600);
 8005d8e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005d92:	2001      	movs	r0, #1
 8005d94:	f000 fb08 	bl	80063a8 <cliOpenLog>
}
 8005d98:	bf00      	nop
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <apMain>:

void apMain(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8005da2:	f000 f876 	bl	8005e92 <millis>
 8005da6:	6078      	str	r0, [r7, #4]

  while(1)
  {
    if(millis()-pre_time >= 500)
 8005da8:	f000 f873 	bl	8005e92 <millis>
 8005dac:	4602      	mov	r2, r0
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005db6:	d305      	bcc.n	8005dc4 <apMain+0x28>
    {
      pre_time = millis();
 8005db8:	f000 f86b 	bl	8005e92 <millis>
 8005dbc:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED3);
 8005dbe:	2002      	movs	r0, #2
 8005dc0:	f001 faa8 	bl	8007314 <ledToggle>
    }

    if (uartAvailable(_DEF_UART2) > 0)
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	f001 fc61 	bl	800768c <uartAvailable>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <apMain+0x4a>
    {
      uint8_t rx_data;
      rx_data = uartRead(_DEF_UART2);
 8005dd0:	2001      	movs	r0, #1
 8005dd2:	f001 fc8d 	bl	80076f0 <uartRead>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	70fb      	strb	r3, [r7, #3]

      uartPrintf(_DEF_UART2, "Rx : 0x%X\n", rx_data);
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4903      	ldr	r1, [pc, #12]	; (8005dec <apMain+0x50>)
 8005de0:	2001      	movs	r0, #1
 8005de2:	f001 fcd3 	bl	800778c <uartPrintf>
    }

    cliMain();
 8005de6:	f000 fb99 	bl	800651c <cliMain>
    if(millis()-pre_time >= 500)
 8005dea:	e7dd      	b.n	8005da8 <apMain+0xc>
 8005dec:	08010960 	.word	0x08010960

08005df0 <bspInit>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


void bspInit(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
  HAL_Init();
 8005df6:	f001 fde5 	bl	80079c4 <HAL_Init>
  SystemClock_Config();
 8005dfa:	f000 f851 	bl	8005ea0 <SystemClock_Config>

  MX_GPIO_Init();
 8005dfe:	f000 f8b1 	bl	8005f64 <MX_GPIO_Init>


  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e02:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <bspInit+0x84>)
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	4a1b      	ldr	r2, [pc, #108]	; (8005e74 <bspInit+0x84>)
 8005e08:	f043 0320 	orr.w	r3, r3, #32
 8005e0c:	6193      	str	r3, [r2, #24]
 8005e0e:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <bspInit+0x84>)
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e1a:	4b16      	ldr	r3, [pc, #88]	; (8005e74 <bspInit+0x84>)
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <bspInit+0x84>)
 8005e20:	f043 0304 	orr.w	r3, r3, #4
 8005e24:	6193      	str	r3, [r2, #24]
 8005e26:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <bspInit+0x84>)
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e32:	f107 0308 	add.w	r3, r7, #8
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	605a      	str	r2, [r3, #4]
 8005e3c:	609a      	str	r2, [r3, #8]
 8005e3e:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005e46:	2311      	movs	r3, #17
 8005e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e4e:	2302      	movs	r3, #2
 8005e50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e52:	f107 0308 	add.w	r3, r7, #8
 8005e56:	4619      	mov	r1, r3
 8005e58:	4807      	ldr	r0, [pc, #28]	; (8005e78 <bspInit+0x88>)
 8005e5a:	f002 fc29 	bl	80086b0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e64:	4804      	ldr	r0, [pc, #16]	; (8005e78 <bspInit+0x88>)
 8005e66:	f002 fe63 	bl	8008b30 <HAL_GPIO_WritePin>

}
 8005e6a:	bf00      	nop
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	40021000 	.word	0x40021000
 8005e78:	40010800 	.word	0x40010800

08005e7c <delay>:

void delay(uint32_t ms)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f001 fdff 	bl	8007a88 <HAL_Delay>
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <millis>:

uint32_t millis(void)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005e96:	f001 fded 	bl	8007a74 <HAL_GetTick>
 8005e9a:	4603      	mov	r3, r0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b096      	sub	sp, #88	; 0x58
 8005ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ea6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005eaa:	2228      	movs	r2, #40	; 0x28
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f008 fa6c 	bl	800e38c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005eb4:	f107 031c 	add.w	r3, r7, #28
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	609a      	str	r2, [r3, #8]
 8005ec0:	60da      	str	r2, [r3, #12]
 8005ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ec4:	1d3b      	adds	r3, r7, #4
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	605a      	str	r2, [r3, #4]
 8005ecc:	609a      	str	r2, [r3, #8]
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	611a      	str	r2, [r3, #16]
 8005ed2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8005ed4:	2305      	movs	r3, #5
 8005ed6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005eea:	2302      	movs	r3, #2
 8005eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ef2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005ef4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005ef8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005efa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005efe:	4618      	mov	r0, r3
 8005f00:	f003 fd9e 	bl	8009a40 <HAL_RCC_OscConfig>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8005f0a:	f000 f86b 	bl	8005fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f0e:	230f      	movs	r3, #15
 8005f10:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f12:	2302      	movs	r3, #2
 8005f14:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f20:	2300      	movs	r3, #0
 8005f22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005f24:	f107 031c 	add.w	r3, r7, #28
 8005f28:	2102      	movs	r1, #2
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f003 ffec 	bl	8009f08 <HAL_RCC_ClockConfig>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005f36:	f000 f855 	bl	8005fe4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8005f3a:	2311      	movs	r3, #17
 8005f3c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f42:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005f44:	2300      	movs	r3, #0
 8005f46:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f48:	1d3b      	adds	r3, r7, #4
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f004 f99a 	bl	800a284 <HAL_RCCEx_PeriphCLKConfig>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005f56:	f000 f845 	bl	8005fe4 <Error_Handler>
  }
}
 8005f5a:	bf00      	nop
 8005f5c:	3758      	adds	r7, #88	; 0x58
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f6a:	f107 0308 	add.w	r3, r7, #8
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	605a      	str	r2, [r3, #4]
 8005f74:	609a      	str	r2, [r3, #8]
 8005f76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f78:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <MX_GPIO_Init+0x78>)
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	4a17      	ldr	r2, [pc, #92]	; (8005fdc <MX_GPIO_Init+0x78>)
 8005f7e:	f043 0308 	orr.w	r3, r3, #8
 8005f82:	6193      	str	r3, [r2, #24]
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <MX_GPIO_Init+0x78>)
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	607b      	str	r3, [r7, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f90:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <MX_GPIO_Init+0x78>)
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	4a11      	ldr	r2, [pc, #68]	; (8005fdc <MX_GPIO_Init+0x78>)
 8005f96:	f043 0304 	orr.w	r3, r3, #4
 8005f9a:	6193      	str	r3, [r2, #24]
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <MX_GPIO_Init+0x78>)
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005fae:	480c      	ldr	r0, [pc, #48]	; (8005fe0 <MX_GPIO_Init+0x7c>)
 8005fb0:	f002 fdbe 	bl	8008b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8005fb4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005fb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fc6:	f107 0308 	add.w	r3, r7, #8
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4804      	ldr	r0, [pc, #16]	; (8005fe0 <MX_GPIO_Init+0x7c>)
 8005fce:	f002 fb6f 	bl	80086b0 <HAL_GPIO_Init>
}
 8005fd2:	bf00      	nop
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40010c00 	.word	0x40010c00

08005fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005fe8:	bf00      	nop
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bc80      	pop	{r7}
 8005fee:	4770      	bx	lr

08005ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005ff6:	4b15      	ldr	r3, [pc, #84]	; (800604c <HAL_MspInit+0x5c>)
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	4a14      	ldr	r2, [pc, #80]	; (800604c <HAL_MspInit+0x5c>)
 8005ffc:	f043 0301 	orr.w	r3, r3, #1
 8006000:	6193      	str	r3, [r2, #24]
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <HAL_MspInit+0x5c>)
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	60bb      	str	r3, [r7, #8]
 800600c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800600e:	4b0f      	ldr	r3, [pc, #60]	; (800604c <HAL_MspInit+0x5c>)
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	4a0e      	ldr	r2, [pc, #56]	; (800604c <HAL_MspInit+0x5c>)
 8006014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006018:	61d3      	str	r3, [r2, #28]
 800601a:	4b0c      	ldr	r3, [pc, #48]	; (800604c <HAL_MspInit+0x5c>)
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006022:	607b      	str	r3, [r7, #4]
 8006024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <HAL_MspInit+0x60>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	4a04      	ldr	r2, [pc, #16]	; (8006050 <HAL_MspInit+0x60>)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr
 800604c:	40021000 	.word	0x40021000
 8006050:	40010000 	.word	0x40010000

08006054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr

08006060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006064:	e7fe      	b.n	8006064 <HardFault_Handler+0x4>

08006066 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006066:	b480      	push	{r7}
 8006068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800606a:	e7fe      	b.n	800606a <MemManage_Handler+0x4>

0800606c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006070:	e7fe      	b.n	8006070 <BusFault_Handler+0x4>

08006072 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006072:	b480      	push	{r7}
 8006074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006076:	e7fe      	b.n	8006076 <UsageFault_Handler+0x4>

08006078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr

08006084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006088:	bf00      	nop
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr

08006090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060a0:	f001 fcd6 	bl	8007a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060a4:	bf00      	nop
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80060ac:	4802      	ldr	r0, [pc, #8]	; (80060b8 <DMA1_Channel5_IRQHandler+0x10>)
 80060ae:	f002 f895 	bl	80081dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80060b2:	bf00      	nop
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	200012ac 	.word	0x200012ac

080060bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80060c0:	4802      	ldr	r0, [pc, #8]	; (80060cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80060c2:	f002 fe5e 	bl	8008d82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80060c6:	bf00      	nop
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20002128 	.word	0x20002128

080060d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80060d4:	4802      	ldr	r0, [pc, #8]	; (80060e0 <USART1_IRQHandler+0x10>)
 80060d6:	f004 fd49 	bl	800ab6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80060da:	bf00      	nop
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	200012f0 	.word	0x200012f0

080060e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80060ec:	4b11      	ldr	r3, [pc, #68]	; (8006134 <_sbrk+0x50>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d102      	bne.n	80060fa <_sbrk+0x16>
		heap_end = &end;
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <_sbrk+0x50>)
 80060f6:	4a10      	ldr	r2, [pc, #64]	; (8006138 <_sbrk+0x54>)
 80060f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80060fa:	4b0e      	ldr	r3, [pc, #56]	; (8006134 <_sbrk+0x50>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006100:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <_sbrk+0x50>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4413      	add	r3, r2
 8006108:	466a      	mov	r2, sp
 800610a:	4293      	cmp	r3, r2
 800610c:	d907      	bls.n	800611e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800610e:	f008 f913 	bl	800e338 <__errno>
 8006112:	4602      	mov	r2, r0
 8006114:	230c      	movs	r3, #12
 8006116:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006118:	f04f 33ff 	mov.w	r3, #4294967295
 800611c:	e006      	b.n	800612c <_sbrk+0x48>
	}

	heap_end += incr;
 800611e:	4b05      	ldr	r3, [pc, #20]	; (8006134 <_sbrk+0x50>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4413      	add	r3, r2
 8006126:	4a03      	ldr	r2, [pc, #12]	; (8006134 <_sbrk+0x50>)
 8006128:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000390 	.word	0x20000390
 8006138:	20002590 	.word	0x20002590

0800613c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006140:	4b15      	ldr	r3, [pc, #84]	; (8006198 <SystemInit+0x5c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a14      	ldr	r2, [pc, #80]	; (8006198 <SystemInit+0x5c>)
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800614c:	4b12      	ldr	r3, [pc, #72]	; (8006198 <SystemInit+0x5c>)
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	4911      	ldr	r1, [pc, #68]	; (8006198 <SystemInit+0x5c>)
 8006152:	4b12      	ldr	r3, [pc, #72]	; (800619c <SystemInit+0x60>)
 8006154:	4013      	ands	r3, r2
 8006156:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006158:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <SystemInit+0x5c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a0e      	ldr	r2, [pc, #56]	; (8006198 <SystemInit+0x5c>)
 800615e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006166:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <SystemInit+0x5c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a0a      	ldr	r2, [pc, #40]	; (8006198 <SystemInit+0x5c>)
 800616e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006172:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006174:	4b08      	ldr	r3, [pc, #32]	; (8006198 <SystemInit+0x5c>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4a07      	ldr	r2, [pc, #28]	; (8006198 <SystemInit+0x5c>)
 800617a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800617e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006180:	4b05      	ldr	r3, [pc, #20]	; (8006198 <SystemInit+0x5c>)
 8006182:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006186:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <SystemInit+0x64>)
 800618a:	4a06      	ldr	r2, [pc, #24]	; (80061a4 <SystemInit+0x68>)
 800618c:	609a      	str	r2, [r3, #8]
#endif 
}
 800618e:	bf00      	nop
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40021000 	.word	0x40021000
 800619c:	f8ff0000 	.word	0xf8ff0000
 80061a0:	e000ed00 	.word	0xe000ed00
 80061a4:	08005000 	.word	0x08005000

080061a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80061a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80061aa:	e003      	b.n	80061b4 <LoopCopyDataInit>

080061ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80061ac:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80061ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80061b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80061b2:	3104      	adds	r1, #4

080061b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80061b4:	480a      	ldr	r0, [pc, #40]	; (80061e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80061b6:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80061b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80061ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80061bc:	d3f6      	bcc.n	80061ac <CopyDataInit>
  ldr r2, =_sbss
 80061be:	4a0a      	ldr	r2, [pc, #40]	; (80061e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80061c0:	e002      	b.n	80061c8 <LoopFillZerobss>

080061c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80061c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80061c4:	f842 3b04 	str.w	r3, [r2], #4

080061c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80061c8:	4b08      	ldr	r3, [pc, #32]	; (80061ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80061ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80061cc:	d3f9      	bcc.n	80061c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80061ce:	f7ff ffb5 	bl	800613c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061d2:	f008 f8b7 	bl	800e344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80061d6:	f008 f8a3 	bl	800e320 <main>
  bx lr
 80061da:	4770      	bx	lr
  ldr r3, =_sidata
 80061dc:	08010e28 	.word	0x08010e28
  ldr r0, =_sdata
 80061e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80061e4:	20000374 	.word	0x20000374
  ldr r2, =_sbss
 80061e8:	20000374 	.word	0x20000374
  ldr r3, = _ebss
 80061ec:	2000258c 	.word	0x2000258c

080061f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80061f0:	e7fe      	b.n	80061f0 <ADC1_2_IRQHandler>

080061f2 <qbufferCreate>:
#include "qbuffer.h"



bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b087      	sub	sp, #28
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
  bool ret    = true;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]

  p_node->in  = 0;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	60da      	str	r2, [r3, #12]
    p_node->len = 0;
    p_node->p_buf = NULL;
    ret = false;
  }
#endif
  return ret;
 800621a:	7dfb      	ldrb	r3, [r7, #23]
}
 800621c:	4618      	mov	r0, r3
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr

08006226 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8006226:	b480      	push	{r7}
 8006228:	b087      	sub	sp, #28
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8006232:	2301      	movs	r3, #1
 8006234:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	e026      	b.n	800628a <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	441a      	add	r2, r3
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	440b      	add	r3, r1
 8006254:	7812      	ldrb	r2, [r2, #0]
 8006256:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d00c      	beq.n	800627e <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	3301      	adds	r3, #1
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	6892      	ldr	r2, [r2, #8]
 800626e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006272:	fb02 f201 	mul.w	r2, r2, r1
 8006276:	1a9a      	subs	r2, r3, r2
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	605a      	str	r2, [r3, #4]
 800627c:	e002      	b.n	8006284 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 800627e:	2300      	movs	r3, #0
 8006280:	75fb      	strb	r3, [r7, #23]
      break;
 8006282:	e006      	b.n	8006292 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	3301      	adds	r3, #1
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	429a      	cmp	r2, r3
 8006290:	d8d4      	bhi.n	800623c <qbufferRead+0x16>
    }
  }

  return ret;
 8006292:	7dfb      	ldrb	r3, [r7, #23]
}
 8006294:	4618      	mov	r0, r3
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	bc80      	pop	{r7}
 800629c:	4770      	bx	lr

0800629e <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800629e:	b480      	push	{r7}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;  // + p_node->len **
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	441a      	add	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6892      	ldr	r2, [r2, #8]
 80062ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80062be:	fb02 f201 	mul.w	r2, r2, r1
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  return ret;
 80062c6:	68fb      	ldr	r3, [r7, #12]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr
	...

080062d4 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80062d8:	4b1b      	ldr	r3, [pc, #108]	; (8006348 <cliInit+0x74>)
 80062da:	2200      	movs	r2, #0
 80062dc:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80062de:	4b1a      	ldr	r3, [pc, #104]	; (8006348 <cliInit+0x74>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80062e4:	4b18      	ldr	r3, [pc, #96]	; (8006348 <cliInit+0x74>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80062ea:	4b17      	ldr	r3, [pc, #92]	; (8006348 <cliInit+0x74>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <cliInit+0x74>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80062fa:	4b13      	ldr	r3, [pc, #76]	; (8006348 <cliInit+0x74>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8006302:	4b11      	ldr	r3, [pc, #68]	; (8006348 <cliInit+0x74>)
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800630a:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <cliInit+0x74>)
 800630c:	4a0f      	ldr	r2, [pc, #60]	; (800634c <cliInit+0x78>)
 800630e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8006312:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <cliInit+0x74>)
 8006314:	4a0e      	ldr	r2, [pc, #56]	; (8006350 <cliInit+0x7c>)
 8006316:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <cliInit+0x74>)
 800631c:	4a0d      	ldr	r2, [pc, #52]	; (8006354 <cliInit+0x80>)
 800631e:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <cliInit+0x74>)
 8006324:	4a0c      	ldr	r2, [pc, #48]	; (8006358 <cliInit+0x84>)
 8006326:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 800632a:	4807      	ldr	r0, [pc, #28]	; (8006348 <cliInit+0x74>)
 800632c:	f000 fb7c 	bl	8006a28 <cliLineClean>


  cliAdd("help", cliShowList);
 8006330:	490a      	ldr	r1, [pc, #40]	; (800635c <cliInit+0x88>)
 8006332:	480b      	ldr	r0, [pc, #44]	; (8006360 <cliInit+0x8c>)
 8006334:	f000 fe2c 	bl	8006f90 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8006338:	490a      	ldr	r1, [pc, #40]	; (8006364 <cliInit+0x90>)
 800633a:	480b      	ldr	r0, [pc, #44]	; (8006368 <cliInit+0x94>)
 800633c:	f000 fe28 	bl	8006f90 <cliAdd>

  return true;
 8006340:	2301      	movs	r3, #1
}
 8006342:	4618      	mov	r0, r3
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000ef4 	.word	0x20000ef4
 800634c:	08006e2d 	.word	0x08006e2d
 8006350:	08006e7d 	.word	0x08006e7d
 8006354:	08006ecd 	.word	0x08006ecd
 8006358:	08006f11 	.word	0x08006f11
 800635c:	08007025 	.word	0x08007025
 8006360:	0801096c 	.word	0x0801096c
 8006364:	08007095 	.word	0x08007095
 8006368:	08010974 	.word	0x08010974

0800636c <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	4603      	mov	r3, r0
 8006374:	6039      	str	r1, [r7, #0]
 8006376:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8006378:	4a0a      	ldr	r2, [pc, #40]	; (80063a4 <cliOpen+0x38>)
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800637e:	4a09      	ldr	r2, [pc, #36]	; (80063a4 <cliOpen+0x38>)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	4618      	mov	r0, r3
 800638a:	f001 f8e9 	bl	8007560 <uartOpen>
 800638e:	4603      	mov	r3, r0
 8006390:	461a      	mov	r2, r3
 8006392:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <cliOpen+0x38>)
 8006394:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8006396:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <cliOpen+0x38>)
 8006398:	7a1b      	ldrb	r3, [r3, #8]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000ef4 	.word	0x20000ef4

080063a8 <cliOpenLog>:

bool cliOpenLog(uint8_t ch, uint32_t baud)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	6039      	str	r1, [r7, #0]
 80063b2:	71fb      	strb	r3, [r7, #7]
  bool ret;

  cli_node.log_ch = ch;
 80063b4:	4a0b      	ldr	r2, [pc, #44]	; (80063e4 <cliOpenLog+0x3c>)
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	7293      	strb	r3, [r2, #10]
  cli_node.log_baud = baud;
 80063ba:	4a0a      	ldr	r2, [pc, #40]	; (80063e4 <cliOpenLog+0x3c>)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	60d3      	str	r3, [r2, #12]

  ret = uartOpen(ch, baud);
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 f8cb 	bl	8007560 <uartOpen>
 80063ca:	4603      	mov	r3, r0
 80063cc:	73fb      	strb	r3, [r7, #15]

  if (ret == true)
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <cliOpenLog+0x32>
  {
    cli_node.is_log = true;
 80063d4:	4b03      	ldr	r3, [pc, #12]	; (80063e4 <cliOpenLog+0x3c>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	725a      	strb	r2, [r3, #9]
  }
  return ret;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	20000ef4 	.word	0x20000ef4

080063e8 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 80063f0:	4b34      	ldr	r3, [pc, #208]	; (80064c4 <cliShowLog+0xdc>)
 80063f2:	7a5b      	ldrb	r3, [r3, #9]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d061      	beq.n	80064bc <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	7a98      	ldrb	r0, [r3, #10]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8006402:	461a      	mov	r2, r3
 8006404:	4930      	ldr	r1, [pc, #192]	; (80064c8 <cliShowLog+0xe0>)
 8006406:	f001 f9c1 	bl	800778c <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7a98      	ldrb	r0, [r3, #10]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8006414:	461a      	mov	r2, r3
 8006416:	492d      	ldr	r1, [pc, #180]	; (80064cc <cliShowLog+0xe4>)
 8006418:	f001 f9b8 	bl	800778c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	7a98      	ldrb	r0, [r3, #10]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8006426:	461a      	mov	r2, r3
 8006428:	4929      	ldr	r1, [pc, #164]	; (80064d0 <cliShowLog+0xe8>)
 800642a:	f001 f9af 	bl	800778c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	7a98      	ldrb	r0, [r3, #10]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006438:	461a      	mov	r2, r3
 800643a:	4926      	ldr	r1, [pc, #152]	; (80064d4 <cliShowLog+0xec>)
 800643c:	f001 f9a6 	bl	800778c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	7a98      	ldrb	r0, [r3, #10]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800644a:	461a      	mov	r2, r3
 800644c:	4922      	ldr	r1, [pc, #136]	; (80064d8 <cliShowLog+0xf0>)
 800644e:	f001 f99d 	bl	800778c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	7a98      	ldrb	r0, [r3, #10]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800645c:	461a      	mov	r2, r3
 800645e:	491f      	ldr	r1, [pc, #124]	; (80064dc <cliShowLog+0xf4>)
 8006460:	f001 f994 	bl	800778c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	7a98      	ldrb	r0, [r3, #10]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800646e:	461a      	mov	r2, r3
 8006470:	491b      	ldr	r1, [pc, #108]	; (80064e0 <cliShowLog+0xf8>)
 8006472:	f001 f98b 	bl	800778c <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e012      	b.n	80064a2 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	7a98      	ldrb	r0, [r3, #10]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	00da      	lsls	r2, r3, #3
 800648a:	1ad2      	subs	r2, r2, r3
 800648c:	f502 73cc 	add.w	r3, r2, #408	; 0x198
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	4413      	add	r3, r2
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4913      	ldr	r1, [pc, #76]	; (80064e4 <cliShowLog+0xfc>)
 8006498:	f001 f978 	bl	800778c <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3301      	adds	r3, #1
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80064a8:	461a      	mov	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4293      	cmp	r3, r2
 80064ae:	dbe5      	blt.n	800647c <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	7a9b      	ldrb	r3, [r3, #10]
 80064b4:	490c      	ldr	r1, [pc, #48]	; (80064e8 <cliShowLog+0x100>)
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 f968 	bl	800778c <uartPrintf>
  }
}
 80064bc:	bf00      	nop
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000ef4 	.word	0x20000ef4
 80064c8:	08010978 	.word	0x08010978
 80064cc:	08010988 	.word	0x08010988
 80064d0:	08010998 	.word	0x08010998
 80064d4:	080109a8 	.word	0x080109a8
 80064d8:	080109b8 	.word	0x080109b8
 80064dc:	080109c8 	.word	0x080109c8
 80064e0:	080109d8 	.word	0x080109d8
 80064e4:	080109e8 	.word	0x080109e8
 80064e8:	080109f8 	.word	0x080109f8

080064ec <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	4906      	ldr	r1, [pc, #24]	; (8006514 <cliShowPrompt+0x28>)
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 f946 	bl	800778c <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	4904      	ldr	r1, [pc, #16]	; (8006518 <cliShowPrompt+0x2c>)
 8006506:	4618      	mov	r0, r3
 8006508:	f001 f940 	bl	800778c <uartPrintf>
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	080109fc 	.word	0x080109fc
 8006518:	08010a00 	.word	0x08010a00

0800651c <cliMain>:

bool cliMain(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8006520:	4b0e      	ldr	r3, [pc, #56]	; (800655c <cliMain+0x40>)
 8006522:	7a1b      	ldrb	r3, [r3, #8]
 8006524:	f083 0301 	eor.w	r3, r3, #1
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <cliMain+0x16>
  {
    return false;
 800652e:	2300      	movs	r3, #0
 8006530:	e012      	b.n	8006558 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8006532:	4b0a      	ldr	r3, [pc, #40]	; (800655c <cliMain+0x40>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f001 f8a8 	bl	800768c <uartAvailable>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8006542:	4b06      	ldr	r3, [pc, #24]	; (800655c <cliMain+0x40>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f001 f8d2 	bl	80076f0 <uartRead>
 800654c:	4603      	mov	r3, r0
 800654e:	4619      	mov	r1, r3
 8006550:	4802      	ldr	r0, [pc, #8]	; (800655c <cliMain+0x40>)
 8006552:	f000 f805 	bl	8006560 <cliUpdate>
  }

  return true;
 8006556:	2301      	movs	r3, #1
}
 8006558:	4618      	mov	r0, r3
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20000ef4 	.word	0x20000ef4

08006560 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	; 0x30
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 800656c:	2300      	movs	r3, #0
 800656e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006578:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	7c1b      	ldrb	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f040 8165 	bne.w	800684e <cliUpdate+0x2ee>
  {
    switch(rx_data)
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	2b0d      	cmp	r3, #13
 8006588:	d009      	beq.n	800659e <cliUpdate+0x3e>
 800658a:	2b0d      	cmp	r3, #13
 800658c:	dc02      	bgt.n	8006594 <cliUpdate+0x34>
 800658e:	2b08      	cmp	r3, #8
 8006590:	d065      	beq.n	800665e <cliUpdate+0xfe>
 8006592:	e0d4      	b.n	800673e <cliUpdate+0x1de>
 8006594:	2b1b      	cmp	r3, #27
 8006596:	d01c      	beq.n	80065d2 <cliUpdate+0x72>
 8006598:	2b7f      	cmp	r3, #127	; 0x7f
 800659a:	d01e      	beq.n	80065da <cliUpdate+0x7a>
 800659c:	e0cf      	b.n	800673e <cliUpdate+0x1de>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <cliUpdate+0x54>
        {
          cliLineAdd(p_cli);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa56 	bl	8006a5a <cliLineAdd>
          cliRunCmd(p_cli);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fb42 	bl	8006c38 <cliRunCmd>
        }

        line->count = 0;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff ff8e 	bl	80064ec <cliShowPrompt>
        break;
 80065d0:	e144      	b.n	800685c <cliUpdate+0x2fc>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	741a      	strb	r2, [r3, #16]
        break;
 80065d8:	e140      	b.n	800685c <cliUpdate+0x2fc>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80065e6:	429a      	cmp	r2, r3
 80065e8:	f080 8133 	bcs.w	8006852 <cliUpdate+0x2f2>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 80065fc:	2301      	movs	r3, #1
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006600:	e013      	b.n	800662a <cliUpdate+0xca>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006608:	461a      	mov	r2, r3
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	441a      	add	r2, r3
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006614:	4619      	mov	r1, r3
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	440b      	add	r3, r1
 800661a:	3b01      	subs	r3, #1
 800661c:	69f9      	ldr	r1, [r7, #28]
 800661e:	5c89      	ldrb	r1, [r1, r2]
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	3301      	adds	r3, #1
 8006628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800662a:	7efb      	ldrb	r3, [r7, #27]
 800662c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800662e:	429a      	cmp	r2, r3
 8006630:	dbe7      	blt.n	8006602 <cliUpdate+0xa2>
          }

          line->count--;
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006638:	3b01      	subs	r3, #1
 800663a:	b2da      	uxtb	r2, r3
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006648:	461a      	mov	r2, r3
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	2100      	movs	r1, #0
 800664e:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	498e      	ldr	r1, [pc, #568]	; (8006890 <cliUpdate+0x330>)
 8006656:	4618      	mov	r0, r3
 8006658:	f001 f898 	bl	800778c <uartPrintf>
        }
        break;
 800665c:	e0f9      	b.n	8006852 <cliUpdate+0x2f2>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006664:	2b00      	cmp	r3, #0
 8006666:	d055      	beq.n	8006714 <cliUpdate+0x1b4>
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800666e:	2b00      	cmp	r3, #0
 8006670:	d050      	beq.n	8006714 <cliUpdate+0x1b4>
        {
          if (line->cursor == line->count)
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800667e:	429a      	cmp	r2, r3
 8006680:	d10e      	bne.n	80066a0 <cliUpdate+0x140>
          {
            line->count--;
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006688:	3b01      	subs	r3, #1
 800668a:	b2da      	uxtb	r2, r3
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006698:	461a      	mov	r2, r3
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	2100      	movs	r1, #0
 800669e:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d231      	bcs.n	8006714 <cliUpdate+0x1b4>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 80066c0:	2300      	movs	r3, #0
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c4:	e013      	b.n	80066ee <cliUpdate+0x18e>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066cc:	461a      	mov	r2, r3
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	441a      	add	r2, r3
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066d8:	4619      	mov	r1, r3
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	440b      	add	r3, r1
 80066de:	3b01      	subs	r3, #1
 80066e0:	69f9      	ldr	r1, [r7, #28]
 80066e2:	5c89      	ldrb	r1, [r1, r2]
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	3301      	adds	r3, #1
 80066ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ee:	7ebb      	ldrb	r3, [r7, #26]
 80066f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f2:	429a      	cmp	r2, r3
 80066f4:	dbe7      	blt.n	80066c6 <cliUpdate+0x166>
            }

            line->count--;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800670c:	461a      	mov	r2, r3
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	2100      	movs	r1, #0
 8006712:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 809b 	beq.w	8006856 <cliUpdate+0x2f6>
        {
          line->cursor--;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006726:	3b01      	subs	r3, #1
 8006728:	b2da      	uxtb	r2, r3
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	4957      	ldr	r1, [pc, #348]	; (8006894 <cliUpdate+0x334>)
 8006736:	4618      	mov	r0, r3
 8006738:	f001 f828 	bl	800778c <uartPrintf>
        }
        break;
 800673c:	e08b      	b.n	8006856 <cliUpdate+0x2f6>


      default:
        if ((line->count + 1) < line->buf_len)
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006744:	3301      	adds	r3, #1
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	f892 2020 	ldrb.w	r2, [r2, #32]
 800674c:	4293      	cmp	r3, r2
 800674e:	f280 8084 	bge.w	800685a <cliUpdate+0x2fa>
        {
          if (line->cursor == line->count)
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800675e:	429a      	cmp	r2, r3
 8006760:	d124      	bne.n	80067ac <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	1cf9      	adds	r1, r7, #3
 8006768:	2201      	movs	r2, #1
 800676a:	4618      	mov	r0, r3
 800676c:	f000 ffe2 	bl	8007734 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006776:	461a      	mov	r2, r3
 8006778:	78f9      	ldrb	r1, [r7, #3]
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	5499      	strb	r1, [r3, r2]
            line->count++;
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006784:	3301      	adds	r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006794:	3301      	adds	r3, #1
 8006796:	b2da      	uxtb	r2, r3
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80067a4:	461a      	mov	r2, r3
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2100      	movs	r1, #0
 80067aa:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d24e      	bcs.n	800685a <cliUpdate+0x2fa>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 80067cc:	2300      	movs	r3, #0
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
 80067d0:	e013      	b.n	80067fa <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80067d8:	461a      	mov	r2, r3
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	1e5a      	subs	r2, r3, #1
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80067e6:	4619      	mov	r1, r3
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	1acb      	subs	r3, r1, r3
 80067ec:	69f9      	ldr	r1, [r7, #28]
 80067ee:	5c89      	ldrb	r1, [r1, r2]
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	3301      	adds	r3, #1
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
 80067fa:	7e7b      	ldrb	r3, [r7, #25]
 80067fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fe:	429a      	cmp	r2, r3
 8006800:	dbe7      	blt.n	80067d2 <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006808:	461a      	mov	r2, r3
 800680a:	78f9      	ldrb	r1, [r7, #3]
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	5499      	strb	r1, [r3, r2]
            line->count++;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006816:	3301      	adds	r3, #1
 8006818:	b2da      	uxtb	r2, r3
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006826:	3301      	adds	r3, #1
 8006828:	b2da      	uxtb	r2, r3
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006836:	461a      	mov	r2, r3
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	2100      	movs	r1, #0
 800683c:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	78fa      	ldrb	r2, [r7, #3]
 8006844:	4914      	ldr	r1, [pc, #80]	; (8006898 <cliUpdate+0x338>)
 8006846:	4618      	mov	r0, r3
 8006848:	f000 ffa0 	bl	800778c <uartPrintf>
          }
        }
        break;
 800684c:	e005      	b.n	800685a <cliUpdate+0x2fa>
    }
  }
 800684e:	bf00      	nop
 8006850:	e004      	b.n	800685c <cliUpdate+0x2fc>
        break;
 8006852:	bf00      	nop
 8006854:	e002      	b.n	800685c <cliUpdate+0x2fc>
        break;
 8006856:	bf00      	nop
 8006858:	e000      	b.n	800685c <cliUpdate+0x2fc>
        break;
 800685a:	bf00      	nop

  switch(p_cli->state)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	7c1b      	ldrb	r3, [r3, #16]
 8006860:	3b01      	subs	r3, #1
 8006862:	2b03      	cmp	r3, #3
 8006864:	f200 80d3 	bhi.w	8006a0e <cliUpdate+0x4ae>
 8006868:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <cliUpdate+0x310>)
 800686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686e:	bf00      	nop
 8006870:	08006881 	.word	0x08006881
 8006874:	08006889 	.word	0x08006889
 8006878:	0800689d 	.word	0x0800689d
 800687c:	08006a05 	.word	0x08006a05
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	741a      	strb	r2, [r3, #16]
      break;
 8006886:	e0c2      	b.n	8006a0e <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2203      	movs	r2, #3
 800688c:	741a      	strb	r2, [r3, #16]
      break;
 800688e:	e0be      	b.n	8006a0e <cliUpdate+0x4ae>
 8006890:	08010a08 	.word	0x08010a08
 8006894:	08010a10 	.word	0x08010a10
 8006898:	08010a18 	.word	0x08010a18

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	2b44      	cmp	r3, #68	; 0x44
 80068a6:	d11a      	bne.n	80068de <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d015      	beq.n	80068de <cliUpdate+0x37e>
        {
          line->cursor--;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 80068c2:	231b      	movs	r3, #27
 80068c4:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80068c6:	235b      	movs	r3, #91	; 0x5b
 80068c8:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	f107 010c 	add.w	r1, r7, #12
 80068d6:	2203      	movs	r2, #3
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 ff2b 	bl	8007734 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	2b43      	cmp	r3, #67	; 0x43
 80068e2:	d11d      	bne.n	8006920 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->buf_len)
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d207      	bcs.n	8006904 <cliUpdate+0x3a4>
        {
          line->cursor++;
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80068fa:	3301      	adds	r3, #1
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
        tx_buf[0] = 0x1B;
 8006904:	231b      	movs	r3, #27
 8006906:	733b      	strb	r3, [r7, #12]
        tx_buf[1] = 0x5B;
 8006908:	235b      	movs	r3, #91	; 0x5b
 800690a:	737b      	strb	r3, [r7, #13]
        tx_buf[2] = rx_data;
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	73bb      	strb	r3, [r7, #14]
        uartWrite(p_cli->ch, tx_buf, 3);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f107 010c 	add.w	r1, r7, #12
 8006918:	2203      	movs	r2, #3
 800691a:	4618      	mov	r0, r3
 800691c:	f000 ff0a 	bl	8007734 <uartWrite>
      }

      if (rx_data == CLI_KEY_UP)
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	2b41      	cmp	r3, #65	; 0x41
 8006924:	d10c      	bne.n	8006940 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8006926:	2101      	movs	r1, #1
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f8eb 	bl	8006b04 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	781a      	ldrb	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f000 ff26 	bl	800778c <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	2b42      	cmp	r3, #66	; 0x42
 8006944:	d10c      	bne.n	8006960 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8006946:	2100      	movs	r1, #0
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f8db 	bl	8006b04 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	781a      	ldrb	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f000 ff16 	bl	800778c <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	2b31      	cmp	r3, #49	; 0x31
 8006964:	d10f      	bne.n	8006986 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	7818      	ldrb	r0, [r3, #0]
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006970:	461a      	mov	r2, r3
 8006972:	492b      	ldr	r1, [pc, #172]	; (8006a20 <cliUpdate+0x4c0>)
 8006974:	f000 ff0a 	bl	800778c <uartPrintf>
        line->cursor = 0;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2204      	movs	r2, #4
 8006984:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8006986:	78fb      	ldrb	r3, [r7, #3]
 8006988:	2b34      	cmp	r3, #52	; 0x34
 800698a:	d13f      	bne.n	8006a0c <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006998:	429a      	cmp	r2, r3
 800699a:	d210      	bcs.n	80069be <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	8afa      	ldrh	r2, [r7, #22]
 80069b6:	491b      	ldr	r1, [pc, #108]	; (8006a24 <cliUpdate+0x4c4>)
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fee7 	bl	800778c <uartPrintf>
        }
        if (line->cursor > line->count)
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d910      	bls.n	80069f0 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80069dc:	b29b      	uxth	r3, r3
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	8afa      	ldrh	r2, [r7, #22]
 80069e8:	490d      	ldr	r1, [pc, #52]	; (8006a20 <cliUpdate+0x4c0>)
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fece 	bl	800778c <uartPrintf>
        }
        line->cursor = line->count;
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2204      	movs	r2, #4
 8006a00:	741a      	strb	r2, [r3, #16]
      }
      break;
 8006a02:	e003      	b.n	8006a0c <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	741a      	strb	r2, [r3, #16]
      break;
 8006a0a:	e000      	b.n	8006a0e <cliUpdate+0x4ae>
      break;
 8006a0c:	bf00      	nop
  }



  cliShowLog(p_cli);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff fcea 	bl	80063e8 <cliShowLog>

  return ret;
 8006a14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3730      	adds	r7, #48	; 0x30
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	08010a24 	.word	0x08010a24
 8006a24:	08010a2c 	.word	0x08010a2c

08006a28 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	221f      	movs	r2, #31
 8006a44:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8006a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	00da      	lsls	r2, r3, #3
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	188b      	adds	r3, r1, r2
 8006a78:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f503 7409 	add.w	r4, r3, #548	; 0x224
 8006a82:	4694      	mov	ip, r2
 8006a84:	f104 0e20 	add.w	lr, r4, #32
 8006a88:	4665      	mov	r5, ip
 8006a8a:	4626      	mov	r6, r4
 8006a8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006a8e:	6028      	str	r0, [r5, #0]
 8006a90:	6069      	str	r1, [r5, #4]
 8006a92:	60aa      	str	r2, [r5, #8]
 8006a94:	60eb      	str	r3, [r5, #12]
 8006a96:	3410      	adds	r4, #16
 8006a98:	f10c 0c10 	add.w	ip, ip, #16
 8006a9c:	4574      	cmp	r4, lr
 8006a9e:	d1f3      	bne.n	8006a88 <cliLineAdd+0x2e>
 8006aa0:	4663      	mov	r3, ip
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	8811      	ldrh	r1, [r2, #0]
 8006aa6:	7892      	ldrb	r2, [r2, #2]
 8006aa8:	8019      	strh	r1, [r3, #0]
 8006aaa:	709a      	strb	r2, [r3, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d807      	bhi.n	8006ac6 <cliLineAdd+0x6c>
  {
    p_cli->hist_line_count++;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8006abc:	3301      	adds	r3, #1
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8006acc:	b25a      	sxtb	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8006ada:	3301      	adds	r3, #1
 8006adc:	425a      	negs	r2, r3
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	f002 0203 	and.w	r2, r2, #3
 8006ae6:	bf58      	it	pl
 8006ae8:	4253      	negpl	r3, r2
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006b04 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8006b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8086 	beq.w	8006c28 <cliLineChange+0x124>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d008      	beq.n	8006b38 <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	7818      	ldrb	r0, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8006b30:	461a      	mov	r2, r3
 8006b32:	493f      	ldr	r1, [pc, #252]	; (8006c30 <cliLineChange+0x12c>)
 8006b34:	f000 fe2a 	bl	800778c <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <cliLineChange+0x50>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	7818      	ldrb	r0, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	4939      	ldr	r1, [pc, #228]	; (8006c34 <cliLineChange+0x130>)
 8006b50:	f000 fe1c 	bl	800778c <uartPrintf>
  }


  if (key_up == true)
 8006b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d125      	bne.n	8006ba8 <cliLineChange+0xa4>
  {
    if (p_cli->hist_line_new == true)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d006      	beq.n	8006b74 <cliLineChange+0x70>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8006b6c:	b25a      	sxtb	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8006b82:	4413      	add	r3, r2
 8006b84:	3b01      	subs	r3, #1
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8006b8c:	fb93 f1f2 	sdiv	r1, r3, r2
 8006b90:	fb02 f201 	mul.w	r2, r2, r1
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	b25a      	sxtb	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8006ba4:	73fb      	strb	r3, [r7, #15]
 8006ba6:	e013      	b.n	8006bd0 <cliLineChange+0xcc>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8006bae:	3301      	adds	r3, #1
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8006bb6:	fb93 f1f2 	sdiv	r1, r3, r2
 8006bba:	fb02 f201 	mul.w	r2, r2, r1
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	b25a      	sxtb	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8006bce:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8006bd0:	7bfa      	ldrb	r2, [r7, #15]
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	00da      	lsls	r2, r3, #3
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	1883      	adds	r3, r0, r2
 8006be2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8006be6:	461c      	mov	r4, r3
 8006be8:	f501 7609 	add.w	r6, r1, #548	; 0x224
 8006bec:	f104 0c20 	add.w	ip, r4, #32
 8006bf0:	4635      	mov	r5, r6
 8006bf2:	4623      	mov	r3, r4
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	6859      	ldr	r1, [r3, #4]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bfe:	3410      	adds	r4, #16
 8006c00:	3610      	adds	r6, #16
 8006c02:	4564      	cmp	r4, ip
 8006c04:	d1f4      	bne.n	8006bf0 <cliLineChange+0xec>
 8006c06:	4633      	mov	r3, r6
 8006c08:	4622      	mov	r2, r4
 8006c0a:	8811      	ldrh	r1, [r2, #0]
 8006c0c:	7892      	ldrb	r2, [r2, #2]
 8006c0e:	8019      	strh	r1, [r3, #0]
 8006c10:	709a      	strb	r2, [r3, #2]
  p_cli->line.cursor = p_cli->line.count;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

  p_cli->hist_line_new = false;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8006c26:	e000      	b.n	8006c2a <cliLineChange+0x126>
    return;
 8006c28:	bf00      	nop
}
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c30:	08010a24 	.word	0x08010a24
 8006c34:	08010a34 	.word	0x08010a34

08006c38 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8006c40:	2300      	movs	r3, #0
 8006c42:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f851 	bl	8006cec <cliParseArgs>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d046      	beq.n	8006cde <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8006c50:	4825      	ldr	r0, [pc, #148]	; (8006ce8 <cliRunCmd+0xb0>)
 8006c52:	f000 f893 	bl	8006d7c <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 f8b1 	bl	8006dc4 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e033      	b.n	8006cd0 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	4413      	add	r3, r2
 8006c80:	3304      	adds	r3, #4
 8006c82:	4619      	mov	r1, r3
 8006c84:	f7fe fad0 	bl	8005228 <strcmp>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d11d      	bne.n	8006cca <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4798      	blx	r3
        break;
 8006cc8:	e009      	b.n	8006cde <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	dbc4      	blt.n	8006c68 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8006cde:	7afb      	ldrb	r3, [r7, #11]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	08010a3c 	.word	0x08010a3c

08006cec <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006d0a:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8006d12:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8006d14:	8afb      	ldrh	r3, [r7, #22]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8006d20:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <cliParseArgs+0x8c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f107 0208 	add.w	r2, r7, #8
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6938      	ldr	r0, [r7, #16]
 8006d2c:	f008 f9d8 	bl	800f0e0 <strtok_r>
 8006d30:	61b8      	str	r0, [r7, #24]
 8006d32:	e010      	b.n	8006d56 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8006d34:	8afb      	ldrh	r3, [r7, #22]
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	82fa      	strh	r2, [r7, #22]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8006d44:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <cliParseArgs+0x8c>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f107 0208 	add.w	r2, r7, #8
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	2000      	movs	r0, #0
 8006d50:	f008 f9c6 	bl	800f0e0 <strtok_r>
 8006d54:	61b8      	str	r0, [r7, #24]
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1eb      	bne.n	8006d34 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	8afa      	ldrh	r2, [r7, #22]
 8006d60:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 8006d64:	8afb      	ldrh	r3, [r7, #22]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <cliParseArgs+0x82>
  {
    ret = true;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8006d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3720      	adds	r7, #32
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20000004 	.word	0x20000004

08006d7c <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8006d7c:	b40f      	push	{r0, r1, r2, r3}
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8006d84:	f107 031c 	add.w	r3, r7, #28
 8006d88:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8006d8a:	4b0d      	ldr	r3, [pc, #52]	; (8006dc0 <cliPrintf+0x44>)
 8006d8c:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f103 0011 	add.w	r0, r3, #17
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d9c:	f008 fa60 	bl	800f260 <vsniprintf>
 8006da0:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	7818      	ldrb	r0, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3311      	adds	r3, #17
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	4619      	mov	r1, r3
 8006dae:	f000 fcc1 	bl	8007734 <uartWrite>
}
 8006db2:	bf00      	nop
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dbc:	b004      	add	sp, #16
 8006dbe:	4770      	bx	lr
 8006dc0:	20000ef4 	.word	0x20000ef4

08006dc4 <cliToUpper>:

void cliToUpper(char *str)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	81fb      	strh	r3, [r7, #14]
 8006dd0:	e018      	b.n	8006e04 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8006dd2:	89fb      	ldrh	r3, [r7, #14]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8006ddc:	7b7b      	ldrb	r3, [r7, #13]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d014      	beq.n	8006e0c <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8006de2:	7b7b      	ldrb	r3, [r7, #13]
 8006de4:	2b60      	cmp	r3, #96	; 0x60
 8006de6:	d905      	bls.n	8006df4 <cliToUpper+0x30>
 8006de8:	7b7b      	ldrb	r3, [r7, #13]
 8006dea:	2b7a      	cmp	r3, #122	; 0x7a
 8006dec:	d802      	bhi.n	8006df4 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8006dee:	7b7b      	ldrb	r3, [r7, #13]
 8006df0:	3b20      	subs	r3, #32
 8006df2:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8006df4:	89fb      	ldrh	r3, [r7, #14]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4413      	add	r3, r2
 8006dfa:	7b7a      	ldrb	r2, [r7, #13]
 8006dfc:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8006dfe:	89fb      	ldrh	r3, [r7, #14]
 8006e00:	3301      	adds	r3, #1
 8006e02:	81fb      	strh	r3, [r7, #14]
 8006e04:	89fb      	ldrh	r3, [r7, #14]
 8006e06:	2b0f      	cmp	r3, #15
 8006e08:	d9e3      	bls.n	8006dd2 <cliToUpper+0xe>
 8006e0a:	e000      	b.n	8006e0e <cliToUpper+0x4a>
      break;
 8006e0c:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8006e0e:	89fb      	ldrh	r3, [r7, #14]
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d105      	bne.n	8006e20 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8006e14:	89fb      	ldrh	r3, [r7, #14]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	701a      	strb	r2, [r3, #0]
  }
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr
	...

08006e2c <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8006e3a:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <cliArgsGetData+0x4c>)
 8006e3c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d301      	bcc.n	8006e50 <cliArgsGetData+0x24>
  {
    return 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e00e      	b.n	8006e6e <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2100      	movs	r1, #0
 8006e62:	4618      	mov	r0, r3
 8006e64:	f008 f9ba 	bl	800f1dc <strtoul>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	60fb      	str	r3, [r7, #12]

  return ret;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000ef4 	.word	0x20000ef4

08006e7c <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	4603      	mov	r3, r0
 8006e84:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8006e8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ec8 <cliArgsGetFloat+0x4c>)
 8006e8e:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d302      	bcc.n	8006ea4 <cliArgsGetFloat+0x28>
  {
    return 0;
 8006e9e:	f04f 0300 	mov.w	r3, #0
 8006ea2:	e00c      	b.n	8006ebe <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8006eaa:	79fb      	ldrb	r3, [r7, #7]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f008 f89b 	bl	800eff0 <strtof>
 8006eba:	60f8      	str	r0, [r7, #12]

  return ret;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000ef4 	.word	0x20000ef4

08006ecc <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <cliArgsGetStr+0x40>)
 8006edc:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d301      	bcc.n	8006ef0 <cliArgsGetStr+0x24>
  {
    return 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e008      	b.n	8006f02 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]

  return ret;
 8006f00:	68fb      	ldr	r3, [r7, #12]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr
 8006f0c:	20000ef4 	.word	0x20000ef4

08006f10 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	6039      	str	r1, [r7, #0]
 8006f1a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8006f20:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <cliArgsIsStr+0x50>)
 8006f22:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d301      	bcc.n	8006f36 <cliArgsIsStr+0x26>
  {
    return 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e010      	b.n	8006f58 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4619      	mov	r1, r3
 8006f46:	6838      	ldr	r0, [r7, #0]
 8006f48:	f7fe f96e 	bl	8005228 <strcmp>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <cliArgsIsStr+0x46>
  {
    ret = true;
 8006f52:	2301      	movs	r3, #1
 8006f54:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20000ef4 	.word	0x20000ef4

08006f64 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8006f6a:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <cliKeepLoop+0x28>)
 8006f6c:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fb8a 	bl	800768c <uartAvailable>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <cliKeepLoop+0x1e>
  {
    return true;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8006f82:	2300      	movs	r3, #0
  }
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20000ef4 	.word	0x20000ef4

08006f90 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8006f9e:	4b20      	ldr	r3, [pc, #128]	; (8007020 <cliAdd+0x90>)
 8006fa0:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8006fa8:	2b0f      	cmp	r3, #15
 8006faa:	d901      	bls.n	8006fb0 <cliAdd+0x20>
  {
    return false;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e032      	b.n	8007016 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8006fb6:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8006fb8:	89fa      	ldrh	r2, [r7, #14]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4413      	add	r3, r2
 8006fca:	3304      	adds	r3, #4
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f007 f9e4 	bl	800e39c <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8006fd4:	89fa      	ldrh	r2, [r7, #14]
 8006fd6:	6939      	ldr	r1, [r7, #16]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	440b      	add	r3, r1
 8006fe2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8006fea:	89fa      	ldrh	r2, [r7, #14]
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7ff fee0 	bl	8006dc4 <cliToUpper>

  p_cli->cmd_count++;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800700a:	3301      	adds	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000ef4 	.word	0x20000ef4

08007024 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 800702c:	4b15      	ldr	r3, [pc, #84]	; (8007084 <cliShowList+0x60>)
 800702e:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8007030:	4815      	ldr	r0, [pc, #84]	; (8007088 <cliShowList+0x64>)
 8007032:	f7ff fea3 	bl	8006d7c <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8007036:	4815      	ldr	r0, [pc, #84]	; (800708c <cliShowList+0x68>)
 8007038:	f7ff fea0 	bl	8006d7c <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e012      	b.n	8007068 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	4413      	add	r3, r2
 8007054:	3304      	adds	r3, #4
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fe90 	bl	8006d7c <cliPrintf>
    cliPrintf("\r\n");
 800705c:	480a      	ldr	r0, [pc, #40]	; (8007088 <cliShowList+0x64>)
 800705e:	f7ff fe8d 	bl	8006d7c <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800706e:	461a      	mov	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4293      	cmp	r3, r2
 8007074:	dbe5      	blt.n	8007042 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8007076:	4806      	ldr	r0, [pc, #24]	; (8007090 <cliShowList+0x6c>)
 8007078:	f7ff fe80 	bl	8006d7c <cliPrintf>
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000ef4 	.word	0x20000ef4
 8007088:	08010a3c 	.word	0x08010a3c
 800708c:	08010a40 	.word	0x08010a40
 8007090:	08010a60 	.word	0x08010a60

08007094 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b08c      	sub	sp, #48	; 0x30
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 800709c:	2310      	movs	r3, #16
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80070b4:	4840      	ldr	r0, [pc, #256]	; (80071b8 <cliMemoryDump+0x124>)
 80070b6:	f7ff fe61 	bl	8006d7c <cliPrintf>
 80070ba:	e07a      	b.n	80071b2 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	dd09      	ble.n	80070d6 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3304      	adds	r3, #4
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2200      	movs	r2, #0
 80070ca:	2100      	movs	r1, #0
 80070cc:	4618      	mov	r0, r3
 80070ce:	f008 f885 	bl	800f1dc <strtoul>
 80070d2:	4603      	mov	r3, r0
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	2100      	movs	r1, #0
 80070de:	4618      	mov	r0, r3
 80070e0:	f008 f87c 	bl	800f1dc <strtoul>
 80070e4:	4603      	mov	r3, r0
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80070ec:	4833      	ldr	r0, [pc, #204]	; (80071bc <cliMemoryDump+0x128>)
 80070ee:	f7ff fe45 	bl	8006d7c <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f6:	e058      	b.n	80071aa <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	f003 0303 	and.w	r3, r3, #3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	4619      	mov	r1, r3
 8007106:	482e      	ldr	r0, [pc, #184]	; (80071c0 <cliMemoryDump+0x12c>)
 8007108:	f7ff fe38 	bl	8006d7c <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4619      	mov	r1, r3
 8007112:	482c      	ldr	r0, [pc, #176]	; (80071c4 <cliMemoryDump+0x130>)
 8007114:	f7ff fe32 	bl	8006d7c <cliPrintf>

    if ((idx%4) == 3)
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	425a      	negs	r2, r3
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	f002 0203 	and.w	r2, r2, #3
 8007124:	bf58      	it	pl
 8007126:	4253      	negpl	r3, r2
 8007128:	2b03      	cmp	r3, #3
 800712a:	d138      	bne.n	800719e <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 800712c:	4826      	ldr	r0, [pc, #152]	; (80071c8 <cliMemoryDump+0x134>)
 800712e:	f7ff fe25 	bl	8006d7c <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8007132:	2300      	movs	r3, #0
 8007134:	623b      	str	r3, [r7, #32]
 8007136:	e02c      	b.n	8007192 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800713e:	2300      	movs	r3, #0
 8007140:	61fb      	str	r3, [r7, #28]
 8007142:	e01d      	b.n	8007180 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8007144:	f107 020c 	add.w	r2, r7, #12
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	4413      	add	r3, r2
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b1f      	cmp	r3, #31
 8007150:	d910      	bls.n	8007174 <cliMemoryDump+0xe0>
 8007152:	f107 020c 	add.w	r2, r7, #12
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b7e      	cmp	r3, #126	; 0x7e
 800715e:	d809      	bhi.n	8007174 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8007160:	f107 020c 	add.w	r2, r7, #12
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	4413      	add	r3, r2
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	4619      	mov	r1, r3
 800716c:	4817      	ldr	r0, [pc, #92]	; (80071cc <cliMemoryDump+0x138>)
 800716e:	f7ff fe05 	bl	8006d7c <cliPrintf>
 8007172:	e002      	b.n	800717a <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8007174:	4816      	ldr	r0, [pc, #88]	; (80071d0 <cliMemoryDump+0x13c>)
 8007176:	f7ff fe01 	bl	8006d7c <cliPrintf>
        for (i=0;i<4;i++)
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	3301      	adds	r3, #1
 800717e:	61fb      	str	r3, [r7, #28]
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	2b03      	cmp	r3, #3
 8007184:	ddde      	ble.n	8007144 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	3304      	adds	r3, #4
 800718a:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	3301      	adds	r3, #1
 8007190:	623b      	str	r3, [r7, #32]
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	2b03      	cmp	r3, #3
 8007196:	ddcf      	ble.n	8007138 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8007198:	480e      	ldr	r0, [pc, #56]	; (80071d4 <cliMemoryDump+0x140>)
 800719a:	f7ff fdef 	bl	8006d7c <cliPrintf>
    }
    addr++;
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	3304      	adds	r3, #4
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	3301      	adds	r3, #1
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	429a      	cmp	r2, r3
 80071b0:	dba2      	blt.n	80070f8 <cliMemoryDump+0x64>
  }
}
 80071b2:	3730      	adds	r7, #48	; 0x30
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	08010a80 	.word	0x08010a80
 80071bc:	08010a94 	.word	0x08010a94
 80071c0:	08010a9c 	.word	0x08010a9c
 80071c4:	08010aa8 	.word	0x08010aa8
 80071c8:	08010ab0 	.word	0x08010ab0
 80071cc:	08010ab4 	.word	0x08010ab4
 80071d0:	08010ab8 	.word	0x08010ab8
 80071d4:	08010abc 	.word	0x08010abc

080071d8 <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);
#if 1
bool flashInit(void)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 80071de:	2300      	movs	r3, #0
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	e012      	b.n	800720a <flashInit+0x32>
  {
    flash_tbl[i].addr = 0x08000000 + i*FLASH_SECTOR_SIZE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80071ea:	02db      	lsls	r3, r3, #11
 80071ec:	4619      	mov	r1, r3
 80071ee:	4a0b      	ldr	r2, [pc, #44]	; (800721c <flashInit+0x44>)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    flash_tbl[i].length = FLASH_SECTOR_SIZE;
 80071f6:	4a09      	ldr	r2, [pc, #36]	; (800721c <flashInit+0x44>)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	4413      	add	r3, r2
 80071fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007202:	809a      	strh	r2, [r3, #4]
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3301      	adds	r3, #1
 8007208:	607b      	str	r3, [r7, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2bff      	cmp	r3, #255	; 0xff
 800720e:	dde9      	ble.n	80071e4 <flashInit+0xc>
  }

  return true;
 8007210:	2301      	movs	r3, #1
}
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr
 800721c:	20000394 	.word	0x20000394

08007220 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af00      	add	r7, sp, #0
  bool ret = true;
 8007226:	2301      	movs	r3, #1
 8007228:	76fb      	strb	r3, [r7, #27]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#endif
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800722a:	f107 0308 	add.w	r3, r7, #8
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	605a      	str	r2, [r3, #4]
 8007234:	609a      	str	r2, [r3, #8]
 8007236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007238:	4b22      	ldr	r3, [pc, #136]	; (80072c4 <ledInit+0xa4>)
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	4a21      	ldr	r2, [pc, #132]	; (80072c4 <ledInit+0xa4>)
 800723e:	f043 0308 	orr.w	r3, r3, #8
 8007242:	6193      	str	r3, [r2, #24]
 8007244:	4b1f      	ldr	r3, [pc, #124]	; (80072c4 <ledInit+0xa4>)
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f003 0308 	and.w	r3, r3, #8
 800724c:	607b      	str	r3, [r7, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007250:	4b1c      	ldr	r3, [pc, #112]	; (80072c4 <ledInit+0xa4>)
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	4a1b      	ldr	r2, [pc, #108]	; (80072c4 <ledInit+0xa4>)
 8007256:	f043 0304 	orr.w	r3, r3, #4
 800725a:	6193      	str	r3, [r2, #24]
 800725c:	4b19      	ldr	r3, [pc, #100]	; (80072c4 <ledInit+0xa4>)
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  //GPIO_InitStruct.Pin = LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007268:	2301      	movs	r3, #1
 800726a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800726c:	2300      	movs	r3, #0
 800726e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007270:	2302      	movs	r3, #2
 8007272:	617b      	str	r3, [r7, #20]
  //HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
  for( int i=0; i<LED_MAX_CH; i++)
 8007274:	2300      	movs	r3, #0
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	e017      	b.n	80072aa <ledInit+0x8a>
  {
  	GPIO_InitStruct.Pin = led_tbl[i].pin;
 800727a:	4a13      	ldr	r2, [pc, #76]	; (80072c8 <ledInit+0xa8>)
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	889b      	ldrh	r3, [r3, #4]
 8007284:	60bb      	str	r3, [r7, #8]
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8007286:	4a10      	ldr	r2, [pc, #64]	; (80072c8 <ledInit+0xa8>)
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800728e:	f107 0208 	add.w	r2, r7, #8
 8007292:	4611      	mov	r1, r2
 8007294:	4618      	mov	r0, r3
 8007296:	f001 fa0b 	bl	80086b0 <HAL_GPIO_Init>

  	ledOff(i);
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f818 	bl	80072d4 <ledOff>
  for( int i=0; i<LED_MAX_CH; i++)
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	3301      	adds	r3, #1
 80072a8:	61fb      	str	r3, [r7, #28]
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	dde4      	ble.n	800727a <ledInit+0x5a>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 80072b0:	4906      	ldr	r1, [pc, #24]	; (80072cc <ledInit+0xac>)
 80072b2:	4807      	ldr	r0, [pc, #28]	; (80072d0 <ledInit+0xb0>)
 80072b4:	f7ff fe6c 	bl	8006f90 <cliAdd>
#endif
  return ret;
 80072b8:	7efb      	ldrb	r3, [r7, #27]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3720      	adds	r7, #32
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	40021000 	.word	0x40021000
 80072c8:	20000008 	.word	0x20000008
 80072cc:	0800734d 	.word	0x0800734d
 80072d0:	08010acc 	.word	0x08010acc

080072d4 <ledOff>:
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 80072de:	79fb      	ldrb	r3, [r7, #7]
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d811      	bhi.n	8007308 <ledOff+0x34>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80072e4:	79fb      	ldrb	r3, [r7, #7]
 80072e6:	4a0a      	ldr	r2, [pc, #40]	; (8007310 <ledOff+0x3c>)
 80072e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	4a08      	ldr	r2, [pc, #32]	; (8007310 <ledOff+0x3c>)
 80072f0:	00db      	lsls	r3, r3, #3
 80072f2:	4413      	add	r3, r2
 80072f4:	8899      	ldrh	r1, [r3, #4]
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	4a05      	ldr	r2, [pc, #20]	; (8007310 <ledOff+0x3c>)
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	4413      	add	r3, r2
 80072fe:	79db      	ldrb	r3, [r3, #7]
 8007300:	461a      	mov	r2, r3
 8007302:	f001 fc15 	bl	8008b30 <HAL_GPIO_WritePin>
 8007306:	e000      	b.n	800730a <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 8007308:	bf00      	nop
}
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20000008 	.word	0x20000008

08007314 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	2b03      	cmp	r3, #3
 8007322:	d80c      	bhi.n	800733e <ledToggle+0x2a>
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8007324:	79fb      	ldrb	r3, [r7, #7]
 8007326:	4a08      	ldr	r2, [pc, #32]	; (8007348 <ledToggle+0x34>)
 8007328:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	4a06      	ldr	r2, [pc, #24]	; (8007348 <ledToggle+0x34>)
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	4413      	add	r3, r2
 8007334:	889b      	ldrh	r3, [r3, #4]
 8007336:	4619      	mov	r1, r3
 8007338:	f001 fc12 	bl	8008b60 <HAL_GPIO_TogglePin>
 800733c:	e000      	b.n	8007340 <ledToggle+0x2c>
	if(ch >= LED_MAX_CH) return;
 800733e:	bf00      	nop
}
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000008 	.word	0x20000008

0800734c <cliLed>:

#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8007354:	2300      	movs	r3, #0
 8007356:	75fb      	strb	r3, [r7, #23]

  if(args->argc == 3 && args->isStr(0, "toggle") == true)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	2b03      	cmp	r3, #3
 800735e:	d133      	bne.n	80073c8 <cliLed+0x7c>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	491f      	ldr	r1, [pc, #124]	; (80073e4 <cliLed+0x98>)
 8007366:	2000      	movs	r0, #0
 8007368:	4798      	blx	r3
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d02b      	beq.n	80073c8 <cliLed+0x7c>
  {
    uint8_t led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch = (uint8_t)args->getData(1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2001      	movs	r0, #1
 8007376:	4798      	blx	r3
 8007378:	4603      	mov	r3, r0
 800737a:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2002      	movs	r0, #2
 8007382:	4798      	blx	r3
 8007384:	4603      	mov	r3, r0
 8007386:	60fb      	str	r3, [r7, #12]

    if(led_ch > 0)
 8007388:	7dbb      	ldrb	r3, [r7, #22]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <cliLed+0x48>
    {
      led_ch--;
 800738e:	7dbb      	ldrb	r3, [r7, #22]
 8007390:	3b01      	subs	r3, #1
 8007392:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8007394:	f7fe fd7d 	bl	8005e92 <millis>
 8007398:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800739a:	e00e      	b.n	80073ba <cliLed+0x6e>
    {
      if(millis()-pre_time >= toggle_time)
 800739c:	f7fe fd79 	bl	8005e92 <millis>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d806      	bhi.n	80073ba <cliLed+0x6e>
      {
        pre_time = millis();
 80073ac:	f7fe fd71 	bl	8005e92 <millis>
 80073b0:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 80073b2:	7dbb      	ldrb	r3, [r7, #22]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff ffad 	bl	8007314 <ledToggle>
    while(cliKeepLoop())
 80073ba:	f7ff fdd3 	bl	8006f64 <cliKeepLoop>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1eb      	bne.n	800739c <cliLed+0x50>
      }
    }
    ret = true;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
  }


  if(ret != true)
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	f083 0301 	eor.w	r3, r3, #1
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms \n", LED_MAX_CH);
 80073d4:	2104      	movs	r1, #4
 80073d6:	4804      	ldr	r0, [pc, #16]	; (80073e8 <cliLed+0x9c>)
 80073d8:	f7ff fcd0 	bl	8006d7c <cliPrintf>
  }
}
 80073dc:	bf00      	nop
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	08010ad0 	.word	0x08010ad0
 80073e8:	08010ad8 	.word	0x08010ad8

080073ec <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
  bool ret = true;
 80073f2:	2301      	movs	r3, #1
 80073f4:	71fb      	strb	r3, [r7, #7]

  /* if reset pin on */
  if(RCC->CSR & (1<<26))
 80073f6:	4b11      	ldr	r3, [pc, #68]	; (800743c <resetInit+0x50>)
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d012      	beq.n	8007428 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8007402:	2001      	movs	r0, #1
 8007404:	f000 f84e 	bl	80074a4 <rtcBackupRegRead>
 8007408:	4603      	mov	r3, r0
 800740a:	3301      	adds	r3, #1
 800740c:	4619      	mov	r1, r3
 800740e:	2001      	movs	r0, #1
 8007410:	f000 f858 	bl	80074c4 <rtcBackupRegWrite>
    delay(500);
 8007414:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007418:	f7fe fd30 	bl	8005e7c <delay>
    reset_count = rtcBackupRegRead(1);
 800741c:	2001      	movs	r0, #1
 800741e:	f000 f841 	bl	80074a4 <rtcBackupRegRead>
 8007422:	4602      	mov	r2, r0
 8007424:	4b06      	ldr	r3, [pc, #24]	; (8007440 <resetInit+0x54>)
 8007426:	601a      	str	r2, [r3, #0]
  }

  rtcBackupRegWrite(1, 0);
 8007428:	2100      	movs	r1, #0
 800742a:	2001      	movs	r0, #1
 800742c:	f000 f84a 	bl	80074c4 <rtcBackupRegWrite>

  return ret;
 8007430:	79fb      	ldrb	r3, [r7, #7]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	40021000 	.word	0x40021000
 8007440:	20000b94 	.word	0x20000b94

08007444 <rtcInit>:


RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
  bool ret = true;
 800744a:	2301      	movs	r3, #1
 800744c:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800744e:	4b12      	ldr	r3, [pc, #72]	; (8007498 <rtcInit+0x54>)
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	4a11      	ldr	r2, [pc, #68]	; (8007498 <rtcInit+0x54>)
 8007454:	f043 0310 	orr.w	r3, r3, #16
 8007458:	6193      	str	r3, [r2, #24]
 800745a:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <rtcInit+0x54>)
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	f003 0310 	and.w	r3, r3, #16
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	683b      	ldr	r3, [r7, #0]

  /** Initialize RTC Only */
  hrtc.Instance           = RTC;
 8007466:	4b0d      	ldr	r3, [pc, #52]	; (800749c <rtcInit+0x58>)
 8007468:	4a0d      	ldr	r2, [pc, #52]	; (80074a0 <rtcInit+0x5c>)
 800746a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 800746c:	4b0b      	ldr	r3, [pc, #44]	; (800749c <rtcInit+0x58>)
 800746e:	f04f 32ff 	mov.w	r2, #4294967295
 8007472:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 8007474:	4b09      	ldr	r3, [pc, #36]	; (800749c <rtcInit+0x58>)
 8007476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800747a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800747c:	4807      	ldr	r0, [pc, #28]	; (800749c <rtcInit+0x58>)
 800747e:	f003 f8a1 	bl	800a5c4 <HAL_RTC_Init>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <rtcInit+0x48>
  {
    Error_Handler();
 8007488:	f7fe fdac 	bl	8005fe4 <Error_Handler>
  }

  return ret;
 800748c:	79fb      	ldrb	r3, [r7, #7]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	40021000 	.word	0x40021000
 800749c:	20001298 	.word	0x20001298
 80074a0:	40002800 	.word	0x40002800

080074a4 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	4804      	ldr	r0, [pc, #16]	; (80074c0 <rtcBackupRegRead+0x1c>)
 80074b0:	f003 f9b6 	bl	800a820 <HAL_RTCEx_BKUPRead>
 80074b4:	4603      	mov	r3, r0

}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20001298 	.word	0x20001298

080074c4 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	4803      	ldr	r0, [pc, #12]	; (80074e0 <rtcBackupRegWrite+0x1c>)
 80074d4:	f003 f98a 	bl	800a7ec <HAL_RTCEx_BKUPWrite>
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20001298 	.word	0x20001298

080074e4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a0b      	ldr	r2, [pc, #44]	; (8007520 <HAL_RTC_MspInit+0x3c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d110      	bne.n	8007518 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80074f6:	f002 fa97 	bl	8009a28 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80074fa:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <HAL_RTC_MspInit+0x40>)
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	4a09      	ldr	r2, [pc, #36]	; (8007524 <HAL_RTC_MspInit+0x40>)
 8007500:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007504:	61d3      	str	r3, [r2, #28]
 8007506:	4b07      	ldr	r3, [pc, #28]	; (8007524 <HAL_RTC_MspInit+0x40>)
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <HAL_RTC_MspInit+0x44>)
 8007514:	2201      	movs	r2, #1
 8007516:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40002800 	.word	0x40002800
 8007524:	40021000 	.word	0x40021000
 8007528:	4242043c 	.word	0x4242043c

0800752c <uartInit>:
DMA_HandleTypeDef  hdma_usart1_rx;



bool uartInit(void)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8007532:	2300      	movs	r3, #0
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	e007      	b.n	8007548 <uartInit+0x1c>
  {
    is_open[i] = false;
 8007538:	4a08      	ldr	r2, [pc, #32]	; (800755c <uartInit+0x30>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3301      	adds	r3, #1
 8007546:	607b      	str	r3, [r7, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b01      	cmp	r3, #1
 800754c:	ddf4      	ble.n	8007538 <uartInit+0xc>
  }


  return true;
 800754e:	2301      	movs	r3, #1
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000b98 	.word	0x20000b98

08007560 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	6039      	str	r1, [r7, #0]
 800756a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800756c:	2300      	movs	r3, #0
 800756e:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <uartOpen+0x1c>
 8007576:	2b01      	cmp	r3, #1
 8007578:	d007      	beq.n	800758a <uartOpen+0x2a>
 800757a:	e074      	b.n	8007666 <uartOpen+0x106>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	4a3c      	ldr	r2, [pc, #240]	; (8007670 <uartOpen+0x110>)
 8007580:	2101      	movs	r1, #1
 8007582:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8007584:	2301      	movs	r3, #1
 8007586:	73fb      	strb	r3, [r7, #15]
      break;
 8007588:	e06d      	b.n	8007666 <uartOpen+0x106>

    case _DEF_UART2:
      huart1.Instance = USART1;
 800758a:	4b3a      	ldr	r3, [pc, #232]	; (8007674 <uartOpen+0x114>)
 800758c:	4a3a      	ldr	r2, [pc, #232]	; (8007678 <uartOpen+0x118>)
 800758e:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8007590:	4a38      	ldr	r2, [pc, #224]	; (8007674 <uartOpen+0x114>)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007596:	4b37      	ldr	r3, [pc, #220]	; (8007674 <uartOpen+0x114>)
 8007598:	2200      	movs	r2, #0
 800759a:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 800759c:	4b35      	ldr	r3, [pc, #212]	; (8007674 <uartOpen+0x114>)
 800759e:	2200      	movs	r2, #0
 80075a0:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 80075a2:	4b34      	ldr	r3, [pc, #208]	; (8007674 <uartOpen+0x114>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 80075a8:	4b32      	ldr	r3, [pc, #200]	; (8007674 <uartOpen+0x114>)
 80075aa:	220c      	movs	r2, #12
 80075ac:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075ae:	4b31      	ldr	r3, [pc, #196]	; (8007674 <uartOpen+0x114>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80075b4:	4b2f      	ldr	r3, [pc, #188]	; (8007674 <uartOpen+0x114>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 80075ba:	482e      	ldr	r0, [pc, #184]	; (8007674 <uartOpen+0x114>)
 80075bc:	f003 f999 	bl	800a8f2 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80075c0:	79fb      	ldrb	r3, [r7, #7]
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	4a2d      	ldr	r2, [pc, #180]	; (800767c <uartOpen+0x11c>)
 80075c6:	4413      	add	r3, r2
 80075c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075cc:	492c      	ldr	r1, [pc, #176]	; (8007680 <uartOpen+0x120>)
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe fe0f 	bl	80061f2 <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA1_CLK_ENABLE();
 80075d4:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <uartOpen+0x124>)
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	4a2a      	ldr	r2, [pc, #168]	; (8007684 <uartOpen+0x124>)
 80075da:	f043 0301 	orr.w	r3, r3, #1
 80075de:	6153      	str	r3, [r2, #20]
 80075e0:	4b28      	ldr	r3, [pc, #160]	; (8007684 <uartOpen+0x124>)
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	60bb      	str	r3, [r7, #8]
 80075ea:	68bb      	ldr	r3, [r7, #8]

      /* DMA interrupt init */
      /* DMA1_Channel5_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80075ec:	2200      	movs	r2, #0
 80075ee:	2100      	movs	r1, #0
 80075f0:	200f      	movs	r0, #15
 80075f2:	f000 fb58 	bl	8007ca6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80075f6:	200f      	movs	r0, #15
 80075f8:	f000 fb71 	bl	8007cde <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart1) != HAL_OK)
 80075fc:	481d      	ldr	r0, [pc, #116]	; (8007674 <uartOpen+0x114>)
 80075fe:	f003 f92b 	bl	800a858 <HAL_UART_Init>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <uartOpen+0xae>
      {
        ret = false;
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
      }
      break;
 800760c:	e02a      	b.n	8007664 <uartOpen+0x104>
        ret = true;
 800760e:	2301      	movs	r3, #1
 8007610:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	4a16      	ldr	r2, [pc, #88]	; (8007670 <uartOpen+0x110>)
 8007616:	2101      	movs	r1, #1
 8007618:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 800761a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800761e:	4918      	ldr	r1, [pc, #96]	; (8007680 <uartOpen+0x120>)
 8007620:	4814      	ldr	r0, [pc, #80]	; (8007674 <uartOpen+0x114>)
 8007622:	f003 fa23 	bl	800aa6c <HAL_UART_Receive_DMA>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <uartOpen+0xd0>
          ret = false;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8007630:	79fb      	ldrb	r3, [r7, #7]
 8007632:	4a12      	ldr	r2, [pc, #72]	; (800767c <uartOpen+0x11c>)
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	4413      	add	r3, r2
 8007638:	3308      	adds	r3, #8
 800763a:	6819      	ldr	r1, [r3, #0]
 800763c:	4b12      	ldr	r3, [pc, #72]	; (8007688 <uartOpen+0x128>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	1a8a      	subs	r2, r1, r2
 8007646:	490d      	ldr	r1, [pc, #52]	; (800767c <uartOpen+0x11c>)
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	440b      	add	r3, r1
 800764c:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
 800764e:	79fa      	ldrb	r2, [r7, #7]
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	490a      	ldr	r1, [pc, #40]	; (800767c <uartOpen+0x11c>)
 8007654:	0112      	lsls	r2, r2, #4
 8007656:	440a      	add	r2, r1
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	4908      	ldr	r1, [pc, #32]	; (800767c <uartOpen+0x11c>)
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	440b      	add	r3, r1
 8007660:	3304      	adds	r3, #4
 8007662:	601a      	str	r2, [r3, #0]
      break;
 8007664:	bf00      	nop
  }

  return ret;
 8007666:	7bfb      	ldrb	r3, [r7, #15]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20000b98 	.word	0x20000b98
 8007674:	200012f0 	.word	0x200012f0
 8007678:	40013800 	.word	0x40013800
 800767c:	20000b9c 	.word	0x20000b9c
 8007680:	20000bbc 	.word	0x20000bbc
 8007684:	40021000 	.word	0x40021000
 8007688:	200012ac 	.word	0x200012ac

0800768c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <uartAvailable+0x1a>
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d004      	beq.n	80076ae <uartAvailable+0x22>
 80076a4:	e01b      	b.n	80076de <uartAvailable+0x52>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 80076a6:	f006 f8ff 	bl	800d8a8 <cdcAvailable>
 80076aa:	60f8      	str	r0, [r7, #12]
      break;
 80076ac:	e017      	b.n	80076de <uartAvailable+0x52>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	4a0d      	ldr	r2, [pc, #52]	; (80076e8 <uartAvailable+0x5c>)
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	4413      	add	r3, r2
 80076b6:	3308      	adds	r3, #8
 80076b8:	6819      	ldr	r1, [r3, #0]
 80076ba:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <uartAvailable+0x60>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	1a8a      	subs	r2, r1, r2
 80076c4:	4908      	ldr	r1, [pc, #32]	; (80076e8 <uartAvailable+0x5c>)
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	440b      	add	r3, r1
 80076ca:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	4a05      	ldr	r2, [pc, #20]	; (80076e8 <uartAvailable+0x5c>)
 80076d2:	4413      	add	r3, r2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fde2 	bl	800629e <qbufferAvailable>
 80076da:	60f8      	str	r0, [r7, #12]
      break;
 80076dc:	bf00      	nop

  }

  return ret;
 80076de:	68fb      	ldr	r3, [r7, #12]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20000b9c 	.word	0x20000b9c
 80076ec:	200012ac 	.word	0x200012ac

080076f0 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	4603      	mov	r3, r0
 80076f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <uartRead+0x1a>
 8007704:	2b01      	cmp	r3, #1
 8007706:	d005      	beq.n	8007714 <uartRead+0x24>
 8007708:	e00c      	b.n	8007724 <uartRead+0x34>
  {
    case _DEF_UART1:
      ret = cdcRead();
 800770a:	f006 f8e9 	bl	800d8e0 <cdcRead>
 800770e:	4603      	mov	r3, r0
 8007710:	73fb      	strb	r3, [r7, #15]
      break;
 8007712:	e007      	b.n	8007724 <uartRead+0x34>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8007714:	f107 030f 	add.w	r3, r7, #15
 8007718:	2201      	movs	r2, #1
 800771a:	4619      	mov	r1, r3
 800771c:	4804      	ldr	r0, [pc, #16]	; (8007730 <uartRead+0x40>)
 800771e:	f7fe fd82 	bl	8006226 <qbufferRead>
      break;
 8007722:	bf00      	nop

  }

  return ret;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20000bac 	.word	0x20000bac

08007734 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <uartWrite+0x1e>
 800774c:	2b01      	cmp	r3, #1
 800774e:	d006      	beq.n	800775e <uartWrite+0x2a>
 8007750:	e014      	b.n	800777c <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	68b8      	ldr	r0, [r7, #8]
 8007756:	f006 f915 	bl	800d984 <cdcWrite>
 800775a:	6178      	str	r0, [r7, #20]
      break;
 800775c:	e00e      	b.n	800777c <uartWrite+0x48>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	b29a      	uxth	r2, r3
 8007762:	2364      	movs	r3, #100	; 0x64
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	4808      	ldr	r0, [pc, #32]	; (8007788 <uartWrite+0x54>)
 8007768:	f003 f8e7 	bl	800a93a <HAL_UART_Transmit>
 800776c:	4603      	mov	r3, r0
 800776e:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8007770:	7cfb      	ldrb	r3, [r7, #19]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <uartWrite+0x46>
      {
        ret = length;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	617b      	str	r3, [r7, #20]
      }
      break;
 800777a:	bf00      	nop

  }

  return ret;
 800777c:	697b      	ldr	r3, [r7, #20]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200012f0 	.word	0x200012f0

0800778c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800778c:	b40e      	push	{r1, r2, r3}
 800778e:	b580      	push	{r7, lr}
 8007790:	b0c7      	sub	sp, #284	; 0x11c
 8007792:	af00      	add	r7, sp, #0
 8007794:	4602      	mov	r2, r0
 8007796:	1dfb      	adds	r3, r7, #7
 8007798:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800779a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800779e:	f107 030c 	add.w	r3, r7, #12
 80077a2:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80077a4:	f107 030c 	add.w	r3, r7, #12
 80077a8:	f107 0010 	add.w	r0, r7, #16
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80077b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077b6:	f007 fd53 	bl	800f260 <vsniprintf>
 80077ba:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80077be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80077c2:	f107 0110 	add.w	r1, r7, #16
 80077c6:	1dfb      	adds	r3, r7, #7
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff ffb2 	bl	8007734 <uartWrite>
 80077d0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 80077d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80077d8:	4618      	mov	r0, r3
 80077da:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80077de:	46bd      	mov	sp, r7
 80077e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077e4:	b003      	add	sp, #12
 80077e6:	4770      	bx	lr

080077e8 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bc80      	pop	{r7}
 80077f8:	4770      	bx	lr

080077fa <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr

0800780c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007814:	f107 0310 	add.w	r3, r7, #16
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	605a      	str	r2, [r3, #4]
 800781e:	609a      	str	r2, [r3, #8]
 8007820:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a33      	ldr	r2, [pc, #204]	; (80078f4 <HAL_UART_MspInit+0xe8>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d15f      	bne.n	80078ec <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800782c:	4b32      	ldr	r3, [pc, #200]	; (80078f8 <HAL_UART_MspInit+0xec>)
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	4a31      	ldr	r2, [pc, #196]	; (80078f8 <HAL_UART_MspInit+0xec>)
 8007832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007836:	6193      	str	r3, [r2, #24]
 8007838:	4b2f      	ldr	r3, [pc, #188]	; (80078f8 <HAL_UART_MspInit+0xec>)
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007844:	4b2c      	ldr	r3, [pc, #176]	; (80078f8 <HAL_UART_MspInit+0xec>)
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	4a2b      	ldr	r2, [pc, #172]	; (80078f8 <HAL_UART_MspInit+0xec>)
 800784a:	f043 0304 	orr.w	r3, r3, #4
 800784e:	6193      	str	r3, [r2, #24]
 8007850:	4b29      	ldr	r3, [pc, #164]	; (80078f8 <HAL_UART_MspInit+0xec>)
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	60bb      	str	r3, [r7, #8]
 800785a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800785c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007860:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007862:	2302      	movs	r3, #2
 8007864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007866:	2303      	movs	r3, #3
 8007868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800786a:	f107 0310 	add.w	r3, r7, #16
 800786e:	4619      	mov	r1, r3
 8007870:	4822      	ldr	r0, [pc, #136]	; (80078fc <HAL_UART_MspInit+0xf0>)
 8007872:	f000 ff1d 	bl	80086b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800787a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007880:	2300      	movs	r3, #0
 8007882:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007884:	f107 0310 	add.w	r3, r7, #16
 8007888:	4619      	mov	r1, r3
 800788a:	481c      	ldr	r0, [pc, #112]	; (80078fc <HAL_UART_MspInit+0xf0>)
 800788c:	f000 ff10 	bl	80086b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007890:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <HAL_UART_MspInit+0xf4>)
 8007892:	4a1c      	ldr	r2, [pc, #112]	; (8007904 <HAL_UART_MspInit+0xf8>)
 8007894:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007896:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <HAL_UART_MspInit+0xf4>)
 8007898:	2200      	movs	r2, #0
 800789a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800789c:	4b18      	ldr	r3, [pc, #96]	; (8007900 <HAL_UART_MspInit+0xf4>)
 800789e:	2200      	movs	r2, #0
 80078a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078a2:	4b17      	ldr	r3, [pc, #92]	; (8007900 <HAL_UART_MspInit+0xf4>)
 80078a4:	2280      	movs	r2, #128	; 0x80
 80078a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078a8:	4b15      	ldr	r3, [pc, #84]	; (8007900 <HAL_UART_MspInit+0xf4>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078ae:	4b14      	ldr	r3, [pc, #80]	; (8007900 <HAL_UART_MspInit+0xf4>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80078b4:	4b12      	ldr	r3, [pc, #72]	; (8007900 <HAL_UART_MspInit+0xf4>)
 80078b6:	2220      	movs	r2, #32
 80078b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078ba:	4b11      	ldr	r3, [pc, #68]	; (8007900 <HAL_UART_MspInit+0xf4>)
 80078bc:	2200      	movs	r2, #0
 80078be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80078c0:	480f      	ldr	r0, [pc, #60]	; (8007900 <HAL_UART_MspInit+0xf4>)
 80078c2:	f000 fa35 	bl	8007d30 <HAL_DMA_Init>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80078cc:	f7fe fb8a 	bl	8005fe4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a0b      	ldr	r2, [pc, #44]	; (8007900 <HAL_UART_MspInit+0xf4>)
 80078d4:	635a      	str	r2, [r3, #52]	; 0x34
 80078d6:	4a0a      	ldr	r2, [pc, #40]	; (8007900 <HAL_UART_MspInit+0xf4>)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80078dc:	2200      	movs	r2, #0
 80078de:	2100      	movs	r1, #0
 80078e0:	2025      	movs	r0, #37	; 0x25
 80078e2:	f000 f9e0 	bl	8007ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80078e6:	2025      	movs	r0, #37	; 0x25
 80078e8:	f000 f9f9 	bl	8007cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80078ec:	bf00      	nop
 80078ee:	3720      	adds	r7, #32
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	40013800 	.word	0x40013800
 80078f8:	40021000 	.word	0x40021000
 80078fc:	40010800 	.word	0x40010800
 8007900:	200012ac 	.word	0x200012ac
 8007904:	40020058 	.word	0x40020058

08007908 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a0c      	ldr	r2, [pc, #48]	; (8007948 <HAL_UART_MspDeInit+0x40>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d112      	bne.n	8007940 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800791a:	4b0c      	ldr	r3, [pc, #48]	; (800794c <HAL_UART_MspDeInit+0x44>)
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	4a0b      	ldr	r2, [pc, #44]	; (800794c <HAL_UART_MspDeInit+0x44>)
 8007920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007924:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8007926:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800792a:	4809      	ldr	r0, [pc, #36]	; (8007950 <HAL_UART_MspDeInit+0x48>)
 800792c:	f001 f82e 	bl	800898c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fa71 	bl	8007e1c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800793a:	2025      	movs	r0, #37	; 0x25
 800793c:	f000 f9dd 	bl	8007cfa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	40013800 	.word	0x40013800
 800794c:	40021000 	.word	0x40021000
 8007950:	40010800 	.word	0x40010800

08007954 <usbInit>:




bool usbInit(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
  bool ret = true;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800795e:	1d3b      	adds	r3, r7, #4
 8007960:	2200      	movs	r2, #0
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	605a      	str	r2, [r3, #4]
 8007966:	609a      	str	r2, [r3, #8]
 8007968:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
#endif
  delay(200);
 800796a:	20c8      	movs	r0, #200	; 0xc8
 800796c:	f7fe fa86 	bl	8005e7c <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8007970:	2201      	movs	r2, #1
 8007972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007976:	4808      	ldr	r0, [pc, #32]	; (8007998 <usbInit+0x44>)
 8007978:	f001 f8da 	bl	8008b30 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800797c:	2300      	movs	r3, #0
 800797e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007980:	1d3b      	adds	r3, r7, #4
 8007982:	4619      	mov	r1, r3
 8007984:	4804      	ldr	r0, [pc, #16]	; (8007998 <usbInit+0x44>)
 8007986:	f000 fe93 	bl	80086b0 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 800798a:	f005 ff5d 	bl	800d848 <MX_USB_DEVICE_Init>

  return ret;
 800798e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	40010800 	.word	0x40010800

0800799c <hwInit>:


#include "hw.h"

void hwInit(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  bspInit();
 80079a0:	f7fe fa26 	bl	8005df0 <bspInit>
  cliInit();
 80079a4:	f7fe fc96 	bl	80062d4 <cliInit>

  rtcInit();
 80079a8:	f7ff fd4c 	bl	8007444 <rtcInit>
  resetInit();
 80079ac:	f7ff fd1e 	bl	80073ec <resetInit>
  ledInit();
 80079b0:	f7ff fc36 	bl	8007220 <ledInit>
  usbInit();
 80079b4:	f7ff ffce 	bl	8007954 <usbInit>
  uartInit();
 80079b8:	f7ff fdb8 	bl	800752c <uartInit>
  flashInit();
 80079bc:	f7ff fc0c 	bl	80071d8 <flashInit>
}
 80079c0:	bf00      	nop
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079c8:	4b08      	ldr	r3, [pc, #32]	; (80079ec <HAL_Init+0x28>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a07      	ldr	r2, [pc, #28]	; (80079ec <HAL_Init+0x28>)
 80079ce:	f043 0310 	orr.w	r3, r3, #16
 80079d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80079d4:	2003      	movs	r0, #3
 80079d6:	f000 f95b 	bl	8007c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80079da:	2000      	movs	r0, #0
 80079dc:	f000 f808 	bl	80079f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80079e0:	f7fe fb06 	bl	8005ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40022000 	.word	0x40022000

080079f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80079f8:	4b12      	ldr	r3, [pc, #72]	; (8007a44 <HAL_InitTick+0x54>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <HAL_InitTick+0x58>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	4619      	mov	r1, r3
 8007a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 f981 	bl	8007d16 <HAL_SYSTICK_Config>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e00e      	b.n	8007a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b0f      	cmp	r3, #15
 8007a22:	d80a      	bhi.n	8007a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a24:	2200      	movs	r2, #0
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2c:	f000 f93b 	bl	8007ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007a30:	4a06      	ldr	r2, [pc, #24]	; (8007a4c <HAL_InitTick+0x5c>)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e000      	b.n	8007a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20000000 	.word	0x20000000
 8007a48:	2000002c 	.word	0x2000002c
 8007a4c:	20000028 	.word	0x20000028

08007a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a50:	b480      	push	{r7}
 8007a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <HAL_IncTick+0x1c>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <HAL_IncTick+0x20>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4413      	add	r3, r2
 8007a60:	4a03      	ldr	r2, [pc, #12]	; (8007a70 <HAL_IncTick+0x20>)
 8007a62:	6013      	str	r3, [r2, #0]
}
 8007a64:	bf00      	nop
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bc80      	pop	{r7}
 8007a6a:	4770      	bx	lr
 8007a6c:	2000002c 	.word	0x2000002c
 8007a70:	20001330 	.word	0x20001330

08007a74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
  return uwTick;
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <HAL_GetTick+0x10>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr
 8007a84:	20001330 	.word	0x20001330

08007a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a90:	f7ff fff0 	bl	8007a74 <HAL_GetTick>
 8007a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa0:	d005      	beq.n	8007aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007aa2:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <HAL_Delay+0x40>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007aae:	bf00      	nop
 8007ab0:	f7ff ffe0 	bl	8007a74 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d8f7      	bhi.n	8007ab0 <HAL_Delay+0x28>
  {
  }
}
 8007ac0:	bf00      	nop
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	2000002c 	.word	0x2000002c

08007acc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007adc:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <NVIC_SetPriorityGrouping+0x44>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ae8:	4013      	ands	r3, r2
 8007aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007afe:	4a04      	ldr	r2, [pc, #16]	; (8007b10 <NVIC_SetPriorityGrouping+0x44>)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	60d3      	str	r3, [r2, #12]
}
 8007b04:	bf00      	nop
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	e000ed00 	.word	0xe000ed00

08007b14 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8007b14:	b480      	push	{r7}
 8007b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <NVIC_GetPriorityGrouping+0x18>)
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	0a1b      	lsrs	r3, r3, #8
 8007b1e:	f003 0307 	and.w	r3, r3, #7
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	e000ed00 	.word	0xe000ed00

08007b30 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	f003 021f 	and.w	r2, r3, #31
 8007b40:	4906      	ldr	r1, [pc, #24]	; (8007b5c <NVIC_EnableIRQ+0x2c>)
 8007b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	2001      	movs	r0, #1
 8007b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bc80      	pop	{r7}
 8007b5a:	4770      	bx	lr
 8007b5c:	e000e100 	.word	0xe000e100

08007b60 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	f003 021f 	and.w	r2, r3, #31
 8007b70:	4907      	ldr	r1, [pc, #28]	; (8007b90 <NVIC_DisableIRQ+0x30>)
 8007b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	2001      	movs	r0, #1
 8007b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b7e:	3320      	adds	r3, #32
 8007b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bc80      	pop	{r7}
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	e000e100 	.word	0xe000e100

08007b94 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	6039      	str	r1, [r7, #0]
 8007b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8007ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	da0b      	bge.n	8007bc0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	490c      	ldr	r1, [pc, #48]	; (8007be0 <NVIC_SetPriority+0x4c>)
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	f003 030f 	and.w	r3, r3, #15
 8007bb4:	3b04      	subs	r3, #4
 8007bb6:	0112      	lsls	r2, r2, #4
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	440b      	add	r3, r1
 8007bbc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007bbe:	e009      	b.n	8007bd4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	4907      	ldr	r1, [pc, #28]	; (8007be4 <NVIC_SetPriority+0x50>)
 8007bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bca:	0112      	lsls	r2, r2, #4
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	440b      	add	r3, r1
 8007bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bc80      	pop	{r7}
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	e000ed00 	.word	0xe000ed00
 8007be4:	e000e100 	.word	0xe000e100

08007be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b089      	sub	sp, #36	; 0x24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f003 0307 	and.w	r3, r3, #7
 8007bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f1c3 0307 	rsb	r3, r3, #7
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	bf28      	it	cs
 8007c06:	2304      	movcs	r3, #4
 8007c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	2b06      	cmp	r3, #6
 8007c10:	d902      	bls.n	8007c18 <NVIC_EncodePriority+0x30>
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	3b03      	subs	r3, #3
 8007c16:	e000      	b.n	8007c1a <NVIC_EncodePriority+0x32>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	fa02 f303 	lsl.w	r3, r2, r3
 8007c26:	43da      	mvns	r2, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	401a      	ands	r2, r3
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c30:	f04f 31ff 	mov.w	r1, #4294967295
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	fa01 f303 	lsl.w	r3, r1, r3
 8007c3a:	43d9      	mvns	r1, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c40:	4313      	orrs	r3, r2
         );
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3724      	adds	r7, #36	; 0x24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bc80      	pop	{r7}
 8007c4a:	4770      	bx	lr

08007c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3b01      	subs	r3, #1
 8007c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c5c:	d301      	bcc.n	8007c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e00f      	b.n	8007c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c62:	4a0a      	ldr	r2, [pc, #40]	; (8007c8c <SysTick_Config+0x40>)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c6a:	210f      	movs	r1, #15
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c70:	f7ff ff90 	bl	8007b94 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <SysTick_Config+0x40>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c7a:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <SysTick_Config+0x40>)
 8007c7c:	2207      	movs	r2, #7
 8007c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	e000e010 	.word	0xe000e010

08007c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff ff17 	bl	8007acc <NVIC_SetPriorityGrouping>
}
 8007c9e:	bf00      	nop
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b086      	sub	sp, #24
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	4603      	mov	r3, r0
 8007cae:	60b9      	str	r1, [r7, #8]
 8007cb0:	607a      	str	r2, [r7, #4]
 8007cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007cb8:	f7ff ff2c 	bl	8007b14 <NVIC_GetPriorityGrouping>
 8007cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	68b9      	ldr	r1, [r7, #8]
 8007cc2:	6978      	ldr	r0, [r7, #20]
 8007cc4:	f7ff ff90 	bl	8007be8 <NVIC_EncodePriority>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cce:	4611      	mov	r1, r2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff ff5f 	bl	8007b94 <NVIC_SetPriority>
}
 8007cd6:	bf00      	nop
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff ff1f 	bl	8007b30 <NVIC_EnableIRQ>
}
 8007cf2:	bf00      	nop
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	4603      	mov	r3, r0
 8007d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff ff29 	bl	8007b60 <NVIC_DisableIRQ>
}
 8007d0e:	bf00      	nop
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff ff94 	bl	8007c4c <SysTick_Config>
 8007d24:	4603      	mov	r3, r0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e059      	b.n	8007dfa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	4b2d      	ldr	r3, [pc, #180]	; (8007e04 <HAL_DMA_Init+0xd4>)
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d80f      	bhi.n	8007d72 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	4b2b      	ldr	r3, [pc, #172]	; (8007e08 <HAL_DMA_Init+0xd8>)
 8007d5a:	4413      	add	r3, r2
 8007d5c:	4a2b      	ldr	r2, [pc, #172]	; (8007e0c <HAL_DMA_Init+0xdc>)
 8007d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d62:	091b      	lsrs	r3, r3, #4
 8007d64:	009a      	lsls	r2, r3, #2
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a28      	ldr	r2, [pc, #160]	; (8007e10 <HAL_DMA_Init+0xe0>)
 8007d6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007d70:	e00e      	b.n	8007d90 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	4b26      	ldr	r3, [pc, #152]	; (8007e14 <HAL_DMA_Init+0xe4>)
 8007d7a:	4413      	add	r3, r2
 8007d7c:	4a23      	ldr	r2, [pc, #140]	; (8007e0c <HAL_DMA_Init+0xdc>)
 8007d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d82:	091b      	lsrs	r3, r3, #4
 8007d84:	009a      	lsls	r2, r3, #2
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a22      	ldr	r2, [pc, #136]	; (8007e18 <HAL_DMA_Init+0xe8>)
 8007d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007da6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007daa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr
 8007e04:	40020407 	.word	0x40020407
 8007e08:	bffdfff8 	.word	0xbffdfff8
 8007e0c:	cccccccd 	.word	0xcccccccd
 8007e10:	40020000 	.word	0x40020000
 8007e14:	bffdfbf8 	.word	0xbffdfbf8
 8007e18:	40020400 	.word	0x40020400

08007e1c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e05c      	b.n	8007ee8 <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0201 	bic.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	60da      	str	r2, [r3, #12]

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	4b23      	ldr	r3, [pc, #140]	; (8007ef4 <HAL_DMA_DeInit+0xd8>)
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d80f      	bhi.n	8007e8a <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	4b21      	ldr	r3, [pc, #132]	; (8007ef8 <HAL_DMA_DeInit+0xdc>)
 8007e72:	4413      	add	r3, r2
 8007e74:	4a21      	ldr	r2, [pc, #132]	; (8007efc <HAL_DMA_DeInit+0xe0>)
 8007e76:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7a:	091b      	lsrs	r3, r3, #4
 8007e7c:	009a      	lsls	r2, r3, #2
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a1e      	ldr	r2, [pc, #120]	; (8007f00 <HAL_DMA_DeInit+0xe4>)
 8007e86:	63da      	str	r2, [r3, #60]	; 0x3c
 8007e88:	e00e      	b.n	8007ea8 <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <HAL_DMA_DeInit+0xe8>)
 8007e92:	4413      	add	r3, r2
 8007e94:	4a19      	ldr	r2, [pc, #100]	; (8007efc <HAL_DMA_DeInit+0xe0>)
 8007e96:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9a:	091b      	lsrs	r3, r3, #4
 8007e9c:	009a      	lsls	r2, r3, #2
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a18      	ldr	r2, [pc, #96]	; (8007f08 <HAL_DMA_DeInit+0xec>)
 8007ea6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8007eb6:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bc80      	pop	{r7}
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	40020407 	.word	0x40020407
 8007ef8:	bffdfff8 	.word	0xbffdfff8
 8007efc:	cccccccd 	.word	0xcccccccd
 8007f00:	40020000 	.word	0x40020000
 8007f04:	bffdfbf8 	.word	0xbffdfbf8
 8007f08:	40020400 	.word	0x40020400

08007f0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d101      	bne.n	8007f2c <HAL_DMA_Start_IT+0x20>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	e04a      	b.n	8007fc2 <HAL_DMA_Start_IT+0xb6>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d13a      	bne.n	8007fb4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2202      	movs	r2, #2
 8007f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0201 	bic.w	r2, r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	68b9      	ldr	r1, [r7, #8]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 fb76 	bl	8008654 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d008      	beq.n	8007f82 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 020e 	orr.w	r2, r2, #14
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	e00f      	b.n	8007fa2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f022 0204 	bic.w	r2, r2, #4
 8007f90:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 020a 	orr.w	r2, r2, #10
 8007fa0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0201 	orr.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	e005      	b.n	8007fc0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d005      	beq.n	8007fee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2204      	movs	r2, #4
 8007fe6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	73fb      	strb	r3, [r7, #15]
 8007fec:	e0d6      	b.n	800819c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 020e 	bic.w	r2, r2, #14
 8007ffc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0201 	bic.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	4b64      	ldr	r3, [pc, #400]	; (80081a8 <HAL_DMA_Abort_IT+0x1dc>)
 8008016:	429a      	cmp	r2, r3
 8008018:	d958      	bls.n	80080cc <HAL_DMA_Abort_IT+0x100>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a63      	ldr	r2, [pc, #396]	; (80081ac <HAL_DMA_Abort_IT+0x1e0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d04f      	beq.n	80080c4 <HAL_DMA_Abort_IT+0xf8>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a61      	ldr	r2, [pc, #388]	; (80081b0 <HAL_DMA_Abort_IT+0x1e4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d048      	beq.n	80080c0 <HAL_DMA_Abort_IT+0xf4>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a60      	ldr	r2, [pc, #384]	; (80081b4 <HAL_DMA_Abort_IT+0x1e8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d040      	beq.n	80080ba <HAL_DMA_Abort_IT+0xee>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a5e      	ldr	r2, [pc, #376]	; (80081b8 <HAL_DMA_Abort_IT+0x1ec>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d038      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xe8>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a5d      	ldr	r2, [pc, #372]	; (80081bc <HAL_DMA_Abort_IT+0x1f0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d030      	beq.n	80080ae <HAL_DMA_Abort_IT+0xe2>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a5b      	ldr	r2, [pc, #364]	; (80081c0 <HAL_DMA_Abort_IT+0x1f4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d028      	beq.n	80080a8 <HAL_DMA_Abort_IT+0xdc>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a53      	ldr	r2, [pc, #332]	; (80081a8 <HAL_DMA_Abort_IT+0x1dc>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d020      	beq.n	80080a2 <HAL_DMA_Abort_IT+0xd6>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a57      	ldr	r2, [pc, #348]	; (80081c4 <HAL_DMA_Abort_IT+0x1f8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d019      	beq.n	800809e <HAL_DMA_Abort_IT+0xd2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a56      	ldr	r2, [pc, #344]	; (80081c8 <HAL_DMA_Abort_IT+0x1fc>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d012      	beq.n	800809a <HAL_DMA_Abort_IT+0xce>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a54      	ldr	r2, [pc, #336]	; (80081cc <HAL_DMA_Abort_IT+0x200>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d00a      	beq.n	8008094 <HAL_DMA_Abort_IT+0xc8>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a53      	ldr	r2, [pc, #332]	; (80081d0 <HAL_DMA_Abort_IT+0x204>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d102      	bne.n	800808e <HAL_DMA_Abort_IT+0xc2>
 8008088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800808c:	e01b      	b.n	80080c6 <HAL_DMA_Abort_IT+0xfa>
 800808e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008092:	e018      	b.n	80080c6 <HAL_DMA_Abort_IT+0xfa>
 8008094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008098:	e015      	b.n	80080c6 <HAL_DMA_Abort_IT+0xfa>
 800809a:	2310      	movs	r3, #16
 800809c:	e013      	b.n	80080c6 <HAL_DMA_Abort_IT+0xfa>
 800809e:	2301      	movs	r3, #1
 80080a0:	e011      	b.n	80080c6 <HAL_DMA_Abort_IT+0xfa>
 80080a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080a6:	e00e      	b.n	80080c6 <HAL_DMA_Abort_IT+0xfa>
 80080a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80080ac:	e00b      	b.n	80080c6 <HAL_DMA_Abort_IT+0xfa>
 80080ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080b2:	e008      	b.n	80080c6 <HAL_DMA_Abort_IT+0xfa>
 80080b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080b8:	e005      	b.n	80080c6 <HAL_DMA_Abort_IT+0xfa>
 80080ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080be:	e002      	b.n	80080c6 <HAL_DMA_Abort_IT+0xfa>
 80080c0:	2310      	movs	r3, #16
 80080c2:	e000      	b.n	80080c6 <HAL_DMA_Abort_IT+0xfa>
 80080c4:	2301      	movs	r3, #1
 80080c6:	4a43      	ldr	r2, [pc, #268]	; (80081d4 <HAL_DMA_Abort_IT+0x208>)
 80080c8:	6053      	str	r3, [r2, #4]
 80080ca:	e057      	b.n	800817c <HAL_DMA_Abort_IT+0x1b0>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a36      	ldr	r2, [pc, #216]	; (80081ac <HAL_DMA_Abort_IT+0x1e0>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d04f      	beq.n	8008176 <HAL_DMA_Abort_IT+0x1aa>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a35      	ldr	r2, [pc, #212]	; (80081b0 <HAL_DMA_Abort_IT+0x1e4>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d048      	beq.n	8008172 <HAL_DMA_Abort_IT+0x1a6>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a33      	ldr	r2, [pc, #204]	; (80081b4 <HAL_DMA_Abort_IT+0x1e8>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d040      	beq.n	800816c <HAL_DMA_Abort_IT+0x1a0>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a32      	ldr	r2, [pc, #200]	; (80081b8 <HAL_DMA_Abort_IT+0x1ec>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d038      	beq.n	8008166 <HAL_DMA_Abort_IT+0x19a>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a30      	ldr	r2, [pc, #192]	; (80081bc <HAL_DMA_Abort_IT+0x1f0>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d030      	beq.n	8008160 <HAL_DMA_Abort_IT+0x194>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a2f      	ldr	r2, [pc, #188]	; (80081c0 <HAL_DMA_Abort_IT+0x1f4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d028      	beq.n	800815a <HAL_DMA_Abort_IT+0x18e>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a26      	ldr	r2, [pc, #152]	; (80081a8 <HAL_DMA_Abort_IT+0x1dc>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d020      	beq.n	8008154 <HAL_DMA_Abort_IT+0x188>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a2b      	ldr	r2, [pc, #172]	; (80081c4 <HAL_DMA_Abort_IT+0x1f8>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d019      	beq.n	8008150 <HAL_DMA_Abort_IT+0x184>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a29      	ldr	r2, [pc, #164]	; (80081c8 <HAL_DMA_Abort_IT+0x1fc>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d012      	beq.n	800814c <HAL_DMA_Abort_IT+0x180>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a28      	ldr	r2, [pc, #160]	; (80081cc <HAL_DMA_Abort_IT+0x200>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00a      	beq.n	8008146 <HAL_DMA_Abort_IT+0x17a>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a26      	ldr	r2, [pc, #152]	; (80081d0 <HAL_DMA_Abort_IT+0x204>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d102      	bne.n	8008140 <HAL_DMA_Abort_IT+0x174>
 800813a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800813e:	e01b      	b.n	8008178 <HAL_DMA_Abort_IT+0x1ac>
 8008140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008144:	e018      	b.n	8008178 <HAL_DMA_Abort_IT+0x1ac>
 8008146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800814a:	e015      	b.n	8008178 <HAL_DMA_Abort_IT+0x1ac>
 800814c:	2310      	movs	r3, #16
 800814e:	e013      	b.n	8008178 <HAL_DMA_Abort_IT+0x1ac>
 8008150:	2301      	movs	r3, #1
 8008152:	e011      	b.n	8008178 <HAL_DMA_Abort_IT+0x1ac>
 8008154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008158:	e00e      	b.n	8008178 <HAL_DMA_Abort_IT+0x1ac>
 800815a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800815e:	e00b      	b.n	8008178 <HAL_DMA_Abort_IT+0x1ac>
 8008160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008164:	e008      	b.n	8008178 <HAL_DMA_Abort_IT+0x1ac>
 8008166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800816a:	e005      	b.n	8008178 <HAL_DMA_Abort_IT+0x1ac>
 800816c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008170:	e002      	b.n	8008178 <HAL_DMA_Abort_IT+0x1ac>
 8008172:	2310      	movs	r3, #16
 8008174:	e000      	b.n	8008178 <HAL_DMA_Abort_IT+0x1ac>
 8008176:	2301      	movs	r3, #1
 8008178:	4a17      	ldr	r2, [pc, #92]	; (80081d8 <HAL_DMA_Abort_IT+0x20c>)
 800817a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	4798      	blx	r3
    } 
  }
  return status;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	40020080 	.word	0x40020080
 80081ac:	40020008 	.word	0x40020008
 80081b0:	4002001c 	.word	0x4002001c
 80081b4:	40020030 	.word	0x40020030
 80081b8:	40020044 	.word	0x40020044
 80081bc:	40020058 	.word	0x40020058
 80081c0:	4002006c 	.word	0x4002006c
 80081c4:	40020408 	.word	0x40020408
 80081c8:	4002041c 	.word	0x4002041c
 80081cc:	40020430 	.word	0x40020430
 80081d0:	40020444 	.word	0x40020444
 80081d4:	40020400 	.word	0x40020400
 80081d8:	40020000 	.word	0x40020000

080081dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	2204      	movs	r2, #4
 80081fa:	409a      	lsls	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4013      	ands	r3, r2
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 80d6 	beq.w	80083b2 <HAL_DMA_IRQHandler+0x1d6>
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 80d0 	beq.w	80083b2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b00      	cmp	r3, #0
 800821e:	d107      	bne.n	8008230 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0204 	bic.w	r2, r2, #4
 800822e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	461a      	mov	r2, r3
 8008236:	4b9b      	ldr	r3, [pc, #620]	; (80084a4 <HAL_DMA_IRQHandler+0x2c8>)
 8008238:	429a      	cmp	r2, r3
 800823a:	d958      	bls.n	80082ee <HAL_DMA_IRQHandler+0x112>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a99      	ldr	r2, [pc, #612]	; (80084a8 <HAL_DMA_IRQHandler+0x2cc>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d04f      	beq.n	80082e6 <HAL_DMA_IRQHandler+0x10a>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a98      	ldr	r2, [pc, #608]	; (80084ac <HAL_DMA_IRQHandler+0x2d0>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d048      	beq.n	80082e2 <HAL_DMA_IRQHandler+0x106>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a96      	ldr	r2, [pc, #600]	; (80084b0 <HAL_DMA_IRQHandler+0x2d4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d040      	beq.n	80082dc <HAL_DMA_IRQHandler+0x100>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a95      	ldr	r2, [pc, #596]	; (80084b4 <HAL_DMA_IRQHandler+0x2d8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d038      	beq.n	80082d6 <HAL_DMA_IRQHandler+0xfa>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a93      	ldr	r2, [pc, #588]	; (80084b8 <HAL_DMA_IRQHandler+0x2dc>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d030      	beq.n	80082d0 <HAL_DMA_IRQHandler+0xf4>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a92      	ldr	r2, [pc, #584]	; (80084bc <HAL_DMA_IRQHandler+0x2e0>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d028      	beq.n	80082ca <HAL_DMA_IRQHandler+0xee>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a89      	ldr	r2, [pc, #548]	; (80084a4 <HAL_DMA_IRQHandler+0x2c8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d020      	beq.n	80082c4 <HAL_DMA_IRQHandler+0xe8>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a8e      	ldr	r2, [pc, #568]	; (80084c0 <HAL_DMA_IRQHandler+0x2e4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d019      	beq.n	80082c0 <HAL_DMA_IRQHandler+0xe4>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a8c      	ldr	r2, [pc, #560]	; (80084c4 <HAL_DMA_IRQHandler+0x2e8>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d012      	beq.n	80082bc <HAL_DMA_IRQHandler+0xe0>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a8b      	ldr	r2, [pc, #556]	; (80084c8 <HAL_DMA_IRQHandler+0x2ec>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d00a      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xda>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a89      	ldr	r2, [pc, #548]	; (80084cc <HAL_DMA_IRQHandler+0x2f0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d102      	bne.n	80082b0 <HAL_DMA_IRQHandler+0xd4>
 80082aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082ae:	e01b      	b.n	80082e8 <HAL_DMA_IRQHandler+0x10c>
 80082b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80082b4:	e018      	b.n	80082e8 <HAL_DMA_IRQHandler+0x10c>
 80082b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ba:	e015      	b.n	80082e8 <HAL_DMA_IRQHandler+0x10c>
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	e013      	b.n	80082e8 <HAL_DMA_IRQHandler+0x10c>
 80082c0:	2304      	movs	r3, #4
 80082c2:	e011      	b.n	80082e8 <HAL_DMA_IRQHandler+0x10c>
 80082c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80082c8:	e00e      	b.n	80082e8 <HAL_DMA_IRQHandler+0x10c>
 80082ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80082ce:	e00b      	b.n	80082e8 <HAL_DMA_IRQHandler+0x10c>
 80082d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80082d4:	e008      	b.n	80082e8 <HAL_DMA_IRQHandler+0x10c>
 80082d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082da:	e005      	b.n	80082e8 <HAL_DMA_IRQHandler+0x10c>
 80082dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e0:	e002      	b.n	80082e8 <HAL_DMA_IRQHandler+0x10c>
 80082e2:	2340      	movs	r3, #64	; 0x40
 80082e4:	e000      	b.n	80082e8 <HAL_DMA_IRQHandler+0x10c>
 80082e6:	2304      	movs	r3, #4
 80082e8:	4a79      	ldr	r2, [pc, #484]	; (80084d0 <HAL_DMA_IRQHandler+0x2f4>)
 80082ea:	6053      	str	r3, [r2, #4]
 80082ec:	e057      	b.n	800839e <HAL_DMA_IRQHandler+0x1c2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a6d      	ldr	r2, [pc, #436]	; (80084a8 <HAL_DMA_IRQHandler+0x2cc>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d04f      	beq.n	8008398 <HAL_DMA_IRQHandler+0x1bc>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a6b      	ldr	r2, [pc, #428]	; (80084ac <HAL_DMA_IRQHandler+0x2d0>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d048      	beq.n	8008394 <HAL_DMA_IRQHandler+0x1b8>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a6a      	ldr	r2, [pc, #424]	; (80084b0 <HAL_DMA_IRQHandler+0x2d4>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d040      	beq.n	800838e <HAL_DMA_IRQHandler+0x1b2>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a68      	ldr	r2, [pc, #416]	; (80084b4 <HAL_DMA_IRQHandler+0x2d8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d038      	beq.n	8008388 <HAL_DMA_IRQHandler+0x1ac>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a67      	ldr	r2, [pc, #412]	; (80084b8 <HAL_DMA_IRQHandler+0x2dc>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d030      	beq.n	8008382 <HAL_DMA_IRQHandler+0x1a6>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a65      	ldr	r2, [pc, #404]	; (80084bc <HAL_DMA_IRQHandler+0x2e0>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d028      	beq.n	800837c <HAL_DMA_IRQHandler+0x1a0>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a5d      	ldr	r2, [pc, #372]	; (80084a4 <HAL_DMA_IRQHandler+0x2c8>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d020      	beq.n	8008376 <HAL_DMA_IRQHandler+0x19a>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a61      	ldr	r2, [pc, #388]	; (80084c0 <HAL_DMA_IRQHandler+0x2e4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d019      	beq.n	8008372 <HAL_DMA_IRQHandler+0x196>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a60      	ldr	r2, [pc, #384]	; (80084c4 <HAL_DMA_IRQHandler+0x2e8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d012      	beq.n	800836e <HAL_DMA_IRQHandler+0x192>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a5e      	ldr	r2, [pc, #376]	; (80084c8 <HAL_DMA_IRQHandler+0x2ec>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00a      	beq.n	8008368 <HAL_DMA_IRQHandler+0x18c>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a5d      	ldr	r2, [pc, #372]	; (80084cc <HAL_DMA_IRQHandler+0x2f0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d102      	bne.n	8008362 <HAL_DMA_IRQHandler+0x186>
 800835c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008360:	e01b      	b.n	800839a <HAL_DMA_IRQHandler+0x1be>
 8008362:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008366:	e018      	b.n	800839a <HAL_DMA_IRQHandler+0x1be>
 8008368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800836c:	e015      	b.n	800839a <HAL_DMA_IRQHandler+0x1be>
 800836e:	2340      	movs	r3, #64	; 0x40
 8008370:	e013      	b.n	800839a <HAL_DMA_IRQHandler+0x1be>
 8008372:	2304      	movs	r3, #4
 8008374:	e011      	b.n	800839a <HAL_DMA_IRQHandler+0x1be>
 8008376:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800837a:	e00e      	b.n	800839a <HAL_DMA_IRQHandler+0x1be>
 800837c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008380:	e00b      	b.n	800839a <HAL_DMA_IRQHandler+0x1be>
 8008382:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008386:	e008      	b.n	800839a <HAL_DMA_IRQHandler+0x1be>
 8008388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800838c:	e005      	b.n	800839a <HAL_DMA_IRQHandler+0x1be>
 800838e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008392:	e002      	b.n	800839a <HAL_DMA_IRQHandler+0x1be>
 8008394:	2340      	movs	r3, #64	; 0x40
 8008396:	e000      	b.n	800839a <HAL_DMA_IRQHandler+0x1be>
 8008398:	2304      	movs	r3, #4
 800839a:	4a4e      	ldr	r2, [pc, #312]	; (80084d4 <HAL_DMA_IRQHandler+0x2f8>)
 800839c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 8136 	beq.w	8008614 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80083b0:	e130      	b.n	8008614 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	2202      	movs	r2, #2
 80083b8:	409a      	lsls	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4013      	ands	r3, r2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 80f8 	beq.w	80085b4 <HAL_DMA_IRQHandler+0x3d8>
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 80f2 	beq.w	80085b4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10b      	bne.n	80083f6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 020a 	bic.w	r2, r2, #10
 80083ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	4b29      	ldr	r3, [pc, #164]	; (80084a4 <HAL_DMA_IRQHandler+0x2c8>)
 80083fe:	429a      	cmp	r2, r3
 8008400:	d973      	bls.n	80084ea <HAL_DMA_IRQHandler+0x30e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a28      	ldr	r2, [pc, #160]	; (80084a8 <HAL_DMA_IRQHandler+0x2cc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d06a      	beq.n	80084e2 <HAL_DMA_IRQHandler+0x306>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a26      	ldr	r2, [pc, #152]	; (80084ac <HAL_DMA_IRQHandler+0x2d0>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d063      	beq.n	80084de <HAL_DMA_IRQHandler+0x302>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a25      	ldr	r2, [pc, #148]	; (80084b0 <HAL_DMA_IRQHandler+0x2d4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d05b      	beq.n	80084d8 <HAL_DMA_IRQHandler+0x2fc>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a23      	ldr	r2, [pc, #140]	; (80084b4 <HAL_DMA_IRQHandler+0x2d8>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d038      	beq.n	800849c <HAL_DMA_IRQHandler+0x2c0>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a22      	ldr	r2, [pc, #136]	; (80084b8 <HAL_DMA_IRQHandler+0x2dc>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d030      	beq.n	8008496 <HAL_DMA_IRQHandler+0x2ba>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a20      	ldr	r2, [pc, #128]	; (80084bc <HAL_DMA_IRQHandler+0x2e0>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d028      	beq.n	8008490 <HAL_DMA_IRQHandler+0x2b4>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a18      	ldr	r2, [pc, #96]	; (80084a4 <HAL_DMA_IRQHandler+0x2c8>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d020      	beq.n	800848a <HAL_DMA_IRQHandler+0x2ae>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a1c      	ldr	r2, [pc, #112]	; (80084c0 <HAL_DMA_IRQHandler+0x2e4>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d019      	beq.n	8008486 <HAL_DMA_IRQHandler+0x2aa>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1b      	ldr	r2, [pc, #108]	; (80084c4 <HAL_DMA_IRQHandler+0x2e8>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d012      	beq.n	8008482 <HAL_DMA_IRQHandler+0x2a6>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a19      	ldr	r2, [pc, #100]	; (80084c8 <HAL_DMA_IRQHandler+0x2ec>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00a      	beq.n	800847c <HAL_DMA_IRQHandler+0x2a0>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a18      	ldr	r2, [pc, #96]	; (80084cc <HAL_DMA_IRQHandler+0x2f0>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d102      	bne.n	8008476 <HAL_DMA_IRQHandler+0x29a>
 8008470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008474:	e036      	b.n	80084e4 <HAL_DMA_IRQHandler+0x308>
 8008476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800847a:	e033      	b.n	80084e4 <HAL_DMA_IRQHandler+0x308>
 800847c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008480:	e030      	b.n	80084e4 <HAL_DMA_IRQHandler+0x308>
 8008482:	2320      	movs	r3, #32
 8008484:	e02e      	b.n	80084e4 <HAL_DMA_IRQHandler+0x308>
 8008486:	2302      	movs	r3, #2
 8008488:	e02c      	b.n	80084e4 <HAL_DMA_IRQHandler+0x308>
 800848a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800848e:	e029      	b.n	80084e4 <HAL_DMA_IRQHandler+0x308>
 8008490:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008494:	e026      	b.n	80084e4 <HAL_DMA_IRQHandler+0x308>
 8008496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800849a:	e023      	b.n	80084e4 <HAL_DMA_IRQHandler+0x308>
 800849c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084a0:	e020      	b.n	80084e4 <HAL_DMA_IRQHandler+0x308>
 80084a2:	bf00      	nop
 80084a4:	40020080 	.word	0x40020080
 80084a8:	40020008 	.word	0x40020008
 80084ac:	4002001c 	.word	0x4002001c
 80084b0:	40020030 	.word	0x40020030
 80084b4:	40020044 	.word	0x40020044
 80084b8:	40020058 	.word	0x40020058
 80084bc:	4002006c 	.word	0x4002006c
 80084c0:	40020408 	.word	0x40020408
 80084c4:	4002041c 	.word	0x4002041c
 80084c8:	40020430 	.word	0x40020430
 80084cc:	40020444 	.word	0x40020444
 80084d0:	40020400 	.word	0x40020400
 80084d4:	40020000 	.word	0x40020000
 80084d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084dc:	e002      	b.n	80084e4 <HAL_DMA_IRQHandler+0x308>
 80084de:	2320      	movs	r3, #32
 80084e0:	e000      	b.n	80084e4 <HAL_DMA_IRQHandler+0x308>
 80084e2:	2302      	movs	r3, #2
 80084e4:	4a4e      	ldr	r2, [pc, #312]	; (8008620 <HAL_DMA_IRQHandler+0x444>)
 80084e6:	6053      	str	r3, [r2, #4]
 80084e8:	e057      	b.n	800859a <HAL_DMA_IRQHandler+0x3be>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a4d      	ldr	r2, [pc, #308]	; (8008624 <HAL_DMA_IRQHandler+0x448>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d04f      	beq.n	8008594 <HAL_DMA_IRQHandler+0x3b8>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a4b      	ldr	r2, [pc, #300]	; (8008628 <HAL_DMA_IRQHandler+0x44c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d048      	beq.n	8008590 <HAL_DMA_IRQHandler+0x3b4>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a4a      	ldr	r2, [pc, #296]	; (800862c <HAL_DMA_IRQHandler+0x450>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d040      	beq.n	800858a <HAL_DMA_IRQHandler+0x3ae>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a48      	ldr	r2, [pc, #288]	; (8008630 <HAL_DMA_IRQHandler+0x454>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d038      	beq.n	8008584 <HAL_DMA_IRQHandler+0x3a8>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a47      	ldr	r2, [pc, #284]	; (8008634 <HAL_DMA_IRQHandler+0x458>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d030      	beq.n	800857e <HAL_DMA_IRQHandler+0x3a2>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a45      	ldr	r2, [pc, #276]	; (8008638 <HAL_DMA_IRQHandler+0x45c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d028      	beq.n	8008578 <HAL_DMA_IRQHandler+0x39c>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a44      	ldr	r2, [pc, #272]	; (800863c <HAL_DMA_IRQHandler+0x460>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d020      	beq.n	8008572 <HAL_DMA_IRQHandler+0x396>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a42      	ldr	r2, [pc, #264]	; (8008640 <HAL_DMA_IRQHandler+0x464>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d019      	beq.n	800856e <HAL_DMA_IRQHandler+0x392>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a41      	ldr	r2, [pc, #260]	; (8008644 <HAL_DMA_IRQHandler+0x468>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d012      	beq.n	800856a <HAL_DMA_IRQHandler+0x38e>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a3f      	ldr	r2, [pc, #252]	; (8008648 <HAL_DMA_IRQHandler+0x46c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d00a      	beq.n	8008564 <HAL_DMA_IRQHandler+0x388>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a3e      	ldr	r2, [pc, #248]	; (800864c <HAL_DMA_IRQHandler+0x470>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d102      	bne.n	800855e <HAL_DMA_IRQHandler+0x382>
 8008558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800855c:	e01b      	b.n	8008596 <HAL_DMA_IRQHandler+0x3ba>
 800855e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008562:	e018      	b.n	8008596 <HAL_DMA_IRQHandler+0x3ba>
 8008564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008568:	e015      	b.n	8008596 <HAL_DMA_IRQHandler+0x3ba>
 800856a:	2320      	movs	r3, #32
 800856c:	e013      	b.n	8008596 <HAL_DMA_IRQHandler+0x3ba>
 800856e:	2302      	movs	r3, #2
 8008570:	e011      	b.n	8008596 <HAL_DMA_IRQHandler+0x3ba>
 8008572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008576:	e00e      	b.n	8008596 <HAL_DMA_IRQHandler+0x3ba>
 8008578:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800857c:	e00b      	b.n	8008596 <HAL_DMA_IRQHandler+0x3ba>
 800857e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008582:	e008      	b.n	8008596 <HAL_DMA_IRQHandler+0x3ba>
 8008584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008588:	e005      	b.n	8008596 <HAL_DMA_IRQHandler+0x3ba>
 800858a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800858e:	e002      	b.n	8008596 <HAL_DMA_IRQHandler+0x3ba>
 8008590:	2320      	movs	r3, #32
 8008592:	e000      	b.n	8008596 <HAL_DMA_IRQHandler+0x3ba>
 8008594:	2302      	movs	r3, #2
 8008596:	4a2e      	ldr	r2, [pc, #184]	; (8008650 <HAL_DMA_IRQHandler+0x474>)
 8008598:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d034      	beq.n	8008614 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80085b2:	e02f      	b.n	8008614 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b8:	2208      	movs	r2, #8
 80085ba:	409a      	lsls	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4013      	ands	r3, r2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d028      	beq.n	8008616 <HAL_DMA_IRQHandler+0x43a>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f003 0308 	and.w	r3, r3, #8
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d023      	beq.n	8008616 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 020e 	bic.w	r2, r2, #14
 80085dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	2101      	movs	r1, #1
 80085e8:	fa01 f202 	lsl.w	r2, r1, r2
 80085ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
    }
  }
  return;
 8008614:	bf00      	nop
 8008616:	bf00      	nop
}
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	40020400 	.word	0x40020400
 8008624:	40020008 	.word	0x40020008
 8008628:	4002001c 	.word	0x4002001c
 800862c:	40020030 	.word	0x40020030
 8008630:	40020044 	.word	0x40020044
 8008634:	40020058 	.word	0x40020058
 8008638:	4002006c 	.word	0x4002006c
 800863c:	40020080 	.word	0x40020080
 8008640:	40020408 	.word	0x40020408
 8008644:	4002041c 	.word	0x4002041c
 8008648:	40020430 	.word	0x40020430
 800864c:	40020444 	.word	0x40020444
 8008650:	40020000 	.word	0x40020000

08008654 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866a:	2101      	movs	r1, #1
 800866c:	fa01 f202 	lsl.w	r2, r1, r2
 8008670:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	2b10      	cmp	r3, #16
 8008680:	d108      	bne.n	8008694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008692:	e007      	b.n	80086a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	60da      	str	r2, [r3, #12]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr
	...

080086b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b08b      	sub	sp, #44	; 0x2c
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80086be:	2300      	movs	r3, #0
 80086c0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80086ca:	2300      	movs	r3, #0
 80086cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80086ce:	2300      	movs	r3, #0
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
 80086d2:	e133      	b.n	800893c <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80086d4:	2201      	movs	r2, #1
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	4013      	ands	r3, r2
 80086e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	f040 8122 	bne.w	8008936 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b12      	cmp	r3, #18
 80086f8:	d034      	beq.n	8008764 <HAL_GPIO_Init+0xb4>
 80086fa:	2b12      	cmp	r3, #18
 80086fc:	d80d      	bhi.n	800871a <HAL_GPIO_Init+0x6a>
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d02b      	beq.n	800875a <HAL_GPIO_Init+0xaa>
 8008702:	2b02      	cmp	r3, #2
 8008704:	d804      	bhi.n	8008710 <HAL_GPIO_Init+0x60>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d031      	beq.n	800876e <HAL_GPIO_Init+0xbe>
 800870a:	2b01      	cmp	r3, #1
 800870c:	d01c      	beq.n	8008748 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800870e:	e048      	b.n	80087a2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8008710:	2b03      	cmp	r3, #3
 8008712:	d043      	beq.n	800879c <HAL_GPIO_Init+0xec>
 8008714:	2b11      	cmp	r3, #17
 8008716:	d01b      	beq.n	8008750 <HAL_GPIO_Init+0xa0>
          break;
 8008718:	e043      	b.n	80087a2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800871a:	4a8d      	ldr	r2, [pc, #564]	; (8008950 <HAL_GPIO_Init+0x2a0>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d026      	beq.n	800876e <HAL_GPIO_Init+0xbe>
 8008720:	4a8b      	ldr	r2, [pc, #556]	; (8008950 <HAL_GPIO_Init+0x2a0>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d806      	bhi.n	8008734 <HAL_GPIO_Init+0x84>
 8008726:	4a8b      	ldr	r2, [pc, #556]	; (8008954 <HAL_GPIO_Init+0x2a4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d020      	beq.n	800876e <HAL_GPIO_Init+0xbe>
 800872c:	4a8a      	ldr	r2, [pc, #552]	; (8008958 <HAL_GPIO_Init+0x2a8>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d01d      	beq.n	800876e <HAL_GPIO_Init+0xbe>
          break;
 8008732:	e036      	b.n	80087a2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8008734:	4a89      	ldr	r2, [pc, #548]	; (800895c <HAL_GPIO_Init+0x2ac>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d019      	beq.n	800876e <HAL_GPIO_Init+0xbe>
 800873a:	4a89      	ldr	r2, [pc, #548]	; (8008960 <HAL_GPIO_Init+0x2b0>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d016      	beq.n	800876e <HAL_GPIO_Init+0xbe>
 8008740:	4a88      	ldr	r2, [pc, #544]	; (8008964 <HAL_GPIO_Init+0x2b4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d013      	beq.n	800876e <HAL_GPIO_Init+0xbe>
          break;
 8008746:	e02c      	b.n	80087a2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	623b      	str	r3, [r7, #32]
          break;
 800874e:	e028      	b.n	80087a2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	3304      	adds	r3, #4
 8008756:	623b      	str	r3, [r7, #32]
          break;
 8008758:	e023      	b.n	80087a2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	3308      	adds	r3, #8
 8008760:	623b      	str	r3, [r7, #32]
          break;
 8008762:	e01e      	b.n	80087a2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	330c      	adds	r3, #12
 800876a:	623b      	str	r3, [r7, #32]
          break;
 800876c:	e019      	b.n	80087a2 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d102      	bne.n	800877c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008776:	2304      	movs	r3, #4
 8008778:	623b      	str	r3, [r7, #32]
          break;
 800877a:	e012      	b.n	80087a2 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d105      	bne.n	8008790 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008784:	2308      	movs	r3, #8
 8008786:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	69fa      	ldr	r2, [r7, #28]
 800878c:	611a      	str	r2, [r3, #16]
          break;
 800878e:	e008      	b.n	80087a2 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008790:	2308      	movs	r3, #8
 8008792:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	615a      	str	r2, [r3, #20]
          break;
 800879a:	e002      	b.n	80087a2 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800879c:	2300      	movs	r3, #0
 800879e:	623b      	str	r3, [r7, #32]
          break;
 80087a0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	2bff      	cmp	r3, #255	; 0xff
 80087a6:	d801      	bhi.n	80087ac <HAL_GPIO_Init+0xfc>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	e001      	b.n	80087b0 <HAL_GPIO_Init+0x100>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3304      	adds	r3, #4
 80087b0:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2bff      	cmp	r3, #255	; 0xff
 80087b6:	d802      	bhi.n	80087be <HAL_GPIO_Init+0x10e>
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	e002      	b.n	80087c4 <HAL_GPIO_Init+0x114>
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	3b08      	subs	r3, #8
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	210f      	movs	r1, #15
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	fa01 f303 	lsl.w	r3, r1, r3
 80087d2:	43db      	mvns	r3, r3
 80087d4:	401a      	ands	r2, r3
 80087d6:	6a39      	ldr	r1, [r7, #32]
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	fa01 f303 	lsl.w	r3, r1, r3
 80087de:	431a      	orrs	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 80a2 	beq.w	8008936 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80087f2:	4b5d      	ldr	r3, [pc, #372]	; (8008968 <HAL_GPIO_Init+0x2b8>)
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	4a5c      	ldr	r2, [pc, #368]	; (8008968 <HAL_GPIO_Init+0x2b8>)
 80087f8:	f043 0301 	orr.w	r3, r3, #1
 80087fc:	6193      	str	r3, [r2, #24]
 80087fe:	4b5a      	ldr	r3, [pc, #360]	; (8008968 <HAL_GPIO_Init+0x2b8>)
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	60bb      	str	r3, [r7, #8]
 8008808:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800880a:	4a58      	ldr	r2, [pc, #352]	; (800896c <HAL_GPIO_Init+0x2bc>)
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	089b      	lsrs	r3, r3, #2
 8008810:	3302      	adds	r3, #2
 8008812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008816:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	220f      	movs	r2, #15
 8008822:	fa02 f303 	lsl.w	r3, r2, r3
 8008826:	43db      	mvns	r3, r3
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	4013      	ands	r3, r2
 800882c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a4f      	ldr	r2, [pc, #316]	; (8008970 <HAL_GPIO_Init+0x2c0>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01f      	beq.n	8008876 <HAL_GPIO_Init+0x1c6>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a4e      	ldr	r2, [pc, #312]	; (8008974 <HAL_GPIO_Init+0x2c4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d019      	beq.n	8008872 <HAL_GPIO_Init+0x1c2>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a4d      	ldr	r2, [pc, #308]	; (8008978 <HAL_GPIO_Init+0x2c8>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d013      	beq.n	800886e <HAL_GPIO_Init+0x1be>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a4c      	ldr	r2, [pc, #304]	; (800897c <HAL_GPIO_Init+0x2cc>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d00d      	beq.n	800886a <HAL_GPIO_Init+0x1ba>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a4b      	ldr	r2, [pc, #300]	; (8008980 <HAL_GPIO_Init+0x2d0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d007      	beq.n	8008866 <HAL_GPIO_Init+0x1b6>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a4a      	ldr	r2, [pc, #296]	; (8008984 <HAL_GPIO_Init+0x2d4>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d101      	bne.n	8008862 <HAL_GPIO_Init+0x1b2>
 800885e:	2305      	movs	r3, #5
 8008860:	e00a      	b.n	8008878 <HAL_GPIO_Init+0x1c8>
 8008862:	2306      	movs	r3, #6
 8008864:	e008      	b.n	8008878 <HAL_GPIO_Init+0x1c8>
 8008866:	2304      	movs	r3, #4
 8008868:	e006      	b.n	8008878 <HAL_GPIO_Init+0x1c8>
 800886a:	2303      	movs	r3, #3
 800886c:	e004      	b.n	8008878 <HAL_GPIO_Init+0x1c8>
 800886e:	2302      	movs	r3, #2
 8008870:	e002      	b.n	8008878 <HAL_GPIO_Init+0x1c8>
 8008872:	2301      	movs	r3, #1
 8008874:	e000      	b.n	8008878 <HAL_GPIO_Init+0x1c8>
 8008876:	2300      	movs	r3, #0
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	f002 0203 	and.w	r2, r2, #3
 800887e:	0092      	lsls	r2, r2, #2
 8008880:	4093      	lsls	r3, r2
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	4313      	orrs	r3, r2
 8008886:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8008888:	4938      	ldr	r1, [pc, #224]	; (800896c <HAL_GPIO_Init+0x2bc>)
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	089b      	lsrs	r3, r3, #2
 800888e:	3302      	adds	r3, #2
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d006      	beq.n	80088b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80088a2:	4b39      	ldr	r3, [pc, #228]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	4938      	ldr	r1, [pc, #224]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	600b      	str	r3, [r1, #0]
 80088ae:	e006      	b.n	80088be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80088b0:	4b35      	ldr	r3, [pc, #212]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	43db      	mvns	r3, r3
 80088b8:	4933      	ldr	r1, [pc, #204]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 80088ba:	4013      	ands	r3, r2
 80088bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d006      	beq.n	80088d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80088ca:	4b2f      	ldr	r3, [pc, #188]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	492e      	ldr	r1, [pc, #184]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	604b      	str	r3, [r1, #4]
 80088d6:	e006      	b.n	80088e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80088d8:	4b2b      	ldr	r3, [pc, #172]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	43db      	mvns	r3, r3
 80088e0:	4929      	ldr	r1, [pc, #164]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 80088e2:	4013      	ands	r3, r2
 80088e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d006      	beq.n	8008900 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80088f2:	4b25      	ldr	r3, [pc, #148]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	4924      	ldr	r1, [pc, #144]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	608b      	str	r3, [r1, #8]
 80088fe:	e006      	b.n	800890e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008900:	4b21      	ldr	r3, [pc, #132]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	43db      	mvns	r3, r3
 8008908:	491f      	ldr	r1, [pc, #124]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 800890a:	4013      	ands	r3, r2
 800890c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d006      	beq.n	8008928 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800891a:	4b1b      	ldr	r3, [pc, #108]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 800891c:	68da      	ldr	r2, [r3, #12]
 800891e:	491a      	ldr	r1, [pc, #104]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	4313      	orrs	r3, r2
 8008924:	60cb      	str	r3, [r1, #12]
 8008926:	e006      	b.n	8008936 <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008928:	4b17      	ldr	r3, [pc, #92]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	43db      	mvns	r3, r3
 8008930:	4915      	ldr	r1, [pc, #84]	; (8008988 <HAL_GPIO_Init+0x2d8>)
 8008932:	4013      	ands	r3, r2
 8008934:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	3301      	adds	r3, #1
 800893a:	627b      	str	r3, [r7, #36]	; 0x24
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	2b0f      	cmp	r3, #15
 8008940:	f67f aec8 	bls.w	80086d4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8008944:	bf00      	nop
 8008946:	372c      	adds	r7, #44	; 0x2c
 8008948:	46bd      	mov	sp, r7
 800894a:	bc80      	pop	{r7}
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	10210000 	.word	0x10210000
 8008954:	10110000 	.word	0x10110000
 8008958:	10120000 	.word	0x10120000
 800895c:	10310000 	.word	0x10310000
 8008960:	10320000 	.word	0x10320000
 8008964:	10220000 	.word	0x10220000
 8008968:	40021000 	.word	0x40021000
 800896c:	40010000 	.word	0x40010000
 8008970:	40010800 	.word	0x40010800
 8008974:	40010c00 	.word	0x40010c00
 8008978:	40011000 	.word	0x40011000
 800897c:	40011400 	.word	0x40011400
 8008980:	40011800 	.word	0x40011800
 8008984:	40011c00 	.word	0x40011c00
 8008988:	40010400 	.word	0x40010400

0800898c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800898c:	b480      	push	{r7}
 800898e:	b089      	sub	sp, #36	; 0x24
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008996:	2300      	movs	r3, #0
 8008998:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800899a:	2300      	movs	r3, #0
 800899c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0x00U;
 800899e:	2300      	movs	r3, #0
 80089a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80089a6:	e0a6      	b.n	8008af6 <HAL_GPIO_DeInit+0x16a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80089a8:	2201      	movs	r2, #1
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	fa02 f303 	lsl.w	r3, r2, r3
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	4013      	ands	r3, r2
 80089b4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 8099 	beq.w	8008af0 <HAL_GPIO_DeInit+0x164>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2bff      	cmp	r3, #255	; 0xff
 80089c2:	d801      	bhi.n	80089c8 <HAL_GPIO_DeInit+0x3c>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	e001      	b.n	80089cc <HAL_GPIO_DeInit+0x40>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3304      	adds	r3, #4
 80089cc:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2bff      	cmp	r3, #255	; 0xff
 80089d2:	d802      	bhi.n	80089da <HAL_GPIO_DeInit+0x4e>
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	e002      	b.n	80089e0 <HAL_GPIO_DeInit+0x54>
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	3b08      	subs	r3, #8
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	613b      	str	r3, [r7, #16]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	210f      	movs	r1, #15
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	fa01 f303 	lsl.w	r3, r1, r3
 80089ee:	43db      	mvns	r3, r3
 80089f0:	401a      	ands	r2, r3
 80089f2:	2104      	movs	r1, #4
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	fa01 f303 	lsl.w	r3, r1, r3
 80089fa:	431a      	orrs	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68da      	ldr	r2, [r3, #12]
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	43db      	mvns	r3, r3
 8008a08:	401a      	ands	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
 8008a0e:	4a40      	ldr	r2, [pc, #256]	; (8008b10 <HAL_GPIO_DeInit+0x184>)
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	089b      	lsrs	r3, r3, #2
 8008a14:	3302      	adds	r3, #2
 8008a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a1a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	220f      	movs	r2, #15
 8008a26:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a38      	ldr	r2, [pc, #224]	; (8008b14 <HAL_GPIO_DeInit+0x188>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d01f      	beq.n	8008a78 <HAL_GPIO_DeInit+0xec>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a37      	ldr	r2, [pc, #220]	; (8008b18 <HAL_GPIO_DeInit+0x18c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d019      	beq.n	8008a74 <HAL_GPIO_DeInit+0xe8>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a36      	ldr	r2, [pc, #216]	; (8008b1c <HAL_GPIO_DeInit+0x190>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d013      	beq.n	8008a70 <HAL_GPIO_DeInit+0xe4>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a35      	ldr	r2, [pc, #212]	; (8008b20 <HAL_GPIO_DeInit+0x194>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00d      	beq.n	8008a6c <HAL_GPIO_DeInit+0xe0>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a34      	ldr	r2, [pc, #208]	; (8008b24 <HAL_GPIO_DeInit+0x198>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d007      	beq.n	8008a68 <HAL_GPIO_DeInit+0xdc>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a33      	ldr	r2, [pc, #204]	; (8008b28 <HAL_GPIO_DeInit+0x19c>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d101      	bne.n	8008a64 <HAL_GPIO_DeInit+0xd8>
 8008a60:	2305      	movs	r3, #5
 8008a62:	e00a      	b.n	8008a7a <HAL_GPIO_DeInit+0xee>
 8008a64:	2306      	movs	r3, #6
 8008a66:	e008      	b.n	8008a7a <HAL_GPIO_DeInit+0xee>
 8008a68:	2304      	movs	r3, #4
 8008a6a:	e006      	b.n	8008a7a <HAL_GPIO_DeInit+0xee>
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e004      	b.n	8008a7a <HAL_GPIO_DeInit+0xee>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e002      	b.n	8008a7a <HAL_GPIO_DeInit+0xee>
 8008a74:	2301      	movs	r3, #1
 8008a76:	e000      	b.n	8008a7a <HAL_GPIO_DeInit+0xee>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	69fa      	ldr	r2, [r7, #28]
 8008a7c:	f002 0203 	and.w	r2, r2, #3
 8008a80:	0092      	lsls	r2, r2, #2
 8008a82:	4093      	lsls	r3, r2
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d132      	bne.n	8008af0 <HAL_GPIO_DeInit+0x164>
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	f003 0303 	and.w	r3, r3, #3
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	220f      	movs	r2, #15
 8008a94:	fa02 f303 	lsl.w	r3, r2, r3
 8008a98:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8008a9a:	4a1d      	ldr	r2, [pc, #116]	; (8008b10 <HAL_GPIO_DeInit+0x184>)
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	089b      	lsrs	r3, r3, #2
 8008aa0:	3302      	adds	r3, #2
 8008aa2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	43da      	mvns	r2, r3
 8008aaa:	4819      	ldr	r0, [pc, #100]	; (8008b10 <HAL_GPIO_DeInit+0x184>)
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	089b      	lsrs	r3, r3, #2
 8008ab0:	400a      	ands	r2, r1
 8008ab2:	3302      	adds	r3, #2
 8008ab4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008ab8:	4b1c      	ldr	r3, [pc, #112]	; (8008b2c <HAL_GPIO_DeInit+0x1a0>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	43db      	mvns	r3, r3
 8008ac0:	491a      	ldr	r1, [pc, #104]	; (8008b2c <HAL_GPIO_DeInit+0x1a0>)
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008ac6:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <HAL_GPIO_DeInit+0x1a0>)
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	43db      	mvns	r3, r3
 8008ace:	4917      	ldr	r1, [pc, #92]	; (8008b2c <HAL_GPIO_DeInit+0x1a0>)
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008ad4:	4b15      	ldr	r3, [pc, #84]	; (8008b2c <HAL_GPIO_DeInit+0x1a0>)
 8008ad6:	689a      	ldr	r2, [r3, #8]
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	43db      	mvns	r3, r3
 8008adc:	4913      	ldr	r1, [pc, #76]	; (8008b2c <HAL_GPIO_DeInit+0x1a0>)
 8008ade:	4013      	ands	r3, r2
 8008ae0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008ae2:	4b12      	ldr	r3, [pc, #72]	; (8008b2c <HAL_GPIO_DeInit+0x1a0>)
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	43db      	mvns	r3, r3
 8008aea:	4910      	ldr	r1, [pc, #64]	; (8008b2c <HAL_GPIO_DeInit+0x1a0>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	60cb      	str	r3, [r1, #12]
      }
    }

    position++;
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	3301      	adds	r3, #1
 8008af4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	fa22 f303 	lsr.w	r3, r2, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f47f af52 	bne.w	80089a8 <HAL_GPIO_DeInit+0x1c>
  }
}
 8008b04:	bf00      	nop
 8008b06:	3724      	adds	r7, #36	; 0x24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bc80      	pop	{r7}
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	40010000 	.word	0x40010000
 8008b14:	40010800 	.word	0x40010800
 8008b18:	40010c00 	.word	0x40010c00
 8008b1c:	40011000 	.word	0x40011000
 8008b20:	40011400 	.word	0x40011400
 8008b24:	40011800 	.word	0x40011800
 8008b28:	40011c00 	.word	0x40011c00
 8008b2c:	40010400 	.word	0x40010400

08008b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	807b      	strh	r3, [r7, #2]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b40:	787b      	ldrb	r3, [r7, #1]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b46:	887a      	ldrh	r2, [r7, #2]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008b4c:	e003      	b.n	8008b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008b4e:	887b      	ldrh	r3, [r7, #2]
 8008b50:	041a      	lsls	r2, r3, #16
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	611a      	str	r2, [r3, #16]
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bc80      	pop	{r7}
 8008b5e:	4770      	bx	lr

08008b60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	887b      	ldrh	r3, [r7, #2]
 8008b72:	405a      	eors	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	60da      	str	r2, [r3, #12]
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr

08008b82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b84:	b08b      	sub	sp, #44	; 0x2c
 8008b86:	af06      	add	r7, sp, #24
 8008b88:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e0ca      	b.n	8008d2e <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d106      	bne.n	8008bb2 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f005 f919 	bl	800dde4 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2203      	movs	r2, #3
 8008bb6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f002 fc2e 	bl	800b420 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	603b      	str	r3, [r7, #0]
 8008bca:	687e      	ldr	r6, [r7, #4]
 8008bcc:	466d      	mov	r5, sp
 8008bce:	f106 0410 	add.w	r4, r6, #16
 8008bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	1d33      	adds	r3, r6, #4
 8008bdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bde:	6838      	ldr	r0, [r7, #0]
 8008be0:	f002 fbf4 	bl	800b3cc <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2100      	movs	r1, #0
 8008bea:	4618      	mov	r0, r3
 8008bec:	f002 fc34 	bl	800b458 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e037      	b.n	8008c66 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	015b      	lsls	r3, r3, #5
 8008bfc:	4413      	add	r3, r2
 8008bfe:	3329      	adds	r3, #41	; 0x29
 8008c00:	2201      	movs	r2, #1
 8008c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	b2d9      	uxtb	r1, r3
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	015b      	lsls	r3, r3, #5
 8008c0e:	4413      	add	r3, r2
 8008c10:	3328      	adds	r3, #40	; 0x28
 8008c12:	460a      	mov	r2, r1
 8008c14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	b299      	uxth	r1, r3
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	015b      	lsls	r3, r3, #5
 8008c20:	4413      	add	r3, r2
 8008c22:	3334      	adds	r3, #52	; 0x34
 8008c24:	460a      	mov	r2, r1
 8008c26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	015b      	lsls	r3, r3, #5
 8008c2e:	4413      	add	r3, r2
 8008c30:	332b      	adds	r3, #43	; 0x2b
 8008c32:	2200      	movs	r2, #0
 8008c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	015b      	lsls	r3, r3, #5
 8008c3c:	4413      	add	r3, r2
 8008c3e:	3338      	adds	r3, #56	; 0x38
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	015b      	lsls	r3, r3, #5
 8008c4a:	4413      	add	r3, r2
 8008c4c:	333c      	adds	r3, #60	; 0x3c
 8008c4e:	2200      	movs	r2, #0
 8008c50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	3302      	adds	r3, #2
 8008c58:	015b      	lsls	r3, r3, #5
 8008c5a:	4413      	add	r3, r2
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3301      	adds	r3, #1
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b0e      	cmp	r3, #14
 8008c6a:	d9c4      	bls.n	8008bf6 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	e03c      	b.n	8008cec <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	015b      	lsls	r3, r3, #5
 8008c78:	4413      	add	r3, r2
 8008c7a:	f203 2329 	addw	r3, r3, #553	; 0x229
 8008c7e:	2200      	movs	r2, #0
 8008c80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	b2d9      	uxtb	r1, r3
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	015b      	lsls	r3, r3, #5
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008c92:	460a      	mov	r2, r1
 8008c94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	b299      	uxth	r1, r3
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	015b      	lsls	r3, r3, #5
 8008ca0:	4413      	add	r3, r2
 8008ca2:	3334      	adds	r3, #52	; 0x34
 8008ca4:	460a      	mov	r2, r1
 8008ca6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	015b      	lsls	r3, r3, #5
 8008cae:	4413      	add	r3, r2
 8008cb0:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	015b      	lsls	r3, r3, #5
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	015b      	lsls	r3, r3, #5
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3312      	adds	r3, #18
 8008cde:	015b      	lsls	r3, r3, #5
 8008ce0:	4413      	add	r3, r2
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b0e      	cmp	r3, #14
 8008cf0:	d9bf      	bls.n	8008c72 <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	687e      	ldr	r6, [r7, #4]
 8008cfa:	466d      	mov	r5, sp
 8008cfc:	f106 0410 	add.w	r4, r6, #16
 8008d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	602b      	str	r3, [r5, #0]
 8008d08:	1d33      	adds	r3, r6, #4
 8008d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d0c:	6838      	ldr	r0, [r7, #0]
 8008d0e:	f002 fbaf 	bl	800b470 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f003 fb99 	bl	800c45e <USB_DevDisconnect>
  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d36 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_PCD_Start+0x16>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e016      	b.n	8008d7a <HAL_PCD_Start+0x44>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8008d54:	2101      	movs	r1, #1
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f005 faab 	bl	800e2b2 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f003 fb72 	bl	800c44a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f002 fb3e 	bl	800b3ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b082      	sub	sp, #8
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f003 fb6f 	bl	800c472 <USB_ReadInterrupts>
 8008d94:	4603      	mov	r3, r0
 8008d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d9e:	d102      	bne.n	8008da6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fad9 	bl	8009358 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f003 fb61 	bl	800c472 <USB_ReadInterrupts>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dba:	d112      	bne.n	8008de2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dce:	b292      	uxth	r2, r2
 8008dd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f005 f87a 	bl	800dece <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8008dda:	2100      	movs	r1, #0
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f8d2 	bl	8008f86 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f003 fb43 	bl	800c472 <USB_ReadInterrupts>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008df6:	d10b      	bne.n	8008e10 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e0a:	b292      	uxth	r2, r2
 8008e0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f003 fb2c 	bl	800c472 <USB_ReadInterrupts>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e24:	d10b      	bne.n	8008e3e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e38:	b292      	uxth	r2, r2
 8008e3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f003 fb15 	bl	800c472 <USB_ReadInterrupts>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e52:	d126      	bne.n	8008ea2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0204 	bic.w	r2, r2, #4
 8008e66:	b292      	uxth	r2, r2
 8008e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 0208 	bic.w	r2, r2, #8
 8008e7e:	b292      	uxth	r2, r2
 8008e80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f005 f85b 	bl	800df40 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e9c:	b292      	uxth	r2, r2
 8008e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f003 fae3 	bl	800c472 <USB_ReadInterrupts>
 8008eac:	4603      	mov	r3, r0
 8008eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eb6:	d131      	bne.n	8008f1c <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0208 	orr.w	r2, r2, #8
 8008eca:	b292      	uxth	r2, r2
 8008ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ee2:	b292      	uxth	r2, r2
 8008ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0204 	orr.w	r2, r2, #4
 8008efa:	b292      	uxth	r2, r2
 8008efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f003 fab4 	bl	800c472 <USB_ReadInterrupts>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f14:	d002      	beq.n	8008f1c <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f004 fff8 	bl	800df0c <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f003 faa6 	bl	800c472 <USB_ReadInterrupts>
 8008f26:	4603      	mov	r3, r0
 8008f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f30:	d10e      	bne.n	8008f50 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f44:	b292      	uxth	r2, r2
 8008f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f004 ffb1 	bl	800deb2 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f003 fa8c 	bl	800c472 <USB_ReadInterrupts>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f64:	d10b      	bne.n	8008f7e <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f78:	b292      	uxth	r2, r2
 8008f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_PCD_SetAddress+0x1a>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e013      	b.n	8008fc8 <HAL_PCD_SetAddress+0x42>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	78fa      	ldrb	r2, [r7, #3]
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f003 fa33 	bl	800c424 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	4608      	mov	r0, r1
 8008fda:	4611      	mov	r1, r2
 8008fdc:	461a      	mov	r2, r3
 8008fde:	4603      	mov	r3, r0
 8008fe0:	70fb      	strb	r3, [r7, #3]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	803b      	strh	r3, [r7, #0]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8008ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	da08      	bge.n	800900c <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009000:	015b      	lsls	r3, r3, #5
 8009002:	3328      	adds	r3, #40	; 0x28
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	4413      	add	r3, r2
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	e008      	b.n	800901e <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800900c:	78fb      	ldrb	r3, [r7, #3]
 800900e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009012:	015b      	lsls	r3, r3, #5
 8009014:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	4413      	add	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009024:	b2da      	uxtb	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800902a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	09db      	lsrs	r3, r3, #7
 8009032:	b2db      	uxtb	r3, r3
 8009034:	461a      	mov	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800903a:	883a      	ldrh	r2, [r7, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	78ba      	ldrb	r2, [r7, #2]
 8009044:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800904c:	2b01      	cmp	r3, #1
 800904e:	d101      	bne.n	8009054 <HAL_PCD_EP_Open+0x84>
 8009050:	2302      	movs	r3, #2
 8009052:	e00e      	b.n	8009072 <HAL_PCD_EP_Open+0xa2>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68f9      	ldr	r1, [r7, #12]
 8009062:	4618      	mov	r0, r3
 8009064:	f002 fa28 	bl	800b4b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 8009070:	7afb      	ldrb	r3, [r7, #11]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	460b      	mov	r3, r1
 8009084:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8009086:	2300      	movs	r3, #0
 8009088:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 800908a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800908e:	2b00      	cmp	r3, #0
 8009090:	da08      	bge.n	80090a4 <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009098:	015b      	lsls	r3, r3, #5
 800909a:	3328      	adds	r3, #40	; 0x28
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	4413      	add	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	e008      	b.n	80090b6 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090aa:	015b      	lsls	r3, r3, #5
 80090ac:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	4413      	add	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 80090b6:	78fb      	ldrb	r3, [r7, #3]
 80090b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80090c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	09db      	lsrs	r3, r3, #7
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d101      	bne.n	80090e0 <HAL_PCD_EP_Close+0x66>
 80090dc:	2302      	movs	r3, #2
 80090de:	e00e      	b.n	80090fe <HAL_PCD_EP_Close+0x84>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68f9      	ldr	r1, [r7, #12]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f002 fca4 	bl	800ba3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b086      	sub	sp, #24
 800910a:	af00      	add	r7, sp, #0
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	603b      	str	r3, [r7, #0]
 8009112:	460b      	mov	r3, r1
 8009114:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800911a:	7afb      	ldrb	r3, [r7, #11]
 800911c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009120:	015b      	lsls	r3, r3, #5
 8009122:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	4413      	add	r3, r2
 800912a:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2200      	movs	r2, #0
 800913c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2200      	movs	r2, #0
 8009142:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8009144:	7afb      	ldrb	r3, [r7, #11]
 8009146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800914a:	b2da      	uxtb	r2, r3
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8009150:	7afb      	ldrb	r3, [r7, #11]
 8009152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6979      	ldr	r1, [r7, #20]
 8009160:	4618      	mov	r0, r3
 8009162:	f002 fdf3 	bl	800bd4c <USB_EPStartXfer>
 8009166:	e005      	b.n	8009174 <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6979      	ldr	r1, [r7, #20]
 800916e:	4618      	mov	r0, r3
 8009170:	f002 fdec 	bl	800bd4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	460b      	mov	r3, r1
 8009188:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800918a:	78fb      	ldrb	r3, [r7, #3]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	3312      	adds	r3, #18
 8009194:	015b      	lsls	r3, r3, #5
 8009196:	4413      	add	r3, r2
 8009198:	3304      	adds	r3, #4
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bc80      	pop	{r7}
 80091a6:	4770      	bx	lr

080091a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	607a      	str	r2, [r7, #4]
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	460b      	mov	r3, r1
 80091b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 80091b8:	2300      	movs	r3, #0
 80091ba:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80091bc:	7afb      	ldrb	r3, [r7, #11]
 80091be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c2:	015b      	lsls	r3, r3, #5
 80091c4:	3328      	adds	r3, #40	; 0x28
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4413      	add	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	2200      	movs	r2, #0
 80091dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2201      	movs	r2, #1
 80091e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80091e4:	7afb      	ldrb	r3, [r7, #11]
 80091e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 80091f0:	7afb      	ldrb	r3, [r7, #11]
 80091f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d106      	bne.n	8009208 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6979      	ldr	r1, [r7, #20]
 8009200:	4618      	mov	r0, r3
 8009202:	f002 fda3 	bl	800bd4c <USB_EPStartXfer>
 8009206:	e005      	b.n	8009214 <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6979      	ldr	r1, [r7, #20]
 800920e:	4618      	mov	r0, r3
 8009210:	f002 fd9c 	bl	800bd4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	460b      	mov	r3, r1
 8009228:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 800922e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009232:	2b00      	cmp	r3, #0
 8009234:	da08      	bge.n	8009248 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800923c:	015b      	lsls	r3, r3, #5
 800923e:	3328      	adds	r3, #40	; 0x28
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	4413      	add	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	e006      	b.n	8009256 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	015b      	lsls	r3, r3, #5
 800924c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	4413      	add	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2201      	movs	r2, #1
 800925a:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009262:	b2da      	uxtb	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8009268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	09db      	lsrs	r3, r3, #7
 8009270:	b2db      	uxtb	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <HAL_PCD_EP_SetStall+0x68>
 8009282:	2302      	movs	r3, #2
 8009284:	e01c      	b.n	80092c0 <HAL_PCD_EP_SetStall+0xa2>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68f9      	ldr	r1, [r7, #12]
 8009294:	4618      	mov	r0, r3
 8009296:	f002 ffdb 	bl	800c250 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 800929a:	78fb      	ldrb	r3, [r7, #3]
 800929c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d108      	bne.n	80092b6 <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 80092ae:	4619      	mov	r1, r3
 80092b0:	4610      	mov	r0, r2
 80092b2:	f003 f8ef 	bl	800c494 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 80092d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	da08      	bge.n	80092f2 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092e6:	015b      	lsls	r3, r3, #5
 80092e8:	3328      	adds	r3, #40	; 0x28
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	e006      	b.n	8009300 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	015b      	lsls	r3, r3, #5
 80092f6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	4413      	add	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8009306:	78fb      	ldrb	r3, [r7, #3]
 8009308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800930c:	b2da      	uxtb	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8009312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009316:	b2db      	uxtb	r3, r3
 8009318:	09db      	lsrs	r3, r3, #7
 800931a:	b2db      	uxtb	r3, r3
 800931c:	461a      	mov	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8009328:	2b01      	cmp	r3, #1
 800932a:	d101      	bne.n	8009330 <HAL_PCD_EP_ClrStall+0x68>
 800932c:	2302      	movs	r3, #2
 800932e:	e00e      	b.n	800934e <HAL_PCD_EP_ClrStall+0x86>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68f9      	ldr	r1, [r7, #12]
 800933e:	4618      	mov	r0, r3
 8009340:	f002 ffe6 	bl	800c310 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009358:	b590      	push	{r4, r7, lr}
 800935a:	b089      	sub	sp, #36	; 0x24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8009360:	2300      	movs	r3, #0
 8009362:	61fb      	str	r3, [r7, #28]
  uint16_t count = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	837b      	strh	r3, [r7, #26]
  uint8_t epindex = 0;
 8009368:	2300      	movs	r3, #0
 800936a:	767b      	strb	r3, [r7, #25]
  __IO uint16_t wIstr = 0;  
 800936c:	2300      	movs	r3, #0
 800936e:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8009374:	e308      	b.n	8009988 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009376:	89fb      	ldrh	r3, [r7, #14]
 8009378:	b29b      	uxth	r3, r3
 800937a:	b2db      	uxtb	r3, r3
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	767b      	strb	r3, [r7, #25]
    
    if (epindex == 0)
 8009382:	7e7b      	ldrb	r3, [r7, #25]
 8009384:	2b00      	cmp	r3, #0
 8009386:	f040 812a 	bne.w	80095de <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800938a:	89fb      	ldrh	r3, [r7, #14]
 800938c:	b29b      	uxth	r3, r3
 800938e:	f003 0310 	and.w	r3, r3, #16
 8009392:	2b00      	cmp	r3, #0
 8009394:	d14d      	bne.n	8009432 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	881b      	ldrh	r3, [r3, #0]
 800939c:	b29b      	uxth	r3, r3
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	6812      	ldr	r2, [r2, #0]
 80093a2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80093a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3328      	adds	r3, #40	; 0x28
 80093b2:	61fb      	str	r3, [r7, #28]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093bc:	b29b      	uxth	r3, r3
 80093be:	461a      	mov	r2, r3
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	4413      	add	r3, r2
 80093c8:	3302      	adds	r3, #2
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	6812      	ldr	r2, [r2, #0]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	b29b      	uxth	r3, r3
 80093da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	695a      	ldr	r2, [r3, #20]
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	441a      	add	r2, r3
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80093f0:	2100      	movs	r1, #0
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f004 fd46 	bl	800de84 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 82c1 	beq.w	8009988 <PCD_EP_ISR_Handler+0x630>
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	2b00      	cmp	r3, #0
 800940c:	f040 82bc 	bne.w	8009988 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800941c:	b2da      	uxtb	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	b292      	uxth	r2, r2
 8009424:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009430:	e2aa      	b.n	8009988 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8009438:	61fb      	str	r3, [r7, #28]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	b29b      	uxth	r3, r3
 8009442:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009444:	89bb      	ldrh	r3, [r7, #12]
 8009446:	b29b      	uxth	r3, r3
 8009448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800944c:	2b00      	cmp	r3, #0
 800944e:	d031      	beq.n	80094b4 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009458:	b29b      	uxth	r3, r3
 800945a:	461a      	mov	r2, r3
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	00db      	lsls	r3, r3, #3
 8009462:	4413      	add	r3, r2
 8009464:	3306      	adds	r3, #6
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	6812      	ldr	r2, [r2, #0]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	b29b      	uxth	r3, r3
 8009476:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6818      	ldr	r0, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	889a      	ldrh	r2, [r3, #4]
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	b29b      	uxth	r3, r3
 8009492:	f003 f850 	bl	800c536 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	b299      	uxth	r1, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80094a6:	400b      	ands	r3, r1
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f004 fcbf 	bl	800de30 <HAL_PCD_SetupStageCallback>
 80094b2:	e269      	b.n	8009988 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80094b4:	89bb      	ldrh	r3, [r7, #12]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	b21b      	sxth	r3, r3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f280 8264 	bge.w	8009988 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	b299      	uxth	r1, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80094d0:	400b      	ands	r3, r1
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094de:	b29b      	uxth	r3, r3
 80094e0:	461a      	mov	r2, r3
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	4413      	add	r3, r2
 80094ea:	3306      	adds	r3, #6
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	6812      	ldr	r2, [r2, #0]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d011      	beq.n	8009530 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6818      	ldr	r0, [r3, #0]
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	6959      	ldr	r1, [r3, #20]
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	889a      	ldrh	r2, [r3, #4]
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	b29b      	uxth	r3, r3
 800951e:	f003 f80a 	bl	800c536 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	695a      	ldr	r2, [r3, #20]
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	441a      	add	r2, r3
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009530:	2100      	movs	r1, #0
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f004 fc8e 	bl	800de54 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009540:	b29b      	uxth	r3, r3
 8009542:	3306      	adds	r3, #6
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	6812      	ldr	r2, [r2, #0]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009550:	613b      	str	r3, [r7, #16]
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	2b3e      	cmp	r3, #62	; 0x3e
 8009558:	d918      	bls.n	800958c <PCD_EP_ISR_Handler+0x234>
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	095b      	lsrs	r3, r3, #5
 8009560:	82fb      	strh	r3, [r7, #22]
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	f003 031f 	and.w	r3, r3, #31
 800956a:	2b00      	cmp	r3, #0
 800956c:	d102      	bne.n	8009574 <PCD_EP_ISR_Handler+0x21c>
 800956e:	8afb      	ldrh	r3, [r7, #22]
 8009570:	3b01      	subs	r3, #1
 8009572:	82fb      	strh	r3, [r7, #22]
 8009574:	8afb      	ldrh	r3, [r7, #22]
 8009576:	029b      	lsls	r3, r3, #10
 8009578:	b29b      	uxth	r3, r3
 800957a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800957e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009582:	b29b      	uxth	r3, r3
 8009584:	461a      	mov	r2, r3
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	e012      	b.n	80095b2 <PCD_EP_ISR_Handler+0x25a>
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	085b      	lsrs	r3, r3, #1
 8009592:	82fb      	strh	r3, [r7, #22]
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <PCD_EP_ISR_Handler+0x24e>
 80095a0:	8afb      	ldrh	r3, [r7, #22]
 80095a2:	3301      	adds	r3, #1
 80095a4:	82fb      	strh	r3, [r7, #22]
 80095a6:	8afb      	ldrh	r3, [r7, #22]
 80095a8:	029b      	lsls	r3, r3, #10
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c2:	b29c      	uxth	r4, r3
 80095c4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80095c8:	b29c      	uxth	r4, r3
 80095ca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80095ce:	b29c      	uxth	r4, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	4b98      	ldr	r3, [pc, #608]	; (8009838 <PCD_EP_ISR_Handler+0x4e0>)
 80095d6:	4323      	orrs	r3, r4
 80095d8:	b29b      	uxth	r3, r3
 80095da:	8013      	strh	r3, [r2, #0]
 80095dc:	e1d4      	b.n	8009988 <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	7e7b      	ldrb	r3, [r7, #25]
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80095f0:	89bb      	ldrh	r3, [r7, #12]
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	b21b      	sxth	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f280 80d0 	bge.w	800979c <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	7e7b      	ldrb	r3, [r7, #25]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	b299      	uxth	r1, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	7e7b      	ldrb	r3, [r7, #25]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	441a      	add	r2, r3
 8009618:	f640 738f 	movw	r3, #3983	; 0xf8f
 800961c:	400b      	ands	r3, r1
 800961e:	b29b      	uxth	r3, r3
 8009620:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009622:	7e7b      	ldrb	r3, [r7, #25]
 8009624:	015b      	lsls	r3, r3, #5
 8009626:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	4413      	add	r3, r2
 800962e:	61fb      	str	r3, [r7, #28]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	7a9b      	ldrb	r3, [r3, #10]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d122      	bne.n	800967e <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009640:	b29b      	uxth	r3, r3
 8009642:	461a      	mov	r2, r3
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	4413      	add	r3, r2
 800964c:	3306      	adds	r3, #6
 800964e:	005b      	lsls	r3, r3, #1
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	6812      	ldr	r2, [r2, #0]
 8009654:	4413      	add	r3, r2
 8009656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	b29b      	uxth	r3, r3
 800965e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009662:	837b      	strh	r3, [r7, #26]
          if (count != 0U)
 8009664:	8b7b      	ldrh	r3, [r7, #26]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d073      	beq.n	8009752 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	6959      	ldr	r1, [r3, #20]
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	889a      	ldrh	r2, [r3, #4]
 8009676:	8b7b      	ldrh	r3, [r7, #26]
 8009678:	f002 ff5d 	bl	800c536 <USB_ReadPMA>
 800967c:	e069      	b.n	8009752 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	b29b      	uxth	r3, r3
 8009690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d022      	beq.n	80096de <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	461a      	mov	r2, r3
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	00db      	lsls	r3, r3, #3
 80096aa:	4413      	add	r3, r2
 80096ac:	3302      	adds	r3, #2
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6812      	ldr	r2, [r2, #0]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	b29b      	uxth	r3, r3
 80096be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096c2:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 80096c4:	8b7b      	ldrh	r3, [r7, #26]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d02b      	beq.n	8009722 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	6959      	ldr	r1, [r3, #20]
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	88da      	ldrh	r2, [r3, #6]
 80096d6:	8b7b      	ldrh	r3, [r7, #26]
 80096d8:	f002 ff2d 	bl	800c536 <USB_ReadPMA>
 80096dc:	e021      	b.n	8009722 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	4413      	add	r3, r2
 80096f2:	3306      	adds	r3, #6
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	6812      	ldr	r2, [r2, #0]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	b29b      	uxth	r3, r3
 8009704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009708:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 800970a:	8b7b      	ldrh	r3, [r7, #26]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d008      	beq.n	8009722 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6818      	ldr	r0, [r3, #0]
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	6959      	ldr	r1, [r3, #20]
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	891a      	ldrh	r2, [r3, #8]
 800971c:	8b7b      	ldrh	r3, [r7, #26]
 800971e:	f002 ff0a 	bl	800c536 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	b29a      	uxth	r2, r3
 8009734:	f640 730f 	movw	r3, #3855	; 0xf0f
 8009738:	4013      	ands	r3, r2
 800973a:	b299      	uxth	r1, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	461a      	mov	r2, r3
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	441a      	add	r2, r3
 800974a:	4b3c      	ldr	r3, [pc, #240]	; (800983c <PCD_EP_ISR_Handler+0x4e4>)
 800974c:	430b      	orrs	r3, r1
 800974e:	b29b      	uxth	r3, r3
 8009750:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	69da      	ldr	r2, [r3, #28]
 8009756:	8b7b      	ldrh	r3, [r7, #26]
 8009758:	441a      	add	r2, r3
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	695a      	ldr	r2, [r3, #20]
 8009762:	8b7b      	ldrh	r3, [r7, #26]
 8009764:	441a      	add	r2, r3
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d004      	beq.n	800977c <PCD_EP_ISR_Handler+0x424>
 8009772:	8b7a      	ldrh	r2, [r7, #26]
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	429a      	cmp	r2, r3
 800977a:	d206      	bcs.n	800978a <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f004 fb66 	bl	800de54 <HAL_PCD_DataOutStageCallback>
 8009788:	e008      	b.n	800979c <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	7819      	ldrb	r1, [r3, #0]
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	695a      	ldr	r2, [r3, #20]
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7ff fcb5 	bl	8009106 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800979c:	89bb      	ldrh	r3, [r7, #12]
 800979e:	b29b      	uxth	r3, r3
 80097a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 80ef 	beq.w	8009988 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 80097aa:	7e7b      	ldrb	r3, [r7, #25]
 80097ac:	015b      	lsls	r3, r3, #5
 80097ae:	3328      	adds	r3, #40	; 0x28
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	4413      	add	r3, r2
 80097b4:	61fb      	str	r3, [r7, #28]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	7e7b      	ldrb	r3, [r7, #25]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	6812      	ldr	r2, [r2, #0]
 80097ca:	4611      	mov	r1, r2
 80097cc:	7e7a      	ldrb	r2, [r7, #25]
 80097ce:	0092      	lsls	r2, r2, #2
 80097d0:	440a      	add	r2, r1
 80097d2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80097d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097da:	b29b      	uxth	r3, r3
 80097dc:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	7a9b      	ldrb	r3, [r3, #10]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d12c      	bne.n	8009840 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	4413      	add	r3, r2
 80097fa:	3302      	adds	r3, #2
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	6812      	ldr	r2, [r2, #0]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	b29b      	uxth	r3, r3
 800980c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 8083 	beq.w	8009924 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	6959      	ldr	r1, [r3, #20]
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	889a      	ldrh	r2, [r3, #4]
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	b29b      	uxth	r3, r3
 8009830:	f002 fe3b 	bl	800c4aa <USB_WritePMA>
 8009834:	e076      	b.n	8009924 <PCD_EP_ISR_Handler+0x5cc>
 8009836:	bf00      	nop
 8009838:	ffff8080 	.word	0xffff8080
 800983c:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	461a      	mov	r2, r3
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	b29b      	uxth	r3, r3
 8009852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009856:	2b00      	cmp	r3, #0
 8009858:	d026      	beq.n	80098a8 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009862:	b29b      	uxth	r3, r3
 8009864:	461a      	mov	r2, r3
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	4413      	add	r3, r2
 800986e:	3302      	adds	r3, #2
 8009870:	005b      	lsls	r3, r3, #1
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6812      	ldr	r2, [r2, #0]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	b29b      	uxth	r3, r3
 8009880:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	69db      	ldr	r3, [r3, #28]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d031      	beq.n	80098f4 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	6959      	ldr	r1, [r3, #20]
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	88da      	ldrh	r2, [r3, #6]
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	69db      	ldr	r3, [r3, #28]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	f002 fe02 	bl	800c4aa <USB_WritePMA>
 80098a6:	e025      	b.n	80098f4 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	461a      	mov	r2, r3
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	00db      	lsls	r3, r3, #3
 80098ba:	4413      	add	r3, r2
 80098bc:	3306      	adds	r3, #6
 80098be:	005b      	lsls	r3, r3, #1
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	6812      	ldr	r2, [r2, #0]
 80098c4:	4413      	add	r3, r2
 80098c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6818      	ldr	r0, [r3, #0]
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	6959      	ldr	r1, [r3, #20]
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	891a      	ldrh	r2, [r3, #8]
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	f002 fddb 	bl	800c4aa <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	461a      	mov	r2, r3
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	b29a      	uxth	r2, r3
 8009906:	f640 730f 	movw	r3, #3855	; 0xf0f
 800990a:	4013      	ands	r3, r2
 800990c:	b299      	uxth	r1, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	441a      	add	r2, r3
 800991c:	4b22      	ldr	r3, [pc, #136]	; (80099a8 <PCD_EP_ISR_Handler+0x650>)
 800991e:	430b      	orrs	r3, r1
 8009920:	b29b      	uxth	r3, r3
 8009922:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800992c:	b29b      	uxth	r3, r3
 800992e:	461a      	mov	r2, r3
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	4413      	add	r3, r2
 8009938:	3302      	adds	r3, #2
 800993a:	005b      	lsls	r3, r3, #1
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	6812      	ldr	r2, [r2, #0]
 8009940:	4413      	add	r3, r2
 8009942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	b29b      	uxth	r3, r3
 800994a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	695a      	ldr	r2, [r3, #20]
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	441a      	add	r2, r3
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d106      	bne.n	8009976 <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f004 fa88 	bl	800de84 <HAL_PCD_DataInStageCallback>
 8009974:	e008      	b.n	8009988 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	7819      	ldrb	r1, [r3, #0]
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	695a      	ldr	r2, [r3, #20]
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff fc10 	bl	80091a8 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009990:	b29b      	uxth	r3, r3
 8009992:	461a      	mov	r2, r3
 8009994:	81fa      	strh	r2, [r7, #14]
 8009996:	b21b      	sxth	r3, r3
 8009998:	2b00      	cmp	r3, #0
 800999a:	f6ff acec 	blt.w	8009376 <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3724      	adds	r7, #36	; 0x24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd90      	pop	{r4, r7, pc}
 80099a8:	ffffc080 	.word	0xffffc080

080099ac <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	607b      	str	r3, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	817b      	strh	r3, [r7, #10]
 80099ba:	4613      	mov	r3, r2
 80099bc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 80099c2:	897b      	ldrh	r3, [r7, #10]
 80099c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d008      	beq.n	80099de <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80099cc:	897b      	ldrh	r3, [r7, #10]
 80099ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d2:	015b      	lsls	r3, r3, #5
 80099d4:	3328      	adds	r3, #40	; 0x28
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	4413      	add	r3, r2
 80099da:	617b      	str	r3, [r7, #20]
 80099dc:	e006      	b.n	80099ec <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80099de:	897b      	ldrh	r3, [r7, #10]
 80099e0:	015b      	lsls	r3, r3, #5
 80099e2:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4413      	add	r3, r2
 80099ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80099ec:	893b      	ldrh	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d107      	bne.n	8009a02 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2200      	movs	r2, #0
 80099f6:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	809a      	strh	r2, [r3, #4]
 8009a00:	e00b      	b.n	8009a1a <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2201      	movs	r2, #1
 8009a06:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	0c1b      	lsrs	r3, r3, #16
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	371c      	adds	r7, #28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bc80      	pop	{r7}
 8009a24:	4770      	bx	lr
	...

08009a28 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009a2c:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <HAL_PWR_EnableBkUpAccess+0x14>)
 8009a2e:	2201      	movs	r2, #1
 8009a30:	601a      	str	r2, [r3, #0]
}
 8009a32:	bf00      	nop
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	420e0020 	.word	0x420e0020

08009a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 8087 	beq.w	8009b68 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8009a5a:	4b92      	ldr	r3, [pc, #584]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f003 030c 	and.w	r3, r3, #12
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d00c      	beq.n	8009a80 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009a66:	4b8f      	ldr	r3, [pc, #572]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f003 030c 	and.w	r3, r3, #12
 8009a6e:	2b08      	cmp	r3, #8
 8009a70:	d112      	bne.n	8009a98 <HAL_RCC_OscConfig+0x58>
 8009a72:	4b8c      	ldr	r3, [pc, #560]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a7e:	d10b      	bne.n	8009a98 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a80:	4b88      	ldr	r3, [pc, #544]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d06c      	beq.n	8009b66 <HAL_RCC_OscConfig+0x126>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d168      	bne.n	8009b66 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e22d      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa0:	d106      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x70>
 8009aa2:	4b80      	ldr	r3, [pc, #512]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a7f      	ldr	r2, [pc, #508]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	e02e      	b.n	8009b0e <HAL_RCC_OscConfig+0xce>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10c      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x92>
 8009ab8:	4b7a      	ldr	r3, [pc, #488]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a79      	ldr	r2, [pc, #484]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	4b77      	ldr	r3, [pc, #476]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a76      	ldr	r2, [pc, #472]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	e01d      	b.n	8009b0e <HAL_RCC_OscConfig+0xce>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ada:	d10c      	bne.n	8009af6 <HAL_RCC_OscConfig+0xb6>
 8009adc:	4b71      	ldr	r3, [pc, #452]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a70      	ldr	r2, [pc, #448]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	4b6e      	ldr	r3, [pc, #440]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a6d      	ldr	r2, [pc, #436]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	e00b      	b.n	8009b0e <HAL_RCC_OscConfig+0xce>
 8009af6:	4b6b      	ldr	r3, [pc, #428]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a6a      	ldr	r2, [pc, #424]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	4b68      	ldr	r3, [pc, #416]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a67      	ldr	r2, [pc, #412]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b0c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d013      	beq.n	8009b3e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b16:	f7fd ffad 	bl	8007a74 <HAL_GetTick>
 8009b1a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b1c:	e008      	b.n	8009b30 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b1e:	f7fd ffa9 	bl	8007a74 <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	2b64      	cmp	r3, #100	; 0x64
 8009b2a:	d901      	bls.n	8009b30 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e1e1      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b30:	4b5c      	ldr	r3, [pc, #368]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0f0      	beq.n	8009b1e <HAL_RCC_OscConfig+0xde>
 8009b3c:	e014      	b.n	8009b68 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b3e:	f7fd ff99 	bl	8007a74 <HAL_GetTick>
 8009b42:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b44:	e008      	b.n	8009b58 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b46:	f7fd ff95 	bl	8007a74 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	2b64      	cmp	r3, #100	; 0x64
 8009b52:	d901      	bls.n	8009b58 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e1cd      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b58:	4b52      	ldr	r3, [pc, #328]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1f0      	bne.n	8009b46 <HAL_RCC_OscConfig+0x106>
 8009b64:	e000      	b.n	8009b68 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0302 	and.w	r3, r3, #2
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d063      	beq.n	8009c3c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8009b74:	4b4b      	ldr	r3, [pc, #300]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	f003 030c 	and.w	r3, r3, #12
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009b80:	4b48      	ldr	r3, [pc, #288]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f003 030c 	and.w	r3, r3, #12
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d11c      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x186>
 8009b8c:	4b45      	ldr	r3, [pc, #276]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d116      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b98:	4b42      	ldr	r3, [pc, #264]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0302 	and.w	r3, r3, #2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d005      	beq.n	8009bb0 <HAL_RCC_OscConfig+0x170>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d001      	beq.n	8009bb0 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e1a1      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bb0:	4b3c      	ldr	r3, [pc, #240]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	00db      	lsls	r3, r3, #3
 8009bbe:	4939      	ldr	r1, [pc, #228]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bc4:	e03a      	b.n	8009c3c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d020      	beq.n	8009c10 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009bce:	4b36      	ldr	r3, [pc, #216]	; (8009ca8 <HAL_RCC_OscConfig+0x268>)
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bd4:	f7fd ff4e 	bl	8007a74 <HAL_GetTick>
 8009bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bda:	e008      	b.n	8009bee <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bdc:	f7fd ff4a 	bl	8007a74 <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d901      	bls.n	8009bee <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e182      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bee:	4b2d      	ldr	r3, [pc, #180]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0f0      	beq.n	8009bdc <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bfa:	4b2a      	ldr	r3, [pc, #168]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	00db      	lsls	r3, r3, #3
 8009c08:	4926      	ldr	r1, [pc, #152]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	600b      	str	r3, [r1, #0]
 8009c0e:	e015      	b.n	8009c3c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c10:	4b25      	ldr	r3, [pc, #148]	; (8009ca8 <HAL_RCC_OscConfig+0x268>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c16:	f7fd ff2d 	bl	8007a74 <HAL_GetTick>
 8009c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c1c:	e008      	b.n	8009c30 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c1e:	f7fd ff29 	bl	8007a74 <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d901      	bls.n	8009c30 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e161      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c30:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1f0      	bne.n	8009c1e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0308 	and.w	r3, r3, #8
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d039      	beq.n	8009cbc <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d019      	beq.n	8009c84 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c50:	4b16      	ldr	r3, [pc, #88]	; (8009cac <HAL_RCC_OscConfig+0x26c>)
 8009c52:	2201      	movs	r2, #1
 8009c54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c56:	f7fd ff0d 	bl	8007a74 <HAL_GetTick>
 8009c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c5c:	e008      	b.n	8009c70 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c5e:	f7fd ff09 	bl	8007a74 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d901      	bls.n	8009c70 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e141      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c70:	4b0c      	ldr	r3, [pc, #48]	; (8009ca4 <HAL_RCC_OscConfig+0x264>)
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0f0      	beq.n	8009c5e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8009c7c:	2001      	movs	r0, #1
 8009c7e:	f000 fae3 	bl	800a248 <RCC_Delay>
 8009c82:	e01b      	b.n	8009cbc <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c84:	4b09      	ldr	r3, [pc, #36]	; (8009cac <HAL_RCC_OscConfig+0x26c>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c8a:	f7fd fef3 	bl	8007a74 <HAL_GetTick>
 8009c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c90:	e00e      	b.n	8009cb0 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c92:	f7fd feef 	bl	8007a74 <HAL_GetTick>
 8009c96:	4602      	mov	r2, r0
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d907      	bls.n	8009cb0 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e127      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
 8009ca4:	40021000 	.word	0x40021000
 8009ca8:	42420000 	.word	0x42420000
 8009cac:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cb0:	4b92      	ldr	r3, [pc, #584]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	f003 0302 	and.w	r3, r3, #2
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1ea      	bne.n	8009c92 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 80a6 	beq.w	8009e16 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cce:	4b8b      	ldr	r3, [pc, #556]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10d      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cda:	4b88      	ldr	r3, [pc, #544]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	4a87      	ldr	r2, [pc, #540]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce4:	61d3      	str	r3, [r2, #28]
 8009ce6:	4b85      	ldr	r3, [pc, #532]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cee:	60fb      	str	r3, [r7, #12]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cf6:	4b82      	ldr	r3, [pc, #520]	; (8009f00 <HAL_RCC_OscConfig+0x4c0>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d118      	bne.n	8009d34 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d02:	4b7f      	ldr	r3, [pc, #508]	; (8009f00 <HAL_RCC_OscConfig+0x4c0>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a7e      	ldr	r2, [pc, #504]	; (8009f00 <HAL_RCC_OscConfig+0x4c0>)
 8009d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d0e:	f7fd feb1 	bl	8007a74 <HAL_GetTick>
 8009d12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d14:	e008      	b.n	8009d28 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d16:	f7fd fead 	bl	8007a74 <HAL_GetTick>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	2b64      	cmp	r3, #100	; 0x64
 8009d22:	d901      	bls.n	8009d28 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e0e5      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d28:	4b75      	ldr	r3, [pc, #468]	; (8009f00 <HAL_RCC_OscConfig+0x4c0>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d0f0      	beq.n	8009d16 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d106      	bne.n	8009d4a <HAL_RCC_OscConfig+0x30a>
 8009d3c:	4b6f      	ldr	r3, [pc, #444]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d3e:	6a1b      	ldr	r3, [r3, #32]
 8009d40:	4a6e      	ldr	r2, [pc, #440]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d42:	f043 0301 	orr.w	r3, r3, #1
 8009d46:	6213      	str	r3, [r2, #32]
 8009d48:	e02d      	b.n	8009da6 <HAL_RCC_OscConfig+0x366>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10c      	bne.n	8009d6c <HAL_RCC_OscConfig+0x32c>
 8009d52:	4b6a      	ldr	r3, [pc, #424]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	4a69      	ldr	r2, [pc, #420]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d58:	f023 0301 	bic.w	r3, r3, #1
 8009d5c:	6213      	str	r3, [r2, #32]
 8009d5e:	4b67      	ldr	r3, [pc, #412]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	4a66      	ldr	r2, [pc, #408]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d64:	f023 0304 	bic.w	r3, r3, #4
 8009d68:	6213      	str	r3, [r2, #32]
 8009d6a:	e01c      	b.n	8009da6 <HAL_RCC_OscConfig+0x366>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	2b05      	cmp	r3, #5
 8009d72:	d10c      	bne.n	8009d8e <HAL_RCC_OscConfig+0x34e>
 8009d74:	4b61      	ldr	r3, [pc, #388]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d76:	6a1b      	ldr	r3, [r3, #32]
 8009d78:	4a60      	ldr	r2, [pc, #384]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d7a:	f043 0304 	orr.w	r3, r3, #4
 8009d7e:	6213      	str	r3, [r2, #32]
 8009d80:	4b5e      	ldr	r3, [pc, #376]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	4a5d      	ldr	r2, [pc, #372]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d86:	f043 0301 	orr.w	r3, r3, #1
 8009d8a:	6213      	str	r3, [r2, #32]
 8009d8c:	e00b      	b.n	8009da6 <HAL_RCC_OscConfig+0x366>
 8009d8e:	4b5b      	ldr	r3, [pc, #364]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	4a5a      	ldr	r2, [pc, #360]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d94:	f023 0301 	bic.w	r3, r3, #1
 8009d98:	6213      	str	r3, [r2, #32]
 8009d9a:	4b58      	ldr	r3, [pc, #352]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	4a57      	ldr	r2, [pc, #348]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009da0:	f023 0304 	bic.w	r3, r3, #4
 8009da4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d015      	beq.n	8009dda <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dae:	f7fd fe61 	bl	8007a74 <HAL_GetTick>
 8009db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009db4:	e00a      	b.n	8009dcc <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009db6:	f7fd fe5d 	bl	8007a74 <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d901      	bls.n	8009dcc <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e093      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dcc:	4b4b      	ldr	r3, [pc, #300]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	f003 0302 	and.w	r3, r3, #2
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d0ee      	beq.n	8009db6 <HAL_RCC_OscConfig+0x376>
 8009dd8:	e014      	b.n	8009e04 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dda:	f7fd fe4b 	bl	8007a74 <HAL_GetTick>
 8009dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009de0:	e00a      	b.n	8009df8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009de2:	f7fd fe47 	bl	8007a74 <HAL_GetTick>
 8009de6:	4602      	mov	r2, r0
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d901      	bls.n	8009df8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e07d      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009df8:	4b40      	ldr	r3, [pc, #256]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009dfa:	6a1b      	ldr	r3, [r3, #32]
 8009dfc:	f003 0302 	and.w	r3, r3, #2
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1ee      	bne.n	8009de2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009e04:	7dfb      	ldrb	r3, [r7, #23]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d105      	bne.n	8009e16 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e0a:	4b3c      	ldr	r3, [pc, #240]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	4a3b      	ldr	r2, [pc, #236]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d069      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e1e:	4b37      	ldr	r3, [pc, #220]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f003 030c 	and.w	r3, r3, #12
 8009e26:	2b08      	cmp	r3, #8
 8009e28:	d061      	beq.n	8009eee <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d146      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e32:	4b34      	ldr	r3, [pc, #208]	; (8009f04 <HAL_RCC_OscConfig+0x4c4>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e38:	f7fd fe1c 	bl	8007a74 <HAL_GetTick>
 8009e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e3e:	e008      	b.n	8009e52 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e40:	f7fd fe18 	bl	8007a74 <HAL_GetTick>
 8009e44:	4602      	mov	r2, r0
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d901      	bls.n	8009e52 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8009e4e:	2303      	movs	r3, #3
 8009e50:	e050      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e52:	4b2a      	ldr	r3, [pc, #168]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1f0      	bne.n	8009e40 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e66:	d108      	bne.n	8009e7a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009e68:	4b24      	ldr	r3, [pc, #144]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	4921      	ldr	r1, [pc, #132]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e7a:	4b20      	ldr	r3, [pc, #128]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a19      	ldr	r1, [r3, #32]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	430b      	orrs	r3, r1
 8009e8c:	491b      	ldr	r1, [pc, #108]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e92:	4b1c      	ldr	r3, [pc, #112]	; (8009f04 <HAL_RCC_OscConfig+0x4c4>)
 8009e94:	2201      	movs	r2, #1
 8009e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e98:	f7fd fdec 	bl	8007a74 <HAL_GetTick>
 8009e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009e9e:	e008      	b.n	8009eb2 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ea0:	f7fd fde8 	bl	8007a74 <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e020      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009eb2:	4b12      	ldr	r3, [pc, #72]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0f0      	beq.n	8009ea0 <HAL_RCC_OscConfig+0x460>
 8009ebe:	e018      	b.n	8009ef2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ec0:	4b10      	ldr	r3, [pc, #64]	; (8009f04 <HAL_RCC_OscConfig+0x4c4>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ec6:	f7fd fdd5 	bl	8007a74 <HAL_GetTick>
 8009eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009ecc:	e008      	b.n	8009ee0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ece:	f7fd fdd1 	bl	8007a74 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d901      	bls.n	8009ee0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e009      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009ee0:	4b06      	ldr	r3, [pc, #24]	; (8009efc <HAL_RCC_OscConfig+0x4bc>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1f0      	bne.n	8009ece <HAL_RCC_OscConfig+0x48e>
 8009eec:	e001      	b.n	8009ef2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e000      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	40021000 	.word	0x40021000
 8009f00:	40007000 	.word	0x40007000
 8009f04:	42420060 	.word	0x42420060

08009f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8009f16:	4b7e      	ldr	r3, [pc, #504]	; (800a110 <HAL_RCC_ClockConfig+0x208>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0307 	and.w	r3, r3, #7
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d910      	bls.n	8009f46 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f24:	4b7a      	ldr	r3, [pc, #488]	; (800a110 <HAL_RCC_ClockConfig+0x208>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f023 0207 	bic.w	r2, r3, #7
 8009f2c:	4978      	ldr	r1, [pc, #480]	; (800a110 <HAL_RCC_ClockConfig+0x208>)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009f34:	4b76      	ldr	r3, [pc, #472]	; (800a110 <HAL_RCC_ClockConfig+0x208>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0307 	and.w	r3, r3, #7
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d001      	beq.n	8009f46 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e0e0      	b.n	800a108 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d020      	beq.n	8009f94 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0304 	and.w	r3, r3, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d005      	beq.n	8009f6a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f5e:	4b6d      	ldr	r3, [pc, #436]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	4a6c      	ldr	r2, [pc, #432]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 8009f64:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009f68:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0308 	and.w	r3, r3, #8
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d005      	beq.n	8009f82 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f76:	4b67      	ldr	r3, [pc, #412]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	4a66      	ldr	r2, [pc, #408]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 8009f7c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009f80:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f82:	4b64      	ldr	r3, [pc, #400]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	4961      	ldr	r1, [pc, #388]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d06a      	beq.n	800a076 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d107      	bne.n	8009fb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fa8:	4b5a      	ldr	r3, [pc, #360]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d115      	bne.n	8009fe0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e0a7      	b.n	800a108 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d107      	bne.n	8009fd0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fc0:	4b54      	ldr	r3, [pc, #336]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d109      	bne.n	8009fe0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e09b      	b.n	800a108 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fd0:	4b50      	ldr	r3, [pc, #320]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0302 	and.w	r3, r3, #2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e093      	b.n	800a108 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fe0:	4b4c      	ldr	r3, [pc, #304]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	f023 0203 	bic.w	r2, r3, #3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	4949      	ldr	r1, [pc, #292]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ff2:	f7fd fd3f 	bl	8007a74 <HAL_GetTick>
 8009ff6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d112      	bne.n	800a026 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a000:	e00a      	b.n	800a018 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a002:	f7fd fd37 	bl	8007a74 <HAL_GetTick>
 800a006:	4602      	mov	r2, r0
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a010:	4293      	cmp	r3, r2
 800a012:	d901      	bls.n	800a018 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e077      	b.n	800a108 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a018:	4b3e      	ldr	r3, [pc, #248]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	f003 030c 	and.w	r3, r3, #12
 800a020:	2b04      	cmp	r3, #4
 800a022:	d1ee      	bne.n	800a002 <HAL_RCC_ClockConfig+0xfa>
 800a024:	e027      	b.n	800a076 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d11d      	bne.n	800a06a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a02e:	e00a      	b.n	800a046 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a030:	f7fd fd20 	bl	8007a74 <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a03e:	4293      	cmp	r3, r2
 800a040:	d901      	bls.n	800a046 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e060      	b.n	800a108 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a046:	4b33      	ldr	r3, [pc, #204]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f003 030c 	and.w	r3, r3, #12
 800a04e:	2b08      	cmp	r3, #8
 800a050:	d1ee      	bne.n	800a030 <HAL_RCC_ClockConfig+0x128>
 800a052:	e010      	b.n	800a076 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a054:	f7fd fd0e 	bl	8007a74 <HAL_GetTick>
 800a058:	4602      	mov	r2, r0
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a062:	4293      	cmp	r3, r2
 800a064:	d901      	bls.n	800a06a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e04e      	b.n	800a108 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a06a:	4b2a      	ldr	r3, [pc, #168]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	f003 030c 	and.w	r3, r3, #12
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1ee      	bne.n	800a054 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800a076:	4b26      	ldr	r3, [pc, #152]	; (800a110 <HAL_RCC_ClockConfig+0x208>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 0307 	and.w	r3, r3, #7
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	429a      	cmp	r2, r3
 800a082:	d210      	bcs.n	800a0a6 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a084:	4b22      	ldr	r3, [pc, #136]	; (800a110 <HAL_RCC_ClockConfig+0x208>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f023 0207 	bic.w	r2, r3, #7
 800a08c:	4920      	ldr	r1, [pc, #128]	; (800a110 <HAL_RCC_ClockConfig+0x208>)
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	4313      	orrs	r3, r2
 800a092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a094:	4b1e      	ldr	r3, [pc, #120]	; (800a110 <HAL_RCC_ClockConfig+0x208>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d001      	beq.n	800a0a6 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e030      	b.n	800a108 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0304 	and.w	r3, r3, #4
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d008      	beq.n	800a0c4 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a0b2:	4b18      	ldr	r3, [pc, #96]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	4915      	ldr	r1, [pc, #84]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0308 	and.w	r3, r3, #8
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d009      	beq.n	800a0e4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a0d0:	4b10      	ldr	r3, [pc, #64]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	490d      	ldr	r1, [pc, #52]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a0e4:	f000 f81c 	bl	800a120 <HAL_RCC_GetSysClockFreq>
 800a0e8:	4601      	mov	r1, r0
 800a0ea:	4b0a      	ldr	r3, [pc, #40]	; (800a114 <HAL_RCC_ClockConfig+0x20c>)
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	091b      	lsrs	r3, r3, #4
 800a0f0:	f003 030f 	and.w	r3, r3, #15
 800a0f4:	4a08      	ldr	r2, [pc, #32]	; (800a118 <HAL_RCC_ClockConfig+0x210>)
 800a0f6:	5cd3      	ldrb	r3, [r2, r3]
 800a0f8:	fa21 f303 	lsr.w	r3, r1, r3
 800a0fc:	4a07      	ldr	r2, [pc, #28]	; (800a11c <HAL_RCC_ClockConfig+0x214>)
 800a0fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800a100:	2000      	movs	r0, #0
 800a102:	f7fd fc75 	bl	80079f0 <HAL_InitTick>
  
  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	40022000 	.word	0x40022000
 800a114:	40021000 	.word	0x40021000
 800a118:	08010b68 	.word	0x08010b68
 800a11c:	20000000 	.word	0x20000000

0800a120 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a120:	b490      	push	{r4, r7}
 800a122:	b08a      	sub	sp, #40	; 0x28
 800a124:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a126:	4b2a      	ldr	r3, [pc, #168]	; (800a1d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800a128:	1d3c      	adds	r4, r7, #4
 800a12a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a12c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a130:	4b28      	ldr	r3, [pc, #160]	; (800a1d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	2300      	movs	r3, #0
 800a13c:	61bb      	str	r3, [r7, #24]
 800a13e:	2300      	movs	r3, #0
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
 800a142:	2300      	movs	r3, #0
 800a144:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a146:	2300      	movs	r3, #0
 800a148:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a14a:	4b23      	ldr	r3, [pc, #140]	; (800a1d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	f003 030c 	and.w	r3, r3, #12
 800a156:	2b04      	cmp	r3, #4
 800a158:	d002      	beq.n	800a160 <HAL_RCC_GetSysClockFreq+0x40>
 800a15a:	2b08      	cmp	r3, #8
 800a15c:	d003      	beq.n	800a166 <HAL_RCC_GetSysClockFreq+0x46>
 800a15e:	e02d      	b.n	800a1bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a160:	4b1e      	ldr	r3, [pc, #120]	; (800a1dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800a162:	623b      	str	r3, [r7, #32]
      break;
 800a164:	e02d      	b.n	800a1c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	0c9b      	lsrs	r3, r3, #18
 800a16a:	f003 030f 	and.w	r3, r3, #15
 800a16e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a172:	4413      	add	r3, r2
 800a174:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800a178:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d013      	beq.n	800a1ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a184:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	0c5b      	lsrs	r3, r3, #17
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a192:	4413      	add	r3, r2
 800a194:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a198:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	4a0f      	ldr	r2, [pc, #60]	; (800a1dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800a19e:	fb02 f203 	mul.w	r2, r2, r3
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1aa:	e004      	b.n	800a1b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	4a0c      	ldr	r2, [pc, #48]	; (800a1e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
 800a1b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	623b      	str	r3, [r7, #32]
      break;
 800a1ba:	e002      	b.n	800a1c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a1bc:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800a1be:	623b      	str	r3, [r7, #32]
      break;
 800a1c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3728      	adds	r7, #40	; 0x28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bc90      	pop	{r4, r7}
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	08010af8 	.word	0x08010af8
 800a1d4:	08010b08 	.word	0x08010b08
 800a1d8:	40021000 	.word	0x40021000
 800a1dc:	007a1200 	.word	0x007a1200
 800a1e0:	003d0900 	.word	0x003d0900

0800a1e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1e8:	4b02      	ldr	r3, [pc, #8]	; (800a1f4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bc80      	pop	{r7}
 800a1f2:	4770      	bx	lr
 800a1f4:	20000000 	.word	0x20000000

0800a1f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a1fc:	f7ff fff2 	bl	800a1e4 <HAL_RCC_GetHCLKFreq>
 800a200:	4601      	mov	r1, r0
 800a202:	4b05      	ldr	r3, [pc, #20]	; (800a218 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	0a1b      	lsrs	r3, r3, #8
 800a208:	f003 0307 	and.w	r3, r3, #7
 800a20c:	4a03      	ldr	r2, [pc, #12]	; (800a21c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a20e:	5cd3      	ldrb	r3, [r2, r3]
 800a210:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a214:	4618      	mov	r0, r3
 800a216:	bd80      	pop	{r7, pc}
 800a218:	40021000 	.word	0x40021000
 800a21c:	08010b78 	.word	0x08010b78

0800a220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a224:	f7ff ffde 	bl	800a1e4 <HAL_RCC_GetHCLKFreq>
 800a228:	4601      	mov	r1, r0
 800a22a:	4b05      	ldr	r3, [pc, #20]	; (800a240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	0adb      	lsrs	r3, r3, #11
 800a230:	f003 0307 	and.w	r3, r3, #7
 800a234:	4a03      	ldr	r2, [pc, #12]	; (800a244 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a236:	5cd3      	ldrb	r3, [r2, r3]
 800a238:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a23c:	4618      	mov	r0, r3
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	40021000 	.word	0x40021000
 800a244:	08010b78 	.word	0x08010b78

0800a248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a250:	4b0a      	ldr	r3, [pc, #40]	; (800a27c <RCC_Delay+0x34>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a0a      	ldr	r2, [pc, #40]	; (800a280 <RCC_Delay+0x38>)
 800a256:	fba2 2303 	umull	r2, r3, r2, r3
 800a25a:	0a5b      	lsrs	r3, r3, #9
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	fb02 f303 	mul.w	r3, r2, r3
 800a262:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800a264:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	1e5a      	subs	r2, r3, #1
 800a26a:	60fa      	str	r2, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1f9      	bne.n	800a264 <RCC_Delay+0x1c>
}
 800a270:	bf00      	nop
 800a272:	3714      	adds	r7, #20
 800a274:	46bd      	mov	sp, r7
 800a276:	bc80      	pop	{r7}
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	20000000 	.word	0x20000000
 800a280:	10624dd3 	.word	0x10624dd3

0800a284 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800a28c:	2300      	movs	r3, #0
 800a28e:	613b      	str	r3, [r7, #16]
 800a290:	2300      	movs	r3, #0
 800a292:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0301 	and.w	r3, r3, #1
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d07d      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2a4:	4b4f      	ldr	r3, [pc, #316]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10d      	bne.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a2b0:	4b4c      	ldr	r3, [pc, #304]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a2b2:	69db      	ldr	r3, [r3, #28]
 800a2b4:	4a4b      	ldr	r2, [pc, #300]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a2b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ba:	61d3      	str	r3, [r2, #28]
 800a2bc:	4b49      	ldr	r3, [pc, #292]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a2be:	69db      	ldr	r3, [r3, #28]
 800a2c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2c4:	60bb      	str	r3, [r7, #8]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2cc:	4b46      	ldr	r3, [pc, #280]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d118      	bne.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a2d8:	4b43      	ldr	r3, [pc, #268]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a42      	ldr	r2, [pc, #264]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a2de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2e2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a2e4:	f7fd fbc6 	bl	8007a74 <HAL_GetTick>
 800a2e8:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2ea:	e008      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2ec:	f7fd fbc2 	bl	8007a74 <HAL_GetTick>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	2b64      	cmp	r3, #100	; 0x64
 800a2f8:	d901      	bls.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	e06d      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2fe:	4b3a      	ldr	r3, [pc, #232]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0f0      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a30a:	4b36      	ldr	r3, [pc, #216]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a312:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d02e      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	429a      	cmp	r2, r3
 800a326:	d027      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a328:	4b2e      	ldr	r3, [pc, #184]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a330:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a332:	4b2e      	ldr	r3, [pc, #184]	; (800a3ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a334:	2201      	movs	r2, #1
 800a336:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a338:	4b2c      	ldr	r3, [pc, #176]	; (800a3ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a33e:	4a29      	ldr	r2, [pc, #164]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d014      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a34e:	f7fd fb91 	bl	8007a74 <HAL_GetTick>
 800a352:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a354:	e00a      	b.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a356:	f7fd fb8d 	bl	8007a74 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	f241 3288 	movw	r2, #5000	; 0x1388
 800a364:	4293      	cmp	r3, r2
 800a366:	d901      	bls.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e036      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a36c:	4b1d      	ldr	r3, [pc, #116]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a36e:	6a1b      	ldr	r3, [r3, #32]
 800a370:	f003 0302 	and.w	r3, r3, #2
 800a374:	2b00      	cmp	r3, #0
 800a376:	d0ee      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a378:	4b1a      	ldr	r3, [pc, #104]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a37a:	6a1b      	ldr	r3, [r3, #32]
 800a37c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	4917      	ldr	r1, [pc, #92]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a386:	4313      	orrs	r3, r2
 800a388:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d105      	bne.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a390:	4b14      	ldr	r3, [pc, #80]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	4a13      	ldr	r2, [pc, #76]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a39a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d008      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a3a8:	4b0e      	ldr	r3, [pc, #56]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	490b      	ldr	r1, [pc, #44]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0310 	and.w	r3, r3, #16
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d008      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a3c6:	4b07      	ldr	r3, [pc, #28]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	4904      	ldr	r1, [pc, #16]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	40021000 	.word	0x40021000
 800a3e8:	40007000 	.word	0x40007000
 800a3ec:	42420440 	.word	0x42420440

0800a3f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a3f0:	b590      	push	{r4, r7, lr}
 800a3f2:	b08d      	sub	sp, #52	; 0x34
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a3f8:	4b6c      	ldr	r3, [pc, #432]	; (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800a3fa:	f107 040c 	add.w	r4, r7, #12
 800a3fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a404:	4b6a      	ldr	r3, [pc, #424]	; (800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
 800a40e:	2300      	movs	r3, #0
 800a410:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a412:	2300      	movs	r3, #0
 800a414:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	61fb      	str	r3, [r7, #28]
 800a41a:	2300      	movs	r3, #0
 800a41c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3b01      	subs	r3, #1
 800a422:	2b0f      	cmp	r3, #15
 800a424:	f200 80b9 	bhi.w	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a428:	a201      	add	r2, pc, #4	; (adr r2, 800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800a42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42e:	bf00      	nop
 800a430:	0800a513 	.word	0x0800a513
 800a434:	0800a57f 	.word	0x0800a57f
 800a438:	0800a59b 	.word	0x0800a59b
 800a43c:	0800a503 	.word	0x0800a503
 800a440:	0800a59b 	.word	0x0800a59b
 800a444:	0800a59b 	.word	0x0800a59b
 800a448:	0800a59b 	.word	0x0800a59b
 800a44c:	0800a50b 	.word	0x0800a50b
 800a450:	0800a59b 	.word	0x0800a59b
 800a454:	0800a59b 	.word	0x0800a59b
 800a458:	0800a59b 	.word	0x0800a59b
 800a45c:	0800a59b 	.word	0x0800a59b
 800a460:	0800a59b 	.word	0x0800a59b
 800a464:	0800a59b 	.word	0x0800a59b
 800a468:	0800a59b 	.word	0x0800a59b
 800a46c:	0800a471 	.word	0x0800a471
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800a470:	4b50      	ldr	r3, [pc, #320]	; (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800a476:	4b4f      	ldr	r3, [pc, #316]	; (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 808d 	beq.w	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	0c9b      	lsrs	r3, r3, #18
 800a488:	f003 030f 	and.w	r3, r3, #15
 800a48c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a490:	4413      	add	r3, r2
 800a492:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800a496:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d018      	beq.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a4a2:	4b44      	ldr	r3, [pc, #272]	; (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	0c5b      	lsrs	r3, r3, #17
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00d      	beq.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800a4c2:	4a3d      	ldr	r2, [pc, #244]	; (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	fbb2 f2f3 	udiv	r2, r2, r3
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	fb02 f303 	mul.w	r3, r2, r3
 800a4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4d2:	e004      	b.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	4a39      	ldr	r2, [pc, #228]	; (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 800a4d8:	fb02 f303 	mul.w	r3, r2, r3
 800a4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800a4de:	4b35      	ldr	r3, [pc, #212]	; (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4ea:	d102      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800a4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ee:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800a4f0:	e055      	b.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          frequency = (pllclk * 2) / 3;
 800a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	4a32      	ldr	r2, [pc, #200]	; (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>)
 800a4f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800a500:	e04d      	b.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800a502:	f7ff fe0d 	bl	800a120 <HAL_RCC_GetSysClockFreq>
 800a506:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800a508:	e04a      	b.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800a50a:	f7ff fe09 	bl	800a120 <HAL_RCC_GetSysClockFreq>
 800a50e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800a510:	e046      	b.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800a512:	4b28      	ldr	r3, [pc, #160]	; (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a51e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a522:	d108      	bne.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d003      	beq.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 800a52e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a532:	62bb      	str	r3, [r7, #40]	; 0x28
 800a534:	e022      	b.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a53c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a540:	d109      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800a542:	4b1c      	ldr	r3, [pc, #112]	; (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	f003 0302 	and.w	r3, r3, #2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d003      	beq.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 800a54e:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a552:	62bb      	str	r3, [r7, #40]	; 0x28
 800a554:	e012      	b.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a55c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a560:	d109      	bne.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a562:	4b14      	ldr	r3, [pc, #80]	; (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        frequency = HSE_VALUE / 128U;
 800a56e:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a572:	62bb      	str	r3, [r7, #40]	; 0x28
 800a574:	e002      	b.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 800a576:	2300      	movs	r3, #0
 800a578:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800a57a:	e011      	b.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800a57c:	e010      	b.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800a57e:	f7ff fe4f 	bl	800a220 <HAL_RCC_GetPCLK2Freq>
 800a582:	4602      	mov	r2, r0
 800a584:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	0b9b      	lsrs	r3, r3, #14
 800a58a:	f003 0303 	and.w	r3, r3, #3
 800a58e:	3301      	adds	r3, #1
 800a590:	005b      	lsls	r3, r3, #1
 800a592:	fbb2 f3f3 	udiv	r3, r2, r3
 800a596:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800a598:	e002      	b.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  default: 
    {
      break;
 800a59a:	bf00      	nop
 800a59c:	e000      	b.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      break;
 800a59e:	bf00      	nop
    }
  }
  return(frequency);
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3734      	adds	r7, #52	; 0x34
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd90      	pop	{r4, r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	08010b0c 	.word	0x08010b0c
 800a5b0:	08010b1c 	.word	0x08010b1c
 800a5b4:	40021000 	.word	0x40021000
 800a5b8:	007a1200 	.word	0x007a1200
 800a5bc:	003d0900 	.word	0x003d0900
 800a5c0:	aaaaaaab 	.word	0xaaaaaaab

0800a5c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e084      	b.n	800a6e4 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	7c5b      	ldrb	r3, [r3, #17]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d105      	bne.n	800a5f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7fc ff7a 	bl	80074e4 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f87a 	bl	800a6f0 <HAL_RTC_WaitForSynchro>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d004      	beq.n	800a60c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2204      	movs	r2, #4
 800a606:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e06b      	b.n	800a6e4 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f89c 	bl	800a74a <RTC_EnterInitMode>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d004      	beq.n	800a622 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2204      	movs	r2, #4
 800a61c:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e060      	b.n	800a6e4 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f022 0207 	bic.w	r2, r2, #7
 800a630:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d005      	beq.n	800a646 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800a63a:	4b2c      	ldr	r3, [pc, #176]	; (800a6ec <HAL_RTC_Init+0x128>)
 800a63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a63e:	4a2b      	ldr	r2, [pc, #172]	; (800a6ec <HAL_RTC_Init+0x128>)
 800a640:	f023 0301 	bic.w	r3, r3, #1
 800a644:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800a646:	4b29      	ldr	r3, [pc, #164]	; (800a6ec <HAL_RTC_Init+0x128>)
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	4926      	ldr	r1, [pc, #152]	; (800a6ec <HAL_RTC_Init+0x128>)
 800a654:	4313      	orrs	r3, r2
 800a656:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a660:	d003      	beq.n	800a66a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	60fb      	str	r3, [r7, #12]
 800a668:	e00e      	b.n	800a688 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800a66a:	2001      	movs	r0, #1
 800a66c:	f7ff fec0 	bl	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a670:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d104      	bne.n	800a682 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2204      	movs	r2, #4
 800a67c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e030      	b.n	800a6e4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3b01      	subs	r3, #1
 800a686:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	f023 010f 	bic.w	r1, r3, #15
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	0c1a      	lsrs	r2, r3, #16
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	430a      	orrs	r2, r1
 800a69c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	0c1b      	lsrs	r3, r3, #16
 800a6a6:	041b      	lsls	r3, r3, #16
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	b291      	uxth	r1, r2
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	6812      	ldr	r2, [r2, #0]
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f870 	bl	800a79a <RTC_ExitInitMode>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d004      	beq.n	800a6ca <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2204      	movs	r2, #4
 800a6c4:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e00c      	b.n	800a6e4 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
  }
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	40006c00 	.word	0x40006c00

0800a6f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e01d      	b.n	800a742 <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	685a      	ldr	r2, [r3, #4]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f022 0208 	bic.w	r2, r2, #8
 800a714:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 800a716:	f7fd f9ad 	bl	8007a74 <HAL_GetTick>
 800a71a:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800a71c:	e009      	b.n	800a732 <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800a71e:	f7fd f9a9 	bl	8007a74 <HAL_GetTick>
 800a722:	4602      	mov	r2, r0
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a72c:	d901      	bls.n	800a732 <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 800a72e:	2303      	movs	r3, #3
 800a730:	e007      	b.n	800a742 <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	f003 0308 	and.w	r3, r3, #8
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d0ee      	beq.n	800a71e <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a752:	2300      	movs	r3, #0
 800a754:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 800a756:	f7fd f98d 	bl	8007a74 <HAL_GetTick>
 800a75a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a75c:	e009      	b.n	800a772 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a75e:	f7fd f989 	bl	8007a74 <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a76c:	d901      	bls.n	800a772 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e00f      	b.n	800a792 <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	f003 0320 	and.w	r3, r3, #32
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d0ee      	beq.n	800a75e <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f042 0210 	orr.w	r2, r2, #16
 800a78e:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b084      	sub	sp, #16
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 0210 	bic.w	r2, r2, #16
 800a7b4:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 800a7b6:	f7fd f95d 	bl	8007a74 <HAL_GetTick>
 800a7ba:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a7bc:	e009      	b.n	800a7d2 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a7be:	f7fd f959 	bl	8007a74 <HAL_GetTick>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7cc:	d901      	bls.n	800a7d2 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e007      	b.n	800a7e2 <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	f003 0320 	and.w	r3, r3, #32
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d0ee      	beq.n	800a7be <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 800a7fc:	4b07      	ldr	r3, [pc, #28]	; (800a81c <HAL_RTCEx_BKUPWrite+0x30>)
 800a7fe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	4413      	add	r3, r2
 800a808:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	b292      	uxth	r2, r2
 800a810:	601a      	str	r2, [r3, #0]
}
 800a812:	bf00      	nop
 800a814:	371c      	adds	r7, #28
 800a816:	46bd      	mov	sp, r7
 800a818:	bc80      	pop	{r7}
 800a81a:	4770      	bx	lr
 800a81c:	40006c00 	.word	0x40006c00

0800a820 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 800a832:	4b08      	ldr	r3, [pc, #32]	; (800a854 <HAL_RTCEx_BKUPRead+0x34>)
 800a834:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	4413      	add	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	b29b      	uxth	r3, r3
 800a846:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 800a848:	68bb      	ldr	r3, [r7, #8]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	bc80      	pop	{r7}
 800a852:	4770      	bx	lr
 800a854:	40006c00 	.word	0x40006c00

0800a858 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e03f      	b.n	800a8ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d106      	bne.n	800a884 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7fc ffc4 	bl	800780c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2224      	movs	r2, #36	; 0x24
 800a888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a89a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fc7d 	bl	800b19c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	691a      	ldr	r2, [r3, #16]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	695a      	ldr	r2, [r3, #20]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8c0:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8d0:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2220      	movs	r2, #32
 800a8dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <HAL_UART_DeInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b082      	sub	sp, #8
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e016      	b.n	800a932 <HAL_UART_DeInit+0x40>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2224      	movs	r2, #36	; 0x24
 800a908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7fc fffb 	bl	8007908 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b088      	sub	sp, #32
 800a93e:	af02      	add	r7, sp, #8
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	60b9      	str	r1, [r7, #8]
 800a944:	603b      	str	r3, [r7, #0]
 800a946:	4613      	mov	r3, r2
 800a948:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a954:	b2db      	uxtb	r3, r3
 800a956:	2b20      	cmp	r3, #32
 800a958:	f040 8083 	bne.w	800aa62 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d002      	beq.n	800a968 <HAL_UART_Transmit+0x2e>
 800a962:	88fb      	ldrh	r3, [r7, #6]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e07b      	b.n	800aa64 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a972:	2b01      	cmp	r3, #1
 800a974:	d101      	bne.n	800a97a <HAL_UART_Transmit+0x40>
 800a976:	2302      	movs	r3, #2
 800a978:	e074      	b.n	800aa64 <HAL_UART_Transmit+0x12a>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2221      	movs	r2, #33	; 0x21
 800a98c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a990:	f7fd f870 	bl	8007a74 <HAL_GetTick>
 800a994:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	88fa      	ldrh	r2, [r7, #6]
 800a99a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	88fa      	ldrh	r2, [r7, #6]
 800a9a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800a9a2:	e042      	b.n	800aa2a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9ba:	d122      	bne.n	800aa02 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2180      	movs	r1, #128	; 0x80
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 fa6a 	bl	800aea0 <UART_WaitOnFlagUntilTimeout>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e046      	b.n	800aa64 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9e8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d103      	bne.n	800a9fa <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	3302      	adds	r3, #2
 800a9f6:	60bb      	str	r3, [r7, #8]
 800a9f8:	e017      	b.n	800aa2a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	60bb      	str	r3, [r7, #8]
 800aa00:	e013      	b.n	800aa2a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2180      	movs	r1, #128	; 0x80
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 fa47 	bl	800aea0 <UART_WaitOnFlagUntilTimeout>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d001      	beq.n	800aa1c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e023      	b.n	800aa64 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	60ba      	str	r2, [r7, #8]
 800aa22:	781a      	ldrb	r2, [r3, #0]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1b7      	bne.n	800a9a4 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2140      	movs	r1, #64	; 0x40
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f000 fa2e 	bl	800aea0 <UART_WaitOnFlagUntilTimeout>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d001      	beq.n	800aa4e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e00a      	b.n	800aa64 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2220      	movs	r2, #32
 800aa52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	e000      	b.n	800aa64 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800aa62:	2302      	movs	r3, #2
  }
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b086      	sub	sp, #24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	4613      	mov	r3, r2
 800aa78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b20      	cmp	r3, #32
 800aa84:	d166      	bne.n	800ab54 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL) || (Size == 0U))
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <HAL_UART_Receive_DMA+0x26>
 800aa8c:	88fb      	ldrh	r3, [r7, #6]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e05f      	b.n	800ab56 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d101      	bne.n	800aaa4 <HAL_UART_Receive_DMA+0x38>
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	e058      	b.n	800ab56 <HAL_UART_Receive_DMA+0xea>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	88fa      	ldrh	r2, [r7, #6]
 800aab6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2222      	movs	r2, #34	; 0x22
 800aac2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaca:	4a25      	ldr	r2, [pc, #148]	; (800ab60 <HAL_UART_Receive_DMA+0xf4>)
 800aacc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad2:	4a24      	ldr	r2, [pc, #144]	; (800ab64 <HAL_UART_Receive_DMA+0xf8>)
 800aad4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aada:	4a23      	ldr	r2, [pc, #140]	; (800ab68 <HAL_UART_Receive_DMA+0xfc>)
 800aadc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae2:	2200      	movs	r2, #0
 800aae4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 800aae6:	f107 0308 	add.w	r3, r7, #8
 800aaea:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	88fb      	ldrh	r3, [r7, #6]
 800aafe:	f7fd fa05 	bl	8007f0c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800ab02:	2300      	movs	r3, #0
 800ab04:	613b      	str	r3, [r7, #16]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	613b      	str	r3, [r7, #16]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	613b      	str	r3, [r7, #16]
 800ab16:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68da      	ldr	r2, [r3, #12]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab2e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	695a      	ldr	r2, [r3, #20]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f042 0201 	orr.w	r2, r2, #1
 800ab3e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	695a      	ldr	r2, [r3, #20]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab4e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	e000      	b.n	800ab56 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ab54:	2302      	movs	r3, #2
  }
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3718      	adds	r7, #24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	0800ad89 	.word	0x0800ad89
 800ab64:	0800adf1 	.word	0x0800adf1
 800ab68:	0800ae0d 	.word	0x0800ae0d

0800ab6c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b088      	sub	sp, #32
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	f003 030f 	and.w	r3, r3, #15
 800ab9a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10d      	bne.n	800abbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	f003 0320 	and.w	r3, r3, #32
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d008      	beq.n	800abbe <HAL_UART_IRQHandler+0x52>
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	f003 0320 	and.w	r3, r3, #32
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fa6f 	bl	800b09a <UART_Receive_IT>
      return;
 800abbc:	e0cc      	b.n	800ad58 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 80ab 	beq.w	800ad1c <HAL_UART_IRQHandler+0x1b0>
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d105      	bne.n	800abdc <HAL_UART_IRQHandler+0x70>
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f000 80a0 	beq.w	800ad1c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00a      	beq.n	800abfc <HAL_UART_IRQHandler+0x90>
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abec:	2b00      	cmp	r3, #0
 800abee:	d005      	beq.n	800abfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf4:	f043 0201 	orr.w	r2, r3, #1
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	f003 0304 	and.w	r3, r3, #4
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00a      	beq.n	800ac1c <HAL_UART_IRQHandler+0xb0>
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d005      	beq.n	800ac1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac14:	f043 0202 	orr.w	r2, r3, #2
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00a      	beq.n	800ac3c <HAL_UART_IRQHandler+0xd0>
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d005      	beq.n	800ac3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac34:	f043 0204 	orr.w	r2, r3, #4
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	f003 0308 	and.w	r3, r3, #8
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00a      	beq.n	800ac5c <HAL_UART_IRQHandler+0xf0>
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f003 0301 	and.w	r3, r3, #1
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d005      	beq.n	800ac5c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac54:	f043 0208 	orr.w	r2, r3, #8
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d078      	beq.n	800ad56 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d007      	beq.n	800ac7e <HAL_UART_IRQHandler+0x112>
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	f003 0320 	and.w	r3, r3, #32
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fa0e 	bl	800b09a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	695b      	ldr	r3, [r3, #20]
 800ac84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	bf14      	ite	ne
 800ac8c:	2301      	movne	r3, #1
 800ac8e:	2300      	moveq	r3, #0
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac98:	f003 0308 	and.w	r3, r3, #8
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d102      	bne.n	800aca6 <HAL_UART_IRQHandler+0x13a>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d031      	beq.n	800ad0a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 f959 	bl	800af5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d023      	beq.n	800ad02 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	695a      	ldr	r2, [r3, #20]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acc8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d013      	beq.n	800acfa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd6:	4a22      	ldr	r2, [pc, #136]	; (800ad60 <HAL_UART_IRQHandler+0x1f4>)
 800acd8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fd f974 	bl	8007fcc <HAL_DMA_Abort_IT>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d016      	beq.n	800ad18 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800acf4:	4610      	mov	r0, r2
 800acf6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf8:	e00e      	b.n	800ad18 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7fc fd74 	bl	80077e8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad00:	e00a      	b.n	800ad18 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7fc fd70 	bl	80077e8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad08:	e006      	b.n	800ad18 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7fc fd6c 	bl	80077e8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ad16:	e01e      	b.n	800ad56 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad18:	bf00      	nop
    return;
 800ad1a:	e01c      	b.n	800ad56 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d008      	beq.n	800ad38 <HAL_UART_IRQHandler+0x1cc>
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f945 	bl	800afc0 <UART_Transmit_IT>
    return;
 800ad36:	e00f      	b.n	800ad58 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00a      	beq.n	800ad58 <HAL_UART_IRQHandler+0x1ec>
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d005      	beq.n	800ad58 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f98c 	bl	800b06a <UART_EndTransmit_IT>
    return;
 800ad52:	bf00      	nop
 800ad54:	e000      	b.n	800ad58 <HAL_UART_IRQHandler+0x1ec>
    return;
 800ad56:	bf00      	nop
  }
}
 800ad58:	3720      	adds	r7, #32
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	0800af99 	.word	0x0800af99

0800ad64 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bc80      	pop	{r7}
 800ad74:	4770      	bx	lr

0800ad76 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad76:	b480      	push	{r7}
 800ad78:	b083      	sub	sp, #12
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ad7e:	bf00      	nop
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bc80      	pop	{r7}
 800ad86:	4770      	bx	lr

0800ad88 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 0320 	and.w	r3, r3, #32
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d11e      	bne.n	800ade2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68da      	ldr	r2, [r3, #12]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adb8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	695a      	ldr	r2, [r3, #20]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f022 0201 	bic.w	r2, r2, #1
 800adc8:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	695a      	ldr	r2, [r3, #20]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800add8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2220      	movs	r2, #32
 800adde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7fc fd09 	bl	80077fa <HAL_UART_RxCpltCallback>
}
 800ade8:	bf00      	nop
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	60fb      	str	r3, [r7, #12]
  HAL_UART_RxHalfCpltCallback(huart); 
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f7ff ffb9 	bl	800ad76 <HAL_UART_RxHalfCpltCallback>
}
 800ae04:	bf00      	nop
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ae14:	2300      	movs	r3, #0
 800ae16:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	bf14      	ite	ne
 800ae2c:	2301      	movne	r3, #1
 800ae2e:	2300      	moveq	r3, #0
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	2b21      	cmp	r3, #33	; 0x21
 800ae3e:	d108      	bne.n	800ae52 <UART_DMAError+0x46>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d005      	beq.n	800ae52 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ae4c:	68b8      	ldr	r0, [r7, #8]
 800ae4e:	f000 f871 	bl	800af34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	bf14      	ite	ne
 800ae60:	2301      	movne	r3, #1
 800ae62:	2300      	moveq	r3, #0
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b22      	cmp	r3, #34	; 0x22
 800ae72:	d108      	bne.n	800ae86 <UART_DMAError+0x7a>
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d005      	beq.n	800ae86 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ae80:	68b8      	ldr	r0, [r7, #8]
 800ae82:	f000 f86c 	bl	800af5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae8a:	f043 0210 	orr.w	r2, r3, #16
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800ae92:	68b8      	ldr	r0, [r7, #8]
 800ae94:	f7fc fca8 	bl	80077e8 <HAL_UART_ErrorCallback>
}
 800ae98:	bf00      	nop
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	603b      	str	r3, [r7, #0]
 800aeac:	4613      	mov	r3, r2
 800aeae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800aeb0:	e02c      	b.n	800af0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb8:	d028      	beq.n	800af0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d007      	beq.n	800aed0 <UART_WaitOnFlagUntilTimeout+0x30>
 800aec0:	f7fc fdd8 	bl	8007a74 <HAL_GetTick>
 800aec4:	4602      	mov	r2, r0
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	69ba      	ldr	r2, [r7, #24]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d21d      	bcs.n	800af0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	68da      	ldr	r2, [r3, #12]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aede:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	695a      	ldr	r2, [r3, #20]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f022 0201 	bic.w	r2, r2, #1
 800aeee:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2220      	movs	r2, #32
 800aef4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2220      	movs	r2, #32
 800aefc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	e00f      	b.n	800af2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	4013      	ands	r3, r2
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	429a      	cmp	r2, r3
 800af1a:	bf0c      	ite	eq
 800af1c:	2301      	moveq	r3, #1
 800af1e:	2300      	movne	r3, #0
 800af20:	b2db      	uxtb	r3, r3
 800af22:	461a      	mov	r2, r3
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	429a      	cmp	r2, r3
 800af28:	d0c3      	beq.n	800aeb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68da      	ldr	r2, [r3, #12]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800af4a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2220      	movs	r2, #32
 800af50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	bc80      	pop	{r7}
 800af5c:	4770      	bx	lr

0800af5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af5e:	b480      	push	{r7}
 800af60:	b083      	sub	sp, #12
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af74:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	695a      	ldr	r2, [r3, #20]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f022 0201 	bic.w	r2, r2, #1
 800af84:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2220      	movs	r2, #32
 800af8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	bc80      	pop	{r7}
 800af96:	4770      	bx	lr

0800af98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f7fc fc18 	bl	80077e8 <HAL_UART_ErrorCallback>
}
 800afb8:	bf00      	nop
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b21      	cmp	r3, #33	; 0x21
 800afd2:	d144      	bne.n	800b05e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afdc:	d11a      	bne.n	800b014 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	461a      	mov	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aff2:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d105      	bne.n	800b008 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	1c9a      	adds	r2, r3, #2
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	621a      	str	r2, [r3, #32]
 800b006:	e00e      	b.n	800b026 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a1b      	ldr	r3, [r3, #32]
 800b00c:	1c5a      	adds	r2, r3, #1
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	621a      	str	r2, [r3, #32]
 800b012:	e008      	b.n	800b026 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a1b      	ldr	r3, [r3, #32]
 800b018:	1c59      	adds	r1, r3, #1
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	6211      	str	r1, [r2, #32]
 800b01e:	781a      	ldrb	r2, [r3, #0]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	3b01      	subs	r3, #1
 800b02e:	b29b      	uxth	r3, r3
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	4619      	mov	r1, r3
 800b034:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10f      	bne.n	800b05a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68da      	ldr	r2, [r3, #12]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b048:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68da      	ldr	r2, [r3, #12]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b058:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	e000      	b.n	800b060 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b05e:	2302      	movs	r3, #2
  }
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	bc80      	pop	{r7}
 800b068:	4770      	bx	lr

0800b06a <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68da      	ldr	r2, [r3, #12]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b080:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2220      	movs	r2, #32
 800b086:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7ff fe6a 	bl	800ad64 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b22      	cmp	r3, #34	; 0x22
 800b0ac:	d171      	bne.n	800b192 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0b6:	d123      	bne.n	800b100 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0bc:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10e      	bne.n	800b0e4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0dc:	1c9a      	adds	r2, r3, #2
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	629a      	str	r2, [r3, #40]	; 0x28
 800b0e2:	e029      	b.n	800b138 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f8:	1c5a      	adds	r2, r3, #1
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	629a      	str	r2, [r3, #40]	; 0x28
 800b0fe:	e01b      	b.n	800b138 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10a      	bne.n	800b11e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6858      	ldr	r0, [r3, #4]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b112:	1c59      	adds	r1, r3, #1
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	6291      	str	r1, [r2, #40]	; 0x28
 800b118:	b2c2      	uxtb	r2, r0
 800b11a:	701a      	strb	r2, [r3, #0]
 800b11c:	e00c      	b.n	800b138 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	b2da      	uxtb	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b12a:	1c58      	adds	r0, r3, #1
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	6288      	str	r0, [r1, #40]	; 0x28
 800b130:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b134:	b2d2      	uxtb	r2, r2
 800b136:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	3b01      	subs	r3, #1
 800b140:	b29b      	uxth	r3, r3
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	4619      	mov	r1, r3
 800b146:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d120      	bne.n	800b18e <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68da      	ldr	r2, [r3, #12]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f022 0220 	bic.w	r2, r2, #32
 800b15a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	68da      	ldr	r2, [r3, #12]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b16a:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	695a      	ldr	r2, [r3, #20]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f022 0201 	bic.w	r2, r2, #1
 800b17a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2220      	movs	r2, #32
 800b180:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7fc fb38 	bl	80077fa <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	e002      	b.n	800b194 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	e000      	b.n	800b194 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b192:	2302      	movs	r3, #2
  }
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b19c:	b5b0      	push	{r4, r5, r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68da      	ldr	r2, [r3, #12]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	689a      	ldr	r2, [r3, #8]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	431a      	orrs	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	695b      	ldr	r3, [r3, #20]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b1de:	f023 030c 	bic.w	r3, r3, #12
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	6812      	ldr	r2, [r2, #0]
 800b1e6:	68f9      	ldr	r1, [r7, #12]
 800b1e8:	430b      	orrs	r3, r1
 800b1ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	699a      	ldr	r2, [r3, #24]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	430a      	orrs	r2, r1
 800b200:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a6f      	ldr	r2, [pc, #444]	; (800b3c4 <UART_SetConfig+0x228>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d16b      	bne.n	800b2e4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800b20c:	f7ff f808 	bl	800a220 <HAL_RCC_GetPCLK2Freq>
 800b210:	4602      	mov	r2, r0
 800b212:	4613      	mov	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	009a      	lsls	r2, r3, #2
 800b21a:	441a      	add	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	fbb2 f3f3 	udiv	r3, r2, r3
 800b226:	4a68      	ldr	r2, [pc, #416]	; (800b3c8 <UART_SetConfig+0x22c>)
 800b228:	fba2 2303 	umull	r2, r3, r2, r3
 800b22c:	095b      	lsrs	r3, r3, #5
 800b22e:	011c      	lsls	r4, r3, #4
 800b230:	f7fe fff6 	bl	800a220 <HAL_RCC_GetPCLK2Freq>
 800b234:	4602      	mov	r2, r0
 800b236:	4613      	mov	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	009a      	lsls	r2, r3, #2
 800b23e:	441a      	add	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	fbb2 f5f3 	udiv	r5, r2, r3
 800b24a:	f7fe ffe9 	bl	800a220 <HAL_RCC_GetPCLK2Freq>
 800b24e:	4602      	mov	r2, r0
 800b250:	4613      	mov	r3, r2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	009a      	lsls	r2, r3, #2
 800b258:	441a      	add	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	fbb2 f3f3 	udiv	r3, r2, r3
 800b264:	4a58      	ldr	r2, [pc, #352]	; (800b3c8 <UART_SetConfig+0x22c>)
 800b266:	fba2 2303 	umull	r2, r3, r2, r3
 800b26a:	095b      	lsrs	r3, r3, #5
 800b26c:	2264      	movs	r2, #100	; 0x64
 800b26e:	fb02 f303 	mul.w	r3, r2, r3
 800b272:	1aeb      	subs	r3, r5, r3
 800b274:	011b      	lsls	r3, r3, #4
 800b276:	3332      	adds	r3, #50	; 0x32
 800b278:	4a53      	ldr	r2, [pc, #332]	; (800b3c8 <UART_SetConfig+0x22c>)
 800b27a:	fba2 2303 	umull	r2, r3, r2, r3
 800b27e:	095b      	lsrs	r3, r3, #5
 800b280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b284:	441c      	add	r4, r3
 800b286:	f7fe ffcb 	bl	800a220 <HAL_RCC_GetPCLK2Freq>
 800b28a:	4602      	mov	r2, r0
 800b28c:	4613      	mov	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	009a      	lsls	r2, r3, #2
 800b294:	441a      	add	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	fbb2 f5f3 	udiv	r5, r2, r3
 800b2a0:	f7fe ffbe 	bl	800a220 <HAL_RCC_GetPCLK2Freq>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4413      	add	r3, r2
 800b2ac:	009a      	lsls	r2, r3, #2
 800b2ae:	441a      	add	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ba:	4a43      	ldr	r2, [pc, #268]	; (800b3c8 <UART_SetConfig+0x22c>)
 800b2bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c0:	095b      	lsrs	r3, r3, #5
 800b2c2:	2264      	movs	r2, #100	; 0x64
 800b2c4:	fb02 f303 	mul.w	r3, r2, r3
 800b2c8:	1aeb      	subs	r3, r5, r3
 800b2ca:	011b      	lsls	r3, r3, #4
 800b2cc:	3332      	adds	r3, #50	; 0x32
 800b2ce:	4a3e      	ldr	r2, [pc, #248]	; (800b3c8 <UART_SetConfig+0x22c>)
 800b2d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d4:	095b      	lsrs	r3, r3, #5
 800b2d6:	f003 020f 	and.w	r2, r3, #15
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4422      	add	r2, r4
 800b2e0:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800b2e2:	e06a      	b.n	800b3ba <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800b2e4:	f7fe ff88 	bl	800a1f8 <HAL_RCC_GetPCLK1Freq>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009a      	lsls	r2, r3, #2
 800b2f2:	441a      	add	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2fe:	4a32      	ldr	r2, [pc, #200]	; (800b3c8 <UART_SetConfig+0x22c>)
 800b300:	fba2 2303 	umull	r2, r3, r2, r3
 800b304:	095b      	lsrs	r3, r3, #5
 800b306:	011c      	lsls	r4, r3, #4
 800b308:	f7fe ff76 	bl	800a1f8 <HAL_RCC_GetPCLK1Freq>
 800b30c:	4602      	mov	r2, r0
 800b30e:	4613      	mov	r3, r2
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	4413      	add	r3, r2
 800b314:	009a      	lsls	r2, r3, #2
 800b316:	441a      	add	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	fbb2 f5f3 	udiv	r5, r2, r3
 800b322:	f7fe ff69 	bl	800a1f8 <HAL_RCC_GetPCLK1Freq>
 800b326:	4602      	mov	r2, r0
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	009a      	lsls	r2, r3, #2
 800b330:	441a      	add	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	fbb2 f3f3 	udiv	r3, r2, r3
 800b33c:	4a22      	ldr	r2, [pc, #136]	; (800b3c8 <UART_SetConfig+0x22c>)
 800b33e:	fba2 2303 	umull	r2, r3, r2, r3
 800b342:	095b      	lsrs	r3, r3, #5
 800b344:	2264      	movs	r2, #100	; 0x64
 800b346:	fb02 f303 	mul.w	r3, r2, r3
 800b34a:	1aeb      	subs	r3, r5, r3
 800b34c:	011b      	lsls	r3, r3, #4
 800b34e:	3332      	adds	r3, #50	; 0x32
 800b350:	4a1d      	ldr	r2, [pc, #116]	; (800b3c8 <UART_SetConfig+0x22c>)
 800b352:	fba2 2303 	umull	r2, r3, r2, r3
 800b356:	095b      	lsrs	r3, r3, #5
 800b358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b35c:	441c      	add	r4, r3
 800b35e:	f7fe ff4b 	bl	800a1f8 <HAL_RCC_GetPCLK1Freq>
 800b362:	4602      	mov	r2, r0
 800b364:	4613      	mov	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	009a      	lsls	r2, r3, #2
 800b36c:	441a      	add	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	fbb2 f5f3 	udiv	r5, r2, r3
 800b378:	f7fe ff3e 	bl	800a1f8 <HAL_RCC_GetPCLK1Freq>
 800b37c:	4602      	mov	r2, r0
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	009a      	lsls	r2, r3, #2
 800b386:	441a      	add	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b392:	4a0d      	ldr	r2, [pc, #52]	; (800b3c8 <UART_SetConfig+0x22c>)
 800b394:	fba2 2303 	umull	r2, r3, r2, r3
 800b398:	095b      	lsrs	r3, r3, #5
 800b39a:	2264      	movs	r2, #100	; 0x64
 800b39c:	fb02 f303 	mul.w	r3, r2, r3
 800b3a0:	1aeb      	subs	r3, r5, r3
 800b3a2:	011b      	lsls	r3, r3, #4
 800b3a4:	3332      	adds	r3, #50	; 0x32
 800b3a6:	4a08      	ldr	r2, [pc, #32]	; (800b3c8 <UART_SetConfig+0x22c>)
 800b3a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ac:	095b      	lsrs	r3, r3, #5
 800b3ae:	f003 020f 	and.w	r2, r3, #15
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4422      	add	r2, r4
 800b3b8:	609a      	str	r2, [r3, #8]
}
 800b3ba:	bf00      	nop
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bdb0      	pop	{r4, r5, r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	40013800 	.word	0x40013800
 800b3c8:	51eb851f 	.word	0x51eb851f

0800b3cc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b3cc:	b084      	sub	sp, #16
 800b3ce:	b480      	push	{r7}
 800b3d0:	b083      	sub	sp, #12
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	f107 0014 	add.w	r0, r7, #20
 800b3da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bc80      	pop	{r7}
 800b3e8:	b004      	add	sp, #16
 800b3ea:	4770      	bx	lr

0800b3ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800b3f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800b3fc:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b404:	b29a      	uxth	r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	b29b      	uxth	r3, r3
 800b40a:	4313      	orrs	r3, r2
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bc80      	pop	{r7}
 800b41e:	4770      	bx	lr

0800b420 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800b42c:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 800b430:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b438:	b29a      	uxth	r2, r3
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	43db      	mvns	r3, r3
 800b440:	b29b      	uxth	r3, r3
 800b442:	4013      	ands	r3, r2
 800b444:	b29a      	uxth	r2, r3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3714      	adds	r7, #20
 800b452:	46bd      	mov	sp, r7
 800b454:	bc80      	pop	{r7}
 800b456:	4770      	bx	lr

0800b458 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	460b      	mov	r3, r1
 800b462:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	370c      	adds	r7, #12
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bc80      	pop	{r7}
 800b46e:	4770      	bx	lr

0800b470 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b470:	b084      	sub	sp, #16
 800b472:	b580      	push	{r7, lr}
 800b474:	b082      	sub	sp, #8
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	f107 0014 	add.w	r0, r7, #20
 800b47e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff ffa2 	bl	800b3ec <USB_EnableGlobalInt>
    
  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4b4:	b004      	add	sp, #16
 800b4b6:	4770      	bx	lr

0800b4b8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b4b8:	b490      	push	{r4, r7}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	78db      	ldrb	r3, [r3, #3]
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	d85f      	bhi.n	800b58a <USB_ActivateEndpoint+0xd2>
 800b4ca:	a201      	add	r2, pc, #4	; (adr r2, 800b4d0 <USB_ActivateEndpoint+0x18>)
 800b4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d0:	0800b4e1 	.word	0x0800b4e1
 800b4d4:	0800b55f 	.word	0x0800b55f
 800b4d8:	0800b50d 	.word	0x0800b50d
 800b4dc:	0800b533 	.word	0x0800b533
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4413      	add	r3, r2
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b4f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	6879      	ldr	r1, [r7, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	440b      	add	r3, r1
 800b502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b506:	b292      	uxth	r2, r2
 800b508:	801a      	strh	r2, [r3, #0]
    break;
 800b50a:	e03f      	b.n	800b58c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4413      	add	r3, r2
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	b29b      	uxth	r3, r3
 800b51a:	6879      	ldr	r1, [r7, #4]
 800b51c:	683a      	ldr	r2, [r7, #0]
 800b51e:	7812      	ldrb	r2, [r2, #0]
 800b520:	0092      	lsls	r2, r2, #2
 800b522:	440a      	add	r2, r1
 800b524:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	8013      	strh	r3, [r2, #0]
    break;
 800b530:	e02c      	b.n	800b58c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4413      	add	r3, r2
 800b53c:	881b      	ldrh	r3, [r3, #0]
 800b53e:	b29b      	uxth	r3, r3
 800b540:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b548:	b29a      	uxth	r2, r3
 800b54a:	6879      	ldr	r1, [r7, #4]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800b558:	b292      	uxth	r2, r2
 800b55a:	801a      	strh	r2, [r3, #0]
    break;
 800b55c:	e016      	b.n	800b58c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4413      	add	r3, r2
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b574:	b29a      	uxth	r2, r3
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	440b      	add	r3, r1
 800b580:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b584:	b292      	uxth	r2, r2
 800b586:	801a      	strh	r2, [r3, #0]
    break;
 800b588:	e000      	b.n	800b58c <USB_ActivateEndpoint+0xd4>
  default:
      break;
 800b58a:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	b29a      	uxth	r2, r3
 800b59a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b59e:	4013      	ands	r3, r2
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	b299      	uxth	r1, r3
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	441a      	add	r2, r3
 800b5b6:	4b75      	ldr	r3, [pc, #468]	; (800b78c <USB_ActivateEndpoint+0x2d4>)
 800b5b8:	430b      	orrs	r3, r1
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	7a9b      	ldrb	r3, [r3, #10]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f040 80e8 	bne.w	800b798 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	785b      	ldrb	r3, [r3, #1]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d04c      	beq.n	800b66a <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	889b      	ldrh	r3, [r3, #4]
 800b5d4:	085b      	lsrs	r3, r3, #1
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	0059      	lsls	r1, r3, #1
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	4413      	add	r3, r2
 800b5ec:	005a      	lsls	r2, r3, #1
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5f6:	460a      	mov	r2, r1
 800b5f8:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	b29b      	uxth	r3, r3
 800b608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d013      	beq.n	800b638 <USB_ActivateEndpoint+0x180>
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4413      	add	r3, r2
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b622:	4013      	ands	r3, r2
 800b624:	b299      	uxth	r1, r3
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	441a      	add	r2, r3
 800b630:	4b57      	ldr	r3, [pc, #348]	; (800b790 <USB_ActivateEndpoint+0x2d8>)
 800b632:	430b      	orrs	r3, r1
 800b634:	b29b      	uxth	r3, r3
 800b636:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	881b      	ldrh	r3, [r3, #0]
 800b644:	b29b      	uxth	r3, r3
 800b646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b64a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b64e:	b29c      	uxth	r4, r3
 800b650:	f084 0320 	eor.w	r3, r4, #32
 800b654:	b29c      	uxth	r4, r3
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	441a      	add	r2, r3
 800b660:	4b4a      	ldr	r3, [pc, #296]	; (800b78c <USB_ActivateEndpoint+0x2d4>)
 800b662:	4323      	orrs	r3, r4
 800b664:	b29b      	uxth	r3, r3
 800b666:	8013      	strh	r3, [r2, #0]
 800b668:	e1d9      	b.n	800ba1e <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	889b      	ldrh	r3, [r3, #4]
 800b66e:	085b      	lsrs	r3, r3, #1
 800b670:	b29b      	uxth	r3, r3
 800b672:	0059      	lsls	r1, r3, #1
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	461a      	mov	r2, r3
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	00db      	lsls	r3, r3, #3
 800b684:	4413      	add	r3, r2
 800b686:	3304      	adds	r3, #4
 800b688:	005a      	lsls	r2, r3, #1
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4413      	add	r3, r2
 800b68e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b692:	460a      	mov	r2, r1
 800b694:	601a      	str	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	461a      	mov	r2, r3
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	00db      	lsls	r3, r3, #3
 800b6a6:	4413      	add	r3, r2
 800b6a8:	3306      	adds	r3, #6
 800b6aa:	005a      	lsls	r2, r3, #1
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6b4:	60bb      	str	r3, [r7, #8]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	2b3e      	cmp	r3, #62	; 0x3e
 800b6bc:	d918      	bls.n	800b6f0 <USB_ActivateEndpoint+0x238>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	095b      	lsrs	r3, r3, #5
 800b6c4:	81fb      	strh	r3, [r7, #14]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	691b      	ldr	r3, [r3, #16]
 800b6ca:	f003 031f 	and.w	r3, r3, #31
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d102      	bne.n	800b6d8 <USB_ActivateEndpoint+0x220>
 800b6d2:	89fb      	ldrh	r3, [r7, #14]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	81fb      	strh	r3, [r7, #14]
 800b6d8:	89fb      	ldrh	r3, [r7, #14]
 800b6da:	029b      	lsls	r3, r3, #10
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	e012      	b.n	800b716 <USB_ActivateEndpoint+0x25e>
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	085b      	lsrs	r3, r3, #1
 800b6f6:	81fb      	strh	r3, [r7, #14]
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	f003 0301 	and.w	r3, r3, #1
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <USB_ActivateEndpoint+0x252>
 800b704:	89fb      	ldrh	r3, [r7, #14]
 800b706:	3301      	adds	r3, #1
 800b708:	81fb      	strh	r3, [r7, #14]
 800b70a:	89fb      	ldrh	r3, [r7, #14]
 800b70c:	029b      	lsls	r3, r3, #10
 800b70e:	b29b      	uxth	r3, r3
 800b710:	461a      	mov	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4413      	add	r3, r2
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	b29b      	uxth	r3, r3
 800b724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d013      	beq.n	800b754 <USB_ActivateEndpoint+0x29c>
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	881b      	ldrh	r3, [r3, #0]
 800b738:	b29a      	uxth	r2, r3
 800b73a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b73e:	4013      	ands	r3, r2
 800b740:	b299      	uxth	r1, r3
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	441a      	add	r2, r3
 800b74c:	4b11      	ldr	r3, [pc, #68]	; (800b794 <USB_ActivateEndpoint+0x2dc>)
 800b74e:	430b      	orrs	r3, r1
 800b750:	b29b      	uxth	r3, r3
 800b752:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4413      	add	r3, r2
 800b75e:	881b      	ldrh	r3, [r3, #0]
 800b760:	b29b      	uxth	r3, r3
 800b762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b76a:	b29c      	uxth	r4, r3
 800b76c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800b770:	b29c      	uxth	r4, r3
 800b772:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800b776:	b29c      	uxth	r4, r3
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	441a      	add	r2, r3
 800b782:	4b02      	ldr	r3, [pc, #8]	; (800b78c <USB_ActivateEndpoint+0x2d4>)
 800b784:	4323      	orrs	r3, r4
 800b786:	b29b      	uxth	r3, r3
 800b788:	8013      	strh	r3, [r2, #0]
 800b78a:	e148      	b.n	800ba1e <USB_ActivateEndpoint+0x566>
 800b78c:	ffff8080 	.word	0xffff8080
 800b790:	ffff80c0 	.word	0xffff80c0
 800b794:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4413      	add	r3, r2
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	f640 630f 	movw	r3, #3599	; 0xe0f
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	b299      	uxth	r1, r3
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	441a      	add	r2, r3
 800b7b8:	4b9c      	ldr	r3, [pc, #624]	; (800ba2c <USB_ActivateEndpoint+0x574>)
 800b7ba:	430b      	orrs	r3, r1
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	88db      	ldrh	r3, [r3, #6]
 800b7c4:	085b      	lsrs	r3, r3, #1
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	0059      	lsls	r1, r3, #1
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	4413      	add	r3, r2
 800b7dc:	005a      	lsls	r2, r3, #1
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7e6:	460a      	mov	r2, r1
 800b7e8:	601a      	str	r2, [r3, #0]
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	891b      	ldrh	r3, [r3, #8]
 800b7ee:	085b      	lsrs	r3, r3, #1
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	0059      	lsls	r1, r3, #1
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	4413      	add	r3, r2
 800b806:	3304      	adds	r3, #4
 800b808:	005a      	lsls	r2, r3, #1
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4413      	add	r3, r2
 800b80e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b812:	460a      	mov	r2, r1
 800b814:	601a      	str	r2, [r3, #0]
    
    if (ep->is_in==0)
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	785b      	ldrb	r3, [r3, #1]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f040 8083 	bne.w	800b926 <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	881b      	ldrh	r3, [r3, #0]
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b832:	2b00      	cmp	r3, #0
 800b834:	d013      	beq.n	800b85e <USB_ActivateEndpoint+0x3a6>
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	881b      	ldrh	r3, [r3, #0]
 800b842:	b29a      	uxth	r2, r3
 800b844:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b848:	4013      	ands	r3, r2
 800b84a:	b299      	uxth	r1, r3
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	441a      	add	r2, r3
 800b856:	4b76      	ldr	r3, [pc, #472]	; (800ba30 <USB_ActivateEndpoint+0x578>)
 800b858:	430b      	orrs	r3, r1
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b870:	2b00      	cmp	r3, #0
 800b872:	d013      	beq.n	800b89c <USB_ActivateEndpoint+0x3e4>
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4413      	add	r3, r2
 800b87e:	881b      	ldrh	r3, [r3, #0]
 800b880:	b29a      	uxth	r2, r3
 800b882:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b886:	4013      	ands	r3, r2
 800b888:	b299      	uxth	r1, r3
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	441a      	add	r2, r3
 800b894:	4b67      	ldr	r3, [pc, #412]	; (800ba34 <USB_ActivateEndpoint+0x57c>)
 800b896:	430b      	orrs	r3, r1
 800b898:	b29b      	uxth	r3, r3
 800b89a:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4413      	add	r3, r2
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b8ae:	4013      	ands	r3, r2
 800b8b0:	b299      	uxth	r1, r3
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	441a      	add	r2, r3
 800b8bc:	4b5d      	ldr	r3, [pc, #372]	; (800ba34 <USB_ActivateEndpoint+0x57c>)
 800b8be:	430b      	orrs	r3, r1
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4413      	add	r3, r2
 800b8ce:	881b      	ldrh	r3, [r3, #0]
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8da:	b29c      	uxth	r4, r3
 800b8dc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800b8e0:	b29c      	uxth	r4, r3
 800b8e2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800b8e6:	b29c      	uxth	r4, r3
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	441a      	add	r2, r3
 800b8f2:	4b51      	ldr	r3, [pc, #324]	; (800ba38 <USB_ActivateEndpoint+0x580>)
 800b8f4:	4323      	orrs	r3, r4
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	881b      	ldrh	r3, [r3, #0]
 800b906:	b29b      	uxth	r3, r3
 800b908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b90c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b910:	b29c      	uxth	r4, r3
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	441a      	add	r2, r3
 800b91c:	4b46      	ldr	r3, [pc, #280]	; (800ba38 <USB_ActivateEndpoint+0x580>)
 800b91e:	4323      	orrs	r3, r4
 800b920:	b29b      	uxth	r3, r3
 800b922:	8013      	strh	r3, [r2, #0]
 800b924:	e07b      	b.n	800ba1e <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	881b      	ldrh	r3, [r3, #0]
 800b932:	b29b      	uxth	r3, r3
 800b934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d013      	beq.n	800b964 <USB_ActivateEndpoint+0x4ac>
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4413      	add	r3, r2
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	b29a      	uxth	r2, r3
 800b94a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b94e:	4013      	ands	r3, r2
 800b950:	b299      	uxth	r1, r3
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	441a      	add	r2, r3
 800b95c:	4b34      	ldr	r3, [pc, #208]	; (800ba30 <USB_ActivateEndpoint+0x578>)
 800b95e:	430b      	orrs	r3, r1
 800b960:	b29b      	uxth	r3, r3
 800b962:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4413      	add	r3, r2
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	b29b      	uxth	r3, r3
 800b972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b976:	2b00      	cmp	r3, #0
 800b978:	d013      	beq.n	800b9a2 <USB_ActivateEndpoint+0x4ea>
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	b29a      	uxth	r2, r3
 800b988:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b98c:	4013      	ands	r3, r2
 800b98e:	b299      	uxth	r1, r3
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	441a      	add	r2, r3
 800b99a:	4b26      	ldr	r3, [pc, #152]	; (800ba34 <USB_ActivateEndpoint+0x57c>)
 800b99c:	430b      	orrs	r3, r1
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	881b      	ldrh	r3, [r3, #0]
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	b299      	uxth	r1, r3
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	441a      	add	r2, r3
 800b9c2:	4b1b      	ldr	r3, [pc, #108]	; (800ba30 <USB_ActivateEndpoint+0x578>)
 800b9c4:	430b      	orrs	r3, r1
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	881b      	ldrh	r3, [r3, #0]
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9e0:	b29c      	uxth	r4, r3
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	441a      	add	r2, r3
 800b9ec:	4b12      	ldr	r3, [pc, #72]	; (800ba38 <USB_ActivateEndpoint+0x580>)
 800b9ee:	4323      	orrs	r3, r4
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	4413      	add	r3, r2
 800b9fe:	881b      	ldrh	r3, [r3, #0]
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba0a:	b29c      	uxth	r4, r3
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	441a      	add	r2, r3
 800ba16:	4b08      	ldr	r3, [pc, #32]	; (800ba38 <USB_ActivateEndpoint+0x580>)
 800ba18:	4323      	orrs	r3, r4
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bc90      	pop	{r4, r7}
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	ffff8180 	.word	0xffff8180
 800ba30:	ffffc080 	.word	0xffffc080
 800ba34:	ffff80c0 	.word	0xffff80c0
 800ba38:	ffff8080 	.word	0xffff8080

0800ba3c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba3c:	b490      	push	{r4, r7}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	7a9b      	ldrb	r3, [r3, #10]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d16d      	bne.n	800bb2a <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	785b      	ldrb	r3, [r3, #1]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d034      	beq.n	800bac0 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d013      	beq.n	800ba94 <USB_DeactivateEndpoint+0x58>
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800ba7e:	4013      	ands	r3, r2
 800ba80:	b299      	uxth	r1, r3
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	441a      	add	r2, r3
 800ba8c:	4b68      	ldr	r3, [pc, #416]	; (800bc30 <USB_DeactivateEndpoint+0x1f4>)
 800ba8e:	430b      	orrs	r3, r1
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	881b      	ldrh	r3, [r3, #0]
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baaa:	b29c      	uxth	r4, r3
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	441a      	add	r2, r3
 800bab6:	4b5f      	ldr	r3, [pc, #380]	; (800bc34 <USB_DeactivateEndpoint+0x1f8>)
 800bab8:	4323      	orrs	r3, r4
 800baba:	b29b      	uxth	r3, r3
 800babc:	8013      	strh	r3, [r2, #0]
 800babe:	e139      	b.n	800bd34 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4413      	add	r3, r2
 800baca:	881b      	ldrh	r3, [r3, #0]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d013      	beq.n	800bafe <USB_DeactivateEndpoint+0xc2>
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	f640 730f 	movw	r3, #3855	; 0xf0f
 800bae8:	4013      	ands	r3, r2
 800baea:	b299      	uxth	r1, r3
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	441a      	add	r2, r3
 800baf6:	4b50      	ldr	r3, [pc, #320]	; (800bc38 <USB_DeactivateEndpoint+0x1fc>)
 800baf8:	430b      	orrs	r3, r1
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	881b      	ldrh	r3, [r3, #0]
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb14:	b29c      	uxth	r4, r3
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	441a      	add	r2, r3
 800bb20:	4b44      	ldr	r3, [pc, #272]	; (800bc34 <USB_DeactivateEndpoint+0x1f8>)
 800bb22:	4323      	orrs	r3, r4
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	8013      	strh	r3, [r2, #0]
 800bb28:	e104      	b.n	800bd34 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	785b      	ldrb	r3, [r3, #1]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f040 8084 	bne.w	800bc3c <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d013      	beq.n	800bb72 <USB_DeactivateEndpoint+0x136>
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	881b      	ldrh	r3, [r3, #0]
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	f640 730f 	movw	r3, #3855	; 0xf0f
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	b299      	uxth	r1, r3
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	441a      	add	r2, r3
 800bb6a:	4b33      	ldr	r3, [pc, #204]	; (800bc38 <USB_DeactivateEndpoint+0x1fc>)
 800bb6c:	430b      	orrs	r3, r1
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	4413      	add	r3, r2
 800bb7c:	881b      	ldrh	r3, [r3, #0]
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d013      	beq.n	800bbb0 <USB_DeactivateEndpoint+0x174>
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4413      	add	r3, r2
 800bb92:	881b      	ldrh	r3, [r3, #0]
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	f640 730f 	movw	r3, #3855	; 0xf0f
 800bb9a:	4013      	ands	r3, r2
 800bb9c:	b299      	uxth	r1, r3
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	441a      	add	r2, r3
 800bba8:	4b21      	ldr	r3, [pc, #132]	; (800bc30 <USB_DeactivateEndpoint+0x1f4>)
 800bbaa:	430b      	orrs	r3, r1
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	f640 730f 	movw	r3, #3855	; 0xf0f
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	b299      	uxth	r1, r3
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	441a      	add	r2, r3
 800bbd0:	4b17      	ldr	r3, [pc, #92]	; (800bc30 <USB_DeactivateEndpoint+0x1f4>)
 800bbd2:	430b      	orrs	r3, r1
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4413      	add	r3, r2
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbee:	b29c      	uxth	r4, r3
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	441a      	add	r2, r3
 800bbfa:	4b0e      	ldr	r3, [pc, #56]	; (800bc34 <USB_DeactivateEndpoint+0x1f8>)
 800bbfc:	4323      	orrs	r3, r4
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc18:	b29c      	uxth	r4, r3
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	441a      	add	r2, r3
 800bc24:	4b03      	ldr	r3, [pc, #12]	; (800bc34 <USB_DeactivateEndpoint+0x1f8>)
 800bc26:	4323      	orrs	r3, r4
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	8013      	strh	r3, [r2, #0]
 800bc2c:	e082      	b.n	800bd34 <USB_DeactivateEndpoint+0x2f8>
 800bc2e:	bf00      	nop
 800bc30:	ffff80c0 	.word	0xffff80c0
 800bc34:	ffff8080 	.word	0xffff8080
 800bc38:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	881b      	ldrh	r3, [r3, #0]
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d013      	beq.n	800bc7a <USB_DeactivateEndpoint+0x23e>
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4413      	add	r3, r2
 800bc5c:	881b      	ldrh	r3, [r3, #0]
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	f640 730f 	movw	r3, #3855	; 0xf0f
 800bc64:	4013      	ands	r3, r2
 800bc66:	b299      	uxth	r1, r3
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	441a      	add	r2, r3
 800bc72:	4b33      	ldr	r3, [pc, #204]	; (800bd40 <USB_DeactivateEndpoint+0x304>)
 800bc74:	430b      	orrs	r3, r1
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4413      	add	r3, r2
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d013      	beq.n	800bcb8 <USB_DeactivateEndpoint+0x27c>
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	881b      	ldrh	r3, [r3, #0]
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	f640 730f 	movw	r3, #3855	; 0xf0f
 800bca2:	4013      	ands	r3, r2
 800bca4:	b299      	uxth	r1, r3
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	441a      	add	r2, r3
 800bcb0:	4b24      	ldr	r3, [pc, #144]	; (800bd44 <USB_DeactivateEndpoint+0x308>)
 800bcb2:	430b      	orrs	r3, r1
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	881b      	ldrh	r3, [r3, #0]
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	f640 730f 	movw	r3, #3855	; 0xf0f
 800bcca:	4013      	ands	r3, r2
 800bccc:	b299      	uxth	r1, r3
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	441a      	add	r2, r3
 800bcd8:	4b19      	ldr	r3, [pc, #100]	; (800bd40 <USB_DeactivateEndpoint+0x304>)
 800bcda:	430b      	orrs	r3, r1
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	881b      	ldrh	r3, [r3, #0]
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcf6:	b29c      	uxth	r4, r3
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	441a      	add	r2, r3
 800bd02:	4b11      	ldr	r3, [pc, #68]	; (800bd48 <USB_DeactivateEndpoint+0x30c>)
 800bd04:	4323      	orrs	r3, r4
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd20:	b29c      	uxth	r4, r3
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	441a      	add	r2, r3
 800bd2c:	4b06      	ldr	r3, [pc, #24]	; (800bd48 <USB_DeactivateEndpoint+0x30c>)
 800bd2e:	4323      	orrs	r3, r4
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bc90      	pop	{r4, r7}
 800bd3e:	4770      	bx	lr
 800bd40:	ffffc080 	.word	0xffffc080
 800bd44:	ffff80c0 	.word	0xffff80c0
 800bd48:	ffff8080 	.word	0xffff8080

0800bd4c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800bd4c:	b590      	push	{r4, r7, lr}
 800bd4e:	b08d      	sub	sp, #52	; 0x34
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 800bd56:	2300      	movs	r3, #0
 800bd58:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	785b      	ldrb	r3, [r3, #1]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	f040 8149 	bne.w	800bffc <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	699a      	ldr	r2, [r3, #24]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d909      	bls.n	800bd8a <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	699a      	ldr	r2, [r3, #24]
 800bd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd82:	1ad2      	subs	r2, r2, r3
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	619a      	str	r2, [r3, #24]
 800bd88:	e005      	b.n	800bd96 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	2200      	movs	r2, #0
 800bd94:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	7a9b      	ldrb	r3, [r3, #10]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d11b      	bne.n	800bdd6 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	6959      	ldr	r1, [r3, #20]
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	889a      	ldrh	r2, [r3, #4]
 800bda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fb7d 	bl	800c4aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	461a      	mov	r2, r3
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	4413      	add	r3, r2
 800bdc2:	3302      	adds	r3, #2
 800bdc4:	005a      	lsls	r2, r3, #1
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4413      	add	r3, r2
 800bdca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdce:	461a      	mov	r2, r3
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	6013      	str	r3, [r2, #0]
 800bdd4:	e0f6      	b.n	800bfc4 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d059      	beq.n	800bea0 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	785b      	ldrb	r3, [r3, #1]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d13b      	bne.n	800be6c <USB_EPStartXfer+0x120>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	4413      	add	r3, r2
 800be06:	3306      	adds	r3, #6
 800be08:	005a      	lsls	r2, r3, #1
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4413      	add	r3, r2
 800be0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be12:	60bb      	str	r3, [r7, #8]
 800be14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be16:	2b3e      	cmp	r3, #62	; 0x3e
 800be18:	d916      	bls.n	800be48 <USB_EPStartXfer+0xfc>
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	095b      	lsrs	r3, r3, #5
 800be1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be22:	f003 031f 	and.w	r3, r3, #31
 800be26:	2b00      	cmp	r3, #0
 800be28:	d102      	bne.n	800be30 <USB_EPStartXfer+0xe4>
 800be2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be2c:	3b01      	subs	r3, #1
 800be2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800be30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be32:	029b      	lsls	r3, r3, #10
 800be34:	b29b      	uxth	r3, r3
 800be36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be3e:	b29b      	uxth	r3, r3
 800be40:	461a      	mov	r2, r3
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	e027      	b.n	800be98 <USB_EPStartXfer+0x14c>
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	085b      	lsrs	r3, r3, #1
 800be4c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <USB_EPStartXfer+0x112>
 800be58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be5a:	3301      	adds	r3, #1
 800be5c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800be5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be60:	029b      	lsls	r3, r3, #10
 800be62:	b29b      	uxth	r3, r3
 800be64:	461a      	mov	r2, r3
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	e015      	b.n	800be98 <USB_EPStartXfer+0x14c>
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	785b      	ldrb	r3, [r3, #1]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d111      	bne.n	800be98 <USB_EPStartXfer+0x14c>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	461a      	mov	r2, r3
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	4413      	add	r3, r2
 800be86:	3302      	adds	r3, #2
 800be88:	005a      	lsls	r2, r3, #1
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4413      	add	r3, r2
 800be8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be92:	461a      	mov	r2, r3
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	891b      	ldrh	r3, [r3, #8]
 800be9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800be9e:	e058      	b.n	800bf52 <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	785b      	ldrb	r3, [r3, #1]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d13b      	bne.n	800bf20 <USB_EPStartXfer+0x1d4>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beae:	b29b      	uxth	r3, r3
 800beb0:	461a      	mov	r2, r3
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	4413      	add	r3, r2
 800beba:	3302      	adds	r3, #2
 800bebc:	005a      	lsls	r2, r3, #1
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4413      	add	r3, r2
 800bec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beca:	2b3e      	cmp	r3, #62	; 0x3e
 800becc:	d916      	bls.n	800befc <USB_EPStartXfer+0x1b0>
 800bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed0:	095b      	lsrs	r3, r3, #5
 800bed2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	f003 031f 	and.w	r3, r3, #31
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d102      	bne.n	800bee4 <USB_EPStartXfer+0x198>
 800bede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bee0:	3b01      	subs	r3, #1
 800bee2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bee6:	029b      	lsls	r3, r3, #10
 800bee8:	b29b      	uxth	r3, r3
 800beea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800beee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	461a      	mov	r2, r3
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	601a      	str	r2, [r3, #0]
 800befa:	e027      	b.n	800bf4c <USB_EPStartXfer+0x200>
 800befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befe:	085b      	lsrs	r3, r3, #1
 800bf00:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <USB_EPStartXfer+0x1c6>
 800bf0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf0e:	3301      	adds	r3, #1
 800bf10:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bf12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf14:	029b      	lsls	r3, r3, #10
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	461a      	mov	r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	601a      	str	r2, [r3, #0]
 800bf1e:	e015      	b.n	800bf4c <USB_EPStartXfer+0x200>
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	785b      	ldrb	r3, [r3, #1]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d111      	bne.n	800bf4c <USB_EPStartXfer+0x200>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	461a      	mov	r2, r3
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	00db      	lsls	r3, r3, #3
 800bf38:	4413      	add	r3, r2
 800bf3a:	3302      	adds	r3, #2
 800bf3c:	005a      	lsls	r2, r3, #1
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4413      	add	r3, r2
 800bf42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf46:	461a      	mov	r2, r3
 800bf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4a:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	88db      	ldrh	r3, [r3, #6]
 800bf50:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	6959      	ldr	r1, [r3, #20]
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 faa4 	bl	800c4aa <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	785b      	ldrb	r3, [r3, #1]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d114      	bne.n	800bf94 <USB_EPStartXfer+0x248>
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	f640 730f 	movw	r3, #3855	; 0xf0f
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	b299      	uxth	r1, r3
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	441a      	add	r2, r3
 800bf8a:	4b92      	ldr	r3, [pc, #584]	; (800c1d4 <USB_EPStartXfer+0x488>)
 800bf8c:	430b      	orrs	r3, r1
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	8013      	strh	r3, [r2, #0]
 800bf92:	e017      	b.n	800bfc4 <USB_EPStartXfer+0x278>
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	785b      	ldrb	r3, [r3, #1]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d113      	bne.n	800bfc4 <USB_EPStartXfer+0x278>
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4413      	add	r3, r2
 800bfa6:	881b      	ldrh	r3, [r3, #0]
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	f640 730f 	movw	r3, #3855	; 0xf0f
 800bfae:	4013      	ands	r3, r2
 800bfb0:	b299      	uxth	r1, r3
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	441a      	add	r2, r3
 800bfbc:	4b86      	ldr	r3, [pc, #536]	; (800c1d8 <USB_EPStartXfer+0x48c>)
 800bfbe:	430b      	orrs	r3, r1
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfda:	b29c      	uxth	r4, r3
 800bfdc:	f084 0310 	eor.w	r3, r4, #16
 800bfe0:	b29c      	uxth	r4, r3
 800bfe2:	f084 0320 	eor.w	r3, r4, #32
 800bfe6:	b29c      	uxth	r4, r3
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	441a      	add	r2, r3
 800bff2:	4b7a      	ldr	r3, [pc, #488]	; (800c1dc <USB_EPStartXfer+0x490>)
 800bff4:	4323      	orrs	r3, r4
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	8013      	strh	r3, [r2, #0]
 800bffa:	e122      	b.n	800c242 <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	699a      	ldr	r2, [r3, #24]
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	429a      	cmp	r2, r3
 800c006:	d909      	bls.n	800c01c <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	699a      	ldr	r2, [r3, #24]
 800c012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c014:	1ad2      	subs	r2, r2, r3
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	619a      	str	r2, [r3, #24]
 800c01a:	e005      	b.n	800c028 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2200      	movs	r2, #0
 800c026:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	7a9b      	ldrb	r3, [r3, #10]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d13b      	bne.n	800c0a8 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c036:	b29b      	uxth	r3, r3
 800c038:	461a      	mov	r2, r3
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	4413      	add	r3, r2
 800c042:	3306      	adds	r3, #6
 800c044:	005a      	lsls	r2, r3, #1
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4413      	add	r3, r2
 800c04a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c04e:	613b      	str	r3, [r7, #16]
 800c050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c052:	2b3e      	cmp	r3, #62	; 0x3e
 800c054:	d916      	bls.n	800c084 <USB_EPStartXfer+0x338>
 800c056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c058:	095b      	lsrs	r3, r3, #5
 800c05a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05e:	f003 031f 	and.w	r3, r3, #31
 800c062:	2b00      	cmp	r3, #0
 800c064:	d102      	bne.n	800c06c <USB_EPStartXfer+0x320>
 800c066:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c068:	3b01      	subs	r3, #1
 800c06a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c06c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c06e:	029b      	lsls	r3, r3, #10
 800c070:	b29b      	uxth	r3, r3
 800c072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	461a      	mov	r2, r3
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	601a      	str	r2, [r3, #0]
 800c082:	e0c3      	b.n	800c20c <USB_EPStartXfer+0x4c0>
 800c084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c086:	085b      	lsrs	r3, r3, #1
 800c088:	847b      	strh	r3, [r7, #34]	; 0x22
 800c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08c:	f003 0301 	and.w	r3, r3, #1
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <USB_EPStartXfer+0x34e>
 800c094:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c096:	3301      	adds	r3, #1
 800c098:	847b      	strh	r3, [r7, #34]	; 0x22
 800c09a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c09c:	029b      	lsls	r3, r3, #10
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	e0b1      	b.n	800c20c <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	785b      	ldrb	r3, [r3, #1]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d13b      	bne.n	800c128 <USB_EPStartXfer+0x3dc>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	00db      	lsls	r3, r3, #3
 800c0c0:	4413      	add	r3, r2
 800c0c2:	3302      	adds	r3, #2
 800c0c4:	005a      	lsls	r2, r3, #1
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0ce:	61bb      	str	r3, [r7, #24]
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	2b3e      	cmp	r3, #62	; 0x3e
 800c0d4:	d916      	bls.n	800c104 <USB_EPStartXfer+0x3b8>
 800c0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d8:	095b      	lsrs	r3, r3, #5
 800c0da:	843b      	strh	r3, [r7, #32]
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	f003 031f 	and.w	r3, r3, #31
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d102      	bne.n	800c0ec <USB_EPStartXfer+0x3a0>
 800c0e6:	8c3b      	ldrh	r3, [r7, #32]
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	843b      	strh	r3, [r7, #32]
 800c0ec:	8c3b      	ldrh	r3, [r7, #32]
 800c0ee:	029b      	lsls	r3, r3, #10
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	e027      	b.n	800c154 <USB_EPStartXfer+0x408>
 800c104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c106:	085b      	lsrs	r3, r3, #1
 800c108:	843b      	strh	r3, [r7, #32]
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	f003 0301 	and.w	r3, r3, #1
 800c110:	2b00      	cmp	r3, #0
 800c112:	d002      	beq.n	800c11a <USB_EPStartXfer+0x3ce>
 800c114:	8c3b      	ldrh	r3, [r7, #32]
 800c116:	3301      	adds	r3, #1
 800c118:	843b      	strh	r3, [r7, #32]
 800c11a:	8c3b      	ldrh	r3, [r7, #32]
 800c11c:	029b      	lsls	r3, r3, #10
 800c11e:	b29b      	uxth	r3, r3
 800c120:	461a      	mov	r2, r3
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	e015      	b.n	800c154 <USB_EPStartXfer+0x408>
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	785b      	ldrb	r3, [r3, #1]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d111      	bne.n	800c154 <USB_EPStartXfer+0x408>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c136:	b29b      	uxth	r3, r3
 800c138:	461a      	mov	r2, r3
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	4413      	add	r3, r2
 800c142:	3302      	adds	r3, #2
 800c144:	005a      	lsls	r2, r3, #1
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4413      	add	r3, r2
 800c14a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c14e:	461a      	mov	r2, r3
 800c150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c152:	6013      	str	r3, [r2, #0]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	785b      	ldrb	r3, [r3, #1]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d141      	bne.n	800c1e0 <USB_EPStartXfer+0x494>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c162:	b29b      	uxth	r3, r3
 800c164:	461a      	mov	r2, r3
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	00db      	lsls	r3, r3, #3
 800c16c:	4413      	add	r3, r2
 800c16e:	3306      	adds	r3, #6
 800c170:	005a      	lsls	r2, r3, #1
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4413      	add	r3, r2
 800c176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c17a:	617b      	str	r3, [r7, #20]
 800c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17e:	2b3e      	cmp	r3, #62	; 0x3e
 800c180:	d916      	bls.n	800c1b0 <USB_EPStartXfer+0x464>
 800c182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c184:	095b      	lsrs	r3, r3, #5
 800c186:	83fb      	strh	r3, [r7, #30]
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	f003 031f 	and.w	r3, r3, #31
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d102      	bne.n	800c198 <USB_EPStartXfer+0x44c>
 800c192:	8bfb      	ldrh	r3, [r7, #30]
 800c194:	3b01      	subs	r3, #1
 800c196:	83fb      	strh	r3, [r7, #30]
 800c198:	8bfb      	ldrh	r3, [r7, #30]
 800c19a:	029b      	lsls	r3, r3, #10
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	601a      	str	r2, [r3, #0]
 800c1ae:	e02d      	b.n	800c20c <USB_EPStartXfer+0x4c0>
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	085b      	lsrs	r3, r3, #1
 800c1b4:	83fb      	strh	r3, [r7, #30]
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d002      	beq.n	800c1c6 <USB_EPStartXfer+0x47a>
 800c1c0:	8bfb      	ldrh	r3, [r7, #30]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	83fb      	strh	r3, [r7, #30]
 800c1c6:	8bfb      	ldrh	r3, [r7, #30]
 800c1c8:	029b      	lsls	r3, r3, #10
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	601a      	str	r2, [r3, #0]
 800c1d2:	e01b      	b.n	800c20c <USB_EPStartXfer+0x4c0>
 800c1d4:	ffff80c0 	.word	0xffff80c0
 800c1d8:	ffffc080 	.word	0xffffc080
 800c1dc:	ffff8080 	.word	0xffff8080
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	785b      	ldrb	r3, [r3, #1]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d111      	bne.n	800c20c <USB_EPStartXfer+0x4c0>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	4413      	add	r3, r2
 800c1fa:	3302      	adds	r3, #2
 800c1fc:	005a      	lsls	r2, r3, #1
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4413      	add	r3, r2
 800c202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c206:	461a      	mov	r2, r3
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	881b      	ldrh	r3, [r3, #0]
 800c218:	b29b      	uxth	r3, r3
 800c21a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c21e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c222:	b29c      	uxth	r4, r3
 800c224:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800c228:	b29c      	uxth	r4, r3
 800c22a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800c22e:	b29c      	uxth	r4, r3
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	441a      	add	r2, r3
 800c23a:	4b04      	ldr	r3, [pc, #16]	; (800c24c <USB_EPStartXfer+0x500>)
 800c23c:	4323      	orrs	r3, r4
 800c23e:	b29b      	uxth	r3, r3
 800c240:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3734      	adds	r7, #52	; 0x34
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd90      	pop	{r4, r7, pc}
 800c24c:	ffff8080 	.word	0xffff8080

0800c250 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800c250:	b490      	push	{r4, r7}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d118      	bne.n	800c294 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4413      	add	r3, r2
 800c26c:	881b      	ldrh	r3, [r3, #0]
 800c26e:	b29b      	uxth	r3, r3
 800c270:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800c274:	401c      	ands	r4, r3
 800c276:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800c27a:	f084 0410 	eor.w	r4, r4, #16
 800c27e:	b2a1      	uxth	r1, r4
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	441a      	add	r2, r3
 800c28a:	4b20      	ldr	r3, [pc, #128]	; (800c30c <USB_EPSetStall+0xbc>)
 800c28c:	430b      	orrs	r3, r1
 800c28e:	b29b      	uxth	r3, r3
 800c290:	8013      	strh	r3, [r2, #0]
 800c292:	e034      	b.n	800c2fe <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	785b      	ldrb	r3, [r3, #1]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d018      	beq.n	800c2ce <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	4413      	add	r3, r2
 800c2a6:	881b      	ldrh	r3, [r3, #0]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2b2:	b29c      	uxth	r4, r3
 800c2b4:	f084 0310 	eor.w	r3, r4, #16
 800c2b8:	b29c      	uxth	r4, r3
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	441a      	add	r2, r3
 800c2c4:	4b11      	ldr	r3, [pc, #68]	; (800c30c <USB_EPSetStall+0xbc>)
 800c2c6:	4323      	orrs	r3, r4
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	8013      	strh	r3, [r2, #0]
 800c2cc:	e017      	b.n	800c2fe <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4413      	add	r3, r2
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c2e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2e4:	b29c      	uxth	r4, r3
 800c2e6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800c2ea:	b29c      	uxth	r4, r3
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	441a      	add	r2, r3
 800c2f6:	4b05      	ldr	r3, [pc, #20]	; (800c30c <USB_EPSetStall+0xbc>)
 800c2f8:	4323      	orrs	r3, r4
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bc90      	pop	{r4, r7}
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	ffff8080 	.word	0xffff8080

0800c310 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c310:	b490      	push	{r4, r7}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	785b      	ldrb	r3, [r3, #1]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d03a      	beq.n	800c398 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	881b      	ldrh	r3, [r3, #0]
 800c32e:	b29b      	uxth	r3, r3
 800c330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c334:	2b00      	cmp	r3, #0
 800c336:	d013      	beq.n	800c360 <USB_EPClearStall+0x50>
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	881b      	ldrh	r3, [r3, #0]
 800c344:	b29a      	uxth	r2, r3
 800c346:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c34a:	4013      	ands	r3, r2
 800c34c:	b299      	uxth	r1, r3
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	441a      	add	r2, r3
 800c358:	4b2f      	ldr	r3, [pc, #188]	; (800c418 <USB_EPClearStall+0x108>)
 800c35a:	430b      	orrs	r3, r1
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c376:	b29c      	uxth	r4, r3
 800c378:	f084 0310 	eor.w	r3, r4, #16
 800c37c:	b29c      	uxth	r4, r3
 800c37e:	f084 0320 	eor.w	r3, r4, #32
 800c382:	b29c      	uxth	r4, r3
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	441a      	add	r2, r3
 800c38e:	4b23      	ldr	r3, [pc, #140]	; (800c41c <USB_EPClearStall+0x10c>)
 800c390:	4323      	orrs	r3, r4
 800c392:	b29b      	uxth	r3, r3
 800c394:	8013      	strh	r3, [r2, #0]
 800c396:	e039      	b.n	800c40c <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4413      	add	r3, r2
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d013      	beq.n	800c3d6 <USB_EPClearStall+0xc6>
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	b299      	uxth	r1, r3
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	441a      	add	r2, r3
 800c3ce:	4b14      	ldr	r3, [pc, #80]	; (800c420 <USB_EPClearStall+0x110>)
 800c3d0:	430b      	orrs	r3, r1
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	881b      	ldrh	r3, [r3, #0]
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c3e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3ec:	b29c      	uxth	r4, r3
 800c3ee:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800c3f2:	b29c      	uxth	r4, r3
 800c3f4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800c3f8:	b29c      	uxth	r4, r3
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	441a      	add	r2, r3
 800c404:	4b05      	ldr	r3, [pc, #20]	; (800c41c <USB_EPClearStall+0x10c>)
 800c406:	4323      	orrs	r3, r4
 800c408:	b29b      	uxth	r3, r3
 800c40a:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bc90      	pop	{r4, r7}
 800c416:	4770      	bx	lr
 800c418:	ffff80c0 	.word	0xffff80c0
 800c41c:	ffff8080 	.word	0xffff8080
 800c420:	ffffc080 	.word	0xffffc080

0800c424 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	460b      	mov	r3, r1
 800c42e:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 800c430:	78fb      	ldrb	r3, [r7, #3]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d103      	bne.n	800c43e <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2280      	movs	r2, #128	; 0x80
 800c43a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	bc80      	pop	{r7}
 800c448:	4770      	bx	lr

0800c44a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 800c44a:	b480      	push	{r7}
 800c44c:	b083      	sub	sp, #12
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	bc80      	pop	{r7}
 800c45c:	4770      	bx	lr

0800c45e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 800c45e:	b480      	push	{r7}
 800c460:	b083      	sub	sp, #12
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bc80      	pop	{r7}
 800c470:	4770      	bx	lr

0800c472 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 800c472:	b480      	push	{r7}
 800c474:	b085      	sub	sp, #20
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c484:	b29b      	uxth	r3, r3
 800c486:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c488:	68fb      	ldr	r3, [r7, #12]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	bc80      	pop	{r7}
 800c492:	4770      	bx	lr

0800c494 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bc80      	pop	{r7}
 800c4a8:	4770      	bx	lr

0800c4aa <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c4aa:	b480      	push	{r7}
 800c4ac:	b08b      	sub	sp, #44	; 0x2c
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	60f8      	str	r0, [r7, #12]
 800c4b2:	60b9      	str	r1, [r7, #8]
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	80fb      	strh	r3, [r7, #6]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800c4c0:	88bb      	ldrh	r3, [r7, #4]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	105b      	asrs	r3, r3, #1
 800c4c6:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	627b      	str	r3, [r7, #36]	; 0x24
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	61bb      	str	r3, [r7, #24]
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800c4d8:	88fb      	ldrh	r3, [r7, #6]
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	461a      	mov	r2, r3
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4e6:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	627b      	str	r3, [r7, #36]	; 0x24
 800c4ec:	e01b      	b.n	800c526 <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	021b      	lsls	r3, r3, #8
 800c500:	461a      	mov	r2, r3
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	4313      	orrs	r3, r2
 800c506:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 800c508:	6a3b      	ldr	r3, [r7, #32]
 800c50a:	1c9a      	adds	r2, r3, #2
 800c50c:	623a      	str	r2, [r7, #32]
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	b292      	uxth	r2, r2
 800c512:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c514:	6a3b      	ldr	r3, [r7, #32]
 800c516:	3302      	adds	r3, #2
 800c518:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	3301      	adds	r3, #1
 800c51e:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	3b01      	subs	r3, #1
 800c524:	627b      	str	r3, [r7, #36]	; 0x24
 800c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1e0      	bne.n	800c4ee <USB_WritePMA+0x44>
  }
}
 800c52c:	bf00      	nop
 800c52e:	372c      	adds	r7, #44	; 0x2c
 800c530:	46bd      	mov	sp, r7
 800c532:	bc80      	pop	{r7}
 800c534:	4770      	bx	lr

0800c536 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c536:	b480      	push	{r7}
 800c538:	b089      	sub	sp, #36	; 0x24
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	60f8      	str	r0, [r7, #12]
 800c53e:	60b9      	str	r1, [r7, #8]
 800c540:	4611      	mov	r1, r2
 800c542:	461a      	mov	r2, r3
 800c544:	460b      	mov	r3, r1
 800c546:	80fb      	strh	r3, [r7, #6]
 800c548:	4613      	mov	r3, r2
 800c54a:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800c54c:	88bb      	ldrh	r3, [r7, #4]
 800c54e:	3301      	adds	r3, #1
 800c550:	105b      	asrs	r3, r3, #1
 800c552:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 800c554:	2300      	movs	r3, #0
 800c556:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 800c558:	2300      	movs	r3, #0
 800c55a:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800c55c:	88fb      	ldrh	r3, [r7, #6]
 800c55e:	005b      	lsls	r3, r3, #1
 800c560:	461a      	mov	r2, r3
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	4413      	add	r3, r2
 800c566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c56a:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	61fb      	str	r3, [r7, #28]
 800c570:	e00e      	b.n	800c590 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	1d1a      	adds	r2, r3, #4
 800c576:	61ba      	str	r2, [r7, #24]
 800c578:	6819      	ldr	r1, [r3, #0]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	1c5a      	adds	r2, r3, #1
 800c57e:	60ba      	str	r2, [r7, #8]
 800c580:	b28a      	uxth	r2, r1
 800c582:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	3301      	adds	r3, #1
 800c588:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	3b01      	subs	r3, #1
 800c58e:	61fb      	str	r3, [r7, #28]
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d1ed      	bne.n	800c572 <USB_ReadPMA+0x3c>
  }
}
 800c596:	bf00      	nop
 800c598:	3724      	adds	r7, #36	; 0x24
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bc80      	pop	{r7}
 800c59e:	4770      	bx	lr

0800c5a0 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	7c1b      	ldrb	r3, [r3, #16]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10e      	bne.n	800c5d6 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800c5b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5bc:	2202      	movs	r2, #2
 800c5be:	2181      	movs	r1, #129	; 0x81
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f001 fd40 	bl	800e046 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800c5c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f001 fd39 	bl	800e046 <USBD_LL_OpenEP>
 800c5d4:	e00b      	b.n	800c5ee <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800c5d6:	2340      	movs	r3, #64	; 0x40
 800c5d8:	2202      	movs	r2, #2
 800c5da:	2181      	movs	r1, #129	; 0x81
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f001 fd32 	bl	800e046 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800c5e2:	2340      	movs	r3, #64	; 0x40
 800c5e4:	2202      	movs	r2, #2
 800c5e6:	2101      	movs	r1, #1
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f001 fd2c 	bl	800e046 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800c5ee:	2308      	movs	r3, #8
 800c5f0:	2203      	movs	r2, #3
 800c5f2:	2182      	movs	r1, #130	; 0x82
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f001 fd26 	bl	800e046 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c5fa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c5fe:	f001 fe43 	bl	800e288 <USBD_static_malloc>
 800c602:	4602      	mov	r2, r0
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c610:	2b00      	cmp	r3, #0
 800c612:	d102      	bne.n	800c61a <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 800c614:	2301      	movs	r3, #1
 800c616:	73fb      	strb	r3, [r7, #15]
 800c618:	e026      	b.n	800c668 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c620:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2200      	movs	r2, #0
 800c630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2200      	movs	r2, #0
 800c638:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	7c1b      	ldrb	r3, [r3, #16]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d109      	bne.n	800c658 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c64a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c64e:	2101      	movs	r1, #1
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f001 fde2 	bl	800e21a <USBD_LL_PrepareReceive>
 800c656:	e007      	b.n	800c668 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c65e:	2340      	movs	r3, #64	; 0x40
 800c660:	2101      	movs	r1, #1
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f001 fdd9 	bl	800e21a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 800c668:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b084      	sub	sp, #16
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
 800c67a:	460b      	mov	r3, r1
 800c67c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800c682:	2181      	movs	r1, #129	; 0x81
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f001 fd04 	bl	800e092 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800c68a:	2101      	movs	r1, #1
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f001 fd00 	bl	800e092 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800c692:	2182      	movs	r1, #130	; 0x82
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f001 fcfc 	bl	800e092 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00e      	beq.n	800c6c2 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f001 fdf3 	bl	800e2a0 <USBD_static_free>
    pdev->pClassData = NULL;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800c6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c6dc:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d03a      	beq.n	800c760 <USBD_CDC_Setup+0x94>
 800c6ea:	2b20      	cmp	r3, #32
 800c6ec:	d000      	beq.n	800c6f0 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800c6ee:	e043      	b.n	800c778 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	88db      	ldrh	r3, [r3, #6]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d029      	beq.n	800c74c <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	b25b      	sxtb	r3, r3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	da11      	bge.n	800c726 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	683a      	ldr	r2, [r7, #0]
 800c70c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800c70e:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c710:	683a      	ldr	r2, [r7, #0]
 800c712:	88d2      	ldrh	r2, [r2, #6]
 800c714:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 800c716:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	88db      	ldrh	r3, [r3, #6]
 800c71c:	461a      	mov	r2, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f001 f80e 	bl	800d740 <USBD_CtlSendData>
    break;
 800c724:	e029      	b.n	800c77a <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	785a      	ldrb	r2, [r3, #1]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	88db      	ldrh	r3, [r3, #6]
 800c734:	b2da      	uxtb	r2, r3
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 800c73c:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	88db      	ldrh	r3, [r3, #6]
 800c742:	461a      	mov	r2, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f001 f829 	bl	800d79c <USBD_CtlPrepareRx>
    break;
 800c74a:	e016      	b.n	800c77a <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	7850      	ldrb	r0, [r2, #1]
 800c758:	2200      	movs	r2, #0
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	4798      	blx	r3
    break;
 800c75e:	e00c      	b.n	800c77a <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	785b      	ldrb	r3, [r3, #1]
 800c764:	2b0a      	cmp	r3, #10
 800c766:	d001      	beq.n	800c76c <USBD_CDC_Setup+0xa0>
 800c768:	2b0b      	cmp	r3, #11
      break;
 800c76a:	e005      	b.n	800c778 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 800c76c:	2201      	movs	r2, #1
 800c76e:	4905      	ldr	r1, [pc, #20]	; (800c784 <USBD_CDC_Setup+0xb8>)
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 ffe5 	bl	800d740 <USBD_CtlSendData>
      break;
 800c776:	bf00      	nop
    break;
 800c778:	bf00      	nop
  }
  return USBD_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	20000cbc 	.word	0x20000cbc

0800c788 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	460b      	mov	r3, r1
 800c792:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c79a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d005      	beq.n	800c7b2 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	e000      	b.n	800c7b4 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800c7b2:	2302      	movs	r3, #2
  }
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3714      	adds	r7, #20
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bc80      	pop	{r7}
 800c7bc:	4770      	bx	lr

0800c7be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c7d0:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c7d2:	78fb      	ldrb	r3, [r7, #3]
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f001 fd42 	bl	800e260 <USBD_LL_GetRxDataSize>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00d      	beq.n	800c80a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	68fa      	ldr	r2, [r7, #12]
 800c7f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c802:	4611      	mov	r1, r2
 800c804:	4798      	blx	r3

    return USBD_OK;
 800c806:	2300      	movs	r3, #0
 800c808:	e000      	b.n	800c80c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c80a:	2302      	movs	r3, #2
  }
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c822:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d015      	beq.n	800c85a <USBD_CDC_EP0_RxReady+0x46>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c834:	2bff      	cmp	r3, #255	; 0xff
 800c836:	d010      	beq.n	800c85a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c846:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c84e:	b292      	uxth	r2, r2
 800c850:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	22ff      	movs	r2, #255	; 0xff
 800c856:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3710      	adds	r7, #16
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2243      	movs	r2, #67	; 0x43
 800c870:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c872:	4b03      	ldr	r3, [pc, #12]	; (800c880 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c874:	4618      	mov	r0, r3
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	bc80      	pop	{r7}
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	200000b8 	.word	0x200000b8

0800c884 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2243      	movs	r2, #67	; 0x43
 800c890:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c892:	4b03      	ldr	r3, [pc, #12]	; (800c8a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c894:	4618      	mov	r0, r3
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	bc80      	pop	{r7}
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	20000074 	.word	0x20000074

0800c8a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2243      	movs	r2, #67	; 0x43
 800c8b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c8b2:	4b03      	ldr	r3, [pc, #12]	; (800c8c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bc80      	pop	{r7}
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	200000fc 	.word	0x200000fc

0800c8c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	220a      	movs	r2, #10
 800c8d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c8d2:	4b03      	ldr	r3, [pc, #12]	; (800c8e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bc80      	pop	{r7}
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	20000030 	.word	0x20000030

0800c8e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c8ee:	2302      	movs	r3, #2
 800c8f0:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d005      	beq.n	800c904 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 800c900:	2300      	movs	r3, #0
 800c902:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800c904:	7bfb      	ldrb	r3, [r7, #15]
}
 800c906:	4618      	mov	r0, r3
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bc80      	pop	{r7}
 800c90e:	4770      	bx	lr

0800c910 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c910:	b480      	push	{r7}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	4613      	mov	r3, r2
 800c91c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c924:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800c92e:	88fa      	ldrh	r2, [r7, #6]
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	371c      	adds	r7, #28
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bc80      	pop	{r7}
 800c940:	4770      	bx	lr

0800c942 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c942:	b480      	push	{r7}
 800c944:	b085      	sub	sp, #20
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c952:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	683a      	ldr	r2, [r7, #0]
 800c958:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	bc80      	pop	{r7}
 800c966:	4770      	bx	lr

0800c968 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c976:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d017      	beq.n	800c9b2 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d110      	bne.n	800c9ae <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2201      	movs	r2, #1
 800c990:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	2181      	movs	r1, #129	; 0x81
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f001 fc15 	bl	800e1d4 <USBD_LL_Transmit>
      
      return USBD_OK;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	e002      	b.n	800c9b4 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e000      	b.n	800c9b4 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 800c9b2:	2302      	movs	r3, #2
  }
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c9ca:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d017      	beq.n	800ca06 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	7c1b      	ldrb	r3, [r3, #16]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d109      	bne.n	800c9f2 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9e8:	2101      	movs	r1, #1
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f001 fc15 	bl	800e21a <USBD_LL_PrepareReceive>
 800c9f0:	e007      	b.n	800ca02 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9f8:	2340      	movs	r3, #64	; 0x40
 800c9fa:	2101      	movs	r1, #1
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f001 fc0c 	bl	800e21a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	e000      	b.n	800ca08 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ca06:	2302      	movs	r3, #2
  }
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d101      	bne.n	800ca28 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800ca24:	2302      	movs	r3, #2
 800ca26:	e01a      	b.n	800ca5e <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d003      	beq.n	800ca3a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2200      	movs	r2, #0
 800ca36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d003      	beq.n	800ca48 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	79fa      	ldrb	r2, [r7, #7]
 800ca54:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	f001 fa80 	bl	800df5c <USBD_LL_Init>
  
  return USBD_OK; 
 800ca5c:	2300      	movs	r3, #0
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ca66:	b480      	push	{r7}
 800ca68:	b085      	sub	sp, #20
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800ca70:	2300      	movs	r3, #0
 800ca72:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d006      	beq.n	800ca88 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]
 800ca86:	e001      	b.n	800ca8c <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800ca88:	2302      	movs	r3, #2
 800ca8a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3714      	adds	r7, #20
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bc80      	pop	{r7}
 800ca96:	4770      	bx	lr

0800ca98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f001 fab5 	bl	800e010 <USBD_LL_Start>
  
  return USBD_OK;  
 800caa6:	2300      	movs	r3, #0
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	370c      	adds	r7, #12
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bc80      	pop	{r7}
 800cac2:	4770      	bx	lr

0800cac4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	460b      	mov	r3, r1
 800cace:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800cad0:	2302      	movs	r3, #2
 800cad2:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00c      	beq.n	800caf8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	78fa      	ldrb	r2, [r7, #3]
 800cae8:	4611      	mov	r1, r2
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	4798      	blx	r3
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d101      	bne.n	800caf8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800caf4:	2300      	movs	r3, #0
 800caf6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	78fa      	ldrb	r2, [r7, #3]
 800cb18:	4611      	mov	r1, r2
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	4798      	blx	r3
  return USBD_OK;
 800cb1e:	2300      	movs	r3, #0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cb38:	6839      	ldr	r1, [r7, #0]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 fd59 	bl	800d5f2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2201      	movs	r2, #1
 800cb44:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800cb4e:	461a      	mov	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800cb5c:	f003 031f 	and.w	r3, r3, #31
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d00b      	beq.n	800cb7c <USBD_LL_SetupStage+0x54>
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d011      	beq.n	800cb8c <USBD_LL_SetupStage+0x64>
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d117      	bne.n	800cb9c <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cb72:	4619      	mov	r1, r3
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 f987 	bl	800ce88 <USBD_StdDevReq>
    break;
 800cb7a:	e01a      	b.n	800cbb2 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cb82:	4619      	mov	r1, r3
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 f9cf 	bl	800cf28 <USBD_StdItfReq>
    break;
 800cb8a:	e012      	b.n	800cbb2 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cb92:	4619      	mov	r1, r3
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 f9fa 	bl	800cf8e <USBD_StdEPReq>
    break;
 800cb9a:	e00a      	b.n	800cbb2 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800cba2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f001 fa90 	bl	800e0d0 <USBD_LL_StallEP>
    break;
 800cbb0:	bf00      	nop
  }  
  return USBD_OK;  
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	607a      	str	r2, [r7, #4]
 800cbc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800cbca:	7afb      	ldrb	r3, [r7, #11]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d138      	bne.n	800cc42 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800cbd6:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800cbde:	2b03      	cmp	r3, #3
 800cbe0:	d142      	bne.n	800cc68 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	689a      	ldr	r2, [r3, #8]
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d914      	bls.n	800cc18 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	689a      	ldr	r2, [r3, #8]
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	1ad2      	subs	r2, r2, r3
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	68da      	ldr	r2, [r3, #12]
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	4293      	cmp	r3, r2
 800cc06:	bf28      	it	cs
 800cc08:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f000 fde1 	bl	800d7d8 <USBD_CtlContinueRx>
 800cc16:	e027      	b.n	800cc68 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00a      	beq.n	800cc3a <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	d105      	bne.n	800cc3a <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f000 fdde 	bl	800d7fc <USBD_CtlSendStatus>
 800cc40:	e012      	b.n	800cc68 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc48:	699b      	ldr	r3, [r3, #24]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00c      	beq.n	800cc68 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800cc54:	2b03      	cmp	r3, #3
 800cc56:	d107      	bne.n	800cc68 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc5e:	699b      	ldr	r3, [r3, #24]
 800cc60:	7afa      	ldrb	r2, [r7, #11]
 800cc62:	4611      	mov	r1, r2
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	4798      	blx	r3
  }  
  return USBD_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3718      	adds	r7, #24
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b086      	sub	sp, #24
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	60f8      	str	r0, [r7, #12]
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	607a      	str	r2, [r7, #4]
 800cc7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800cc80:	7afb      	ldrb	r3, [r7, #11]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d16c      	bne.n	800cd60 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	3314      	adds	r3, #20
 800cc8a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800cc92:	2b02      	cmp	r3, #2
 800cc94:	d157      	bne.n	800cd46 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	689a      	ldr	r2, [r3, #8]
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d915      	bls.n	800ccce <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	689a      	ldr	r2, [r3, #8]
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	1ad2      	subs	r2, r2, r3
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f000 fd5c 	bl	800d778 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f001 faa7 	bl	800e21a <USBD_LL_PrepareReceive>
 800cccc:	e03b      	b.n	800cd46 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	697a      	ldr	r2, [r7, #20]
 800ccd4:	68d2      	ldr	r2, [r2, #12]
 800ccd6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ccda:	fb02 f201 	mul.w	r2, r2, r1
 800ccde:	1a9b      	subs	r3, r3, r2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d11c      	bne.n	800cd1e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	685a      	ldr	r2, [r3, #4]
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d316      	bcc.n	800cd1e <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	685a      	ldr	r2, [r3, #4]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d20f      	bcs.n	800cd1e <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800ccfe:	2200      	movs	r2, #0
 800cd00:	2100      	movs	r1, #0
 800cd02:	68f8      	ldr	r0, [r7, #12]
 800cd04:	f000 fd38 	bl	800d778 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800cd10:	2300      	movs	r3, #0
 800cd12:	2200      	movs	r2, #0
 800cd14:	2100      	movs	r1, #0
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f001 fa7f 	bl	800e21a <USBD_LL_PrepareReceive>
 800cd1c:	e013      	b.n	800cd46 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00a      	beq.n	800cd40 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	d105      	bne.n	800cd40 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 fd6e 	bl	800d822 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d11a      	bne.n	800cd86 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f7ff fead 	bl	800cab0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800cd5e:	e012      	b.n	800cd86 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd66:	695b      	ldr	r3, [r3, #20]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00c      	beq.n	800cd86 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800cd72:	2b03      	cmp	r3, #3
 800cd74:	d107      	bne.n	800cd86 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	7afa      	ldrb	r2, [r7, #11]
 800cd80:	4611      	mov	r1, r2
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	4798      	blx	r3
  }  
  return USBD_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3718      	adds	r7, #24
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800cd98:	2340      	movs	r3, #64	; 0x40
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f001 f951 	bl	800e046 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2240      	movs	r2, #64	; 0x40
 800cda8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800cdac:	2340      	movs	r3, #64	; 0x40
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2180      	movs	r1, #128	; 0x80
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f001 f947 	bl	800e046 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2240      	movs	r2, #64	; 0x40
 800cdbc:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d009      	beq.n	800cde4 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	6852      	ldr	r2, [r2, #4]
 800cddc:	b2d2      	uxtb	r2, r2
 800cdde:	4611      	mov	r1, r2
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	4798      	blx	r3
 
  
  return USBD_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800cdee:	b480      	push	{r7}
 800cdf0:	b083      	sub	sp, #12
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	78fa      	ldrb	r2, [r7, #3]
 800cdfe:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	370c      	adds	r7, #12
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bc80      	pop	{r7}
 800ce0a:	4770      	bx	lr

0800ce0c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2204      	movs	r2, #4
 800ce24:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	370c      	adds	r7, #12
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bc80      	pop	{r7}
 800ce32:	4770      	bx	lr

0800ce34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	370c      	adds	r7, #12
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bc80      	pop	{r7}
 800ce52:	4770      	bx	lr

0800ce54 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800ce62:	2b03      	cmp	r3, #3
 800ce64:	d10b      	bne.n	800ce7e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ce6c:	69db      	ldr	r3, [r3, #28]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d005      	beq.n	800ce7e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3708      	adds	r7, #8
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800ce92:	2300      	movs	r3, #0
 800ce94:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	785b      	ldrb	r3, [r3, #1]
 800ce9a:	2b09      	cmp	r3, #9
 800ce9c:	d839      	bhi.n	800cf12 <USBD_StdDevReq+0x8a>
 800ce9e:	a201      	add	r2, pc, #4	; (adr r2, 800cea4 <USBD_StdDevReq+0x1c>)
 800cea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea4:	0800cef5 	.word	0x0800cef5
 800cea8:	0800cf09 	.word	0x0800cf09
 800ceac:	0800cf13 	.word	0x0800cf13
 800ceb0:	0800ceff 	.word	0x0800ceff
 800ceb4:	0800cf13 	.word	0x0800cf13
 800ceb8:	0800ced7 	.word	0x0800ced7
 800cebc:	0800cecd 	.word	0x0800cecd
 800cec0:	0800cf13 	.word	0x0800cf13
 800cec4:	0800ceeb 	.word	0x0800ceeb
 800cec8:	0800cee1 	.word	0x0800cee1
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800cecc:	6839      	ldr	r1, [r7, #0]
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f936 	bl	800d140 <USBD_GetDescriptor>
    break;
 800ced4:	e022      	b.n	800cf1c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800ced6:	6839      	ldr	r1, [r7, #0]
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 fa25 	bl	800d328 <USBD_SetAddress>
    break;
 800cede:	e01d      	b.n	800cf1c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 fa5e 	bl	800d3a4 <USBD_SetConfig>
    break;
 800cee8:	e018      	b.n	800cf1c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800ceea:	6839      	ldr	r1, [r7, #0]
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 fae1 	bl	800d4b4 <USBD_GetConfig>
    break;
 800cef2:	e013      	b.n	800cf1c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800cef4:	6839      	ldr	r1, [r7, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 fb0e 	bl	800d518 <USBD_GetStatus>
    break;
 800cefc:	e00e      	b.n	800cf1c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 fb33 	bl	800d56c <USBD_SetFeature>
    break;
 800cf06:	e009      	b.n	800cf1c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800cf08:	6839      	ldr	r1, [r7, #0]
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fb49 	bl	800d5a2 <USBD_ClrFeature>
    break;
 800cf10:	e004      	b.n	800cf1c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fba8 	bl	800d66a <USBD_CtlError>
    break;
 800cf1a:	bf00      	nop
  }
  
  return ret;
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop

0800cf28 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800cf32:	2300      	movs	r3, #0
 800cf34:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800cf3c:	2b03      	cmp	r3, #3
 800cf3e:	d11b      	bne.n	800cf78 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	889b      	ldrh	r3, [r3, #4]
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d811      	bhi.n	800cf6e <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	6839      	ldr	r1, [r7, #0]
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	88db      	ldrh	r3, [r3, #6]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d110      	bne.n	800cf82 <USBD_StdItfReq+0x5a>
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10d      	bne.n	800cf82 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fc48 	bl	800d7fc <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800cf6c:	e009      	b.n	800cf82 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800cf6e:	6839      	ldr	r1, [r7, #0]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fb7a 	bl	800d66a <USBD_CtlError>
    break;
 800cf76:	e004      	b.n	800cf82 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 800cf78:	6839      	ldr	r1, [r7, #0]
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fb75 	bl	800d66a <USBD_CtlError>
    break;
 800cf80:	e000      	b.n	800cf84 <USBD_StdItfReq+0x5c>
    break;
 800cf82:	bf00      	nop
  }
  return USBD_OK;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b084      	sub	sp, #16
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
 800cf96:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800cf98:	2300      	movs	r3, #0
 800cf9a:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	889b      	ldrh	r3, [r3, #4]
 800cfa0:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cfaa:	2b20      	cmp	r3, #32
 800cfac:	d108      	bne.n	800cfc0 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	4798      	blx	r3
    
    return USBD_OK;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	e0ba      	b.n	800d136 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	785b      	ldrb	r3, [r3, #1]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d039      	beq.n	800d03c <USBD_StdEPReq+0xae>
 800cfc8:	2b03      	cmp	r3, #3
 800cfca:	d002      	beq.n	800cfd2 <USBD_StdEPReq+0x44>
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d06b      	beq.n	800d0a8 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800cfd0:	e0b0      	b.n	800d134 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d002      	beq.n	800cfe2 <USBD_StdEPReq+0x54>
 800cfdc:	2b03      	cmp	r3, #3
 800cfde:	d00c      	beq.n	800cffa <USBD_StdEPReq+0x6c>
 800cfe0:	e025      	b.n	800d02e <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800cfe2:	7bbb      	ldrb	r3, [r7, #14]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d027      	beq.n	800d038 <USBD_StdEPReq+0xaa>
 800cfe8:	7bbb      	ldrb	r3, [r7, #14]
 800cfea:	2b80      	cmp	r3, #128	; 0x80
 800cfec:	d024      	beq.n	800d038 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800cfee:	7bbb      	ldrb	r3, [r7, #14]
 800cff0:	4619      	mov	r1, r3
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f001 f86c 	bl	800e0d0 <USBD_LL_StallEP>
      break;	
 800cff8:	e01e      	b.n	800d038 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	885b      	ldrh	r3, [r3, #2]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10a      	bne.n	800d018 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800d002:	7bbb      	ldrb	r3, [r7, #14]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d007      	beq.n	800d018 <USBD_StdEPReq+0x8a>
 800d008:	7bbb      	ldrb	r3, [r7, #14]
 800d00a:	2b80      	cmp	r3, #128	; 0x80
 800d00c:	d004      	beq.n	800d018 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800d00e:	7bbb      	ldrb	r3, [r7, #14]
 800d010:	4619      	mov	r1, r3
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f001 f85c 	bl	800e0d0 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 fbe8 	bl	800d7fc <USBD_CtlSendStatus>
      break;
 800d02c:	e005      	b.n	800d03a <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800d02e:	6839      	ldr	r1, [r7, #0]
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 fb1a 	bl	800d66a <USBD_CtlError>
      break;    
 800d036:	e000      	b.n	800d03a <USBD_StdEPReq+0xac>
      break;	
 800d038:	bf00      	nop
    break;
 800d03a:	e07b      	b.n	800d134 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800d042:	2b02      	cmp	r3, #2
 800d044:	d002      	beq.n	800d04c <USBD_StdEPReq+0xbe>
 800d046:	2b03      	cmp	r3, #3
 800d048:	d00c      	beq.n	800d064 <USBD_StdEPReq+0xd6>
 800d04a:	e024      	b.n	800d096 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800d04c:	7bbb      	ldrb	r3, [r7, #14]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d026      	beq.n	800d0a0 <USBD_StdEPReq+0x112>
 800d052:	7bbb      	ldrb	r3, [r7, #14]
 800d054:	2b80      	cmp	r3, #128	; 0x80
 800d056:	d023      	beq.n	800d0a0 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 800d058:	7bbb      	ldrb	r3, [r7, #14]
 800d05a:	4619      	mov	r1, r3
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f001 f837 	bl	800e0d0 <USBD_LL_StallEP>
      break;	
 800d062:	e01d      	b.n	800d0a0 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	885b      	ldrh	r3, [r3, #2]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d11b      	bne.n	800d0a4 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800d06c:	7bbb      	ldrb	r3, [r7, #14]
 800d06e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00b      	beq.n	800d08e <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800d076:	7bbb      	ldrb	r3, [r7, #14]
 800d078:	4619      	mov	r1, r3
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f001 f847 	bl	800e10e <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 fbb4 	bl	800d7fc <USBD_CtlSendStatus>
      break;
 800d094:	e006      	b.n	800d0a4 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 fae6 	bl	800d66a <USBD_CtlError>
      break;    
 800d09e:	e002      	b.n	800d0a6 <USBD_StdEPReq+0x118>
      break;	
 800d0a0:	bf00      	nop
 800d0a2:	e047      	b.n	800d134 <USBD_StdEPReq+0x1a6>
      break;
 800d0a4:	bf00      	nop
    break;
 800d0a6:	e045      	b.n	800d134 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	d002      	beq.n	800d0b8 <USBD_StdEPReq+0x12a>
 800d0b2:	2b03      	cmp	r3, #3
 800d0b4:	d00b      	beq.n	800d0ce <USBD_StdEPReq+0x140>
 800d0b6:	e036      	b.n	800d126 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 800d0b8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d036      	beq.n	800d130 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800d0c2:	7bbb      	ldrb	r3, [r7, #14]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f001 f802 	bl	800e0d0 <USBD_LL_StallEP>
      break;	
 800d0cc:	e030      	b.n	800d130 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800d0ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	da08      	bge.n	800d0e8 <USBD_StdEPReq+0x15a>
 800d0d6:	7bbb      	ldrb	r3, [r7, #14]
 800d0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0dc:	3301      	adds	r3, #1
 800d0de:	011b      	lsls	r3, r3, #4
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	e007      	b.n	800d0f8 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800d0e8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800d0ee:	3310      	adds	r3, #16
 800d0f0:	011b      	lsls	r3, r3, #4
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	3304      	adds	r3, #4
 800d0f8:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800d0fa:	7bbb      	ldrb	r3, [r7, #14]
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f001 f824 	bl	800e14c <USBD_LL_IsStallEP>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d003      	beq.n	800d112 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	2201      	movs	r2, #1
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	e002      	b.n	800d118 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	2200      	movs	r2, #0
 800d116:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800d118:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800d11a:	2202      	movs	r2, #2
 800d11c:	4619      	mov	r1, r3
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 fb0e 	bl	800d740 <USBD_CtlSendData>
      break;
 800d124:	e005      	b.n	800d132 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800d126:	6839      	ldr	r1, [r7, #0]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 fa9e 	bl	800d66a <USBD_CtlError>
      break;
 800d12e:	e000      	b.n	800d132 <USBD_StdEPReq+0x1a4>
      break;	
 800d130:	bf00      	nop
    break;
 800d132:	bf00      	nop
  }
  return ret;
 800d134:	7bfb      	ldrb	r3, [r7, #15]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
	...

0800d140 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	885b      	ldrh	r3, [r3, #2]
 800d14e:	0a1b      	lsrs	r3, r3, #8
 800d150:	b29b      	uxth	r3, r3
 800d152:	3b01      	subs	r3, #1
 800d154:	2b06      	cmp	r3, #6
 800d156:	f200 80c9 	bhi.w	800d2ec <USBD_GetDescriptor+0x1ac>
 800d15a:	a201      	add	r2, pc, #4	; (adr r2, 800d160 <USBD_GetDescriptor+0x20>)
 800d15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d160:	0800d17d 	.word	0x0800d17d
 800d164:	0800d195 	.word	0x0800d195
 800d168:	0800d1d5 	.word	0x0800d1d5
 800d16c:	0800d2ed 	.word	0x0800d2ed
 800d170:	0800d2ed 	.word	0x0800d2ed
 800d174:	0800d299 	.word	0x0800d299
 800d178:	0800d2bf 	.word	0x0800d2bf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	7c12      	ldrb	r2, [r2, #16]
 800d188:	f107 010a 	add.w	r1, r7, #10
 800d18c:	4610      	mov	r0, r2
 800d18e:	4798      	blx	r3
 800d190:	60f8      	str	r0, [r7, #12]
    break;
 800d192:	e0b0      	b.n	800d2f6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	7c1b      	ldrb	r3, [r3, #16]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10d      	bne.n	800d1b8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a4:	f107 020a 	add.w	r2, r7, #10
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	4798      	blx	r3
 800d1ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	2202      	movs	r2, #2
 800d1b4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d1b6:	e09e      	b.n	800d2f6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c0:	f107 020a 	add.w	r2, r7, #10
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	4798      	blx	r3
 800d1c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	2202      	movs	r2, #2
 800d1d0:	701a      	strb	r2, [r3, #0]
    break;
 800d1d2:	e090      	b.n	800d2f6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	885b      	ldrh	r3, [r3, #2]
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b05      	cmp	r3, #5
 800d1dc:	d856      	bhi.n	800d28c <USBD_GetDescriptor+0x14c>
 800d1de:	a201      	add	r2, pc, #4	; (adr r2, 800d1e4 <USBD_GetDescriptor+0xa4>)
 800d1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e4:	0800d1fd 	.word	0x0800d1fd
 800d1e8:	0800d215 	.word	0x0800d215
 800d1ec:	0800d22d 	.word	0x0800d22d
 800d1f0:	0800d245 	.word	0x0800d245
 800d1f4:	0800d25d 	.word	0x0800d25d
 800d1f8:	0800d275 	.word	0x0800d275
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	7c12      	ldrb	r2, [r2, #16]
 800d208:	f107 010a 	add.w	r1, r7, #10
 800d20c:	4610      	mov	r0, r2
 800d20e:	4798      	blx	r3
 800d210:	60f8      	str	r0, [r7, #12]
      break;
 800d212:	e040      	b.n	800d296 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	7c12      	ldrb	r2, [r2, #16]
 800d220:	f107 010a 	add.w	r1, r7, #10
 800d224:	4610      	mov	r0, r2
 800d226:	4798      	blx	r3
 800d228:	60f8      	str	r0, [r7, #12]
      break;
 800d22a:	e034      	b.n	800d296 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	7c12      	ldrb	r2, [r2, #16]
 800d238:	f107 010a 	add.w	r1, r7, #10
 800d23c:	4610      	mov	r0, r2
 800d23e:	4798      	blx	r3
 800d240:	60f8      	str	r0, [r7, #12]
      break;
 800d242:	e028      	b.n	800d296 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	7c12      	ldrb	r2, [r2, #16]
 800d250:	f107 010a 	add.w	r1, r7, #10
 800d254:	4610      	mov	r0, r2
 800d256:	4798      	blx	r3
 800d258:	60f8      	str	r0, [r7, #12]
      break;
 800d25a:	e01c      	b.n	800d296 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d262:	695b      	ldr	r3, [r3, #20]
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	7c12      	ldrb	r2, [r2, #16]
 800d268:	f107 010a 	add.w	r1, r7, #10
 800d26c:	4610      	mov	r0, r2
 800d26e:	4798      	blx	r3
 800d270:	60f8      	str	r0, [r7, #12]
      break;
 800d272:	e010      	b.n	800d296 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d27a:	699b      	ldr	r3, [r3, #24]
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	7c12      	ldrb	r2, [r2, #16]
 800d280:	f107 010a 	add.w	r1, r7, #10
 800d284:	4610      	mov	r0, r2
 800d286:	4798      	blx	r3
 800d288:	60f8      	str	r0, [r7, #12]
      break;
 800d28a:	e004      	b.n	800d296 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800d28c:	6839      	ldr	r1, [r7, #0]
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 f9eb 	bl	800d66a <USBD_CtlError>
      return;
 800d294:	e044      	b.n	800d320 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 800d296:	e02e      	b.n	800d2f6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	7c1b      	ldrb	r3, [r3, #16]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d109      	bne.n	800d2b4 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a8:	f107 020a 	add.w	r2, r7, #10
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	4798      	blx	r3
 800d2b0:	60f8      	str	r0, [r7, #12]
      break;
 800d2b2:	e020      	b.n	800d2f6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d2b4:	6839      	ldr	r1, [r7, #0]
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 f9d7 	bl	800d66a <USBD_CtlError>
      return;
 800d2bc:	e030      	b.n	800d320 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	7c1b      	ldrb	r3, [r3, #16]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d10d      	bne.n	800d2e2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ce:	f107 020a 	add.w	r2, r7, #10
 800d2d2:	4610      	mov	r0, r2
 800d2d4:	4798      	blx	r3
 800d2d6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	2207      	movs	r2, #7
 800d2de:	701a      	strb	r2, [r3, #0]
      break; 
 800d2e0:	e009      	b.n	800d2f6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f9c0 	bl	800d66a <USBD_CtlError>
      return;
 800d2ea:	e019      	b.n	800d320 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 800d2ec:	6839      	ldr	r1, [r7, #0]
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f9bb 	bl	800d66a <USBD_CtlError>
    return;
 800d2f4:	e014      	b.n	800d320 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800d2f6:	897b      	ldrh	r3, [r7, #10]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d011      	beq.n	800d320 <USBD_GetDescriptor+0x1e0>
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	88db      	ldrh	r3, [r3, #6]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00d      	beq.n	800d320 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	88da      	ldrh	r2, [r3, #6]
 800d308:	897b      	ldrh	r3, [r7, #10]
 800d30a:	4293      	cmp	r3, r2
 800d30c:	bf28      	it	cs
 800d30e:	4613      	movcs	r3, r2
 800d310:	b29b      	uxth	r3, r3
 800d312:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800d314:	897b      	ldrh	r3, [r7, #10]
 800d316:	461a      	mov	r2, r3
 800d318:	68f9      	ldr	r1, [r7, #12]
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 fa10 	bl	800d740 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop

0800d328 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	889b      	ldrh	r3, [r3, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d12c      	bne.n	800d394 <USBD_SetAddress+0x6c>
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	88db      	ldrh	r3, [r3, #6]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d128      	bne.n	800d394 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	885b      	ldrh	r3, [r3, #2]
 800d346:	b2db      	uxtb	r3, r3
 800d348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d34c:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800d354:	2b03      	cmp	r3, #3
 800d356:	d104      	bne.n	800d362 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f985 	bl	800d66a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800d360:	e01c      	b.n	800d39c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	7bfa      	ldrb	r2, [r7, #15]
 800d366:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
 800d36c:	4619      	mov	r1, r3
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 ff11 	bl	800e196 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 fa41 	bl	800d7fc <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800d37a:	7bfb      	ldrb	r3, [r7, #15]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d004      	beq.n	800d38a <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2202      	movs	r2, #2
 800d384:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800d388:	e008      	b.n	800d39c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2201      	movs	r2, #1
 800d38e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800d392:	e003      	b.n	800d39c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f967 	bl	800d66a <USBD_CtlError>
  } 
}
 800d39c:	bf00      	nop
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	885b      	ldrh	r3, [r3, #2]
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	4b3e      	ldr	r3, [pc, #248]	; (800d4b0 <USBD_SetConfig+0x10c>)
 800d3b6:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800d3b8:	4b3d      	ldr	r3, [pc, #244]	; (800d4b0 <USBD_SetConfig+0x10c>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d904      	bls.n	800d3ca <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800d3c0:	6839      	ldr	r1, [r7, #0]
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f951 	bl	800d66a <USBD_CtlError>
 800d3c8:	e06f      	b.n	800d4aa <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	d002      	beq.n	800d3da <USBD_SetConfig+0x36>
 800d3d4:	2b03      	cmp	r3, #3
 800d3d6:	d023      	beq.n	800d420 <USBD_SetConfig+0x7c>
 800d3d8:	e062      	b.n	800d4a0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800d3da:	4b35      	ldr	r3, [pc, #212]	; (800d4b0 <USBD_SetConfig+0x10c>)
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d01a      	beq.n	800d418 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800d3e2:	4b33      	ldr	r3, [pc, #204]	; (800d4b0 <USBD_SetConfig+0x10c>)
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2203      	movs	r2, #3
 800d3f0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800d3f4:	4b2e      	ldr	r3, [pc, #184]	; (800d4b0 <USBD_SetConfig+0x10c>)
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7ff fb62 	bl	800cac4 <USBD_SetClassConfig>
 800d400:	4603      	mov	r3, r0
 800d402:	2b02      	cmp	r3, #2
 800d404:	d104      	bne.n	800d410 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800d406:	6839      	ldr	r1, [r7, #0]
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 f92e 	bl	800d66a <USBD_CtlError>
          return;
 800d40e:	e04c      	b.n	800d4aa <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 f9f3 	bl	800d7fc <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800d416:	e048      	b.n	800d4aa <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f000 f9ef 	bl	800d7fc <USBD_CtlSendStatus>
      break;
 800d41e:	e044      	b.n	800d4aa <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800d420:	4b23      	ldr	r3, [pc, #140]	; (800d4b0 <USBD_SetConfig+0x10c>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d112      	bne.n	800d44e <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2202      	movs	r2, #2
 800d42c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800d430:	4b1f      	ldr	r3, [pc, #124]	; (800d4b0 <USBD_SetConfig+0x10c>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	461a      	mov	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800d43a:	4b1d      	ldr	r3, [pc, #116]	; (800d4b0 <USBD_SetConfig+0x10c>)
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	4619      	mov	r1, r3
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f7ff fb5e 	bl	800cb02 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f9d8 	bl	800d7fc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d44c:	e02d      	b.n	800d4aa <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800d44e:	4b18      	ldr	r3, [pc, #96]	; (800d4b0 <USBD_SetConfig+0x10c>)
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	461a      	mov	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d01d      	beq.n	800d498 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	b2db      	uxtb	r3, r3
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7ff fb4c 	bl	800cb02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d46a:	4b11      	ldr	r3, [pc, #68]	; (800d4b0 <USBD_SetConfig+0x10c>)
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	461a      	mov	r2, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800d474:	4b0e      	ldr	r3, [pc, #56]	; (800d4b0 <USBD_SetConfig+0x10c>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	4619      	mov	r1, r3
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff fb22 	bl	800cac4 <USBD_SetClassConfig>
 800d480:	4603      	mov	r3, r0
 800d482:	2b02      	cmp	r3, #2
 800d484:	d104      	bne.n	800d490 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 f8ee 	bl	800d66a <USBD_CtlError>
          return;
 800d48e:	e00c      	b.n	800d4aa <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 f9b3 	bl	800d7fc <USBD_CtlSendStatus>
      break;
 800d496:	e008      	b.n	800d4aa <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 f9af 	bl	800d7fc <USBD_CtlSendStatus>
      break;
 800d49e:	e004      	b.n	800d4aa <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800d4a0:	6839      	ldr	r1, [r7, #0]
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 f8e1 	bl	800d66a <USBD_CtlError>
      break;
 800d4a8:	bf00      	nop
    }
  }
}
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20000cbd 	.word	0x20000cbd

0800d4b4 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	88db      	ldrh	r3, [r3, #6]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d004      	beq.n	800d4d0 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 f8ce 	bl	800d66a <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d4ce:	e01f      	b.n	800d510 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d002      	beq.n	800d4e0 <USBD_GetConfig+0x2c>
 800d4da:	2b03      	cmp	r3, #3
 800d4dc:	d00b      	beq.n	800d4f6 <USBD_GetConfig+0x42>
 800d4de:	e012      	b.n	800d506 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f926 	bl	800d740 <USBD_CtlSendData>
      break;
 800d4f4:	e00c      	b.n	800d510 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f91e 	bl	800d740 <USBD_CtlSendData>
      break;
 800d504:	e004      	b.n	800d510 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 f8ae 	bl	800d66a <USBD_CtlError>
      break;
 800d50e:	bf00      	nop
}
 800d510:	bf00      	nop
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800d528:	3b02      	subs	r3, #2
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d815      	bhi.n	800d55a <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2201      	movs	r2, #1
 800d532:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d005      	beq.n	800d54a <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	f043 0202 	orr.w	r2, r3, #2
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800d54e:	2202      	movs	r2, #2
 800d550:	4619      	mov	r1, r3
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f8f4 	bl	800d740 <USBD_CtlSendData>
                      2);
    break;
 800d558:	e004      	b.n	800d564 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800d55a:	6839      	ldr	r1, [r7, #0]
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 f884 	bl	800d66a <USBD_CtlError>
    break;
 800d562:	bf00      	nop
  }
}
 800d564:	bf00      	nop
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	885b      	ldrh	r3, [r3, #2]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d10d      	bne.n	800d59a <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2201      	movs	r2, #1
 800d582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	6839      	ldr	r1, [r7, #0]
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 f931 	bl	800d7fc <USBD_CtlSendStatus>
  }

}
 800d59a:	bf00      	nop
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b082      	sub	sp, #8
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800d5b2:	3b02      	subs	r3, #2
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d812      	bhi.n	800d5de <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	885b      	ldrh	r3, [r3, #2]
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d113      	bne.n	800d5e8 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5ce:	689b      	ldr	r3, [r3, #8]
 800d5d0:	6839      	ldr	r1, [r7, #0]
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f910 	bl	800d7fc <USBD_CtlSendStatus>
    }
    break;
 800d5dc:	e004      	b.n	800d5e8 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800d5de:	6839      	ldr	r1, [r7, #0]
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 f842 	bl	800d66a <USBD_CtlError>
    break;
 800d5e6:	e000      	b.n	800d5ea <USBD_ClrFeature+0x48>
    break;
 800d5e8:	bf00      	nop
  }
}
 800d5ea:	bf00      	nop
 800d5ec:	3708      	adds	r7, #8
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d5f2:	b480      	push	{r7}
 800d5f4:	b083      	sub	sp, #12
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	781a      	ldrb	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	785a      	ldrb	r2, [r3, #1]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	3302      	adds	r3, #2
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	b29a      	uxth	r2, r3
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	3303      	adds	r3, #3
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	021b      	lsls	r3, r3, #8
 800d61e:	b29b      	uxth	r3, r3
 800d620:	4413      	add	r3, r2
 800d622:	b29a      	uxth	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	3304      	adds	r3, #4
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	b29a      	uxth	r2, r3
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	3305      	adds	r3, #5
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	b29b      	uxth	r3, r3
 800d638:	021b      	lsls	r3, r3, #8
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	4413      	add	r3, r2
 800d63e:	b29a      	uxth	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	3306      	adds	r3, #6
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	3307      	adds	r3, #7
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	b29b      	uxth	r3, r3
 800d654:	021b      	lsls	r3, r3, #8
 800d656:	b29b      	uxth	r3, r3
 800d658:	4413      	add	r3, r2
 800d65a:	b29a      	uxth	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	80da      	strh	r2, [r3, #6]

}
 800d660:	bf00      	nop
 800d662:	370c      	adds	r7, #12
 800d664:	46bd      	mov	sp, r7
 800d666:	bc80      	pop	{r7}
 800d668:	4770      	bx	lr

0800d66a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b082      	sub	sp, #8
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
 800d672:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800d674:	2180      	movs	r1, #128	; 0x80
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 fd2a 	bl	800e0d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800d67c:	2100      	movs	r1, #0
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fd26 	bl	800e0d0 <USBD_LL_StallEP>
}
 800d684:	bf00      	nop
 800d686:	3708      	adds	r7, #8
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d033      	beq.n	800d70a <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	f000 f835 	bl	800d712 <USBD_GetLen>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	005b      	lsls	r3, r3, #1
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	881a      	ldrh	r2, [r3, #0]
 800d6ba:	7dfb      	ldrb	r3, [r7, #23]
 800d6bc:	1c59      	adds	r1, r3, #1
 800d6be:	75f9      	strb	r1, [r7, #23]
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	440b      	add	r3, r1
 800d6c6:	b2d2      	uxtb	r2, r2
 800d6c8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800d6ca:	7dfb      	ldrb	r3, [r7, #23]
 800d6cc:	1c5a      	adds	r2, r3, #1
 800d6ce:	75fa      	strb	r2, [r7, #23]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	2203      	movs	r2, #3
 800d6d8:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800d6da:	e012      	b.n	800d702 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	60fa      	str	r2, [r7, #12]
 800d6e2:	7dfa      	ldrb	r2, [r7, #23]
 800d6e4:	1c51      	adds	r1, r2, #1
 800d6e6:	75f9      	strb	r1, [r7, #23]
 800d6e8:	4611      	mov	r1, r2
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	440a      	add	r2, r1
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
 800d6f4:	1c5a      	adds	r2, r3, #1
 800d6f6:	75fa      	strb	r2, [r7, #23]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	2200      	movs	r2, #0
 800d700:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1e8      	bne.n	800d6dc <USBD_GetString+0x50>
    }
  } 
}
 800d70a:	bf00      	nop
 800d70c:	3718      	adds	r7, #24
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d712:	b480      	push	{r7}
 800d714:	b085      	sub	sp, #20
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800d71a:	2300      	movs	r3, #0
 800d71c:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 800d71e:	e005      	b.n	800d72c <USBD_GetLen+0x1a>
    {
        len++;
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	3301      	adds	r3, #1
 800d724:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	3301      	adds	r3, #1
 800d72a:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d1f5      	bne.n	800d720 <USBD_GetLen+0xe>
    }

    return len;
 800d734:	7bfb      	ldrb	r3, [r7, #15]
}
 800d736:	4618      	mov	r0, r3
 800d738:	3714      	adds	r7, #20
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bc80      	pop	{r7}
 800d73e:	4770      	bx	lr

0800d740 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	4613      	mov	r3, r2
 800d74c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2202      	movs	r2, #2
 800d752:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800d756:	88fa      	ldrh	r2, [r7, #6]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800d75c:	88fa      	ldrh	r2, [r7, #6]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800d762:	88fb      	ldrh	r3, [r7, #6]
 800d764:	68ba      	ldr	r2, [r7, #8]
 800d766:	2100      	movs	r1, #0
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f000 fd33 	bl	800e1d4 <USBD_LL_Transmit>
  
  return USBD_OK;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3710      	adds	r7, #16
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	4613      	mov	r3, r2
 800d784:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800d786:	88fb      	ldrh	r3, [r7, #6]
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	2100      	movs	r1, #0
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	f000 fd21 	bl	800e1d4 <USBD_LL_Transmit>
  
  return USBD_OK;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2203      	movs	r2, #3
 800d7ae:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800d7b2:	88fa      	ldrh	r2, [r7, #6]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800d7ba:	88fa      	ldrh	r2, [r7, #6]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800d7c2:	88fb      	ldrh	r3, [r7, #6]
 800d7c4:	68ba      	ldr	r2, [r7, #8]
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	f000 fd26 	bl	800e21a <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800d7ce:	2300      	movs	r3, #0
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3710      	adds	r7, #16
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 800d7e6:	88fb      	ldrh	r3, [r7, #6]
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f000 fd14 	bl	800e21a <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2204      	movs	r2, #4
 800d808:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800d80c:	2300      	movs	r3, #0
 800d80e:	2200      	movs	r2, #0
 800d810:	2100      	movs	r1, #0
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 fcde 	bl	800e1d4 <USBD_LL_Transmit>
  
  return USBD_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3708      	adds	r7, #8
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b082      	sub	sp, #8
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2205      	movs	r2, #5
 800d82e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800d832:	2300      	movs	r3, #0
 800d834:	2200      	movs	r2, #0
 800d836:	2100      	movs	r1, #0
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fcee 	bl	800e21a <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d84c:	2200      	movs	r2, #0
 800d84e:	4912      	ldr	r1, [pc, #72]	; (800d898 <MX_USB_DEVICE_Init+0x50>)
 800d850:	4812      	ldr	r0, [pc, #72]	; (800d89c <MX_USB_DEVICE_Init+0x54>)
 800d852:	f7ff f8dd 	bl	800ca10 <USBD_Init>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d001      	beq.n	800d860 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d85c:	f7f8 fbc2 	bl	8005fe4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d860:	490f      	ldr	r1, [pc, #60]	; (800d8a0 <MX_USB_DEVICE_Init+0x58>)
 800d862:	480e      	ldr	r0, [pc, #56]	; (800d89c <MX_USB_DEVICE_Init+0x54>)
 800d864:	f7ff f8ff 	bl	800ca66 <USBD_RegisterClass>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d001      	beq.n	800d872 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d86e:	f7f8 fbb9 	bl	8005fe4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d872:	490c      	ldr	r1, [pc, #48]	; (800d8a4 <MX_USB_DEVICE_Init+0x5c>)
 800d874:	4809      	ldr	r0, [pc, #36]	; (800d89c <MX_USB_DEVICE_Init+0x54>)
 800d876:	f7ff f835 	bl	800c8e4 <USBD_CDC_RegisterInterface>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d880:	f7f8 fbb0 	bl	8005fe4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d884:	4805      	ldr	r0, [pc, #20]	; (800d89c <MX_USB_DEVICE_Init+0x54>)
 800d886:	f7ff f907 	bl	800ca98 <USBD_Start>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d001      	beq.n	800d894 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d890:	f7f8 fba8 	bl	8005fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d894:	bf00      	nop
 800d896:	bd80      	pop	{r7, pc}
 800d898:	20000154 	.word	0x20000154
 800d89c:	20001334 	.word	0x20001334
 800d8a0:	2000003c 	.word	0x2000003c
 800d8a4:	20000144 	.word	0x20000144

0800d8a8 <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];
bool    rx_full = false;

uint32_t cdcAvailable(void)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 800d8ae:	4b09      	ldr	r3, [pc, #36]	; (800d8d4 <cdcAvailable+0x2c>)
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	4b09      	ldr	r3, [pc, #36]	; (800d8d8 <cdcAvailable+0x30>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	4a08      	ldr	r2, [pc, #32]	; (800d8dc <cdcAvailable+0x34>)
 800d8ba:	6812      	ldr	r2, [r2, #0]
 800d8bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8c0:	fb02 f201 	mul.w	r2, r2, r1
 800d8c4:	1a9b      	subs	r3, r3, r2
 800d8c6:	607b      	str	r3, [r7, #4]

  return ret;
 800d8c8:	687b      	ldr	r3, [r7, #4]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bc80      	pop	{r7}
 800d8d2:	4770      	bx	lr
 800d8d4:	20000cc0 	.word	0x20000cc0
 800d8d8:	20000cc4 	.word	0x20000cc4
 800d8dc:	20000140 	.word	0x20000140

0800d8e0 <cdcRead>:

uint8_t cdcRead(void)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 800d8e6:	4b0e      	ldr	r3, [pc, #56]	; (800d920 <cdcRead+0x40>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a0e      	ldr	r2, [pc, #56]	; (800d924 <cdcRead+0x44>)
 800d8ec:	5cd3      	ldrb	r3, [r2, r3]
 800d8ee:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 800d8f0:	4b0b      	ldr	r3, [pc, #44]	; (800d920 <cdcRead+0x40>)
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	4b0c      	ldr	r3, [pc, #48]	; (800d928 <cdcRead+0x48>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d00b      	beq.n	800d914 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 800d8fc:	4b08      	ldr	r3, [pc, #32]	; (800d920 <cdcRead+0x40>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	3301      	adds	r3, #1
 800d902:	4a0a      	ldr	r2, [pc, #40]	; (800d92c <cdcRead+0x4c>)
 800d904:	6812      	ldr	r2, [r2, #0]
 800d906:	fbb3 f1f2 	udiv	r1, r3, r2
 800d90a:	fb02 f201 	mul.w	r2, r2, r1
 800d90e:	1a9b      	subs	r3, r3, r2
 800d910:	4a03      	ldr	r2, [pc, #12]	; (800d920 <cdcRead+0x40>)
 800d912:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d914:	79fb      	ldrb	r3, [r7, #7]
}
 800d916:	4618      	mov	r0, r3
 800d918:	370c      	adds	r7, #12
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bc80      	pop	{r7}
 800d91e:	4770      	bx	lr
 800d920:	20000cc4 	.word	0x20000cc4
 800d924:	20001d28 	.word	0x20001d28
 800d928:	20000cc0 	.word	0x20000cc0
 800d92c:	20000140 	.word	0x20000140

0800d930 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	4603      	mov	r3, r0
 800d938:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;    // overwrite
 800d93a:	4b0e      	ldr	r3, [pc, #56]	; (800d974 <cdcDataIn+0x44>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	490e      	ldr	r1, [pc, #56]	; (800d978 <cdcDataIn+0x48>)
 800d940:	79fa      	ldrb	r2, [r7, #7]
 800d942:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 800d944:	4b0b      	ldr	r3, [pc, #44]	; (800d974 <cdcDataIn+0x44>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	3301      	adds	r3, #1
 800d94a:	4a0c      	ldr	r2, [pc, #48]	; (800d97c <cdcDataIn+0x4c>)
 800d94c:	6812      	ldr	r2, [r2, #0]
 800d94e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d952:	fb02 f201 	mul.w	r2, r2, r1
 800d956:	1a9b      	subs	r3, r3, r2
 800d958:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 800d95a:	4b09      	ldr	r3, [pc, #36]	; (800d980 <cdcDataIn+0x50>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	429a      	cmp	r2, r3
 800d962:	d002      	beq.n	800d96a <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 800d964:	4a03      	ldr	r2, [pc, #12]	; (800d974 <cdcDataIn+0x44>)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6013      	str	r3, [r2, #0]
  }
}
 800d96a:	bf00      	nop
 800d96c:	3714      	adds	r7, #20
 800d96e:	46bd      	mov	sp, r7
 800d970:	bc80      	pop	{r7}
 800d972:	4770      	bx	lr
 800d974:	20000cc0 	.word	0x20000cc0
 800d978:	20001d28 	.word	0x20001d28
 800d97c:	20000140 	.word	0x20000140
 800d980:	20000cc4 	.word	0x20000cc4

0800d984 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 800d98e:	f7f8 fa80 	bl	8005e92 <millis>
 800d992:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	b29b      	uxth	r3, r3
 800d998:	4619      	mov	r1, r3
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 f8ee 	bl	800db7c <CDC_Transmit_FS>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 800d9a4:	7afb      	ldrb	r3, [r7, #11]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d101      	bne.n	800d9ae <cdcWrite+0x2a>
    {
      return length;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	e00e      	b.n	800d9cc <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 800d9ae:	7afb      	ldrb	r3, [r7, #11]
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d101      	bne.n	800d9b8 <cdcWrite+0x34>
    {
      return 0;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	e009      	b.n	800d9cc <cdcWrite+0x48>
    }

    if(millis() - pre_time >= 100)    // time out handling.
 800d9b8:	f7f8 fa6b 	bl	8005e92 <millis>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	2b63      	cmp	r3, #99	; 0x63
 800d9c4:	d800      	bhi.n	800d9c8 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 800d9c6:	e7e5      	b.n	800d994 <cdcWrite+0x10>
    {
      break;
 800d9c8:	bf00      	nop
    }
  }
  return 0;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <USB_CDC_SOF>:
{
  return LineCoding.bitrate;
}

uint8_t USB_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 800d9d4:	b590      	push	{r4, r7, lr}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]

  if(rx_full == true)
 800d9dc:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <USB_CDC_SOF+0x3c>)
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d010      	beq.n	800da06 <USB_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    /* amount of empty space in receive buffer */
    buf_len = (rx_len - cdcAvailable()) - 1;
 800d9e4:	4b0b      	ldr	r3, [pc, #44]	; (800da14 <USB_CDC_SOF+0x40>)
 800d9e6:	681c      	ldr	r4, [r3, #0]
 800d9e8:	f7ff ff5e 	bl	800d8a8 <cdcAvailable>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	1ae3      	subs	r3, r4, r3
 800d9f0:	3b01      	subs	r3, #1
 800d9f2:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2b3f      	cmp	r3, #63	; 0x3f
 800d9f8:	d905      	bls.n	800da06 <USB_CDC_SOF+0x32>
    {
      /* Allow next data transmission */
      USBD_CDC_ReceivePacket(pdev);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7fe ffde 	bl	800c9bc <USBD_CDC_ReceivePacket>
      rx_full = false;
 800da00:	4b03      	ldr	r3, [pc, #12]	; (800da10 <USB_CDC_SOF+0x3c>)
 800da02:	2200      	movs	r2, #0
 800da04:	701a      	strb	r2, [r3, #0]
    }
  }


  return 0;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd90      	pop	{r4, r7, pc}
 800da10:	20000cc8 	.word	0x20000cc8
 800da14:	20000140 	.word	0x20000140

0800da18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800da1c:	2200      	movs	r2, #0
 800da1e:	4905      	ldr	r1, [pc, #20]	; (800da34 <CDC_Init_FS+0x1c>)
 800da20:	4805      	ldr	r0, [pc, #20]	; (800da38 <CDC_Init_FS+0x20>)
 800da22:	f7fe ff75 	bl	800c910 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800da26:	4905      	ldr	r1, [pc, #20]	; (800da3c <CDC_Init_FS+0x24>)
 800da28:	4803      	ldr	r0, [pc, #12]	; (800da38 <CDC_Init_FS+0x20>)
 800da2a:	f7fe ff8a 	bl	800c942 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800da2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800da30:	4618      	mov	r0, r3
 800da32:	bd80      	pop	{r7, pc}
 800da34:	20001940 	.word	0x20001940
 800da38:	20001334 	.word	0x20001334
 800da3c:	20001558 	.word	0x20001558

0800da40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800da40:	b480      	push	{r7}
 800da42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800da44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800da46:	4618      	mov	r0, r3
 800da48:	46bd      	mov	sp, r7
 800da4a:	bc80      	pop	{r7}
 800da4c:	4770      	bx	lr
	...

0800da50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	6039      	str	r1, [r7, #0]
 800da5a:	71fb      	strb	r3, [r7, #7]
 800da5c:	4613      	mov	r3, r2
 800da5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800da60:	79fb      	ldrb	r3, [r7, #7]
 800da62:	2b23      	cmp	r3, #35	; 0x23
 800da64:	d84a      	bhi.n	800dafc <CDC_Control_FS+0xac>
 800da66:	a201      	add	r2, pc, #4	; (adr r2, 800da6c <CDC_Control_FS+0x1c>)
 800da68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da6c:	0800dafd 	.word	0x0800dafd
 800da70:	0800dafd 	.word	0x0800dafd
 800da74:	0800dafd 	.word	0x0800dafd
 800da78:	0800dafd 	.word	0x0800dafd
 800da7c:	0800dafd 	.word	0x0800dafd
 800da80:	0800dafd 	.word	0x0800dafd
 800da84:	0800dafd 	.word	0x0800dafd
 800da88:	0800dafd 	.word	0x0800dafd
 800da8c:	0800dafd 	.word	0x0800dafd
 800da90:	0800dafd 	.word	0x0800dafd
 800da94:	0800dafd 	.word	0x0800dafd
 800da98:	0800dafd 	.word	0x0800dafd
 800da9c:	0800dafd 	.word	0x0800dafd
 800daa0:	0800dafd 	.word	0x0800dafd
 800daa4:	0800dafd 	.word	0x0800dafd
 800daa8:	0800dafd 	.word	0x0800dafd
 800daac:	0800dafd 	.word	0x0800dafd
 800dab0:	0800dafd 	.word	0x0800dafd
 800dab4:	0800dafd 	.word	0x0800dafd
 800dab8:	0800dafd 	.word	0x0800dafd
 800dabc:	0800dafd 	.word	0x0800dafd
 800dac0:	0800dafd 	.word	0x0800dafd
 800dac4:	0800dafd 	.word	0x0800dafd
 800dac8:	0800dafd 	.word	0x0800dafd
 800dacc:	0800dafd 	.word	0x0800dafd
 800dad0:	0800dafd 	.word	0x0800dafd
 800dad4:	0800dafd 	.word	0x0800dafd
 800dad8:	0800dafd 	.word	0x0800dafd
 800dadc:	0800dafd 	.word	0x0800dafd
 800dae0:	0800dafd 	.word	0x0800dafd
 800dae4:	0800dafd 	.word	0x0800dafd
 800dae8:	0800dafd 	.word	0x0800dafd
 800daec:	0800dafd 	.word	0x0800dafd
 800daf0:	0800dafd 	.word	0x0800dafd
 800daf4:	0800dafd 	.word	0x0800dafd
 800daf8:	0800dafd 	.word	0x0800dafd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dafc:	bf00      	nop
  }

  return (USBD_OK);
 800dafe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800db00:	4618      	mov	r0, r3
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	bc80      	pop	{r7}
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop

0800db0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800db0c:	b590      	push	{r4, r7, lr}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t buf_len;


  for(int i=0; i<*Len; i++)
 800db16:	2300      	movs	r3, #0
 800db18:	60fb      	str	r3, [r7, #12]
 800db1a:	e009      	b.n	800db30 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	4413      	add	r3, r2
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff ff03 	bl	800d930 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	3301      	adds	r3, #1
 800db2e:	60fb      	str	r3, [r7, #12]
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	429a      	cmp	r2, r3
 800db38:	d8f0      	bhi.n	800db1c <CDC_Receive_FS+0x10>
  }

  /* amount of empty space in receive buffer */
  buf_len = (rx_len - cdcAvailable()) - 1;
 800db3a:	4b0d      	ldr	r3, [pc, #52]	; (800db70 <CDC_Receive_FS+0x64>)
 800db3c:	681c      	ldr	r4, [r3, #0]
 800db3e:	f7ff feb3 	bl	800d8a8 <cdcAvailable>
 800db42:	4603      	mov	r3, r0
 800db44:	1ae3      	subs	r3, r4, r3
 800db46:	3b01      	subs	r3, #1
 800db48:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	2b3f      	cmp	r3, #63	; 0x3f
 800db4e:	d907      	bls.n	800db60 <CDC_Receive_FS+0x54>
  {
    /* Allow next data transmission */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800db50:	6879      	ldr	r1, [r7, #4]
 800db52:	4808      	ldr	r0, [pc, #32]	; (800db74 <CDC_Receive_FS+0x68>)
 800db54:	f7fe fef5 	bl	800c942 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800db58:	4806      	ldr	r0, [pc, #24]	; (800db74 <CDC_Receive_FS+0x68>)
 800db5a:	f7fe ff2f 	bl	800c9bc <USBD_CDC_ReceivePacket>
 800db5e:	e002      	b.n	800db66 <CDC_Receive_FS+0x5a>
  }
  else
  {
    /* wait as the insufficient buffer capacity */
    rx_full = true;
 800db60:	4b05      	ldr	r3, [pc, #20]	; (800db78 <CDC_Receive_FS+0x6c>)
 800db62:	2201      	movs	r2, #1
 800db64:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 800db66:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3714      	adds	r7, #20
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd90      	pop	{r4, r7, pc}
 800db70:	20000140 	.word	0x20000140
 800db74:	20001334 	.word	0x20001334
 800db78:	20000cc8 	.word	0x20000cc8

0800db7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	460b      	mov	r3, r1
 800db86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800db88:	2300      	movs	r3, #0
 800db8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800db8c:	4b0d      	ldr	r3, [pc, #52]	; (800dbc4 <CDC_Transmit_FS+0x48>)
 800db8e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800db92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d001      	beq.n	800dba2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800db9e:	2301      	movs	r3, #1
 800dba0:	e00b      	b.n	800dbba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dba2:	887b      	ldrh	r3, [r7, #2]
 800dba4:	461a      	mov	r2, r3
 800dba6:	6879      	ldr	r1, [r7, #4]
 800dba8:	4806      	ldr	r0, [pc, #24]	; (800dbc4 <CDC_Transmit_FS+0x48>)
 800dbaa:	f7fe feb1 	bl	800c910 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dbae:	4805      	ldr	r0, [pc, #20]	; (800dbc4 <CDC_Transmit_FS+0x48>)
 800dbb0:	f7fe feda 	bl	800c968 <USBD_CDC_TransmitPacket>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	20001334 	.word	0x20001334

0800dbc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	4603      	mov	r3, r0
 800dbd0:	6039      	str	r1, [r7, #0]
 800dbd2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	2212      	movs	r2, #18
 800dbd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dbda:	4b03      	ldr	r3, [pc, #12]	; (800dbe8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bc80      	pop	{r7}
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	20000170 	.word	0x20000170

0800dbec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	6039      	str	r1, [r7, #0]
 800dbf6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	2204      	movs	r2, #4
 800dbfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dbfe:	4b03      	ldr	r3, [pc, #12]	; (800dc0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bc80      	pop	{r7}
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	20000184 	.word	0x20000184

0800dc10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	6039      	str	r1, [r7, #0]
 800dc1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc1c:	79fb      	ldrb	r3, [r7, #7]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d105      	bne.n	800dc2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dc22:	683a      	ldr	r2, [r7, #0]
 800dc24:	4907      	ldr	r1, [pc, #28]	; (800dc44 <USBD_FS_ProductStrDescriptor+0x34>)
 800dc26:	4808      	ldr	r0, [pc, #32]	; (800dc48 <USBD_FS_ProductStrDescriptor+0x38>)
 800dc28:	f7ff fd30 	bl	800d68c <USBD_GetString>
 800dc2c:	e004      	b.n	800dc38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dc2e:	683a      	ldr	r2, [r7, #0]
 800dc30:	4904      	ldr	r1, [pc, #16]	; (800dc44 <USBD_FS_ProductStrDescriptor+0x34>)
 800dc32:	4805      	ldr	r0, [pc, #20]	; (800dc48 <USBD_FS_ProductStrDescriptor+0x38>)
 800dc34:	f7ff fd2a 	bl	800d68c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc38:	4b02      	ldr	r3, [pc, #8]	; (800dc44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	20001f28 	.word	0x20001f28
 800dc48:	08010b20 	.word	0x08010b20

0800dc4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	4603      	mov	r3, r0
 800dc54:	6039      	str	r1, [r7, #0]
 800dc56:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dc58:	683a      	ldr	r2, [r7, #0]
 800dc5a:	4904      	ldr	r1, [pc, #16]	; (800dc6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dc5c:	4804      	ldr	r0, [pc, #16]	; (800dc70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dc5e:	f7ff fd15 	bl	800d68c <USBD_GetString>
  return USBD_StrDesc;
 800dc62:	4b02      	ldr	r3, [pc, #8]	; (800dc6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	20001f28 	.word	0x20001f28
 800dc70:	08010b38 	.word	0x08010b38

0800dc74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	6039      	str	r1, [r7, #0]
 800dc7e:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	221a      	movs	r2, #26
 800dc84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dc86:	f000 f843 	bl	800dd10 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800dc8a:	4b02      	ldr	r3, [pc, #8]	; (800dc94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	20000188 	.word	0x20000188

0800dc98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	4603      	mov	r3, r0
 800dca0:	6039      	str	r1, [r7, #0]
 800dca2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dca4:	79fb      	ldrb	r3, [r7, #7]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d105      	bne.n	800dcb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	4907      	ldr	r1, [pc, #28]	; (800dccc <USBD_FS_ConfigStrDescriptor+0x34>)
 800dcae:	4808      	ldr	r0, [pc, #32]	; (800dcd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dcb0:	f7ff fcec 	bl	800d68c <USBD_GetString>
 800dcb4:	e004      	b.n	800dcc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dcb6:	683a      	ldr	r2, [r7, #0]
 800dcb8:	4904      	ldr	r1, [pc, #16]	; (800dccc <USBD_FS_ConfigStrDescriptor+0x34>)
 800dcba:	4805      	ldr	r0, [pc, #20]	; (800dcd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dcbc:	f7ff fce6 	bl	800d68c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dcc0:	4b02      	ldr	r3, [pc, #8]	; (800dccc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3708      	adds	r7, #8
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	20001f28 	.word	0x20001f28
 800dcd0:	08010b4c 	.word	0x08010b4c

0800dcd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	4603      	mov	r3, r0
 800dcdc:	6039      	str	r1, [r7, #0]
 800dcde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dce0:	79fb      	ldrb	r3, [r7, #7]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d105      	bne.n	800dcf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dce6:	683a      	ldr	r2, [r7, #0]
 800dce8:	4907      	ldr	r1, [pc, #28]	; (800dd08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dcea:	4808      	ldr	r0, [pc, #32]	; (800dd0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dcec:	f7ff fcce 	bl	800d68c <USBD_GetString>
 800dcf0:	e004      	b.n	800dcfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	4904      	ldr	r1, [pc, #16]	; (800dd08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dcf6:	4805      	ldr	r0, [pc, #20]	; (800dd0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dcf8:	f7ff fcc8 	bl	800d68c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dcfc:	4b02      	ldr	r3, [pc, #8]	; (800dd08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3708      	adds	r7, #8
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	20001f28 	.word	0x20001f28
 800dd0c:	08010b58 	.word	0x08010b58

0800dd10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dd16:	4b0f      	ldr	r3, [pc, #60]	; (800dd54 <Get_SerialNum+0x44>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dd1c:	4b0e      	ldr	r3, [pc, #56]	; (800dd58 <Get_SerialNum+0x48>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dd22:	4b0e      	ldr	r3, [pc, #56]	; (800dd5c <Get_SerialNum+0x4c>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dd28:	68fa      	ldr	r2, [r7, #12]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d009      	beq.n	800dd4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dd36:	2208      	movs	r2, #8
 800dd38:	4909      	ldr	r1, [pc, #36]	; (800dd60 <Get_SerialNum+0x50>)
 800dd3a:	68f8      	ldr	r0, [r7, #12]
 800dd3c:	f000 f814 	bl	800dd68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dd40:	2204      	movs	r2, #4
 800dd42:	4908      	ldr	r1, [pc, #32]	; (800dd64 <Get_SerialNum+0x54>)
 800dd44:	68b8      	ldr	r0, [r7, #8]
 800dd46:	f000 f80f 	bl	800dd68 <IntToUnicode>
  }
}
 800dd4a:	bf00      	nop
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	1ffff7e8 	.word	0x1ffff7e8
 800dd58:	1ffff7ec 	.word	0x1ffff7ec
 800dd5c:	1ffff7f0 	.word	0x1ffff7f0
 800dd60:	2000018a 	.word	0x2000018a
 800dd64:	2000019a 	.word	0x2000019a

0800dd68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b087      	sub	sp, #28
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	4613      	mov	r3, r2
 800dd74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	75fb      	strb	r3, [r7, #23]
 800dd7e:	e027      	b.n	800ddd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	0f1b      	lsrs	r3, r3, #28
 800dd84:	2b09      	cmp	r3, #9
 800dd86:	d80b      	bhi.n	800dda0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	0f1b      	lsrs	r3, r3, #28
 800dd8c:	b2da      	uxtb	r2, r3
 800dd8e:	7dfb      	ldrb	r3, [r7, #23]
 800dd90:	005b      	lsls	r3, r3, #1
 800dd92:	4619      	mov	r1, r3
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	440b      	add	r3, r1
 800dd98:	3230      	adds	r2, #48	; 0x30
 800dd9a:	b2d2      	uxtb	r2, r2
 800dd9c:	701a      	strb	r2, [r3, #0]
 800dd9e:	e00a      	b.n	800ddb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	0f1b      	lsrs	r3, r3, #28
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	7dfb      	ldrb	r3, [r7, #23]
 800dda8:	005b      	lsls	r3, r3, #1
 800ddaa:	4619      	mov	r1, r3
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	440b      	add	r3, r1
 800ddb0:	3237      	adds	r2, #55	; 0x37
 800ddb2:	b2d2      	uxtb	r2, r2
 800ddb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	011b      	lsls	r3, r3, #4
 800ddba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ddbc:	7dfb      	ldrb	r3, [r7, #23]
 800ddbe:	005b      	lsls	r3, r3, #1
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	68ba      	ldr	r2, [r7, #8]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ddca:	7dfb      	ldrb	r3, [r7, #23]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	75fb      	strb	r3, [r7, #23]
 800ddd0:	7dfa      	ldrb	r2, [r7, #23]
 800ddd2:	79fb      	ldrb	r3, [r7, #7]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d3d3      	bcc.n	800dd80 <IntToUnicode+0x18>
  }
}
 800ddd8:	bf00      	nop
 800ddda:	371c      	adds	r7, #28
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bc80      	pop	{r7}
 800dde0:	4770      	bx	lr
	...

0800dde4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a0d      	ldr	r2, [pc, #52]	; (800de28 <HAL_PCD_MspInit+0x44>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d113      	bne.n	800de1e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ddf6:	4b0d      	ldr	r3, [pc, #52]	; (800de2c <HAL_PCD_MspInit+0x48>)
 800ddf8:	69db      	ldr	r3, [r3, #28]
 800ddfa:	4a0c      	ldr	r2, [pc, #48]	; (800de2c <HAL_PCD_MspInit+0x48>)
 800ddfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800de00:	61d3      	str	r3, [r2, #28]
 800de02:	4b0a      	ldr	r3, [pc, #40]	; (800de2c <HAL_PCD_MspInit+0x48>)
 800de04:	69db      	ldr	r3, [r3, #28]
 800de06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de0a:	60fb      	str	r3, [r7, #12]
 800de0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800de0e:	2200      	movs	r2, #0
 800de10:	2100      	movs	r1, #0
 800de12:	2014      	movs	r0, #20
 800de14:	f7f9 ff47 	bl	8007ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800de18:	2014      	movs	r0, #20
 800de1a:	f7f9 ff60 	bl	8007cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800de1e:	bf00      	nop
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	40005c00 	.word	0x40005c00
 800de2c:	40021000 	.word	0x40021000

0800de30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800de44:	4619      	mov	r1, r3
 800de46:	4610      	mov	r0, r2
 800de48:	f7fe fe6e 	bl	800cb28 <USBD_LL_SetupStage>
}
 800de4c:	bf00      	nop
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	460b      	mov	r3, r1
 800de5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 800de66:	78fb      	ldrb	r3, [r7, #3]
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	015b      	lsls	r3, r3, #5
 800de6c:	4413      	add	r3, r2
 800de6e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	78fb      	ldrb	r3, [r7, #3]
 800de76:	4619      	mov	r1, r3
 800de78:	f7fe fea0 	bl	800cbbc <USBD_LL_DataOutStage>
}
 800de7c:	bf00      	nop
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	460b      	mov	r3, r1
 800de8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 800de96:	78fb      	ldrb	r3, [r7, #3]
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	015b      	lsls	r3, r3, #5
 800de9c:	4413      	add	r3, r2
 800de9e:	333c      	adds	r3, #60	; 0x3c
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	78fb      	ldrb	r3, [r7, #3]
 800dea4:	4619      	mov	r1, r3
 800dea6:	f7fe fee4 	bl	800cc72 <USBD_LL_DataInStage>
}
 800deaa:	bf00      	nop
 800deac:	3708      	adds	r7, #8
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b082      	sub	sp, #8
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7fe ffc7 	bl	800ce54 <USBD_LL_SOF>
}
 800dec6:	bf00      	nop
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800dece:	b580      	push	{r7, lr}
 800ded0:	b084      	sub	sp, #16
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ded6:	2301      	movs	r3, #1
 800ded8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	2b02      	cmp	r3, #2
 800dee0:	d001      	beq.n	800dee6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dee2:	f7f8 f87f 	bl	8005fe4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800deec:	7bfa      	ldrb	r2, [r7, #15]
 800deee:	4611      	mov	r1, r2
 800def0:	4618      	mov	r0, r3
 800def2:	f7fe ff7c 	bl	800cdee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800defc:	4618      	mov	r0, r3
 800defe:	f7fe ff47 	bl	800cd90 <USBD_LL_Reset>
}
 800df02:	bf00      	nop
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
	...

0800df0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fe ff76 	bl	800ce0c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	699b      	ldr	r3, [r3, #24]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d005      	beq.n	800df34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df28:	4b04      	ldr	r3, [pc, #16]	; (800df3c <HAL_PCD_SuspendCallback+0x30>)
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	4a03      	ldr	r2, [pc, #12]	; (800df3c <HAL_PCD_SuspendCallback+0x30>)
 800df2e:	f043 0306 	orr.w	r3, r3, #6
 800df32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800df34:	bf00      	nop
 800df36:	3708      	adds	r7, #8
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	e000ed00 	.word	0xe000ed00

0800df40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800df4e:	4618      	mov	r0, r3
 800df50:	f7fe ff70 	bl	800ce34 <USBD_LL_Resume>
}
 800df54:	bf00      	nop
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800df64:	4a28      	ldr	r2, [pc, #160]	; (800e008 <USBD_LL_Init+0xac>)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a26      	ldr	r2, [pc, #152]	; (800e008 <USBD_LL_Init+0xac>)
 800df70:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 800df74:	4b24      	ldr	r3, [pc, #144]	; (800e008 <USBD_LL_Init+0xac>)
 800df76:	4a25      	ldr	r2, [pc, #148]	; (800e00c <USBD_LL_Init+0xb0>)
 800df78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800df7a:	4b23      	ldr	r3, [pc, #140]	; (800e008 <USBD_LL_Init+0xac>)
 800df7c:	2208      	movs	r2, #8
 800df7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800df80:	4b21      	ldr	r3, [pc, #132]	; (800e008 <USBD_LL_Init+0xac>)
 800df82:	2202      	movs	r2, #2
 800df84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800df86:	4b20      	ldr	r3, [pc, #128]	; (800e008 <USBD_LL_Init+0xac>)
 800df88:	2200      	movs	r2, #0
 800df8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800df8c:	4b1e      	ldr	r3, [pc, #120]	; (800e008 <USBD_LL_Init+0xac>)
 800df8e:	2200      	movs	r2, #0
 800df90:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800df92:	4b1d      	ldr	r3, [pc, #116]	; (800e008 <USBD_LL_Init+0xac>)
 800df94:	2200      	movs	r2, #0
 800df96:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800df98:	481b      	ldr	r0, [pc, #108]	; (800e008 <USBD_LL_Init+0xac>)
 800df9a:	f7fa fdf2 	bl	8008b82 <HAL_PCD_Init>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800dfa4:	f7f8 f81e 	bl	8005fe4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800dfae:	2318      	movs	r3, #24
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	2100      	movs	r1, #0
 800dfb4:	f7fb fcfa 	bl	80099ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800dfbe:	2358      	movs	r3, #88	; 0x58
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	2180      	movs	r1, #128	; 0x80
 800dfc4:	f7fb fcf2 	bl	80099ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800dfce:	23c0      	movs	r3, #192	; 0xc0
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	2181      	movs	r1, #129	; 0x81
 800dfd4:	f7fb fcea 	bl	80099ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800dfde:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	2101      	movs	r1, #1
 800dfe6:	f7fb fce1 	bl	80099ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800dff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dff4:	2200      	movs	r2, #0
 800dff6:	2182      	movs	r1, #130	; 0x82
 800dff8:	f7fb fcd8 	bl	80099ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3708      	adds	r7, #8
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	20002128 	.word	0x20002128
 800e00c:	40005c00 	.word	0x40005c00

0800e010 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e018:	2300      	movs	r3, #0
 800e01a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800e026:	4618      	mov	r0, r3
 800e028:	f7fa fe85 	bl	8008d36 <HAL_PCD_Start>
 800e02c:	4603      	mov	r3, r0
 800e02e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e030:	7bfb      	ldrb	r3, [r7, #15]
 800e032:	4618      	mov	r0, r3
 800e034:	f000 f948 	bl	800e2c8 <USBD_Get_USB_Status>
 800e038:	4603      	mov	r3, r0
 800e03a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e03c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e046:	b580      	push	{r7, lr}
 800e048:	b084      	sub	sp, #16
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
 800e04e:	4608      	mov	r0, r1
 800e050:	4611      	mov	r1, r2
 800e052:	461a      	mov	r2, r3
 800e054:	4603      	mov	r3, r0
 800e056:	70fb      	strb	r3, [r7, #3]
 800e058:	460b      	mov	r3, r1
 800e05a:	70bb      	strb	r3, [r7, #2]
 800e05c:	4613      	mov	r3, r2
 800e05e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e060:	2300      	movs	r3, #0
 800e062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800e06e:	78bb      	ldrb	r3, [r7, #2]
 800e070:	883a      	ldrh	r2, [r7, #0]
 800e072:	78f9      	ldrb	r1, [r7, #3]
 800e074:	f7fa ffac 	bl	8008fd0 <HAL_PCD_EP_Open>
 800e078:	4603      	mov	r3, r0
 800e07a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e07c:	7bfb      	ldrb	r3, [r7, #15]
 800e07e:	4618      	mov	r0, r3
 800e080:	f000 f922 	bl	800e2c8 <USBD_Get_USB_Status>
 800e084:	4603      	mov	r3, r0
 800e086:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800e088:	7bbb      	ldrb	r3, [r7, #14]
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3710      	adds	r7, #16
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}

0800e092 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b084      	sub	sp, #16
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	460b      	mov	r3, r1
 800e09c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800e0ac:	78fa      	ldrb	r2, [r7, #3]
 800e0ae:	4611      	mov	r1, r2
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7fa ffe2 	bl	800907a <HAL_PCD_EP_Close>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0ba:	7bfb      	ldrb	r3, [r7, #15]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f000 f903 	bl	800e2c8 <USBD_Get_USB_Status>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800e0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3710      	adds	r7, #16
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	460b      	mov	r3, r1
 800e0da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800e0ea:	78fa      	ldrb	r2, [r7, #3]
 800e0ec:	4611      	mov	r1, r2
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7fb f895 	bl	800921e <HAL_PCD_EP_SetStall>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f000 f8e4 	bl	800e2c8 <USBD_Get_USB_Status>
 800e100:	4603      	mov	r3, r0
 800e102:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e104:	7bbb      	ldrb	r3, [r7, #14]
}
 800e106:	4618      	mov	r0, r3
 800e108:	3710      	adds	r7, #16
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b084      	sub	sp, #16
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	460b      	mov	r3, r1
 800e118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e11a:	2300      	movs	r3, #0
 800e11c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800e128:	78fa      	ldrb	r2, [r7, #3]
 800e12a:	4611      	mov	r1, r2
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fb f8cb 	bl	80092c8 <HAL_PCD_EP_ClrStall>
 800e132:	4603      	mov	r3, r0
 800e134:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e136:	7bfb      	ldrb	r3, [r7, #15]
 800e138:	4618      	mov	r0, r3
 800e13a:	f000 f8c5 	bl	800e2c8 <USBD_Get_USB_Status>
 800e13e:	4603      	mov	r3, r0
 800e140:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800e142:	7bbb      	ldrb	r3, [r7, #14]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3710      	adds	r7, #16
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	460b      	mov	r3, r1
 800e156:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800e15e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e164:	2b00      	cmp	r3, #0
 800e166:	da08      	bge.n	800e17a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e168:	78fb      	ldrb	r3, [r7, #3]
 800e16a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	015b      	lsls	r3, r3, #5
 800e172:	4413      	add	r3, r2
 800e174:	332a      	adds	r3, #42	; 0x2a
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	e008      	b.n	800e18c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e17a:	78fb      	ldrb	r3, [r7, #3]
 800e17c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	015b      	lsls	r3, r3, #5
 800e184:	4413      	add	r3, r2
 800e186:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800e18a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3714      	adds	r7, #20
 800e190:	46bd      	mov	sp, r7
 800e192:	bc80      	pop	{r7}
 800e194:	4770      	bx	lr

0800e196 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b084      	sub	sp, #16
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
 800e19e:	460b      	mov	r3, r1
 800e1a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800e1b0:	78fa      	ldrb	r2, [r7, #3]
 800e1b2:	4611      	mov	r1, r2
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fa fee6 	bl	8008f86 <HAL_PCD_SetAddress>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1be:	7bfb      	ldrb	r3, [r7, #15]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f000 f881 	bl	800e2c8 <USBD_Get_USB_Status>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e1ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	607a      	str	r2, [r7, #4]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	72fb      	strb	r3, [r7, #11]
 800e1e4:	4613      	mov	r3, r2
 800e1e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800e1f6:	893b      	ldrh	r3, [r7, #8]
 800e1f8:	7af9      	ldrb	r1, [r7, #11]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	f7fa ffd4 	bl	80091a8 <HAL_PCD_EP_Transmit>
 800e200:	4603      	mov	r3, r0
 800e202:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e204:	7dfb      	ldrb	r3, [r7, #23]
 800e206:	4618      	mov	r0, r3
 800e208:	f000 f85e 	bl	800e2c8 <USBD_Get_USB_Status>
 800e20c:	4603      	mov	r3, r0
 800e20e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800e210:	7dbb      	ldrb	r3, [r7, #22]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3718      	adds	r7, #24
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b086      	sub	sp, #24
 800e21e:	af00      	add	r7, sp, #0
 800e220:	60f8      	str	r0, [r7, #12]
 800e222:	607a      	str	r2, [r7, #4]
 800e224:	461a      	mov	r2, r3
 800e226:	460b      	mov	r3, r1
 800e228:	72fb      	strb	r3, [r7, #11]
 800e22a:	4613      	mov	r3, r2
 800e22c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e22e:	2300      	movs	r3, #0
 800e230:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e232:	2300      	movs	r3, #0
 800e234:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800e23c:	893b      	ldrh	r3, [r7, #8]
 800e23e:	7af9      	ldrb	r1, [r7, #11]
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	f7fa ff60 	bl	8009106 <HAL_PCD_EP_Receive>
 800e246:	4603      	mov	r3, r0
 800e248:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 f83b 	bl	800e2c8 <USBD_Get_USB_Status>
 800e252:	4603      	mov	r3, r0
 800e254:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800e256:	7dbb      	ldrb	r3, [r7, #22]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3718      	adds	r7, #24
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	460b      	mov	r3, r1
 800e26a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800e272:	78fa      	ldrb	r2, [r7, #3]
 800e274:	4611      	mov	r1, r2
 800e276:	4618      	mov	r0, r3
 800e278:	f7fa ff81 	bl	800917e <HAL_PCD_EP_GetRxCount>
 800e27c:	4603      	mov	r3, r0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
	...

0800e288 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e290:	4b02      	ldr	r3, [pc, #8]	; (800e29c <USBD_static_malloc+0x14>)
}
 800e292:	4618      	mov	r0, r3
 800e294:	370c      	adds	r7, #12
 800e296:	46bd      	mov	sp, r7
 800e298:	bc80      	pop	{r7}
 800e29a:	4770      	bx	lr
 800e29c:	20000ccc 	.word	0x20000ccc

0800e2a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]

}
 800e2a8:	bf00      	nop
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bc80      	pop	{r7}
 800e2b0:	4770      	bx	lr

0800e2b2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2b2:	b480      	push	{r7}
 800e2b4:	b083      	sub	sp, #12
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e2be:	bf00      	nop
 800e2c0:	370c      	adds	r7, #12
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bc80      	pop	{r7}
 800e2c6:	4770      	bx	lr

0800e2c8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e2d6:	79fb      	ldrb	r3, [r7, #7]
 800e2d8:	2b03      	cmp	r3, #3
 800e2da:	d817      	bhi.n	800e30c <USBD_Get_USB_Status+0x44>
 800e2dc:	a201      	add	r2, pc, #4	; (adr r2, 800e2e4 <USBD_Get_USB_Status+0x1c>)
 800e2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e2:	bf00      	nop
 800e2e4:	0800e2f5 	.word	0x0800e2f5
 800e2e8:	0800e2fb 	.word	0x0800e2fb
 800e2ec:	0800e301 	.word	0x0800e301
 800e2f0:	0800e307 	.word	0x0800e307
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e2f8:	e00b      	b.n	800e312 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e2fa:	2302      	movs	r3, #2
 800e2fc:	73fb      	strb	r3, [r7, #15]
    break;
 800e2fe:	e008      	b.n	800e312 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e300:	2301      	movs	r3, #1
 800e302:	73fb      	strb	r3, [r7, #15]
    break;
 800e304:	e005      	b.n	800e312 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e306:	2302      	movs	r3, #2
 800e308:	73fb      	strb	r3, [r7, #15]
    break;
 800e30a:	e002      	b.n	800e312 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e30c:	2302      	movs	r3, #2
 800e30e:	73fb      	strb	r3, [r7, #15]
    break;
 800e310:	bf00      	nop
  }
  return usb_status;
 800e312:	7bfb      	ldrb	r3, [r7, #15]
}
 800e314:	4618      	mov	r0, r3
 800e316:	3714      	adds	r7, #20
 800e318:	46bd      	mov	sp, r7
 800e31a:	bc80      	pop	{r7}
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop

0800e320 <main>:
 */

#include "main.h"

int main(void)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	af00      	add	r7, sp, #0
  hwInit();
 800e324:	f7f9 fb3a 	bl	800799c <hwInit>
  apInit();
 800e328:	f7f7 fd20 	bl	8005d6c <apInit>

  apMain();
 800e32c:	f7f7 fd36 	bl	8005d9c <apMain>

  return 0;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	bd80      	pop	{r7, pc}
	...

0800e338 <__errno>:
 800e338:	4b01      	ldr	r3, [pc, #4]	; (800e340 <__errno+0x8>)
 800e33a:	6818      	ldr	r0, [r3, #0]
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop
 800e340:	200001a4 	.word	0x200001a4

0800e344 <__libc_init_array>:
 800e344:	b570      	push	{r4, r5, r6, lr}
 800e346:	2500      	movs	r5, #0
 800e348:	4e0c      	ldr	r6, [pc, #48]	; (800e37c <__libc_init_array+0x38>)
 800e34a:	4c0d      	ldr	r4, [pc, #52]	; (800e380 <__libc_init_array+0x3c>)
 800e34c:	1ba4      	subs	r4, r4, r6
 800e34e:	10a4      	asrs	r4, r4, #2
 800e350:	42a5      	cmp	r5, r4
 800e352:	d109      	bne.n	800e368 <__libc_init_array+0x24>
 800e354:	f002 faf6 	bl	8010944 <_init>
 800e358:	2500      	movs	r5, #0
 800e35a:	4e0a      	ldr	r6, [pc, #40]	; (800e384 <__libc_init_array+0x40>)
 800e35c:	4c0a      	ldr	r4, [pc, #40]	; (800e388 <__libc_init_array+0x44>)
 800e35e:	1ba4      	subs	r4, r4, r6
 800e360:	10a4      	asrs	r4, r4, #2
 800e362:	42a5      	cmp	r5, r4
 800e364:	d105      	bne.n	800e372 <__libc_init_array+0x2e>
 800e366:	bd70      	pop	{r4, r5, r6, pc}
 800e368:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e36c:	4798      	blx	r3
 800e36e:	3501      	adds	r5, #1
 800e370:	e7ee      	b.n	800e350 <__libc_init_array+0xc>
 800e372:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e376:	4798      	blx	r3
 800e378:	3501      	adds	r5, #1
 800e37a:	e7f2      	b.n	800e362 <__libc_init_array+0x1e>
 800e37c:	08010e20 	.word	0x08010e20
 800e380:	08010e20 	.word	0x08010e20
 800e384:	08010e20 	.word	0x08010e20
 800e388:	08010e24 	.word	0x08010e24

0800e38c <memset>:
 800e38c:	4603      	mov	r3, r0
 800e38e:	4402      	add	r2, r0
 800e390:	4293      	cmp	r3, r2
 800e392:	d100      	bne.n	800e396 <memset+0xa>
 800e394:	4770      	bx	lr
 800e396:	f803 1b01 	strb.w	r1, [r3], #1
 800e39a:	e7f9      	b.n	800e390 <memset+0x4>

0800e39c <strcpy>:
 800e39c:	4603      	mov	r3, r0
 800e39e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3a2:	f803 2b01 	strb.w	r2, [r3], #1
 800e3a6:	2a00      	cmp	r2, #0
 800e3a8:	d1f9      	bne.n	800e39e <strcpy+0x2>
 800e3aa:	4770      	bx	lr

0800e3ac <sulp>:
 800e3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b0:	460f      	mov	r7, r1
 800e3b2:	4690      	mov	r8, r2
 800e3b4:	f001 fd76 	bl	800fea4 <__ulp>
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	460d      	mov	r5, r1
 800e3bc:	f1b8 0f00 	cmp.w	r8, #0
 800e3c0:	d011      	beq.n	800e3e6 <sulp+0x3a>
 800e3c2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800e3c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	dd0b      	ble.n	800e3e6 <sulp+0x3a>
 800e3ce:	2400      	movs	r4, #0
 800e3d0:	051b      	lsls	r3, r3, #20
 800e3d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e3d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e3da:	4622      	mov	r2, r4
 800e3dc:	462b      	mov	r3, r5
 800e3de:	f7f7 f8f1 	bl	80055c4 <__aeabi_dmul>
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	460d      	mov	r5, r1
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	4629      	mov	r1, r5
 800e3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800e3f0 <_strtod_l>:
 800e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f4:	461f      	mov	r7, r3
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	b0a1      	sub	sp, #132	; 0x84
 800e3fa:	4683      	mov	fp, r0
 800e3fc:	4638      	mov	r0, r7
 800e3fe:	460e      	mov	r6, r1
 800e400:	9217      	str	r2, [sp, #92]	; 0x5c
 800e402:	931c      	str	r3, [sp, #112]	; 0x70
 800e404:	f001 fa65 	bl	800f8d2 <__localeconv_l>
 800e408:	4680      	mov	r8, r0
 800e40a:	6800      	ldr	r0, [r0, #0]
 800e40c:	f7f6 ff16 	bl	800523c <strlen>
 800e410:	f04f 0900 	mov.w	r9, #0
 800e414:	4604      	mov	r4, r0
 800e416:	f04f 0a00 	mov.w	sl, #0
 800e41a:	961b      	str	r6, [sp, #108]	; 0x6c
 800e41c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e41e:	781a      	ldrb	r2, [r3, #0]
 800e420:	2a0d      	cmp	r2, #13
 800e422:	d832      	bhi.n	800e48a <_strtod_l+0x9a>
 800e424:	2a09      	cmp	r2, #9
 800e426:	d236      	bcs.n	800e496 <_strtod_l+0xa6>
 800e428:	2a00      	cmp	r2, #0
 800e42a:	d03e      	beq.n	800e4aa <_strtod_l+0xba>
 800e42c:	2300      	movs	r3, #0
 800e42e:	930d      	str	r3, [sp, #52]	; 0x34
 800e430:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e432:	782b      	ldrb	r3, [r5, #0]
 800e434:	2b30      	cmp	r3, #48	; 0x30
 800e436:	f040 80ac 	bne.w	800e592 <_strtod_l+0x1a2>
 800e43a:	786b      	ldrb	r3, [r5, #1]
 800e43c:	2b58      	cmp	r3, #88	; 0x58
 800e43e:	d001      	beq.n	800e444 <_strtod_l+0x54>
 800e440:	2b78      	cmp	r3, #120	; 0x78
 800e442:	d167      	bne.n	800e514 <_strtod_l+0x124>
 800e444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e446:	9702      	str	r7, [sp, #8]
 800e448:	9301      	str	r3, [sp, #4]
 800e44a:	ab1c      	add	r3, sp, #112	; 0x70
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	4a89      	ldr	r2, [pc, #548]	; (800e674 <_strtod_l+0x284>)
 800e450:	ab1d      	add	r3, sp, #116	; 0x74
 800e452:	a91b      	add	r1, sp, #108	; 0x6c
 800e454:	4658      	mov	r0, fp
 800e456:	f000 ff61 	bl	800f31c <__gethex>
 800e45a:	f010 0407 	ands.w	r4, r0, #7
 800e45e:	4606      	mov	r6, r0
 800e460:	d005      	beq.n	800e46e <_strtod_l+0x7e>
 800e462:	2c06      	cmp	r4, #6
 800e464:	d12b      	bne.n	800e4be <_strtod_l+0xce>
 800e466:	2300      	movs	r3, #0
 800e468:	3501      	adds	r5, #1
 800e46a:	951b      	str	r5, [sp, #108]	; 0x6c
 800e46c:	930d      	str	r3, [sp, #52]	; 0x34
 800e46e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e470:	2b00      	cmp	r3, #0
 800e472:	f040 85a6 	bne.w	800efc2 <_strtod_l+0xbd2>
 800e476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e478:	b1e3      	cbz	r3, 800e4b4 <_strtod_l+0xc4>
 800e47a:	464a      	mov	r2, r9
 800e47c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800e480:	4610      	mov	r0, r2
 800e482:	4619      	mov	r1, r3
 800e484:	b021      	add	sp, #132	; 0x84
 800e486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48a:	2a2b      	cmp	r2, #43	; 0x2b
 800e48c:	d015      	beq.n	800e4ba <_strtod_l+0xca>
 800e48e:	2a2d      	cmp	r2, #45	; 0x2d
 800e490:	d004      	beq.n	800e49c <_strtod_l+0xac>
 800e492:	2a20      	cmp	r2, #32
 800e494:	d1ca      	bne.n	800e42c <_strtod_l+0x3c>
 800e496:	3301      	adds	r3, #1
 800e498:	931b      	str	r3, [sp, #108]	; 0x6c
 800e49a:	e7bf      	b.n	800e41c <_strtod_l+0x2c>
 800e49c:	2201      	movs	r2, #1
 800e49e:	920d      	str	r2, [sp, #52]	; 0x34
 800e4a0:	1c5a      	adds	r2, r3, #1
 800e4a2:	921b      	str	r2, [sp, #108]	; 0x6c
 800e4a4:	785b      	ldrb	r3, [r3, #1]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d1c2      	bne.n	800e430 <_strtod_l+0x40>
 800e4aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e4ac:	961b      	str	r6, [sp, #108]	; 0x6c
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f040 8585 	bne.w	800efbe <_strtod_l+0xbce>
 800e4b4:	464a      	mov	r2, r9
 800e4b6:	4653      	mov	r3, sl
 800e4b8:	e7e2      	b.n	800e480 <_strtod_l+0x90>
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	e7ef      	b.n	800e49e <_strtod_l+0xae>
 800e4be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e4c0:	b13a      	cbz	r2, 800e4d2 <_strtod_l+0xe2>
 800e4c2:	2135      	movs	r1, #53	; 0x35
 800e4c4:	a81e      	add	r0, sp, #120	; 0x78
 800e4c6:	f001 fde0 	bl	801008a <__copybits>
 800e4ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e4cc:	4658      	mov	r0, fp
 800e4ce:	f001 fa53 	bl	800f978 <_Bfree>
 800e4d2:	3c01      	subs	r4, #1
 800e4d4:	2c04      	cmp	r4, #4
 800e4d6:	d806      	bhi.n	800e4e6 <_strtod_l+0xf6>
 800e4d8:	e8df f004 	tbb	[pc, r4]
 800e4dc:	1714030a 	.word	0x1714030a
 800e4e0:	0a          	.byte	0x0a
 800e4e1:	00          	.byte	0x00
 800e4e2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800e4e6:	0731      	lsls	r1, r6, #28
 800e4e8:	d5c1      	bpl.n	800e46e <_strtod_l+0x7e>
 800e4ea:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800e4ee:	e7be      	b.n	800e46e <_strtod_l+0x7e>
 800e4f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e4f2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800e4f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e4fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e4fe:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800e502:	e7f0      	b.n	800e4e6 <_strtod_l+0xf6>
 800e504:	f8df a170 	ldr.w	sl, [pc, #368]	; 800e678 <_strtod_l+0x288>
 800e508:	e7ed      	b.n	800e4e6 <_strtod_l+0xf6>
 800e50a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800e50e:	f04f 39ff 	mov.w	r9, #4294967295
 800e512:	e7e8      	b.n	800e4e6 <_strtod_l+0xf6>
 800e514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e516:	1c5a      	adds	r2, r3, #1
 800e518:	921b      	str	r2, [sp, #108]	; 0x6c
 800e51a:	785b      	ldrb	r3, [r3, #1]
 800e51c:	2b30      	cmp	r3, #48	; 0x30
 800e51e:	d0f9      	beq.n	800e514 <_strtod_l+0x124>
 800e520:	2b00      	cmp	r3, #0
 800e522:	d0a4      	beq.n	800e46e <_strtod_l+0x7e>
 800e524:	2301      	movs	r3, #1
 800e526:	2500      	movs	r5, #0
 800e528:	220a      	movs	r2, #10
 800e52a:	9307      	str	r3, [sp, #28]
 800e52c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e52e:	9506      	str	r5, [sp, #24]
 800e530:	9308      	str	r3, [sp, #32]
 800e532:	9504      	str	r5, [sp, #16]
 800e534:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e536:	7807      	ldrb	r7, [r0, #0]
 800e538:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e53c:	b2d9      	uxtb	r1, r3
 800e53e:	2909      	cmp	r1, #9
 800e540:	d929      	bls.n	800e596 <_strtod_l+0x1a6>
 800e542:	4622      	mov	r2, r4
 800e544:	f8d8 1000 	ldr.w	r1, [r8]
 800e548:	f002 f930 	bl	80107ac <strncmp>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d031      	beq.n	800e5b4 <_strtod_l+0x1c4>
 800e550:	2000      	movs	r0, #0
 800e552:	463b      	mov	r3, r7
 800e554:	4602      	mov	r2, r0
 800e556:	9c04      	ldr	r4, [sp, #16]
 800e558:	9005      	str	r0, [sp, #20]
 800e55a:	2b65      	cmp	r3, #101	; 0x65
 800e55c:	d001      	beq.n	800e562 <_strtod_l+0x172>
 800e55e:	2b45      	cmp	r3, #69	; 0x45
 800e560:	d114      	bne.n	800e58c <_strtod_l+0x19c>
 800e562:	b924      	cbnz	r4, 800e56e <_strtod_l+0x17e>
 800e564:	b910      	cbnz	r0, 800e56c <_strtod_l+0x17c>
 800e566:	9b07      	ldr	r3, [sp, #28]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d09e      	beq.n	800e4aa <_strtod_l+0xba>
 800e56c:	2400      	movs	r4, #0
 800e56e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e570:	1c73      	adds	r3, r6, #1
 800e572:	931b      	str	r3, [sp, #108]	; 0x6c
 800e574:	7873      	ldrb	r3, [r6, #1]
 800e576:	2b2b      	cmp	r3, #43	; 0x2b
 800e578:	d078      	beq.n	800e66c <_strtod_l+0x27c>
 800e57a:	2b2d      	cmp	r3, #45	; 0x2d
 800e57c:	d070      	beq.n	800e660 <_strtod_l+0x270>
 800e57e:	f04f 0c00 	mov.w	ip, #0
 800e582:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e586:	2f09      	cmp	r7, #9
 800e588:	d97c      	bls.n	800e684 <_strtod_l+0x294>
 800e58a:	961b      	str	r6, [sp, #108]	; 0x6c
 800e58c:	f04f 0e00 	mov.w	lr, #0
 800e590:	e09a      	b.n	800e6c8 <_strtod_l+0x2d8>
 800e592:	2300      	movs	r3, #0
 800e594:	e7c7      	b.n	800e526 <_strtod_l+0x136>
 800e596:	9904      	ldr	r1, [sp, #16]
 800e598:	3001      	adds	r0, #1
 800e59a:	2908      	cmp	r1, #8
 800e59c:	bfd7      	itett	le
 800e59e:	9906      	ldrle	r1, [sp, #24]
 800e5a0:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e5a4:	fb02 3301 	mlale	r3, r2, r1, r3
 800e5a8:	9306      	strle	r3, [sp, #24]
 800e5aa:	9b04      	ldr	r3, [sp, #16]
 800e5ac:	901b      	str	r0, [sp, #108]	; 0x6c
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	9304      	str	r3, [sp, #16]
 800e5b2:	e7bf      	b.n	800e534 <_strtod_l+0x144>
 800e5b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5b6:	191a      	adds	r2, r3, r4
 800e5b8:	921b      	str	r2, [sp, #108]	; 0x6c
 800e5ba:	9a04      	ldr	r2, [sp, #16]
 800e5bc:	5d1b      	ldrb	r3, [r3, r4]
 800e5be:	2a00      	cmp	r2, #0
 800e5c0:	d037      	beq.n	800e632 <_strtod_l+0x242>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	9c04      	ldr	r4, [sp, #16]
 800e5c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e5ca:	2909      	cmp	r1, #9
 800e5cc:	d913      	bls.n	800e5f6 <_strtod_l+0x206>
 800e5ce:	2101      	movs	r1, #1
 800e5d0:	9105      	str	r1, [sp, #20]
 800e5d2:	e7c2      	b.n	800e55a <_strtod_l+0x16a>
 800e5d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5d6:	3001      	adds	r0, #1
 800e5d8:	1c5a      	adds	r2, r3, #1
 800e5da:	921b      	str	r2, [sp, #108]	; 0x6c
 800e5dc:	785b      	ldrb	r3, [r3, #1]
 800e5de:	2b30      	cmp	r3, #48	; 0x30
 800e5e0:	d0f8      	beq.n	800e5d4 <_strtod_l+0x1e4>
 800e5e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e5e6:	2a08      	cmp	r2, #8
 800e5e8:	f200 84f0 	bhi.w	800efcc <_strtod_l+0xbdc>
 800e5ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e5ee:	9208      	str	r2, [sp, #32]
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e5fa:	f100 0101 	add.w	r1, r0, #1
 800e5fe:	d012      	beq.n	800e626 <_strtod_l+0x236>
 800e600:	440a      	add	r2, r1
 800e602:	270a      	movs	r7, #10
 800e604:	4621      	mov	r1, r4
 800e606:	eb00 0c04 	add.w	ip, r0, r4
 800e60a:	458c      	cmp	ip, r1
 800e60c:	d113      	bne.n	800e636 <_strtod_l+0x246>
 800e60e:	1821      	adds	r1, r4, r0
 800e610:	2908      	cmp	r1, #8
 800e612:	f104 0401 	add.w	r4, r4, #1
 800e616:	4404      	add	r4, r0
 800e618:	dc19      	bgt.n	800e64e <_strtod_l+0x25e>
 800e61a:	210a      	movs	r1, #10
 800e61c:	9b06      	ldr	r3, [sp, #24]
 800e61e:	fb01 e303 	mla	r3, r1, r3, lr
 800e622:	9306      	str	r3, [sp, #24]
 800e624:	2100      	movs	r1, #0
 800e626:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e628:	1c58      	adds	r0, r3, #1
 800e62a:	901b      	str	r0, [sp, #108]	; 0x6c
 800e62c:	785b      	ldrb	r3, [r3, #1]
 800e62e:	4608      	mov	r0, r1
 800e630:	e7c9      	b.n	800e5c6 <_strtod_l+0x1d6>
 800e632:	9804      	ldr	r0, [sp, #16]
 800e634:	e7d3      	b.n	800e5de <_strtod_l+0x1ee>
 800e636:	2908      	cmp	r1, #8
 800e638:	f101 0101 	add.w	r1, r1, #1
 800e63c:	dc03      	bgt.n	800e646 <_strtod_l+0x256>
 800e63e:	9b06      	ldr	r3, [sp, #24]
 800e640:	437b      	muls	r3, r7
 800e642:	9306      	str	r3, [sp, #24]
 800e644:	e7e1      	b.n	800e60a <_strtod_l+0x21a>
 800e646:	2910      	cmp	r1, #16
 800e648:	bfd8      	it	le
 800e64a:	437d      	mulle	r5, r7
 800e64c:	e7dd      	b.n	800e60a <_strtod_l+0x21a>
 800e64e:	2c10      	cmp	r4, #16
 800e650:	bfdc      	itt	le
 800e652:	210a      	movle	r1, #10
 800e654:	fb01 e505 	mlale	r5, r1, r5, lr
 800e658:	e7e4      	b.n	800e624 <_strtod_l+0x234>
 800e65a:	2301      	movs	r3, #1
 800e65c:	9305      	str	r3, [sp, #20]
 800e65e:	e781      	b.n	800e564 <_strtod_l+0x174>
 800e660:	f04f 0c01 	mov.w	ip, #1
 800e664:	1cb3      	adds	r3, r6, #2
 800e666:	931b      	str	r3, [sp, #108]	; 0x6c
 800e668:	78b3      	ldrb	r3, [r6, #2]
 800e66a:	e78a      	b.n	800e582 <_strtod_l+0x192>
 800e66c:	f04f 0c00 	mov.w	ip, #0
 800e670:	e7f8      	b.n	800e664 <_strtod_l+0x274>
 800e672:	bf00      	nop
 800e674:	08010b8c 	.word	0x08010b8c
 800e678:	7ff00000 	.word	0x7ff00000
 800e67c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e67e:	1c5f      	adds	r7, r3, #1
 800e680:	971b      	str	r7, [sp, #108]	; 0x6c
 800e682:	785b      	ldrb	r3, [r3, #1]
 800e684:	2b30      	cmp	r3, #48	; 0x30
 800e686:	d0f9      	beq.n	800e67c <_strtod_l+0x28c>
 800e688:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e68c:	2f08      	cmp	r7, #8
 800e68e:	f63f af7d 	bhi.w	800e58c <_strtod_l+0x19c>
 800e692:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e696:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e698:	9309      	str	r3, [sp, #36]	; 0x24
 800e69a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e69c:	1c5f      	adds	r7, r3, #1
 800e69e:	971b      	str	r7, [sp, #108]	; 0x6c
 800e6a0:	785b      	ldrb	r3, [r3, #1]
 800e6a2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e6a6:	f1b8 0f09 	cmp.w	r8, #9
 800e6aa:	d937      	bls.n	800e71c <_strtod_l+0x32c>
 800e6ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6ae:	1a7f      	subs	r7, r7, r1
 800e6b0:	2f08      	cmp	r7, #8
 800e6b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e6b6:	dc37      	bgt.n	800e728 <_strtod_l+0x338>
 800e6b8:	45be      	cmp	lr, r7
 800e6ba:	bfa8      	it	ge
 800e6bc:	46be      	movge	lr, r7
 800e6be:	f1bc 0f00 	cmp.w	ip, #0
 800e6c2:	d001      	beq.n	800e6c8 <_strtod_l+0x2d8>
 800e6c4:	f1ce 0e00 	rsb	lr, lr, #0
 800e6c8:	2c00      	cmp	r4, #0
 800e6ca:	d151      	bne.n	800e770 <_strtod_l+0x380>
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	f47f aece 	bne.w	800e46e <_strtod_l+0x7e>
 800e6d2:	9a07      	ldr	r2, [sp, #28]
 800e6d4:	2a00      	cmp	r2, #0
 800e6d6:	f47f aeca 	bne.w	800e46e <_strtod_l+0x7e>
 800e6da:	9a05      	ldr	r2, [sp, #20]
 800e6dc:	2a00      	cmp	r2, #0
 800e6de:	f47f aee4 	bne.w	800e4aa <_strtod_l+0xba>
 800e6e2:	2b4e      	cmp	r3, #78	; 0x4e
 800e6e4:	d027      	beq.n	800e736 <_strtod_l+0x346>
 800e6e6:	dc21      	bgt.n	800e72c <_strtod_l+0x33c>
 800e6e8:	2b49      	cmp	r3, #73	; 0x49
 800e6ea:	f47f aede 	bne.w	800e4aa <_strtod_l+0xba>
 800e6ee:	49a4      	ldr	r1, [pc, #656]	; (800e980 <_strtod_l+0x590>)
 800e6f0:	a81b      	add	r0, sp, #108	; 0x6c
 800e6f2:	f001 f847 	bl	800f784 <__match>
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	f43f aed7 	beq.w	800e4aa <_strtod_l+0xba>
 800e6fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e6fe:	49a1      	ldr	r1, [pc, #644]	; (800e984 <_strtod_l+0x594>)
 800e700:	3b01      	subs	r3, #1
 800e702:	a81b      	add	r0, sp, #108	; 0x6c
 800e704:	931b      	str	r3, [sp, #108]	; 0x6c
 800e706:	f001 f83d 	bl	800f784 <__match>
 800e70a:	b910      	cbnz	r0, 800e712 <_strtod_l+0x322>
 800e70c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e70e:	3301      	adds	r3, #1
 800e710:	931b      	str	r3, [sp, #108]	; 0x6c
 800e712:	f8df a284 	ldr.w	sl, [pc, #644]	; 800e998 <_strtod_l+0x5a8>
 800e716:	f04f 0900 	mov.w	r9, #0
 800e71a:	e6a8      	b.n	800e46e <_strtod_l+0x7e>
 800e71c:	210a      	movs	r1, #10
 800e71e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e722:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e726:	e7b8      	b.n	800e69a <_strtod_l+0x2aa>
 800e728:	46be      	mov	lr, r7
 800e72a:	e7c8      	b.n	800e6be <_strtod_l+0x2ce>
 800e72c:	2b69      	cmp	r3, #105	; 0x69
 800e72e:	d0de      	beq.n	800e6ee <_strtod_l+0x2fe>
 800e730:	2b6e      	cmp	r3, #110	; 0x6e
 800e732:	f47f aeba 	bne.w	800e4aa <_strtod_l+0xba>
 800e736:	4994      	ldr	r1, [pc, #592]	; (800e988 <_strtod_l+0x598>)
 800e738:	a81b      	add	r0, sp, #108	; 0x6c
 800e73a:	f001 f823 	bl	800f784 <__match>
 800e73e:	2800      	cmp	r0, #0
 800e740:	f43f aeb3 	beq.w	800e4aa <_strtod_l+0xba>
 800e744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	2b28      	cmp	r3, #40	; 0x28
 800e74a:	d10e      	bne.n	800e76a <_strtod_l+0x37a>
 800e74c:	aa1e      	add	r2, sp, #120	; 0x78
 800e74e:	498f      	ldr	r1, [pc, #572]	; (800e98c <_strtod_l+0x59c>)
 800e750:	a81b      	add	r0, sp, #108	; 0x6c
 800e752:	f001 f82b 	bl	800f7ac <__hexnan>
 800e756:	2805      	cmp	r0, #5
 800e758:	d107      	bne.n	800e76a <_strtod_l+0x37a>
 800e75a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e75c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800e760:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800e764:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800e768:	e681      	b.n	800e46e <_strtod_l+0x7e>
 800e76a:	f8df a234 	ldr.w	sl, [pc, #564]	; 800e9a0 <_strtod_l+0x5b0>
 800e76e:	e7d2      	b.n	800e716 <_strtod_l+0x326>
 800e770:	ebae 0302 	sub.w	r3, lr, r2
 800e774:	9307      	str	r3, [sp, #28]
 800e776:	9b04      	ldr	r3, [sp, #16]
 800e778:	9806      	ldr	r0, [sp, #24]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	bf08      	it	eq
 800e77e:	4623      	moveq	r3, r4
 800e780:	2c10      	cmp	r4, #16
 800e782:	9304      	str	r3, [sp, #16]
 800e784:	46a0      	mov	r8, r4
 800e786:	bfa8      	it	ge
 800e788:	f04f 0810 	movge.w	r8, #16
 800e78c:	f7f6 fea0 	bl	80054d0 <__aeabi_ui2d>
 800e790:	2c09      	cmp	r4, #9
 800e792:	4681      	mov	r9, r0
 800e794:	468a      	mov	sl, r1
 800e796:	dc13      	bgt.n	800e7c0 <_strtod_l+0x3d0>
 800e798:	9b07      	ldr	r3, [sp, #28]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f43f ae67 	beq.w	800e46e <_strtod_l+0x7e>
 800e7a0:	9b07      	ldr	r3, [sp, #28]
 800e7a2:	dd7e      	ble.n	800e8a2 <_strtod_l+0x4b2>
 800e7a4:	2b16      	cmp	r3, #22
 800e7a6:	dc65      	bgt.n	800e874 <_strtod_l+0x484>
 800e7a8:	4a79      	ldr	r2, [pc, #484]	; (800e990 <_strtod_l+0x5a0>)
 800e7aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800e7ae:	464a      	mov	r2, r9
 800e7b0:	e9de 0100 	ldrd	r0, r1, [lr]
 800e7b4:	4653      	mov	r3, sl
 800e7b6:	f7f6 ff05 	bl	80055c4 <__aeabi_dmul>
 800e7ba:	4681      	mov	r9, r0
 800e7bc:	468a      	mov	sl, r1
 800e7be:	e656      	b.n	800e46e <_strtod_l+0x7e>
 800e7c0:	4b73      	ldr	r3, [pc, #460]	; (800e990 <_strtod_l+0x5a0>)
 800e7c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e7c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e7ca:	f7f6 fefb 	bl	80055c4 <__aeabi_dmul>
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	460f      	mov	r7, r1
 800e7d4:	f7f6 fe7c 	bl	80054d0 <__aeabi_ui2d>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	460b      	mov	r3, r1
 800e7dc:	4630      	mov	r0, r6
 800e7de:	4639      	mov	r1, r7
 800e7e0:	f7f6 fd3a 	bl	8005258 <__adddf3>
 800e7e4:	2c0f      	cmp	r4, #15
 800e7e6:	4681      	mov	r9, r0
 800e7e8:	468a      	mov	sl, r1
 800e7ea:	ddd5      	ble.n	800e798 <_strtod_l+0x3a8>
 800e7ec:	9b07      	ldr	r3, [sp, #28]
 800e7ee:	eba4 0808 	sub.w	r8, r4, r8
 800e7f2:	4498      	add	r8, r3
 800e7f4:	f1b8 0f00 	cmp.w	r8, #0
 800e7f8:	f340 809a 	ble.w	800e930 <_strtod_l+0x540>
 800e7fc:	f018 030f 	ands.w	r3, r8, #15
 800e800:	d00a      	beq.n	800e818 <_strtod_l+0x428>
 800e802:	4963      	ldr	r1, [pc, #396]	; (800e990 <_strtod_l+0x5a0>)
 800e804:	464a      	mov	r2, r9
 800e806:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e80a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e80e:	4653      	mov	r3, sl
 800e810:	f7f6 fed8 	bl	80055c4 <__aeabi_dmul>
 800e814:	4681      	mov	r9, r0
 800e816:	468a      	mov	sl, r1
 800e818:	f038 080f 	bics.w	r8, r8, #15
 800e81c:	d077      	beq.n	800e90e <_strtod_l+0x51e>
 800e81e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e822:	dd4b      	ble.n	800e8bc <_strtod_l+0x4cc>
 800e824:	f04f 0800 	mov.w	r8, #0
 800e828:	f8cd 8010 	str.w	r8, [sp, #16]
 800e82c:	f8cd 8020 	str.w	r8, [sp, #32]
 800e830:	f8cd 8018 	str.w	r8, [sp, #24]
 800e834:	2322      	movs	r3, #34	; 0x22
 800e836:	f04f 0900 	mov.w	r9, #0
 800e83a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800e998 <_strtod_l+0x5a8>
 800e83e:	f8cb 3000 	str.w	r3, [fp]
 800e842:	9b08      	ldr	r3, [sp, #32]
 800e844:	2b00      	cmp	r3, #0
 800e846:	f43f ae12 	beq.w	800e46e <_strtod_l+0x7e>
 800e84a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e84c:	4658      	mov	r0, fp
 800e84e:	f001 f893 	bl	800f978 <_Bfree>
 800e852:	9906      	ldr	r1, [sp, #24]
 800e854:	4658      	mov	r0, fp
 800e856:	f001 f88f 	bl	800f978 <_Bfree>
 800e85a:	9904      	ldr	r1, [sp, #16]
 800e85c:	4658      	mov	r0, fp
 800e85e:	f001 f88b 	bl	800f978 <_Bfree>
 800e862:	9908      	ldr	r1, [sp, #32]
 800e864:	4658      	mov	r0, fp
 800e866:	f001 f887 	bl	800f978 <_Bfree>
 800e86a:	4641      	mov	r1, r8
 800e86c:	4658      	mov	r0, fp
 800e86e:	f001 f883 	bl	800f978 <_Bfree>
 800e872:	e5fc      	b.n	800e46e <_strtod_l+0x7e>
 800e874:	9a07      	ldr	r2, [sp, #28]
 800e876:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e87a:	4293      	cmp	r3, r2
 800e87c:	dbb6      	blt.n	800e7ec <_strtod_l+0x3fc>
 800e87e:	4d44      	ldr	r5, [pc, #272]	; (800e990 <_strtod_l+0x5a0>)
 800e880:	f1c4 040f 	rsb	r4, r4, #15
 800e884:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e888:	464a      	mov	r2, r9
 800e88a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e88e:	4653      	mov	r3, sl
 800e890:	f7f6 fe98 	bl	80055c4 <__aeabi_dmul>
 800e894:	9b07      	ldr	r3, [sp, #28]
 800e896:	1b1c      	subs	r4, r3, r4
 800e898:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e89c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8a0:	e789      	b.n	800e7b6 <_strtod_l+0x3c6>
 800e8a2:	f113 0f16 	cmn.w	r3, #22
 800e8a6:	dba1      	blt.n	800e7ec <_strtod_l+0x3fc>
 800e8a8:	4a39      	ldr	r2, [pc, #228]	; (800e990 <_strtod_l+0x5a0>)
 800e8aa:	4648      	mov	r0, r9
 800e8ac:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800e8b0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e8b4:	4651      	mov	r1, sl
 800e8b6:	f7f6 ffaf 	bl	8005818 <__aeabi_ddiv>
 800e8ba:	e77e      	b.n	800e7ba <_strtod_l+0x3ca>
 800e8bc:	2300      	movs	r3, #0
 800e8be:	4648      	mov	r0, r9
 800e8c0:	4651      	mov	r1, sl
 800e8c2:	461d      	mov	r5, r3
 800e8c4:	4e33      	ldr	r6, [pc, #204]	; (800e994 <_strtod_l+0x5a4>)
 800e8c6:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e8ca:	f1b8 0f01 	cmp.w	r8, #1
 800e8ce:	dc21      	bgt.n	800e914 <_strtod_l+0x524>
 800e8d0:	b10b      	cbz	r3, 800e8d6 <_strtod_l+0x4e6>
 800e8d2:	4681      	mov	r9, r0
 800e8d4:	468a      	mov	sl, r1
 800e8d6:	4b2f      	ldr	r3, [pc, #188]	; (800e994 <_strtod_l+0x5a4>)
 800e8d8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800e8dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e8e0:	464a      	mov	r2, r9
 800e8e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e8e6:	4653      	mov	r3, sl
 800e8e8:	f7f6 fe6c 	bl	80055c4 <__aeabi_dmul>
 800e8ec:	4b2a      	ldr	r3, [pc, #168]	; (800e998 <_strtod_l+0x5a8>)
 800e8ee:	460a      	mov	r2, r1
 800e8f0:	400b      	ands	r3, r1
 800e8f2:	492a      	ldr	r1, [pc, #168]	; (800e99c <_strtod_l+0x5ac>)
 800e8f4:	4681      	mov	r9, r0
 800e8f6:	428b      	cmp	r3, r1
 800e8f8:	d894      	bhi.n	800e824 <_strtod_l+0x434>
 800e8fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e8fe:	428b      	cmp	r3, r1
 800e900:	bf86      	itte	hi
 800e902:	f04f 39ff 	movhi.w	r9, #4294967295
 800e906:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800e9a4 <_strtod_l+0x5b4>
 800e90a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800e90e:	2300      	movs	r3, #0
 800e910:	9305      	str	r3, [sp, #20]
 800e912:	e07b      	b.n	800ea0c <_strtod_l+0x61c>
 800e914:	f018 0f01 	tst.w	r8, #1
 800e918:	d006      	beq.n	800e928 <_strtod_l+0x538>
 800e91a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800e91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e922:	f7f6 fe4f 	bl	80055c4 <__aeabi_dmul>
 800e926:	2301      	movs	r3, #1
 800e928:	3501      	adds	r5, #1
 800e92a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e92e:	e7cc      	b.n	800e8ca <_strtod_l+0x4da>
 800e930:	d0ed      	beq.n	800e90e <_strtod_l+0x51e>
 800e932:	f1c8 0800 	rsb	r8, r8, #0
 800e936:	f018 020f 	ands.w	r2, r8, #15
 800e93a:	d00a      	beq.n	800e952 <_strtod_l+0x562>
 800e93c:	4b14      	ldr	r3, [pc, #80]	; (800e990 <_strtod_l+0x5a0>)
 800e93e:	4648      	mov	r0, r9
 800e940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e944:	4651      	mov	r1, sl
 800e946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94a:	f7f6 ff65 	bl	8005818 <__aeabi_ddiv>
 800e94e:	4681      	mov	r9, r0
 800e950:	468a      	mov	sl, r1
 800e952:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e956:	d0da      	beq.n	800e90e <_strtod_l+0x51e>
 800e958:	f1b8 0f1f 	cmp.w	r8, #31
 800e95c:	dd24      	ble.n	800e9a8 <_strtod_l+0x5b8>
 800e95e:	f04f 0800 	mov.w	r8, #0
 800e962:	f8cd 8010 	str.w	r8, [sp, #16]
 800e966:	f8cd 8020 	str.w	r8, [sp, #32]
 800e96a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e96e:	2322      	movs	r3, #34	; 0x22
 800e970:	f04f 0900 	mov.w	r9, #0
 800e974:	f04f 0a00 	mov.w	sl, #0
 800e978:	f8cb 3000 	str.w	r3, [fp]
 800e97c:	e761      	b.n	800e842 <_strtod_l+0x452>
 800e97e:	bf00      	nop
 800e980:	08010b80 	.word	0x08010b80
 800e984:	08010b83 	.word	0x08010b83
 800e988:	08010b89 	.word	0x08010b89
 800e98c:	08010ba0 	.word	0x08010ba0
 800e990:	08010c18 	.word	0x08010c18
 800e994:	08010bf0 	.word	0x08010bf0
 800e998:	7ff00000 	.word	0x7ff00000
 800e99c:	7ca00000 	.word	0x7ca00000
 800e9a0:	fff80000 	.word	0xfff80000
 800e9a4:	7fefffff 	.word	0x7fefffff
 800e9a8:	f018 0310 	ands.w	r3, r8, #16
 800e9ac:	bf18      	it	ne
 800e9ae:	236a      	movne	r3, #106	; 0x6a
 800e9b0:	4648      	mov	r0, r9
 800e9b2:	9305      	str	r3, [sp, #20]
 800e9b4:	4651      	mov	r1, sl
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	4da1      	ldr	r5, [pc, #644]	; (800ec40 <_strtod_l+0x850>)
 800e9ba:	f1b8 0f00 	cmp.w	r8, #0
 800e9be:	f300 8113 	bgt.w	800ebe8 <_strtod_l+0x7f8>
 800e9c2:	b10b      	cbz	r3, 800e9c8 <_strtod_l+0x5d8>
 800e9c4:	4681      	mov	r9, r0
 800e9c6:	468a      	mov	sl, r1
 800e9c8:	9b05      	ldr	r3, [sp, #20]
 800e9ca:	b1bb      	cbz	r3, 800e9fc <_strtod_l+0x60c>
 800e9cc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800e9d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	4651      	mov	r1, sl
 800e9d8:	dd10      	ble.n	800e9fc <_strtod_l+0x60c>
 800e9da:	2b1f      	cmp	r3, #31
 800e9dc:	f340 8110 	ble.w	800ec00 <_strtod_l+0x810>
 800e9e0:	2b34      	cmp	r3, #52	; 0x34
 800e9e2:	bfd8      	it	le
 800e9e4:	f04f 32ff 	movle.w	r2, #4294967295
 800e9e8:	f04f 0900 	mov.w	r9, #0
 800e9ec:	bfcf      	iteee	gt
 800e9ee:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800e9f2:	3b20      	suble	r3, #32
 800e9f4:	fa02 f303 	lslle.w	r3, r2, r3
 800e9f8:	ea03 0a01 	andle.w	sl, r3, r1
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	2300      	movs	r3, #0
 800ea00:	4648      	mov	r0, r9
 800ea02:	4651      	mov	r1, sl
 800ea04:	f7f7 f846 	bl	8005a94 <__aeabi_dcmpeq>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	d1a8      	bne.n	800e95e <_strtod_l+0x56e>
 800ea0c:	9b06      	ldr	r3, [sp, #24]
 800ea0e:	9a04      	ldr	r2, [sp, #16]
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	9908      	ldr	r1, [sp, #32]
 800ea14:	4623      	mov	r3, r4
 800ea16:	4658      	mov	r0, fp
 800ea18:	f001 f800 	bl	800fa1c <__s2b>
 800ea1c:	9008      	str	r0, [sp, #32]
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	f43f af00 	beq.w	800e824 <_strtod_l+0x434>
 800ea24:	9a07      	ldr	r2, [sp, #28]
 800ea26:	9b07      	ldr	r3, [sp, #28]
 800ea28:	2a00      	cmp	r2, #0
 800ea2a:	f1c3 0300 	rsb	r3, r3, #0
 800ea2e:	bfa8      	it	ge
 800ea30:	2300      	movge	r3, #0
 800ea32:	f04f 0800 	mov.w	r8, #0
 800ea36:	930e      	str	r3, [sp, #56]	; 0x38
 800ea38:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ea3c:	9316      	str	r3, [sp, #88]	; 0x58
 800ea3e:	f8cd 8010 	str.w	r8, [sp, #16]
 800ea42:	9b08      	ldr	r3, [sp, #32]
 800ea44:	4658      	mov	r0, fp
 800ea46:	6859      	ldr	r1, [r3, #4]
 800ea48:	f000 ff62 	bl	800f910 <_Balloc>
 800ea4c:	9006      	str	r0, [sp, #24]
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	f43f aef0 	beq.w	800e834 <_strtod_l+0x444>
 800ea54:	9b08      	ldr	r3, [sp, #32]
 800ea56:	300c      	adds	r0, #12
 800ea58:	691a      	ldr	r2, [r3, #16]
 800ea5a:	f103 010c 	add.w	r1, r3, #12
 800ea5e:	3202      	adds	r2, #2
 800ea60:	0092      	lsls	r2, r2, #2
 800ea62:	f000 ff4a 	bl	800f8fa <memcpy>
 800ea66:	ab1e      	add	r3, sp, #120	; 0x78
 800ea68:	9301      	str	r3, [sp, #4]
 800ea6a:	ab1d      	add	r3, sp, #116	; 0x74
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	464a      	mov	r2, r9
 800ea70:	4653      	mov	r3, sl
 800ea72:	4658      	mov	r0, fp
 800ea74:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800ea78:	f001 fa8a 	bl	800ff90 <__d2b>
 800ea7c:	901c      	str	r0, [sp, #112]	; 0x70
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	f43f aed8 	beq.w	800e834 <_strtod_l+0x444>
 800ea84:	2101      	movs	r1, #1
 800ea86:	4658      	mov	r0, fp
 800ea88:	f001 f854 	bl	800fb34 <__i2b>
 800ea8c:	9004      	str	r0, [sp, #16]
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2800      	cmp	r0, #0
 800ea92:	f43f aecf 	beq.w	800e834 <_strtod_l+0x444>
 800ea96:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ea98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ea9a:	2d00      	cmp	r5, #0
 800ea9c:	bfab      	itete	ge
 800ea9e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800eaa0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800eaa2:	18ee      	addge	r6, r5, r3
 800eaa4:	1b5c      	sublt	r4, r3, r5
 800eaa6:	9b05      	ldr	r3, [sp, #20]
 800eaa8:	bfa8      	it	ge
 800eaaa:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800eaac:	eba5 0503 	sub.w	r5, r5, r3
 800eab0:	4415      	add	r5, r2
 800eab2:	4b64      	ldr	r3, [pc, #400]	; (800ec44 <_strtod_l+0x854>)
 800eab4:	f105 35ff 	add.w	r5, r5, #4294967295
 800eab8:	bfb8      	it	lt
 800eaba:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800eabc:	429d      	cmp	r5, r3
 800eabe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eac2:	f280 80af 	bge.w	800ec24 <_strtod_l+0x834>
 800eac6:	1b5b      	subs	r3, r3, r5
 800eac8:	2b1f      	cmp	r3, #31
 800eaca:	eba2 0203 	sub.w	r2, r2, r3
 800eace:	f04f 0701 	mov.w	r7, #1
 800ead2:	f300 809c 	bgt.w	800ec0e <_strtod_l+0x81e>
 800ead6:	2500      	movs	r5, #0
 800ead8:	fa07 f303 	lsl.w	r3, r7, r3
 800eadc:	930f      	str	r3, [sp, #60]	; 0x3c
 800eade:	18b7      	adds	r7, r6, r2
 800eae0:	9b05      	ldr	r3, [sp, #20]
 800eae2:	42be      	cmp	r6, r7
 800eae4:	4414      	add	r4, r2
 800eae6:	441c      	add	r4, r3
 800eae8:	4633      	mov	r3, r6
 800eaea:	bfa8      	it	ge
 800eaec:	463b      	movge	r3, r7
 800eaee:	42a3      	cmp	r3, r4
 800eaf0:	bfa8      	it	ge
 800eaf2:	4623      	movge	r3, r4
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	bfc2      	ittt	gt
 800eaf8:	1aff      	subgt	r7, r7, r3
 800eafa:	1ae4      	subgt	r4, r4, r3
 800eafc:	1af6      	subgt	r6, r6, r3
 800eafe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb00:	b1bb      	cbz	r3, 800eb32 <_strtod_l+0x742>
 800eb02:	461a      	mov	r2, r3
 800eb04:	9904      	ldr	r1, [sp, #16]
 800eb06:	4658      	mov	r0, fp
 800eb08:	f001 f8b2 	bl	800fc70 <__pow5mult>
 800eb0c:	9004      	str	r0, [sp, #16]
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	f43f ae90 	beq.w	800e834 <_strtod_l+0x444>
 800eb14:	4601      	mov	r1, r0
 800eb16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800eb18:	4658      	mov	r0, fp
 800eb1a:	f001 f814 	bl	800fb46 <__multiply>
 800eb1e:	9009      	str	r0, [sp, #36]	; 0x24
 800eb20:	2800      	cmp	r0, #0
 800eb22:	f43f ae87 	beq.w	800e834 <_strtod_l+0x444>
 800eb26:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eb28:	4658      	mov	r0, fp
 800eb2a:	f000 ff25 	bl	800f978 <_Bfree>
 800eb2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb30:	931c      	str	r3, [sp, #112]	; 0x70
 800eb32:	2f00      	cmp	r7, #0
 800eb34:	dc7a      	bgt.n	800ec2c <_strtod_l+0x83c>
 800eb36:	9b07      	ldr	r3, [sp, #28]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	dd08      	ble.n	800eb4e <_strtod_l+0x75e>
 800eb3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eb3e:	9906      	ldr	r1, [sp, #24]
 800eb40:	4658      	mov	r0, fp
 800eb42:	f001 f895 	bl	800fc70 <__pow5mult>
 800eb46:	9006      	str	r0, [sp, #24]
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	f43f ae73 	beq.w	800e834 <_strtod_l+0x444>
 800eb4e:	2c00      	cmp	r4, #0
 800eb50:	dd08      	ble.n	800eb64 <_strtod_l+0x774>
 800eb52:	4622      	mov	r2, r4
 800eb54:	9906      	ldr	r1, [sp, #24]
 800eb56:	4658      	mov	r0, fp
 800eb58:	f001 f8d8 	bl	800fd0c <__lshift>
 800eb5c:	9006      	str	r0, [sp, #24]
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	f43f ae68 	beq.w	800e834 <_strtod_l+0x444>
 800eb64:	2e00      	cmp	r6, #0
 800eb66:	dd08      	ble.n	800eb7a <_strtod_l+0x78a>
 800eb68:	4632      	mov	r2, r6
 800eb6a:	9904      	ldr	r1, [sp, #16]
 800eb6c:	4658      	mov	r0, fp
 800eb6e:	f001 f8cd 	bl	800fd0c <__lshift>
 800eb72:	9004      	str	r0, [sp, #16]
 800eb74:	2800      	cmp	r0, #0
 800eb76:	f43f ae5d 	beq.w	800e834 <_strtod_l+0x444>
 800eb7a:	9a06      	ldr	r2, [sp, #24]
 800eb7c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eb7e:	4658      	mov	r0, fp
 800eb80:	f001 f932 	bl	800fde8 <__mdiff>
 800eb84:	4680      	mov	r8, r0
 800eb86:	2800      	cmp	r0, #0
 800eb88:	f43f ae54 	beq.w	800e834 <_strtod_l+0x444>
 800eb8c:	2400      	movs	r4, #0
 800eb8e:	68c3      	ldr	r3, [r0, #12]
 800eb90:	9904      	ldr	r1, [sp, #16]
 800eb92:	60c4      	str	r4, [r0, #12]
 800eb94:	930c      	str	r3, [sp, #48]	; 0x30
 800eb96:	f001 f90d 	bl	800fdb4 <__mcmp>
 800eb9a:	42a0      	cmp	r0, r4
 800eb9c:	da54      	bge.n	800ec48 <_strtod_l+0x858>
 800eb9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eba0:	b9f3      	cbnz	r3, 800ebe0 <_strtod_l+0x7f0>
 800eba2:	f1b9 0f00 	cmp.w	r9, #0
 800eba6:	d11b      	bne.n	800ebe0 <_strtod_l+0x7f0>
 800eba8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ebac:	b9c3      	cbnz	r3, 800ebe0 <_strtod_l+0x7f0>
 800ebae:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ebb2:	0d1b      	lsrs	r3, r3, #20
 800ebb4:	051b      	lsls	r3, r3, #20
 800ebb6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ebba:	d911      	bls.n	800ebe0 <_strtod_l+0x7f0>
 800ebbc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ebc0:	b91b      	cbnz	r3, 800ebca <_strtod_l+0x7da>
 800ebc2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ebc6:	2b01      	cmp	r3, #1
 800ebc8:	dd0a      	ble.n	800ebe0 <_strtod_l+0x7f0>
 800ebca:	4641      	mov	r1, r8
 800ebcc:	2201      	movs	r2, #1
 800ebce:	4658      	mov	r0, fp
 800ebd0:	f001 f89c 	bl	800fd0c <__lshift>
 800ebd4:	9904      	ldr	r1, [sp, #16]
 800ebd6:	4680      	mov	r8, r0
 800ebd8:	f001 f8ec 	bl	800fdb4 <__mcmp>
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	dc68      	bgt.n	800ecb2 <_strtod_l+0x8c2>
 800ebe0:	9b05      	ldr	r3, [sp, #20]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d172      	bne.n	800eccc <_strtod_l+0x8dc>
 800ebe6:	e630      	b.n	800e84a <_strtod_l+0x45a>
 800ebe8:	f018 0f01 	tst.w	r8, #1
 800ebec:	d004      	beq.n	800ebf8 <_strtod_l+0x808>
 800ebee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ebf2:	f7f6 fce7 	bl	80055c4 <__aeabi_dmul>
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ebfc:	3508      	adds	r5, #8
 800ebfe:	e6dc      	b.n	800e9ba <_strtod_l+0x5ca>
 800ec00:	f04f 32ff 	mov.w	r2, #4294967295
 800ec04:	fa02 f303 	lsl.w	r3, r2, r3
 800ec08:	ea03 0909 	and.w	r9, r3, r9
 800ec0c:	e6f6      	b.n	800e9fc <_strtod_l+0x60c>
 800ec0e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ec12:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ec16:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ec1a:	35e2      	adds	r5, #226	; 0xe2
 800ec1c:	fa07 f505 	lsl.w	r5, r7, r5
 800ec20:	970f      	str	r7, [sp, #60]	; 0x3c
 800ec22:	e75c      	b.n	800eade <_strtod_l+0x6ee>
 800ec24:	2301      	movs	r3, #1
 800ec26:	2500      	movs	r5, #0
 800ec28:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec2a:	e758      	b.n	800eade <_strtod_l+0x6ee>
 800ec2c:	463a      	mov	r2, r7
 800ec2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ec30:	4658      	mov	r0, fp
 800ec32:	f001 f86b 	bl	800fd0c <__lshift>
 800ec36:	901c      	str	r0, [sp, #112]	; 0x70
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	f47f af7c 	bne.w	800eb36 <_strtod_l+0x746>
 800ec3e:	e5f9      	b.n	800e834 <_strtod_l+0x444>
 800ec40:	08010bb8 	.word	0x08010bb8
 800ec44:	fffffc02 	.word	0xfffffc02
 800ec48:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ec4c:	f040 8089 	bne.w	800ed62 <_strtod_l+0x972>
 800ec50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec52:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ec56:	b342      	cbz	r2, 800ecaa <_strtod_l+0x8ba>
 800ec58:	4aaf      	ldr	r2, [pc, #700]	; (800ef18 <_strtod_l+0xb28>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d156      	bne.n	800ed0c <_strtod_l+0x91c>
 800ec5e:	9b05      	ldr	r3, [sp, #20]
 800ec60:	4648      	mov	r0, r9
 800ec62:	b1eb      	cbz	r3, 800eca0 <_strtod_l+0x8b0>
 800ec64:	4653      	mov	r3, sl
 800ec66:	4aad      	ldr	r2, [pc, #692]	; (800ef1c <_strtod_l+0xb2c>)
 800ec68:	f04f 31ff 	mov.w	r1, #4294967295
 800ec6c:	401a      	ands	r2, r3
 800ec6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ec72:	d818      	bhi.n	800eca6 <_strtod_l+0x8b6>
 800ec74:	0d12      	lsrs	r2, r2, #20
 800ec76:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ec7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ec7e:	4298      	cmp	r0, r3
 800ec80:	d144      	bne.n	800ed0c <_strtod_l+0x91c>
 800ec82:	4ba7      	ldr	r3, [pc, #668]	; (800ef20 <_strtod_l+0xb30>)
 800ec84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d102      	bne.n	800ec90 <_strtod_l+0x8a0>
 800ec8a:	3001      	adds	r0, #1
 800ec8c:	f43f add2 	beq.w	800e834 <_strtod_l+0x444>
 800ec90:	4ba2      	ldr	r3, [pc, #648]	; (800ef1c <_strtod_l+0xb2c>)
 800ec92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec94:	f04f 0900 	mov.w	r9, #0
 800ec98:	401a      	ands	r2, r3
 800ec9a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800ec9e:	e79f      	b.n	800ebe0 <_strtod_l+0x7f0>
 800eca0:	f04f 33ff 	mov.w	r3, #4294967295
 800eca4:	e7eb      	b.n	800ec7e <_strtod_l+0x88e>
 800eca6:	460b      	mov	r3, r1
 800eca8:	e7e9      	b.n	800ec7e <_strtod_l+0x88e>
 800ecaa:	bb7b      	cbnz	r3, 800ed0c <_strtod_l+0x91c>
 800ecac:	f1b9 0f00 	cmp.w	r9, #0
 800ecb0:	d12c      	bne.n	800ed0c <_strtod_l+0x91c>
 800ecb2:	9905      	ldr	r1, [sp, #20]
 800ecb4:	4653      	mov	r3, sl
 800ecb6:	4a99      	ldr	r2, [pc, #612]	; (800ef1c <_strtod_l+0xb2c>)
 800ecb8:	b1f1      	cbz	r1, 800ecf8 <_strtod_l+0x908>
 800ecba:	ea02 010a 	and.w	r1, r2, sl
 800ecbe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ecc2:	dc19      	bgt.n	800ecf8 <_strtod_l+0x908>
 800ecc4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ecc8:	f77f ae51 	ble.w	800e96e <_strtod_l+0x57e>
 800eccc:	2300      	movs	r3, #0
 800ecce:	4a95      	ldr	r2, [pc, #596]	; (800ef24 <_strtod_l+0xb34>)
 800ecd0:	4648      	mov	r0, r9
 800ecd2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ecd6:	4651      	mov	r1, sl
 800ecd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ecdc:	f7f6 fc72 	bl	80055c4 <__aeabi_dmul>
 800ece0:	4681      	mov	r9, r0
 800ece2:	468a      	mov	sl, r1
 800ece4:	2900      	cmp	r1, #0
 800ece6:	f47f adb0 	bne.w	800e84a <_strtod_l+0x45a>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	f47f adad 	bne.w	800e84a <_strtod_l+0x45a>
 800ecf0:	2322      	movs	r3, #34	; 0x22
 800ecf2:	f8cb 3000 	str.w	r3, [fp]
 800ecf6:	e5a8      	b.n	800e84a <_strtod_l+0x45a>
 800ecf8:	4013      	ands	r3, r2
 800ecfa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ecfe:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800ed02:	f04f 39ff 	mov.w	r9, #4294967295
 800ed06:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800ed0a:	e769      	b.n	800ebe0 <_strtod_l+0x7f0>
 800ed0c:	b19d      	cbz	r5, 800ed36 <_strtod_l+0x946>
 800ed0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed10:	421d      	tst	r5, r3
 800ed12:	f43f af65 	beq.w	800ebe0 <_strtod_l+0x7f0>
 800ed16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed18:	9a05      	ldr	r2, [sp, #20]
 800ed1a:	4648      	mov	r0, r9
 800ed1c:	4651      	mov	r1, sl
 800ed1e:	b173      	cbz	r3, 800ed3e <_strtod_l+0x94e>
 800ed20:	f7ff fb44 	bl	800e3ac <sulp>
 800ed24:	4602      	mov	r2, r0
 800ed26:	460b      	mov	r3, r1
 800ed28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ed2c:	f7f6 fa94 	bl	8005258 <__adddf3>
 800ed30:	4681      	mov	r9, r0
 800ed32:	468a      	mov	sl, r1
 800ed34:	e754      	b.n	800ebe0 <_strtod_l+0x7f0>
 800ed36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed38:	ea13 0f09 	tst.w	r3, r9
 800ed3c:	e7e9      	b.n	800ed12 <_strtod_l+0x922>
 800ed3e:	f7ff fb35 	bl	800e3ac <sulp>
 800ed42:	4602      	mov	r2, r0
 800ed44:	460b      	mov	r3, r1
 800ed46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ed4a:	f7f6 fa83 	bl	8005254 <__aeabi_dsub>
 800ed4e:	2200      	movs	r2, #0
 800ed50:	2300      	movs	r3, #0
 800ed52:	4681      	mov	r9, r0
 800ed54:	468a      	mov	sl, r1
 800ed56:	f7f6 fe9d 	bl	8005a94 <__aeabi_dcmpeq>
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	f47f ae07 	bne.w	800e96e <_strtod_l+0x57e>
 800ed60:	e73e      	b.n	800ebe0 <_strtod_l+0x7f0>
 800ed62:	9904      	ldr	r1, [sp, #16]
 800ed64:	4640      	mov	r0, r8
 800ed66:	f001 f962 	bl	801002e <__ratio>
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed70:	4606      	mov	r6, r0
 800ed72:	460f      	mov	r7, r1
 800ed74:	f7f6 fea2 	bl	8005abc <__aeabi_dcmple>
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d075      	beq.n	800ee68 <_strtod_l+0xa78>
 800ed7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d047      	beq.n	800ee12 <_strtod_l+0xa22>
 800ed82:	2600      	movs	r6, #0
 800ed84:	4f68      	ldr	r7, [pc, #416]	; (800ef28 <_strtod_l+0xb38>)
 800ed86:	4d68      	ldr	r5, [pc, #416]	; (800ef28 <_strtod_l+0xb38>)
 800ed88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed8e:	0d1b      	lsrs	r3, r3, #20
 800ed90:	051b      	lsls	r3, r3, #20
 800ed92:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed96:	4b65      	ldr	r3, [pc, #404]	; (800ef2c <_strtod_l+0xb3c>)
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	f040 80cf 	bne.w	800ef3c <_strtod_l+0xb4c>
 800ed9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eda2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800eda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eda8:	4648      	mov	r0, r9
 800edaa:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800edae:	4651      	mov	r1, sl
 800edb0:	f001 f878 	bl	800fea4 <__ulp>
 800edb4:	4602      	mov	r2, r0
 800edb6:	460b      	mov	r3, r1
 800edb8:	4630      	mov	r0, r6
 800edba:	4639      	mov	r1, r7
 800edbc:	f7f6 fc02 	bl	80055c4 <__aeabi_dmul>
 800edc0:	464a      	mov	r2, r9
 800edc2:	4653      	mov	r3, sl
 800edc4:	f7f6 fa48 	bl	8005258 <__adddf3>
 800edc8:	460b      	mov	r3, r1
 800edca:	4954      	ldr	r1, [pc, #336]	; (800ef1c <_strtod_l+0xb2c>)
 800edcc:	4a58      	ldr	r2, [pc, #352]	; (800ef30 <_strtod_l+0xb40>)
 800edce:	4019      	ands	r1, r3
 800edd0:	4291      	cmp	r1, r2
 800edd2:	4681      	mov	r9, r0
 800edd4:	d95e      	bls.n	800ee94 <_strtod_l+0xaa4>
 800edd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edd8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800eddc:	4293      	cmp	r3, r2
 800edde:	d103      	bne.n	800ede8 <_strtod_l+0x9f8>
 800ede0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ede2:	3301      	adds	r3, #1
 800ede4:	f43f ad26 	beq.w	800e834 <_strtod_l+0x444>
 800ede8:	f04f 39ff 	mov.w	r9, #4294967295
 800edec:	f8df a130 	ldr.w	sl, [pc, #304]	; 800ef20 <_strtod_l+0xb30>
 800edf0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800edf2:	4658      	mov	r0, fp
 800edf4:	f000 fdc0 	bl	800f978 <_Bfree>
 800edf8:	9906      	ldr	r1, [sp, #24]
 800edfa:	4658      	mov	r0, fp
 800edfc:	f000 fdbc 	bl	800f978 <_Bfree>
 800ee00:	9904      	ldr	r1, [sp, #16]
 800ee02:	4658      	mov	r0, fp
 800ee04:	f000 fdb8 	bl	800f978 <_Bfree>
 800ee08:	4641      	mov	r1, r8
 800ee0a:	4658      	mov	r0, fp
 800ee0c:	f000 fdb4 	bl	800f978 <_Bfree>
 800ee10:	e617      	b.n	800ea42 <_strtod_l+0x652>
 800ee12:	f1b9 0f00 	cmp.w	r9, #0
 800ee16:	d119      	bne.n	800ee4c <_strtod_l+0xa5c>
 800ee18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee1e:	b9e3      	cbnz	r3, 800ee5a <_strtod_l+0xa6a>
 800ee20:	2200      	movs	r2, #0
 800ee22:	4b41      	ldr	r3, [pc, #260]	; (800ef28 <_strtod_l+0xb38>)
 800ee24:	4630      	mov	r0, r6
 800ee26:	4639      	mov	r1, r7
 800ee28:	f7f6 fe3e 	bl	8005aa8 <__aeabi_dcmplt>
 800ee2c:	b9c8      	cbnz	r0, 800ee62 <_strtod_l+0xa72>
 800ee2e:	2200      	movs	r2, #0
 800ee30:	4b40      	ldr	r3, [pc, #256]	; (800ef34 <_strtod_l+0xb44>)
 800ee32:	4630      	mov	r0, r6
 800ee34:	4639      	mov	r1, r7
 800ee36:	f7f6 fbc5 	bl	80055c4 <__aeabi_dmul>
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	460d      	mov	r5, r1
 800ee3e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ee42:	9418      	str	r4, [sp, #96]	; 0x60
 800ee44:	9319      	str	r3, [sp, #100]	; 0x64
 800ee46:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ee4a:	e79d      	b.n	800ed88 <_strtod_l+0x998>
 800ee4c:	f1b9 0f01 	cmp.w	r9, #1
 800ee50:	d103      	bne.n	800ee5a <_strtod_l+0xa6a>
 800ee52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f43f ad8a 	beq.w	800e96e <_strtod_l+0x57e>
 800ee5a:	2600      	movs	r6, #0
 800ee5c:	4f36      	ldr	r7, [pc, #216]	; (800ef38 <_strtod_l+0xb48>)
 800ee5e:	2400      	movs	r4, #0
 800ee60:	e791      	b.n	800ed86 <_strtod_l+0x996>
 800ee62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ee64:	4d33      	ldr	r5, [pc, #204]	; (800ef34 <_strtod_l+0xb44>)
 800ee66:	e7ea      	b.n	800ee3e <_strtod_l+0xa4e>
 800ee68:	4b32      	ldr	r3, [pc, #200]	; (800ef34 <_strtod_l+0xb44>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	4639      	mov	r1, r7
 800ee70:	f7f6 fba8 	bl	80055c4 <__aeabi_dmul>
 800ee74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee76:	4604      	mov	r4, r0
 800ee78:	460d      	mov	r5, r1
 800ee7a:	b933      	cbnz	r3, 800ee8a <_strtod_l+0xa9a>
 800ee7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee80:	9010      	str	r0, [sp, #64]	; 0x40
 800ee82:	9311      	str	r3, [sp, #68]	; 0x44
 800ee84:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ee88:	e77e      	b.n	800ed88 <_strtod_l+0x998>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ee92:	e7f7      	b.n	800ee84 <_strtod_l+0xa94>
 800ee94:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800ee98:	9b05      	ldr	r3, [sp, #20]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1a8      	bne.n	800edf0 <_strtod_l+0xa00>
 800ee9e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800eea2:	0d1b      	lsrs	r3, r3, #20
 800eea4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eea6:	051b      	lsls	r3, r3, #20
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	4656      	mov	r6, sl
 800eeac:	d1a0      	bne.n	800edf0 <_strtod_l+0xa00>
 800eeae:	4629      	mov	r1, r5
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f7f6 fe37 	bl	8005b24 <__aeabi_d2iz>
 800eeb6:	f7f6 fb1b 	bl	80054f0 <__aeabi_i2d>
 800eeba:	460b      	mov	r3, r1
 800eebc:	4602      	mov	r2, r0
 800eebe:	4629      	mov	r1, r5
 800eec0:	4620      	mov	r0, r4
 800eec2:	f7f6 f9c7 	bl	8005254 <__aeabi_dsub>
 800eec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eec8:	4604      	mov	r4, r0
 800eeca:	460d      	mov	r5, r1
 800eecc:	b933      	cbnz	r3, 800eedc <_strtod_l+0xaec>
 800eece:	f1b9 0f00 	cmp.w	r9, #0
 800eed2:	d103      	bne.n	800eedc <_strtod_l+0xaec>
 800eed4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800eed8:	2e00      	cmp	r6, #0
 800eeda:	d06a      	beq.n	800efb2 <_strtod_l+0xbc2>
 800eedc:	a30a      	add	r3, pc, #40	; (adr r3, 800ef08 <_strtod_l+0xb18>)
 800eede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee2:	4620      	mov	r0, r4
 800eee4:	4629      	mov	r1, r5
 800eee6:	f7f6 fddf 	bl	8005aa8 <__aeabi_dcmplt>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	f47f acad 	bne.w	800e84a <_strtod_l+0x45a>
 800eef0:	a307      	add	r3, pc, #28	; (adr r3, 800ef10 <_strtod_l+0xb20>)
 800eef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef6:	4620      	mov	r0, r4
 800eef8:	4629      	mov	r1, r5
 800eefa:	f7f6 fdf3 	bl	8005ae4 <__aeabi_dcmpgt>
 800eefe:	2800      	cmp	r0, #0
 800ef00:	f43f af76 	beq.w	800edf0 <_strtod_l+0xa00>
 800ef04:	e4a1      	b.n	800e84a <_strtod_l+0x45a>
 800ef06:	bf00      	nop
 800ef08:	94a03595 	.word	0x94a03595
 800ef0c:	3fdfffff 	.word	0x3fdfffff
 800ef10:	35afe535 	.word	0x35afe535
 800ef14:	3fe00000 	.word	0x3fe00000
 800ef18:	000fffff 	.word	0x000fffff
 800ef1c:	7ff00000 	.word	0x7ff00000
 800ef20:	7fefffff 	.word	0x7fefffff
 800ef24:	39500000 	.word	0x39500000
 800ef28:	3ff00000 	.word	0x3ff00000
 800ef2c:	7fe00000 	.word	0x7fe00000
 800ef30:	7c9fffff 	.word	0x7c9fffff
 800ef34:	3fe00000 	.word	0x3fe00000
 800ef38:	bff00000 	.word	0xbff00000
 800ef3c:	9b05      	ldr	r3, [sp, #20]
 800ef3e:	b313      	cbz	r3, 800ef86 <_strtod_l+0xb96>
 800ef40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ef46:	d81e      	bhi.n	800ef86 <_strtod_l+0xb96>
 800ef48:	a325      	add	r3, pc, #148	; (adr r3, 800efe0 <_strtod_l+0xbf0>)
 800ef4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4e:	4620      	mov	r0, r4
 800ef50:	4629      	mov	r1, r5
 800ef52:	f7f6 fdb3 	bl	8005abc <__aeabi_dcmple>
 800ef56:	b190      	cbz	r0, 800ef7e <_strtod_l+0xb8e>
 800ef58:	4629      	mov	r1, r5
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	f7f6 fe0a 	bl	8005b74 <__aeabi_d2uiz>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	bf08      	it	eq
 800ef64:	2001      	moveq	r0, #1
 800ef66:	f7f6 fab3 	bl	80054d0 <__aeabi_ui2d>
 800ef6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	460d      	mov	r5, r1
 800ef70:	b9d3      	cbnz	r3, 800efa8 <_strtod_l+0xbb8>
 800ef72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef76:	9012      	str	r0, [sp, #72]	; 0x48
 800ef78:	9313      	str	r3, [sp, #76]	; 0x4c
 800ef7a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800ef7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef80:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800ef84:	1a9f      	subs	r7, r3, r2
 800ef86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef8a:	f000 ff8b 	bl	800fea4 <__ulp>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	460b      	mov	r3, r1
 800ef92:	4630      	mov	r0, r6
 800ef94:	4639      	mov	r1, r7
 800ef96:	f7f6 fb15 	bl	80055c4 <__aeabi_dmul>
 800ef9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ef9e:	f7f6 f95b 	bl	8005258 <__adddf3>
 800efa2:	4681      	mov	r9, r0
 800efa4:	468a      	mov	sl, r1
 800efa6:	e777      	b.n	800ee98 <_strtod_l+0xaa8>
 800efa8:	4602      	mov	r2, r0
 800efaa:	460b      	mov	r3, r1
 800efac:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800efb0:	e7e3      	b.n	800ef7a <_strtod_l+0xb8a>
 800efb2:	a30d      	add	r3, pc, #52	; (adr r3, 800efe8 <_strtod_l+0xbf8>)
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	f7f6 fd76 	bl	8005aa8 <__aeabi_dcmplt>
 800efbc:	e79f      	b.n	800eefe <_strtod_l+0xb0e>
 800efbe:	2300      	movs	r3, #0
 800efc0:	930d      	str	r3, [sp, #52]	; 0x34
 800efc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800efc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800efc6:	6013      	str	r3, [r2, #0]
 800efc8:	f7ff ba55 	b.w	800e476 <_strtod_l+0x86>
 800efcc:	2b65      	cmp	r3, #101	; 0x65
 800efce:	f04f 0200 	mov.w	r2, #0
 800efd2:	f43f ab42 	beq.w	800e65a <_strtod_l+0x26a>
 800efd6:	2101      	movs	r1, #1
 800efd8:	4614      	mov	r4, r2
 800efda:	9105      	str	r1, [sp, #20]
 800efdc:	f7ff babf 	b.w	800e55e <_strtod_l+0x16e>
 800efe0:	ffc00000 	.word	0xffc00000
 800efe4:	41dfffff 	.word	0x41dfffff
 800efe8:	94a03595 	.word	0x94a03595
 800efec:	3fcfffff 	.word	0x3fcfffff

0800eff0 <strtof>:
 800eff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff4:	4e21      	ldr	r6, [pc, #132]	; (800f07c <strtof+0x8c>)
 800eff6:	4a22      	ldr	r2, [pc, #136]	; (800f080 <strtof+0x90>)
 800eff8:	6834      	ldr	r4, [r6, #0]
 800effa:	6a23      	ldr	r3, [r4, #32]
 800effc:	2b00      	cmp	r3, #0
 800effe:	bf08      	it	eq
 800f000:	4613      	moveq	r3, r2
 800f002:	460a      	mov	r2, r1
 800f004:	4601      	mov	r1, r0
 800f006:	4620      	mov	r0, r4
 800f008:	f7ff f9f2 	bl	800e3f0 <_strtod_l>
 800f00c:	4605      	mov	r5, r0
 800f00e:	460c      	mov	r4, r1
 800f010:	4602      	mov	r2, r0
 800f012:	460b      	mov	r3, r1
 800f014:	4628      	mov	r0, r5
 800f016:	4621      	mov	r1, r4
 800f018:	f7f6 fd6e 	bl	8005af8 <__aeabi_dcmpun>
 800f01c:	b120      	cbz	r0, 800f028 <strtof+0x38>
 800f01e:	2000      	movs	r0, #0
 800f020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f024:	f001 bbbe 	b.w	80107a4 <nanf>
 800f028:	4621      	mov	r1, r4
 800f02a:	4628      	mov	r0, r5
 800f02c:	f7f6 fdc2 	bl	8005bb4 <__aeabi_d2f>
 800f030:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800f034:	4607      	mov	r7, r0
 800f036:	4913      	ldr	r1, [pc, #76]	; (800f084 <strtof+0x94>)
 800f038:	4640      	mov	r0, r8
 800f03a:	f7f6 fe81 	bl	8005d40 <__aeabi_fcmpun>
 800f03e:	b9c8      	cbnz	r0, 800f074 <strtof+0x84>
 800f040:	4910      	ldr	r1, [pc, #64]	; (800f084 <strtof+0x94>)
 800f042:	4640      	mov	r0, r8
 800f044:	f7f6 fe5e 	bl	8005d04 <__aeabi_fcmple>
 800f048:	b9a0      	cbnz	r0, 800f074 <strtof+0x84>
 800f04a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f04e:	f04f 32ff 	mov.w	r2, #4294967295
 800f052:	4b0d      	ldr	r3, [pc, #52]	; (800f088 <strtof+0x98>)
 800f054:	4628      	mov	r0, r5
 800f056:	4621      	mov	r1, r4
 800f058:	f7f6 fd4e 	bl	8005af8 <__aeabi_dcmpun>
 800f05c:	b938      	cbnz	r0, 800f06e <strtof+0x7e>
 800f05e:	f04f 32ff 	mov.w	r2, #4294967295
 800f062:	4b09      	ldr	r3, [pc, #36]	; (800f088 <strtof+0x98>)
 800f064:	4628      	mov	r0, r5
 800f066:	4621      	mov	r1, r4
 800f068:	f7f6 fd28 	bl	8005abc <__aeabi_dcmple>
 800f06c:	b110      	cbz	r0, 800f074 <strtof+0x84>
 800f06e:	2222      	movs	r2, #34	; 0x22
 800f070:	6833      	ldr	r3, [r6, #0]
 800f072:	601a      	str	r2, [r3, #0]
 800f074:	4638      	mov	r0, r7
 800f076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f07a:	bf00      	nop
 800f07c:	200001a4 	.word	0x200001a4
 800f080:	20000208 	.word	0x20000208
 800f084:	7f7fffff 	.word	0x7f7fffff
 800f088:	7fefffff 	.word	0x7fefffff

0800f08c <__strtok_r>:
 800f08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f08e:	b918      	cbnz	r0, 800f098 <__strtok_r+0xc>
 800f090:	6810      	ldr	r0, [r2, #0]
 800f092:	b908      	cbnz	r0, 800f098 <__strtok_r+0xc>
 800f094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f096:	4620      	mov	r0, r4
 800f098:	4604      	mov	r4, r0
 800f09a:	460f      	mov	r7, r1
 800f09c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f0a0:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f0a4:	b91e      	cbnz	r6, 800f0ae <__strtok_r+0x22>
 800f0a6:	b96d      	cbnz	r5, 800f0c4 <__strtok_r+0x38>
 800f0a8:	6015      	str	r5, [r2, #0]
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	e7f2      	b.n	800f094 <__strtok_r+0x8>
 800f0ae:	42b5      	cmp	r5, r6
 800f0b0:	d1f6      	bne.n	800f0a0 <__strtok_r+0x14>
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1ef      	bne.n	800f096 <__strtok_r+0xa>
 800f0b6:	6014      	str	r4, [r2, #0]
 800f0b8:	7003      	strb	r3, [r0, #0]
 800f0ba:	e7eb      	b.n	800f094 <__strtok_r+0x8>
 800f0bc:	462b      	mov	r3, r5
 800f0be:	e00d      	b.n	800f0dc <__strtok_r+0x50>
 800f0c0:	b926      	cbnz	r6, 800f0cc <__strtok_r+0x40>
 800f0c2:	461c      	mov	r4, r3
 800f0c4:	4623      	mov	r3, r4
 800f0c6:	460f      	mov	r7, r1
 800f0c8:	f813 5b01 	ldrb.w	r5, [r3], #1
 800f0cc:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f0d0:	42b5      	cmp	r5, r6
 800f0d2:	d1f5      	bne.n	800f0c0 <__strtok_r+0x34>
 800f0d4:	2d00      	cmp	r5, #0
 800f0d6:	d0f1      	beq.n	800f0bc <__strtok_r+0x30>
 800f0d8:	2100      	movs	r1, #0
 800f0da:	7021      	strb	r1, [r4, #0]
 800f0dc:	6013      	str	r3, [r2, #0]
 800f0de:	e7d9      	b.n	800f094 <__strtok_r+0x8>

0800f0e0 <strtok_r>:
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	f7ff bfd3 	b.w	800f08c <__strtok_r>

0800f0e6 <_strtoul_l.isra.0>:
 800f0e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0ea:	4680      	mov	r8, r0
 800f0ec:	4689      	mov	r9, r1
 800f0ee:	4692      	mov	sl, r2
 800f0f0:	461e      	mov	r6, r3
 800f0f2:	460f      	mov	r7, r1
 800f0f4:	463d      	mov	r5, r7
 800f0f6:	9808      	ldr	r0, [sp, #32]
 800f0f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0fc:	f000 fbe6 	bl	800f8cc <__locale_ctype_ptr_l>
 800f100:	4420      	add	r0, r4
 800f102:	7843      	ldrb	r3, [r0, #1]
 800f104:	f013 0308 	ands.w	r3, r3, #8
 800f108:	d130      	bne.n	800f16c <_strtoul_l.isra.0+0x86>
 800f10a:	2c2d      	cmp	r4, #45	; 0x2d
 800f10c:	d130      	bne.n	800f170 <_strtoul_l.isra.0+0x8a>
 800f10e:	2101      	movs	r1, #1
 800f110:	787c      	ldrb	r4, [r7, #1]
 800f112:	1cbd      	adds	r5, r7, #2
 800f114:	2e00      	cmp	r6, #0
 800f116:	d05c      	beq.n	800f1d2 <_strtoul_l.isra.0+0xec>
 800f118:	2e10      	cmp	r6, #16
 800f11a:	d109      	bne.n	800f130 <_strtoul_l.isra.0+0x4a>
 800f11c:	2c30      	cmp	r4, #48	; 0x30
 800f11e:	d107      	bne.n	800f130 <_strtoul_l.isra.0+0x4a>
 800f120:	782b      	ldrb	r3, [r5, #0]
 800f122:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f126:	2b58      	cmp	r3, #88	; 0x58
 800f128:	d14e      	bne.n	800f1c8 <_strtoul_l.isra.0+0xe2>
 800f12a:	2610      	movs	r6, #16
 800f12c:	786c      	ldrb	r4, [r5, #1]
 800f12e:	3502      	adds	r5, #2
 800f130:	f04f 32ff 	mov.w	r2, #4294967295
 800f134:	fbb2 f2f6 	udiv	r2, r2, r6
 800f138:	2300      	movs	r3, #0
 800f13a:	fb06 fc02 	mul.w	ip, r6, r2
 800f13e:	4618      	mov	r0, r3
 800f140:	ea6f 0c0c 	mvn.w	ip, ip
 800f144:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f148:	2f09      	cmp	r7, #9
 800f14a:	d817      	bhi.n	800f17c <_strtoul_l.isra.0+0x96>
 800f14c:	463c      	mov	r4, r7
 800f14e:	42a6      	cmp	r6, r4
 800f150:	dd23      	ble.n	800f19a <_strtoul_l.isra.0+0xb4>
 800f152:	2b00      	cmp	r3, #0
 800f154:	db1e      	blt.n	800f194 <_strtoul_l.isra.0+0xae>
 800f156:	4282      	cmp	r2, r0
 800f158:	d31c      	bcc.n	800f194 <_strtoul_l.isra.0+0xae>
 800f15a:	d101      	bne.n	800f160 <_strtoul_l.isra.0+0x7a>
 800f15c:	45a4      	cmp	ip, r4
 800f15e:	db19      	blt.n	800f194 <_strtoul_l.isra.0+0xae>
 800f160:	2301      	movs	r3, #1
 800f162:	fb00 4006 	mla	r0, r0, r6, r4
 800f166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f16a:	e7eb      	b.n	800f144 <_strtoul_l.isra.0+0x5e>
 800f16c:	462f      	mov	r7, r5
 800f16e:	e7c1      	b.n	800f0f4 <_strtoul_l.isra.0+0xe>
 800f170:	2c2b      	cmp	r4, #43	; 0x2b
 800f172:	bf04      	itt	eq
 800f174:	1cbd      	addeq	r5, r7, #2
 800f176:	787c      	ldrbeq	r4, [r7, #1]
 800f178:	4619      	mov	r1, r3
 800f17a:	e7cb      	b.n	800f114 <_strtoul_l.isra.0+0x2e>
 800f17c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f180:	2f19      	cmp	r7, #25
 800f182:	d801      	bhi.n	800f188 <_strtoul_l.isra.0+0xa2>
 800f184:	3c37      	subs	r4, #55	; 0x37
 800f186:	e7e2      	b.n	800f14e <_strtoul_l.isra.0+0x68>
 800f188:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f18c:	2f19      	cmp	r7, #25
 800f18e:	d804      	bhi.n	800f19a <_strtoul_l.isra.0+0xb4>
 800f190:	3c57      	subs	r4, #87	; 0x57
 800f192:	e7dc      	b.n	800f14e <_strtoul_l.isra.0+0x68>
 800f194:	f04f 33ff 	mov.w	r3, #4294967295
 800f198:	e7e5      	b.n	800f166 <_strtoul_l.isra.0+0x80>
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	da09      	bge.n	800f1b2 <_strtoul_l.isra.0+0xcc>
 800f19e:	2322      	movs	r3, #34	; 0x22
 800f1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a4:	f8c8 3000 	str.w	r3, [r8]
 800f1a8:	f1ba 0f00 	cmp.w	sl, #0
 800f1ac:	d107      	bne.n	800f1be <_strtoul_l.isra.0+0xd8>
 800f1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b2:	b101      	cbz	r1, 800f1b6 <_strtoul_l.isra.0+0xd0>
 800f1b4:	4240      	negs	r0, r0
 800f1b6:	f1ba 0f00 	cmp.w	sl, #0
 800f1ba:	d0f8      	beq.n	800f1ae <_strtoul_l.isra.0+0xc8>
 800f1bc:	b10b      	cbz	r3, 800f1c2 <_strtoul_l.isra.0+0xdc>
 800f1be:	f105 39ff 	add.w	r9, r5, #4294967295
 800f1c2:	f8ca 9000 	str.w	r9, [sl]
 800f1c6:	e7f2      	b.n	800f1ae <_strtoul_l.isra.0+0xc8>
 800f1c8:	2430      	movs	r4, #48	; 0x30
 800f1ca:	2e00      	cmp	r6, #0
 800f1cc:	d1b0      	bne.n	800f130 <_strtoul_l.isra.0+0x4a>
 800f1ce:	2608      	movs	r6, #8
 800f1d0:	e7ae      	b.n	800f130 <_strtoul_l.isra.0+0x4a>
 800f1d2:	2c30      	cmp	r4, #48	; 0x30
 800f1d4:	d0a4      	beq.n	800f120 <_strtoul_l.isra.0+0x3a>
 800f1d6:	260a      	movs	r6, #10
 800f1d8:	e7aa      	b.n	800f130 <_strtoul_l.isra.0+0x4a>
	...

0800f1dc <strtoul>:
 800f1dc:	4b08      	ldr	r3, [pc, #32]	; (800f200 <strtoul+0x24>)
 800f1de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1e0:	681c      	ldr	r4, [r3, #0]
 800f1e2:	4d08      	ldr	r5, [pc, #32]	; (800f204 <strtoul+0x28>)
 800f1e4:	6a23      	ldr	r3, [r4, #32]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	bf08      	it	eq
 800f1ea:	462b      	moveq	r3, r5
 800f1ec:	9300      	str	r3, [sp, #0]
 800f1ee:	4613      	mov	r3, r2
 800f1f0:	460a      	mov	r2, r1
 800f1f2:	4601      	mov	r1, r0
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	f7ff ff76 	bl	800f0e6 <_strtoul_l.isra.0>
 800f1fa:	b003      	add	sp, #12
 800f1fc:	bd30      	pop	{r4, r5, pc}
 800f1fe:	bf00      	nop
 800f200:	200001a4 	.word	0x200001a4
 800f204:	20000208 	.word	0x20000208

0800f208 <_vsniprintf_r>:
 800f208:	b530      	push	{r4, r5, lr}
 800f20a:	1e14      	subs	r4, r2, #0
 800f20c:	4605      	mov	r5, r0
 800f20e:	b09b      	sub	sp, #108	; 0x6c
 800f210:	4618      	mov	r0, r3
 800f212:	da05      	bge.n	800f220 <_vsniprintf_r+0x18>
 800f214:	238b      	movs	r3, #139	; 0x8b
 800f216:	f04f 30ff 	mov.w	r0, #4294967295
 800f21a:	602b      	str	r3, [r5, #0]
 800f21c:	b01b      	add	sp, #108	; 0x6c
 800f21e:	bd30      	pop	{r4, r5, pc}
 800f220:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f224:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f228:	bf0c      	ite	eq
 800f22a:	4623      	moveq	r3, r4
 800f22c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f230:	9302      	str	r3, [sp, #8]
 800f232:	9305      	str	r3, [sp, #20]
 800f234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f238:	9100      	str	r1, [sp, #0]
 800f23a:	9104      	str	r1, [sp, #16]
 800f23c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f240:	4602      	mov	r2, r0
 800f242:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f244:	4669      	mov	r1, sp
 800f246:	4628      	mov	r0, r5
 800f248:	f001 f81c 	bl	8010284 <_svfiprintf_r>
 800f24c:	1c43      	adds	r3, r0, #1
 800f24e:	bfbc      	itt	lt
 800f250:	238b      	movlt	r3, #139	; 0x8b
 800f252:	602b      	strlt	r3, [r5, #0]
 800f254:	2c00      	cmp	r4, #0
 800f256:	d0e1      	beq.n	800f21c <_vsniprintf_r+0x14>
 800f258:	2200      	movs	r2, #0
 800f25a:	9b00      	ldr	r3, [sp, #0]
 800f25c:	701a      	strb	r2, [r3, #0]
 800f25e:	e7dd      	b.n	800f21c <_vsniprintf_r+0x14>

0800f260 <vsniprintf>:
 800f260:	b507      	push	{r0, r1, r2, lr}
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	4613      	mov	r3, r2
 800f266:	460a      	mov	r2, r1
 800f268:	4601      	mov	r1, r0
 800f26a:	4803      	ldr	r0, [pc, #12]	; (800f278 <vsniprintf+0x18>)
 800f26c:	6800      	ldr	r0, [r0, #0]
 800f26e:	f7ff ffcb 	bl	800f208 <_vsniprintf_r>
 800f272:	b003      	add	sp, #12
 800f274:	f85d fb04 	ldr.w	pc, [sp], #4
 800f278:	200001a4 	.word	0x200001a4

0800f27c <rshift>:
 800f27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f27e:	6906      	ldr	r6, [r0, #16]
 800f280:	114b      	asrs	r3, r1, #5
 800f282:	429e      	cmp	r6, r3
 800f284:	f100 0414 	add.w	r4, r0, #20
 800f288:	dd31      	ble.n	800f2ee <rshift+0x72>
 800f28a:	f011 011f 	ands.w	r1, r1, #31
 800f28e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f292:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f296:	d108      	bne.n	800f2aa <rshift+0x2e>
 800f298:	4621      	mov	r1, r4
 800f29a:	42b2      	cmp	r2, r6
 800f29c:	460b      	mov	r3, r1
 800f29e:	d211      	bcs.n	800f2c4 <rshift+0x48>
 800f2a0:	f852 3b04 	ldr.w	r3, [r2], #4
 800f2a4:	f841 3b04 	str.w	r3, [r1], #4
 800f2a8:	e7f7      	b.n	800f29a <rshift+0x1e>
 800f2aa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800f2ae:	4623      	mov	r3, r4
 800f2b0:	f1c1 0c20 	rsb	ip, r1, #32
 800f2b4:	40cd      	lsrs	r5, r1
 800f2b6:	3204      	adds	r2, #4
 800f2b8:	42b2      	cmp	r2, r6
 800f2ba:	4617      	mov	r7, r2
 800f2bc:	d30d      	bcc.n	800f2da <rshift+0x5e>
 800f2be:	601d      	str	r5, [r3, #0]
 800f2c0:	b105      	cbz	r5, 800f2c4 <rshift+0x48>
 800f2c2:	3304      	adds	r3, #4
 800f2c4:	42a3      	cmp	r3, r4
 800f2c6:	eba3 0204 	sub.w	r2, r3, r4
 800f2ca:	bf08      	it	eq
 800f2cc:	2300      	moveq	r3, #0
 800f2ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f2d2:	6102      	str	r2, [r0, #16]
 800f2d4:	bf08      	it	eq
 800f2d6:	6143      	streq	r3, [r0, #20]
 800f2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2da:	683f      	ldr	r7, [r7, #0]
 800f2dc:	fa07 f70c 	lsl.w	r7, r7, ip
 800f2e0:	433d      	orrs	r5, r7
 800f2e2:	f843 5b04 	str.w	r5, [r3], #4
 800f2e6:	f852 5b04 	ldr.w	r5, [r2], #4
 800f2ea:	40cd      	lsrs	r5, r1
 800f2ec:	e7e4      	b.n	800f2b8 <rshift+0x3c>
 800f2ee:	4623      	mov	r3, r4
 800f2f0:	e7e8      	b.n	800f2c4 <rshift+0x48>

0800f2f2 <__hexdig_fun>:
 800f2f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f2f6:	2b09      	cmp	r3, #9
 800f2f8:	d802      	bhi.n	800f300 <__hexdig_fun+0xe>
 800f2fa:	3820      	subs	r0, #32
 800f2fc:	b2c0      	uxtb	r0, r0
 800f2fe:	4770      	bx	lr
 800f300:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f304:	2b05      	cmp	r3, #5
 800f306:	d801      	bhi.n	800f30c <__hexdig_fun+0x1a>
 800f308:	3847      	subs	r0, #71	; 0x47
 800f30a:	e7f7      	b.n	800f2fc <__hexdig_fun+0xa>
 800f30c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f310:	2b05      	cmp	r3, #5
 800f312:	d801      	bhi.n	800f318 <__hexdig_fun+0x26>
 800f314:	3827      	subs	r0, #39	; 0x27
 800f316:	e7f1      	b.n	800f2fc <__hexdig_fun+0xa>
 800f318:	2000      	movs	r0, #0
 800f31a:	4770      	bx	lr

0800f31c <__gethex>:
 800f31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f320:	b08b      	sub	sp, #44	; 0x2c
 800f322:	9002      	str	r0, [sp, #8]
 800f324:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f326:	468a      	mov	sl, r1
 800f328:	4690      	mov	r8, r2
 800f32a:	9306      	str	r3, [sp, #24]
 800f32c:	f000 fad1 	bl	800f8d2 <__localeconv_l>
 800f330:	6803      	ldr	r3, [r0, #0]
 800f332:	f04f 0b00 	mov.w	fp, #0
 800f336:	4618      	mov	r0, r3
 800f338:	9303      	str	r3, [sp, #12]
 800f33a:	f7f5 ff7f 	bl	800523c <strlen>
 800f33e:	9b03      	ldr	r3, [sp, #12]
 800f340:	9001      	str	r0, [sp, #4]
 800f342:	4403      	add	r3, r0
 800f344:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f348:	9307      	str	r3, [sp, #28]
 800f34a:	f8da 3000 	ldr.w	r3, [sl]
 800f34e:	3302      	adds	r3, #2
 800f350:	461f      	mov	r7, r3
 800f352:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f356:	2830      	cmp	r0, #48	; 0x30
 800f358:	d06c      	beq.n	800f434 <__gethex+0x118>
 800f35a:	f7ff ffca 	bl	800f2f2 <__hexdig_fun>
 800f35e:	4604      	mov	r4, r0
 800f360:	2800      	cmp	r0, #0
 800f362:	d16a      	bne.n	800f43a <__gethex+0x11e>
 800f364:	9a01      	ldr	r2, [sp, #4]
 800f366:	9903      	ldr	r1, [sp, #12]
 800f368:	4638      	mov	r0, r7
 800f36a:	f001 fa1f 	bl	80107ac <strncmp>
 800f36e:	2800      	cmp	r0, #0
 800f370:	d166      	bne.n	800f440 <__gethex+0x124>
 800f372:	9b01      	ldr	r3, [sp, #4]
 800f374:	5cf8      	ldrb	r0, [r7, r3]
 800f376:	18fe      	adds	r6, r7, r3
 800f378:	f7ff ffbb 	bl	800f2f2 <__hexdig_fun>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d062      	beq.n	800f446 <__gethex+0x12a>
 800f380:	4633      	mov	r3, r6
 800f382:	7818      	ldrb	r0, [r3, #0]
 800f384:	461f      	mov	r7, r3
 800f386:	2830      	cmp	r0, #48	; 0x30
 800f388:	f103 0301 	add.w	r3, r3, #1
 800f38c:	d0f9      	beq.n	800f382 <__gethex+0x66>
 800f38e:	f7ff ffb0 	bl	800f2f2 <__hexdig_fun>
 800f392:	fab0 f580 	clz	r5, r0
 800f396:	4634      	mov	r4, r6
 800f398:	f04f 0b01 	mov.w	fp, #1
 800f39c:	096d      	lsrs	r5, r5, #5
 800f39e:	463a      	mov	r2, r7
 800f3a0:	4616      	mov	r6, r2
 800f3a2:	7830      	ldrb	r0, [r6, #0]
 800f3a4:	3201      	adds	r2, #1
 800f3a6:	f7ff ffa4 	bl	800f2f2 <__hexdig_fun>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d1f8      	bne.n	800f3a0 <__gethex+0x84>
 800f3ae:	9a01      	ldr	r2, [sp, #4]
 800f3b0:	9903      	ldr	r1, [sp, #12]
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	f001 f9fa 	bl	80107ac <strncmp>
 800f3b8:	b950      	cbnz	r0, 800f3d0 <__gethex+0xb4>
 800f3ba:	b954      	cbnz	r4, 800f3d2 <__gethex+0xb6>
 800f3bc:	9b01      	ldr	r3, [sp, #4]
 800f3be:	18f4      	adds	r4, r6, r3
 800f3c0:	4622      	mov	r2, r4
 800f3c2:	4616      	mov	r6, r2
 800f3c4:	7830      	ldrb	r0, [r6, #0]
 800f3c6:	3201      	adds	r2, #1
 800f3c8:	f7ff ff93 	bl	800f2f2 <__hexdig_fun>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d1f8      	bne.n	800f3c2 <__gethex+0xa6>
 800f3d0:	b10c      	cbz	r4, 800f3d6 <__gethex+0xba>
 800f3d2:	1ba4      	subs	r4, r4, r6
 800f3d4:	00a4      	lsls	r4, r4, #2
 800f3d6:	7833      	ldrb	r3, [r6, #0]
 800f3d8:	2b50      	cmp	r3, #80	; 0x50
 800f3da:	d001      	beq.n	800f3e0 <__gethex+0xc4>
 800f3dc:	2b70      	cmp	r3, #112	; 0x70
 800f3de:	d140      	bne.n	800f462 <__gethex+0x146>
 800f3e0:	7873      	ldrb	r3, [r6, #1]
 800f3e2:	2b2b      	cmp	r3, #43	; 0x2b
 800f3e4:	d031      	beq.n	800f44a <__gethex+0x12e>
 800f3e6:	2b2d      	cmp	r3, #45	; 0x2d
 800f3e8:	d033      	beq.n	800f452 <__gethex+0x136>
 800f3ea:	f04f 0900 	mov.w	r9, #0
 800f3ee:	1c71      	adds	r1, r6, #1
 800f3f0:	7808      	ldrb	r0, [r1, #0]
 800f3f2:	f7ff ff7e 	bl	800f2f2 <__hexdig_fun>
 800f3f6:	1e43      	subs	r3, r0, #1
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	2b18      	cmp	r3, #24
 800f3fc:	d831      	bhi.n	800f462 <__gethex+0x146>
 800f3fe:	f1a0 0210 	sub.w	r2, r0, #16
 800f402:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f406:	f7ff ff74 	bl	800f2f2 <__hexdig_fun>
 800f40a:	1e43      	subs	r3, r0, #1
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	2b18      	cmp	r3, #24
 800f410:	d922      	bls.n	800f458 <__gethex+0x13c>
 800f412:	f1b9 0f00 	cmp.w	r9, #0
 800f416:	d000      	beq.n	800f41a <__gethex+0xfe>
 800f418:	4252      	negs	r2, r2
 800f41a:	4414      	add	r4, r2
 800f41c:	f8ca 1000 	str.w	r1, [sl]
 800f420:	b30d      	cbz	r5, 800f466 <__gethex+0x14a>
 800f422:	f1bb 0f00 	cmp.w	fp, #0
 800f426:	bf0c      	ite	eq
 800f428:	2706      	moveq	r7, #6
 800f42a:	2700      	movne	r7, #0
 800f42c:	4638      	mov	r0, r7
 800f42e:	b00b      	add	sp, #44	; 0x2c
 800f430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f434:	f10b 0b01 	add.w	fp, fp, #1
 800f438:	e78a      	b.n	800f350 <__gethex+0x34>
 800f43a:	2500      	movs	r5, #0
 800f43c:	462c      	mov	r4, r5
 800f43e:	e7ae      	b.n	800f39e <__gethex+0x82>
 800f440:	463e      	mov	r6, r7
 800f442:	2501      	movs	r5, #1
 800f444:	e7c7      	b.n	800f3d6 <__gethex+0xba>
 800f446:	4604      	mov	r4, r0
 800f448:	e7fb      	b.n	800f442 <__gethex+0x126>
 800f44a:	f04f 0900 	mov.w	r9, #0
 800f44e:	1cb1      	adds	r1, r6, #2
 800f450:	e7ce      	b.n	800f3f0 <__gethex+0xd4>
 800f452:	f04f 0901 	mov.w	r9, #1
 800f456:	e7fa      	b.n	800f44e <__gethex+0x132>
 800f458:	230a      	movs	r3, #10
 800f45a:	fb03 0202 	mla	r2, r3, r2, r0
 800f45e:	3a10      	subs	r2, #16
 800f460:	e7cf      	b.n	800f402 <__gethex+0xe6>
 800f462:	4631      	mov	r1, r6
 800f464:	e7da      	b.n	800f41c <__gethex+0x100>
 800f466:	4629      	mov	r1, r5
 800f468:	1bf3      	subs	r3, r6, r7
 800f46a:	3b01      	subs	r3, #1
 800f46c:	2b07      	cmp	r3, #7
 800f46e:	dc49      	bgt.n	800f504 <__gethex+0x1e8>
 800f470:	9802      	ldr	r0, [sp, #8]
 800f472:	f000 fa4d 	bl	800f910 <_Balloc>
 800f476:	f04f 0b00 	mov.w	fp, #0
 800f47a:	4605      	mov	r5, r0
 800f47c:	46da      	mov	sl, fp
 800f47e:	9b01      	ldr	r3, [sp, #4]
 800f480:	f100 0914 	add.w	r9, r0, #20
 800f484:	f1c3 0301 	rsb	r3, r3, #1
 800f488:	f8cd 9010 	str.w	r9, [sp, #16]
 800f48c:	9308      	str	r3, [sp, #32]
 800f48e:	42b7      	cmp	r7, r6
 800f490:	d33b      	bcc.n	800f50a <__gethex+0x1ee>
 800f492:	9804      	ldr	r0, [sp, #16]
 800f494:	f840 ab04 	str.w	sl, [r0], #4
 800f498:	eba0 0009 	sub.w	r0, r0, r9
 800f49c:	1080      	asrs	r0, r0, #2
 800f49e:	6128      	str	r0, [r5, #16]
 800f4a0:	0147      	lsls	r7, r0, #5
 800f4a2:	4650      	mov	r0, sl
 800f4a4:	f000 faf8 	bl	800fa98 <__hi0bits>
 800f4a8:	f8d8 6000 	ldr.w	r6, [r8]
 800f4ac:	1a3f      	subs	r7, r7, r0
 800f4ae:	42b7      	cmp	r7, r6
 800f4b0:	dd64      	ble.n	800f57c <__gethex+0x260>
 800f4b2:	1bbf      	subs	r7, r7, r6
 800f4b4:	4639      	mov	r1, r7
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f000 fe01 	bl	80100be <__any_on>
 800f4bc:	4682      	mov	sl, r0
 800f4be:	b178      	cbz	r0, 800f4e0 <__gethex+0x1c4>
 800f4c0:	f04f 0a01 	mov.w	sl, #1
 800f4c4:	1e7b      	subs	r3, r7, #1
 800f4c6:	1159      	asrs	r1, r3, #5
 800f4c8:	f003 021f 	and.w	r2, r3, #31
 800f4cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f4d0:	fa0a f202 	lsl.w	r2, sl, r2
 800f4d4:	420a      	tst	r2, r1
 800f4d6:	d003      	beq.n	800f4e0 <__gethex+0x1c4>
 800f4d8:	4553      	cmp	r3, sl
 800f4da:	dc46      	bgt.n	800f56a <__gethex+0x24e>
 800f4dc:	f04f 0a02 	mov.w	sl, #2
 800f4e0:	4639      	mov	r1, r7
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	f7ff feca 	bl	800f27c <rshift>
 800f4e8:	443c      	add	r4, r7
 800f4ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4ee:	42a3      	cmp	r3, r4
 800f4f0:	da52      	bge.n	800f598 <__gethex+0x27c>
 800f4f2:	4629      	mov	r1, r5
 800f4f4:	9802      	ldr	r0, [sp, #8]
 800f4f6:	f000 fa3f 	bl	800f978 <_Bfree>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f4fe:	27a3      	movs	r7, #163	; 0xa3
 800f500:	6013      	str	r3, [r2, #0]
 800f502:	e793      	b.n	800f42c <__gethex+0x110>
 800f504:	3101      	adds	r1, #1
 800f506:	105b      	asrs	r3, r3, #1
 800f508:	e7b0      	b.n	800f46c <__gethex+0x150>
 800f50a:	1e73      	subs	r3, r6, #1
 800f50c:	9305      	str	r3, [sp, #20]
 800f50e:	9a07      	ldr	r2, [sp, #28]
 800f510:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f514:	4293      	cmp	r3, r2
 800f516:	d018      	beq.n	800f54a <__gethex+0x22e>
 800f518:	f1bb 0f20 	cmp.w	fp, #32
 800f51c:	d107      	bne.n	800f52e <__gethex+0x212>
 800f51e:	9b04      	ldr	r3, [sp, #16]
 800f520:	f8c3 a000 	str.w	sl, [r3]
 800f524:	f04f 0a00 	mov.w	sl, #0
 800f528:	46d3      	mov	fp, sl
 800f52a:	3304      	adds	r3, #4
 800f52c:	9304      	str	r3, [sp, #16]
 800f52e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f532:	f7ff fede 	bl	800f2f2 <__hexdig_fun>
 800f536:	f000 000f 	and.w	r0, r0, #15
 800f53a:	fa00 f00b 	lsl.w	r0, r0, fp
 800f53e:	ea4a 0a00 	orr.w	sl, sl, r0
 800f542:	f10b 0b04 	add.w	fp, fp, #4
 800f546:	9b05      	ldr	r3, [sp, #20]
 800f548:	e00d      	b.n	800f566 <__gethex+0x24a>
 800f54a:	9b05      	ldr	r3, [sp, #20]
 800f54c:	9a08      	ldr	r2, [sp, #32]
 800f54e:	4413      	add	r3, r2
 800f550:	42bb      	cmp	r3, r7
 800f552:	d3e1      	bcc.n	800f518 <__gethex+0x1fc>
 800f554:	4618      	mov	r0, r3
 800f556:	9a01      	ldr	r2, [sp, #4]
 800f558:	9903      	ldr	r1, [sp, #12]
 800f55a:	9309      	str	r3, [sp, #36]	; 0x24
 800f55c:	f001 f926 	bl	80107ac <strncmp>
 800f560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f562:	2800      	cmp	r0, #0
 800f564:	d1d8      	bne.n	800f518 <__gethex+0x1fc>
 800f566:	461e      	mov	r6, r3
 800f568:	e791      	b.n	800f48e <__gethex+0x172>
 800f56a:	1eb9      	subs	r1, r7, #2
 800f56c:	4628      	mov	r0, r5
 800f56e:	f000 fda6 	bl	80100be <__any_on>
 800f572:	2800      	cmp	r0, #0
 800f574:	d0b2      	beq.n	800f4dc <__gethex+0x1c0>
 800f576:	f04f 0a03 	mov.w	sl, #3
 800f57a:	e7b1      	b.n	800f4e0 <__gethex+0x1c4>
 800f57c:	da09      	bge.n	800f592 <__gethex+0x276>
 800f57e:	1bf7      	subs	r7, r6, r7
 800f580:	4629      	mov	r1, r5
 800f582:	463a      	mov	r2, r7
 800f584:	9802      	ldr	r0, [sp, #8]
 800f586:	f000 fbc1 	bl	800fd0c <__lshift>
 800f58a:	4605      	mov	r5, r0
 800f58c:	1be4      	subs	r4, r4, r7
 800f58e:	f100 0914 	add.w	r9, r0, #20
 800f592:	f04f 0a00 	mov.w	sl, #0
 800f596:	e7a8      	b.n	800f4ea <__gethex+0x1ce>
 800f598:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f59c:	42a0      	cmp	r0, r4
 800f59e:	dd6b      	ble.n	800f678 <__gethex+0x35c>
 800f5a0:	1b04      	subs	r4, r0, r4
 800f5a2:	42a6      	cmp	r6, r4
 800f5a4:	dc2e      	bgt.n	800f604 <__gethex+0x2e8>
 800f5a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5aa:	2b02      	cmp	r3, #2
 800f5ac:	d022      	beq.n	800f5f4 <__gethex+0x2d8>
 800f5ae:	2b03      	cmp	r3, #3
 800f5b0:	d024      	beq.n	800f5fc <__gethex+0x2e0>
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d115      	bne.n	800f5e2 <__gethex+0x2c6>
 800f5b6:	42a6      	cmp	r6, r4
 800f5b8:	d113      	bne.n	800f5e2 <__gethex+0x2c6>
 800f5ba:	2e01      	cmp	r6, #1
 800f5bc:	dc0b      	bgt.n	800f5d6 <__gethex+0x2ba>
 800f5be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f5c2:	9a06      	ldr	r2, [sp, #24]
 800f5c4:	2762      	movs	r7, #98	; 0x62
 800f5c6:	6013      	str	r3, [r2, #0]
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	612b      	str	r3, [r5, #16]
 800f5cc:	f8c9 3000 	str.w	r3, [r9]
 800f5d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f5d2:	601d      	str	r5, [r3, #0]
 800f5d4:	e72a      	b.n	800f42c <__gethex+0x110>
 800f5d6:	1e71      	subs	r1, r6, #1
 800f5d8:	4628      	mov	r0, r5
 800f5da:	f000 fd70 	bl	80100be <__any_on>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d1ed      	bne.n	800f5be <__gethex+0x2a2>
 800f5e2:	4629      	mov	r1, r5
 800f5e4:	9802      	ldr	r0, [sp, #8]
 800f5e6:	f000 f9c7 	bl	800f978 <_Bfree>
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f5ee:	2750      	movs	r7, #80	; 0x50
 800f5f0:	6013      	str	r3, [r2, #0]
 800f5f2:	e71b      	b.n	800f42c <__gethex+0x110>
 800f5f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d0e1      	beq.n	800f5be <__gethex+0x2a2>
 800f5fa:	e7f2      	b.n	800f5e2 <__gethex+0x2c6>
 800f5fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d1dd      	bne.n	800f5be <__gethex+0x2a2>
 800f602:	e7ee      	b.n	800f5e2 <__gethex+0x2c6>
 800f604:	1e67      	subs	r7, r4, #1
 800f606:	f1ba 0f00 	cmp.w	sl, #0
 800f60a:	d132      	bne.n	800f672 <__gethex+0x356>
 800f60c:	b127      	cbz	r7, 800f618 <__gethex+0x2fc>
 800f60e:	4639      	mov	r1, r7
 800f610:	4628      	mov	r0, r5
 800f612:	f000 fd54 	bl	80100be <__any_on>
 800f616:	4682      	mov	sl, r0
 800f618:	2301      	movs	r3, #1
 800f61a:	117a      	asrs	r2, r7, #5
 800f61c:	f007 071f 	and.w	r7, r7, #31
 800f620:	fa03 f707 	lsl.w	r7, r3, r7
 800f624:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f628:	4621      	mov	r1, r4
 800f62a:	421f      	tst	r7, r3
 800f62c:	f04f 0702 	mov.w	r7, #2
 800f630:	4628      	mov	r0, r5
 800f632:	bf18      	it	ne
 800f634:	f04a 0a02 	orrne.w	sl, sl, #2
 800f638:	1b36      	subs	r6, r6, r4
 800f63a:	f7ff fe1f 	bl	800f27c <rshift>
 800f63e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f642:	f1ba 0f00 	cmp.w	sl, #0
 800f646:	d048      	beq.n	800f6da <__gethex+0x3be>
 800f648:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f64c:	2b02      	cmp	r3, #2
 800f64e:	d015      	beq.n	800f67c <__gethex+0x360>
 800f650:	2b03      	cmp	r3, #3
 800f652:	d017      	beq.n	800f684 <__gethex+0x368>
 800f654:	2b01      	cmp	r3, #1
 800f656:	d109      	bne.n	800f66c <__gethex+0x350>
 800f658:	f01a 0f02 	tst.w	sl, #2
 800f65c:	d006      	beq.n	800f66c <__gethex+0x350>
 800f65e:	f8d9 3000 	ldr.w	r3, [r9]
 800f662:	ea4a 0a03 	orr.w	sl, sl, r3
 800f666:	f01a 0f01 	tst.w	sl, #1
 800f66a:	d10e      	bne.n	800f68a <__gethex+0x36e>
 800f66c:	f047 0710 	orr.w	r7, r7, #16
 800f670:	e033      	b.n	800f6da <__gethex+0x3be>
 800f672:	f04f 0a01 	mov.w	sl, #1
 800f676:	e7cf      	b.n	800f618 <__gethex+0x2fc>
 800f678:	2701      	movs	r7, #1
 800f67a:	e7e2      	b.n	800f642 <__gethex+0x326>
 800f67c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f67e:	f1c3 0301 	rsb	r3, r3, #1
 800f682:	9315      	str	r3, [sp, #84]	; 0x54
 800f684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f686:	2b00      	cmp	r3, #0
 800f688:	d0f0      	beq.n	800f66c <__gethex+0x350>
 800f68a:	f04f 0c00 	mov.w	ip, #0
 800f68e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f692:	f105 0314 	add.w	r3, r5, #20
 800f696:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f69a:	eb03 010a 	add.w	r1, r3, sl
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f6a8:	d01c      	beq.n	800f6e4 <__gethex+0x3c8>
 800f6aa:	3201      	adds	r2, #1
 800f6ac:	6002      	str	r2, [r0, #0]
 800f6ae:	2f02      	cmp	r7, #2
 800f6b0:	f105 0314 	add.w	r3, r5, #20
 800f6b4:	d138      	bne.n	800f728 <__gethex+0x40c>
 800f6b6:	f8d8 2000 	ldr.w	r2, [r8]
 800f6ba:	3a01      	subs	r2, #1
 800f6bc:	42b2      	cmp	r2, r6
 800f6be:	d10a      	bne.n	800f6d6 <__gethex+0x3ba>
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	1171      	asrs	r1, r6, #5
 800f6c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f6c8:	f006 061f 	and.w	r6, r6, #31
 800f6cc:	fa02 f606 	lsl.w	r6, r2, r6
 800f6d0:	421e      	tst	r6, r3
 800f6d2:	bf18      	it	ne
 800f6d4:	4617      	movne	r7, r2
 800f6d6:	f047 0720 	orr.w	r7, r7, #32
 800f6da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6dc:	601d      	str	r5, [r3, #0]
 800f6de:	9b06      	ldr	r3, [sp, #24]
 800f6e0:	601c      	str	r4, [r3, #0]
 800f6e2:	e6a3      	b.n	800f42c <__gethex+0x110>
 800f6e4:	4299      	cmp	r1, r3
 800f6e6:	f843 cc04 	str.w	ip, [r3, #-4]
 800f6ea:	d8d8      	bhi.n	800f69e <__gethex+0x382>
 800f6ec:	68ab      	ldr	r3, [r5, #8]
 800f6ee:	4599      	cmp	r9, r3
 800f6f0:	db12      	blt.n	800f718 <__gethex+0x3fc>
 800f6f2:	6869      	ldr	r1, [r5, #4]
 800f6f4:	9802      	ldr	r0, [sp, #8]
 800f6f6:	3101      	adds	r1, #1
 800f6f8:	f000 f90a 	bl	800f910 <_Balloc>
 800f6fc:	4683      	mov	fp, r0
 800f6fe:	692a      	ldr	r2, [r5, #16]
 800f700:	f105 010c 	add.w	r1, r5, #12
 800f704:	3202      	adds	r2, #2
 800f706:	0092      	lsls	r2, r2, #2
 800f708:	300c      	adds	r0, #12
 800f70a:	f000 f8f6 	bl	800f8fa <memcpy>
 800f70e:	4629      	mov	r1, r5
 800f710:	9802      	ldr	r0, [sp, #8]
 800f712:	f000 f931 	bl	800f978 <_Bfree>
 800f716:	465d      	mov	r5, fp
 800f718:	692b      	ldr	r3, [r5, #16]
 800f71a:	1c5a      	adds	r2, r3, #1
 800f71c:	612a      	str	r2, [r5, #16]
 800f71e:	2201      	movs	r2, #1
 800f720:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f724:	615a      	str	r2, [r3, #20]
 800f726:	e7c2      	b.n	800f6ae <__gethex+0x392>
 800f728:	692a      	ldr	r2, [r5, #16]
 800f72a:	454a      	cmp	r2, r9
 800f72c:	dd0b      	ble.n	800f746 <__gethex+0x42a>
 800f72e:	2101      	movs	r1, #1
 800f730:	4628      	mov	r0, r5
 800f732:	f7ff fda3 	bl	800f27c <rshift>
 800f736:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f73a:	3401      	adds	r4, #1
 800f73c:	42a3      	cmp	r3, r4
 800f73e:	f6ff aed8 	blt.w	800f4f2 <__gethex+0x1d6>
 800f742:	2701      	movs	r7, #1
 800f744:	e7c7      	b.n	800f6d6 <__gethex+0x3ba>
 800f746:	f016 061f 	ands.w	r6, r6, #31
 800f74a:	d0fa      	beq.n	800f742 <__gethex+0x426>
 800f74c:	449a      	add	sl, r3
 800f74e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f752:	f000 f9a1 	bl	800fa98 <__hi0bits>
 800f756:	f1c6 0620 	rsb	r6, r6, #32
 800f75a:	42b0      	cmp	r0, r6
 800f75c:	dbe7      	blt.n	800f72e <__gethex+0x412>
 800f75e:	e7f0      	b.n	800f742 <__gethex+0x426>

0800f760 <L_shift>:
 800f760:	f1c2 0208 	rsb	r2, r2, #8
 800f764:	0092      	lsls	r2, r2, #2
 800f766:	b570      	push	{r4, r5, r6, lr}
 800f768:	f1c2 0620 	rsb	r6, r2, #32
 800f76c:	6843      	ldr	r3, [r0, #4]
 800f76e:	6804      	ldr	r4, [r0, #0]
 800f770:	fa03 f506 	lsl.w	r5, r3, r6
 800f774:	432c      	orrs	r4, r5
 800f776:	40d3      	lsrs	r3, r2
 800f778:	6004      	str	r4, [r0, #0]
 800f77a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f77e:	4288      	cmp	r0, r1
 800f780:	d3f4      	bcc.n	800f76c <L_shift+0xc>
 800f782:	bd70      	pop	{r4, r5, r6, pc}

0800f784 <__match>:
 800f784:	b530      	push	{r4, r5, lr}
 800f786:	6803      	ldr	r3, [r0, #0]
 800f788:	3301      	adds	r3, #1
 800f78a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f78e:	b914      	cbnz	r4, 800f796 <__match+0x12>
 800f790:	6003      	str	r3, [r0, #0]
 800f792:	2001      	movs	r0, #1
 800f794:	bd30      	pop	{r4, r5, pc}
 800f796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f79a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f79e:	2d19      	cmp	r5, #25
 800f7a0:	bf98      	it	ls
 800f7a2:	3220      	addls	r2, #32
 800f7a4:	42a2      	cmp	r2, r4
 800f7a6:	d0f0      	beq.n	800f78a <__match+0x6>
 800f7a8:	2000      	movs	r0, #0
 800f7aa:	e7f3      	b.n	800f794 <__match+0x10>

0800f7ac <__hexnan>:
 800f7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b0:	2500      	movs	r5, #0
 800f7b2:	680b      	ldr	r3, [r1, #0]
 800f7b4:	4682      	mov	sl, r0
 800f7b6:	115f      	asrs	r7, r3, #5
 800f7b8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f7bc:	f013 031f 	ands.w	r3, r3, #31
 800f7c0:	bf18      	it	ne
 800f7c2:	3704      	addne	r7, #4
 800f7c4:	1f3e      	subs	r6, r7, #4
 800f7c6:	4690      	mov	r8, r2
 800f7c8:	46b1      	mov	r9, r6
 800f7ca:	4634      	mov	r4, r6
 800f7cc:	46ab      	mov	fp, r5
 800f7ce:	b087      	sub	sp, #28
 800f7d0:	6801      	ldr	r1, [r0, #0]
 800f7d2:	9301      	str	r3, [sp, #4]
 800f7d4:	f847 5c04 	str.w	r5, [r7, #-4]
 800f7d8:	9502      	str	r5, [sp, #8]
 800f7da:	784a      	ldrb	r2, [r1, #1]
 800f7dc:	1c4b      	adds	r3, r1, #1
 800f7de:	9303      	str	r3, [sp, #12]
 800f7e0:	b342      	cbz	r2, 800f834 <__hexnan+0x88>
 800f7e2:	4610      	mov	r0, r2
 800f7e4:	9105      	str	r1, [sp, #20]
 800f7e6:	9204      	str	r2, [sp, #16]
 800f7e8:	f7ff fd83 	bl	800f2f2 <__hexdig_fun>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d143      	bne.n	800f878 <__hexnan+0xcc>
 800f7f0:	9a04      	ldr	r2, [sp, #16]
 800f7f2:	9905      	ldr	r1, [sp, #20]
 800f7f4:	2a20      	cmp	r2, #32
 800f7f6:	d818      	bhi.n	800f82a <__hexnan+0x7e>
 800f7f8:	9b02      	ldr	r3, [sp, #8]
 800f7fa:	459b      	cmp	fp, r3
 800f7fc:	dd13      	ble.n	800f826 <__hexnan+0x7a>
 800f7fe:	454c      	cmp	r4, r9
 800f800:	d206      	bcs.n	800f810 <__hexnan+0x64>
 800f802:	2d07      	cmp	r5, #7
 800f804:	dc04      	bgt.n	800f810 <__hexnan+0x64>
 800f806:	462a      	mov	r2, r5
 800f808:	4649      	mov	r1, r9
 800f80a:	4620      	mov	r0, r4
 800f80c:	f7ff ffa8 	bl	800f760 <L_shift>
 800f810:	4544      	cmp	r4, r8
 800f812:	d944      	bls.n	800f89e <__hexnan+0xf2>
 800f814:	2300      	movs	r3, #0
 800f816:	f1a4 0904 	sub.w	r9, r4, #4
 800f81a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f81e:	461d      	mov	r5, r3
 800f820:	464c      	mov	r4, r9
 800f822:	f8cd b008 	str.w	fp, [sp, #8]
 800f826:	9903      	ldr	r1, [sp, #12]
 800f828:	e7d7      	b.n	800f7da <__hexnan+0x2e>
 800f82a:	2a29      	cmp	r2, #41	; 0x29
 800f82c:	d14a      	bne.n	800f8c4 <__hexnan+0x118>
 800f82e:	3102      	adds	r1, #2
 800f830:	f8ca 1000 	str.w	r1, [sl]
 800f834:	f1bb 0f00 	cmp.w	fp, #0
 800f838:	d044      	beq.n	800f8c4 <__hexnan+0x118>
 800f83a:	454c      	cmp	r4, r9
 800f83c:	d206      	bcs.n	800f84c <__hexnan+0xa0>
 800f83e:	2d07      	cmp	r5, #7
 800f840:	dc04      	bgt.n	800f84c <__hexnan+0xa0>
 800f842:	462a      	mov	r2, r5
 800f844:	4649      	mov	r1, r9
 800f846:	4620      	mov	r0, r4
 800f848:	f7ff ff8a 	bl	800f760 <L_shift>
 800f84c:	4544      	cmp	r4, r8
 800f84e:	d928      	bls.n	800f8a2 <__hexnan+0xf6>
 800f850:	4643      	mov	r3, r8
 800f852:	f854 2b04 	ldr.w	r2, [r4], #4
 800f856:	42a6      	cmp	r6, r4
 800f858:	f843 2b04 	str.w	r2, [r3], #4
 800f85c:	d2f9      	bcs.n	800f852 <__hexnan+0xa6>
 800f85e:	2200      	movs	r2, #0
 800f860:	f843 2b04 	str.w	r2, [r3], #4
 800f864:	429e      	cmp	r6, r3
 800f866:	d2fb      	bcs.n	800f860 <__hexnan+0xb4>
 800f868:	6833      	ldr	r3, [r6, #0]
 800f86a:	b91b      	cbnz	r3, 800f874 <__hexnan+0xc8>
 800f86c:	4546      	cmp	r6, r8
 800f86e:	d127      	bne.n	800f8c0 <__hexnan+0x114>
 800f870:	2301      	movs	r3, #1
 800f872:	6033      	str	r3, [r6, #0]
 800f874:	2005      	movs	r0, #5
 800f876:	e026      	b.n	800f8c6 <__hexnan+0x11a>
 800f878:	3501      	adds	r5, #1
 800f87a:	2d08      	cmp	r5, #8
 800f87c:	f10b 0b01 	add.w	fp, fp, #1
 800f880:	dd06      	ble.n	800f890 <__hexnan+0xe4>
 800f882:	4544      	cmp	r4, r8
 800f884:	d9cf      	bls.n	800f826 <__hexnan+0x7a>
 800f886:	2300      	movs	r3, #0
 800f888:	2501      	movs	r5, #1
 800f88a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f88e:	3c04      	subs	r4, #4
 800f890:	6822      	ldr	r2, [r4, #0]
 800f892:	f000 000f 	and.w	r0, r0, #15
 800f896:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f89a:	6020      	str	r0, [r4, #0]
 800f89c:	e7c3      	b.n	800f826 <__hexnan+0x7a>
 800f89e:	2508      	movs	r5, #8
 800f8a0:	e7c1      	b.n	800f826 <__hexnan+0x7a>
 800f8a2:	9b01      	ldr	r3, [sp, #4]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d0df      	beq.n	800f868 <__hexnan+0xbc>
 800f8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ac:	f1c3 0320 	rsb	r3, r3, #32
 800f8b0:	fa22 f303 	lsr.w	r3, r2, r3
 800f8b4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f8b8:	401a      	ands	r2, r3
 800f8ba:	f847 2c04 	str.w	r2, [r7, #-4]
 800f8be:	e7d3      	b.n	800f868 <__hexnan+0xbc>
 800f8c0:	3e04      	subs	r6, #4
 800f8c2:	e7d1      	b.n	800f868 <__hexnan+0xbc>
 800f8c4:	2004      	movs	r0, #4
 800f8c6:	b007      	add	sp, #28
 800f8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8cc <__locale_ctype_ptr_l>:
 800f8cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f8d0:	4770      	bx	lr

0800f8d2 <__localeconv_l>:
 800f8d2:	30f0      	adds	r0, #240	; 0xf0
 800f8d4:	4770      	bx	lr

0800f8d6 <__ascii_mbtowc>:
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	b901      	cbnz	r1, 800f8dc <__ascii_mbtowc+0x6>
 800f8da:	a901      	add	r1, sp, #4
 800f8dc:	b142      	cbz	r2, 800f8f0 <__ascii_mbtowc+0x1a>
 800f8de:	b14b      	cbz	r3, 800f8f4 <__ascii_mbtowc+0x1e>
 800f8e0:	7813      	ldrb	r3, [r2, #0]
 800f8e2:	600b      	str	r3, [r1, #0]
 800f8e4:	7812      	ldrb	r2, [r2, #0]
 800f8e6:	1c10      	adds	r0, r2, #0
 800f8e8:	bf18      	it	ne
 800f8ea:	2001      	movne	r0, #1
 800f8ec:	b002      	add	sp, #8
 800f8ee:	4770      	bx	lr
 800f8f0:	4610      	mov	r0, r2
 800f8f2:	e7fb      	b.n	800f8ec <__ascii_mbtowc+0x16>
 800f8f4:	f06f 0001 	mvn.w	r0, #1
 800f8f8:	e7f8      	b.n	800f8ec <__ascii_mbtowc+0x16>

0800f8fa <memcpy>:
 800f8fa:	b510      	push	{r4, lr}
 800f8fc:	1e43      	subs	r3, r0, #1
 800f8fe:	440a      	add	r2, r1
 800f900:	4291      	cmp	r1, r2
 800f902:	d100      	bne.n	800f906 <memcpy+0xc>
 800f904:	bd10      	pop	{r4, pc}
 800f906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f90a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f90e:	e7f7      	b.n	800f900 <memcpy+0x6>

0800f910 <_Balloc>:
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f914:	4604      	mov	r4, r0
 800f916:	460e      	mov	r6, r1
 800f918:	b93d      	cbnz	r5, 800f92a <_Balloc+0x1a>
 800f91a:	2010      	movs	r0, #16
 800f91c:	f000 ff66 	bl	80107ec <malloc>
 800f920:	6260      	str	r0, [r4, #36]	; 0x24
 800f922:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f926:	6005      	str	r5, [r0, #0]
 800f928:	60c5      	str	r5, [r0, #12]
 800f92a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f92c:	68eb      	ldr	r3, [r5, #12]
 800f92e:	b183      	cbz	r3, 800f952 <_Balloc+0x42>
 800f930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f938:	b9b8      	cbnz	r0, 800f96a <_Balloc+0x5a>
 800f93a:	2101      	movs	r1, #1
 800f93c:	fa01 f506 	lsl.w	r5, r1, r6
 800f940:	1d6a      	adds	r2, r5, #5
 800f942:	0092      	lsls	r2, r2, #2
 800f944:	4620      	mov	r0, r4
 800f946:	f000 fbdb 	bl	8010100 <_calloc_r>
 800f94a:	b160      	cbz	r0, 800f966 <_Balloc+0x56>
 800f94c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f950:	e00e      	b.n	800f970 <_Balloc+0x60>
 800f952:	2221      	movs	r2, #33	; 0x21
 800f954:	2104      	movs	r1, #4
 800f956:	4620      	mov	r0, r4
 800f958:	f000 fbd2 	bl	8010100 <_calloc_r>
 800f95c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f95e:	60e8      	str	r0, [r5, #12]
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d1e4      	bne.n	800f930 <_Balloc+0x20>
 800f966:	2000      	movs	r0, #0
 800f968:	bd70      	pop	{r4, r5, r6, pc}
 800f96a:	6802      	ldr	r2, [r0, #0]
 800f96c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f970:	2300      	movs	r3, #0
 800f972:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f976:	e7f7      	b.n	800f968 <_Balloc+0x58>

0800f978 <_Bfree>:
 800f978:	b570      	push	{r4, r5, r6, lr}
 800f97a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f97c:	4606      	mov	r6, r0
 800f97e:	460d      	mov	r5, r1
 800f980:	b93c      	cbnz	r4, 800f992 <_Bfree+0x1a>
 800f982:	2010      	movs	r0, #16
 800f984:	f000 ff32 	bl	80107ec <malloc>
 800f988:	6270      	str	r0, [r6, #36]	; 0x24
 800f98a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f98e:	6004      	str	r4, [r0, #0]
 800f990:	60c4      	str	r4, [r0, #12]
 800f992:	b13d      	cbz	r5, 800f9a4 <_Bfree+0x2c>
 800f994:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f996:	686a      	ldr	r2, [r5, #4]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f99e:	6029      	str	r1, [r5, #0]
 800f9a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f9a4:	bd70      	pop	{r4, r5, r6, pc}

0800f9a6 <__multadd>:
 800f9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9aa:	461f      	mov	r7, r3
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	460c      	mov	r4, r1
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	690d      	ldr	r5, [r1, #16]
 800f9b4:	f101 0c14 	add.w	ip, r1, #20
 800f9b8:	f8dc 0000 	ldr.w	r0, [ip]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	b281      	uxth	r1, r0
 800f9c0:	fb02 7101 	mla	r1, r2, r1, r7
 800f9c4:	0c00      	lsrs	r0, r0, #16
 800f9c6:	0c0f      	lsrs	r7, r1, #16
 800f9c8:	fb02 7000 	mla	r0, r2, r0, r7
 800f9cc:	b289      	uxth	r1, r1
 800f9ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f9d2:	429d      	cmp	r5, r3
 800f9d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f9d8:	f84c 1b04 	str.w	r1, [ip], #4
 800f9dc:	dcec      	bgt.n	800f9b8 <__multadd+0x12>
 800f9de:	b1d7      	cbz	r7, 800fa16 <__multadd+0x70>
 800f9e0:	68a3      	ldr	r3, [r4, #8]
 800f9e2:	42ab      	cmp	r3, r5
 800f9e4:	dc12      	bgt.n	800fa0c <__multadd+0x66>
 800f9e6:	6861      	ldr	r1, [r4, #4]
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	3101      	adds	r1, #1
 800f9ec:	f7ff ff90 	bl	800f910 <_Balloc>
 800f9f0:	4680      	mov	r8, r0
 800f9f2:	6922      	ldr	r2, [r4, #16]
 800f9f4:	f104 010c 	add.w	r1, r4, #12
 800f9f8:	3202      	adds	r2, #2
 800f9fa:	0092      	lsls	r2, r2, #2
 800f9fc:	300c      	adds	r0, #12
 800f9fe:	f7ff ff7c 	bl	800f8fa <memcpy>
 800fa02:	4621      	mov	r1, r4
 800fa04:	4630      	mov	r0, r6
 800fa06:	f7ff ffb7 	bl	800f978 <_Bfree>
 800fa0a:	4644      	mov	r4, r8
 800fa0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fa10:	3501      	adds	r5, #1
 800fa12:	615f      	str	r7, [r3, #20]
 800fa14:	6125      	str	r5, [r4, #16]
 800fa16:	4620      	mov	r0, r4
 800fa18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fa1c <__s2b>:
 800fa1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa20:	4615      	mov	r5, r2
 800fa22:	2209      	movs	r2, #9
 800fa24:	461f      	mov	r7, r3
 800fa26:	3308      	adds	r3, #8
 800fa28:	460c      	mov	r4, r1
 800fa2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa2e:	4606      	mov	r6, r0
 800fa30:	2201      	movs	r2, #1
 800fa32:	2100      	movs	r1, #0
 800fa34:	429a      	cmp	r2, r3
 800fa36:	db20      	blt.n	800fa7a <__s2b+0x5e>
 800fa38:	4630      	mov	r0, r6
 800fa3a:	f7ff ff69 	bl	800f910 <_Balloc>
 800fa3e:	9b08      	ldr	r3, [sp, #32]
 800fa40:	2d09      	cmp	r5, #9
 800fa42:	6143      	str	r3, [r0, #20]
 800fa44:	f04f 0301 	mov.w	r3, #1
 800fa48:	6103      	str	r3, [r0, #16]
 800fa4a:	dd19      	ble.n	800fa80 <__s2b+0x64>
 800fa4c:	f104 0809 	add.w	r8, r4, #9
 800fa50:	46c1      	mov	r9, r8
 800fa52:	442c      	add	r4, r5
 800fa54:	f819 3b01 	ldrb.w	r3, [r9], #1
 800fa58:	4601      	mov	r1, r0
 800fa5a:	3b30      	subs	r3, #48	; 0x30
 800fa5c:	220a      	movs	r2, #10
 800fa5e:	4630      	mov	r0, r6
 800fa60:	f7ff ffa1 	bl	800f9a6 <__multadd>
 800fa64:	45a1      	cmp	r9, r4
 800fa66:	d1f5      	bne.n	800fa54 <__s2b+0x38>
 800fa68:	eb08 0405 	add.w	r4, r8, r5
 800fa6c:	3c08      	subs	r4, #8
 800fa6e:	1b2d      	subs	r5, r5, r4
 800fa70:	1963      	adds	r3, r4, r5
 800fa72:	42bb      	cmp	r3, r7
 800fa74:	db07      	blt.n	800fa86 <__s2b+0x6a>
 800fa76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa7a:	0052      	lsls	r2, r2, #1
 800fa7c:	3101      	adds	r1, #1
 800fa7e:	e7d9      	b.n	800fa34 <__s2b+0x18>
 800fa80:	340a      	adds	r4, #10
 800fa82:	2509      	movs	r5, #9
 800fa84:	e7f3      	b.n	800fa6e <__s2b+0x52>
 800fa86:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa8a:	4601      	mov	r1, r0
 800fa8c:	3b30      	subs	r3, #48	; 0x30
 800fa8e:	220a      	movs	r2, #10
 800fa90:	4630      	mov	r0, r6
 800fa92:	f7ff ff88 	bl	800f9a6 <__multadd>
 800fa96:	e7eb      	b.n	800fa70 <__s2b+0x54>

0800fa98 <__hi0bits>:
 800fa98:	0c02      	lsrs	r2, r0, #16
 800fa9a:	0412      	lsls	r2, r2, #16
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	b9b2      	cbnz	r2, 800face <__hi0bits+0x36>
 800faa0:	0403      	lsls	r3, r0, #16
 800faa2:	2010      	movs	r0, #16
 800faa4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800faa8:	bf04      	itt	eq
 800faaa:	021b      	lsleq	r3, r3, #8
 800faac:	3008      	addeq	r0, #8
 800faae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fab2:	bf04      	itt	eq
 800fab4:	011b      	lsleq	r3, r3, #4
 800fab6:	3004      	addeq	r0, #4
 800fab8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fabc:	bf04      	itt	eq
 800fabe:	009b      	lsleq	r3, r3, #2
 800fac0:	3002      	addeq	r0, #2
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	db06      	blt.n	800fad4 <__hi0bits+0x3c>
 800fac6:	005b      	lsls	r3, r3, #1
 800fac8:	d503      	bpl.n	800fad2 <__hi0bits+0x3a>
 800faca:	3001      	adds	r0, #1
 800facc:	4770      	bx	lr
 800face:	2000      	movs	r0, #0
 800fad0:	e7e8      	b.n	800faa4 <__hi0bits+0xc>
 800fad2:	2020      	movs	r0, #32
 800fad4:	4770      	bx	lr

0800fad6 <__lo0bits>:
 800fad6:	6803      	ldr	r3, [r0, #0]
 800fad8:	4601      	mov	r1, r0
 800fada:	f013 0207 	ands.w	r2, r3, #7
 800fade:	d00b      	beq.n	800faf8 <__lo0bits+0x22>
 800fae0:	07da      	lsls	r2, r3, #31
 800fae2:	d423      	bmi.n	800fb2c <__lo0bits+0x56>
 800fae4:	0798      	lsls	r0, r3, #30
 800fae6:	bf49      	itett	mi
 800fae8:	085b      	lsrmi	r3, r3, #1
 800faea:	089b      	lsrpl	r3, r3, #2
 800faec:	2001      	movmi	r0, #1
 800faee:	600b      	strmi	r3, [r1, #0]
 800faf0:	bf5c      	itt	pl
 800faf2:	600b      	strpl	r3, [r1, #0]
 800faf4:	2002      	movpl	r0, #2
 800faf6:	4770      	bx	lr
 800faf8:	b298      	uxth	r0, r3
 800fafa:	b9a8      	cbnz	r0, 800fb28 <__lo0bits+0x52>
 800fafc:	2010      	movs	r0, #16
 800fafe:	0c1b      	lsrs	r3, r3, #16
 800fb00:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fb04:	bf04      	itt	eq
 800fb06:	0a1b      	lsreq	r3, r3, #8
 800fb08:	3008      	addeq	r0, #8
 800fb0a:	071a      	lsls	r2, r3, #28
 800fb0c:	bf04      	itt	eq
 800fb0e:	091b      	lsreq	r3, r3, #4
 800fb10:	3004      	addeq	r0, #4
 800fb12:	079a      	lsls	r2, r3, #30
 800fb14:	bf04      	itt	eq
 800fb16:	089b      	lsreq	r3, r3, #2
 800fb18:	3002      	addeq	r0, #2
 800fb1a:	07da      	lsls	r2, r3, #31
 800fb1c:	d402      	bmi.n	800fb24 <__lo0bits+0x4e>
 800fb1e:	085b      	lsrs	r3, r3, #1
 800fb20:	d006      	beq.n	800fb30 <__lo0bits+0x5a>
 800fb22:	3001      	adds	r0, #1
 800fb24:	600b      	str	r3, [r1, #0]
 800fb26:	4770      	bx	lr
 800fb28:	4610      	mov	r0, r2
 800fb2a:	e7e9      	b.n	800fb00 <__lo0bits+0x2a>
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	4770      	bx	lr
 800fb30:	2020      	movs	r0, #32
 800fb32:	4770      	bx	lr

0800fb34 <__i2b>:
 800fb34:	b510      	push	{r4, lr}
 800fb36:	460c      	mov	r4, r1
 800fb38:	2101      	movs	r1, #1
 800fb3a:	f7ff fee9 	bl	800f910 <_Balloc>
 800fb3e:	2201      	movs	r2, #1
 800fb40:	6144      	str	r4, [r0, #20]
 800fb42:	6102      	str	r2, [r0, #16]
 800fb44:	bd10      	pop	{r4, pc}

0800fb46 <__multiply>:
 800fb46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb4a:	4614      	mov	r4, r2
 800fb4c:	690a      	ldr	r2, [r1, #16]
 800fb4e:	6923      	ldr	r3, [r4, #16]
 800fb50:	4688      	mov	r8, r1
 800fb52:	429a      	cmp	r2, r3
 800fb54:	bfbe      	ittt	lt
 800fb56:	460b      	movlt	r3, r1
 800fb58:	46a0      	movlt	r8, r4
 800fb5a:	461c      	movlt	r4, r3
 800fb5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fb64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fb6c:	eb07 0609 	add.w	r6, r7, r9
 800fb70:	42b3      	cmp	r3, r6
 800fb72:	bfb8      	it	lt
 800fb74:	3101      	addlt	r1, #1
 800fb76:	f7ff fecb 	bl	800f910 <_Balloc>
 800fb7a:	f100 0514 	add.w	r5, r0, #20
 800fb7e:	462b      	mov	r3, r5
 800fb80:	2200      	movs	r2, #0
 800fb82:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fb86:	4573      	cmp	r3, lr
 800fb88:	d316      	bcc.n	800fbb8 <__multiply+0x72>
 800fb8a:	f104 0214 	add.w	r2, r4, #20
 800fb8e:	f108 0114 	add.w	r1, r8, #20
 800fb92:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fb96:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fb9a:	9300      	str	r3, [sp, #0]
 800fb9c:	9b00      	ldr	r3, [sp, #0]
 800fb9e:	9201      	str	r2, [sp, #4]
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d80c      	bhi.n	800fbbe <__multiply+0x78>
 800fba4:	2e00      	cmp	r6, #0
 800fba6:	dd03      	ble.n	800fbb0 <__multiply+0x6a>
 800fba8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d05d      	beq.n	800fc6c <__multiply+0x126>
 800fbb0:	6106      	str	r6, [r0, #16]
 800fbb2:	b003      	add	sp, #12
 800fbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb8:	f843 2b04 	str.w	r2, [r3], #4
 800fbbc:	e7e3      	b.n	800fb86 <__multiply+0x40>
 800fbbe:	f8b2 b000 	ldrh.w	fp, [r2]
 800fbc2:	f1bb 0f00 	cmp.w	fp, #0
 800fbc6:	d023      	beq.n	800fc10 <__multiply+0xca>
 800fbc8:	4689      	mov	r9, r1
 800fbca:	46ac      	mov	ip, r5
 800fbcc:	f04f 0800 	mov.w	r8, #0
 800fbd0:	f859 4b04 	ldr.w	r4, [r9], #4
 800fbd4:	f8dc a000 	ldr.w	sl, [ip]
 800fbd8:	b2a3      	uxth	r3, r4
 800fbda:	fa1f fa8a 	uxth.w	sl, sl
 800fbde:	fb0b a303 	mla	r3, fp, r3, sl
 800fbe2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fbe6:	f8dc 4000 	ldr.w	r4, [ip]
 800fbea:	4443      	add	r3, r8
 800fbec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fbf0:	fb0b 840a 	mla	r4, fp, sl, r8
 800fbf4:	46e2      	mov	sl, ip
 800fbf6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fc00:	454f      	cmp	r7, r9
 800fc02:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fc06:	f84a 3b04 	str.w	r3, [sl], #4
 800fc0a:	d82b      	bhi.n	800fc64 <__multiply+0x11e>
 800fc0c:	f8cc 8004 	str.w	r8, [ip, #4]
 800fc10:	9b01      	ldr	r3, [sp, #4]
 800fc12:	3204      	adds	r2, #4
 800fc14:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fc18:	f1ba 0f00 	cmp.w	sl, #0
 800fc1c:	d020      	beq.n	800fc60 <__multiply+0x11a>
 800fc1e:	4689      	mov	r9, r1
 800fc20:	46a8      	mov	r8, r5
 800fc22:	f04f 0b00 	mov.w	fp, #0
 800fc26:	682b      	ldr	r3, [r5, #0]
 800fc28:	f8b9 c000 	ldrh.w	ip, [r9]
 800fc2c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	fb0a 440c 	mla	r4, sl, ip, r4
 800fc36:	46c4      	mov	ip, r8
 800fc38:	445c      	add	r4, fp
 800fc3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fc3e:	f84c 3b04 	str.w	r3, [ip], #4
 800fc42:	f859 3b04 	ldr.w	r3, [r9], #4
 800fc46:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800fc4a:	0c1b      	lsrs	r3, r3, #16
 800fc4c:	fb0a b303 	mla	r3, sl, r3, fp
 800fc50:	454f      	cmp	r7, r9
 800fc52:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fc56:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800fc5a:	d805      	bhi.n	800fc68 <__multiply+0x122>
 800fc5c:	f8c8 3004 	str.w	r3, [r8, #4]
 800fc60:	3504      	adds	r5, #4
 800fc62:	e79b      	b.n	800fb9c <__multiply+0x56>
 800fc64:	46d4      	mov	ip, sl
 800fc66:	e7b3      	b.n	800fbd0 <__multiply+0x8a>
 800fc68:	46e0      	mov	r8, ip
 800fc6a:	e7dd      	b.n	800fc28 <__multiply+0xe2>
 800fc6c:	3e01      	subs	r6, #1
 800fc6e:	e799      	b.n	800fba4 <__multiply+0x5e>

0800fc70 <__pow5mult>:
 800fc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc74:	4615      	mov	r5, r2
 800fc76:	f012 0203 	ands.w	r2, r2, #3
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	460f      	mov	r7, r1
 800fc7e:	d007      	beq.n	800fc90 <__pow5mult+0x20>
 800fc80:	4c21      	ldr	r4, [pc, #132]	; (800fd08 <__pow5mult+0x98>)
 800fc82:	3a01      	subs	r2, #1
 800fc84:	2300      	movs	r3, #0
 800fc86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc8a:	f7ff fe8c 	bl	800f9a6 <__multadd>
 800fc8e:	4607      	mov	r7, r0
 800fc90:	10ad      	asrs	r5, r5, #2
 800fc92:	d035      	beq.n	800fd00 <__pow5mult+0x90>
 800fc94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fc96:	b93c      	cbnz	r4, 800fca8 <__pow5mult+0x38>
 800fc98:	2010      	movs	r0, #16
 800fc9a:	f000 fda7 	bl	80107ec <malloc>
 800fc9e:	6270      	str	r0, [r6, #36]	; 0x24
 800fca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fca4:	6004      	str	r4, [r0, #0]
 800fca6:	60c4      	str	r4, [r0, #12]
 800fca8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fcac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fcb0:	b94c      	cbnz	r4, 800fcc6 <__pow5mult+0x56>
 800fcb2:	f240 2171 	movw	r1, #625	; 0x271
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	f7ff ff3c 	bl	800fb34 <__i2b>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	4604      	mov	r4, r0
 800fcc0:	f8c8 0008 	str.w	r0, [r8, #8]
 800fcc4:	6003      	str	r3, [r0, #0]
 800fcc6:	f04f 0800 	mov.w	r8, #0
 800fcca:	07eb      	lsls	r3, r5, #31
 800fccc:	d50a      	bpl.n	800fce4 <__pow5mult+0x74>
 800fcce:	4639      	mov	r1, r7
 800fcd0:	4622      	mov	r2, r4
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	f7ff ff37 	bl	800fb46 <__multiply>
 800fcd8:	4681      	mov	r9, r0
 800fcda:	4639      	mov	r1, r7
 800fcdc:	4630      	mov	r0, r6
 800fcde:	f7ff fe4b 	bl	800f978 <_Bfree>
 800fce2:	464f      	mov	r7, r9
 800fce4:	106d      	asrs	r5, r5, #1
 800fce6:	d00b      	beq.n	800fd00 <__pow5mult+0x90>
 800fce8:	6820      	ldr	r0, [r4, #0]
 800fcea:	b938      	cbnz	r0, 800fcfc <__pow5mult+0x8c>
 800fcec:	4622      	mov	r2, r4
 800fcee:	4621      	mov	r1, r4
 800fcf0:	4630      	mov	r0, r6
 800fcf2:	f7ff ff28 	bl	800fb46 <__multiply>
 800fcf6:	6020      	str	r0, [r4, #0]
 800fcf8:	f8c0 8000 	str.w	r8, [r0]
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	e7e4      	b.n	800fcca <__pow5mult+0x5a>
 800fd00:	4638      	mov	r0, r7
 800fd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd06:	bf00      	nop
 800fd08:	08010ce0 	.word	0x08010ce0

0800fd0c <__lshift>:
 800fd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd10:	460c      	mov	r4, r1
 800fd12:	4607      	mov	r7, r0
 800fd14:	4616      	mov	r6, r2
 800fd16:	6923      	ldr	r3, [r4, #16]
 800fd18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd1c:	eb0a 0903 	add.w	r9, sl, r3
 800fd20:	6849      	ldr	r1, [r1, #4]
 800fd22:	68a3      	ldr	r3, [r4, #8]
 800fd24:	f109 0501 	add.w	r5, r9, #1
 800fd28:	42ab      	cmp	r3, r5
 800fd2a:	db32      	blt.n	800fd92 <__lshift+0x86>
 800fd2c:	4638      	mov	r0, r7
 800fd2e:	f7ff fdef 	bl	800f910 <_Balloc>
 800fd32:	2300      	movs	r3, #0
 800fd34:	4680      	mov	r8, r0
 800fd36:	461a      	mov	r2, r3
 800fd38:	f100 0114 	add.w	r1, r0, #20
 800fd3c:	4553      	cmp	r3, sl
 800fd3e:	db2b      	blt.n	800fd98 <__lshift+0x8c>
 800fd40:	6920      	ldr	r0, [r4, #16]
 800fd42:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd46:	f104 0314 	add.w	r3, r4, #20
 800fd4a:	f016 021f 	ands.w	r2, r6, #31
 800fd4e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd52:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd56:	d025      	beq.n	800fda4 <__lshift+0x98>
 800fd58:	2000      	movs	r0, #0
 800fd5a:	f1c2 0e20 	rsb	lr, r2, #32
 800fd5e:	468a      	mov	sl, r1
 800fd60:	681e      	ldr	r6, [r3, #0]
 800fd62:	4096      	lsls	r6, r2
 800fd64:	4330      	orrs	r0, r6
 800fd66:	f84a 0b04 	str.w	r0, [sl], #4
 800fd6a:	f853 0b04 	ldr.w	r0, [r3], #4
 800fd6e:	459c      	cmp	ip, r3
 800fd70:	fa20 f00e 	lsr.w	r0, r0, lr
 800fd74:	d814      	bhi.n	800fda0 <__lshift+0x94>
 800fd76:	6048      	str	r0, [r1, #4]
 800fd78:	b108      	cbz	r0, 800fd7e <__lshift+0x72>
 800fd7a:	f109 0502 	add.w	r5, r9, #2
 800fd7e:	3d01      	subs	r5, #1
 800fd80:	4638      	mov	r0, r7
 800fd82:	f8c8 5010 	str.w	r5, [r8, #16]
 800fd86:	4621      	mov	r1, r4
 800fd88:	f7ff fdf6 	bl	800f978 <_Bfree>
 800fd8c:	4640      	mov	r0, r8
 800fd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd92:	3101      	adds	r1, #1
 800fd94:	005b      	lsls	r3, r3, #1
 800fd96:	e7c7      	b.n	800fd28 <__lshift+0x1c>
 800fd98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	e7cd      	b.n	800fd3c <__lshift+0x30>
 800fda0:	4651      	mov	r1, sl
 800fda2:	e7dc      	b.n	800fd5e <__lshift+0x52>
 800fda4:	3904      	subs	r1, #4
 800fda6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdaa:	459c      	cmp	ip, r3
 800fdac:	f841 2f04 	str.w	r2, [r1, #4]!
 800fdb0:	d8f9      	bhi.n	800fda6 <__lshift+0x9a>
 800fdb2:	e7e4      	b.n	800fd7e <__lshift+0x72>

0800fdb4 <__mcmp>:
 800fdb4:	6903      	ldr	r3, [r0, #16]
 800fdb6:	690a      	ldr	r2, [r1, #16]
 800fdb8:	b530      	push	{r4, r5, lr}
 800fdba:	1a9b      	subs	r3, r3, r2
 800fdbc:	d10c      	bne.n	800fdd8 <__mcmp+0x24>
 800fdbe:	0092      	lsls	r2, r2, #2
 800fdc0:	3014      	adds	r0, #20
 800fdc2:	3114      	adds	r1, #20
 800fdc4:	1884      	adds	r4, r0, r2
 800fdc6:	4411      	add	r1, r2
 800fdc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fdcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fdd0:	4295      	cmp	r5, r2
 800fdd2:	d003      	beq.n	800fddc <__mcmp+0x28>
 800fdd4:	d305      	bcc.n	800fde2 <__mcmp+0x2e>
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	4618      	mov	r0, r3
 800fdda:	bd30      	pop	{r4, r5, pc}
 800fddc:	42a0      	cmp	r0, r4
 800fdde:	d3f3      	bcc.n	800fdc8 <__mcmp+0x14>
 800fde0:	e7fa      	b.n	800fdd8 <__mcmp+0x24>
 800fde2:	f04f 33ff 	mov.w	r3, #4294967295
 800fde6:	e7f7      	b.n	800fdd8 <__mcmp+0x24>

0800fde8 <__mdiff>:
 800fde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdec:	460d      	mov	r5, r1
 800fdee:	4607      	mov	r7, r0
 800fdf0:	4611      	mov	r1, r2
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	4614      	mov	r4, r2
 800fdf6:	f7ff ffdd 	bl	800fdb4 <__mcmp>
 800fdfa:	1e06      	subs	r6, r0, #0
 800fdfc:	d108      	bne.n	800fe10 <__mdiff+0x28>
 800fdfe:	4631      	mov	r1, r6
 800fe00:	4638      	mov	r0, r7
 800fe02:	f7ff fd85 	bl	800f910 <_Balloc>
 800fe06:	2301      	movs	r3, #1
 800fe08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fe0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe10:	bfa4      	itt	ge
 800fe12:	4623      	movge	r3, r4
 800fe14:	462c      	movge	r4, r5
 800fe16:	4638      	mov	r0, r7
 800fe18:	6861      	ldr	r1, [r4, #4]
 800fe1a:	bfa6      	itte	ge
 800fe1c:	461d      	movge	r5, r3
 800fe1e:	2600      	movge	r6, #0
 800fe20:	2601      	movlt	r6, #1
 800fe22:	f7ff fd75 	bl	800f910 <_Balloc>
 800fe26:	f04f 0e00 	mov.w	lr, #0
 800fe2a:	60c6      	str	r6, [r0, #12]
 800fe2c:	692b      	ldr	r3, [r5, #16]
 800fe2e:	6926      	ldr	r6, [r4, #16]
 800fe30:	f104 0214 	add.w	r2, r4, #20
 800fe34:	f105 0914 	add.w	r9, r5, #20
 800fe38:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fe3c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fe40:	f100 0114 	add.w	r1, r0, #20
 800fe44:	f852 ab04 	ldr.w	sl, [r2], #4
 800fe48:	f859 5b04 	ldr.w	r5, [r9], #4
 800fe4c:	fa1f f38a 	uxth.w	r3, sl
 800fe50:	4473      	add	r3, lr
 800fe52:	b2ac      	uxth	r4, r5
 800fe54:	1b1b      	subs	r3, r3, r4
 800fe56:	0c2c      	lsrs	r4, r5, #16
 800fe58:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800fe5c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800fe66:	45c8      	cmp	r8, r9
 800fe68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800fe6c:	4694      	mov	ip, r2
 800fe6e:	f841 4b04 	str.w	r4, [r1], #4
 800fe72:	d8e7      	bhi.n	800fe44 <__mdiff+0x5c>
 800fe74:	45bc      	cmp	ip, r7
 800fe76:	d304      	bcc.n	800fe82 <__mdiff+0x9a>
 800fe78:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800fe7c:	b183      	cbz	r3, 800fea0 <__mdiff+0xb8>
 800fe7e:	6106      	str	r6, [r0, #16]
 800fe80:	e7c4      	b.n	800fe0c <__mdiff+0x24>
 800fe82:	f85c 4b04 	ldr.w	r4, [ip], #4
 800fe86:	b2a2      	uxth	r2, r4
 800fe88:	4472      	add	r2, lr
 800fe8a:	1413      	asrs	r3, r2, #16
 800fe8c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fe90:	b292      	uxth	r2, r2
 800fe92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fe96:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fe9a:	f841 2b04 	str.w	r2, [r1], #4
 800fe9e:	e7e9      	b.n	800fe74 <__mdiff+0x8c>
 800fea0:	3e01      	subs	r6, #1
 800fea2:	e7e9      	b.n	800fe78 <__mdiff+0x90>

0800fea4 <__ulp>:
 800fea4:	4b10      	ldr	r3, [pc, #64]	; (800fee8 <__ulp+0x44>)
 800fea6:	400b      	ands	r3, r1
 800fea8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800feac:	2b00      	cmp	r3, #0
 800feae:	dd02      	ble.n	800feb6 <__ulp+0x12>
 800feb0:	2000      	movs	r0, #0
 800feb2:	4619      	mov	r1, r3
 800feb4:	4770      	bx	lr
 800feb6:	425b      	negs	r3, r3
 800feb8:	151b      	asrs	r3, r3, #20
 800feba:	2b13      	cmp	r3, #19
 800febc:	f04f 0000 	mov.w	r0, #0
 800fec0:	f04f 0100 	mov.w	r1, #0
 800fec4:	dc04      	bgt.n	800fed0 <__ulp+0x2c>
 800fec6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800feca:	fa42 f103 	asr.w	r1, r2, r3
 800fece:	4770      	bx	lr
 800fed0:	2201      	movs	r2, #1
 800fed2:	3b14      	subs	r3, #20
 800fed4:	2b1e      	cmp	r3, #30
 800fed6:	bfce      	itee	gt
 800fed8:	4613      	movgt	r3, r2
 800feda:	f1c3 031f 	rsble	r3, r3, #31
 800fede:	fa02 f303 	lslle.w	r3, r2, r3
 800fee2:	4618      	mov	r0, r3
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	7ff00000 	.word	0x7ff00000

0800feec <__b2d>:
 800feec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fef0:	6907      	ldr	r7, [r0, #16]
 800fef2:	f100 0914 	add.w	r9, r0, #20
 800fef6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800fefa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800fefe:	f1a7 0804 	sub.w	r8, r7, #4
 800ff02:	4630      	mov	r0, r6
 800ff04:	f7ff fdc8 	bl	800fa98 <__hi0bits>
 800ff08:	f1c0 0320 	rsb	r3, r0, #32
 800ff0c:	280a      	cmp	r0, #10
 800ff0e:	600b      	str	r3, [r1, #0]
 800ff10:	491e      	ldr	r1, [pc, #120]	; (800ff8c <__b2d+0xa0>)
 800ff12:	dc17      	bgt.n	800ff44 <__b2d+0x58>
 800ff14:	45c1      	cmp	r9, r8
 800ff16:	bf28      	it	cs
 800ff18:	2200      	movcs	r2, #0
 800ff1a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ff1e:	fa26 f30c 	lsr.w	r3, r6, ip
 800ff22:	bf38      	it	cc
 800ff24:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ff28:	ea43 0501 	orr.w	r5, r3, r1
 800ff2c:	f100 0315 	add.w	r3, r0, #21
 800ff30:	fa06 f303 	lsl.w	r3, r6, r3
 800ff34:	fa22 f20c 	lsr.w	r2, r2, ip
 800ff38:	ea43 0402 	orr.w	r4, r3, r2
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	4629      	mov	r1, r5
 800ff40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff44:	45c1      	cmp	r9, r8
 800ff46:	bf3a      	itte	cc
 800ff48:	f1a7 0808 	subcc.w	r8, r7, #8
 800ff4c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ff50:	2200      	movcs	r2, #0
 800ff52:	f1b0 030b 	subs.w	r3, r0, #11
 800ff56:	d015      	beq.n	800ff84 <__b2d+0x98>
 800ff58:	409e      	lsls	r6, r3
 800ff5a:	f1c3 0720 	rsb	r7, r3, #32
 800ff5e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800ff62:	fa22 f107 	lsr.w	r1, r2, r7
 800ff66:	45c8      	cmp	r8, r9
 800ff68:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800ff6c:	ea46 0501 	orr.w	r5, r6, r1
 800ff70:	bf94      	ite	ls
 800ff72:	2100      	movls	r1, #0
 800ff74:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ff78:	fa02 f003 	lsl.w	r0, r2, r3
 800ff7c:	40f9      	lsrs	r1, r7
 800ff7e:	ea40 0401 	orr.w	r4, r0, r1
 800ff82:	e7db      	b.n	800ff3c <__b2d+0x50>
 800ff84:	ea46 0501 	orr.w	r5, r6, r1
 800ff88:	4614      	mov	r4, r2
 800ff8a:	e7d7      	b.n	800ff3c <__b2d+0x50>
 800ff8c:	3ff00000 	.word	0x3ff00000

0800ff90 <__d2b>:
 800ff90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ff94:	461c      	mov	r4, r3
 800ff96:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ff9a:	2101      	movs	r1, #1
 800ff9c:	4690      	mov	r8, r2
 800ff9e:	f7ff fcb7 	bl	800f910 <_Balloc>
 800ffa2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800ffa6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ffaa:	4607      	mov	r7, r0
 800ffac:	bb34      	cbnz	r4, 800fffc <__d2b+0x6c>
 800ffae:	9201      	str	r2, [sp, #4]
 800ffb0:	f1b8 0200 	subs.w	r2, r8, #0
 800ffb4:	d027      	beq.n	8010006 <__d2b+0x76>
 800ffb6:	a802      	add	r0, sp, #8
 800ffb8:	f840 2d08 	str.w	r2, [r0, #-8]!
 800ffbc:	f7ff fd8b 	bl	800fad6 <__lo0bits>
 800ffc0:	9900      	ldr	r1, [sp, #0]
 800ffc2:	b1f0      	cbz	r0, 8010002 <__d2b+0x72>
 800ffc4:	9a01      	ldr	r2, [sp, #4]
 800ffc6:	f1c0 0320 	rsb	r3, r0, #32
 800ffca:	fa02 f303 	lsl.w	r3, r2, r3
 800ffce:	430b      	orrs	r3, r1
 800ffd0:	40c2      	lsrs	r2, r0
 800ffd2:	617b      	str	r3, [r7, #20]
 800ffd4:	9201      	str	r2, [sp, #4]
 800ffd6:	9b01      	ldr	r3, [sp, #4]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	bf14      	ite	ne
 800ffdc:	2102      	movne	r1, #2
 800ffde:	2101      	moveq	r1, #1
 800ffe0:	61bb      	str	r3, [r7, #24]
 800ffe2:	6139      	str	r1, [r7, #16]
 800ffe4:	b1c4      	cbz	r4, 8010018 <__d2b+0x88>
 800ffe6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ffea:	4404      	add	r4, r0
 800ffec:	6034      	str	r4, [r6, #0]
 800ffee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fff2:	6028      	str	r0, [r5, #0]
 800fff4:	4638      	mov	r0, r7
 800fff6:	b002      	add	sp, #8
 800fff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fffc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010000:	e7d5      	b.n	800ffae <__d2b+0x1e>
 8010002:	6179      	str	r1, [r7, #20]
 8010004:	e7e7      	b.n	800ffd6 <__d2b+0x46>
 8010006:	a801      	add	r0, sp, #4
 8010008:	f7ff fd65 	bl	800fad6 <__lo0bits>
 801000c:	2101      	movs	r1, #1
 801000e:	9b01      	ldr	r3, [sp, #4]
 8010010:	6139      	str	r1, [r7, #16]
 8010012:	617b      	str	r3, [r7, #20]
 8010014:	3020      	adds	r0, #32
 8010016:	e7e5      	b.n	800ffe4 <__d2b+0x54>
 8010018:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801001c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010020:	6030      	str	r0, [r6, #0]
 8010022:	6918      	ldr	r0, [r3, #16]
 8010024:	f7ff fd38 	bl	800fa98 <__hi0bits>
 8010028:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801002c:	e7e1      	b.n	800fff2 <__d2b+0x62>

0801002e <__ratio>:
 801002e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010032:	4688      	mov	r8, r1
 8010034:	4669      	mov	r1, sp
 8010036:	4681      	mov	r9, r0
 8010038:	f7ff ff58 	bl	800feec <__b2d>
 801003c:	468b      	mov	fp, r1
 801003e:	4606      	mov	r6, r0
 8010040:	460f      	mov	r7, r1
 8010042:	4640      	mov	r0, r8
 8010044:	a901      	add	r1, sp, #4
 8010046:	f7ff ff51 	bl	800feec <__b2d>
 801004a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801004e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010052:	460d      	mov	r5, r1
 8010054:	eba3 0c02 	sub.w	ip, r3, r2
 8010058:	e9dd 3200 	ldrd	r3, r2, [sp]
 801005c:	1a9b      	subs	r3, r3, r2
 801005e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010062:	2b00      	cmp	r3, #0
 8010064:	bfd5      	itete	le
 8010066:	460a      	movle	r2, r1
 8010068:	463a      	movgt	r2, r7
 801006a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801006e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010072:	bfd8      	it	le
 8010074:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8010078:	462b      	mov	r3, r5
 801007a:	4602      	mov	r2, r0
 801007c:	4659      	mov	r1, fp
 801007e:	4630      	mov	r0, r6
 8010080:	f7f5 fbca 	bl	8005818 <__aeabi_ddiv>
 8010084:	b003      	add	sp, #12
 8010086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801008a <__copybits>:
 801008a:	3901      	subs	r1, #1
 801008c:	b510      	push	{r4, lr}
 801008e:	1149      	asrs	r1, r1, #5
 8010090:	6914      	ldr	r4, [r2, #16]
 8010092:	3101      	adds	r1, #1
 8010094:	f102 0314 	add.w	r3, r2, #20
 8010098:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801009c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80100a0:	42a3      	cmp	r3, r4
 80100a2:	4602      	mov	r2, r0
 80100a4:	d303      	bcc.n	80100ae <__copybits+0x24>
 80100a6:	2300      	movs	r3, #0
 80100a8:	428a      	cmp	r2, r1
 80100aa:	d305      	bcc.n	80100b8 <__copybits+0x2e>
 80100ac:	bd10      	pop	{r4, pc}
 80100ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80100b2:	f840 2b04 	str.w	r2, [r0], #4
 80100b6:	e7f3      	b.n	80100a0 <__copybits+0x16>
 80100b8:	f842 3b04 	str.w	r3, [r2], #4
 80100bc:	e7f4      	b.n	80100a8 <__copybits+0x1e>

080100be <__any_on>:
 80100be:	f100 0214 	add.w	r2, r0, #20
 80100c2:	6900      	ldr	r0, [r0, #16]
 80100c4:	114b      	asrs	r3, r1, #5
 80100c6:	4298      	cmp	r0, r3
 80100c8:	b510      	push	{r4, lr}
 80100ca:	db11      	blt.n	80100f0 <__any_on+0x32>
 80100cc:	dd0a      	ble.n	80100e4 <__any_on+0x26>
 80100ce:	f011 011f 	ands.w	r1, r1, #31
 80100d2:	d007      	beq.n	80100e4 <__any_on+0x26>
 80100d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80100d8:	fa24 f001 	lsr.w	r0, r4, r1
 80100dc:	fa00 f101 	lsl.w	r1, r0, r1
 80100e0:	428c      	cmp	r4, r1
 80100e2:	d10b      	bne.n	80100fc <__any_on+0x3e>
 80100e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d803      	bhi.n	80100f4 <__any_on+0x36>
 80100ec:	2000      	movs	r0, #0
 80100ee:	bd10      	pop	{r4, pc}
 80100f0:	4603      	mov	r3, r0
 80100f2:	e7f7      	b.n	80100e4 <__any_on+0x26>
 80100f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80100f8:	2900      	cmp	r1, #0
 80100fa:	d0f5      	beq.n	80100e8 <__any_on+0x2a>
 80100fc:	2001      	movs	r0, #1
 80100fe:	e7f6      	b.n	80100ee <__any_on+0x30>

08010100 <_calloc_r>:
 8010100:	b538      	push	{r3, r4, r5, lr}
 8010102:	fb02 f401 	mul.w	r4, r2, r1
 8010106:	4621      	mov	r1, r4
 8010108:	f000 f808 	bl	801011c <_malloc_r>
 801010c:	4605      	mov	r5, r0
 801010e:	b118      	cbz	r0, 8010118 <_calloc_r+0x18>
 8010110:	4622      	mov	r2, r4
 8010112:	2100      	movs	r1, #0
 8010114:	f7fe f93a 	bl	800e38c <memset>
 8010118:	4628      	mov	r0, r5
 801011a:	bd38      	pop	{r3, r4, r5, pc}

0801011c <_malloc_r>:
 801011c:	b570      	push	{r4, r5, r6, lr}
 801011e:	1ccd      	adds	r5, r1, #3
 8010120:	f025 0503 	bic.w	r5, r5, #3
 8010124:	3508      	adds	r5, #8
 8010126:	2d0c      	cmp	r5, #12
 8010128:	bf38      	it	cc
 801012a:	250c      	movcc	r5, #12
 801012c:	2d00      	cmp	r5, #0
 801012e:	4606      	mov	r6, r0
 8010130:	db01      	blt.n	8010136 <_malloc_r+0x1a>
 8010132:	42a9      	cmp	r1, r5
 8010134:	d903      	bls.n	801013e <_malloc_r+0x22>
 8010136:	230c      	movs	r3, #12
 8010138:	6033      	str	r3, [r6, #0]
 801013a:	2000      	movs	r0, #0
 801013c:	bd70      	pop	{r4, r5, r6, pc}
 801013e:	f000 fb84 	bl	801084a <__malloc_lock>
 8010142:	4a21      	ldr	r2, [pc, #132]	; (80101c8 <_malloc_r+0xac>)
 8010144:	6814      	ldr	r4, [r2, #0]
 8010146:	4621      	mov	r1, r4
 8010148:	b991      	cbnz	r1, 8010170 <_malloc_r+0x54>
 801014a:	4c20      	ldr	r4, [pc, #128]	; (80101cc <_malloc_r+0xb0>)
 801014c:	6823      	ldr	r3, [r4, #0]
 801014e:	b91b      	cbnz	r3, 8010158 <_malloc_r+0x3c>
 8010150:	4630      	mov	r0, r6
 8010152:	f000 fb17 	bl	8010784 <_sbrk_r>
 8010156:	6020      	str	r0, [r4, #0]
 8010158:	4629      	mov	r1, r5
 801015a:	4630      	mov	r0, r6
 801015c:	f000 fb12 	bl	8010784 <_sbrk_r>
 8010160:	1c43      	adds	r3, r0, #1
 8010162:	d124      	bne.n	80101ae <_malloc_r+0x92>
 8010164:	230c      	movs	r3, #12
 8010166:	4630      	mov	r0, r6
 8010168:	6033      	str	r3, [r6, #0]
 801016a:	f000 fb6f 	bl	801084c <__malloc_unlock>
 801016e:	e7e4      	b.n	801013a <_malloc_r+0x1e>
 8010170:	680b      	ldr	r3, [r1, #0]
 8010172:	1b5b      	subs	r3, r3, r5
 8010174:	d418      	bmi.n	80101a8 <_malloc_r+0x8c>
 8010176:	2b0b      	cmp	r3, #11
 8010178:	d90f      	bls.n	801019a <_malloc_r+0x7e>
 801017a:	600b      	str	r3, [r1, #0]
 801017c:	18cc      	adds	r4, r1, r3
 801017e:	50cd      	str	r5, [r1, r3]
 8010180:	4630      	mov	r0, r6
 8010182:	f000 fb63 	bl	801084c <__malloc_unlock>
 8010186:	f104 000b 	add.w	r0, r4, #11
 801018a:	1d23      	adds	r3, r4, #4
 801018c:	f020 0007 	bic.w	r0, r0, #7
 8010190:	1ac3      	subs	r3, r0, r3
 8010192:	d0d3      	beq.n	801013c <_malloc_r+0x20>
 8010194:	425a      	negs	r2, r3
 8010196:	50e2      	str	r2, [r4, r3]
 8010198:	e7d0      	b.n	801013c <_malloc_r+0x20>
 801019a:	684b      	ldr	r3, [r1, #4]
 801019c:	428c      	cmp	r4, r1
 801019e:	bf16      	itet	ne
 80101a0:	6063      	strne	r3, [r4, #4]
 80101a2:	6013      	streq	r3, [r2, #0]
 80101a4:	460c      	movne	r4, r1
 80101a6:	e7eb      	b.n	8010180 <_malloc_r+0x64>
 80101a8:	460c      	mov	r4, r1
 80101aa:	6849      	ldr	r1, [r1, #4]
 80101ac:	e7cc      	b.n	8010148 <_malloc_r+0x2c>
 80101ae:	1cc4      	adds	r4, r0, #3
 80101b0:	f024 0403 	bic.w	r4, r4, #3
 80101b4:	42a0      	cmp	r0, r4
 80101b6:	d005      	beq.n	80101c4 <_malloc_r+0xa8>
 80101b8:	1a21      	subs	r1, r4, r0
 80101ba:	4630      	mov	r0, r6
 80101bc:	f000 fae2 	bl	8010784 <_sbrk_r>
 80101c0:	3001      	adds	r0, #1
 80101c2:	d0cf      	beq.n	8010164 <_malloc_r+0x48>
 80101c4:	6025      	str	r5, [r4, #0]
 80101c6:	e7db      	b.n	8010180 <_malloc_r+0x64>
 80101c8:	20000eec 	.word	0x20000eec
 80101cc:	20000ef0 	.word	0x20000ef0

080101d0 <__ssputs_r>:
 80101d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101d4:	688e      	ldr	r6, [r1, #8]
 80101d6:	4682      	mov	sl, r0
 80101d8:	429e      	cmp	r6, r3
 80101da:	460c      	mov	r4, r1
 80101dc:	4690      	mov	r8, r2
 80101de:	4699      	mov	r9, r3
 80101e0:	d837      	bhi.n	8010252 <__ssputs_r+0x82>
 80101e2:	898a      	ldrh	r2, [r1, #12]
 80101e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80101e8:	d031      	beq.n	801024e <__ssputs_r+0x7e>
 80101ea:	2302      	movs	r3, #2
 80101ec:	6825      	ldr	r5, [r4, #0]
 80101ee:	6909      	ldr	r1, [r1, #16]
 80101f0:	1a6f      	subs	r7, r5, r1
 80101f2:	6965      	ldr	r5, [r4, #20]
 80101f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80101fc:	f109 0301 	add.w	r3, r9, #1
 8010200:	443b      	add	r3, r7
 8010202:	429d      	cmp	r5, r3
 8010204:	bf38      	it	cc
 8010206:	461d      	movcc	r5, r3
 8010208:	0553      	lsls	r3, r2, #21
 801020a:	d530      	bpl.n	801026e <__ssputs_r+0x9e>
 801020c:	4629      	mov	r1, r5
 801020e:	f7ff ff85 	bl	801011c <_malloc_r>
 8010212:	4606      	mov	r6, r0
 8010214:	b950      	cbnz	r0, 801022c <__ssputs_r+0x5c>
 8010216:	230c      	movs	r3, #12
 8010218:	f04f 30ff 	mov.w	r0, #4294967295
 801021c:	f8ca 3000 	str.w	r3, [sl]
 8010220:	89a3      	ldrh	r3, [r4, #12]
 8010222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010226:	81a3      	strh	r3, [r4, #12]
 8010228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801022c:	463a      	mov	r2, r7
 801022e:	6921      	ldr	r1, [r4, #16]
 8010230:	f7ff fb63 	bl	800f8fa <memcpy>
 8010234:	89a3      	ldrh	r3, [r4, #12]
 8010236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801023a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801023e:	81a3      	strh	r3, [r4, #12]
 8010240:	6126      	str	r6, [r4, #16]
 8010242:	443e      	add	r6, r7
 8010244:	6026      	str	r6, [r4, #0]
 8010246:	464e      	mov	r6, r9
 8010248:	6165      	str	r5, [r4, #20]
 801024a:	1bed      	subs	r5, r5, r7
 801024c:	60a5      	str	r5, [r4, #8]
 801024e:	454e      	cmp	r6, r9
 8010250:	d900      	bls.n	8010254 <__ssputs_r+0x84>
 8010252:	464e      	mov	r6, r9
 8010254:	4632      	mov	r2, r6
 8010256:	4641      	mov	r1, r8
 8010258:	6820      	ldr	r0, [r4, #0]
 801025a:	f000 fadd 	bl	8010818 <memmove>
 801025e:	68a3      	ldr	r3, [r4, #8]
 8010260:	2000      	movs	r0, #0
 8010262:	1b9b      	subs	r3, r3, r6
 8010264:	60a3      	str	r3, [r4, #8]
 8010266:	6823      	ldr	r3, [r4, #0]
 8010268:	441e      	add	r6, r3
 801026a:	6026      	str	r6, [r4, #0]
 801026c:	e7dc      	b.n	8010228 <__ssputs_r+0x58>
 801026e:	462a      	mov	r2, r5
 8010270:	f000 fb3a 	bl	80108e8 <_realloc_r>
 8010274:	4606      	mov	r6, r0
 8010276:	2800      	cmp	r0, #0
 8010278:	d1e2      	bne.n	8010240 <__ssputs_r+0x70>
 801027a:	6921      	ldr	r1, [r4, #16]
 801027c:	4650      	mov	r0, sl
 801027e:	f000 fae7 	bl	8010850 <_free_r>
 8010282:	e7c8      	b.n	8010216 <__ssputs_r+0x46>

08010284 <_svfiprintf_r>:
 8010284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010288:	461d      	mov	r5, r3
 801028a:	898b      	ldrh	r3, [r1, #12]
 801028c:	b09d      	sub	sp, #116	; 0x74
 801028e:	061f      	lsls	r7, r3, #24
 8010290:	4680      	mov	r8, r0
 8010292:	460c      	mov	r4, r1
 8010294:	4616      	mov	r6, r2
 8010296:	d50f      	bpl.n	80102b8 <_svfiprintf_r+0x34>
 8010298:	690b      	ldr	r3, [r1, #16]
 801029a:	b96b      	cbnz	r3, 80102b8 <_svfiprintf_r+0x34>
 801029c:	2140      	movs	r1, #64	; 0x40
 801029e:	f7ff ff3d 	bl	801011c <_malloc_r>
 80102a2:	6020      	str	r0, [r4, #0]
 80102a4:	6120      	str	r0, [r4, #16]
 80102a6:	b928      	cbnz	r0, 80102b4 <_svfiprintf_r+0x30>
 80102a8:	230c      	movs	r3, #12
 80102aa:	f8c8 3000 	str.w	r3, [r8]
 80102ae:	f04f 30ff 	mov.w	r0, #4294967295
 80102b2:	e0c8      	b.n	8010446 <_svfiprintf_r+0x1c2>
 80102b4:	2340      	movs	r3, #64	; 0x40
 80102b6:	6163      	str	r3, [r4, #20]
 80102b8:	2300      	movs	r3, #0
 80102ba:	9309      	str	r3, [sp, #36]	; 0x24
 80102bc:	2320      	movs	r3, #32
 80102be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102c2:	2330      	movs	r3, #48	; 0x30
 80102c4:	f04f 0b01 	mov.w	fp, #1
 80102c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102cc:	9503      	str	r5, [sp, #12]
 80102ce:	4637      	mov	r7, r6
 80102d0:	463d      	mov	r5, r7
 80102d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80102d6:	b10b      	cbz	r3, 80102dc <_svfiprintf_r+0x58>
 80102d8:	2b25      	cmp	r3, #37	; 0x25
 80102da:	d13e      	bne.n	801035a <_svfiprintf_r+0xd6>
 80102dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80102e0:	d00b      	beq.n	80102fa <_svfiprintf_r+0x76>
 80102e2:	4653      	mov	r3, sl
 80102e4:	4632      	mov	r2, r6
 80102e6:	4621      	mov	r1, r4
 80102e8:	4640      	mov	r0, r8
 80102ea:	f7ff ff71 	bl	80101d0 <__ssputs_r>
 80102ee:	3001      	adds	r0, #1
 80102f0:	f000 80a4 	beq.w	801043c <_svfiprintf_r+0x1b8>
 80102f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102f6:	4453      	add	r3, sl
 80102f8:	9309      	str	r3, [sp, #36]	; 0x24
 80102fa:	783b      	ldrb	r3, [r7, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f000 809d 	beq.w	801043c <_svfiprintf_r+0x1b8>
 8010302:	2300      	movs	r3, #0
 8010304:	f04f 32ff 	mov.w	r2, #4294967295
 8010308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801030c:	9304      	str	r3, [sp, #16]
 801030e:	9307      	str	r3, [sp, #28]
 8010310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010314:	931a      	str	r3, [sp, #104]	; 0x68
 8010316:	462f      	mov	r7, r5
 8010318:	2205      	movs	r2, #5
 801031a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801031e:	4850      	ldr	r0, [pc, #320]	; (8010460 <_svfiprintf_r+0x1dc>)
 8010320:	f000 fa6c 	bl	80107fc <memchr>
 8010324:	9b04      	ldr	r3, [sp, #16]
 8010326:	b9d0      	cbnz	r0, 801035e <_svfiprintf_r+0xda>
 8010328:	06d9      	lsls	r1, r3, #27
 801032a:	bf44      	itt	mi
 801032c:	2220      	movmi	r2, #32
 801032e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010332:	071a      	lsls	r2, r3, #28
 8010334:	bf44      	itt	mi
 8010336:	222b      	movmi	r2, #43	; 0x2b
 8010338:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801033c:	782a      	ldrb	r2, [r5, #0]
 801033e:	2a2a      	cmp	r2, #42	; 0x2a
 8010340:	d015      	beq.n	801036e <_svfiprintf_r+0xea>
 8010342:	462f      	mov	r7, r5
 8010344:	2000      	movs	r0, #0
 8010346:	250a      	movs	r5, #10
 8010348:	9a07      	ldr	r2, [sp, #28]
 801034a:	4639      	mov	r1, r7
 801034c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010350:	3b30      	subs	r3, #48	; 0x30
 8010352:	2b09      	cmp	r3, #9
 8010354:	d94d      	bls.n	80103f2 <_svfiprintf_r+0x16e>
 8010356:	b1b8      	cbz	r0, 8010388 <_svfiprintf_r+0x104>
 8010358:	e00f      	b.n	801037a <_svfiprintf_r+0xf6>
 801035a:	462f      	mov	r7, r5
 801035c:	e7b8      	b.n	80102d0 <_svfiprintf_r+0x4c>
 801035e:	4a40      	ldr	r2, [pc, #256]	; (8010460 <_svfiprintf_r+0x1dc>)
 8010360:	463d      	mov	r5, r7
 8010362:	1a80      	subs	r0, r0, r2
 8010364:	fa0b f000 	lsl.w	r0, fp, r0
 8010368:	4318      	orrs	r0, r3
 801036a:	9004      	str	r0, [sp, #16]
 801036c:	e7d3      	b.n	8010316 <_svfiprintf_r+0x92>
 801036e:	9a03      	ldr	r2, [sp, #12]
 8010370:	1d11      	adds	r1, r2, #4
 8010372:	6812      	ldr	r2, [r2, #0]
 8010374:	9103      	str	r1, [sp, #12]
 8010376:	2a00      	cmp	r2, #0
 8010378:	db01      	blt.n	801037e <_svfiprintf_r+0xfa>
 801037a:	9207      	str	r2, [sp, #28]
 801037c:	e004      	b.n	8010388 <_svfiprintf_r+0x104>
 801037e:	4252      	negs	r2, r2
 8010380:	f043 0302 	orr.w	r3, r3, #2
 8010384:	9207      	str	r2, [sp, #28]
 8010386:	9304      	str	r3, [sp, #16]
 8010388:	783b      	ldrb	r3, [r7, #0]
 801038a:	2b2e      	cmp	r3, #46	; 0x2e
 801038c:	d10c      	bne.n	80103a8 <_svfiprintf_r+0x124>
 801038e:	787b      	ldrb	r3, [r7, #1]
 8010390:	2b2a      	cmp	r3, #42	; 0x2a
 8010392:	d133      	bne.n	80103fc <_svfiprintf_r+0x178>
 8010394:	9b03      	ldr	r3, [sp, #12]
 8010396:	3702      	adds	r7, #2
 8010398:	1d1a      	adds	r2, r3, #4
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	9203      	str	r2, [sp, #12]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	bfb8      	it	lt
 80103a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80103a6:	9305      	str	r3, [sp, #20]
 80103a8:	4d2e      	ldr	r5, [pc, #184]	; (8010464 <_svfiprintf_r+0x1e0>)
 80103aa:	2203      	movs	r2, #3
 80103ac:	7839      	ldrb	r1, [r7, #0]
 80103ae:	4628      	mov	r0, r5
 80103b0:	f000 fa24 	bl	80107fc <memchr>
 80103b4:	b138      	cbz	r0, 80103c6 <_svfiprintf_r+0x142>
 80103b6:	2340      	movs	r3, #64	; 0x40
 80103b8:	1b40      	subs	r0, r0, r5
 80103ba:	fa03 f000 	lsl.w	r0, r3, r0
 80103be:	9b04      	ldr	r3, [sp, #16]
 80103c0:	3701      	adds	r7, #1
 80103c2:	4303      	orrs	r3, r0
 80103c4:	9304      	str	r3, [sp, #16]
 80103c6:	7839      	ldrb	r1, [r7, #0]
 80103c8:	2206      	movs	r2, #6
 80103ca:	4827      	ldr	r0, [pc, #156]	; (8010468 <_svfiprintf_r+0x1e4>)
 80103cc:	1c7e      	adds	r6, r7, #1
 80103ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103d2:	f000 fa13 	bl	80107fc <memchr>
 80103d6:	2800      	cmp	r0, #0
 80103d8:	d038      	beq.n	801044c <_svfiprintf_r+0x1c8>
 80103da:	4b24      	ldr	r3, [pc, #144]	; (801046c <_svfiprintf_r+0x1e8>)
 80103dc:	bb13      	cbnz	r3, 8010424 <_svfiprintf_r+0x1a0>
 80103de:	9b03      	ldr	r3, [sp, #12]
 80103e0:	3307      	adds	r3, #7
 80103e2:	f023 0307 	bic.w	r3, r3, #7
 80103e6:	3308      	adds	r3, #8
 80103e8:	9303      	str	r3, [sp, #12]
 80103ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ec:	444b      	add	r3, r9
 80103ee:	9309      	str	r3, [sp, #36]	; 0x24
 80103f0:	e76d      	b.n	80102ce <_svfiprintf_r+0x4a>
 80103f2:	fb05 3202 	mla	r2, r5, r2, r3
 80103f6:	2001      	movs	r0, #1
 80103f8:	460f      	mov	r7, r1
 80103fa:	e7a6      	b.n	801034a <_svfiprintf_r+0xc6>
 80103fc:	2300      	movs	r3, #0
 80103fe:	250a      	movs	r5, #10
 8010400:	4619      	mov	r1, r3
 8010402:	3701      	adds	r7, #1
 8010404:	9305      	str	r3, [sp, #20]
 8010406:	4638      	mov	r0, r7
 8010408:	f810 2b01 	ldrb.w	r2, [r0], #1
 801040c:	3a30      	subs	r2, #48	; 0x30
 801040e:	2a09      	cmp	r2, #9
 8010410:	d903      	bls.n	801041a <_svfiprintf_r+0x196>
 8010412:	2b00      	cmp	r3, #0
 8010414:	d0c8      	beq.n	80103a8 <_svfiprintf_r+0x124>
 8010416:	9105      	str	r1, [sp, #20]
 8010418:	e7c6      	b.n	80103a8 <_svfiprintf_r+0x124>
 801041a:	fb05 2101 	mla	r1, r5, r1, r2
 801041e:	2301      	movs	r3, #1
 8010420:	4607      	mov	r7, r0
 8010422:	e7f0      	b.n	8010406 <_svfiprintf_r+0x182>
 8010424:	ab03      	add	r3, sp, #12
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	4622      	mov	r2, r4
 801042a:	4b11      	ldr	r3, [pc, #68]	; (8010470 <_svfiprintf_r+0x1ec>)
 801042c:	a904      	add	r1, sp, #16
 801042e:	4640      	mov	r0, r8
 8010430:	f3af 8000 	nop.w
 8010434:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010438:	4681      	mov	r9, r0
 801043a:	d1d6      	bne.n	80103ea <_svfiprintf_r+0x166>
 801043c:	89a3      	ldrh	r3, [r4, #12]
 801043e:	065b      	lsls	r3, r3, #25
 8010440:	f53f af35 	bmi.w	80102ae <_svfiprintf_r+0x2a>
 8010444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010446:	b01d      	add	sp, #116	; 0x74
 8010448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801044c:	ab03      	add	r3, sp, #12
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	4622      	mov	r2, r4
 8010452:	4b07      	ldr	r3, [pc, #28]	; (8010470 <_svfiprintf_r+0x1ec>)
 8010454:	a904      	add	r1, sp, #16
 8010456:	4640      	mov	r0, r8
 8010458:	f000 f882 	bl	8010560 <_printf_i>
 801045c:	e7ea      	b.n	8010434 <_svfiprintf_r+0x1b0>
 801045e:	bf00      	nop
 8010460:	08010cec 	.word	0x08010cec
 8010464:	08010cf2 	.word	0x08010cf2
 8010468:	08010cf6 	.word	0x08010cf6
 801046c:	00000000 	.word	0x00000000
 8010470:	080101d1 	.word	0x080101d1

08010474 <_printf_common>:
 8010474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010478:	4691      	mov	r9, r2
 801047a:	461f      	mov	r7, r3
 801047c:	688a      	ldr	r2, [r1, #8]
 801047e:	690b      	ldr	r3, [r1, #16]
 8010480:	4606      	mov	r6, r0
 8010482:	4293      	cmp	r3, r2
 8010484:	bfb8      	it	lt
 8010486:	4613      	movlt	r3, r2
 8010488:	f8c9 3000 	str.w	r3, [r9]
 801048c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010490:	460c      	mov	r4, r1
 8010492:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010496:	b112      	cbz	r2, 801049e <_printf_common+0x2a>
 8010498:	3301      	adds	r3, #1
 801049a:	f8c9 3000 	str.w	r3, [r9]
 801049e:	6823      	ldr	r3, [r4, #0]
 80104a0:	0699      	lsls	r1, r3, #26
 80104a2:	bf42      	ittt	mi
 80104a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80104a8:	3302      	addmi	r3, #2
 80104aa:	f8c9 3000 	strmi.w	r3, [r9]
 80104ae:	6825      	ldr	r5, [r4, #0]
 80104b0:	f015 0506 	ands.w	r5, r5, #6
 80104b4:	d107      	bne.n	80104c6 <_printf_common+0x52>
 80104b6:	f104 0a19 	add.w	sl, r4, #25
 80104ba:	68e3      	ldr	r3, [r4, #12]
 80104bc:	f8d9 2000 	ldr.w	r2, [r9]
 80104c0:	1a9b      	subs	r3, r3, r2
 80104c2:	42ab      	cmp	r3, r5
 80104c4:	dc29      	bgt.n	801051a <_printf_common+0xa6>
 80104c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80104ca:	6822      	ldr	r2, [r4, #0]
 80104cc:	3300      	adds	r3, #0
 80104ce:	bf18      	it	ne
 80104d0:	2301      	movne	r3, #1
 80104d2:	0692      	lsls	r2, r2, #26
 80104d4:	d42e      	bmi.n	8010534 <_printf_common+0xc0>
 80104d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104da:	4639      	mov	r1, r7
 80104dc:	4630      	mov	r0, r6
 80104de:	47c0      	blx	r8
 80104e0:	3001      	adds	r0, #1
 80104e2:	d021      	beq.n	8010528 <_printf_common+0xb4>
 80104e4:	6823      	ldr	r3, [r4, #0]
 80104e6:	68e5      	ldr	r5, [r4, #12]
 80104e8:	f003 0306 	and.w	r3, r3, #6
 80104ec:	2b04      	cmp	r3, #4
 80104ee:	bf18      	it	ne
 80104f0:	2500      	movne	r5, #0
 80104f2:	f8d9 2000 	ldr.w	r2, [r9]
 80104f6:	f04f 0900 	mov.w	r9, #0
 80104fa:	bf08      	it	eq
 80104fc:	1aad      	subeq	r5, r5, r2
 80104fe:	68a3      	ldr	r3, [r4, #8]
 8010500:	6922      	ldr	r2, [r4, #16]
 8010502:	bf08      	it	eq
 8010504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010508:	4293      	cmp	r3, r2
 801050a:	bfc4      	itt	gt
 801050c:	1a9b      	subgt	r3, r3, r2
 801050e:	18ed      	addgt	r5, r5, r3
 8010510:	341a      	adds	r4, #26
 8010512:	454d      	cmp	r5, r9
 8010514:	d11a      	bne.n	801054c <_printf_common+0xd8>
 8010516:	2000      	movs	r0, #0
 8010518:	e008      	b.n	801052c <_printf_common+0xb8>
 801051a:	2301      	movs	r3, #1
 801051c:	4652      	mov	r2, sl
 801051e:	4639      	mov	r1, r7
 8010520:	4630      	mov	r0, r6
 8010522:	47c0      	blx	r8
 8010524:	3001      	adds	r0, #1
 8010526:	d103      	bne.n	8010530 <_printf_common+0xbc>
 8010528:	f04f 30ff 	mov.w	r0, #4294967295
 801052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010530:	3501      	adds	r5, #1
 8010532:	e7c2      	b.n	80104ba <_printf_common+0x46>
 8010534:	2030      	movs	r0, #48	; 0x30
 8010536:	18e1      	adds	r1, r4, r3
 8010538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801053c:	1c5a      	adds	r2, r3, #1
 801053e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010542:	4422      	add	r2, r4
 8010544:	3302      	adds	r3, #2
 8010546:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801054a:	e7c4      	b.n	80104d6 <_printf_common+0x62>
 801054c:	2301      	movs	r3, #1
 801054e:	4622      	mov	r2, r4
 8010550:	4639      	mov	r1, r7
 8010552:	4630      	mov	r0, r6
 8010554:	47c0      	blx	r8
 8010556:	3001      	adds	r0, #1
 8010558:	d0e6      	beq.n	8010528 <_printf_common+0xb4>
 801055a:	f109 0901 	add.w	r9, r9, #1
 801055e:	e7d8      	b.n	8010512 <_printf_common+0x9e>

08010560 <_printf_i>:
 8010560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010564:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010568:	460c      	mov	r4, r1
 801056a:	7e09      	ldrb	r1, [r1, #24]
 801056c:	b085      	sub	sp, #20
 801056e:	296e      	cmp	r1, #110	; 0x6e
 8010570:	4617      	mov	r7, r2
 8010572:	4606      	mov	r6, r0
 8010574:	4698      	mov	r8, r3
 8010576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010578:	f000 80b3 	beq.w	80106e2 <_printf_i+0x182>
 801057c:	d822      	bhi.n	80105c4 <_printf_i+0x64>
 801057e:	2963      	cmp	r1, #99	; 0x63
 8010580:	d036      	beq.n	80105f0 <_printf_i+0x90>
 8010582:	d80a      	bhi.n	801059a <_printf_i+0x3a>
 8010584:	2900      	cmp	r1, #0
 8010586:	f000 80b9 	beq.w	80106fc <_printf_i+0x19c>
 801058a:	2958      	cmp	r1, #88	; 0x58
 801058c:	f000 8083 	beq.w	8010696 <_printf_i+0x136>
 8010590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010594:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010598:	e032      	b.n	8010600 <_printf_i+0xa0>
 801059a:	2964      	cmp	r1, #100	; 0x64
 801059c:	d001      	beq.n	80105a2 <_printf_i+0x42>
 801059e:	2969      	cmp	r1, #105	; 0x69
 80105a0:	d1f6      	bne.n	8010590 <_printf_i+0x30>
 80105a2:	6820      	ldr	r0, [r4, #0]
 80105a4:	6813      	ldr	r3, [r2, #0]
 80105a6:	0605      	lsls	r5, r0, #24
 80105a8:	f103 0104 	add.w	r1, r3, #4
 80105ac:	d52a      	bpl.n	8010604 <_printf_i+0xa4>
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	6011      	str	r1, [r2, #0]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	da03      	bge.n	80105be <_printf_i+0x5e>
 80105b6:	222d      	movs	r2, #45	; 0x2d
 80105b8:	425b      	negs	r3, r3
 80105ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80105be:	486f      	ldr	r0, [pc, #444]	; (801077c <_printf_i+0x21c>)
 80105c0:	220a      	movs	r2, #10
 80105c2:	e039      	b.n	8010638 <_printf_i+0xd8>
 80105c4:	2973      	cmp	r1, #115	; 0x73
 80105c6:	f000 809d 	beq.w	8010704 <_printf_i+0x1a4>
 80105ca:	d808      	bhi.n	80105de <_printf_i+0x7e>
 80105cc:	296f      	cmp	r1, #111	; 0x6f
 80105ce:	d020      	beq.n	8010612 <_printf_i+0xb2>
 80105d0:	2970      	cmp	r1, #112	; 0x70
 80105d2:	d1dd      	bne.n	8010590 <_printf_i+0x30>
 80105d4:	6823      	ldr	r3, [r4, #0]
 80105d6:	f043 0320 	orr.w	r3, r3, #32
 80105da:	6023      	str	r3, [r4, #0]
 80105dc:	e003      	b.n	80105e6 <_printf_i+0x86>
 80105de:	2975      	cmp	r1, #117	; 0x75
 80105e0:	d017      	beq.n	8010612 <_printf_i+0xb2>
 80105e2:	2978      	cmp	r1, #120	; 0x78
 80105e4:	d1d4      	bne.n	8010590 <_printf_i+0x30>
 80105e6:	2378      	movs	r3, #120	; 0x78
 80105e8:	4865      	ldr	r0, [pc, #404]	; (8010780 <_printf_i+0x220>)
 80105ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105ee:	e055      	b.n	801069c <_printf_i+0x13c>
 80105f0:	6813      	ldr	r3, [r2, #0]
 80105f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105f6:	1d19      	adds	r1, r3, #4
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	6011      	str	r1, [r2, #0]
 80105fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010600:	2301      	movs	r3, #1
 8010602:	e08c      	b.n	801071e <_printf_i+0x1be>
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f010 0f40 	tst.w	r0, #64	; 0x40
 801060a:	6011      	str	r1, [r2, #0]
 801060c:	bf18      	it	ne
 801060e:	b21b      	sxthne	r3, r3
 8010610:	e7cf      	b.n	80105b2 <_printf_i+0x52>
 8010612:	6813      	ldr	r3, [r2, #0]
 8010614:	6825      	ldr	r5, [r4, #0]
 8010616:	1d18      	adds	r0, r3, #4
 8010618:	6010      	str	r0, [r2, #0]
 801061a:	0628      	lsls	r0, r5, #24
 801061c:	d501      	bpl.n	8010622 <_printf_i+0xc2>
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	e002      	b.n	8010628 <_printf_i+0xc8>
 8010622:	0668      	lsls	r0, r5, #25
 8010624:	d5fb      	bpl.n	801061e <_printf_i+0xbe>
 8010626:	881b      	ldrh	r3, [r3, #0]
 8010628:	296f      	cmp	r1, #111	; 0x6f
 801062a:	bf14      	ite	ne
 801062c:	220a      	movne	r2, #10
 801062e:	2208      	moveq	r2, #8
 8010630:	4852      	ldr	r0, [pc, #328]	; (801077c <_printf_i+0x21c>)
 8010632:	2100      	movs	r1, #0
 8010634:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010638:	6865      	ldr	r5, [r4, #4]
 801063a:	2d00      	cmp	r5, #0
 801063c:	60a5      	str	r5, [r4, #8]
 801063e:	f2c0 8095 	blt.w	801076c <_printf_i+0x20c>
 8010642:	6821      	ldr	r1, [r4, #0]
 8010644:	f021 0104 	bic.w	r1, r1, #4
 8010648:	6021      	str	r1, [r4, #0]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d13d      	bne.n	80106ca <_printf_i+0x16a>
 801064e:	2d00      	cmp	r5, #0
 8010650:	f040 808e 	bne.w	8010770 <_printf_i+0x210>
 8010654:	4665      	mov	r5, ip
 8010656:	2a08      	cmp	r2, #8
 8010658:	d10b      	bne.n	8010672 <_printf_i+0x112>
 801065a:	6823      	ldr	r3, [r4, #0]
 801065c:	07db      	lsls	r3, r3, #31
 801065e:	d508      	bpl.n	8010672 <_printf_i+0x112>
 8010660:	6923      	ldr	r3, [r4, #16]
 8010662:	6862      	ldr	r2, [r4, #4]
 8010664:	429a      	cmp	r2, r3
 8010666:	bfde      	ittt	le
 8010668:	2330      	movle	r3, #48	; 0x30
 801066a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801066e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010672:	ebac 0305 	sub.w	r3, ip, r5
 8010676:	6123      	str	r3, [r4, #16]
 8010678:	f8cd 8000 	str.w	r8, [sp]
 801067c:	463b      	mov	r3, r7
 801067e:	aa03      	add	r2, sp, #12
 8010680:	4621      	mov	r1, r4
 8010682:	4630      	mov	r0, r6
 8010684:	f7ff fef6 	bl	8010474 <_printf_common>
 8010688:	3001      	adds	r0, #1
 801068a:	d14d      	bne.n	8010728 <_printf_i+0x1c8>
 801068c:	f04f 30ff 	mov.w	r0, #4294967295
 8010690:	b005      	add	sp, #20
 8010692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010696:	4839      	ldr	r0, [pc, #228]	; (801077c <_printf_i+0x21c>)
 8010698:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801069c:	6813      	ldr	r3, [r2, #0]
 801069e:	6821      	ldr	r1, [r4, #0]
 80106a0:	1d1d      	adds	r5, r3, #4
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	6015      	str	r5, [r2, #0]
 80106a6:	060a      	lsls	r2, r1, #24
 80106a8:	d50b      	bpl.n	80106c2 <_printf_i+0x162>
 80106aa:	07ca      	lsls	r2, r1, #31
 80106ac:	bf44      	itt	mi
 80106ae:	f041 0120 	orrmi.w	r1, r1, #32
 80106b2:	6021      	strmi	r1, [r4, #0]
 80106b4:	b91b      	cbnz	r3, 80106be <_printf_i+0x15e>
 80106b6:	6822      	ldr	r2, [r4, #0]
 80106b8:	f022 0220 	bic.w	r2, r2, #32
 80106bc:	6022      	str	r2, [r4, #0]
 80106be:	2210      	movs	r2, #16
 80106c0:	e7b7      	b.n	8010632 <_printf_i+0xd2>
 80106c2:	064d      	lsls	r5, r1, #25
 80106c4:	bf48      	it	mi
 80106c6:	b29b      	uxthmi	r3, r3
 80106c8:	e7ef      	b.n	80106aa <_printf_i+0x14a>
 80106ca:	4665      	mov	r5, ip
 80106cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80106d0:	fb02 3311 	mls	r3, r2, r1, r3
 80106d4:	5cc3      	ldrb	r3, [r0, r3]
 80106d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80106da:	460b      	mov	r3, r1
 80106dc:	2900      	cmp	r1, #0
 80106de:	d1f5      	bne.n	80106cc <_printf_i+0x16c>
 80106e0:	e7b9      	b.n	8010656 <_printf_i+0xf6>
 80106e2:	6813      	ldr	r3, [r2, #0]
 80106e4:	6825      	ldr	r5, [r4, #0]
 80106e6:	1d18      	adds	r0, r3, #4
 80106e8:	6961      	ldr	r1, [r4, #20]
 80106ea:	6010      	str	r0, [r2, #0]
 80106ec:	0628      	lsls	r0, r5, #24
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	d501      	bpl.n	80106f6 <_printf_i+0x196>
 80106f2:	6019      	str	r1, [r3, #0]
 80106f4:	e002      	b.n	80106fc <_printf_i+0x19c>
 80106f6:	066a      	lsls	r2, r5, #25
 80106f8:	d5fb      	bpl.n	80106f2 <_printf_i+0x192>
 80106fa:	8019      	strh	r1, [r3, #0]
 80106fc:	2300      	movs	r3, #0
 80106fe:	4665      	mov	r5, ip
 8010700:	6123      	str	r3, [r4, #16]
 8010702:	e7b9      	b.n	8010678 <_printf_i+0x118>
 8010704:	6813      	ldr	r3, [r2, #0]
 8010706:	1d19      	adds	r1, r3, #4
 8010708:	6011      	str	r1, [r2, #0]
 801070a:	681d      	ldr	r5, [r3, #0]
 801070c:	6862      	ldr	r2, [r4, #4]
 801070e:	2100      	movs	r1, #0
 8010710:	4628      	mov	r0, r5
 8010712:	f000 f873 	bl	80107fc <memchr>
 8010716:	b108      	cbz	r0, 801071c <_printf_i+0x1bc>
 8010718:	1b40      	subs	r0, r0, r5
 801071a:	6060      	str	r0, [r4, #4]
 801071c:	6863      	ldr	r3, [r4, #4]
 801071e:	6123      	str	r3, [r4, #16]
 8010720:	2300      	movs	r3, #0
 8010722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010726:	e7a7      	b.n	8010678 <_printf_i+0x118>
 8010728:	6923      	ldr	r3, [r4, #16]
 801072a:	462a      	mov	r2, r5
 801072c:	4639      	mov	r1, r7
 801072e:	4630      	mov	r0, r6
 8010730:	47c0      	blx	r8
 8010732:	3001      	adds	r0, #1
 8010734:	d0aa      	beq.n	801068c <_printf_i+0x12c>
 8010736:	6823      	ldr	r3, [r4, #0]
 8010738:	079b      	lsls	r3, r3, #30
 801073a:	d413      	bmi.n	8010764 <_printf_i+0x204>
 801073c:	68e0      	ldr	r0, [r4, #12]
 801073e:	9b03      	ldr	r3, [sp, #12]
 8010740:	4298      	cmp	r0, r3
 8010742:	bfb8      	it	lt
 8010744:	4618      	movlt	r0, r3
 8010746:	e7a3      	b.n	8010690 <_printf_i+0x130>
 8010748:	2301      	movs	r3, #1
 801074a:	464a      	mov	r2, r9
 801074c:	4639      	mov	r1, r7
 801074e:	4630      	mov	r0, r6
 8010750:	47c0      	blx	r8
 8010752:	3001      	adds	r0, #1
 8010754:	d09a      	beq.n	801068c <_printf_i+0x12c>
 8010756:	3501      	adds	r5, #1
 8010758:	68e3      	ldr	r3, [r4, #12]
 801075a:	9a03      	ldr	r2, [sp, #12]
 801075c:	1a9b      	subs	r3, r3, r2
 801075e:	42ab      	cmp	r3, r5
 8010760:	dcf2      	bgt.n	8010748 <_printf_i+0x1e8>
 8010762:	e7eb      	b.n	801073c <_printf_i+0x1dc>
 8010764:	2500      	movs	r5, #0
 8010766:	f104 0919 	add.w	r9, r4, #25
 801076a:	e7f5      	b.n	8010758 <_printf_i+0x1f8>
 801076c:	2b00      	cmp	r3, #0
 801076e:	d1ac      	bne.n	80106ca <_printf_i+0x16a>
 8010770:	7803      	ldrb	r3, [r0, #0]
 8010772:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010776:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801077a:	e76c      	b.n	8010656 <_printf_i+0xf6>
 801077c:	08010cfd 	.word	0x08010cfd
 8010780:	08010d0e 	.word	0x08010d0e

08010784 <_sbrk_r>:
 8010784:	b538      	push	{r3, r4, r5, lr}
 8010786:	2300      	movs	r3, #0
 8010788:	4c05      	ldr	r4, [pc, #20]	; (80107a0 <_sbrk_r+0x1c>)
 801078a:	4605      	mov	r5, r0
 801078c:	4608      	mov	r0, r1
 801078e:	6023      	str	r3, [r4, #0]
 8010790:	f7f5 fca8 	bl	80060e4 <_sbrk>
 8010794:	1c43      	adds	r3, r0, #1
 8010796:	d102      	bne.n	801079e <_sbrk_r+0x1a>
 8010798:	6823      	ldr	r3, [r4, #0]
 801079a:	b103      	cbz	r3, 801079e <_sbrk_r+0x1a>
 801079c:	602b      	str	r3, [r5, #0]
 801079e:	bd38      	pop	{r3, r4, r5, pc}
 80107a0:	20002588 	.word	0x20002588

080107a4 <nanf>:
 80107a4:	4800      	ldr	r0, [pc, #0]	; (80107a8 <nanf+0x4>)
 80107a6:	4770      	bx	lr
 80107a8:	7fc00000 	.word	0x7fc00000

080107ac <strncmp>:
 80107ac:	b510      	push	{r4, lr}
 80107ae:	b16a      	cbz	r2, 80107cc <strncmp+0x20>
 80107b0:	3901      	subs	r1, #1
 80107b2:	1884      	adds	r4, r0, r2
 80107b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80107b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80107bc:	4293      	cmp	r3, r2
 80107be:	d103      	bne.n	80107c8 <strncmp+0x1c>
 80107c0:	42a0      	cmp	r0, r4
 80107c2:	d001      	beq.n	80107c8 <strncmp+0x1c>
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1f5      	bne.n	80107b4 <strncmp+0x8>
 80107c8:	1a98      	subs	r0, r3, r2
 80107ca:	bd10      	pop	{r4, pc}
 80107cc:	4610      	mov	r0, r2
 80107ce:	e7fc      	b.n	80107ca <strncmp+0x1e>

080107d0 <__ascii_wctomb>:
 80107d0:	b149      	cbz	r1, 80107e6 <__ascii_wctomb+0x16>
 80107d2:	2aff      	cmp	r2, #255	; 0xff
 80107d4:	bf8b      	itete	hi
 80107d6:	238a      	movhi	r3, #138	; 0x8a
 80107d8:	700a      	strbls	r2, [r1, #0]
 80107da:	6003      	strhi	r3, [r0, #0]
 80107dc:	2001      	movls	r0, #1
 80107de:	bf88      	it	hi
 80107e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80107e4:	4770      	bx	lr
 80107e6:	4608      	mov	r0, r1
 80107e8:	4770      	bx	lr
	...

080107ec <malloc>:
 80107ec:	4b02      	ldr	r3, [pc, #8]	; (80107f8 <malloc+0xc>)
 80107ee:	4601      	mov	r1, r0
 80107f0:	6818      	ldr	r0, [r3, #0]
 80107f2:	f7ff bc93 	b.w	801011c <_malloc_r>
 80107f6:	bf00      	nop
 80107f8:	200001a4 	.word	0x200001a4

080107fc <memchr>:
 80107fc:	b510      	push	{r4, lr}
 80107fe:	b2c9      	uxtb	r1, r1
 8010800:	4402      	add	r2, r0
 8010802:	4290      	cmp	r0, r2
 8010804:	4603      	mov	r3, r0
 8010806:	d101      	bne.n	801080c <memchr+0x10>
 8010808:	2300      	movs	r3, #0
 801080a:	e003      	b.n	8010814 <memchr+0x18>
 801080c:	781c      	ldrb	r4, [r3, #0]
 801080e:	3001      	adds	r0, #1
 8010810:	428c      	cmp	r4, r1
 8010812:	d1f6      	bne.n	8010802 <memchr+0x6>
 8010814:	4618      	mov	r0, r3
 8010816:	bd10      	pop	{r4, pc}

08010818 <memmove>:
 8010818:	4288      	cmp	r0, r1
 801081a:	b510      	push	{r4, lr}
 801081c:	eb01 0302 	add.w	r3, r1, r2
 8010820:	d807      	bhi.n	8010832 <memmove+0x1a>
 8010822:	1e42      	subs	r2, r0, #1
 8010824:	4299      	cmp	r1, r3
 8010826:	d00a      	beq.n	801083e <memmove+0x26>
 8010828:	f811 4b01 	ldrb.w	r4, [r1], #1
 801082c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010830:	e7f8      	b.n	8010824 <memmove+0xc>
 8010832:	4283      	cmp	r3, r0
 8010834:	d9f5      	bls.n	8010822 <memmove+0xa>
 8010836:	1881      	adds	r1, r0, r2
 8010838:	1ad2      	subs	r2, r2, r3
 801083a:	42d3      	cmn	r3, r2
 801083c:	d100      	bne.n	8010840 <memmove+0x28>
 801083e:	bd10      	pop	{r4, pc}
 8010840:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010844:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010848:	e7f7      	b.n	801083a <memmove+0x22>

0801084a <__malloc_lock>:
 801084a:	4770      	bx	lr

0801084c <__malloc_unlock>:
 801084c:	4770      	bx	lr
	...

08010850 <_free_r>:
 8010850:	b538      	push	{r3, r4, r5, lr}
 8010852:	4605      	mov	r5, r0
 8010854:	2900      	cmp	r1, #0
 8010856:	d043      	beq.n	80108e0 <_free_r+0x90>
 8010858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801085c:	1f0c      	subs	r4, r1, #4
 801085e:	2b00      	cmp	r3, #0
 8010860:	bfb8      	it	lt
 8010862:	18e4      	addlt	r4, r4, r3
 8010864:	f7ff fff1 	bl	801084a <__malloc_lock>
 8010868:	4a1e      	ldr	r2, [pc, #120]	; (80108e4 <_free_r+0x94>)
 801086a:	6813      	ldr	r3, [r2, #0]
 801086c:	4610      	mov	r0, r2
 801086e:	b933      	cbnz	r3, 801087e <_free_r+0x2e>
 8010870:	6063      	str	r3, [r4, #4]
 8010872:	6014      	str	r4, [r2, #0]
 8010874:	4628      	mov	r0, r5
 8010876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801087a:	f7ff bfe7 	b.w	801084c <__malloc_unlock>
 801087e:	42a3      	cmp	r3, r4
 8010880:	d90b      	bls.n	801089a <_free_r+0x4a>
 8010882:	6821      	ldr	r1, [r4, #0]
 8010884:	1862      	adds	r2, r4, r1
 8010886:	4293      	cmp	r3, r2
 8010888:	bf01      	itttt	eq
 801088a:	681a      	ldreq	r2, [r3, #0]
 801088c:	685b      	ldreq	r3, [r3, #4]
 801088e:	1852      	addeq	r2, r2, r1
 8010890:	6022      	streq	r2, [r4, #0]
 8010892:	6063      	str	r3, [r4, #4]
 8010894:	6004      	str	r4, [r0, #0]
 8010896:	e7ed      	b.n	8010874 <_free_r+0x24>
 8010898:	4613      	mov	r3, r2
 801089a:	685a      	ldr	r2, [r3, #4]
 801089c:	b10a      	cbz	r2, 80108a2 <_free_r+0x52>
 801089e:	42a2      	cmp	r2, r4
 80108a0:	d9fa      	bls.n	8010898 <_free_r+0x48>
 80108a2:	6819      	ldr	r1, [r3, #0]
 80108a4:	1858      	adds	r0, r3, r1
 80108a6:	42a0      	cmp	r0, r4
 80108a8:	d10b      	bne.n	80108c2 <_free_r+0x72>
 80108aa:	6820      	ldr	r0, [r4, #0]
 80108ac:	4401      	add	r1, r0
 80108ae:	1858      	adds	r0, r3, r1
 80108b0:	4282      	cmp	r2, r0
 80108b2:	6019      	str	r1, [r3, #0]
 80108b4:	d1de      	bne.n	8010874 <_free_r+0x24>
 80108b6:	6810      	ldr	r0, [r2, #0]
 80108b8:	6852      	ldr	r2, [r2, #4]
 80108ba:	4401      	add	r1, r0
 80108bc:	6019      	str	r1, [r3, #0]
 80108be:	605a      	str	r2, [r3, #4]
 80108c0:	e7d8      	b.n	8010874 <_free_r+0x24>
 80108c2:	d902      	bls.n	80108ca <_free_r+0x7a>
 80108c4:	230c      	movs	r3, #12
 80108c6:	602b      	str	r3, [r5, #0]
 80108c8:	e7d4      	b.n	8010874 <_free_r+0x24>
 80108ca:	6820      	ldr	r0, [r4, #0]
 80108cc:	1821      	adds	r1, r4, r0
 80108ce:	428a      	cmp	r2, r1
 80108d0:	bf01      	itttt	eq
 80108d2:	6811      	ldreq	r1, [r2, #0]
 80108d4:	6852      	ldreq	r2, [r2, #4]
 80108d6:	1809      	addeq	r1, r1, r0
 80108d8:	6021      	streq	r1, [r4, #0]
 80108da:	6062      	str	r2, [r4, #4]
 80108dc:	605c      	str	r4, [r3, #4]
 80108de:	e7c9      	b.n	8010874 <_free_r+0x24>
 80108e0:	bd38      	pop	{r3, r4, r5, pc}
 80108e2:	bf00      	nop
 80108e4:	20000eec 	.word	0x20000eec

080108e8 <_realloc_r>:
 80108e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ea:	4607      	mov	r7, r0
 80108ec:	4614      	mov	r4, r2
 80108ee:	460e      	mov	r6, r1
 80108f0:	b921      	cbnz	r1, 80108fc <_realloc_r+0x14>
 80108f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80108f6:	4611      	mov	r1, r2
 80108f8:	f7ff bc10 	b.w	801011c <_malloc_r>
 80108fc:	b922      	cbnz	r2, 8010908 <_realloc_r+0x20>
 80108fe:	f7ff ffa7 	bl	8010850 <_free_r>
 8010902:	4625      	mov	r5, r4
 8010904:	4628      	mov	r0, r5
 8010906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010908:	f000 f814 	bl	8010934 <_malloc_usable_size_r>
 801090c:	42a0      	cmp	r0, r4
 801090e:	d20f      	bcs.n	8010930 <_realloc_r+0x48>
 8010910:	4621      	mov	r1, r4
 8010912:	4638      	mov	r0, r7
 8010914:	f7ff fc02 	bl	801011c <_malloc_r>
 8010918:	4605      	mov	r5, r0
 801091a:	2800      	cmp	r0, #0
 801091c:	d0f2      	beq.n	8010904 <_realloc_r+0x1c>
 801091e:	4631      	mov	r1, r6
 8010920:	4622      	mov	r2, r4
 8010922:	f7fe ffea 	bl	800f8fa <memcpy>
 8010926:	4631      	mov	r1, r6
 8010928:	4638      	mov	r0, r7
 801092a:	f7ff ff91 	bl	8010850 <_free_r>
 801092e:	e7e9      	b.n	8010904 <_realloc_r+0x1c>
 8010930:	4635      	mov	r5, r6
 8010932:	e7e7      	b.n	8010904 <_realloc_r+0x1c>

08010934 <_malloc_usable_size_r>:
 8010934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010938:	1f18      	subs	r0, r3, #4
 801093a:	2b00      	cmp	r3, #0
 801093c:	bfbc      	itt	lt
 801093e:	580b      	ldrlt	r3, [r1, r0]
 8010940:	18c0      	addlt	r0, r0, r3
 8010942:	4770      	bx	lr

08010944 <_init>:
 8010944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010946:	bf00      	nop
 8010948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801094a:	bc08      	pop	{r3}
 801094c:	469e      	mov	lr, r3
 801094e:	4770      	bx	lr

08010950 <_fini>:
 8010950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010952:	bf00      	nop
 8010954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010956:	bc08      	pop	{r3}
 8010958:	469e      	mov	lr, r3
 801095a:	4770      	bx	lr
