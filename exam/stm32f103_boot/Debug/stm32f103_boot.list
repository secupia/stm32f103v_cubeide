
stm32f103_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08008ec8  08008ec8  00018ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800904c  0800904c  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800904c  0800904c  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800904c  0800904c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800904c  0800904c  0001904c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009050  08009050  00019050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e98  20000208  08009258  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200020a0  08009258  000220a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002568b  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005956  00000000  00000000  000458b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  0004b210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  0004c518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dac3  00000000  00000000  0004d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b9bf  00000000  00000000  0006b06b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f34a  00000000  00000000  00086a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00105d74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000504c  00000000  00000000  00105df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000208 	.word	0x20000208
 8000200:	00000000 	.word	0x00000000
 8000204:	08008eb0 	.word	0x08008eb0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000020c 	.word	0x2000020c
 8000220:	08008eb0 	.word	0x08008eb0

08000224 <apInit>:
#include "ap.h"



void apInit(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);  // USB
 8000228:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800022c:	2000      	movs	r0, #0
 800022e:	f000 fdff 	bl	8000e30 <uartOpen>
  uartOpen(_DEF_UART2, 57600);  // UART1
 8000232:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000236:	2001      	movs	r0, #1
 8000238:	f000 fdfa 	bl	8000e30 <uartOpen>
}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}

08000240 <apMain>:

void apMain(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b08c      	sub	sp, #48	; 0x30
 8000244:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8000246:	f000 f8de 	bl	8000406 <millis>
 800024a:	62f8      	str	r0, [r7, #44]	; 0x2c

  while(1)
  {
    if(millis()-pre_time >= 500)
 800024c:	f000 f8db 	bl	8000406 <millis>
 8000250:	4602      	mov	r2, r0
 8000252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800025a:	d305      	bcc.n	8000268 <apMain+0x28>
    {
      pre_time = millis();
 800025c:	f000 f8d3 	bl	8000406 <millis>
 8000260:	62f8      	str	r0, [r7, #44]	; 0x2c
      ledToggle(_DEF_LED3);
 8000262:	2002      	movs	r0, #2
 8000264:	f000 fd0e 	bl	8000c84 <ledToggle>
      //uartPrintf(_DEF_UART2, "Uart1 %d \n", millis());
      //printf("printf test \n");
      //logPrintf("logPrintf test %d\n", (int)millis());
    }

    if(uartAvailable(_DEF_UART1) > 0)
 8000268:	2000      	movs	r0, #0
 800026a:	f000 fe77 	bl	8000f5c <uartAvailable>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d0eb      	beq.n	800024c <apMain+0xc>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 8000274:	2000      	movs	r0, #0
 8000276:	f000 fea3 	bl	8000fc0 <uartRead>
 800027a:	4603      	mov	r3, r0
 800027c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if(rx_data == '1')
 8000280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000284:	2b31      	cmp	r3, #49	; 0x31
 8000286:	d11e      	bne.n	80002c6 <apMain+0x86>
      {
        uint8_t buf[32];

        logPrintf("Read... \n");
 8000288:	482d      	ldr	r0, [pc, #180]	; (8000340 <apMain+0x100>)
 800028a:	f007 ff33 	bl	80080f4 <puts>

        flashRead(0x08000000 + (60*2048), buf, 32);
 800028e:	463b      	mov	r3, r7
 8000290:	2220      	movs	r2, #32
 8000292:	4619      	mov	r1, r3
 8000294:	482b      	ldr	r0, [pc, #172]	; (8000344 <apMain+0x104>)
 8000296:	f000 fc0d 	bl	8000ab4 <flashRead>

        for(int i=0; i<32; i++)
 800029a:	2300      	movs	r3, #0
 800029c:	62bb      	str	r3, [r7, #40]	; 0x28
 800029e:	e00f      	b.n	80002c0 <apMain+0x80>
        {
          logPrintf("0x%X : 0x%X\n", 0x08000000 + (60*2048)+i, buf[i]);
 80002a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002a2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80002a6:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
 80002aa:	4639      	mov	r1, r7
 80002ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80002ae:	440a      	add	r2, r1
 80002b0:	7812      	ldrb	r2, [r2, #0]
 80002b2:	4619      	mov	r1, r3
 80002b4:	4824      	ldr	r0, [pc, #144]	; (8000348 <apMain+0x108>)
 80002b6:	f007 fea9 	bl	800800c <iprintf>
        for(int i=0; i<32; i++)
 80002ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002bc:	3301      	adds	r3, #1
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
 80002c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002c2:	2b1f      	cmp	r3, #31
 80002c4:	ddec      	ble.n	80002a0 <apMain+0x60>
        }
      }

      if(rx_data == '2')
 80002c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80002ca:	2b32      	cmp	r3, #50	; 0x32
 80002cc:	d110      	bne.n	80002f0 <apMain+0xb0>
      {
        logPrintf("Erase... \n");
 80002ce:	481f      	ldr	r0, [pc, #124]	; (800034c <apMain+0x10c>)
 80002d0:	f007 ff10 	bl	80080f4 <puts>

        if(flashErase(0x08000000 + (60*2048), 32) == true)
 80002d4:	2120      	movs	r1, #32
 80002d6:	481b      	ldr	r0, [pc, #108]	; (8000344 <apMain+0x104>)
 80002d8:	f000 fb50 	bl	800097c <flashErase>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d003      	beq.n	80002ea <apMain+0xaa>
        {
          logPrintf("Erase OK\n");
 80002e2:	481b      	ldr	r0, [pc, #108]	; (8000350 <apMain+0x110>)
 80002e4:	f007 ff06 	bl	80080f4 <puts>
 80002e8:	e002      	b.n	80002f0 <apMain+0xb0>
        }
        else
        {
          logPrintf("Erase Fail\n");
 80002ea:	481a      	ldr	r0, [pc, #104]	; (8000354 <apMain+0x114>)
 80002ec:	f007 ff02 	bl	80080f4 <puts>
        }
      }

      if(rx_data == '3')
 80002f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80002f4:	2b33      	cmp	r3, #51	; 0x33
 80002f6:	d1a9      	bne.n	800024c <apMain+0xc>
      {
        uint8_t buf[32];

        for(int i=0; i<32; i++)
 80002f8:	2300      	movs	r3, #0
 80002fa:	627b      	str	r3, [r7, #36]	; 0x24
 80002fc:	e009      	b.n	8000312 <apMain+0xd2>
        {
          buf[i] = i;
 80002fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000300:	b2d9      	uxtb	r1, r3
 8000302:	463a      	mov	r2, r7
 8000304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000306:	4413      	add	r3, r2
 8000308:	460a      	mov	r2, r1
 800030a:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<32; i++)
 800030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030e:	3301      	adds	r3, #1
 8000310:	627b      	str	r3, [r7, #36]	; 0x24
 8000312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000314:	2b1f      	cmp	r3, #31
 8000316:	ddf2      	ble.n	80002fe <apMain+0xbe>
        }

        logPrintf("Write... \n");
 8000318:	480f      	ldr	r0, [pc, #60]	; (8000358 <apMain+0x118>)
 800031a:	f007 feeb 	bl	80080f4 <puts>

        if(flashWrite(0x08000000 + (60*2048), buf, 32) == true)
 800031e:	463b      	mov	r3, r7
 8000320:	2220      	movs	r2, #32
 8000322:	4619      	mov	r1, r3
 8000324:	4807      	ldr	r0, [pc, #28]	; (8000344 <apMain+0x104>)
 8000326:	f000 fb7f 	bl	8000a28 <flashWrite>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d003      	beq.n	8000338 <apMain+0xf8>
        {
          logPrintf("Write OK\n");
 8000330:	480a      	ldr	r0, [pc, #40]	; (800035c <apMain+0x11c>)
 8000332:	f007 fedf 	bl	80080f4 <puts>
 8000336:	e789      	b.n	800024c <apMain+0xc>
        }
        else
        {
          logPrintf("Write Fail\n");
 8000338:	4809      	ldr	r0, [pc, #36]	; (8000360 <apMain+0x120>)
 800033a:	f007 fedb 	bl	80080f4 <puts>
    if(millis()-pre_time >= 500)
 800033e:	e785      	b.n	800024c <apMain+0xc>
 8000340:	08008ec8 	.word	0x08008ec8
 8000344:	0801e000 	.word	0x0801e000
 8000348:	08008ed4 	.word	0x08008ed4
 800034c:	08008ee4 	.word	0x08008ee4
 8000350:	08008ef0 	.word	0x08008ef0
 8000354:	08008efc 	.word	0x08008efc
 8000358:	08008f08 	.word	0x08008f08
 800035c:	08008f14 	.word	0x08008f14
 8000360:	08008f20 	.word	0x08008f20

08000364 <bspInit>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


void bspInit(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
  HAL_Init();
 800036a:	f000 ff63 	bl	8001234 <HAL_Init>
  SystemClock_Config();
 800036e:	f000 f860 	bl	8000432 <SystemClock_Config>

  MX_GPIO_Init();
 8000372:	f000 f8bf 	bl	80004f4 <MX_GPIO_Init>


  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000376:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <bspInit+0x84>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <bspInit+0x84>)
 800037c:	f043 0320 	orr.w	r3, r3, #32
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <bspInit+0x84>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0320 	and.w	r3, r3, #32
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <bspInit+0x84>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <bspInit+0x84>)
 8000394:	f043 0304 	orr.w	r3, r3, #4
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <bspInit+0x84>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0304 	and.w	r3, r3, #4
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	f107 0308 	add.w	r3, r7, #8
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80003ba:	2311      	movs	r3, #17
 80003bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c2:	2302      	movs	r3, #2
 80003c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c6:	f107 0308 	add.w	r3, r7, #8
 80003ca:	4619      	mov	r1, r3
 80003cc:	4807      	ldr	r0, [pc, #28]	; (80003ec <bspInit+0x88>)
 80003ce:	f001 ffa7 	bl	8002320 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d8:	4804      	ldr	r0, [pc, #16]	; (80003ec <bspInit+0x88>)
 80003da:	f002 f9e1 	bl	80027a0 <HAL_GPIO_WritePin>

}
 80003de:	bf00      	nop
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010800 	.word	0x40010800

080003f0 <delay>:

void delay(uint32_t ms)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80003f8:	6878      	ldr	r0, [r7, #4]
 80003fa:	f000 ff7d 	bl	80012f8 <HAL_Delay>
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <millis>:

uint32_t millis(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800040a:	f000 ff6b 	bl	80012e4 <HAL_GetTick>
 800040e:	4603      	mov	r3, r0
}
 8000410:	4618      	mov	r0, r3
 8000412:	bd80      	pop	{r7, pc}

08000414 <__io_putchar>:

int __io_putchar(int ch)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  // Send character to USB printf
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2201      	movs	r2, #1
 8000420:	4619      	mov	r1, r3
 8000422:	2000      	movs	r0, #0
 8000424:	f000 fdee 	bl	8001004 <uartWrite>
  //uartWrite(_DEF_UART2, (uint8_t *)&ch, 1);

  return 1;
 8000428:	2301      	movs	r3, #1
}
 800042a:	4618      	mov	r0, r3
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b096      	sub	sp, #88	; 0x58
 8000436:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000438:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800043c:	2228      	movs	r2, #40	; 0x28
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f007 fddb 	bl	8007ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
 8000464:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000466:	2305      	movs	r3, #5
 8000468:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000474:	2301      	movs	r3, #1
 8000476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000478:	2301      	movs	r3, #1
 800047a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047c:	2302      	movs	r3, #2
 800047e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000484:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000486:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800048a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000490:	4618      	mov	r0, r3
 8000492:	f003 f90d 	bl	80036b0 <HAL_RCC_OscConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800049c:	f000 f86a 	bl	8000574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	230f      	movs	r3, #15
 80004a2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a4:	2302      	movs	r3, #2
 80004a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b6:	f107 031c 	add.w	r3, r7, #28
 80004ba:	2102      	movs	r1, #2
 80004bc:	4618      	mov	r0, r3
 80004be:	f003 fb5b 	bl	8003b78 <HAL_RCC_ClockConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004c8:	f000 f854 	bl	8000574 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80004cc:	2311      	movs	r3, #17
 80004ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80004d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4618      	mov	r0, r3
 80004de:	f003 fd09 	bl	8003ef4 <HAL_RCCEx_PeriphCLKConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0xba>
  {
    Error_Handler();
 80004e8:	f000 f844 	bl	8000574 <Error_Handler>
  }
}
 80004ec:	bf00      	nop
 80004ee:	3758      	adds	r7, #88	; 0x58
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0308 	add.w	r3, r7, #8
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_GPIO_Init+0x78>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a17      	ldr	r2, [pc, #92]	; (800056c <MX_GPIO_Init+0x78>)
 800050e:	f043 0308 	orr.w	r3, r3, #8
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_GPIO_Init+0x78>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0308 	and.w	r3, r3, #8
 800051c:	607b      	str	r3, [r7, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_GPIO_Init+0x78>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a11      	ldr	r2, [pc, #68]	; (800056c <MX_GPIO_Init+0x78>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_GPIO_Init+0x78>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	603b      	str	r3, [r7, #0]
 8000536:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800053e:	480c      	ldr	r0, [pc, #48]	; (8000570 <MX_GPIO_Init+0x7c>)
 8000540:	f002 f92e 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8000544:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2302      	movs	r3, #2
 8000554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	4619      	mov	r1, r3
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <MX_GPIO_Init+0x7c>)
 800055e:	f001 fedf 	bl	8002320 <HAL_GPIO_Init>
}
 8000562:	bf00      	nop
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000
 8000570:	40010c00 	.word	0x40010c00

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <HAL_MspInit+0x5c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a14      	ldr	r2, [pc, #80]	; (80005dc <HAL_MspInit+0x5c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_MspInit+0x5c>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_MspInit+0x5c>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_MspInit+0x5c>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <HAL_MspInit+0x5c>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_MspInit+0x60>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_MspInit+0x60>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010000 	.word	0x40010000

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <HardFault_Handler+0x4>

080005f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <MemManage_Handler+0x4>

080005fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <BusFault_Handler+0x4>

08000602 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <UsageFault_Handler+0x4>

08000608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000630:	f000 fe46 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <DMA1_Channel5_IRQHandler+0x10>)
 800063e:	f001 fa05 	bl	8001a4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000d9c 	.word	0x20000d9c

0800064c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000652:	f002 f9ce 	bl	80029f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20001c3c 	.word	0x20001c3c

08000660 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <USART1_IRQHandler+0x10>)
 8000666:	f004 f8b9 	bl	80047dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000de0 	.word	0x20000de0

08000674 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	e00a      	b.n	800069c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000686:	f3af 8000 	nop.w
 800068a:	4601      	mov	r1, r0
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	60ba      	str	r2, [r7, #8]
 8000692:	b2ca      	uxtb	r2, r1
 8000694:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3301      	adds	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	697a      	ldr	r2, [r7, #20]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dbf0      	blt.n	8000686 <_read+0x12>
	}

return len;
 80006a4:	687b      	ldr	r3, [r7, #4]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b086      	sub	sp, #24
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	e009      	b.n	80006d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	60ba      	str	r2, [r7, #8]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fea3 	bl	8000414 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbf1      	blt.n	80006c0 <_write+0x12>
	}
	return len;
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_close>:

int _close(int file)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
	return -1;
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800070c:	605a      	str	r2, [r3, #4]
	return 0;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <_isatty>:

int _isatty(int file)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
	return 1;
 8000722:	2301      	movs	r3, #1
}
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr

0800072e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800072e:	b480      	push	{r7}
 8000730:	b085      	sub	sp, #20
 8000732:	af00      	add	r7, sp, #0
 8000734:	60f8      	str	r0, [r7, #12]
 8000736:	60b9      	str	r1, [r7, #8]
 8000738:	607a      	str	r2, [r7, #4]
	return 0;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
	...

08000748 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_sbrk+0x50>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <_sbrk+0x16>
		heap_end = &end;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <_sbrk+0x50>)
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <_sbrk+0x54>)
 800075c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <_sbrk+0x50>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <_sbrk+0x50>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4413      	add	r3, r2
 800076c:	466a      	mov	r2, sp
 800076e:	4293      	cmp	r3, r2
 8000770:	d907      	bls.n	8000782 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000772:	f007 fc19 	bl	8007fa8 <__errno>
 8000776:	4602      	mov	r2, r0
 8000778:	230c      	movs	r3, #12
 800077a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	e006      	b.n	8000790 <_sbrk+0x48>
	}

	heap_end += incr;
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <_sbrk+0x50>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	4a03      	ldr	r2, [pc, #12]	; (8000798 <_sbrk+0x50>)
 800078c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000224 	.word	0x20000224
 800079c:	200020a0 	.word	0x200020a0

080007a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <SystemInit+0x5c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <SystemInit+0x5c>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <SystemInit+0x5c>)
 80007b2:	685a      	ldr	r2, [r3, #4]
 80007b4:	4911      	ldr	r1, [pc, #68]	; (80007fc <SystemInit+0x5c>)
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <SystemInit+0x60>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <SystemInit+0x5c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <SystemInit+0x5c>)
 80007c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <SystemInit+0x5c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <SystemInit+0x5c>)
 80007d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <SystemInit+0x5c>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	4a07      	ldr	r2, [pc, #28]	; (80007fc <SystemInit+0x5c>)
 80007de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SystemInit+0x5c>)
 80007e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <SystemInit+0x64>)
 80007ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40021000 	.word	0x40021000
 8000800:	f8ff0000 	.word	0xf8ff0000
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000808:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800080a:	e003      	b.n	8000814 <LoopCopyDataInit>

0800080c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800080e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000810:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000812:	3104      	adds	r1, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000818:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800081a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800081c:	d3f6      	bcc.n	800080c <CopyDataInit>
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000820:	e002      	b.n	8000828 <LoopFillZerobss>

08000822 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000824:	f842 3b04 	str.w	r3, [r2], #4

08000828 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800082c:	d3f9      	bcc.n	8000822 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800082e:	f7ff ffb7 	bl	80007a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000832:	f007 fbbf 	bl	8007fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f007 fbab 	bl	8007f90 <main>
  bx lr
 800083a:	4770      	bx	lr
  ldr r3, =_sidata
 800083c:	08009054 	.word	0x08009054
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000844:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 8000848:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 800084c:	200020a0 	.word	0x200020a0

08000850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_2_IRQHandler>

08000852 <qbufferCreate>:
#include "qbuffer.h"



bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000852:	b480      	push	{r7}
 8000854:	b087      	sub	sp, #28
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
  bool ret    = true;
 800085e:	2301      	movs	r3, #1
 8000860:	75fb      	strb	r3, [r7, #23]

  p_node->in  = 0;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	60da      	str	r2, [r3, #12]
    p_node->len = 0;
    p_node->p_buf = NULL;
    ret = false;
  }
#endif
  return ret;
 800087a:	7dfb      	ldrb	r3, [r7, #23]
}
 800087c:	4618      	mov	r0, r3
 800087e:	371c      	adds	r7, #28
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000886:	b480      	push	{r7}
 8000888:	b087      	sub	sp, #28
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000892:	2301      	movs	r3, #1
 8000894:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	e026      	b.n	80008ea <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d009      	beq.n	80008b8 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	68da      	ldr	r2, [r3, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	441a      	add	r2, r3
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	440b      	add	r3, r1
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d00c      	beq.n	80008de <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	3301      	adds	r3, #1
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	6892      	ldr	r2, [r2, #8]
 80008ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80008d2:	fb02 f201 	mul.w	r2, r2, r1
 80008d6:	1a9a      	subs	r2, r3, r2
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	e002      	b.n	80008e4 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80008de:	2300      	movs	r3, #0
 80008e0:	75fb      	strb	r3, [r7, #23]
      break;
 80008e2:	e006      	b.n	80008f2 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	3301      	adds	r3, #1
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d8d4      	bhi.n	800089c <qbufferRead+0x16>
    }
  }

  return ret;
 80008f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	371c      	adds	r7, #28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80008fe:	b480      	push	{r7}
 8000900:	b085      	sub	sp, #20
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;  // + p_node->len **
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	441a      	add	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	6892      	ldr	r2, [r2, #8]
 800091a:	fbb3 f1f2 	udiv	r1, r3, r2
 800091e:	fb02 f201 	mul.w	r2, r2, r1
 8000922:	1a9b      	subs	r3, r3, r2
 8000924:	60fb      	str	r3, [r7, #12]

  return ret;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
	...

08000934 <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);
#if 1
bool flashInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	e012      	b.n	8000966 <flashInit+0x32>
  {
    flash_tbl[i].addr = 0x08000000 + i*FLASH_SECTOR_SIZE;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000946:	02db      	lsls	r3, r3, #11
 8000948:	4619      	mov	r1, r3
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <flashInit+0x44>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    flash_tbl[i].length = FLASH_SECTOR_SIZE;
 8000952:	4a09      	ldr	r2, [pc, #36]	; (8000978 <flashInit+0x44>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	4413      	add	r3, r2
 800095a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800095e:	809a      	strh	r2, [r3, #4]
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3301      	adds	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2bff      	cmp	r3, #255	; 0xff
 800096a:	dde9      	ble.n	8000940 <flashInit+0xc>
  }

  return true;
 800096c:	2301      	movs	r3, #1
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000228 	.word	0x20000228

0800097c <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8000986:	2300      	movs	r3, #0
 8000988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t start_sector_num = (-1);
 800098c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000990:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
 800099a:	e015      	b.n	80009c8 <flashErase+0x4c>
  {
    if(flashInSector(i, addr, length) == true)
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	b29b      	uxth	r3, r3
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f8a7 	bl	8000af8 <flashInSector>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d008      	beq.n	80009c2 <flashErase+0x46>
    {
      if(start_sector_num < 0)
 80009b0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	da01      	bge.n	80009bc <flashErase+0x40>
      {
        start_sector_num = i;
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 80009bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009be:	3301      	adds	r3, #1
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	3301      	adds	r3, #1
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	2bff      	cmp	r3, #255	; 0xff
 80009cc:	dde6      	ble.n	800099c <flashErase+0x20>
    }
  }

  if(sector_count > 0)
 80009ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d021      	beq.n	8000a18 <flashErase+0x9c>
  {
    HAL_FLASH_Unlock();
 80009d4:	f001 fb14 	bl	8002000 <HAL_FLASH_Unlock>
    init.TypeErase = FLASH_TYPEERASE_PAGES;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
    init.Banks     = FLASH_BANK_1;
 80009dc:	2301      	movs	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
    init.PageAddress = flash_tbl[start_sector_num].addr;
 80009e0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80009e4:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <flashErase+0xa8>)
 80009e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ea:	61bb      	str	r3, [r7, #24]
    init.NbPages     = sector_count;
 80009ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ee:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 80009f0:	f107 020c 	add.w	r2, r7, #12
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fbe8 	bl	80021d0 <HAL_FLASHEx_Erase>
 8000a00:	4603      	mov	r3, r0
 8000a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(status == HAL_OK)
 8000a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d102      	bne.n	8000a14 <flashErase+0x98>
    {
      ret = true;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    HAL_FLASH_Lock();
 8000a14:	f001 fb1a 	bl	800204c <HAL_FLASH_Lock>
  }

  return ret;
 8000a18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3730      	adds	r7, #48	; 0x30
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000228 	.word	0x20000228

08000a28 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b089      	sub	sp, #36	; 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a34:	2301      	movs	r3, #1
 8000a36:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;

  if(addr%2 != 0)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <flashWrite+0x1e>
  {
    return false;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e032      	b.n	8000aac <flashWrite+0x84>
  }

  HAL_FLASH_Unlock();
 8000a46:	f001 fadb 	bl	8002000 <HAL_FLASH_Unlock>

  for(int i=0; i<length; i+=2)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	e026      	b.n	8000a9e <flashWrite+0x76>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	82fb      	strh	r3, [r7, #22]
    data |= p_data[i+1] << 8;
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	4413      	add	r3, r2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	b21a      	sxth	r2, r3
 8000a68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	18d1      	adds	r1, r2, r3
 8000a78:	8afb      	ldrh	r3, [r7, #22]
 8000a7a:	f04f 0400 	mov.w	r4, #0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4623      	mov	r3, r4
 8000a82:	2001      	movs	r0, #1
 8000a84:	f001 fa4c 	bl	8001f20 <HAL_FLASH_Program>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	757b      	strb	r3, [r7, #21]
    if(status != HAL_OK)
 8000a8c:	7d7b      	ldrb	r3, [r7, #21]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <flashWrite+0x70>
    {
      ret = false;
 8000a92:	2300      	movs	r3, #0
 8000a94:	77fb      	strb	r3, [r7, #31]
      break;
 8000a96:	e006      	b.n	8000aa6 <flashWrite+0x7e>
  for(int i=0; i<length; i+=2)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d8d4      	bhi.n	8000a50 <flashWrite+0x28>
    }
  }

  HAL_FLASH_Lock();
 8000aa6:	f001 fad1 	bl	800204c <HAL_FLASH_Lock>
  return ret;
 8000aaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3724      	adds	r7, #36	; 0x24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd90      	pop	{r4, r7, pc}

08000ab4 <flashRead>:

bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	76fb      	strb	r3, [r7, #27]

  uint8_t *p_byte = (uint8_t *)addr;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	617b      	str	r3, [r7, #20]

  for(int i=0; i<length; i++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	e00a      	b.n	8000ae4 <flashRead+0x30>
  {
    p_data[i] = p_byte[i];
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	441a      	add	r2, r3
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	68b9      	ldr	r1, [r7, #8]
 8000ad8:	440b      	add	r3, r1
 8000ada:	7812      	ldrb	r2, [r2, #0]
 8000adc:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<length; i++)
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f0      	bhi.n	8000ace <flashRead+0x1a>
  }

  return ret;
 8000aec:	7efb      	ldrb	r3, [r7, #27]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	; 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <flashInSector>:

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b08b      	sub	sp, #44	; 0x2c
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <flashInSector+0xac>)
 8000b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b14:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	4a22      	ldr	r2, [pc, #136]	; (8000ba4 <flashInSector+0xac>)
 8000b1a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	4920      	ldr	r1, [pc, #128]	; (8000ba4 <flashInSector+0xac>)
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	440b      	add	r3, r1
 8000b26:	889b      	ldrh	r3, [r3, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4413      	add	r3, r2
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]

  /* sector size < flash size */
  if (sector_start >= flash_start && sector_start <= flash_end)
 8000b3c:	6a3a      	ldr	r2, [r7, #32]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d306      	bcc.n	8000b52 <flashInSector+0x5a>
 8000b44:	6a3a      	ldr	r2, [r7, #32]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d802      	bhi.n	8000b52 <flashInSector+0x5a>
  {
    ret = true;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d306      	bcc.n	8000b68 <flashInSector+0x70>
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d802      	bhi.n	8000b68 <flashInSector+0x70>
  {
    ret = true;
 8000b62:	2301      	movs	r3, #1
 8000b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* sector size > flash size */
  if (flash_start >= sector_start && flash_start <= sector_end)
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d306      	bcc.n	8000b7e <flashInSector+0x86>
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d802      	bhi.n	8000b7e <flashInSector+0x86>
  {
    ret = true;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d306      	bcc.n	8000b94 <flashInSector+0x9c>
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d802      	bhi.n	8000b94 <flashInSector+0x9c>
  {
    ret = true;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8000b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	372c      	adds	r7, #44	; 0x2c
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000228 	.word	0x20000228

08000ba8 <ledInit>:
		{GPIOB, GPIO_PIN_14, GPIO_PIN_SET, GPIO_PIN_RESET},
		{GPIOB, GPIO_PIN_15, GPIO_PIN_SET, GPIO_PIN_RESET},
};

void ledInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#endif
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <ledInit+0x94>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <ledInit+0x94>)
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <ledInit+0x94>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0308 	and.w	r3, r3, #8
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <ledInit+0x94>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <ledInit+0x94>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <ledInit+0x94>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  //GPIO_InitStruct.Pin = LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
  //HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
  for( int i=0; i<LED_MAX_CH; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	e017      	b.n	8000c2e <ledInit+0x86>
  {
  	GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <ledInit+0x98>)
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4413      	add	r3, r2
 8000c06:	889b      	ldrh	r3, [r3, #4]
 8000c08:	60fb      	str	r3, [r7, #12]
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <ledInit+0x98>)
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c12:	f107 020c 	add.w	r2, r7, #12
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fb81 	bl	8002320 <HAL_GPIO_Init>

  	ledOff(i);
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f80e 	bl	8000c44 <ledOff>
  for( int i=0; i<LED_MAX_CH; i++)
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	dde4      	ble.n	8000bfe <ledInit+0x56>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	20000004 	.word	0x20000004

08000c44 <ledOff>:
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d811      	bhi.n	8000c78 <ledOff+0x34>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <ledOff+0x3c>)
 8000c58:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <ledOff+0x3c>)
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	4413      	add	r3, r2
 8000c64:	8899      	ldrh	r1, [r3, #4]
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <ledOff+0x3c>)
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	79db      	ldrb	r3, [r3, #7]
 8000c70:	461a      	mov	r2, r3
 8000c72:	f001 fd95 	bl	80027a0 <HAL_GPIO_WritePin>
 8000c76:	e000      	b.n	8000c7a <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 8000c78:	bf00      	nop
}
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000004 	.word	0x20000004

08000c84 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d80c      	bhi.n	8000cae <ledToggle+0x2a>
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <ledToggle+0x34>)
 8000c98:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <ledToggle+0x34>)
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	4413      	add	r3, r2
 8000ca4:	889b      	ldrh	r3, [r3, #4]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f001 fd92 	bl	80027d0 <HAL_GPIO_TogglePin>
 8000cac:	e000      	b.n	8000cb0 <ledToggle+0x2c>
	if(ch >= LED_MAX_CH) return;
 8000cae:	bf00      	nop
}
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000004 	.word	0x20000004

08000cbc <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  bool ret = true;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]

  /* if reset pin on */
  if(RCC->CSR & (1<<26))
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <resetInit+0x50>)
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d012      	beq.n	8000cf8 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f000 f84e 	bl	8000d74 <rtcBackupRegRead>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	3301      	adds	r3, #1
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 f858 	bl	8000d94 <rtcBackupRegWrite>
    delay(500);
 8000ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce8:	f7ff fb82 	bl	80003f0 <delay>
    reset_count = rtcBackupRegRead(1);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f000 f841 	bl	8000d74 <rtcBackupRegRead>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <resetInit+0x54>)
 8000cf6:	601a      	str	r2, [r3, #0]
  }

  rtcBackupRegWrite(1, 0);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f000 f84a 	bl	8000d94 <rtcBackupRegWrite>

  return ret;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	20000a28 	.word	0x20000a28

08000d14 <rtcInit>:


RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  bool ret = true;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <rtcInit+0x54>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <rtcInit+0x54>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <rtcInit+0x54>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /** Initialize RTC Only */
  hrtc.Instance           = RTC;
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <rtcInit+0x58>)
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <rtcInit+0x5c>)
 8000d3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <rtcInit+0x58>)
 8000d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d42:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <rtcInit+0x58>)
 8000d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d4c:	4807      	ldr	r0, [pc, #28]	; (8000d6c <rtcInit+0x58>)
 8000d4e:	f003 fa71 	bl	8004234 <HAL_RTC_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <rtcInit+0x48>
  {
    Error_Handler();
 8000d58:	f7ff fc0c 	bl	8000574 <Error_Handler>
  }

  return ret;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	20000d88 	.word	0x20000d88
 8000d70:	40002800 	.word	0x40002800

08000d74 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <rtcBackupRegRead+0x1c>)
 8000d80:	f003 fb86 	bl	8004490 <HAL_RTCEx_BKUPRead>
 8000d84:	4603      	mov	r3, r0

}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000d88 	.word	0x20000d88

08000d94 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	4803      	ldr	r0, [pc, #12]	; (8000db0 <rtcBackupRegWrite+0x1c>)
 8000da4:	f003 fb5a 	bl	800445c <HAL_RTCEx_BKUPWrite>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000d88 	.word	0x20000d88

08000db4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <HAL_RTC_MspInit+0x3c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d110      	bne.n	8000de8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000dc6:	f002 fc67 	bl	8003698 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_RTC_MspInit+0x40>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_RTC_MspInit+0x40>)
 8000dd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_RTC_MspInit+0x40>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_RTC_MspInit+0x44>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40002800 	.word	0x40002800
 8000df4:	40021000 	.word	0x40021000
 8000df8:	4242043c 	.word	0x4242043c

08000dfc <uartInit>:
DMA_HandleTypeDef  hdma_usart1_rx;



bool uartInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	e007      	b.n	8000e18 <uartInit+0x1c>
  {
    is_open[i] = false;
 8000e08:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <uartInit+0x30>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3301      	adds	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	ddf4      	ble.n	8000e08 <uartInit+0xc>
  }


  return true;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000a2c 	.word	0x20000a2c

08000e30 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <uartOpen+0x1c>
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d007      	beq.n	8000e5a <uartOpen+0x2a>
 8000e4a:	e074      	b.n	8000f36 <uartOpen+0x106>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4a3c      	ldr	r2, [pc, #240]	; (8000f40 <uartOpen+0x110>)
 8000e50:	2101      	movs	r1, #1
 8000e52:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8000e54:	2301      	movs	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
      break;
 8000e58:	e06d      	b.n	8000f36 <uartOpen+0x106>

    case _DEF_UART2:
      huart1.Instance = USART1;
 8000e5a:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <uartOpen+0x114>)
 8000e5c:	4a3a      	ldr	r2, [pc, #232]	; (8000f48 <uartOpen+0x118>)
 8000e5e:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8000e60:	4a38      	ldr	r2, [pc, #224]	; (8000f44 <uartOpen+0x114>)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <uartOpen+0x114>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <uartOpen+0x114>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <uartOpen+0x114>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <uartOpen+0x114>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <uartOpen+0x114>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <uartOpen+0x114>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8000e8a:	482e      	ldr	r0, [pc, #184]	; (8000f44 <uartOpen+0x114>)
 8000e8c:	f003 fb69 	bl	8004562 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <uartOpen+0x11c>)
 8000e96:	4413      	add	r3, r2
 8000e98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e9c:	492c      	ldr	r1, [pc, #176]	; (8000f50 <uartOpen+0x120>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fcd7 	bl	8000852 <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <uartOpen+0x124>)
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	4a2a      	ldr	r2, [pc, #168]	; (8000f54 <uartOpen+0x124>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6153      	str	r3, [r2, #20]
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <uartOpen+0x124>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]

      /* DMA interrupt init */
      /* DMA1_Channel5_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	200f      	movs	r0, #15
 8000ec2:	f000 fb28 	bl	8001516 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 fb41 	bl	800154e <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ecc:	481d      	ldr	r0, [pc, #116]	; (8000f44 <uartOpen+0x114>)
 8000ece:	f003 fafb 	bl	80044c8 <HAL_UART_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d002      	beq.n	8000ede <uartOpen+0xae>
      {
        ret = false;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
      }
      break;
 8000edc:	e02a      	b.n	8000f34 <uartOpen+0x104>
        ret = true;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <uartOpen+0x110>)
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eee:	4918      	ldr	r1, [pc, #96]	; (8000f50 <uartOpen+0x120>)
 8000ef0:	4814      	ldr	r0, [pc, #80]	; (8000f44 <uartOpen+0x114>)
 8000ef2:	f003 fbf3 	bl	80046dc <HAL_UART_Receive_DMA>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <uartOpen+0xd0>
          ret = false;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <uartOpen+0x11c>)
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	4413      	add	r3, r2
 8000f08:	3308      	adds	r3, #8
 8000f0a:	6819      	ldr	r1, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <uartOpen+0x128>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	1a8a      	subs	r2, r1, r2
 8000f16:	490d      	ldr	r1, [pc, #52]	; (8000f4c <uartOpen+0x11c>)
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	440b      	add	r3, r1
 8000f1c:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	490a      	ldr	r1, [pc, #40]	; (8000f4c <uartOpen+0x11c>)
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	440a      	add	r2, r1
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <uartOpen+0x11c>)
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	440b      	add	r3, r1
 8000f30:	3304      	adds	r3, #4
 8000f32:	601a      	str	r2, [r3, #0]
      break;
 8000f34:	bf00      	nop
  }

  return ret;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000a2c 	.word	0x20000a2c
 8000f44:	20000de0 	.word	0x20000de0
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	20000a30 	.word	0x20000a30
 8000f50:	20000a50 	.word	0x20000a50
 8000f54:	40021000 	.word	0x40021000
 8000f58:	20000d9c 	.word	0x20000d9c

08000f5c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <uartAvailable+0x1a>
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d004      	beq.n	8000f7e <uartAvailable+0x22>
 8000f74:	e01b      	b.n	8000fae <uartAvailable+0x52>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 8000f76:	f006 facf 	bl	8007518 <cdcAvailable>
 8000f7a:	60f8      	str	r0, [r7, #12]
      break;
 8000f7c:	e017      	b.n	8000fae <uartAvailable+0x52>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <uartAvailable+0x5c>)
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	4413      	add	r3, r2
 8000f86:	3308      	adds	r3, #8
 8000f88:	6819      	ldr	r1, [r3, #0]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <uartAvailable+0x60>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	1a8a      	subs	r2, r1, r2
 8000f94:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <uartAvailable+0x5c>)
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	440b      	add	r3, r1
 8000f9a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <uartAvailable+0x5c>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fcaa 	bl	80008fe <qbufferAvailable>
 8000faa:	60f8      	str	r0, [r7, #12]
      break;
 8000fac:	bf00      	nop

  }

  return ret;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000a30 	.word	0x20000a30
 8000fbc:	20000d9c 	.word	0x20000d9c

08000fc0 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <uartRead+0x1a>
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d005      	beq.n	8000fe4 <uartRead+0x24>
 8000fd8:	e00c      	b.n	8000ff4 <uartRead+0x34>
  {
    case _DEF_UART1:
      ret = cdcRead();
 8000fda:	f006 fab9 	bl	8007550 <cdcRead>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8000fe2:	e007      	b.n	8000ff4 <uartRead+0x34>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8000fe4:	f107 030f 	add.w	r3, r7, #15
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <uartRead+0x40>)
 8000fee:	f7ff fc4a 	bl	8000886 <qbufferRead>
      break;
 8000ff2:	bf00      	nop

  }

  return ret;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000a40 	.word	0x20000a40

08001004 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <uartWrite+0x1e>
 800101c:	2b01      	cmp	r3, #1
 800101e:	d006      	beq.n	800102e <uartWrite+0x2a>
 8001020:	e014      	b.n	800104c <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	68b8      	ldr	r0, [r7, #8]
 8001026:	f006 fae5 	bl	80075f4 <cdcWrite>
 800102a:	6178      	str	r0, [r7, #20]
      break;
 800102c:	e00e      	b.n	800104c <uartWrite+0x48>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	b29a      	uxth	r2, r3
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	4808      	ldr	r0, [pc, #32]	; (8001058 <uartWrite+0x54>)
 8001038:	f003 fab7 	bl	80045aa <HAL_UART_Transmit>
 800103c:	4603      	mov	r3, r0
 800103e:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8001040:	7cfb      	ldrb	r3, [r7, #19]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <uartWrite+0x46>
      {
        ret = length;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	617b      	str	r3, [r7, #20]
      }
      break;
 800104a:	bf00      	nop

  }

  return ret;
 800104c:	697b      	ldr	r3, [r7, #20]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000de0 	.word	0x20000de0

0800105c <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a33      	ldr	r2, [pc, #204]	; (8001168 <HAL_UART_MspInit+0xe8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d15f      	bne.n	8001160 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <HAL_UART_MspInit+0xec>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a31      	ldr	r2, [pc, #196]	; (800116c <HAL_UART_MspInit+0xec>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_UART_MspInit+0xec>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <HAL_UART_MspInit+0xec>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a2b      	ldr	r2, [pc, #172]	; (800116c <HAL_UART_MspInit+0xec>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <HAL_UART_MspInit+0xec>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	4822      	ldr	r0, [pc, #136]	; (8001170 <HAL_UART_MspInit+0xf0>)
 80010e6:	f001 f91b 	bl	8002320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4619      	mov	r1, r3
 80010fe:	481c      	ldr	r0, [pc, #112]	; (8001170 <HAL_UART_MspInit+0xf0>)
 8001100:	f001 f90e 	bl	8002320 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_UART_MspInit+0xf4>)
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <HAL_UART_MspInit+0xf8>)
 8001108:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_UART_MspInit+0xf4>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_UART_MspInit+0xf4>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_UART_MspInit+0xf4>)
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_UART_MspInit+0xf4>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_UART_MspInit+0xf4>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_UART_MspInit+0xf4>)
 800112a:	2220      	movs	r2, #32
 800112c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_UART_MspInit+0xf4>)
 8001130:	2200      	movs	r2, #0
 8001132:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001134:	480f      	ldr	r0, [pc, #60]	; (8001174 <HAL_UART_MspInit+0xf4>)
 8001136:	f000 fa33 	bl	80015a0 <HAL_DMA_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001140:	f7ff fa18 	bl	8000574 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <HAL_UART_MspInit+0xf4>)
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_UART_MspInit+0xf4>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2025      	movs	r0, #37	; 0x25
 8001156:	f000 f9de 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800115a:	2025      	movs	r0, #37	; 0x25
 800115c:	f000 f9f7 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40013800 	.word	0x40013800
 800116c:	40021000 	.word	0x40021000
 8001170:	40010800 	.word	0x40010800
 8001174:	20000d9c 	.word	0x20000d9c
 8001178:	40020058 	.word	0x40020058

0800117c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_UART_MspDeInit+0x40>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d112      	bne.n	80011b4 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_UART_MspDeInit+0x44>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_UART_MspDeInit+0x44>)
 8001194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001198:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800119a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800119e:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HAL_UART_MspDeInit+0x48>)
 80011a0:	f001 fa2c 	bl	80025fc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fa6f 	bl	800168c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80011ae:	2025      	movs	r0, #37	; 0x25
 80011b0:	f000 f9db 	bl	800156a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40013800 	.word	0x40013800
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010800 	.word	0x40010800

080011c8 <usbInit>:




bool usbInit(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
  bool ret = true;
 80011ce:	2301      	movs	r3, #1
 80011d0:	75fb      	strb	r3, [r7, #23]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
#endif
  delay(200);
 80011de:	20c8      	movs	r0, #200	; 0xc8
 80011e0:	f7ff f906 	bl	80003f0 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <usbInit+0x44>)
 80011ec:	f001 fad8 	bl	80027a0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <usbInit+0x44>)
 80011fa:	f001 f891 	bl	8002320 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 80011fe:	f006 f95b 	bl	80074b8 <MX_USB_DEVICE_Init>

  return ret;
 8001202:	7dfb      	ldrb	r3, [r7, #23]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40010800 	.word	0x40010800

08001210 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  bspInit();
 8001214:	f7ff f8a6 	bl	8000364 <bspInit>
  rtcInit();
 8001218:	f7ff fd7c 	bl	8000d14 <rtcInit>

  resetInit();
 800121c:	f7ff fd4e 	bl	8000cbc <resetInit>
  ledInit();
 8001220:	f7ff fcc2 	bl	8000ba8 <ledInit>
  usbInit();
 8001224:	f7ff ffd0 	bl	80011c8 <usbInit>
  uartInit();
 8001228:	f7ff fde8 	bl	8000dfc <uartInit>
  flashInit();
 800122c:	f7ff fb82 	bl	8000934 <flashInit>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x28>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f95b 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff f996 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f981 	bl	8001586 <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f93b 	bl	8001516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000028 	.word	0x20000028
 80012bc:	20000024 	.word	0x20000024

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_IncTick+0x1c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x20>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <HAL_IncTick+0x20>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000028 	.word	0x20000028
 80012e0:	20000e20 	.word	0x20000e20

080012e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <HAL_GetTick+0x10>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	20000e20 	.word	0x20000e20

080012f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff fff0 	bl	80012e4 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d005      	beq.n	800131e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_Delay+0x40>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800131e:	bf00      	nop
 8001320:	f7ff ffe0 	bl	80012e4 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	d8f7      	bhi.n	8001320 <HAL_Delay+0x28>
  {
  }
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000028 	.word	0x20000028

0800133c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	f003 021f 	and.w	r2, r3, #31
 80013b0:	4906      	ldr	r1, [pc, #24]	; (80013cc <NVIC_EnableIRQ+0x2c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	2001      	movs	r0, #1
 80013ba:	fa00 f202 	lsl.w	r2, r0, r2
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <NVIC_DisableIRQ+0x30>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	3320      	adds	r3, #32
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	da0b      	bge.n	8001430 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <NVIC_SetPriority+0x4c>)
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	3b04      	subs	r3, #4
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142e:	e009      	b.n	8001444 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <NVIC_SetPriority+0x50>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00
 8001454:	e000e100 	.word	0xe000e100

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f7ff ff90 	bl	8001404 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff17 	bl	800133c <NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff2c 	bl	8001384 <NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff90 	bl	8001458 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5f 	bl	8001404 <NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff1f 	bl	80013a0 <NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff29 	bl	80013d0 <NVIC_DisableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff94 	bl	80014bc <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e059      	b.n	800166a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <HAL_DMA_Init+0xd4>)
 80015be:	429a      	cmp	r2, r3
 80015c0:	d80f      	bhi.n	80015e2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_DMA_Init+0xd8>)
 80015ca:	4413      	add	r3, r2
 80015cc:	4a2b      	ldr	r2, [pc, #172]	; (800167c <HAL_DMA_Init+0xdc>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	009a      	lsls	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a28      	ldr	r2, [pc, #160]	; (8001680 <HAL_DMA_Init+0xe0>)
 80015de:	63da      	str	r2, [r3, #60]	; 0x3c
 80015e0:	e00e      	b.n	8001600 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_DMA_Init+0xe4>)
 80015ea:	4413      	add	r3, r2
 80015ec:	4a23      	ldr	r2, [pc, #140]	; (800167c <HAL_DMA_Init+0xdc>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	009a      	lsls	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a22      	ldr	r2, [pc, #136]	; (8001688 <HAL_DMA_Init+0xe8>)
 80015fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001616:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800161a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40020407 	.word	0x40020407
 8001678:	bffdfff8 	.word	0xbffdfff8
 800167c:	cccccccd 	.word	0xcccccccd
 8001680:	40020000 	.word	0x40020000
 8001684:	bffdfbf8 	.word	0xbffdfbf8
 8001688:	40020400 	.word	0x40020400

0800168c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e05c      	b.n	8001758 <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <HAL_DMA_DeInit+0xd8>)
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d80f      	bhi.n	80016fa <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_DMA_DeInit+0xdc>)
 80016e2:	4413      	add	r3, r2
 80016e4:	4a21      	ldr	r2, [pc, #132]	; (800176c <HAL_DMA_DeInit+0xe0>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	009a      	lsls	r2, r3, #2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <HAL_DMA_DeInit+0xe4>)
 80016f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80016f8:	e00e      	b.n	8001718 <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_DMA_DeInit+0xe8>)
 8001702:	4413      	add	r3, r2
 8001704:	4a19      	ldr	r2, [pc, #100]	; (800176c <HAL_DMA_DeInit+0xe0>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	009a      	lsls	r2, r3, #2
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a18      	ldr	r2, [pc, #96]	; (8001778 <HAL_DMA_DeInit+0xec>)
 8001716:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f202 	lsl.w	r2, r1, r2
 8001726:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40020407 	.word	0x40020407
 8001768:	bffdfff8 	.word	0xbffdfff8
 800176c:	cccccccd 	.word	0xcccccccd
 8001770:	40020000 	.word	0x40020000
 8001774:	bffdfbf8 	.word	0xbffdfbf8
 8001778:	40020400 	.word	0x40020400

0800177c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_DMA_Start_IT+0x20>
 8001798:	2302      	movs	r3, #2
 800179a:	e04a      	b.n	8001832 <HAL_DMA_Start_IT+0xb6>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d13a      	bne.n	8001824 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2202      	movs	r2, #2
 80017b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 fb76 	bl	8001ec4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 020e 	orr.w	r2, r2, #14
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e00f      	b.n	8001812 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0204 	bic.w	r2, r2, #4
 8001800:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 020a 	orr.w	r2, r2, #10
 8001810:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 0201 	orr.w	r2, r2, #1
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e005      	b.n	8001830 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800182c:	2302      	movs	r3, #2
 800182e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001830:	7dfb      	ldrb	r3, [r7, #23]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800184e:	2b02      	cmp	r3, #2
 8001850:	d005      	beq.n	800185e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2204      	movs	r2, #4
 8001856:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e0d6      	b.n	8001a0c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 020e 	bic.w	r2, r2, #14
 800186c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	4b64      	ldr	r3, [pc, #400]	; (8001a18 <HAL_DMA_Abort_IT+0x1dc>)
 8001886:	429a      	cmp	r2, r3
 8001888:	d958      	bls.n	800193c <HAL_DMA_Abort_IT+0x100>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a63      	ldr	r2, [pc, #396]	; (8001a1c <HAL_DMA_Abort_IT+0x1e0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d04f      	beq.n	8001934 <HAL_DMA_Abort_IT+0xf8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a61      	ldr	r2, [pc, #388]	; (8001a20 <HAL_DMA_Abort_IT+0x1e4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d048      	beq.n	8001930 <HAL_DMA_Abort_IT+0xf4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a60      	ldr	r2, [pc, #384]	; (8001a24 <HAL_DMA_Abort_IT+0x1e8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d040      	beq.n	800192a <HAL_DMA_Abort_IT+0xee>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a5e      	ldr	r2, [pc, #376]	; (8001a28 <HAL_DMA_Abort_IT+0x1ec>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d038      	beq.n	8001924 <HAL_DMA_Abort_IT+0xe8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a5d      	ldr	r2, [pc, #372]	; (8001a2c <HAL_DMA_Abort_IT+0x1f0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d030      	beq.n	800191e <HAL_DMA_Abort_IT+0xe2>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a5b      	ldr	r2, [pc, #364]	; (8001a30 <HAL_DMA_Abort_IT+0x1f4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d028      	beq.n	8001918 <HAL_DMA_Abort_IT+0xdc>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a53      	ldr	r2, [pc, #332]	; (8001a18 <HAL_DMA_Abort_IT+0x1dc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d020      	beq.n	8001912 <HAL_DMA_Abort_IT+0xd6>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a57      	ldr	r2, [pc, #348]	; (8001a34 <HAL_DMA_Abort_IT+0x1f8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d019      	beq.n	800190e <HAL_DMA_Abort_IT+0xd2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a56      	ldr	r2, [pc, #344]	; (8001a38 <HAL_DMA_Abort_IT+0x1fc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d012      	beq.n	800190a <HAL_DMA_Abort_IT+0xce>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a54      	ldr	r2, [pc, #336]	; (8001a3c <HAL_DMA_Abort_IT+0x200>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d00a      	beq.n	8001904 <HAL_DMA_Abort_IT+0xc8>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a53      	ldr	r2, [pc, #332]	; (8001a40 <HAL_DMA_Abort_IT+0x204>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d102      	bne.n	80018fe <HAL_DMA_Abort_IT+0xc2>
 80018f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fc:	e01b      	b.n	8001936 <HAL_DMA_Abort_IT+0xfa>
 80018fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001902:	e018      	b.n	8001936 <HAL_DMA_Abort_IT+0xfa>
 8001904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001908:	e015      	b.n	8001936 <HAL_DMA_Abort_IT+0xfa>
 800190a:	2310      	movs	r3, #16
 800190c:	e013      	b.n	8001936 <HAL_DMA_Abort_IT+0xfa>
 800190e:	2301      	movs	r3, #1
 8001910:	e011      	b.n	8001936 <HAL_DMA_Abort_IT+0xfa>
 8001912:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001916:	e00e      	b.n	8001936 <HAL_DMA_Abort_IT+0xfa>
 8001918:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800191c:	e00b      	b.n	8001936 <HAL_DMA_Abort_IT+0xfa>
 800191e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001922:	e008      	b.n	8001936 <HAL_DMA_Abort_IT+0xfa>
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	e005      	b.n	8001936 <HAL_DMA_Abort_IT+0xfa>
 800192a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800192e:	e002      	b.n	8001936 <HAL_DMA_Abort_IT+0xfa>
 8001930:	2310      	movs	r3, #16
 8001932:	e000      	b.n	8001936 <HAL_DMA_Abort_IT+0xfa>
 8001934:	2301      	movs	r3, #1
 8001936:	4a43      	ldr	r2, [pc, #268]	; (8001a44 <HAL_DMA_Abort_IT+0x208>)
 8001938:	6053      	str	r3, [r2, #4]
 800193a:	e057      	b.n	80019ec <HAL_DMA_Abort_IT+0x1b0>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a36      	ldr	r2, [pc, #216]	; (8001a1c <HAL_DMA_Abort_IT+0x1e0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d04f      	beq.n	80019e6 <HAL_DMA_Abort_IT+0x1aa>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a35      	ldr	r2, [pc, #212]	; (8001a20 <HAL_DMA_Abort_IT+0x1e4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d048      	beq.n	80019e2 <HAL_DMA_Abort_IT+0x1a6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a33      	ldr	r2, [pc, #204]	; (8001a24 <HAL_DMA_Abort_IT+0x1e8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d040      	beq.n	80019dc <HAL_DMA_Abort_IT+0x1a0>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a32      	ldr	r2, [pc, #200]	; (8001a28 <HAL_DMA_Abort_IT+0x1ec>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d038      	beq.n	80019d6 <HAL_DMA_Abort_IT+0x19a>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <HAL_DMA_Abort_IT+0x1f0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d030      	beq.n	80019d0 <HAL_DMA_Abort_IT+0x194>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <HAL_DMA_Abort_IT+0x1f4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d028      	beq.n	80019ca <HAL_DMA_Abort_IT+0x18e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <HAL_DMA_Abort_IT+0x1dc>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d020      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x188>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2b      	ldr	r2, [pc, #172]	; (8001a34 <HAL_DMA_Abort_IT+0x1f8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d019      	beq.n	80019c0 <HAL_DMA_Abort_IT+0x184>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a29      	ldr	r2, [pc, #164]	; (8001a38 <HAL_DMA_Abort_IT+0x1fc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d012      	beq.n	80019bc <HAL_DMA_Abort_IT+0x180>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a28      	ldr	r2, [pc, #160]	; (8001a3c <HAL_DMA_Abort_IT+0x200>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00a      	beq.n	80019b6 <HAL_DMA_Abort_IT+0x17a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a26      	ldr	r2, [pc, #152]	; (8001a40 <HAL_DMA_Abort_IT+0x204>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d102      	bne.n	80019b0 <HAL_DMA_Abort_IT+0x174>
 80019aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ae:	e01b      	b.n	80019e8 <HAL_DMA_Abort_IT+0x1ac>
 80019b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b4:	e018      	b.n	80019e8 <HAL_DMA_Abort_IT+0x1ac>
 80019b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ba:	e015      	b.n	80019e8 <HAL_DMA_Abort_IT+0x1ac>
 80019bc:	2310      	movs	r3, #16
 80019be:	e013      	b.n	80019e8 <HAL_DMA_Abort_IT+0x1ac>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e011      	b.n	80019e8 <HAL_DMA_Abort_IT+0x1ac>
 80019c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c8:	e00e      	b.n	80019e8 <HAL_DMA_Abort_IT+0x1ac>
 80019ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019ce:	e00b      	b.n	80019e8 <HAL_DMA_Abort_IT+0x1ac>
 80019d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d4:	e008      	b.n	80019e8 <HAL_DMA_Abort_IT+0x1ac>
 80019d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019da:	e005      	b.n	80019e8 <HAL_DMA_Abort_IT+0x1ac>
 80019dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e0:	e002      	b.n	80019e8 <HAL_DMA_Abort_IT+0x1ac>
 80019e2:	2310      	movs	r3, #16
 80019e4:	e000      	b.n	80019e8 <HAL_DMA_Abort_IT+0x1ac>
 80019e6:	2301      	movs	r3, #1
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_DMA_Abort_IT+0x20c>)
 80019ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
    } 
  }
  return status;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40020080 	.word	0x40020080
 8001a1c:	40020008 	.word	0x40020008
 8001a20:	4002001c 	.word	0x4002001c
 8001a24:	40020030 	.word	0x40020030
 8001a28:	40020044 	.word	0x40020044
 8001a2c:	40020058 	.word	0x40020058
 8001a30:	4002006c 	.word	0x4002006c
 8001a34:	40020408 	.word	0x40020408
 8001a38:	4002041c 	.word	0x4002041c
 8001a3c:	40020430 	.word	0x40020430
 8001a40:	40020444 	.word	0x40020444
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40020000 	.word	0x40020000

08001a4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	2204      	movs	r2, #4
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80d6 	beq.w	8001c22 <HAL_DMA_IRQHandler+0x1d6>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80d0 	beq.w	8001c22 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d107      	bne.n	8001aa0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0204 	bic.w	r2, r2, #4
 8001a9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b9b      	ldr	r3, [pc, #620]	; (8001d14 <HAL_DMA_IRQHandler+0x2c8>)
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d958      	bls.n	8001b5e <HAL_DMA_IRQHandler+0x112>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a99      	ldr	r2, [pc, #612]	; (8001d18 <HAL_DMA_IRQHandler+0x2cc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d04f      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x10a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a98      	ldr	r2, [pc, #608]	; (8001d1c <HAL_DMA_IRQHandler+0x2d0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d048      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x106>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a96      	ldr	r2, [pc, #600]	; (8001d20 <HAL_DMA_IRQHandler+0x2d4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d040      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x100>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a95      	ldr	r2, [pc, #596]	; (8001d24 <HAL_DMA_IRQHandler+0x2d8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d038      	beq.n	8001b46 <HAL_DMA_IRQHandler+0xfa>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a93      	ldr	r2, [pc, #588]	; (8001d28 <HAL_DMA_IRQHandler+0x2dc>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d030      	beq.n	8001b40 <HAL_DMA_IRQHandler+0xf4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a92      	ldr	r2, [pc, #584]	; (8001d2c <HAL_DMA_IRQHandler+0x2e0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d028      	beq.n	8001b3a <HAL_DMA_IRQHandler+0xee>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a89      	ldr	r2, [pc, #548]	; (8001d14 <HAL_DMA_IRQHandler+0x2c8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d020      	beq.n	8001b34 <HAL_DMA_IRQHandler+0xe8>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a8e      	ldr	r2, [pc, #568]	; (8001d30 <HAL_DMA_IRQHandler+0x2e4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d019      	beq.n	8001b30 <HAL_DMA_IRQHandler+0xe4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a8c      	ldr	r2, [pc, #560]	; (8001d34 <HAL_DMA_IRQHandler+0x2e8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d012      	beq.n	8001b2c <HAL_DMA_IRQHandler+0xe0>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a8b      	ldr	r2, [pc, #556]	; (8001d38 <HAL_DMA_IRQHandler+0x2ec>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00a      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xda>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a89      	ldr	r2, [pc, #548]	; (8001d3c <HAL_DMA_IRQHandler+0x2f0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d102      	bne.n	8001b20 <HAL_DMA_IRQHandler+0xd4>
 8001b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b1e:	e01b      	b.n	8001b58 <HAL_DMA_IRQHandler+0x10c>
 8001b20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b24:	e018      	b.n	8001b58 <HAL_DMA_IRQHandler+0x10c>
 8001b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2a:	e015      	b.n	8001b58 <HAL_DMA_IRQHandler+0x10c>
 8001b2c:	2340      	movs	r3, #64	; 0x40
 8001b2e:	e013      	b.n	8001b58 <HAL_DMA_IRQHandler+0x10c>
 8001b30:	2304      	movs	r3, #4
 8001b32:	e011      	b.n	8001b58 <HAL_DMA_IRQHandler+0x10c>
 8001b34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b38:	e00e      	b.n	8001b58 <HAL_DMA_IRQHandler+0x10c>
 8001b3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b3e:	e00b      	b.n	8001b58 <HAL_DMA_IRQHandler+0x10c>
 8001b40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b44:	e008      	b.n	8001b58 <HAL_DMA_IRQHandler+0x10c>
 8001b46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b4a:	e005      	b.n	8001b58 <HAL_DMA_IRQHandler+0x10c>
 8001b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b50:	e002      	b.n	8001b58 <HAL_DMA_IRQHandler+0x10c>
 8001b52:	2340      	movs	r3, #64	; 0x40
 8001b54:	e000      	b.n	8001b58 <HAL_DMA_IRQHandler+0x10c>
 8001b56:	2304      	movs	r3, #4
 8001b58:	4a79      	ldr	r2, [pc, #484]	; (8001d40 <HAL_DMA_IRQHandler+0x2f4>)
 8001b5a:	6053      	str	r3, [r2, #4]
 8001b5c:	e057      	b.n	8001c0e <HAL_DMA_IRQHandler+0x1c2>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a6d      	ldr	r2, [pc, #436]	; (8001d18 <HAL_DMA_IRQHandler+0x2cc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d04f      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x1bc>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a6b      	ldr	r2, [pc, #428]	; (8001d1c <HAL_DMA_IRQHandler+0x2d0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d048      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x1b8>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6a      	ldr	r2, [pc, #424]	; (8001d20 <HAL_DMA_IRQHandler+0x2d4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d040      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x1b2>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a68      	ldr	r2, [pc, #416]	; (8001d24 <HAL_DMA_IRQHandler+0x2d8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d038      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x1ac>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a67      	ldr	r2, [pc, #412]	; (8001d28 <HAL_DMA_IRQHandler+0x2dc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d030      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0x1a6>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a65      	ldr	r2, [pc, #404]	; (8001d2c <HAL_DMA_IRQHandler+0x2e0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d028      	beq.n	8001bec <HAL_DMA_IRQHandler+0x1a0>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5d      	ldr	r2, [pc, #372]	; (8001d14 <HAL_DMA_IRQHandler+0x2c8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d020      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x19a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a61      	ldr	r2, [pc, #388]	; (8001d30 <HAL_DMA_IRQHandler+0x2e4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x196>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a60      	ldr	r2, [pc, #384]	; (8001d34 <HAL_DMA_IRQHandler+0x2e8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d012      	beq.n	8001bde <HAL_DMA_IRQHandler+0x192>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a5e      	ldr	r2, [pc, #376]	; (8001d38 <HAL_DMA_IRQHandler+0x2ec>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00a      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x18c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a5d      	ldr	r2, [pc, #372]	; (8001d3c <HAL_DMA_IRQHandler+0x2f0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d102      	bne.n	8001bd2 <HAL_DMA_IRQHandler+0x186>
 8001bcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bd0:	e01b      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1be>
 8001bd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bd6:	e018      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1be>
 8001bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bdc:	e015      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1be>
 8001bde:	2340      	movs	r3, #64	; 0x40
 8001be0:	e013      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1be>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e011      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1be>
 8001be6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bea:	e00e      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1be>
 8001bec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bf0:	e00b      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1be>
 8001bf2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bf6:	e008      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1be>
 8001bf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bfc:	e005      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1be>
 8001bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c02:	e002      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1be>
 8001c04:	2340      	movs	r3, #64	; 0x40
 8001c06:	e000      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1be>
 8001c08:	2304      	movs	r3, #4
 8001c0a:	4a4e      	ldr	r2, [pc, #312]	; (8001d44 <HAL_DMA_IRQHandler+0x2f8>)
 8001c0c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8136 	beq.w	8001e84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c20:	e130      	b.n	8001e84 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	2202      	movs	r2, #2
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80f8 	beq.w	8001e24 <HAL_DMA_IRQHandler+0x3d8>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80f2 	beq.w	8001e24 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10b      	bne.n	8001c66 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 020a 	bic.w	r2, r2, #10
 8001c5c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <HAL_DMA_IRQHandler+0x2c8>)
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d973      	bls.n	8001d5a <HAL_DMA_IRQHandler+0x30e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <HAL_DMA_IRQHandler+0x2cc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d06a      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x306>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <HAL_DMA_IRQHandler+0x2d0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d063      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x302>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <HAL_DMA_IRQHandler+0x2d4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d05b      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x2fc>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <HAL_DMA_IRQHandler+0x2d8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d038      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x2c0>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <HAL_DMA_IRQHandler+0x2dc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d030      	beq.n	8001d06 <HAL_DMA_IRQHandler+0x2ba>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a20      	ldr	r2, [pc, #128]	; (8001d2c <HAL_DMA_IRQHandler+0x2e0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d028      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x2b4>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <HAL_DMA_IRQHandler+0x2c8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d020      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x2ae>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <HAL_DMA_IRQHandler+0x2e4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d019      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x2aa>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	; (8001d34 <HAL_DMA_IRQHandler+0x2e8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d012      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x2a6>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_DMA_IRQHandler+0x2ec>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00a      	beq.n	8001cec <HAL_DMA_IRQHandler+0x2a0>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a18      	ldr	r2, [pc, #96]	; (8001d3c <HAL_DMA_IRQHandler+0x2f0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d102      	bne.n	8001ce6 <HAL_DMA_IRQHandler+0x29a>
 8001ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce4:	e036      	b.n	8001d54 <HAL_DMA_IRQHandler+0x308>
 8001ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cea:	e033      	b.n	8001d54 <HAL_DMA_IRQHandler+0x308>
 8001cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf0:	e030      	b.n	8001d54 <HAL_DMA_IRQHandler+0x308>
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	e02e      	b.n	8001d54 <HAL_DMA_IRQHandler+0x308>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e02c      	b.n	8001d54 <HAL_DMA_IRQHandler+0x308>
 8001cfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cfe:	e029      	b.n	8001d54 <HAL_DMA_IRQHandler+0x308>
 8001d00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d04:	e026      	b.n	8001d54 <HAL_DMA_IRQHandler+0x308>
 8001d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d0a:	e023      	b.n	8001d54 <HAL_DMA_IRQHandler+0x308>
 8001d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d10:	e020      	b.n	8001d54 <HAL_DMA_IRQHandler+0x308>
 8001d12:	bf00      	nop
 8001d14:	40020080 	.word	0x40020080
 8001d18:	40020008 	.word	0x40020008
 8001d1c:	4002001c 	.word	0x4002001c
 8001d20:	40020030 	.word	0x40020030
 8001d24:	40020044 	.word	0x40020044
 8001d28:	40020058 	.word	0x40020058
 8001d2c:	4002006c 	.word	0x4002006c
 8001d30:	40020408 	.word	0x40020408
 8001d34:	4002041c 	.word	0x4002041c
 8001d38:	40020430 	.word	0x40020430
 8001d3c:	40020444 	.word	0x40020444
 8001d40:	40020400 	.word	0x40020400
 8001d44:	40020000 	.word	0x40020000
 8001d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d4c:	e002      	b.n	8001d54 <HAL_DMA_IRQHandler+0x308>
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e000      	b.n	8001d54 <HAL_DMA_IRQHandler+0x308>
 8001d52:	2302      	movs	r3, #2
 8001d54:	4a4e      	ldr	r2, [pc, #312]	; (8001e90 <HAL_DMA_IRQHandler+0x444>)
 8001d56:	6053      	str	r3, [r2, #4]
 8001d58:	e057      	b.n	8001e0a <HAL_DMA_IRQHandler+0x3be>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_DMA_IRQHandler+0x448>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d04f      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x3b8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a4b      	ldr	r2, [pc, #300]	; (8001e98 <HAL_DMA_IRQHandler+0x44c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d048      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x3b4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a4a      	ldr	r2, [pc, #296]	; (8001e9c <HAL_DMA_IRQHandler+0x450>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d040      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x3ae>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a48      	ldr	r2, [pc, #288]	; (8001ea0 <HAL_DMA_IRQHandler+0x454>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d038      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x3a8>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a47      	ldr	r2, [pc, #284]	; (8001ea4 <HAL_DMA_IRQHandler+0x458>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d030      	beq.n	8001dee <HAL_DMA_IRQHandler+0x3a2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a45      	ldr	r2, [pc, #276]	; (8001ea8 <HAL_DMA_IRQHandler+0x45c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d028      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x39c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a44      	ldr	r2, [pc, #272]	; (8001eac <HAL_DMA_IRQHandler+0x460>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d020      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x396>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a42      	ldr	r2, [pc, #264]	; (8001eb0 <HAL_DMA_IRQHandler+0x464>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d019      	beq.n	8001dde <HAL_DMA_IRQHandler+0x392>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a41      	ldr	r2, [pc, #260]	; (8001eb4 <HAL_DMA_IRQHandler+0x468>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d012      	beq.n	8001dda <HAL_DMA_IRQHandler+0x38e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a3f      	ldr	r2, [pc, #252]	; (8001eb8 <HAL_DMA_IRQHandler+0x46c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00a      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x388>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a3e      	ldr	r2, [pc, #248]	; (8001ebc <HAL_DMA_IRQHandler+0x470>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d102      	bne.n	8001dce <HAL_DMA_IRQHandler+0x382>
 8001dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dcc:	e01b      	b.n	8001e06 <HAL_DMA_IRQHandler+0x3ba>
 8001dce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd2:	e018      	b.n	8001e06 <HAL_DMA_IRQHandler+0x3ba>
 8001dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd8:	e015      	b.n	8001e06 <HAL_DMA_IRQHandler+0x3ba>
 8001dda:	2320      	movs	r3, #32
 8001ddc:	e013      	b.n	8001e06 <HAL_DMA_IRQHandler+0x3ba>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e011      	b.n	8001e06 <HAL_DMA_IRQHandler+0x3ba>
 8001de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de6:	e00e      	b.n	8001e06 <HAL_DMA_IRQHandler+0x3ba>
 8001de8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dec:	e00b      	b.n	8001e06 <HAL_DMA_IRQHandler+0x3ba>
 8001dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df2:	e008      	b.n	8001e06 <HAL_DMA_IRQHandler+0x3ba>
 8001df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df8:	e005      	b.n	8001e06 <HAL_DMA_IRQHandler+0x3ba>
 8001dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfe:	e002      	b.n	8001e06 <HAL_DMA_IRQHandler+0x3ba>
 8001e00:	2320      	movs	r3, #32
 8001e02:	e000      	b.n	8001e06 <HAL_DMA_IRQHandler+0x3ba>
 8001e04:	2302      	movs	r3, #2
 8001e06:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <HAL_DMA_IRQHandler+0x474>)
 8001e08:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d034      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e22:	e02f      	b.n	8001e84 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	2208      	movs	r2, #8
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d028      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x43a>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d023      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 020e 	bic.w	r2, r2, #14
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	4798      	blx	r3
    }
  }
  return;
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
}
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40020400 	.word	0x40020400
 8001e94:	40020008 	.word	0x40020008
 8001e98:	4002001c 	.word	0x4002001c
 8001e9c:	40020030 	.word	0x40020030
 8001ea0:	40020044 	.word	0x40020044
 8001ea4:	40020058 	.word	0x40020058
 8001ea8:	4002006c 	.word	0x4002006c
 8001eac:	40020080 	.word	0x40020080
 8001eb0:	40020408 	.word	0x40020408
 8001eb4:	4002041c 	.word	0x4002041c
 8001eb8:	40020430 	.word	0x40020430
 8001ebc:	40020444 	.word	0x40020444
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d108      	bne.n	8001f04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f02:	e007      	b.n	8001f14 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <HAL_FLASH_Program+0xd8>)
 8001f3c:	7e1b      	ldrb	r3, [r3, #24]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_FLASH_Program+0x26>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e054      	b.n	8001ff0 <HAL_FLASH_Program+0xd0>
 8001f46:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_FLASH_Program+0xd8>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f50:	f000 f8a8 	bl	80020a4 <FLASH_WaitForLastOperation>
 8001f54:	4603      	mov	r3, r0
 8001f56:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d144      	bne.n	8001fe8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001f64:	2301      	movs	r3, #1
 8001f66:	757b      	strb	r3, [r7, #21]
 8001f68:	e007      	b.n	8001f7a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d102      	bne.n	8001f76 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001f70:	2302      	movs	r3, #2
 8001f72:	757b      	strb	r3, [r7, #21]
 8001f74:	e001      	b.n	8001f7a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001f76:	2304      	movs	r3, #4
 8001f78:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75bb      	strb	r3, [r7, #22]
 8001f7e:	e02d      	b.n	8001fdc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001f80:	7dbb      	ldrb	r3, [r7, #22]
 8001f82:	005a      	lsls	r2, r3, #1
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	eb02 0c03 	add.w	ip, r2, r3
 8001f8a:	7dbb      	ldrb	r3, [r7, #22]
 8001f8c:	0119      	lsls	r1, r3, #4
 8001f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f92:	f1c1 0620 	rsb	r6, r1, #32
 8001f96:	f1a1 0020 	sub.w	r0, r1, #32
 8001f9a:	fa22 f401 	lsr.w	r4, r2, r1
 8001f9e:	fa03 f606 	lsl.w	r6, r3, r6
 8001fa2:	4334      	orrs	r4, r6
 8001fa4:	fa23 f000 	lsr.w	r0, r3, r0
 8001fa8:	4304      	orrs	r4, r0
 8001faa:	fa23 f501 	lsr.w	r5, r3, r1
 8001fae:	b2a3      	uxth	r3, r4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4660      	mov	r0, ip
 8001fb4:	f000 f85a 	bl	800206c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001fb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fbc:	f000 f872 	bl	80020a4 <FLASH_WaitForLastOperation>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_FLASH_Program+0xdc>)
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_FLASH_Program+0xdc>)
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001fd6:	7dbb      	ldrb	r3, [r7, #22]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	75bb      	strb	r3, [r7, #22]
 8001fdc:	7dba      	ldrb	r2, [r7, #22]
 8001fde:	7d7b      	ldrb	r3, [r7, #21]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d3cd      	bcc.n	8001f80 <HAL_FLASH_Program+0x60>
 8001fe4:	e000      	b.n	8001fe8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001fe6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_FLASH_Program+0xd8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	761a      	strb	r2, [r3, #24]

  return status;
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff8:	20000e28 	.word	0x20000e28
 8001ffc:	40022000 	.word	0x40022000

08002000 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_FLASH_Unlock+0x40>)
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00d      	beq.n	8002032 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_FLASH_Unlock+0x40>)
 8002018:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <HAL_FLASH_Unlock+0x44>)
 800201a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_FLASH_Unlock+0x40>)
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_FLASH_Unlock+0x48>)
 8002020:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_FLASH_Unlock+0x40>)
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002032:	79fb      	ldrb	r3, [r7, #7]
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40022000 	.word	0x40022000
 8002044:	45670123 	.word	0x45670123
 8002048:	cdef89ab 	.word	0xcdef89ab

0800204c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_FLASH_Lock+0x1c>)
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_FLASH_Lock+0x1c>)
 8002056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40022000 	.word	0x40022000

0800206c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <FLASH_Program_HalfWord+0x30>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <FLASH_Program_HalfWord+0x34>)
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <FLASH_Program_HalfWord+0x34>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	887a      	ldrh	r2, [r7, #2]
 800208e:	801a      	strh	r2, [r3, #0]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000e28 	.word	0x20000e28
 80020a0:	40022000 	.word	0x40022000

080020a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff f91a 	bl	80012e4 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80020b2:	e010      	b.n	80020d6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ba:	d00c      	beq.n	80020d6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <FLASH_WaitForLastOperation+0x2e>
 80020c2:	f7ff f90f 	bl	80012e4 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d201      	bcs.n	80020d6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e025      	b.n	8002122 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1e8      	bne.n	80020b4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 80020f0:	2220      	movs	r2, #32
 80020f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <FLASH_WaitForLastOperation+0x88>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002118:	f000 f80a 	bl	8002130 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000

08002130 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800213a:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002150:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f043 0310 	orr.w	r3, r3, #16
 8002158:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	4a17      	ldr	r2, [pc, #92]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002170:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800217a:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <FLASH_SetErrorCode+0x9c>)
 8002190:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a0c      	ldr	r2, [pc, #48]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f240 1201 	movw	r2, #257	; 0x101
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d106      	bne.n	80021b6 <FLASH_SetErrorCode+0x86>
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	61d3      	str	r3, [r2, #28]
}  
 80021b4:	e002      	b.n	80021bc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <FLASH_SetErrorCode+0x98>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60d3      	str	r3, [r2, #12]
}  
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40022000 	.word	0x40022000
 80021cc:	20000e28 	.word	0x20000e28

080021d0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_FLASHEx_Erase+0xd0>)
 80021e4:	7e1b      	ldrb	r3, [r3, #24]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_FLASHEx_Erase+0x1e>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e053      	b.n	8002296 <HAL_FLASHEx_Erase+0xc6>
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <HAL_FLASHEx_Erase+0xd0>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d116      	bne.n	800222a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80021fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002200:	f7ff ff50 	bl	80020a4 <FLASH_WaitForLastOperation>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d141      	bne.n	800228e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800220a:	2001      	movs	r0, #1
 800220c:	f000 f84c 	bl	80022a8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002210:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002214:	f7ff ff46 	bl	80020a4 <FLASH_WaitForLastOperation>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_FLASHEx_Erase+0xd4>)
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	4a20      	ldr	r2, [pc, #128]	; (80022a4 <HAL_FLASHEx_Erase+0xd4>)
 8002222:	f023 0304 	bic.w	r3, r3, #4
 8002226:	6113      	str	r3, [r2, #16]
 8002228:	e031      	b.n	800228e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800222a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800222e:	f7ff ff39 	bl	80020a4 <FLASH_WaitForLastOperation>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d12a      	bne.n	800228e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f04f 32ff 	mov.w	r2, #4294967295
 800223e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	e019      	b.n	800227c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002248:	68b8      	ldr	r0, [r7, #8]
 800224a:	f000 f849 	bl	80022e0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800224e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002252:	f7ff ff27 	bl	80020a4 <FLASH_WaitForLastOperation>
 8002256:	4603      	mov	r3, r0
 8002258:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_FLASHEx_Erase+0xd4>)
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <HAL_FLASHEx_Erase+0xd4>)
 8002260:	f023 0302 	bic.w	r3, r3, #2
 8002264:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	601a      	str	r2, [r3, #0]
            break;
 8002272:	e00c      	b.n	800228e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	02da      	lsls	r2, r3, #11
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	429a      	cmp	r2, r3
 800228c:	d3dc      	bcc.n	8002248 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_FLASHEx_Erase+0xd0>)
 8002290:	2200      	movs	r2, #0
 8002292:	761a      	strb	r2, [r3, #24]

  return status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000e28 	.word	0x20000e28
 80022a4:	40022000 	.word	0x40022000

080022a8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <FLASH_MassErase+0x30>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <FLASH_MassErase+0x34>)
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <FLASH_MassErase+0x34>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <FLASH_MassErase+0x34>)
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <FLASH_MassErase+0x34>)
 80022c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022cc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	20000e28 	.word	0x20000e28
 80022dc:	40022000 	.word	0x40022000

080022e0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <FLASH_PageErase+0x38>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <FLASH_PageErase+0x3c>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <FLASH_PageErase+0x3c>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <FLASH_PageErase+0x3c>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <FLASH_PageErase+0x3c>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	4a05      	ldr	r2, [pc, #20]	; (800231c <FLASH_PageErase+0x3c>)
 8002306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800230a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000e28 	.word	0x20000e28
 800231c:	40022000 	.word	0x40022000

08002320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002320:	b480      	push	{r7}
 8002322:	b08b      	sub	sp, #44	; 0x2c
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	e133      	b.n	80025ac <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8002344:	2201      	movs	r2, #1
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	429a      	cmp	r2, r3
 800235e:	f040 8122 	bne.w	80025a6 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b12      	cmp	r3, #18
 8002368:	d034      	beq.n	80023d4 <HAL_GPIO_Init+0xb4>
 800236a:	2b12      	cmp	r3, #18
 800236c:	d80d      	bhi.n	800238a <HAL_GPIO_Init+0x6a>
 800236e:	2b02      	cmp	r3, #2
 8002370:	d02b      	beq.n	80023ca <HAL_GPIO_Init+0xaa>
 8002372:	2b02      	cmp	r3, #2
 8002374:	d804      	bhi.n	8002380 <HAL_GPIO_Init+0x60>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d031      	beq.n	80023de <HAL_GPIO_Init+0xbe>
 800237a:	2b01      	cmp	r3, #1
 800237c:	d01c      	beq.n	80023b8 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800237e:	e048      	b.n	8002412 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002380:	2b03      	cmp	r3, #3
 8002382:	d043      	beq.n	800240c <HAL_GPIO_Init+0xec>
 8002384:	2b11      	cmp	r3, #17
 8002386:	d01b      	beq.n	80023c0 <HAL_GPIO_Init+0xa0>
          break;
 8002388:	e043      	b.n	8002412 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800238a:	4a8d      	ldr	r2, [pc, #564]	; (80025c0 <HAL_GPIO_Init+0x2a0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d026      	beq.n	80023de <HAL_GPIO_Init+0xbe>
 8002390:	4a8b      	ldr	r2, [pc, #556]	; (80025c0 <HAL_GPIO_Init+0x2a0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d806      	bhi.n	80023a4 <HAL_GPIO_Init+0x84>
 8002396:	4a8b      	ldr	r2, [pc, #556]	; (80025c4 <HAL_GPIO_Init+0x2a4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d020      	beq.n	80023de <HAL_GPIO_Init+0xbe>
 800239c:	4a8a      	ldr	r2, [pc, #552]	; (80025c8 <HAL_GPIO_Init+0x2a8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01d      	beq.n	80023de <HAL_GPIO_Init+0xbe>
          break;
 80023a2:	e036      	b.n	8002412 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80023a4:	4a89      	ldr	r2, [pc, #548]	; (80025cc <HAL_GPIO_Init+0x2ac>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0xbe>
 80023aa:	4a89      	ldr	r2, [pc, #548]	; (80025d0 <HAL_GPIO_Init+0x2b0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d016      	beq.n	80023de <HAL_GPIO_Init+0xbe>
 80023b0:	4a88      	ldr	r2, [pc, #544]	; (80025d4 <HAL_GPIO_Init+0x2b4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0xbe>
          break;
 80023b6:	e02c      	b.n	8002412 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e028      	b.n	8002412 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	3304      	adds	r3, #4
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e023      	b.n	8002412 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	3308      	adds	r3, #8
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e01e      	b.n	8002412 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	330c      	adds	r3, #12
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e019      	b.n	8002412 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e6:	2304      	movs	r3, #4
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e012      	b.n	8002412 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	611a      	str	r2, [r3, #16]
          break;
 80023fe:	e008      	b.n	8002412 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	615a      	str	r2, [r3, #20]
          break;
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2bff      	cmp	r3, #255	; 0xff
 8002416:	d801      	bhi.n	800241c <HAL_GPIO_Init+0xfc>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	e001      	b.n	8002420 <HAL_GPIO_Init+0x100>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3304      	adds	r3, #4
 8002420:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2bff      	cmp	r3, #255	; 0xff
 8002426:	d802      	bhi.n	800242e <HAL_GPIO_Init+0x10e>
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x114>
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	3b08      	subs	r3, #8
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	210f      	movs	r1, #15
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	401a      	ands	r2, r3
 8002446:	6a39      	ldr	r1, [r7, #32]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	431a      	orrs	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80a2 	beq.w	80025a6 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002462:	4b5d      	ldr	r3, [pc, #372]	; (80025d8 <HAL_GPIO_Init+0x2b8>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	4a5c      	ldr	r2, [pc, #368]	; (80025d8 <HAL_GPIO_Init+0x2b8>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6193      	str	r3, [r2, #24]
 800246e:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <HAL_GPIO_Init+0x2b8>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800247a:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_GPIO_Init+0x2bc>)
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4013      	ands	r3, r2
 800249c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4f      	ldr	r2, [pc, #316]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01f      	beq.n	80024e6 <HAL_GPIO_Init+0x1c6>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4e      	ldr	r2, [pc, #312]	; (80025e4 <HAL_GPIO_Init+0x2c4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x1c2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <HAL_GPIO_Init+0x2c8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x1be>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4c      	ldr	r2, [pc, #304]	; (80025ec <HAL_GPIO_Init+0x2cc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x1ba>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4b      	ldr	r2, [pc, #300]	; (80025f0 <HAL_GPIO_Init+0x2d0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x1b6>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4a      	ldr	r2, [pc, #296]	; (80025f4 <HAL_GPIO_Init+0x2d4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x1b2>
 80024ce:	2305      	movs	r3, #5
 80024d0:	e00a      	b.n	80024e8 <HAL_GPIO_Init+0x1c8>
 80024d2:	2306      	movs	r3, #6
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x1c8>
 80024d6:	2304      	movs	r3, #4
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x1c8>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x1c8>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x1c8>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x1c8>
 80024e6:	2300      	movs	r3, #0
 80024e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80024f8:	4938      	ldr	r1, [pc, #224]	; (80025dc <HAL_GPIO_Init+0x2bc>)
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d006      	beq.n	8002520 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002512:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4938      	ldr	r1, [pc, #224]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
 800251e:	e006      	b.n	800252e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002520:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	43db      	mvns	r3, r3
 8002528:	4933      	ldr	r1, [pc, #204]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 800252a:	4013      	ands	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d006      	beq.n	8002548 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800253a:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	492e      	ldr	r1, [pc, #184]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
 8002546:	e006      	b.n	8002556 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	43db      	mvns	r3, r3
 8002550:	4929      	ldr	r1, [pc, #164]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 8002552:	4013      	ands	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	4924      	ldr	r1, [pc, #144]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
 800256e:	e006      	b.n	800257e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002570:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	43db      	mvns	r3, r3
 8002578:	491f      	ldr	r1, [pc, #124]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 800257a:	4013      	ands	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d006      	beq.n	8002598 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	491a      	ldr	r1, [pc, #104]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	60cb      	str	r3, [r1, #12]
 8002596:	e006      	b.n	80025a6 <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002598:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	43db      	mvns	r3, r3
 80025a0:	4915      	ldr	r1, [pc, #84]	; (80025f8 <HAL_GPIO_Init+0x2d8>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3301      	adds	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f aec8 	bls.w	8002344 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	372c      	adds	r7, #44	; 0x2c
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	10210000 	.word	0x10210000
 80025c4:	10110000 	.word	0x10110000
 80025c8:	10120000 	.word	0x10120000
 80025cc:	10310000 	.word	0x10310000
 80025d0:	10320000 	.word	0x10320000
 80025d4:	10220000 	.word	0x10220000
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40010000 	.word	0x40010000
 80025e0:	40010800 	.word	0x40010800
 80025e4:	40010c00 	.word	0x40010c00
 80025e8:	40011000 	.word	0x40011000
 80025ec:	40011400 	.word	0x40011400
 80025f0:	40011800 	.word	0x40011800
 80025f4:	40011c00 	.word	0x40011c00
 80025f8:	40010400 	.word	0x40010400

080025fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002616:	e0a6      	b.n	8002766 <HAL_GPIO_DeInit+0x16a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002618:	2201      	movs	r2, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8099 	beq.w	8002760 <HAL_GPIO_DeInit+0x164>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2bff      	cmp	r3, #255	; 0xff
 8002632:	d801      	bhi.n	8002638 <HAL_GPIO_DeInit+0x3c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	e001      	b.n	800263c <HAL_GPIO_DeInit+0x40>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2bff      	cmp	r3, #255	; 0xff
 8002642:	d802      	bhi.n	800264a <HAL_GPIO_DeInit+0x4e>
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	e002      	b.n	8002650 <HAL_GPIO_DeInit+0x54>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3b08      	subs	r3, #8
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	613b      	str	r3, [r7, #16]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	210f      	movs	r1, #15
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	401a      	ands	r2, r3
 8002662:	2104      	movs	r1, #4
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	431a      	orrs	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	43db      	mvns	r3, r3
 8002678:	401a      	ands	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
 800267e:	4a40      	ldr	r2, [pc, #256]	; (8002780 <HAL_GPIO_DeInit+0x184>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4013      	ands	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a38      	ldr	r2, [pc, #224]	; (8002784 <HAL_GPIO_DeInit+0x188>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d01f      	beq.n	80026e8 <HAL_GPIO_DeInit+0xec>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a37      	ldr	r2, [pc, #220]	; (8002788 <HAL_GPIO_DeInit+0x18c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d019      	beq.n	80026e4 <HAL_GPIO_DeInit+0xe8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a36      	ldr	r2, [pc, #216]	; (800278c <HAL_GPIO_DeInit+0x190>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d013      	beq.n	80026e0 <HAL_GPIO_DeInit+0xe4>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a35      	ldr	r2, [pc, #212]	; (8002790 <HAL_GPIO_DeInit+0x194>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00d      	beq.n	80026dc <HAL_GPIO_DeInit+0xe0>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a34      	ldr	r2, [pc, #208]	; (8002794 <HAL_GPIO_DeInit+0x198>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d007      	beq.n	80026d8 <HAL_GPIO_DeInit+0xdc>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a33      	ldr	r2, [pc, #204]	; (8002798 <HAL_GPIO_DeInit+0x19c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d101      	bne.n	80026d4 <HAL_GPIO_DeInit+0xd8>
 80026d0:	2305      	movs	r3, #5
 80026d2:	e00a      	b.n	80026ea <HAL_GPIO_DeInit+0xee>
 80026d4:	2306      	movs	r3, #6
 80026d6:	e008      	b.n	80026ea <HAL_GPIO_DeInit+0xee>
 80026d8:	2304      	movs	r3, #4
 80026da:	e006      	b.n	80026ea <HAL_GPIO_DeInit+0xee>
 80026dc:	2303      	movs	r3, #3
 80026de:	e004      	b.n	80026ea <HAL_GPIO_DeInit+0xee>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e002      	b.n	80026ea <HAL_GPIO_DeInit+0xee>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_GPIO_DeInit+0xee>
 80026e8:	2300      	movs	r3, #0
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	f002 0203 	and.w	r2, r2, #3
 80026f0:	0092      	lsls	r2, r2, #2
 80026f2:	4093      	lsls	r3, r2
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d132      	bne.n	8002760 <HAL_GPIO_DeInit+0x164>
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	220f      	movs	r2, #15
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 800270a:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_GPIO_DeInit+0x184>)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	3302      	adds	r3, #2
 8002712:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	43da      	mvns	r2, r3
 800271a:	4819      	ldr	r0, [pc, #100]	; (8002780 <HAL_GPIO_DeInit+0x184>)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	400a      	ands	r2, r1
 8002722:	3302      	adds	r3, #2
 8002724:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002728:	4b1c      	ldr	r3, [pc, #112]	; (800279c <HAL_GPIO_DeInit+0x1a0>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	43db      	mvns	r3, r3
 8002730:	491a      	ldr	r1, [pc, #104]	; (800279c <HAL_GPIO_DeInit+0x1a0>)
 8002732:	4013      	ands	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_GPIO_DeInit+0x1a0>)
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	43db      	mvns	r3, r3
 800273e:	4917      	ldr	r1, [pc, #92]	; (800279c <HAL_GPIO_DeInit+0x1a0>)
 8002740:	4013      	ands	r3, r2
 8002742:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_GPIO_DeInit+0x1a0>)
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	43db      	mvns	r3, r3
 800274c:	4913      	ldr	r1, [pc, #76]	; (800279c <HAL_GPIO_DeInit+0x1a0>)
 800274e:	4013      	ands	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_GPIO_DeInit+0x1a0>)
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	43db      	mvns	r3, r3
 800275a:	4910      	ldr	r1, [pc, #64]	; (800279c <HAL_GPIO_DeInit+0x1a0>)
 800275c:	4013      	ands	r3, r2
 800275e:	60cb      	str	r3, [r1, #12]
      }
    }

    position++;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	3301      	adds	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	f47f af52 	bne.w	8002618 <HAL_GPIO_DeInit+0x1c>
  }
}
 8002774:	bf00      	nop
 8002776:	3724      	adds	r7, #36	; 0x24
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40010000 	.word	0x40010000
 8002784:	40010800 	.word	0x40010800
 8002788:	40010c00 	.word	0x40010c00
 800278c:	40011000 	.word	0x40011000
 8002790:	40011400 	.word	0x40011400
 8002794:	40011800 	.word	0x40011800
 8002798:	40011c00 	.word	0x40011c00
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027bc:	e003      	b.n	80027c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	041a      	lsls	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	611a      	str	r2, [r3, #16]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	405a      	eors	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f4:	b08b      	sub	sp, #44	; 0x2c
 80027f6:	af06      	add	r7, sp, #24
 80027f8:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0ca      	b.n	800299e <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d106      	bne.n	8002822 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f005 f919 	bl	8007a54 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2203      	movs	r2, #3
 8002826:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f002 fc2e 	bl	8005090 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	687e      	ldr	r6, [r7, #4]
 800283c:	466d      	mov	r5, sp
 800283e:	f106 0410 	add.w	r4, r6, #16
 8002842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	602b      	str	r3, [r5, #0]
 800284a:	1d33      	adds	r3, r6, #4
 800284c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800284e:	6838      	ldr	r0, [r7, #0]
 8002850:	f002 fbf4 	bl	800503c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f002 fc34 	bl	80050c8 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e037      	b.n	80028d6 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015b      	lsls	r3, r3, #5
 800286c:	4413      	add	r3, r2
 800286e:	3329      	adds	r3, #41	; 0x29
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	b2d9      	uxtb	r1, r3
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015b      	lsls	r3, r3, #5
 800287e:	4413      	add	r3, r2
 8002880:	3328      	adds	r3, #40	; 0x28
 8002882:	460a      	mov	r2, r1
 8002884:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	b299      	uxth	r1, r3
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015b      	lsls	r3, r3, #5
 8002890:	4413      	add	r3, r2
 8002892:	3334      	adds	r3, #52	; 0x34
 8002894:	460a      	mov	r2, r1
 8002896:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	015b      	lsls	r3, r3, #5
 800289e:	4413      	add	r3, r2
 80028a0:	332b      	adds	r3, #43	; 0x2b
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015b      	lsls	r3, r3, #5
 80028ac:	4413      	add	r3, r2
 80028ae:	3338      	adds	r3, #56	; 0x38
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015b      	lsls	r3, r3, #5
 80028ba:	4413      	add	r3, r2
 80028bc:	333c      	adds	r3, #60	; 0x3c
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3302      	adds	r3, #2
 80028c8:	015b      	lsls	r3, r3, #5
 80028ca:	4413      	add	r3, r2
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3301      	adds	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b0e      	cmp	r3, #14
 80028da:	d9c4      	bls.n	8002866 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e03c      	b.n	800295c <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015b      	lsls	r3, r3, #5
 80028e8:	4413      	add	r3, r2
 80028ea:	f203 2329 	addw	r3, r3, #553	; 0x229
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	b2d9      	uxtb	r1, r3
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	015b      	lsls	r3, r3, #5
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002902:	460a      	mov	r2, r1
 8002904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	b299      	uxth	r1, r3
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	015b      	lsls	r3, r3, #5
 8002910:	4413      	add	r3, r2
 8002912:	3334      	adds	r3, #52	; 0x34
 8002914:	460a      	mov	r2, r1
 8002916:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	015b      	lsls	r3, r3, #5
 800291e:	4413      	add	r3, r2
 8002920:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	015b      	lsls	r3, r3, #5
 800292e:	4413      	add	r3, r2
 8002930:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	015b      	lsls	r3, r3, #5
 800293e:	4413      	add	r3, r2
 8002940:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3312      	adds	r3, #18
 800294e:	015b      	lsls	r3, r3, #5
 8002950:	4413      	add	r3, r2
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3301      	adds	r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b0e      	cmp	r3, #14
 8002960:	d9bf      	bls.n	80028e2 <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	687e      	ldr	r6, [r7, #4]
 800296a:	466d      	mov	r5, sp
 800296c:	f106 0410 	add.w	r4, r6, #16
 8002970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	602b      	str	r3, [r5, #0]
 8002978:	1d33      	adds	r3, r6, #4
 800297a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800297c:	6838      	ldr	r0, [r7, #0]
 800297e:	f002 fbaf 	bl	80050e0 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fb99 	bl	80060ce <USB_DevDisconnect>
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029a6 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_PCD_Start+0x16>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e016      	b.n	80029ea <HAL_PCD_Start+0x44>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80029c4:	2101      	movs	r1, #1
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f005 faab 	bl	8007f22 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 fb72 	bl	80060ba <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f002 fb3e 	bl	800505c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 fb6f 	bl	80060e2 <USB_ReadInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0e:	d102      	bne.n	8002a16 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fad9 	bl	8002fc8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fb61 	bl	80060e2 <USB_ReadInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2a:	d112      	bne.n	8002a52 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3e:	b292      	uxth	r2, r2
 8002a40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f005 f87a 	bl	8007b3e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f8d2 	bl	8002bf6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 fb43 	bl	80060e2 <USB_ReadInterrupts>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a66:	d10b      	bne.n	8002a80 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a7a:	b292      	uxth	r2, r2
 8002a7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 fb2c 	bl	80060e2 <USB_ReadInterrupts>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a94:	d10b      	bne.n	8002aae <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa8:	b292      	uxth	r2, r2
 8002aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fb15 	bl	80060e2 <USB_ReadInterrupts>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac2:	d126      	bne.n	8002b12 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0204 	bic.w	r2, r2, #4
 8002ad6:	b292      	uxth	r2, r2
 8002ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0208 	bic.w	r2, r2, #8
 8002aee:	b292      	uxth	r2, r2
 8002af0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f005 f85b 	bl	8007bb0 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b0c:	b292      	uxth	r2, r2
 8002b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 fae3 	bl	80060e2 <USB_ReadInterrupts>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b26:	d131      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0208 	orr.w	r2, r2, #8
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b52:	b292      	uxth	r2, r2
 8002b54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0204 	orr.w	r2, r2, #4
 8002b6a:	b292      	uxth	r2, r2
 8002b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 fab4 	bl	80060e2 <USB_ReadInterrupts>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b84:	d002      	beq.n	8002b8c <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f004 fff8 	bl	8007b7c <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 faa6 	bl	80060e2 <USB_ReadInterrupts>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f004 ffb1 	bl	8007b22 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 fa8c 	bl	80060e2 <USB_ReadInterrupts>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd4:	d10b      	bne.n	8002bee <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be8:	b292      	uxth	r2, r2
 8002bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_PCD_SetAddress+0x1a>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e013      	b.n	8002c38 <HAL_PCD_SetAddress+0x42>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 fa33 	bl	8006094 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	4608      	mov	r0, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	70fb      	strb	r3, [r7, #3]
 8002c52:	460b      	mov	r3, r1
 8002c54:	803b      	strh	r3, [r7, #0]
 8002c56:	4613      	mov	r3, r2
 8002c58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8002c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da08      	bge.n	8002c7c <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c70:	015b      	lsls	r3, r3, #5
 8002c72:	3328      	adds	r3, #40	; 0x28
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	e008      	b.n	8002c8e <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c82:	015b      	lsls	r3, r3, #5
 8002c84:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	09db      	lsrs	r3, r3, #7
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8002caa:	883a      	ldrh	r2, [r7, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	78ba      	ldrb	r2, [r7, #2]
 8002cb4:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_PCD_EP_Open+0x84>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e00e      	b.n	8002ce2 <HAL_PCD_EP_Open+0xa2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68f9      	ldr	r1, [r7, #12]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fa28 	bl	8005128 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 8002ce0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8002cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	da08      	bge.n	8002d14 <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d08:	015b      	lsls	r3, r3, #5
 8002d0a:	3328      	adds	r3, #40	; 0x28
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	4413      	add	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	e008      	b.n	8002d26 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d1a:	015b      	lsls	r3, r3, #5
 8002d1c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	09db      	lsrs	r3, r3, #7
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_PCD_EP_Close+0x66>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e00e      	b.n	8002d6e <HAL_PCD_EP_Close+0x84>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68f9      	ldr	r1, [r7, #12]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 fca4 	bl	80056ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	460b      	mov	r3, r1
 8002d84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002d8a:	7afb      	ldrb	r3, [r7, #11]
 8002d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d90:	015b      	lsls	r3, r3, #5
 8002d92:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4413      	add	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002db4:	7afb      	ldrb	r3, [r7, #11]
 8002db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8002dc0:	7afb      	ldrb	r3, [r7, #11]
 8002dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6979      	ldr	r1, [r7, #20]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f002 fdf3 	bl	80059bc <USB_EPStartXfer>
 8002dd6:	e005      	b.n	8002de4 <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6979      	ldr	r1, [r7, #20]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 fdec 	bl	80059bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	3312      	adds	r3, #18
 8002e04:	015b      	lsls	r3, r3, #5
 8002e06:	4413      	add	r3, r2
 8002e08:	3304      	adds	r3, #4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	460b      	mov	r3, r1
 8002e26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002e2c:	7afb      	ldrb	r3, [r7, #11]
 8002e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e32:	015b      	lsls	r3, r3, #5
 8002e34:	3328      	adds	r3, #40	; 0x28
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4413      	add	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2201      	movs	r2, #1
 8002e52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002e54:	7afb      	ldrb	r3, [r7, #11]
 8002e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8002e60:	7afb      	ldrb	r3, [r7, #11]
 8002e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6979      	ldr	r1, [r7, #20]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f002 fda3 	bl	80059bc <USB_EPStartXfer>
 8002e76:	e005      	b.n	8002e84 <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6979      	ldr	r1, [r7, #20]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 fd9c 	bl	80059bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8002e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	da08      	bge.n	8002eb8 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eac:	015b      	lsls	r3, r3, #5
 8002eae:	3328      	adds	r3, #40	; 0x28
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	e006      	b.n	8002ec6 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	015b      	lsls	r3, r3, #5
 8002ebc:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	09db      	lsrs	r3, r3, #7
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_PCD_EP_SetStall+0x68>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e01c      	b.n	8002f30 <HAL_PCD_EP_SetStall+0xa2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68f9      	ldr	r1, [r7, #12]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 ffdb 	bl	8005ec0 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d108      	bne.n	8002f26 <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f003 f8ef 	bl	8006104 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8002f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	da08      	bge.n	8002f62 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f56:	015b      	lsls	r3, r3, #5
 8002f58:	3328      	adds	r3, #40	; 0x28
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e006      	b.n	8002f70 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	015b      	lsls	r3, r3, #5
 8002f66:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	09db      	lsrs	r3, r3, #7
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_PCD_EP_ClrStall+0x68>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e00e      	b.n	8002fbe <HAL_PCD_EP_ClrStall+0x86>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68f9      	ldr	r1, [r7, #12]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 ffe6 	bl	8005f80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
  uint16_t count = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	837b      	strh	r3, [r7, #26]
  uint8_t epindex = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	767b      	strb	r3, [r7, #25]
  __IO uint16_t wIstr = 0;  
 8002fdc:	2300      	movs	r3, #0
 8002fde:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8002fe4:	e308      	b.n	80035f8 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002fe6:	89fb      	ldrh	r3, [r7, #14]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	767b      	strb	r3, [r7, #25]
    
    if (epindex == 0)
 8002ff2:	7e7b      	ldrb	r3, [r7, #25]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f040 812a 	bne.w	800324e <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8002ffa:	89fb      	ldrh	r3, [r7, #14]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d14d      	bne.n	80030a2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	b29b      	uxth	r3, r3
 800301c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3328      	adds	r3, #40	; 0x28
 8003022:	61fb      	str	r3, [r7, #28]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302c:	b29b      	uxth	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	3302      	adds	r3, #2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	441a      	add	r2, r3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003060:	2100      	movs	r1, #0
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f004 fd46 	bl	8007af4 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 82c1 	beq.w	80035f8 <PCD_EP_ISR_Handler+0x630>
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 82bc 	bne.w	80035f8 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800308c:	b2da      	uxtb	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b292      	uxth	r2, r2
 8003094:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030a0:	e2aa      	b.n	80035f8 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80030a8:	61fb      	str	r3, [r7, #28]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80030b4:	89bb      	ldrh	r3, [r7, #12]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d031      	beq.n	8003124 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	3306      	adds	r3, #6
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	889a      	ldrh	r2, [r3, #4]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f003 f850 	bl	80061a6 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b299      	uxth	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003116:	400b      	ands	r3, r1
 8003118:	b29b      	uxth	r3, r3
 800311a:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f004 fcbf 	bl	8007aa0 <HAL_PCD_SetupStageCallback>
 8003122:	e269      	b.n	80035f8 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003124:	89bb      	ldrh	r3, [r7, #12]
 8003126:	b29b      	uxth	r3, r3
 8003128:	b21b      	sxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	f280 8264 	bge.w	80035f8 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b299      	uxth	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003140:	400b      	ands	r3, r1
 8003142:	b29b      	uxth	r3, r3
 8003144:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800314e:	b29b      	uxth	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	3306      	adds	r3, #6
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d011      	beq.n	80031a0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	6959      	ldr	r1, [r3, #20]
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	889a      	ldrh	r2, [r3, #4]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f003 f80a 	bl	80061a6 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	441a      	add	r2, r3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80031a0:	2100      	movs	r1, #0
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f004 fc8e 	bl	8007ac4 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3306      	adds	r3, #6
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b3e      	cmp	r3, #62	; 0x3e
 80031c8:	d918      	bls.n	80031fc <PCD_EP_ISR_Handler+0x234>
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	82fb      	strh	r3, [r7, #22]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <PCD_EP_ISR_Handler+0x21c>
 80031de:	8afb      	ldrh	r3, [r7, #22]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	82fb      	strh	r3, [r7, #22]
 80031e4:	8afb      	ldrh	r3, [r7, #22]
 80031e6:	029b      	lsls	r3, r3, #10
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e012      	b.n	8003222 <PCD_EP_ISR_Handler+0x25a>
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	82fb      	strh	r3, [r7, #22]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <PCD_EP_ISR_Handler+0x24e>
 8003210:	8afb      	ldrh	r3, [r7, #22]
 8003212:	3301      	adds	r3, #1
 8003214:	82fb      	strh	r3, [r7, #22]
 8003216:	8afb      	ldrh	r3, [r7, #22]
 8003218:	029b      	lsls	r3, r3, #10
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	b29c      	uxth	r4, r3
 8003234:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003238:	b29c      	uxth	r4, r3
 800323a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800323e:	b29c      	uxth	r4, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b98      	ldr	r3, [pc, #608]	; (80034a8 <PCD_EP_ISR_Handler+0x4e0>)
 8003246:	4323      	orrs	r3, r4
 8003248:	b29b      	uxth	r3, r3
 800324a:	8013      	strh	r3, [r2, #0]
 800324c:	e1d4      	b.n	80035f8 <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	7e7b      	ldrb	r3, [r7, #25]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	b29b      	uxth	r3, r3
 800325e:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003260:	89bb      	ldrh	r3, [r7, #12]
 8003262:	b29b      	uxth	r3, r3
 8003264:	b21b      	sxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	f280 80d0 	bge.w	800340c <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	7e7b      	ldrb	r3, [r7, #25]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	b299      	uxth	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	7e7b      	ldrb	r3, [r7, #25]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	441a      	add	r2, r3
 8003288:	f640 738f 	movw	r3, #3983	; 0xf8f
 800328c:	400b      	ands	r3, r1
 800328e:	b29b      	uxth	r3, r3
 8003290:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003292:	7e7b      	ldrb	r3, [r7, #25]
 8003294:	015b      	lsls	r3, r3, #5
 8003296:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	61fb      	str	r3, [r7, #28]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	7a9b      	ldrb	r3, [r3, #10]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d122      	bne.n	80032ee <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	3306      	adds	r3, #6
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d2:	837b      	strh	r3, [r7, #26]
          if (count != 0U)
 80032d4:	8b7b      	ldrh	r3, [r7, #26]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d073      	beq.n	80033c2 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	6959      	ldr	r1, [r3, #20]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	889a      	ldrh	r2, [r3, #4]
 80032e6:	8b7b      	ldrh	r3, [r7, #26]
 80032e8:	f002 ff5d 	bl	80061a6 <USB_ReadPMA>
 80032ec:	e069      	b.n	80033c2 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d022      	beq.n	800334e <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003310:	b29b      	uxth	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	3302      	adds	r3, #2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003332:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8003334:	8b7b      	ldrh	r3, [r7, #26]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02b      	beq.n	8003392 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	6959      	ldr	r1, [r3, #20]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	88da      	ldrh	r2, [r3, #6]
 8003346:	8b7b      	ldrh	r3, [r7, #26]
 8003348:	f002 ff2d 	bl	80061a6 <USB_ReadPMA>
 800334c:	e021      	b.n	8003392 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003356:	b29b      	uxth	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	3306      	adds	r3, #6
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003378:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 800337a:	8b7b      	ldrh	r3, [r7, #26]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	6959      	ldr	r1, [r3, #20]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	891a      	ldrh	r2, [r3, #8]
 800338c:	8b7b      	ldrh	r3, [r7, #26]
 800338e:	f002 ff0a 	bl	80061a6 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80033a8:	4013      	ands	r3, r2
 80033aa:	b299      	uxth	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	441a      	add	r2, r3
 80033ba:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <PCD_EP_ISR_Handler+0x4e4>)
 80033bc:	430b      	orrs	r3, r1
 80033be:	b29b      	uxth	r3, r3
 80033c0:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	8b7b      	ldrh	r3, [r7, #26]
 80033c8:	441a      	add	r2, r3
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	8b7b      	ldrh	r3, [r7, #26]
 80033d4:	441a      	add	r2, r3
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <PCD_EP_ISR_Handler+0x424>
 80033e2:	8b7a      	ldrh	r2, [r7, #26]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d206      	bcs.n	80033fa <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f004 fb66 	bl	8007ac4 <HAL_PCD_DataOutStageCallback>
 80033f8:	e008      	b.n	800340c <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	7819      	ldrb	r1, [r3, #0]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fcb5 	bl	8002d76 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800340c:	89bb      	ldrh	r3, [r7, #12]
 800340e:	b29b      	uxth	r3, r3
 8003410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80ef 	beq.w	80035f8 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 800341a:	7e7b      	ldrb	r3, [r7, #25]
 800341c:	015b      	lsls	r3, r3, #5
 800341e:	3328      	adds	r3, #40	; 0x28
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	4413      	add	r3, r2
 8003424:	61fb      	str	r3, [r7, #28]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	7e7b      	ldrb	r3, [r7, #25]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	b29b      	uxth	r3, r3
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	4611      	mov	r1, r2
 800343c:	7e7a      	ldrb	r2, [r7, #25]
 800343e:	0092      	lsls	r2, r2, #2
 8003440:	440a      	add	r2, r1
 8003442:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	b29b      	uxth	r3, r3
 800344c:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	7a9b      	ldrb	r3, [r3, #10]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d12c      	bne.n	80034b0 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345e:	b29b      	uxth	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	3302      	adds	r3, #2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8083 	beq.w	8003594 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	6959      	ldr	r1, [r3, #20]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	889a      	ldrh	r2, [r3, #4]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f002 fe3b 	bl	800611a <USB_WritePMA>
 80034a4:	e076      	b.n	8003594 <PCD_EP_ISR_Handler+0x5cc>
 80034a6:	bf00      	nop
 80034a8:	ffff8080 	.word	0xffff8080
 80034ac:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d026      	beq.n	8003518 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	3302      	adds	r3, #2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d031      	beq.n	8003564 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	6959      	ldr	r1, [r3, #20]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	88da      	ldrh	r2, [r3, #6]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f002 fe02 	bl	800611a <USB_WritePMA>
 8003516:	e025      	b.n	8003564 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003520:	b29b      	uxth	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	3306      	adds	r3, #6
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	6959      	ldr	r1, [r3, #20]
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	891a      	ldrh	r2, [r3, #8]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f002 fddb 	bl	800611a <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b29a      	uxth	r2, r3
 8003576:	f640 730f 	movw	r3, #3855	; 0xf0f
 800357a:	4013      	ands	r3, r2
 800357c:	b299      	uxth	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	441a      	add	r2, r3
 800358c:	4b22      	ldr	r3, [pc, #136]	; (8003618 <PCD_EP_ISR_Handler+0x650>)
 800358e:	430b      	orrs	r3, r1
 8003590:	b29b      	uxth	r3, r3
 8003592:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800359c:	b29b      	uxth	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	3302      	adds	r3, #2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	441a      	add	r2, r3
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f004 fa88 	bl	8007af4 <HAL_PCD_DataInStageCallback>
 80035e4:	e008      	b.n	80035f8 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	7819      	ldrb	r1, [r3, #0]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fc10 	bl	8002e18 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003600:	b29b      	uxth	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	81fa      	strh	r2, [r7, #14]
 8003606:	b21b      	sxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	f6ff acec 	blt.w	8002fe6 <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3724      	adds	r7, #36	; 0x24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd90      	pop	{r4, r7, pc}
 8003618:	ffffc080 	.word	0xffffc080

0800361c <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	817b      	strh	r3, [r7, #10]
 800362a:	4613      	mov	r3, r2
 800362c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8003632:	897b      	ldrh	r3, [r7, #10]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800363c:	897b      	ldrh	r3, [r7, #10]
 800363e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003642:	015b      	lsls	r3, r3, #5
 8003644:	3328      	adds	r3, #40	; 0x28
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e006      	b.n	800365c <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800364e:	897b      	ldrh	r3, [r7, #10]
 8003650:	015b      	lsls	r3, r3, #5
 8003652:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4413      	add	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800365c:	893b      	ldrh	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d107      	bne.n	8003672 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2200      	movs	r2, #0
 8003666:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	b29a      	uxth	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	809a      	strh	r2, [r3, #4]
 8003670:	e00b      	b.n	800368a <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2201      	movs	r2, #1
 8003676:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	b29a      	uxth	r2, r3
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	0c1b      	lsrs	r3, r3, #16
 8003684:	b29a      	uxth	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
	...

08003698 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <HAL_PWR_EnableBkUpAccess+0x14>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	420e0020 	.word	0x420e0020

080036b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8087 	beq.w	80037d8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036ca:	4b92      	ldr	r3, [pc, #584]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d00c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036d6:	4b8f      	ldr	r3, [pc, #572]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d112      	bne.n	8003708 <HAL_RCC_OscConfig+0x58>
 80036e2:	4b8c      	ldr	r3, [pc, #560]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ee:	d10b      	bne.n	8003708 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	4b88      	ldr	r3, [pc, #544]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d06c      	beq.n	80037d6 <HAL_RCC_OscConfig+0x126>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d168      	bne.n	80037d6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e22d      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d106      	bne.n	8003720 <HAL_RCC_OscConfig+0x70>
 8003712:	4b80      	ldr	r3, [pc, #512]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a7f      	ldr	r2, [pc, #508]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 8003718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e02e      	b.n	800377e <HAL_RCC_OscConfig+0xce>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10c      	bne.n	8003742 <HAL_RCC_OscConfig+0x92>
 8003728:	4b7a      	ldr	r3, [pc, #488]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a79      	ldr	r2, [pc, #484]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 800372e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b77      	ldr	r3, [pc, #476]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a76      	ldr	r2, [pc, #472]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 800373a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	e01d      	b.n	800377e <HAL_RCC_OscConfig+0xce>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800374a:	d10c      	bne.n	8003766 <HAL_RCC_OscConfig+0xb6>
 800374c:	4b71      	ldr	r3, [pc, #452]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a70      	ldr	r2, [pc, #448]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 8003752:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4b6e      	ldr	r3, [pc, #440]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a6d      	ldr	r2, [pc, #436]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 800375e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	e00b      	b.n	800377e <HAL_RCC_OscConfig+0xce>
 8003766:	4b6b      	ldr	r3, [pc, #428]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6a      	ldr	r2, [pc, #424]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 800376c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b68      	ldr	r3, [pc, #416]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a67      	ldr	r2, [pc, #412]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 8003778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d013      	beq.n	80037ae <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fd fdad 	bl	80012e4 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800378e:	f7fd fda9 	bl	80012e4 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b64      	cmp	r3, #100	; 0x64
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e1e1      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a0:	4b5c      	ldr	r3, [pc, #368]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0xde>
 80037ac:	e014      	b.n	80037d8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fd fd99 	bl	80012e4 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b6:	f7fd fd95 	bl	80012e4 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b64      	cmp	r3, #100	; 0x64
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e1cd      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c8:	4b52      	ldr	r3, [pc, #328]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f0      	bne.n	80037b6 <HAL_RCC_OscConfig+0x106>
 80037d4:	e000      	b.n	80037d8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d063      	beq.n	80038ac <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037e4:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037f0:	4b48      	ldr	r3, [pc, #288]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d11c      	bne.n	8003836 <HAL_RCC_OscConfig+0x186>
 80037fc:	4b45      	ldr	r3, [pc, #276]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d116      	bne.n	8003836 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003808:	4b42      	ldr	r3, [pc, #264]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_OscConfig+0x170>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d001      	beq.n	8003820 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e1a1      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b3c      	ldr	r3, [pc, #240]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4939      	ldr	r1, [pc, #228]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003834:	e03a      	b.n	80038ac <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d020      	beq.n	8003880 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800383e:	4b36      	ldr	r3, [pc, #216]	; (8003918 <HAL_RCC_OscConfig+0x268>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fd fd4e 	bl	80012e4 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800384c:	f7fd fd4a 	bl	80012e4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e182      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385e:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4926      	ldr	r1, [pc, #152]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
 800387e:	e015      	b.n	80038ac <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <HAL_RCC_OscConfig+0x268>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7fd fd2d 	bl	80012e4 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800388e:	f7fd fd29 	bl	80012e4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e161      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a0:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d039      	beq.n	800392c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d019      	beq.n	80038f4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c0:	4b16      	ldr	r3, [pc, #88]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c6:	f7fd fd0d 	bl	80012e4 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ce:	f7fd fd09 	bl	80012e4 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e141      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <HAL_RCC_OscConfig+0x264>)
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80038ec:	2001      	movs	r0, #1
 80038ee:	f000 fae3 	bl	8003eb8 <RCC_Delay>
 80038f2:	e01b      	b.n	800392c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_RCC_OscConfig+0x26c>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fa:	f7fd fcf3 	bl	80012e4 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003900:	e00e      	b.n	8003920 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003902:	f7fd fcef 	bl	80012e4 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d907      	bls.n	8003920 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e127      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
 8003914:	40021000 	.word	0x40021000
 8003918:	42420000 	.word	0x42420000
 800391c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	4b92      	ldr	r3, [pc, #584]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ea      	bne.n	8003902 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80a6 	beq.w	8003a86 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393e:	4b8b      	ldr	r3, [pc, #556]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10d      	bne.n	8003966 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	4b88      	ldr	r3, [pc, #544]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4a87      	ldr	r2, [pc, #540]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003954:	61d3      	str	r3, [r2, #28]
 8003956:	4b85      	ldr	r3, [pc, #532]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b82      	ldr	r3, [pc, #520]	; (8003b70 <HAL_RCC_OscConfig+0x4c0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d118      	bne.n	80039a4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003972:	4b7f      	ldr	r3, [pc, #508]	; (8003b70 <HAL_RCC_OscConfig+0x4c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a7e      	ldr	r2, [pc, #504]	; (8003b70 <HAL_RCC_OscConfig+0x4c0>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397e:	f7fd fcb1 	bl	80012e4 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003986:	f7fd fcad 	bl	80012e4 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b64      	cmp	r3, #100	; 0x64
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e0e5      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	4b75      	ldr	r3, [pc, #468]	; (8003b70 <HAL_RCC_OscConfig+0x4c0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x30a>
 80039ac:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	4a6e      	ldr	r2, [pc, #440]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6213      	str	r3, [r2, #32]
 80039b8:	e02d      	b.n	8003a16 <HAL_RCC_OscConfig+0x366>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x32c>
 80039c2:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	6213      	str	r3, [r2, #32]
 80039ce:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a66      	ldr	r2, [pc, #408]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	6213      	str	r3, [r2, #32]
 80039da:	e01c      	b.n	8003a16 <HAL_RCC_OscConfig+0x366>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_OscConfig+0x34e>
 80039e4:	4b61      	ldr	r3, [pc, #388]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a60      	ldr	r2, [pc, #384]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 80039ea:	f043 0304 	orr.w	r3, r3, #4
 80039ee:	6213      	str	r3, [r2, #32]
 80039f0:	4b5e      	ldr	r3, [pc, #376]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a5d      	ldr	r2, [pc, #372]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6213      	str	r3, [r2, #32]
 80039fc:	e00b      	b.n	8003a16 <HAL_RCC_OscConfig+0x366>
 80039fe:	4b5b      	ldr	r3, [pc, #364]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4a5a      	ldr	r2, [pc, #360]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6213      	str	r3, [r2, #32]
 8003a0a:	4b58      	ldr	r3, [pc, #352]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	4a57      	ldr	r2, [pc, #348]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003a10:	f023 0304 	bic.w	r3, r3, #4
 8003a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d015      	beq.n	8003a4a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1e:	f7fd fc61 	bl	80012e4 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	e00a      	b.n	8003a3c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fd fc5d 	bl	80012e4 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e093      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3c:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ee      	beq.n	8003a26 <HAL_RCC_OscConfig+0x376>
 8003a48:	e014      	b.n	8003a74 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7fd fc4b 	bl	80012e4 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fd fc47 	bl	80012e4 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e07d      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a68:	4b40      	ldr	r3, [pc, #256]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ee      	bne.n	8003a52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7a:	4b3c      	ldr	r3, [pc, #240]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4a3b      	ldr	r2, [pc, #236]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d069      	beq.n	8003b62 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a8e:	4b37      	ldr	r3, [pc, #220]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d061      	beq.n	8003b5e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d146      	bne.n	8003b30 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa2:	4b34      	ldr	r3, [pc, #208]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fc1c 	bl	80012e4 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fd fc18 	bl	80012e4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e050      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac2:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad6:	d108      	bne.n	8003aea <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ad8:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4921      	ldr	r1, [pc, #132]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a19      	ldr	r1, [r3, #32]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	430b      	orrs	r3, r1
 8003afc:	491b      	ldr	r1, [pc, #108]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fd fbec 	bl	80012e4 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fd fbe8 	bl	80012e4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e020      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x460>
 8003b2e:	e018      	b.n	8003b62 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b36:	f7fd fbd5 	bl	80012e4 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7fd fbd1 	bl	80012e4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e009      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_RCC_OscConfig+0x4bc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f0      	bne.n	8003b3e <HAL_RCC_OscConfig+0x48e>
 8003b5c:	e001      	b.n	8003b62 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40007000 	.word	0x40007000
 8003b74:	42420060 	.word	0x42420060

08003b78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003b86:	4b7e      	ldr	r3, [pc, #504]	; (8003d80 <HAL_RCC_ClockConfig+0x208>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d910      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b94:	4b7a      	ldr	r3, [pc, #488]	; (8003d80 <HAL_RCC_ClockConfig+0x208>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 0207 	bic.w	r2, r3, #7
 8003b9c:	4978      	ldr	r1, [pc, #480]	; (8003d80 <HAL_RCC_ClockConfig+0x208>)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ba4:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_RCC_ClockConfig+0x208>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e0e0      	b.n	8003d78 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d020      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bce:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a6c      	ldr	r2, [pc, #432]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003bd4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bd8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be6:	4b67      	ldr	r3, [pc, #412]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4a66      	ldr	r2, [pc, #408]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003bec:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bf0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf2:	4b64      	ldr	r3, [pc, #400]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	4961      	ldr	r1, [pc, #388]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d06a      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c18:	4b5a      	ldr	r3, [pc, #360]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d115      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0a7      	b.n	8003d78 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c30:	4b54      	ldr	r3, [pc, #336]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e09b      	b.n	8003d78 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	4b50      	ldr	r3, [pc, #320]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e093      	b.n	8003d78 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c50:	4b4c      	ldr	r3, [pc, #304]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 0203 	bic.w	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4949      	ldr	r1, [pc, #292]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c62:	f7fd fb3f 	bl	80012e4 <HAL_GetTick>
 8003c66:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d112      	bne.n	8003c96 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c72:	f7fd fb37 	bl	80012e4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e077      	b.n	8003d78 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c88:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d1ee      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xfa>
 8003c94:	e027      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d11d      	bne.n	8003cda <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca0:	f7fd fb20 	bl	80012e4 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e060      	b.n	8003d78 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb6:	4b33      	ldr	r3, [pc, #204]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d1ee      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x128>
 8003cc2:	e010      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc4:	f7fd fb0e 	bl	80012e4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e04e      	b.n	8003d78 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cda:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ee      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003ce6:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <HAL_RCC_ClockConfig+0x208>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d210      	bcs.n	8003d16 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_RCC_ClockConfig+0x208>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 0207 	bic.w	r2, r3, #7
 8003cfc:	4920      	ldr	r1, [pc, #128]	; (8003d80 <HAL_RCC_ClockConfig+0x208>)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d04:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_RCC_ClockConfig+0x208>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e030      	b.n	8003d78 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d22:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	4915      	ldr	r1, [pc, #84]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	490d      	ldr	r1, [pc, #52]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d54:	f000 f81c 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d58:	4601      	mov	r1, r0
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x20c>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <HAL_RCC_ClockConfig+0x210>)
 8003d66:	5cd3      	ldrb	r3, [r2, r3]
 8003d68:	fa21 f303 	lsr.w	r3, r1, r3
 8003d6c:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_RCC_ClockConfig+0x214>)
 8003d6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fd fa75 	bl	8001260 <HAL_InitTick>
  
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40022000 	.word	0x40022000
 8003d84:	40021000 	.word	0x40021000
 8003d88:	08008f9c 	.word	0x08008f9c
 8003d8c:	20000000 	.word	0x20000000

08003d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	b490      	push	{r4, r7}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d98:	1d3c      	adds	r4, r7, #4
 8003d9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003da0:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	2300      	movs	r3, #0
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dba:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d002      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x46>
 8003dce:	e02d      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dd0:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dd2:	623b      	str	r3, [r7, #32]
      break;
 8003dd4:	e02d      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	0c9b      	lsrs	r3, r3, #18
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003de2:	4413      	add	r3, r2
 8003de4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003de8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	0c5b      	lsrs	r3, r3, #17
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e02:	4413      	add	r3, r2
 8003e04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e08:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e0e:	fb02 f203 	mul.w	r2, r2, r3
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1a:	e004      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	4a0c      	ldr	r2, [pc, #48]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e20:	fb02 f303 	mul.w	r3, r2, r3
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	623b      	str	r3, [r7, #32]
      break;
 8003e2a:	e002      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e2e:	623b      	str	r3, [r7, #32]
      break;
 8003e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e32:	6a3b      	ldr	r3, [r7, #32]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3728      	adds	r7, #40	; 0x28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc90      	pop	{r4, r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	08008f2c 	.word	0x08008f2c
 8003e44:	08008f3c 	.word	0x08008f3c
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	007a1200 	.word	0x007a1200
 8003e50:	003d0900 	.word	0x003d0900

08003e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e58:	4b02      	ldr	r3, [pc, #8]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	20000000 	.word	0x20000000

08003e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e6c:	f7ff fff2 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e70:	4601      	mov	r1, r0
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4a03      	ldr	r2, [pc, #12]	; (8003e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e7e:	5cd3      	ldrb	r3, [r2, r3]
 8003e80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	08008fac 	.word	0x08008fac

08003e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e94:	f7ff ffde 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e98:	4601      	mov	r1, r0
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	0adb      	lsrs	r3, r3, #11
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4a03      	ldr	r2, [pc, #12]	; (8003eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea6:	5cd3      	ldrb	r3, [r2, r3]
 8003ea8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	08008fac 	.word	0x08008fac

08003eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <RCC_Delay+0x34>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <RCC_Delay+0x38>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	0a5b      	lsrs	r3, r3, #9
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003ed4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1e5a      	subs	r2, r3, #1
 8003eda:	60fa      	str	r2, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f9      	bne.n	8003ed4 <RCC_Delay+0x1c>
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000000 	.word	0x20000000
 8003ef0:	10624dd3 	.word	0x10624dd3

08003ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d07d      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f10:	2300      	movs	r3, #0
 8003f12:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f14:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10d      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f20:	4b4c      	ldr	r3, [pc, #304]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	4a4b      	ldr	r2, [pc, #300]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	61d3      	str	r3, [r2, #28]
 8003f2c:	4b49      	ldr	r3, [pc, #292]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	4b46      	ldr	r3, [pc, #280]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d118      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f48:	4b43      	ldr	r3, [pc, #268]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a42      	ldr	r2, [pc, #264]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f52:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f54:	f7fd f9c6 	bl	80012e4 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5a:	e008      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5c:	f7fd f9c2 	bl	80012e4 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	; 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e06d      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6e:	4b3a      	ldr	r3, [pc, #232]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f7a:	4b36      	ldr	r3, [pc, #216]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d02e      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d027      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f98:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa2:	4b2e      	ldr	r3, [pc, #184]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa8:	4b2c      	ldr	r3, [pc, #176]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fae:	4a29      	ldr	r2, [pc, #164]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d014      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7fd f991 	bl	80012e4 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc6:	f7fd f98d 	bl	80012e4 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e036      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0ee      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4917      	ldr	r1, [pc, #92]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d105      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	4a13      	ldr	r2, [pc, #76]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004018:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	490b      	ldr	r1, [pc, #44]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	4904      	ldr	r1, [pc, #16]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	40007000 	.word	0x40007000
 800405c:	42420440 	.word	0x42420440

08004060 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004060:	b590      	push	{r4, r7, lr}
 8004062:	b08d      	sub	sp, #52	; 0x34
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004068:	4b6c      	ldr	r3, [pc, #432]	; (800421c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800406a:	f107 040c 	add.w	r4, r7, #12
 800406e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004074:	4b6a      	ldr	r3, [pc, #424]	; (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
 800407e:	2300      	movs	r3, #0
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004082:	2300      	movs	r3, #0
 8004084:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	2300      	movs	r3, #0
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3b01      	subs	r3, #1
 8004092:	2b0f      	cmp	r3, #15
 8004094:	f200 80b9 	bhi.w	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	08004183 	.word	0x08004183
 80040a4:	080041ef 	.word	0x080041ef
 80040a8:	0800420b 	.word	0x0800420b
 80040ac:	08004173 	.word	0x08004173
 80040b0:	0800420b 	.word	0x0800420b
 80040b4:	0800420b 	.word	0x0800420b
 80040b8:	0800420b 	.word	0x0800420b
 80040bc:	0800417b 	.word	0x0800417b
 80040c0:	0800420b 	.word	0x0800420b
 80040c4:	0800420b 	.word	0x0800420b
 80040c8:	0800420b 	.word	0x0800420b
 80040cc:	0800420b 	.word	0x0800420b
 80040d0:	0800420b 	.word	0x0800420b
 80040d4:	0800420b 	.word	0x0800420b
 80040d8:	0800420b 	.word	0x0800420b
 80040dc:	080040e1 	.word	0x080040e1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80040e0:	4b50      	ldr	r3, [pc, #320]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80040e6:	4b4f      	ldr	r3, [pc, #316]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 808d 	beq.w	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	0c9b      	lsrs	r3, r3, #18
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004100:	4413      	add	r3, r2
 8004102:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004106:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d018      	beq.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004112:	4b44      	ldr	r3, [pc, #272]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	0c5b      	lsrs	r3, r3, #17
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004120:	4413      	add	r3, r2
 8004122:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004132:	4a3d      	ldr	r2, [pc, #244]	; (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	fbb2 f2f3 	udiv	r2, r2, r3
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	fb02 f303 	mul.w	r3, r2, r3
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004142:	e004      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	4a39      	ldr	r2, [pc, #228]	; (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8004148:	fb02 f303 	mul.w	r3, r2, r3
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800414e:	4b35      	ldr	r3, [pc, #212]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800415a:	d102      	bne.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004160:	e055      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          frequency = (pllclk * 2) / 3;
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4a32      	ldr	r2, [pc, #200]	; (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004170:	e04d      	b.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004172:	f7ff fe0d 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8004176:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004178:	e04a      	b.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800417a:	f7ff fe09 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 800417e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004180:	e046      	b.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004182:	4b28      	ldr	r3, [pc, #160]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d108      	bne.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 800419e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a4:	e022      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b0:	d109      	bne.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80041b2:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80041be:	f649 4340 	movw	r3, #40000	; 0x9c40
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c4:	e012      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d0:	d109      	bne.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80041d2:	4b14      	ldr	r3, [pc, #80]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        frequency = HSE_VALUE / 128U;
 80041de:	f24f 4324 	movw	r3, #62500	; 0xf424
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e4:	e002      	b.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80041ea:	e011      	b.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80041ec:	e010      	b.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80041ee:	f7ff fe4f 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 80041f2:	4602      	mov	r2, r0
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	0b9b      	lsrs	r3, r3, #14
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004208:	e002      	b.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  default: 
    {
      break;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      break;
 800420e:	bf00      	nop
    }
  }
  return(frequency);
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004212:	4618      	mov	r0, r3
 8004214:	3734      	adds	r7, #52	; 0x34
 8004216:	46bd      	mov	sp, r7
 8004218:	bd90      	pop	{r4, r7, pc}
 800421a:	bf00      	nop
 800421c:	08008f40 	.word	0x08008f40
 8004220:	08008f50 	.word	0x08008f50
 8004224:	40021000 	.word	0x40021000
 8004228:	007a1200 	.word	0x007a1200
 800422c:	003d0900 	.word	0x003d0900
 8004230:	aaaaaaab 	.word	0xaaaaaaab

08004234 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e084      	b.n	8004354 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	7c5b      	ldrb	r3, [r3, #17]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fc fdaa 	bl	8000db4 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f87a 	bl	8004360 <HAL_RTC_WaitForSynchro>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2204      	movs	r2, #4
 8004276:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e06b      	b.n	8004354 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f89c 	bl	80043ba <RTC_EnterInitMode>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2204      	movs	r2, #4
 800428c:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e060      	b.n	8004354 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0207 	bic.w	r2, r2, #7
 80042a0:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80042aa:	4b2c      	ldr	r3, [pc, #176]	; (800435c <HAL_RTC_Init+0x128>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4a2b      	ldr	r2, [pc, #172]	; (800435c <HAL_RTC_Init+0x128>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80042b6:	4b29      	ldr	r3, [pc, #164]	; (800435c <HAL_RTC_Init+0x128>)
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	4926      	ldr	r1, [pc, #152]	; (800435c <HAL_RTC_Init+0x128>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d003      	beq.n	80042da <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e00e      	b.n	80042f8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80042da:	2001      	movs	r0, #1
 80042dc:	f7ff fec0 	bl	8004060 <HAL_RCCEx_GetPeriphCLKFreq>
 80042e0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2204      	movs	r2, #4
 80042ec:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e030      	b.n	8004354 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f023 010f 	bic.w	r1, r3, #15
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	0c1a      	lsrs	r2, r3, #16
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	0c1b      	lsrs	r3, r3, #16
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	b291      	uxth	r1, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	430b      	orrs	r3, r1
 8004322:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f870 	bl	800440a <RTC_ExitInitMode>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2204      	movs	r2, #4
 8004334:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e00c      	b.n	8004354 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 8004352:	2300      	movs	r3, #0
  }
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40006c00 	.word	0x40006c00

08004360 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e01d      	b.n	80043b2 <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0208 	bic.w	r2, r2, #8
 8004384:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8004386:	f7fc ffad 	bl	80012e4 <HAL_GetTick>
 800438a:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800438c:	e009      	b.n	80043a2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800438e:	f7fc ffa9 	bl	80012e4 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800439c:	d901      	bls.n	80043a2 <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e007      	b.n	80043b2 <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0ee      	beq.n	800438e <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 80043c6:	f7fc ff8d 	bl	80012e4 <HAL_GetTick>
 80043ca:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043cc:	e009      	b.n	80043e2 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80043ce:	f7fc ff89 	bl	80012e4 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043dc:	d901      	bls.n	80043e2 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e00f      	b.n	8004402 <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ee      	beq.n	80043ce <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0210 	orr.w	r2, r2, #16
 80043fe:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0210 	bic.w	r2, r2, #16
 8004424:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8004426:	f7fc ff5d 	bl	80012e4 <HAL_GetTick>
 800442a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800442c:	e009      	b.n	8004442 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800442e:	f7fc ff59 	bl	80012e4 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800443c:	d901      	bls.n	8004442 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e007      	b.n	8004452 <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0ee      	beq.n	800442e <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RTCEx_BKUPWrite+0x30>)
 800446e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4413      	add	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	b292      	uxth	r2, r2
 8004480:	601a      	str	r2, [r3, #0]
}
 8004482:	bf00      	nop
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	40006c00 	.word	0x40006c00

08004490 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <HAL_RTCEx_BKUPRead+0x34>)
 80044a4:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80044b8:	68bb      	ldr	r3, [r7, #8]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	40006c00 	.word	0x40006c00

080044c8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e03f      	b.n	800455a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fc fdc6 	bl	8001080 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2224      	movs	r2, #36	; 0x24
 80044f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800450a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fc7d 	bl	8004e0c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695a      	ldr	r2, [r3, #20]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004530:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004540:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_UART_DeInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e016      	b.n	80045a2 <HAL_UART_DeInit+0x40>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	; 0x24
 8004578:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fc fdfd 	bl	800117c <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b088      	sub	sp, #32
 80045ae:	af02      	add	r7, sp, #8
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	f040 8083 	bne.w	80046d2 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_UART_Transmit+0x2e>
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e07b      	b.n	80046d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_UART_Transmit+0x40>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e074      	b.n	80046d4 <HAL_UART_Transmit+0x12a>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2221      	movs	r2, #33	; 0x21
 80045fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004600:	f7fc fe70 	bl	80012e4 <HAL_GetTick>
 8004604:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	88fa      	ldrh	r2, [r7, #6]
 800460a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8004612:	e042      	b.n	800469a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462a:	d122      	bne.n	8004672 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2200      	movs	r2, #0
 8004634:	2180      	movs	r1, #128	; 0x80
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fa6a 	bl	8004b10 <UART_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e046      	b.n	80046d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004658:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d103      	bne.n	800466a <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3302      	adds	r3, #2
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	e017      	b.n	800469a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	3301      	adds	r3, #1
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	e013      	b.n	800469a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	2180      	movs	r1, #128	; 0x80
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fa47 	bl	8004b10 <UART_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e023      	b.n	80046d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	60ba      	str	r2, [r7, #8]
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1b7      	bne.n	8004614 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2200      	movs	r2, #0
 80046ac:	2140      	movs	r1, #64	; 0x40
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fa2e 	bl	8004b10 <UART_WaitOnFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e00a      	b.n	80046d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e000      	b.n	80046d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
  }
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d166      	bne.n	80047c4 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL) || (Size == 0U))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <HAL_UART_Receive_DMA+0x26>
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e05f      	b.n	80047c6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_UART_Receive_DMA+0x38>
 8004710:	2302      	movs	r3, #2
 8004712:	e058      	b.n	80047c6 <HAL_UART_Receive_DMA+0xea>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	88fa      	ldrh	r2, [r7, #6]
 8004726:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2222      	movs	r2, #34	; 0x22
 8004732:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <HAL_UART_Receive_DMA+0xf4>)
 800473c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004742:	4a24      	ldr	r2, [pc, #144]	; (80047d4 <HAL_UART_Receive_DMA+0xf8>)
 8004744:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <HAL_UART_Receive_DMA+0xfc>)
 800474c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004752:	2200      	movs	r2, #0
 8004754:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 8004756:	f107 0308 	add.w	r3, r7, #8
 800475a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3304      	adds	r3, #4
 8004766:	4619      	mov	r1, r3
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	f7fd f805 	bl	800177c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004772:	2300      	movs	r3, #0
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800479e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047be:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e000      	b.n	80047c6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
  }
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	080049f9 	.word	0x080049f9
 80047d4:	08004a61 	.word	0x08004a61
 80047d8:	08004a7d 	.word	0x08004a7d

080047dc <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10d      	bne.n	800482e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_UART_IRQHandler+0x52>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fa6f 	bl	8004d0a <UART_Receive_IT>
      return;
 800482c:	e0cc      	b.n	80049c8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80ab 	beq.w	800498c <HAL_UART_IRQHandler+0x1b0>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <HAL_UART_IRQHandler+0x70>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80a0 	beq.w	800498c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_UART_IRQHandler+0x90>
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004864:	f043 0201 	orr.w	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_UART_IRQHandler+0xb0>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	f043 0202 	orr.w	r2, r3, #2
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_UART_IRQHandler+0xd0>
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	f043 0204 	orr.w	r2, r3, #4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_UART_IRQHandler+0xf0>
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c4:	f043 0208 	orr.w	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d078      	beq.n	80049c6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <HAL_UART_IRQHandler+0x112>
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fa0e 	bl	8004d0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <HAL_UART_IRQHandler+0x13a>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d031      	beq.n	800497a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f959 	bl	8004bce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d023      	beq.n	8004972 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004938:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	2b00      	cmp	r3, #0
 8004940:	d013      	beq.n	800496a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <HAL_UART_IRQHandler+0x1f4>)
 8004948:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494e:	4618      	mov	r0, r3
 8004950:	f7fc ff74 	bl	800183c <HAL_DMA_Abort_IT>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d016      	beq.n	8004988 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004964:	4610      	mov	r0, r2
 8004966:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	e00e      	b.n	8004988 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc fb76 	bl	800105c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004970:	e00a      	b.n	8004988 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc fb72 	bl	800105c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004978:	e006      	b.n	8004988 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fc fb6e 	bl	800105c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004986:	e01e      	b.n	80049c6 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004988:	bf00      	nop
    return;
 800498a:	e01c      	b.n	80049c6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <HAL_UART_IRQHandler+0x1cc>
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f945 	bl	8004c30 <UART_Transmit_IT>
    return;
 80049a6:	e00f      	b.n	80049c8 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_UART_IRQHandler+0x1ec>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f98c 	bl	8004cda <UART_EndTransmit_IT>
    return;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80049c6:	bf00      	nop
  }
}
 80049c8:	3720      	adds	r7, #32
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	08004c09 	.word	0x08004c09

080049d4 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr

080049e6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11e      	bne.n	8004a52 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a28:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695a      	ldr	r2, [r3, #20]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a48:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f7fc fb0b 	bl	800106e <HAL_UART_RxCpltCallback>
}
 8004a58:	bf00      	nop
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	60fb      	str	r3, [r7, #12]
  HAL_UART_RxHalfCpltCallback(huart); 
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff ffb9 	bl	80049e6 <HAL_UART_RxHalfCpltCallback>
}
 8004a74:	bf00      	nop
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf14      	ite	ne
 8004a9c:	2301      	movne	r3, #1
 8004a9e:	2300      	moveq	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b21      	cmp	r3, #33	; 0x21
 8004aae:	d108      	bne.n	8004ac2 <UART_DMAError+0x46>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004abc:	68b8      	ldr	r0, [r7, #8]
 8004abe:	f000 f871 	bl	8004ba4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf14      	ite	ne
 8004ad0:	2301      	movne	r3, #1
 8004ad2:	2300      	moveq	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b22      	cmp	r3, #34	; 0x22
 8004ae2:	d108      	bne.n	8004af6 <UART_DMAError+0x7a>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2200      	movs	r2, #0
 8004aee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004af0:	68b8      	ldr	r0, [r7, #8]
 8004af2:	f000 f86c 	bl	8004bce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	f043 0210 	orr.w	r2, r3, #16
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8004b02:	68b8      	ldr	r0, [r7, #8]
 8004b04:	f7fc faaa 	bl	800105c <HAL_UART_ErrorCallback>
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004b20:	e02c      	b.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d028      	beq.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b30:	f7fc fbd8 	bl	80012e4 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d21d      	bcs.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e00f      	b.n	8004b9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4013      	ands	r3, r2
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d0c3      	beq.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004bba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004be4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695a      	ldr	r2, [r3, #20]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f7fc fa1a 	bl	800105c <HAL_UART_ErrorCallback>
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b21      	cmp	r3, #33	; 0x21
 8004c42:	d144      	bne.n	8004cce <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4c:	d11a      	bne.n	8004c84 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c62:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d105      	bne.n	8004c78 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	1c9a      	adds	r2, r3, #2
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	621a      	str	r2, [r3, #32]
 8004c76:	e00e      	b.n	8004c96 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	621a      	str	r2, [r3, #32]
 8004c82:	e008      	b.n	8004c96 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	1c59      	adds	r1, r3, #1
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6211      	str	r1, [r2, #32]
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e000      	b.n	8004cd0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004cce:	2302      	movs	r3, #2
  }
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf0:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff fe6a 	bl	80049d4 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b22      	cmp	r3, #34	; 0x22
 8004d1c:	d171      	bne.n	8004e02 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d26:	d123      	bne.n	8004d70 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10e      	bne.n	8004d54 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	1c9a      	adds	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	629a      	str	r2, [r3, #40]	; 0x28
 8004d52:	e029      	b.n	8004da8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	629a      	str	r2, [r3, #40]	; 0x28
 8004d6e:	e01b      	b.n	8004da8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6858      	ldr	r0, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	1c59      	adds	r1, r3, #1
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6291      	str	r1, [r2, #40]	; 0x28
 8004d88:	b2c2      	uxtb	r2, r0
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	e00c      	b.n	8004da8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	1c58      	adds	r0, r3, #1
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	6288      	str	r0, [r1, #40]	; 0x28
 8004da0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4619      	mov	r1, r3
 8004db6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d120      	bne.n	8004dfe <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0220 	bic.w	r2, r2, #32
 8004dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dda:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695a      	ldr	r2, [r3, #20]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7fc f93a 	bl	800106e <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e002      	b.n	8004e04 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e000      	b.n	8004e04 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
  }
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e0c:	b5b0      	push	{r4, r5, r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e4e:	f023 030c 	bic.w	r3, r3, #12
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6f      	ldr	r2, [pc, #444]	; (8005034 <UART_SetConfig+0x228>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d16b      	bne.n	8004f54 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004e7c:	f7ff f808 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009a      	lsls	r2, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e96:	4a68      	ldr	r2, [pc, #416]	; (8005038 <UART_SetConfig+0x22c>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	011c      	lsls	r4, r3, #4
 8004ea0:	f7fe fff6 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009a      	lsls	r2, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	fbb2 f5f3 	udiv	r5, r2, r3
 8004eba:	f7fe ffe9 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009a      	lsls	r2, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	4a58      	ldr	r2, [pc, #352]	; (8005038 <UART_SetConfig+0x22c>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	2264      	movs	r2, #100	; 0x64
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	1aeb      	subs	r3, r5, r3
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	3332      	adds	r3, #50	; 0x32
 8004ee8:	4a53      	ldr	r2, [pc, #332]	; (8005038 <UART_SetConfig+0x22c>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef4:	441c      	add	r4, r3
 8004ef6:	f7fe ffcb 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 8004efa:	4602      	mov	r2, r0
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009a      	lsls	r2, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f10:	f7fe ffbe 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 8004f14:	4602      	mov	r2, r0
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009a      	lsls	r2, r3, #2
 8004f1e:	441a      	add	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2a:	4a43      	ldr	r2, [pc, #268]	; (8005038 <UART_SetConfig+0x22c>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	2264      	movs	r2, #100	; 0x64
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
 8004f38:	1aeb      	subs	r3, r5, r3
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	3332      	adds	r3, #50	; 0x32
 8004f3e:	4a3e      	ldr	r2, [pc, #248]	; (8005038 <UART_SetConfig+0x22c>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	f003 020f 	and.w	r2, r3, #15
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4422      	add	r2, r4
 8004f50:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004f52:	e06a      	b.n	800502a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004f54:	f7fe ff88 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	009a      	lsls	r2, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	4a32      	ldr	r2, [pc, #200]	; (8005038 <UART_SetConfig+0x22c>)
 8004f70:	fba2 2303 	umull	r2, r3, r2, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	011c      	lsls	r4, r3, #4
 8004f78:	f7fe ff76 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009a      	lsls	r2, r3, #2
 8004f86:	441a      	add	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f92:	f7fe ff69 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8004f96:	4602      	mov	r2, r0
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009a      	lsls	r2, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <UART_SetConfig+0x22c>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2264      	movs	r2, #100	; 0x64
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	1aeb      	subs	r3, r5, r3
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	3332      	adds	r3, #50	; 0x32
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <UART_SetConfig+0x22c>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fcc:	441c      	add	r4, r3
 8004fce:	f7fe ff4b 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009a      	lsls	r2, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	fbb2 f5f3 	udiv	r5, r2, r3
 8004fe8:	f7fe ff3e 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8004fec:	4602      	mov	r2, r0
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009a      	lsls	r2, r3, #2
 8004ff6:	441a      	add	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	4a0d      	ldr	r2, [pc, #52]	; (8005038 <UART_SetConfig+0x22c>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	2264      	movs	r2, #100	; 0x64
 800500c:	fb02 f303 	mul.w	r3, r2, r3
 8005010:	1aeb      	subs	r3, r5, r3
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	3332      	adds	r3, #50	; 0x32
 8005016:	4a08      	ldr	r2, [pc, #32]	; (8005038 <UART_SetConfig+0x22c>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	f003 020f 	and.w	r2, r3, #15
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4422      	add	r2, r4
 8005028:	609a      	str	r2, [r3, #8]
}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bdb0      	pop	{r4, r5, r7, pc}
 8005032:	bf00      	nop
 8005034:	40013800 	.word	0x40013800
 8005038:	51eb851f 	.word	0x51eb851f

0800503c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800503c:	b084      	sub	sp, #16
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	f107 0014 	add.w	r0, r7, #20
 800504a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	b004      	add	sp, #16
 800505a:	4770      	bx	lr

0800505c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8005068:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800506c:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	b29b      	uxth	r3, r3
 800507a:	4313      	orrs	r3, r2
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800509c:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 80050a0:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	43db      	mvns	r3, r3
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	4013      	ands	r3, r2
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050e0:	b084      	sub	sp, #16
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	f107 0014 	add.w	r0, r7, #20
 80050ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff ffa2 	bl	800505c <USB_EnableGlobalInt>
    
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005124:	b004      	add	sp, #16
 8005126:	4770      	bx	lr

08005128 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005128:	b490      	push	{r4, r7}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	78db      	ldrb	r3, [r3, #3]
 8005136:	2b03      	cmp	r3, #3
 8005138:	d85f      	bhi.n	80051fa <USB_ActivateEndpoint+0xd2>
 800513a:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <USB_ActivateEndpoint+0x18>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	08005151 	.word	0x08005151
 8005144:	080051cf 	.word	0x080051cf
 8005148:	0800517d 	.word	0x0800517d
 800514c:	080051a3 	.word	0x080051a3
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	b29a      	uxth	r2, r3
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005176:	b292      	uxth	r2, r2
 8005178:	801a      	strh	r2, [r3, #0]
    break;
 800517a:	e03f      	b.n	80051fc <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	7812      	ldrb	r2, [r2, #0]
 8005190:	0092      	lsls	r2, r2, #2
 8005192:	440a      	add	r2, r1
 8005194:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519c:	b29b      	uxth	r3, r3
 800519e:	8013      	strh	r3, [r2, #0]
    break;
 80051a0:	e02c      	b.n	80051fc <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80051b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80051c8:	b292      	uxth	r2, r2
 80051ca:	801a      	strh	r2, [r3, #0]
    break;
 80051cc:	e016      	b.n	80051fc <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80051e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051f4:	b292      	uxth	r2, r2
 80051f6:	801a      	strh	r2, [r3, #0]
    break;
 80051f8:	e000      	b.n	80051fc <USB_ActivateEndpoint+0xd4>
  default:
      break;
 80051fa:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29a      	uxth	r2, r3
 800520a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800520e:	4013      	ands	r3, r2
 8005210:	b29a      	uxth	r2, r3
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	4313      	orrs	r3, r2
 800521a:	b299      	uxth	r1, r3
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	4b75      	ldr	r3, [pc, #468]	; (80053fc <USB_ActivateEndpoint+0x2d4>)
 8005228:	430b      	orrs	r3, r1
 800522a:	b29b      	uxth	r3, r3
 800522c:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	7a9b      	ldrb	r3, [r3, #10]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f040 80e8 	bne.w	8005408 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	785b      	ldrb	r3, [r3, #1]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d04c      	beq.n	80052da <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	889b      	ldrh	r3, [r3, #4]
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	b29b      	uxth	r3, r3
 8005248:	0059      	lsls	r1, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005250:	b29b      	uxth	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4413      	add	r3, r2
 800525c:	005a      	lsls	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005266:	460a      	mov	r2, r1
 8005268:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b29b      	uxth	r3, r3
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d013      	beq.n	80052a8 <USB_ActivateEndpoint+0x180>
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005292:	4013      	ands	r3, r2
 8005294:	b299      	uxth	r1, r3
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	441a      	add	r2, r3
 80052a0:	4b57      	ldr	r3, [pc, #348]	; (8005400 <USB_ActivateEndpoint+0x2d8>)
 80052a2:	430b      	orrs	r3, r1
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052be:	b29c      	uxth	r4, r3
 80052c0:	f084 0320 	eor.w	r3, r4, #32
 80052c4:	b29c      	uxth	r4, r3
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	441a      	add	r2, r3
 80052d0:	4b4a      	ldr	r3, [pc, #296]	; (80053fc <USB_ActivateEndpoint+0x2d4>)
 80052d2:	4323      	orrs	r3, r4
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	8013      	strh	r3, [r2, #0]
 80052d8:	e1d9      	b.n	800568e <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	889b      	ldrh	r3, [r3, #4]
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	0059      	lsls	r1, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	4413      	add	r3, r2
 80052f6:	3304      	adds	r3, #4
 80052f8:	005a      	lsls	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005302:	460a      	mov	r2, r1
 8005304:	601a      	str	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530c:	b29b      	uxth	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	4413      	add	r3, r2
 8005318:	3306      	adds	r3, #6
 800531a:	005a      	lsls	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	2b3e      	cmp	r3, #62	; 0x3e
 800532c:	d918      	bls.n	8005360 <USB_ActivateEndpoint+0x238>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	81fb      	strh	r3, [r7, #14]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	2b00      	cmp	r3, #0
 8005340:	d102      	bne.n	8005348 <USB_ActivateEndpoint+0x220>
 8005342:	89fb      	ldrh	r3, [r7, #14]
 8005344:	3b01      	subs	r3, #1
 8005346:	81fb      	strh	r3, [r7, #14]
 8005348:	89fb      	ldrh	r3, [r7, #14]
 800534a:	029b      	lsls	r3, r3, #10
 800534c:	b29b      	uxth	r3, r3
 800534e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005356:	b29b      	uxth	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e012      	b.n	8005386 <USB_ActivateEndpoint+0x25e>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	81fb      	strh	r3, [r7, #14]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <USB_ActivateEndpoint+0x252>
 8005374:	89fb      	ldrh	r3, [r7, #14]
 8005376:	3301      	adds	r3, #1
 8005378:	81fb      	strh	r3, [r7, #14]
 800537a:	89fb      	ldrh	r3, [r7, #14]
 800537c:	029b      	lsls	r3, r3, #10
 800537e:	b29b      	uxth	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d013      	beq.n	80053c4 <USB_ActivateEndpoint+0x29c>
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	f640 730f 	movw	r3, #3855	; 0xf0f
 80053ae:	4013      	ands	r3, r2
 80053b0:	b299      	uxth	r1, r3
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	4b11      	ldr	r3, [pc, #68]	; (8005404 <USB_ActivateEndpoint+0x2dc>)
 80053be:	430b      	orrs	r3, r1
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053da:	b29c      	uxth	r4, r3
 80053dc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80053e0:	b29c      	uxth	r4, r3
 80053e2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80053e6:	b29c      	uxth	r4, r3
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	441a      	add	r2, r3
 80053f2:	4b02      	ldr	r3, [pc, #8]	; (80053fc <USB_ActivateEndpoint+0x2d4>)
 80053f4:	4323      	orrs	r3, r4
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	8013      	strh	r3, [r2, #0]
 80053fa:	e148      	b.n	800568e <USB_ActivateEndpoint+0x566>
 80053fc:	ffff8080 	.word	0xffff8080
 8005400:	ffff80c0 	.word	0xffff80c0
 8005404:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29a      	uxth	r2, r3
 8005416:	f640 630f 	movw	r3, #3599	; 0xe0f
 800541a:	4013      	ands	r3, r2
 800541c:	b299      	uxth	r1, r3
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	4b9c      	ldr	r3, [pc, #624]	; (800569c <USB_ActivateEndpoint+0x574>)
 800542a:	430b      	orrs	r3, r1
 800542c:	b29b      	uxth	r3, r3
 800542e:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	88db      	ldrh	r3, [r3, #6]
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	b29b      	uxth	r3, r3
 8005438:	0059      	lsls	r1, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005440:	b29b      	uxth	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4413      	add	r3, r2
 800544c:	005a      	lsls	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005456:	460a      	mov	r2, r1
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	891b      	ldrh	r3, [r3, #8]
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	b29b      	uxth	r3, r3
 8005462:	0059      	lsls	r1, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4413      	add	r3, r2
 8005476:	3304      	adds	r3, #4
 8005478:	005a      	lsls	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005482:	460a      	mov	r2, r1
 8005484:	601a      	str	r2, [r3, #0]
    
    if (ep->is_in==0)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f040 8083 	bne.w	8005596 <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d013      	beq.n	80054ce <USB_ActivateEndpoint+0x3a6>
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80054b8:	4013      	ands	r3, r2
 80054ba:	b299      	uxth	r1, r3
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <USB_ActivateEndpoint+0x578>)
 80054c8:	430b      	orrs	r3, r1
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d013      	beq.n	800550c <USB_ActivateEndpoint+0x3e4>
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80054f6:	4013      	ands	r3, r2
 80054f8:	b299      	uxth	r1, r3
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	4b67      	ldr	r3, [pc, #412]	; (80056a4 <USB_ActivateEndpoint+0x57c>)
 8005506:	430b      	orrs	r3, r1
 8005508:	b29b      	uxth	r3, r3
 800550a:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29a      	uxth	r2, r3
 800551a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800551e:	4013      	ands	r3, r2
 8005520:	b299      	uxth	r1, r3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	4b5d      	ldr	r3, [pc, #372]	; (80056a4 <USB_ActivateEndpoint+0x57c>)
 800552e:	430b      	orrs	r3, r1
 8005530:	b29b      	uxth	r3, r3
 8005532:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	b29b      	uxth	r3, r3
 8005542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554a:	b29c      	uxth	r4, r3
 800554c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005550:	b29c      	uxth	r4, r3
 8005552:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005556:	b29c      	uxth	r4, r3
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	4b51      	ldr	r3, [pc, #324]	; (80056a8 <USB_ActivateEndpoint+0x580>)
 8005564:	4323      	orrs	r3, r4
 8005566:	b29b      	uxth	r3, r3
 8005568:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005580:	b29c      	uxth	r4, r3
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	441a      	add	r2, r3
 800558c:	4b46      	ldr	r3, [pc, #280]	; (80056a8 <USB_ActivateEndpoint+0x580>)
 800558e:	4323      	orrs	r3, r4
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]
 8005594:	e07b      	b.n	800568e <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d013      	beq.n	80055d4 <USB_ActivateEndpoint+0x4ac>
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	f640 730f 	movw	r3, #3855	; 0xf0f
 80055be:	4013      	ands	r3, r2
 80055c0:	b299      	uxth	r1, r3
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	441a      	add	r2, r3
 80055cc:	4b34      	ldr	r3, [pc, #208]	; (80056a0 <USB_ActivateEndpoint+0x578>)
 80055ce:	430b      	orrs	r3, r1
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d013      	beq.n	8005612 <USB_ActivateEndpoint+0x4ea>
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80055fc:	4013      	ands	r3, r2
 80055fe:	b299      	uxth	r1, r3
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	441a      	add	r2, r3
 800560a:	4b26      	ldr	r3, [pc, #152]	; (80056a4 <USB_ActivateEndpoint+0x57c>)
 800560c:	430b      	orrs	r3, r1
 800560e:	b29b      	uxth	r3, r3
 8005610:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29a      	uxth	r2, r3
 8005620:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005624:	4013      	ands	r3, r2
 8005626:	b299      	uxth	r1, r3
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	4b1b      	ldr	r3, [pc, #108]	; (80056a0 <USB_ActivateEndpoint+0x578>)
 8005634:	430b      	orrs	r3, r1
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005650:	b29c      	uxth	r4, r3
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <USB_ActivateEndpoint+0x580>)
 800565e:	4323      	orrs	r3, r4
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	b29c      	uxth	r4, r3
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	441a      	add	r2, r3
 8005686:	4b08      	ldr	r3, [pc, #32]	; (80056a8 <USB_ActivateEndpoint+0x580>)
 8005688:	4323      	orrs	r3, r4
 800568a:	b29b      	uxth	r3, r3
 800568c:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bc90      	pop	{r4, r7}
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	ffff8180 	.word	0xffff8180
 80056a0:	ffffc080 	.word	0xffffc080
 80056a4:	ffff80c0 	.word	0xffff80c0
 80056a8:	ffff8080 	.word	0xffff8080

080056ac <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056ac:	b490      	push	{r4, r7}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	7a9b      	ldrb	r3, [r3, #10]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d16d      	bne.n	800579a <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	785b      	ldrb	r3, [r3, #1]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d034      	beq.n	8005730 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d013      	beq.n	8005704 <USB_DeactivateEndpoint+0x58>
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	f640 730f 	movw	r3, #3855	; 0xf0f
 80056ee:	4013      	ands	r3, r2
 80056f0:	b299      	uxth	r1, r3
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	441a      	add	r2, r3
 80056fc:	4b68      	ldr	r3, [pc, #416]	; (80058a0 <USB_DeactivateEndpoint+0x1f4>)
 80056fe:	430b      	orrs	r3, r1
 8005700:	b29b      	uxth	r3, r3
 8005702:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800571a:	b29c      	uxth	r4, r3
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	441a      	add	r2, r3
 8005726:	4b5f      	ldr	r3, [pc, #380]	; (80058a4 <USB_DeactivateEndpoint+0x1f8>)
 8005728:	4323      	orrs	r3, r4
 800572a:	b29b      	uxth	r3, r3
 800572c:	8013      	strh	r3, [r2, #0]
 800572e:	e139      	b.n	80059a4 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d013      	beq.n	800576e <USB_DeactivateEndpoint+0xc2>
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29a      	uxth	r2, r3
 8005754:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005758:	4013      	ands	r3, r2
 800575a:	b299      	uxth	r1, r3
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	441a      	add	r2, r3
 8005766:	4b50      	ldr	r3, [pc, #320]	; (80058a8 <USB_DeactivateEndpoint+0x1fc>)
 8005768:	430b      	orrs	r3, r1
 800576a:	b29b      	uxth	r3, r3
 800576c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005784:	b29c      	uxth	r4, r3
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	441a      	add	r2, r3
 8005790:	4b44      	ldr	r3, [pc, #272]	; (80058a4 <USB_DeactivateEndpoint+0x1f8>)
 8005792:	4323      	orrs	r3, r4
 8005794:	b29b      	uxth	r3, r3
 8005796:	8013      	strh	r3, [r2, #0]
 8005798:	e104      	b.n	80059a4 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 8084 	bne.w	80058ac <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d013      	beq.n	80057e2 <USB_DeactivateEndpoint+0x136>
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80057cc:	4013      	ands	r3, r2
 80057ce:	b299      	uxth	r1, r3
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	4b33      	ldr	r3, [pc, #204]	; (80058a8 <USB_DeactivateEndpoint+0x1fc>)
 80057dc:	430b      	orrs	r3, r1
 80057de:	b29b      	uxth	r3, r3
 80057e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d013      	beq.n	8005820 <USB_DeactivateEndpoint+0x174>
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29a      	uxth	r2, r3
 8005806:	f640 730f 	movw	r3, #3855	; 0xf0f
 800580a:	4013      	ands	r3, r2
 800580c:	b299      	uxth	r1, r3
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	441a      	add	r2, r3
 8005818:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <USB_DeactivateEndpoint+0x1f4>)
 800581a:	430b      	orrs	r3, r1
 800581c:	b29b      	uxth	r3, r3
 800581e:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b29a      	uxth	r2, r3
 800582e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005832:	4013      	ands	r3, r2
 8005834:	b299      	uxth	r1, r3
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	441a      	add	r2, r3
 8005840:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <USB_DeactivateEndpoint+0x1f4>)
 8005842:	430b      	orrs	r3, r1
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	b29c      	uxth	r4, r3
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	441a      	add	r2, r3
 800586a:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <USB_DeactivateEndpoint+0x1f8>)
 800586c:	4323      	orrs	r3, r4
 800586e:	b29b      	uxth	r3, r3
 8005870:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005888:	b29c      	uxth	r4, r3
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	441a      	add	r2, r3
 8005894:	4b03      	ldr	r3, [pc, #12]	; (80058a4 <USB_DeactivateEndpoint+0x1f8>)
 8005896:	4323      	orrs	r3, r4
 8005898:	b29b      	uxth	r3, r3
 800589a:	8013      	strh	r3, [r2, #0]
 800589c:	e082      	b.n	80059a4 <USB_DeactivateEndpoint+0x2f8>
 800589e:	bf00      	nop
 80058a0:	ffff80c0 	.word	0xffff80c0
 80058a4:	ffff8080 	.word	0xffff8080
 80058a8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d013      	beq.n	80058ea <USB_DeactivateEndpoint+0x23e>
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80058d4:	4013      	ands	r3, r2
 80058d6:	b299      	uxth	r1, r3
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	4b33      	ldr	r3, [pc, #204]	; (80059b0 <USB_DeactivateEndpoint+0x304>)
 80058e4:	430b      	orrs	r3, r1
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d013      	beq.n	8005928 <USB_DeactivateEndpoint+0x27c>
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29a      	uxth	r2, r3
 800590e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005912:	4013      	ands	r3, r2
 8005914:	b299      	uxth	r1, r3
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	441a      	add	r2, r3
 8005920:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <USB_DeactivateEndpoint+0x308>)
 8005922:	430b      	orrs	r3, r1
 8005924:	b29b      	uxth	r3, r3
 8005926:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29a      	uxth	r2, r3
 8005936:	f640 730f 	movw	r3, #3855	; 0xf0f
 800593a:	4013      	ands	r3, r2
 800593c:	b299      	uxth	r1, r3
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	441a      	add	r2, r3
 8005948:	4b19      	ldr	r3, [pc, #100]	; (80059b0 <USB_DeactivateEndpoint+0x304>)
 800594a:	430b      	orrs	r3, r1
 800594c:	b29b      	uxth	r3, r3
 800594e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29b      	uxth	r3, r3
 800595e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005966:	b29c      	uxth	r4, r3
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	441a      	add	r2, r3
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <USB_DeactivateEndpoint+0x30c>)
 8005974:	4323      	orrs	r3, r4
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005990:	b29c      	uxth	r4, r3
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	441a      	add	r2, r3
 800599c:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <USB_DeactivateEndpoint+0x30c>)
 800599e:	4323      	orrs	r3, r4
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc90      	pop	{r4, r7}
 80059ae:	4770      	bx	lr
 80059b0:	ffffc080 	.word	0xffffc080
 80059b4:	ffff80c0 	.word	0xffff80c0
 80059b8:	ffff8080 	.word	0xffff8080

080059bc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b08d      	sub	sp, #52	; 0x34
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	f040 8149 	bne.w	8005c6c <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d909      	bls.n	80059fa <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	1ad2      	subs	r2, r2, r3
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	619a      	str	r2, [r3, #24]
 80059f8:	e005      	b.n	8005a06 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2200      	movs	r2, #0
 8005a04:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	7a9b      	ldrb	r3, [r3, #10]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d11b      	bne.n	8005a46 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6959      	ldr	r1, [r3, #20]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	889a      	ldrh	r2, [r3, #4]
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fb7d 	bl	800611a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	3302      	adds	r3, #2
 8005a34:	005a      	lsls	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	e0f6      	b.n	8005c34 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d059      	beq.n	8005b10 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d13b      	bne.n	8005adc <USB_EPStartXfer+0x120>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	3306      	adds	r3, #6
 8005a78:	005a      	lsls	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	2b3e      	cmp	r3, #62	; 0x3e
 8005a88:	d916      	bls.n	8005ab8 <USB_EPStartXfer+0xfc>
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <USB_EPStartXfer+0xe4>
 8005a9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005aa0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005aa2:	029b      	lsls	r3, r3, #10
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	e027      	b.n	8005b08 <USB_EPStartXfer+0x14c>
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <USB_EPStartXfer+0x112>
 8005ac8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005aca:	3301      	adds	r3, #1
 8005acc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ace:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e015      	b.n	8005b08 <USB_EPStartXfer+0x14c>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d111      	bne.n	8005b08 <USB_EPStartXfer+0x14c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	3302      	adds	r3, #2
 8005af8:	005a      	lsls	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b02:	461a      	mov	r2, r3
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	891b      	ldrh	r3, [r3, #8]
 8005b0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b0e:	e058      	b.n	8005bc2 <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d13b      	bne.n	8005b90 <USB_EPStartXfer+0x1d4>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4413      	add	r3, r2
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	005a      	lsls	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b3c:	d916      	bls.n	8005b6c <USB_EPStartXfer+0x1b0>
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <USB_EPStartXfer+0x198>
 8005b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b50:	3b01      	subs	r3, #1
 8005b52:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b56:	029b      	lsls	r3, r3, #10
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e027      	b.n	8005bbc <USB_EPStartXfer+0x200>
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <USB_EPStartXfer+0x1c6>
 8005b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b7e:	3301      	adds	r3, #1
 8005b80:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b84:	029b      	lsls	r3, r3, #10
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	e015      	b.n	8005bbc <USB_EPStartXfer+0x200>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d111      	bne.n	8005bbc <USB_EPStartXfer+0x200>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	4413      	add	r3, r2
 8005baa:	3302      	adds	r3, #2
 8005bac:	005a      	lsls	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	88db      	ldrh	r3, [r3, #6]
 8005bc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6959      	ldr	r1, [r3, #20]
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 faa4 	bl	800611a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d114      	bne.n	8005c04 <USB_EPStartXfer+0x248>
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005bec:	4013      	ands	r3, r2
 8005bee:	b299      	uxth	r1, r3
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	441a      	add	r2, r3
 8005bfa:	4b92      	ldr	r3, [pc, #584]	; (8005e44 <USB_EPStartXfer+0x488>)
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	8013      	strh	r3, [r2, #0]
 8005c02:	e017      	b.n	8005c34 <USB_EPStartXfer+0x278>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d113      	bne.n	8005c34 <USB_EPStartXfer+0x278>
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005c1e:	4013      	ands	r3, r2
 8005c20:	b299      	uxth	r1, r3
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	441a      	add	r2, r3
 8005c2c:	4b86      	ldr	r3, [pc, #536]	; (8005e48 <USB_EPStartXfer+0x48c>)
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4a:	b29c      	uxth	r4, r3
 8005c4c:	f084 0310 	eor.w	r3, r4, #16
 8005c50:	b29c      	uxth	r4, r3
 8005c52:	f084 0320 	eor.w	r3, r4, #32
 8005c56:	b29c      	uxth	r4, r3
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	441a      	add	r2, r3
 8005c62:	4b7a      	ldr	r3, [pc, #488]	; (8005e4c <USB_EPStartXfer+0x490>)
 8005c64:	4323      	orrs	r3, r4
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	8013      	strh	r3, [r2, #0]
 8005c6a:	e122      	b.n	8005eb2 <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d909      	bls.n	8005c8c <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	1ad2      	subs	r2, r2, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	619a      	str	r2, [r3, #24]
 8005c8a:	e005      	b.n	8005c98 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	7a9b      	ldrb	r3, [r3, #10]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d13b      	bne.n	8005d18 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	3306      	adds	r3, #6
 8005cb4:	005a      	lsls	r2, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc4:	d916      	bls.n	8005cf4 <USB_EPStartXfer+0x338>
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <USB_EPStartXfer+0x320>
 8005cd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	847b      	strh	r3, [r7, #34]	; 0x22
 8005cdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cde:	029b      	lsls	r3, r3, #10
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e0c3      	b.n	8005e7c <USB_EPStartXfer+0x4c0>
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	847b      	strh	r3, [r7, #34]	; 0x22
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <USB_EPStartXfer+0x34e>
 8005d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d06:	3301      	adds	r3, #1
 8005d08:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d0c:	029b      	lsls	r3, r3, #10
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e0b1      	b.n	8005e7c <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d13b      	bne.n	8005d98 <USB_EPStartXfer+0x3dc>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	4413      	add	r3, r2
 8005d32:	3302      	adds	r3, #2
 8005d34:	005a      	lsls	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	2b3e      	cmp	r3, #62	; 0x3e
 8005d44:	d916      	bls.n	8005d74 <USB_EPStartXfer+0x3b8>
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	843b      	strh	r3, [r7, #32]
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <USB_EPStartXfer+0x3a0>
 8005d56:	8c3b      	ldrh	r3, [r7, #32]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	843b      	strh	r3, [r7, #32]
 8005d5c:	8c3b      	ldrh	r3, [r7, #32]
 8005d5e:	029b      	lsls	r3, r3, #10
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	e027      	b.n	8005dc4 <USB_EPStartXfer+0x408>
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	085b      	lsrs	r3, r3, #1
 8005d78:	843b      	strh	r3, [r7, #32]
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <USB_EPStartXfer+0x3ce>
 8005d84:	8c3b      	ldrh	r3, [r7, #32]
 8005d86:	3301      	adds	r3, #1
 8005d88:	843b      	strh	r3, [r7, #32]
 8005d8a:	8c3b      	ldrh	r3, [r7, #32]
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e015      	b.n	8005dc4 <USB_EPStartXfer+0x408>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d111      	bne.n	8005dc4 <USB_EPStartXfer+0x408>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	3302      	adds	r3, #2
 8005db4:	005a      	lsls	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d141      	bne.n	8005e50 <USB_EPStartXfer+0x494>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	4413      	add	r3, r2
 8005dde:	3306      	adds	r3, #6
 8005de0:	005a      	lsls	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	2b3e      	cmp	r3, #62	; 0x3e
 8005df0:	d916      	bls.n	8005e20 <USB_EPStartXfer+0x464>
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	83fb      	strh	r3, [r7, #30]
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <USB_EPStartXfer+0x44c>
 8005e02:	8bfb      	ldrh	r3, [r7, #30]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	83fb      	strh	r3, [r7, #30]
 8005e08:	8bfb      	ldrh	r3, [r7, #30]
 8005e0a:	029b      	lsls	r3, r3, #10
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	e02d      	b.n	8005e7c <USB_EPStartXfer+0x4c0>
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	83fb      	strh	r3, [r7, #30]
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <USB_EPStartXfer+0x47a>
 8005e30:	8bfb      	ldrh	r3, [r7, #30]
 8005e32:	3301      	adds	r3, #1
 8005e34:	83fb      	strh	r3, [r7, #30]
 8005e36:	8bfb      	ldrh	r3, [r7, #30]
 8005e38:	029b      	lsls	r3, r3, #10
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e01b      	b.n	8005e7c <USB_EPStartXfer+0x4c0>
 8005e44:	ffff80c0 	.word	0xffff80c0
 8005e48:	ffffc080 	.word	0xffffc080
 8005e4c:	ffff8080 	.word	0xffff8080
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d111      	bne.n	8005e7c <USB_EPStartXfer+0x4c0>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4413      	add	r3, r2
 8005e6a:	3302      	adds	r3, #2
 8005e6c:	005a      	lsls	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e76:	461a      	mov	r2, r3
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	b29c      	uxth	r4, r3
 8005e94:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005e98:	b29c      	uxth	r4, r3
 8005e9a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005e9e:	b29c      	uxth	r4, r3
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	441a      	add	r2, r3
 8005eaa:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <USB_EPStartXfer+0x500>)
 8005eac:	4323      	orrs	r3, r4
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3734      	adds	r7, #52	; 0x34
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd90      	pop	{r4, r7, pc}
 8005ebc:	ffff8080 	.word	0xffff8080

08005ec0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8005ec0:	b490      	push	{r4, r7}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d118      	bne.n	8005f04 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8005ee4:	401c      	ands	r4, r3
 8005ee6:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8005eea:	f084 0410 	eor.w	r4, r4, #16
 8005eee:	b2a1      	uxth	r1, r4
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	441a      	add	r2, r3
 8005efa:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <USB_EPSetStall+0xbc>)
 8005efc:	430b      	orrs	r3, r1
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]
 8005f02:	e034      	b.n	8005f6e <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d018      	beq.n	8005f3e <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f22:	b29c      	uxth	r4, r3
 8005f24:	f084 0310 	eor.w	r3, r4, #16
 8005f28:	b29c      	uxth	r4, r3
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	441a      	add	r2, r3
 8005f34:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <USB_EPSetStall+0xbc>)
 8005f36:	4323      	orrs	r3, r4
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	8013      	strh	r3, [r2, #0]
 8005f3c:	e017      	b.n	8005f6e <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f54:	b29c      	uxth	r4, r3
 8005f56:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005f5a:	b29c      	uxth	r4, r3
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <USB_EPSetStall+0xbc>)
 8005f68:	4323      	orrs	r3, r4
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc90      	pop	{r4, r7}
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	ffff8080 	.word	0xffff8080

08005f80 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f80:	b490      	push	{r4, r7}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d03a      	beq.n	8006008 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <USB_EPClearStall+0x50>
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005fba:	4013      	ands	r3, r2
 8005fbc:	b299      	uxth	r1, r3
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	441a      	add	r2, r3
 8005fc8:	4b2f      	ldr	r3, [pc, #188]	; (8006088 <USB_EPClearStall+0x108>)
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe6:	b29c      	uxth	r4, r3
 8005fe8:	f084 0310 	eor.w	r3, r4, #16
 8005fec:	b29c      	uxth	r4, r3
 8005fee:	f084 0320 	eor.w	r3, r4, #32
 8005ff2:	b29c      	uxth	r4, r3
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	4b23      	ldr	r3, [pc, #140]	; (800608c <USB_EPClearStall+0x10c>)
 8006000:	4323      	orrs	r3, r4
 8006002:	b29b      	uxth	r3, r3
 8006004:	8013      	strh	r3, [r2, #0]
 8006006:	e039      	b.n	800607c <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d013      	beq.n	8006046 <USB_EPClearStall+0xc6>
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29a      	uxth	r2, r3
 800602c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006030:	4013      	ands	r3, r2
 8006032:	b299      	uxth	r1, r3
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	441a      	add	r2, r3
 800603e:	4b14      	ldr	r3, [pc, #80]	; (8006090 <USB_EPClearStall+0x110>)
 8006040:	430b      	orrs	r3, r1
 8006042:	b29b      	uxth	r3, r3
 8006044:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605c:	b29c      	uxth	r4, r3
 800605e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006062:	b29c      	uxth	r4, r3
 8006064:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006068:	b29c      	uxth	r4, r3
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	441a      	add	r2, r3
 8006074:	4b05      	ldr	r3, [pc, #20]	; (800608c <USB_EPClearStall+0x10c>)
 8006076:	4323      	orrs	r3, r4
 8006078:	b29b      	uxth	r3, r3
 800607a:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bc90      	pop	{r4, r7}
 8006086:	4770      	bx	lr
 8006088:	ffff80c0 	.word	0xffff80c0
 800608c:	ffff8080 	.word	0xffff8080
 8006090:	ffffc080 	.word	0xffffc080

08006094 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2280      	movs	r2, #128	; 0x80
 80060aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr

080060ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr

080060ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	bc80      	pop	{r7}
 80060e0:	4770      	bx	lr

080060e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80060f8:	68fb      	ldr	r3, [r7, #12]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr

0800611a <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800611a:	b480      	push	{r7}
 800611c:	b08b      	sub	sp, #44	; 0x2c
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	4611      	mov	r1, r2
 8006126:	461a      	mov	r2, r3
 8006128:	460b      	mov	r3, r1
 800612a:	80fb      	strh	r3, [r7, #6]
 800612c:	4613      	mov	r3, r2
 800612e:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8006130:	88bb      	ldrh	r3, [r7, #4]
 8006132:	3301      	adds	r3, #1
 8006134:	105b      	asrs	r3, r3, #1
 8006136:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
 800613c:	2300      	movs	r3, #0
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 8006144:	2300      	movs	r3, #0
 8006146:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8006148:	88fb      	ldrh	r3, [r7, #6]
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	461a      	mov	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006156:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
 800615c:	e01b      	b.n	8006196 <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	3301      	adds	r3, #1
 8006168:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	461a      	mov	r2, r3
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	1c9a      	adds	r2, r3, #2
 800617c:	623a      	str	r2, [r7, #32]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	b292      	uxth	r2, r2
 8006182:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	3302      	adds	r3, #2
 8006188:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	3301      	adds	r3, #1
 800618e:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	3b01      	subs	r3, #1
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1e0      	bne.n	800615e <USB_WritePMA+0x44>
  }
}
 800619c:	bf00      	nop
 800619e:	372c      	adds	r7, #44	; 0x2c
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr

080061a6 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b089      	sub	sp, #36	; 0x24
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	4611      	mov	r1, r2
 80061b2:	461a      	mov	r2, r3
 80061b4:	460b      	mov	r3, r1
 80061b6:	80fb      	strh	r3, [r7, #6]
 80061b8:	4613      	mov	r3, r2
 80061ba:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80061bc:	88bb      	ldrh	r3, [r7, #4]
 80061be:	3301      	adds	r3, #1
 80061c0:	105b      	asrs	r3, r3, #1
 80061c2:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	461a      	mov	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061da:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	e00e      	b.n	8006200 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	1d1a      	adds	r2, r3, #4
 80061e6:	61ba      	str	r2, [r7, #24]
 80061e8:	6819      	ldr	r1, [r3, #0]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	60ba      	str	r2, [r7, #8]
 80061f0:	b28a      	uxth	r2, r1
 80061f2:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	3301      	adds	r3, #1
 80061f8:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1ed      	bne.n	80061e2 <USB_ReadPMA+0x3c>
  }
}
 8006206:	bf00      	nop
 8006208:	3724      	adds	r7, #36	; 0x24
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	7c1b      	ldrb	r3, [r3, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10e      	bne.n	8006246 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8006228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800622c:	2202      	movs	r2, #2
 800622e:	2181      	movs	r1, #129	; 0x81
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 fd40 	bl	8007cb6 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8006236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800623a:	2202      	movs	r2, #2
 800623c:	2101      	movs	r1, #1
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fd39 	bl	8007cb6 <USBD_LL_OpenEP>
 8006244:	e00b      	b.n	800625e <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8006246:	2340      	movs	r3, #64	; 0x40
 8006248:	2202      	movs	r2, #2
 800624a:	2181      	movs	r1, #129	; 0x81
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fd32 	bl	8007cb6 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8006252:	2340      	movs	r3, #64	; 0x40
 8006254:	2202      	movs	r2, #2
 8006256:	2101      	movs	r1, #1
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f001 fd2c 	bl	8007cb6 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800625e:	2308      	movs	r3, #8
 8006260:	2203      	movs	r2, #3
 8006262:	2182      	movs	r1, #130	; 0x82
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 fd26 	bl	8007cb6 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800626a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800626e:	f001 fe43 	bl	8007ef8 <USBD_static_malloc>
 8006272:	4602      	mov	r2, r0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006280:	2b00      	cmp	r3, #0
 8006282:	d102      	bne.n	800628a <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8006284:	2301      	movs	r3, #1
 8006286:	73fb      	strb	r3, [r7, #15]
 8006288:	e026      	b.n	80062d8 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006290:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	7c1b      	ldrb	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d109      	bne.n	80062c8 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062be:	2101      	movs	r1, #1
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 fde2 	bl	8007e8a <USBD_LL_PrepareReceive>
 80062c6:	e007      	b.n	80062d8 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062ce:	2340      	movs	r3, #64	; 0x40
 80062d0:	2101      	movs	r1, #1
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 fdd9 	bl	8007e8a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80062f2:	2181      	movs	r1, #129	; 0x81
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 fd04 	bl	8007d02 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 80062fa:	2101      	movs	r1, #1
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 fd00 	bl	8007d02 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8006302:	2182      	movs	r1, #130	; 0x82
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 fcfc 	bl	8007d02 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00e      	beq.n	8006332 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006324:	4618      	mov	r0, r3
 8006326:	f001 fdf3 	bl	8007f10 <USBD_static_free>
    pdev->pClassData = NULL;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8006332:	7bfb      	ldrb	r3, [r7, #15]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800634c:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006356:	2b00      	cmp	r3, #0
 8006358:	d03a      	beq.n	80063d0 <USBD_CDC_Setup+0x94>
 800635a:	2b20      	cmp	r3, #32
 800635c:	d000      	beq.n	8006360 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800635e:	e043      	b.n	80063e8 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	88db      	ldrh	r3, [r3, #6]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d029      	beq.n	80063bc <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	b25b      	sxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	da11      	bge.n	8006396 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800637e:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	88d2      	ldrh	r2, [r2, #6]
 8006384:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8006386:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	88db      	ldrh	r3, [r3, #6]
 800638c:	461a      	mov	r2, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 f80e 	bl	80073b0 <USBD_CtlSendData>
    break;
 8006394:	e029      	b.n	80063ea <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	785a      	ldrb	r2, [r3, #1]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	88db      	ldrh	r3, [r3, #6]
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 80063ac:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	88db      	ldrh	r3, [r3, #6]
 80063b2:	461a      	mov	r2, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 f829 	bl	800740c <USBD_CtlPrepareRx>
    break;
 80063ba:	e016      	b.n	80063ea <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	7850      	ldrb	r0, [r2, #1]
 80063c8:	2200      	movs	r2, #0
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	4798      	blx	r3
    break;
 80063ce:	e00c      	b.n	80063ea <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b0a      	cmp	r3, #10
 80063d6:	d001      	beq.n	80063dc <USBD_CDC_Setup+0xa0>
 80063d8:	2b0b      	cmp	r3, #11
      break;
 80063da:	e005      	b.n	80063e8 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 80063dc:	2201      	movs	r2, #1
 80063de:	4905      	ldr	r1, [pc, #20]	; (80063f4 <USBD_CDC_Setup+0xb8>)
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 ffe5 	bl	80073b0 <USBD_CtlSendData>
      break;
 80063e6:	bf00      	nop
    break;
 80063e8:	bf00      	nop
  }
  return USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20000b50 	.word	0x20000b50

080063f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800640a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e000      	b.n	8006424 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8006422:	2302      	movs	r3, #2
  }
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr

0800642e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006440:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fd42 	bl	8007ed0 <USBD_LL_GetRxDataSize>
 800644c:	4602      	mov	r2, r0
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00d      	beq.n	800647a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006472:	4611      	mov	r1, r2
 8006474:	4798      	blx	r3

    return USBD_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	e000      	b.n	800647c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800647a:	2302      	movs	r3, #2
  }
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006492:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d015      	beq.n	80064ca <USBD_CDC_EP0_RxReady+0x46>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064a4:	2bff      	cmp	r3, #255	; 0xff
 80064a6:	d010      	beq.n	80064ca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80064b6:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064be:	b292      	uxth	r2, r2
 80064c0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	22ff      	movs	r2, #255	; 0xff
 80064c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2243      	movs	r2, #67	; 0x43
 80064e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80064e2:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	200000b4 	.word	0x200000b4

080064f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2243      	movs	r2, #67	; 0x43
 8006500:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006502:	4b03      	ldr	r3, [pc, #12]	; (8006510 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	20000070 	.word	0x20000070

08006514 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2243      	movs	r2, #67	; 0x43
 8006520:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006522:	4b03      	ldr	r3, [pc, #12]	; (8006530 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	200000f8 	.word	0x200000f8

08006534 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	220a      	movs	r2, #10
 8006540:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006542:	4b03      	ldr	r3, [pc, #12]	; (8006550 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	2000002c 	.word	0x2000002c

08006554 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800655e:	2302      	movs	r3, #2
 8006560:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8006574:	7bfb      	ldrb	r3, [r7, #15]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr

08006580 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006594:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800659e:	88fa      	ldrh	r2, [r7, #6]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr

080065b2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065c2:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr

080065d8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065e6:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d017      	beq.n	8006622 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d110      	bne.n	800661e <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 8006610:	b29b      	uxth	r3, r3
 8006612:	2181      	movs	r1, #129	; 0x81
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 fc15 	bl	8007e44 <USBD_LL_Transmit>
      
      return USBD_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e002      	b.n	8006624 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8006622:	2302      	movs	r3, #2
  }
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800663a:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006642:	2b00      	cmp	r3, #0
 8006644:	d017      	beq.n	8006676 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	7c1b      	ldrb	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006658:	2101      	movs	r1, #1
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 fc15 	bl	8007e8a <USBD_LL_PrepareReceive>
 8006660:	e007      	b.n	8006672 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006668:	2340      	movs	r3, #64	; 0x40
 800666a:	2101      	movs	r1, #1
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fc0c 	bl	8007e8a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e000      	b.n	8006678 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006676:	2302      	movs	r3, #2
  }
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	4613      	mov	r3, r2
 800668c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8006694:	2302      	movs	r3, #2
 8006696:	e01a      	b.n	80066ce <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	79fa      	ldrb	r2, [r7, #7]
 80066c4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f001 fa80 	bl	8007bcc <USBD_LL_Init>
  
  return USBD_OK; 
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d006      	beq.n	80066f8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]
 80066f6:	e001      	b.n	80066fc <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80066f8:	2302      	movs	r3, #2
 80066fa:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	bc80      	pop	{r7}
 8006706:	4770      	bx	lr

08006708 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 fab5 	bl	8007c80 <USBD_LL_Start>
  
  return USBD_OK;  
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr

08006734 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006740:	2302      	movs	r3, #2
 8006742:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00c      	beq.n	8006768 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	78fa      	ldrb	r2, [r7, #3]
 8006758:	4611      	mov	r1, r2
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	4798      	blx	r3
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	78fa      	ldrb	r2, [r7, #3]
 8006788:	4611      	mov	r1, r2
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
  return USBD_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fd59 	bl	8007262 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80067cc:	f003 031f 	and.w	r3, r3, #31
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d00b      	beq.n	80067ec <USBD_LL_SetupStage+0x54>
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d011      	beq.n	80067fc <USBD_LL_SetupStage+0x64>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d117      	bne.n	800680c <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f987 	bl	8006af8 <USBD_StdDevReq>
    break;
 80067ea:	e01a      	b.n	8006822 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f9cf 	bl	8006b98 <USBD_StdItfReq>
    break;
 80067fa:	e012      	b.n	8006822 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f9fa 	bl	8006bfe <USBD_StdEPReq>
    break;
 800680a:	e00a      	b.n	8006822 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006812:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006816:	b2db      	uxtb	r3, r3
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fa90 	bl	8007d40 <USBD_LL_StallEP>
    break;
 8006820:	bf00      	nop
  }  
  return USBD_OK;  
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	460b      	mov	r3, r1
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800683a:	7afb      	ldrb	r3, [r7, #11]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d138      	bne.n	80068b2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006846:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800684e:	2b03      	cmp	r3, #3
 8006850:	d142      	bne.n	80068d8 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	429a      	cmp	r2, r3
 800685c:	d914      	bls.n	8006888 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	1ad2      	subs	r2, r2, r3
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	4293      	cmp	r3, r2
 8006876:	bf28      	it	cs
 8006878:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800687a:	b29b      	uxth	r3, r3
 800687c:	461a      	mov	r2, r3
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fde1 	bl	8007448 <USBD_CtlContinueRx>
 8006886:	e027      	b.n	80068d8 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800689a:	2b03      	cmp	r3, #3
 800689c:	d105      	bne.n	80068aa <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 fdde 	bl	800746c <USBD_CtlSendStatus>
 80068b0:	e012      	b.n	80068d8 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00c      	beq.n	80068d8 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d107      	bne.n	80068d8 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	7afa      	ldrb	r2, [r7, #11]
 80068d2:	4611      	mov	r1, r2
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	4798      	blx	r3
  }  
  return USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b086      	sub	sp, #24
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	460b      	mov	r3, r1
 80068ec:	607a      	str	r2, [r7, #4]
 80068ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80068f0:	7afb      	ldrb	r3, [r7, #11]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d16c      	bne.n	80069d0 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3314      	adds	r3, #20
 80068fa:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8006902:	2b02      	cmp	r3, #2
 8006904:	d157      	bne.n	80069b6 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	429a      	cmp	r2, r3
 8006910:	d915      	bls.n	800693e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	1ad2      	subs	r2, r2, r3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8006924:	b29b      	uxth	r3, r3
 8006926:	461a      	mov	r2, r3
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 fd5c 	bl	80073e8 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8006930:	2300      	movs	r3, #0
 8006932:	2200      	movs	r2, #0
 8006934:	2100      	movs	r1, #0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f001 faa7 	bl	8007e8a <USBD_LL_PrepareReceive>
 800693c:	e03b      	b.n	80069b6 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	68d2      	ldr	r2, [r2, #12]
 8006946:	fbb3 f1f2 	udiv	r1, r3, r2
 800694a:	fb02 f201 	mul.w	r2, r2, r1
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11c      	bne.n	800698e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800695c:	429a      	cmp	r2, r3
 800695e:	d316      	bcc.n	800698e <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 800696a:	429a      	cmp	r2, r3
 800696c:	d20f      	bcs.n	800698e <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800696e:	2200      	movs	r2, #0
 8006970:	2100      	movs	r1, #0
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 fd38 	bl	80073e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8006980:	2300      	movs	r3, #0
 8006982:	2200      	movs	r2, #0
 8006984:	2100      	movs	r1, #0
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f001 fa7f 	bl	8007e8a <USBD_LL_PrepareReceive>
 800698c:	e013      	b.n	80069b6 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d105      	bne.n	80069b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fd6e 	bl	8007492 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d11a      	bne.n	80069f6 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff fead 	bl	8006720 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80069ce:	e012      	b.n	80069f6 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00c      	beq.n	80069f6 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d107      	bne.n	80069f6 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	7afa      	ldrb	r2, [r7, #11]
 80069f0:	4611      	mov	r1, r2
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	4798      	blx	r3
  }  
  return USBD_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8006a08:	2340      	movs	r3, #64	; 0x40
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 f951 	bl	8007cb6 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2240      	movs	r2, #64	; 0x40
 8006a18:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8006a1c:	2340      	movs	r3, #64	; 0x40
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2180      	movs	r1, #128	; 0x80
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 f947 	bl	8007cb6 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2240      	movs	r2, #64	; 0x40
 8006a2c:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6852      	ldr	r2, [r2, #4]
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	4611      	mov	r1, r2
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4798      	blx	r3
 
  
  return USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	460b      	mov	r3, r1
 8006a68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	78fa      	ldrb	r2, [r7, #3]
 8006a6e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr

08006a7c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2204      	movs	r2, #4
 8006a94:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr

08006ac4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d10b      	bne.n	8006aee <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	785b      	ldrb	r3, [r3, #1]
 8006b0a:	2b09      	cmp	r3, #9
 8006b0c:	d839      	bhi.n	8006b82 <USBD_StdDevReq+0x8a>
 8006b0e:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <USBD_StdDevReq+0x1c>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b65 	.word	0x08006b65
 8006b18:	08006b79 	.word	0x08006b79
 8006b1c:	08006b83 	.word	0x08006b83
 8006b20:	08006b6f 	.word	0x08006b6f
 8006b24:	08006b83 	.word	0x08006b83
 8006b28:	08006b47 	.word	0x08006b47
 8006b2c:	08006b3d 	.word	0x08006b3d
 8006b30:	08006b83 	.word	0x08006b83
 8006b34:	08006b5b 	.word	0x08006b5b
 8006b38:	08006b51 	.word	0x08006b51
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f936 	bl	8006db0 <USBD_GetDescriptor>
    break;
 8006b44:	e022      	b.n	8006b8c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fa25 	bl	8006f98 <USBD_SetAddress>
    break;
 8006b4e:	e01d      	b.n	8006b8c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa5e 	bl	8007014 <USBD_SetConfig>
    break;
 8006b58:	e018      	b.n	8006b8c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fae1 	bl	8007124 <USBD_GetConfig>
    break;
 8006b62:	e013      	b.n	8006b8c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fb0e 	bl	8007188 <USBD_GetStatus>
    break;
 8006b6c:	e00e      	b.n	8006b8c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fb33 	bl	80071dc <USBD_SetFeature>
    break;
 8006b76:	e009      	b.n	8006b8c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fb49 	bl	8007212 <USBD_ClrFeature>
    break;
 8006b80:	e004      	b.n	8006b8c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fba8 	bl	80072da <USBD_CtlError>
    break;
 8006b8a:	bf00      	nop
  }
  
  return ret;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop

08006b98 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d11b      	bne.n	8006be8 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	889b      	ldrh	r3, [r3, #4]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d811      	bhi.n	8006bde <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	88db      	ldrh	r3, [r3, #6]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d110      	bne.n	8006bf2 <USBD_StdItfReq+0x5a>
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10d      	bne.n	8006bf2 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fc48 	bl	800746c <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8006bdc:	e009      	b.n	8006bf2 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fb7a 	bl	80072da <USBD_CtlError>
    break;
 8006be6:	e004      	b.n	8006bf2 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fb75 	bl	80072da <USBD_CtlError>
    break;
 8006bf0:	e000      	b.n	8006bf4 <USBD_StdItfReq+0x5c>
    break;
 8006bf2:	bf00      	nop
  }
  return USBD_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8006c08:	2300      	movs	r3, #0
 8006c0a:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	889b      	ldrh	r3, [r3, #4]
 8006c10:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d108      	bne.n	8006c30 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
    
    return USBD_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e0ba      	b.n	8006da6 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	785b      	ldrb	r3, [r3, #1]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d039      	beq.n	8006cac <USBD_StdEPReq+0xae>
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d002      	beq.n	8006c42 <USBD_StdEPReq+0x44>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d06b      	beq.n	8006d18 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8006c40:	e0b0      	b.n	8006da4 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d002      	beq.n	8006c52 <USBD_StdEPReq+0x54>
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d00c      	beq.n	8006c6a <USBD_StdEPReq+0x6c>
 8006c50:	e025      	b.n	8006c9e <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d027      	beq.n	8006ca8 <USBD_StdEPReq+0xaa>
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	2b80      	cmp	r3, #128	; 0x80
 8006c5c:	d024      	beq.n	8006ca8 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 f86c 	bl	8007d40 <USBD_LL_StallEP>
      break;	
 8006c68:	e01e      	b.n	8006ca8 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	885b      	ldrh	r3, [r3, #2]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d007      	beq.n	8006c88 <USBD_StdEPReq+0x8a>
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	2b80      	cmp	r3, #128	; 0x80
 8006c7c:	d004      	beq.n	8006c88 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 f85c 	bl	8007d40 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fbe8 	bl	800746c <USBD_CtlSendStatus>
      break;
 8006c9c:	e005      	b.n	8006caa <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fb1a 	bl	80072da <USBD_CtlError>
      break;    
 8006ca6:	e000      	b.n	8006caa <USBD_StdEPReq+0xac>
      break;	
 8006ca8:	bf00      	nop
    break;
 8006caa:	e07b      	b.n	8006da4 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d002      	beq.n	8006cbc <USBD_StdEPReq+0xbe>
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d00c      	beq.n	8006cd4 <USBD_StdEPReq+0xd6>
 8006cba:	e024      	b.n	8006d06 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d026      	beq.n	8006d10 <USBD_StdEPReq+0x112>
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	2b80      	cmp	r3, #128	; 0x80
 8006cc6:	d023      	beq.n	8006d10 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 f837 	bl	8007d40 <USBD_LL_StallEP>
      break;	
 8006cd2:	e01d      	b.n	8006d10 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	885b      	ldrh	r3, [r3, #2]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d11b      	bne.n	8006d14 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8006ce6:	7bbb      	ldrb	r3, [r7, #14]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 f847 	bl	8007d7e <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fbb4 	bl	800746c <USBD_CtlSendStatus>
      break;
 8006d04:	e006      	b.n	8006d14 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fae6 	bl	80072da <USBD_CtlError>
      break;    
 8006d0e:	e002      	b.n	8006d16 <USBD_StdEPReq+0x118>
      break;	
 8006d10:	bf00      	nop
 8006d12:	e047      	b.n	8006da4 <USBD_StdEPReq+0x1a6>
      break;
 8006d14:	bf00      	nop
    break;
 8006d16:	e045      	b.n	8006da4 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d002      	beq.n	8006d28 <USBD_StdEPReq+0x12a>
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d00b      	beq.n	8006d3e <USBD_StdEPReq+0x140>
 8006d26:	e036      	b.n	8006d96 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d036      	beq.n	8006da0 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 f802 	bl	8007d40 <USBD_LL_StallEP>
      break;	
 8006d3c:	e030      	b.n	8006da0 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	da08      	bge.n	8006d58 <USBD_StdEPReq+0x15a>
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	4413      	add	r3, r2
 8006d54:	3304      	adds	r3, #4
 8006d56:	e007      	b.n	8006d68 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006d5e:	3310      	adds	r3, #16
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	4413      	add	r3, r2
 8006d66:	3304      	adds	r3, #4
 8006d68:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 f824 	bl	8007dbc <USBD_LL_IsStallEP>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e002      	b.n	8006d88 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8006d88:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fb0e 	bl	80073b0 <USBD_CtlSendData>
      break;
 8006d94:	e005      	b.n	8006da2 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fa9e 	bl	80072da <USBD_CtlError>
      break;
 8006d9e:	e000      	b.n	8006da2 <USBD_StdEPReq+0x1a4>
      break;	
 8006da0:	bf00      	nop
    break;
 8006da2:	bf00      	nop
  }
  return ret;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	885b      	ldrh	r3, [r3, #2]
 8006dbe:	0a1b      	lsrs	r3, r3, #8
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	2b06      	cmp	r3, #6
 8006dc6:	f200 80c9 	bhi.w	8006f5c <USBD_GetDescriptor+0x1ac>
 8006dca:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <USBD_GetDescriptor+0x20>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006ded 	.word	0x08006ded
 8006dd4:	08006e05 	.word	0x08006e05
 8006dd8:	08006e45 	.word	0x08006e45
 8006ddc:	08006f5d 	.word	0x08006f5d
 8006de0:	08006f5d 	.word	0x08006f5d
 8006de4:	08006f09 	.word	0x08006f09
 8006de8:	08006f2f 	.word	0x08006f2f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	7c12      	ldrb	r2, [r2, #16]
 8006df8:	f107 010a 	add.w	r1, r7, #10
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	4798      	blx	r3
 8006e00:	60f8      	str	r0, [r7, #12]
    break;
 8006e02:	e0b0      	b.n	8006f66 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	7c1b      	ldrb	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10d      	bne.n	8006e28 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	f107 020a 	add.w	r2, r7, #10
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3301      	adds	r3, #1
 8006e22:	2202      	movs	r2, #2
 8006e24:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006e26:	e09e      	b.n	8006f66 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	f107 020a 	add.w	r2, r7, #10
 8006e34:	4610      	mov	r0, r2
 8006e36:	4798      	blx	r3
 8006e38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	2202      	movs	r2, #2
 8006e40:	701a      	strb	r2, [r3, #0]
    break;
 8006e42:	e090      	b.n	8006f66 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	885b      	ldrh	r3, [r3, #2]
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b05      	cmp	r3, #5
 8006e4c:	d856      	bhi.n	8006efc <USBD_GetDescriptor+0x14c>
 8006e4e:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <USBD_GetDescriptor+0xa4>)
 8006e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e54:	08006e6d 	.word	0x08006e6d
 8006e58:	08006e85 	.word	0x08006e85
 8006e5c:	08006e9d 	.word	0x08006e9d
 8006e60:	08006eb5 	.word	0x08006eb5
 8006e64:	08006ecd 	.word	0x08006ecd
 8006e68:	08006ee5 	.word	0x08006ee5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	7c12      	ldrb	r2, [r2, #16]
 8006e78:	f107 010a 	add.w	r1, r7, #10
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
      break;
 8006e82:	e040      	b.n	8006f06 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	7c12      	ldrb	r2, [r2, #16]
 8006e90:	f107 010a 	add.w	r1, r7, #10
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
 8006e98:	60f8      	str	r0, [r7, #12]
      break;
 8006e9a:	e034      	b.n	8006f06 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	7c12      	ldrb	r2, [r2, #16]
 8006ea8:	f107 010a 	add.w	r1, r7, #10
 8006eac:	4610      	mov	r0, r2
 8006eae:	4798      	blx	r3
 8006eb0:	60f8      	str	r0, [r7, #12]
      break;
 8006eb2:	e028      	b.n	8006f06 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	7c12      	ldrb	r2, [r2, #16]
 8006ec0:	f107 010a 	add.w	r1, r7, #10
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
 8006ec8:	60f8      	str	r0, [r7, #12]
      break;
 8006eca:	e01c      	b.n	8006f06 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	7c12      	ldrb	r2, [r2, #16]
 8006ed8:	f107 010a 	add.w	r1, r7, #10
 8006edc:	4610      	mov	r0, r2
 8006ede:	4798      	blx	r3
 8006ee0:	60f8      	str	r0, [r7, #12]
      break;
 8006ee2:	e010      	b.n	8006f06 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	7c12      	ldrb	r2, [r2, #16]
 8006ef0:	f107 010a 	add.w	r1, r7, #10
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
 8006ef8:	60f8      	str	r0, [r7, #12]
      break;
 8006efa:	e004      	b.n	8006f06 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9eb 	bl	80072da <USBD_CtlError>
      return;
 8006f04:	e044      	b.n	8006f90 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8006f06:	e02e      	b.n	8006f66 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	7c1b      	ldrb	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f18:	f107 020a 	add.w	r2, r7, #10
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
 8006f20:	60f8      	str	r0, [r7, #12]
      break;
 8006f22:	e020      	b.n	8006f66 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f9d7 	bl	80072da <USBD_CtlError>
      return;
 8006f2c:	e030      	b.n	8006f90 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7c1b      	ldrb	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10d      	bne.n	8006f52 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	f107 020a 	add.w	r2, r7, #10
 8006f42:	4610      	mov	r0, r2
 8006f44:	4798      	blx	r3
 8006f46:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	2207      	movs	r2, #7
 8006f4e:	701a      	strb	r2, [r3, #0]
      break; 
 8006f50:	e009      	b.n	8006f66 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f9c0 	bl	80072da <USBD_CtlError>
      return;
 8006f5a:	e019      	b.n	8006f90 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f9bb 	bl	80072da <USBD_CtlError>
    return;
 8006f64:	e014      	b.n	8006f90 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8006f66:	897b      	ldrh	r3, [r7, #10]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d011      	beq.n	8006f90 <USBD_GetDescriptor+0x1e0>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	88db      	ldrh	r3, [r3, #6]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00d      	beq.n	8006f90 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	88da      	ldrh	r2, [r3, #6]
 8006f78:	897b      	ldrh	r3, [r7, #10]
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	bf28      	it	cs
 8006f7e:	4613      	movcs	r3, r2
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8006f84:	897b      	ldrh	r3, [r7, #10]
 8006f86:	461a      	mov	r2, r3
 8006f88:	68f9      	ldr	r1, [r7, #12]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa10 	bl	80073b0 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop

08006f98 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	889b      	ldrh	r3, [r3, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d12c      	bne.n	8007004 <USBD_SetAddress+0x6c>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	88db      	ldrh	r3, [r3, #6]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d128      	bne.n	8007004 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	885b      	ldrh	r3, [r3, #2]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fbc:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d104      	bne.n	8006fd2 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f985 	bl	80072da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006fd0:	e01c      	b.n	800700c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	7bfa      	ldrb	r2, [r7, #15]
 8006fd6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 ff11 	bl	8007e06 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fa41 	bl	800746c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d004      	beq.n	8006ffa <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006ff8:	e008      	b.n	800700c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007002:	e003      	b.n	800700c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f967 	bl	80072da <USBD_CtlError>
  } 
}
 800700c:	bf00      	nop
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	885b      	ldrh	r3, [r3, #2]
 8007022:	b2da      	uxtb	r2, r3
 8007024:	4b3e      	ldr	r3, [pc, #248]	; (8007120 <USBD_SetConfig+0x10c>)
 8007026:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8007028:	4b3d      	ldr	r3, [pc, #244]	; (8007120 <USBD_SetConfig+0x10c>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d904      	bls.n	800703a <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f951 	bl	80072da <USBD_CtlError>
 8007038:	e06f      	b.n	800711a <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007040:	2b02      	cmp	r3, #2
 8007042:	d002      	beq.n	800704a <USBD_SetConfig+0x36>
 8007044:	2b03      	cmp	r3, #3
 8007046:	d023      	beq.n	8007090 <USBD_SetConfig+0x7c>
 8007048:	e062      	b.n	8007110 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800704a:	4b35      	ldr	r3, [pc, #212]	; (8007120 <USBD_SetConfig+0x10c>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d01a      	beq.n	8007088 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8007052:	4b33      	ldr	r3, [pc, #204]	; (8007120 <USBD_SetConfig+0x10c>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2203      	movs	r2, #3
 8007060:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007064:	4b2e      	ldr	r3, [pc, #184]	; (8007120 <USBD_SetConfig+0x10c>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff fb62 	bl	8006734 <USBD_SetClassConfig>
 8007070:	4603      	mov	r3, r0
 8007072:	2b02      	cmp	r3, #2
 8007074:	d104      	bne.n	8007080 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f92e 	bl	80072da <USBD_CtlError>
          return;
 800707e:	e04c      	b.n	800711a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f9f3 	bl	800746c <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8007086:	e048      	b.n	800711a <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f9ef 	bl	800746c <USBD_CtlSendStatus>
      break;
 800708e:	e044      	b.n	800711a <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8007090:	4b23      	ldr	r3, [pc, #140]	; (8007120 <USBD_SetConfig+0x10c>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d112      	bne.n	80070be <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80070a0:	4b1f      	ldr	r3, [pc, #124]	; (8007120 <USBD_SetConfig+0x10c>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	461a      	mov	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80070aa:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <USBD_SetConfig+0x10c>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff fb5e 	bl	8006772 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f9d8 	bl	800746c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80070bc:	e02d      	b.n	800711a <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 80070be:	4b18      	ldr	r3, [pc, #96]	; (8007120 <USBD_SetConfig+0x10c>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d01d      	beq.n	8007108 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff fb4c 	bl	8006772 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070da:	4b11      	ldr	r3, [pc, #68]	; (8007120 <USBD_SetConfig+0x10c>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80070e4:	4b0e      	ldr	r3, [pc, #56]	; (8007120 <USBD_SetConfig+0x10c>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff fb22 	bl	8006734 <USBD_SetClassConfig>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d104      	bne.n	8007100 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f8ee 	bl	80072da <USBD_CtlError>
          return;
 80070fe:	e00c      	b.n	800711a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f9b3 	bl	800746c <USBD_CtlSendStatus>
      break;
 8007106:	e008      	b.n	800711a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f9af 	bl	800746c <USBD_CtlSendStatus>
      break;
 800710e:	e004      	b.n	800711a <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8e1 	bl	80072da <USBD_CtlError>
      break;
 8007118:	bf00      	nop
    }
  }
}
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000b51 	.word	0x20000b51

08007124 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	88db      	ldrh	r3, [r3, #6]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d004      	beq.n	8007140 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f8ce 	bl	80072da <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800713e:	e01f      	b.n	8007180 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007146:	2b02      	cmp	r3, #2
 8007148:	d002      	beq.n	8007150 <USBD_GetConfig+0x2c>
 800714a:	2b03      	cmp	r3, #3
 800714c:	d00b      	beq.n	8007166 <USBD_GetConfig+0x42>
 800714e:	e012      	b.n	8007176 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800715a:	2201      	movs	r2, #1
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f926 	bl	80073b0 <USBD_CtlSendData>
      break;
 8007164:	e00c      	b.n	8007180 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800716a:	2201      	movs	r2, #1
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f91e 	bl	80073b0 <USBD_CtlSendData>
      break;
 8007174:	e004      	b.n	8007180 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f8ae 	bl	80072da <USBD_CtlError>
      break;
 800717e:	bf00      	nop
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007198:	3b02      	subs	r3, #2
 800719a:	2b01      	cmp	r3, #1
 800719c:	d815      	bhi.n	80071ca <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f043 0202 	orr.w	r2, r3, #2
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 80071be:	2202      	movs	r2, #2
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f8f4 	bl	80073b0 <USBD_CtlSendData>
                      2);
    break;
 80071c8:	e004      	b.n	80071d4 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f884 	bl	80072da <USBD_CtlError>
    break;
 80071d2:	bf00      	nop
  }
}
 80071d4:	bf00      	nop
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d10d      	bne.n	800720a <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f931 	bl	800746c <USBD_CtlSendStatus>
  }

}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007222:	3b02      	subs	r3, #2
 8007224:	2b01      	cmp	r3, #1
 8007226:	d812      	bhi.n	800724e <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	885b      	ldrh	r3, [r3, #2]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d113      	bne.n	8007258 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f910 	bl	800746c <USBD_CtlSendStatus>
    }
    break;
 800724c:	e004      	b.n	8007258 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f842 	bl	80072da <USBD_CtlError>
    break;
 8007256:	e000      	b.n	800725a <USBD_ClrFeature+0x48>
    break;
 8007258:	bf00      	nop
  }
}
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	785a      	ldrb	r2, [r3, #1]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	3302      	adds	r3, #2
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	b29a      	uxth	r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	3303      	adds	r3, #3
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	b29b      	uxth	r3, r3
 8007290:	4413      	add	r3, r2
 8007292:	b29a      	uxth	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	3304      	adds	r3, #4
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b29a      	uxth	r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	3305      	adds	r3, #5
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	4413      	add	r3, r2
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	3306      	adds	r3, #6
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	3307      	adds	r3, #7
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	021b      	lsls	r3, r3, #8
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	4413      	add	r3, r2
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	80da      	strh	r2, [r3, #6]

}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr

080072da <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 80072e4:	2180      	movs	r1, #128	; 0x80
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fd2a 	bl	8007d40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80072ec:	2100      	movs	r1, #0
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fd26 	bl	8007d40 <USBD_LL_StallEP>
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d033      	beq.n	800737a <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 f835 	bl	8007382 <USBD_GetLen>
 8007318:	4603      	mov	r3, r0
 800731a:	3301      	adds	r3, #1
 800731c:	b29b      	uxth	r3, r3
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	881a      	ldrh	r2, [r3, #0]
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	1c59      	adds	r1, r3, #1
 800732e:	75f9      	strb	r1, [r7, #23]
 8007330:	4619      	mov	r1, r3
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	440b      	add	r3, r1
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	75fa      	strb	r2, [r7, #23]
 8007340:	461a      	mov	r2, r3
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4413      	add	r3, r2
 8007346:	2203      	movs	r2, #3
 8007348:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800734a:	e012      	b.n	8007372 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	60fa      	str	r2, [r7, #12]
 8007352:	7dfa      	ldrb	r2, [r7, #23]
 8007354:	1c51      	adds	r1, r2, #1
 8007356:	75f9      	strb	r1, [r7, #23]
 8007358:	4611      	mov	r1, r2
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	440a      	add	r2, r1
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	75fa      	strb	r2, [r7, #23]
 8007368:	461a      	mov	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	4413      	add	r3, r2
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e8      	bne.n	800734c <USBD_GetString+0x50>
    }
  } 
}
 800737a:	bf00      	nop
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007382:	b480      	push	{r7}
 8007384:	b085      	sub	sp, #20
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 800738e:	e005      	b.n	800739c <USBD_GetLen+0x1a>
    {
        len++;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	3301      	adds	r3, #1
 8007394:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3301      	adds	r3, #1
 800739a:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f5      	bne.n	8007390 <USBD_GetLen+0xe>
    }

    return len;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr

080073b0 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	4613      	mov	r3, r2
 80073bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2202      	movs	r2, #2
 80073c2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80073c6:	88fa      	ldrh	r2, [r7, #6]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 80073cc:	88fa      	ldrh	r2, [r7, #6]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	2100      	movs	r1, #0
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fd33 	bl	8007e44 <USBD_LL_Transmit>
  
  return USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	4613      	mov	r3, r2
 80073f4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	2100      	movs	r1, #0
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 fd21 	bl	8007e44 <USBD_LL_Transmit>
  
  return USBD_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	4613      	mov	r3, r2
 8007418:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2203      	movs	r2, #3
 800741e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800742a:	88fa      	ldrh	r2, [r7, #6]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	2100      	movs	r1, #0
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fd26 	bl	8007e8a <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	2100      	movs	r1, #0
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fd14 	bl	8007e8a <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2204      	movs	r2, #4
 8007478:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800747c:	2300      	movs	r3, #0
 800747e:	2200      	movs	r2, #0
 8007480:	2100      	movs	r1, #0
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fcde 	bl	8007e44 <USBD_LL_Transmit>
  
  return USBD_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2205      	movs	r2, #5
 800749e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80074a2:	2300      	movs	r3, #0
 80074a4:	2200      	movs	r2, #0
 80074a6:	2100      	movs	r1, #0
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fcee 	bl	8007e8a <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074bc:	2200      	movs	r2, #0
 80074be:	4912      	ldr	r1, [pc, #72]	; (8007508 <MX_USB_DEVICE_Init+0x50>)
 80074c0:	4812      	ldr	r0, [pc, #72]	; (800750c <MX_USB_DEVICE_Init+0x54>)
 80074c2:	f7ff f8dd 	bl	8006680 <USBD_Init>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074cc:	f7f9 f852 	bl	8000574 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80074d0:	490f      	ldr	r1, [pc, #60]	; (8007510 <MX_USB_DEVICE_Init+0x58>)
 80074d2:	480e      	ldr	r0, [pc, #56]	; (800750c <MX_USB_DEVICE_Init+0x54>)
 80074d4:	f7ff f8ff 	bl	80066d6 <USBD_RegisterClass>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074de:	f7f9 f849 	bl	8000574 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074e2:	490c      	ldr	r1, [pc, #48]	; (8007514 <MX_USB_DEVICE_Init+0x5c>)
 80074e4:	4809      	ldr	r0, [pc, #36]	; (800750c <MX_USB_DEVICE_Init+0x54>)
 80074e6:	f7ff f835 	bl	8006554 <USBD_CDC_RegisterInterface>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80074f0:	f7f9 f840 	bl	8000574 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074f4:	4805      	ldr	r0, [pc, #20]	; (800750c <MX_USB_DEVICE_Init+0x54>)
 80074f6:	f7ff f907 	bl	8006708 <USBD_Start>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007500:	f7f9 f838 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007504:	bf00      	nop
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20000150 	.word	0x20000150
 800750c:	20000e48 	.word	0x20000e48
 8007510:	20000038 	.word	0x20000038
 8007514:	20000140 	.word	0x20000140

08007518 <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];
bool    rx_full = false;

uint32_t cdcAvailable(void)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 800751e:	4b09      	ldr	r3, [pc, #36]	; (8007544 <cdcAvailable+0x2c>)
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b09      	ldr	r3, [pc, #36]	; (8007548 <cdcAvailable+0x30>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	4a08      	ldr	r2, [pc, #32]	; (800754c <cdcAvailable+0x34>)
 800752a:	6812      	ldr	r2, [r2, #0]
 800752c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007530:	fb02 f201 	mul.w	r2, r2, r1
 8007534:	1a9b      	subs	r3, r3, r2
 8007536:	607b      	str	r3, [r7, #4]

  return ret;
 8007538:	687b      	ldr	r3, [r7, #4]
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr
 8007544:	20000b54 	.word	0x20000b54
 8007548:	20000b58 	.word	0x20000b58
 800754c:	2000013c 	.word	0x2000013c

08007550 <cdcRead>:

uint8_t cdcRead(void)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8007556:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <cdcRead+0x40>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a0e      	ldr	r2, [pc, #56]	; (8007594 <cdcRead+0x44>)
 800755c:	5cd3      	ldrb	r3, [r2, r3]
 800755e:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 8007560:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <cdcRead+0x40>)
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <cdcRead+0x48>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	429a      	cmp	r2, r3
 800756a:	d00b      	beq.n	8007584 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 800756c:	4b08      	ldr	r3, [pc, #32]	; (8007590 <cdcRead+0x40>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3301      	adds	r3, #1
 8007572:	4a0a      	ldr	r2, [pc, #40]	; (800759c <cdcRead+0x4c>)
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	fbb3 f1f2 	udiv	r1, r3, r2
 800757a:	fb02 f201 	mul.w	r2, r2, r1
 800757e:	1a9b      	subs	r3, r3, r2
 8007580:	4a03      	ldr	r2, [pc, #12]	; (8007590 <cdcRead+0x40>)
 8007582:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007584:	79fb      	ldrb	r3, [r7, #7]
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr
 8007590:	20000b58 	.word	0x20000b58
 8007594:	2000183c 	.word	0x2000183c
 8007598:	20000b54 	.word	0x20000b54
 800759c:	2000013c 	.word	0x2000013c

080075a0 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;    // overwrite
 80075aa:	4b0e      	ldr	r3, [pc, #56]	; (80075e4 <cdcDataIn+0x44>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	490e      	ldr	r1, [pc, #56]	; (80075e8 <cdcDataIn+0x48>)
 80075b0:	79fa      	ldrb	r2, [r7, #7]
 80075b2:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <cdcDataIn+0x44>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3301      	adds	r3, #1
 80075ba:	4a0c      	ldr	r2, [pc, #48]	; (80075ec <cdcDataIn+0x4c>)
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	fbb3 f1f2 	udiv	r1, r3, r2
 80075c2:	fb02 f201 	mul.w	r2, r2, r1
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <cdcDataIn+0x50>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d002      	beq.n	80075da <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 80075d4:	4a03      	ldr	r2, [pc, #12]	; (80075e4 <cdcDataIn+0x44>)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6013      	str	r3, [r2, #0]
  }
}
 80075da:	bf00      	nop
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr
 80075e4:	20000b54 	.word	0x20000b54
 80075e8:	2000183c 	.word	0x2000183c
 80075ec:	2000013c 	.word	0x2000013c
 80075f0:	20000b58 	.word	0x20000b58

080075f4 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 80075fe:	f7f8 ff02 	bl	8000406 <millis>
 8007602:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f8ee 	bl	80077ec <CDC_Transmit_FS>
 8007610:	4603      	mov	r3, r0
 8007612:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <cdcWrite+0x2a>
    {
      return length;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	e00e      	b.n	800763c <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 800761e:	7afb      	ldrb	r3, [r7, #11]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d101      	bne.n	8007628 <cdcWrite+0x34>
    {
      return 0;
 8007624:	2300      	movs	r3, #0
 8007626:	e009      	b.n	800763c <cdcWrite+0x48>
    }

    if(millis() - pre_time >= 100)    // time out handling.
 8007628:	f7f8 feed 	bl	8000406 <millis>
 800762c:	4602      	mov	r2, r0
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b63      	cmp	r3, #99	; 0x63
 8007634:	d800      	bhi.n	8007638 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8007636:	e7e5      	b.n	8007604 <cdcWrite+0x10>
    {
      break;
 8007638:	bf00      	nop
    }
  }
  return 0;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USB_CDC_SOF>:
{
  return LineCoding.bitrate;
}

uint8_t USB_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 8007644:	b590      	push	{r4, r7, lr}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]

  if(rx_full == true)
 800764c:	4b0c      	ldr	r3, [pc, #48]	; (8007680 <USB_CDC_SOF+0x3c>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d010      	beq.n	8007676 <USB_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    /* amount of empty space in receive buffer */
    buf_len = (rx_len - cdcAvailable()) - 1;
 8007654:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <USB_CDC_SOF+0x40>)
 8007656:	681c      	ldr	r4, [r3, #0]
 8007658:	f7ff ff5e 	bl	8007518 <cdcAvailable>
 800765c:	4603      	mov	r3, r0
 800765e:	1ae3      	subs	r3, r4, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b3f      	cmp	r3, #63	; 0x3f
 8007668:	d905      	bls.n	8007676 <USB_CDC_SOF+0x32>
    {
      /* Allow next data transmission */
      USBD_CDC_ReceivePacket(pdev);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fe ffde 	bl	800662c <USBD_CDC_ReceivePacket>
      rx_full = false;
 8007670:	4b03      	ldr	r3, [pc, #12]	; (8007680 <USB_CDC_SOF+0x3c>)
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]
    }
  }


  return 0;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	bd90      	pop	{r4, r7, pc}
 8007680:	20000b5c 	.word	0x20000b5c
 8007684:	2000013c 	.word	0x2000013c

08007688 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800768c:	2200      	movs	r2, #0
 800768e:	4905      	ldr	r1, [pc, #20]	; (80076a4 <CDC_Init_FS+0x1c>)
 8007690:	4805      	ldr	r0, [pc, #20]	; (80076a8 <CDC_Init_FS+0x20>)
 8007692:	f7fe ff75 	bl	8006580 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007696:	4905      	ldr	r1, [pc, #20]	; (80076ac <CDC_Init_FS+0x24>)
 8007698:	4803      	ldr	r0, [pc, #12]	; (80076a8 <CDC_Init_FS+0x20>)
 800769a:	f7fe ff8a 	bl	80065b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800769e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20001454 	.word	0x20001454
 80076a8:	20000e48 	.word	0x20000e48
 80076ac:	2000106c 	.word	0x2000106c

080076b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr
	...

080076c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	6039      	str	r1, [r7, #0]
 80076ca:	71fb      	strb	r3, [r7, #7]
 80076cc:	4613      	mov	r3, r2
 80076ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076d0:	79fb      	ldrb	r3, [r7, #7]
 80076d2:	2b23      	cmp	r3, #35	; 0x23
 80076d4:	d84a      	bhi.n	800776c <CDC_Control_FS+0xac>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <CDC_Control_FS+0x1c>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	0800776d 	.word	0x0800776d
 80076e0:	0800776d 	.word	0x0800776d
 80076e4:	0800776d 	.word	0x0800776d
 80076e8:	0800776d 	.word	0x0800776d
 80076ec:	0800776d 	.word	0x0800776d
 80076f0:	0800776d 	.word	0x0800776d
 80076f4:	0800776d 	.word	0x0800776d
 80076f8:	0800776d 	.word	0x0800776d
 80076fc:	0800776d 	.word	0x0800776d
 8007700:	0800776d 	.word	0x0800776d
 8007704:	0800776d 	.word	0x0800776d
 8007708:	0800776d 	.word	0x0800776d
 800770c:	0800776d 	.word	0x0800776d
 8007710:	0800776d 	.word	0x0800776d
 8007714:	0800776d 	.word	0x0800776d
 8007718:	0800776d 	.word	0x0800776d
 800771c:	0800776d 	.word	0x0800776d
 8007720:	0800776d 	.word	0x0800776d
 8007724:	0800776d 	.word	0x0800776d
 8007728:	0800776d 	.word	0x0800776d
 800772c:	0800776d 	.word	0x0800776d
 8007730:	0800776d 	.word	0x0800776d
 8007734:	0800776d 	.word	0x0800776d
 8007738:	0800776d 	.word	0x0800776d
 800773c:	0800776d 	.word	0x0800776d
 8007740:	0800776d 	.word	0x0800776d
 8007744:	0800776d 	.word	0x0800776d
 8007748:	0800776d 	.word	0x0800776d
 800774c:	0800776d 	.word	0x0800776d
 8007750:	0800776d 	.word	0x0800776d
 8007754:	0800776d 	.word	0x0800776d
 8007758:	0800776d 	.word	0x0800776d
 800775c:	0800776d 	.word	0x0800776d
 8007760:	0800776d 	.word	0x0800776d
 8007764:	0800776d 	.word	0x0800776d
 8007768:	0800776d 	.word	0x0800776d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800776c:	bf00      	nop
  }

  return (USBD_OK);
 800776e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	bc80      	pop	{r7}
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop

0800777c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800777c:	b590      	push	{r4, r7, lr}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t buf_len;


  for(int i=0; i<*Len; i++)
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	e009      	b.n	80077a0 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	4618      	mov	r0, r3
 8007796:	f7ff ff03 	bl	80075a0 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3301      	adds	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d8f0      	bhi.n	800778c <CDC_Receive_FS+0x10>
  }

  /* amount of empty space in receive buffer */
  buf_len = (rx_len - cdcAvailable()) - 1;
 80077aa:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <CDC_Receive_FS+0x64>)
 80077ac:	681c      	ldr	r4, [r3, #0]
 80077ae:	f7ff feb3 	bl	8007518 <cdcAvailable>
 80077b2:	4603      	mov	r3, r0
 80077b4:	1ae3      	subs	r3, r4, r3
 80077b6:	3b01      	subs	r3, #1
 80077b8:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b3f      	cmp	r3, #63	; 0x3f
 80077be:	d907      	bls.n	80077d0 <CDC_Receive_FS+0x54>
  {
    /* Allow next data transmission */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4808      	ldr	r0, [pc, #32]	; (80077e4 <CDC_Receive_FS+0x68>)
 80077c4:	f7fe fef5 	bl	80065b2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077c8:	4806      	ldr	r0, [pc, #24]	; (80077e4 <CDC_Receive_FS+0x68>)
 80077ca:	f7fe ff2f 	bl	800662c <USBD_CDC_ReceivePacket>
 80077ce:	e002      	b.n	80077d6 <CDC_Receive_FS+0x5a>
  }
  else
  {
    /* wait as the insufficient buffer capacity */
    rx_full = true;
 80077d0:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <CDC_Receive_FS+0x6c>)
 80077d2:	2201      	movs	r2, #1
 80077d4:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 80077d6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd90      	pop	{r4, r7, pc}
 80077e0:	2000013c 	.word	0x2000013c
 80077e4:	20000e48 	.word	0x20000e48
 80077e8:	20000b5c 	.word	0x20000b5c

080077ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80077fc:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <CDC_Transmit_FS+0x48>)
 80077fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007802:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800780e:	2301      	movs	r3, #1
 8007810:	e00b      	b.n	800782a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007812:	887b      	ldrh	r3, [r7, #2]
 8007814:	461a      	mov	r2, r3
 8007816:	6879      	ldr	r1, [r7, #4]
 8007818:	4806      	ldr	r0, [pc, #24]	; (8007834 <CDC_Transmit_FS+0x48>)
 800781a:	f7fe feb1 	bl	8006580 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800781e:	4805      	ldr	r0, [pc, #20]	; (8007834 <CDC_Transmit_FS+0x48>)
 8007820:	f7fe feda 	bl	80065d8 <USBD_CDC_TransmitPacket>
 8007824:	4603      	mov	r3, r0
 8007826:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000e48 	.word	0x20000e48

08007838 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	6039      	str	r1, [r7, #0]
 8007842:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2212      	movs	r2, #18
 8007848:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800784a:	4b03      	ldr	r3, [pc, #12]	; (8007858 <USBD_FS_DeviceDescriptor+0x20>)
}
 800784c:	4618      	mov	r0, r3
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	bc80      	pop	{r7}
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	2000016c 	.word	0x2000016c

0800785c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	6039      	str	r1, [r7, #0]
 8007866:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2204      	movs	r2, #4
 800786c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800786e:	4b03      	ldr	r3, [pc, #12]	; (800787c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	20000180 	.word	0x20000180

08007880 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	6039      	str	r1, [r7, #0]
 800788a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d105      	bne.n	800789e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	4907      	ldr	r1, [pc, #28]	; (80078b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007896:	4808      	ldr	r0, [pc, #32]	; (80078b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007898:	f7ff fd30 	bl	80072fc <USBD_GetString>
 800789c:	e004      	b.n	80078a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	4904      	ldr	r1, [pc, #16]	; (80078b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80078a2:	4805      	ldr	r0, [pc, #20]	; (80078b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80078a4:	f7ff fd2a 	bl	80072fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80078a8:	4b02      	ldr	r3, [pc, #8]	; (80078b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20001a3c 	.word	0x20001a3c
 80078b8:	08008f54 	.word	0x08008f54

080078bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	6039      	str	r1, [r7, #0]
 80078c6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	4904      	ldr	r1, [pc, #16]	; (80078dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80078cc:	4804      	ldr	r0, [pc, #16]	; (80078e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80078ce:	f7ff fd15 	bl	80072fc <USBD_GetString>
  return USBD_StrDesc;
 80078d2:	4b02      	ldr	r3, [pc, #8]	; (80078dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	20001a3c 	.word	0x20001a3c
 80078e0:	08008f6c 	.word	0x08008f6c

080078e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	6039      	str	r1, [r7, #0]
 80078ee:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	221a      	movs	r2, #26
 80078f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80078f6:	f000 f843 	bl	8007980 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 80078fa:	4b02      	ldr	r3, [pc, #8]	; (8007904 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000184 	.word	0x20000184

08007908 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	6039      	str	r1, [r7, #0]
 8007912:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d105      	bne.n	8007926 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	4907      	ldr	r1, [pc, #28]	; (800793c <USBD_FS_ConfigStrDescriptor+0x34>)
 800791e:	4808      	ldr	r0, [pc, #32]	; (8007940 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007920:	f7ff fcec 	bl	80072fc <USBD_GetString>
 8007924:	e004      	b.n	8007930 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	4904      	ldr	r1, [pc, #16]	; (800793c <USBD_FS_ConfigStrDescriptor+0x34>)
 800792a:	4805      	ldr	r0, [pc, #20]	; (8007940 <USBD_FS_ConfigStrDescriptor+0x38>)
 800792c:	f7ff fce6 	bl	80072fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007930:	4b02      	ldr	r3, [pc, #8]	; (800793c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007932:	4618      	mov	r0, r3
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20001a3c 	.word	0x20001a3c
 8007940:	08008f80 	.word	0x08008f80

08007944 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d105      	bne.n	8007962 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	4907      	ldr	r1, [pc, #28]	; (8007978 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800795a:	4808      	ldr	r0, [pc, #32]	; (800797c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800795c:	f7ff fcce 	bl	80072fc <USBD_GetString>
 8007960:	e004      	b.n	800796c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	4904      	ldr	r1, [pc, #16]	; (8007978 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007966:	4805      	ldr	r0, [pc, #20]	; (800797c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007968:	f7ff fcc8 	bl	80072fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800796c:	4b02      	ldr	r3, [pc, #8]	; (8007978 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20001a3c 	.word	0x20001a3c
 800797c:	08008f8c 	.word	0x08008f8c

08007980 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <Get_SerialNum+0x44>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800798c:	4b0e      	ldr	r3, [pc, #56]	; (80079c8 <Get_SerialNum+0x48>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007992:	4b0e      	ldr	r3, [pc, #56]	; (80079cc <Get_SerialNum+0x4c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4413      	add	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d009      	beq.n	80079ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079a6:	2208      	movs	r2, #8
 80079a8:	4909      	ldr	r1, [pc, #36]	; (80079d0 <Get_SerialNum+0x50>)
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f814 	bl	80079d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079b0:	2204      	movs	r2, #4
 80079b2:	4908      	ldr	r1, [pc, #32]	; (80079d4 <Get_SerialNum+0x54>)
 80079b4:	68b8      	ldr	r0, [r7, #8]
 80079b6:	f000 f80f 	bl	80079d8 <IntToUnicode>
  }
}
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	1ffff7e8 	.word	0x1ffff7e8
 80079c8:	1ffff7ec 	.word	0x1ffff7ec
 80079cc:	1ffff7f0 	.word	0x1ffff7f0
 80079d0:	20000186 	.word	0x20000186
 80079d4:	20000196 	.word	0x20000196

080079d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	4613      	mov	r3, r2
 80079e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80079ea:	2300      	movs	r3, #0
 80079ec:	75fb      	strb	r3, [r7, #23]
 80079ee:	e027      	b.n	8007a40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	0f1b      	lsrs	r3, r3, #28
 80079f4:	2b09      	cmp	r3, #9
 80079f6:	d80b      	bhi.n	8007a10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	0f1b      	lsrs	r3, r3, #28
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	4619      	mov	r1, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	440b      	add	r3, r1
 8007a08:	3230      	adds	r2, #48	; 0x30
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e00a      	b.n	8007a26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	0f1b      	lsrs	r3, r3, #28
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	440b      	add	r3, r1
 8007a20:	3237      	adds	r2, #55	; 0x37
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	011b      	lsls	r3, r3, #4
 8007a2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
 8007a2e:	005b      	lsls	r3, r3, #1
 8007a30:	3301      	adds	r3, #1
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	4413      	add	r3, r2
 8007a36:	2200      	movs	r2, #0
 8007a38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	75fb      	strb	r3, [r7, #23]
 8007a40:	7dfa      	ldrb	r2, [r7, #23]
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d3d3      	bcc.n	80079f0 <IntToUnicode+0x18>
  }
}
 8007a48:	bf00      	nop
 8007a4a:	371c      	adds	r7, #28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bc80      	pop	{r7}
 8007a50:	4770      	bx	lr
	...

08007a54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a0d      	ldr	r2, [pc, #52]	; (8007a98 <HAL_PCD_MspInit+0x44>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d113      	bne.n	8007a8e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007a66:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <HAL_PCD_MspInit+0x48>)
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	4a0c      	ldr	r2, [pc, #48]	; (8007a9c <HAL_PCD_MspInit+0x48>)
 8007a6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a70:	61d3      	str	r3, [r2, #28]
 8007a72:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <HAL_PCD_MspInit+0x48>)
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	2014      	movs	r0, #20
 8007a84:	f7f9 fd47 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007a88:	2014      	movs	r0, #20
 8007a8a:	f7f9 fd60 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007a8e:	bf00      	nop
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	40005c00 	.word	0x40005c00
 8007a9c:	40021000 	.word	0x40021000

08007aa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f7fe fe6e 	bl	8006798 <USBD_LL_SetupStage>
}
 8007abc:	bf00      	nop
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	015b      	lsls	r3, r3, #5
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f7fe fea0 	bl	800682c <USBD_LL_DataOutStage>
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	015b      	lsls	r3, r3, #5
 8007b0c:	4413      	add	r3, r2
 8007b0e:	333c      	adds	r3, #60	; 0x3c
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	4619      	mov	r1, r3
 8007b16:	f7fe fee4 	bl	80068e2 <USBD_LL_DataInStage>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fe ffc7 	bl	8006ac4 <USBD_LL_SOF>
}
 8007b36:	bf00      	nop
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b46:	2301      	movs	r3, #1
 8007b48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d001      	beq.n	8007b56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b52:	f7f8 fd0f 	bl	8000574 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8007b5c:	7bfa      	ldrb	r2, [r7, #15]
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe ff7c 	bl	8006a5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fe ff47 	bl	8006a00 <USBD_LL_Reset>
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe ff76 	bl	8006a7c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b98:	4b04      	ldr	r3, [pc, #16]	; (8007bac <HAL_PCD_SuspendCallback+0x30>)
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	4a03      	ldr	r2, [pc, #12]	; (8007bac <HAL_PCD_SuspendCallback+0x30>)
 8007b9e:	f043 0306 	orr.w	r3, r3, #6
 8007ba2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	e000ed00 	.word	0xe000ed00

08007bb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe ff70 	bl	8006aa4 <USBD_LL_Resume>
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007bd4:	4a28      	ldr	r2, [pc, #160]	; (8007c78 <USBD_LL_Init+0xac>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a26      	ldr	r2, [pc, #152]	; (8007c78 <USBD_LL_Init+0xac>)
 8007be0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8007be4:	4b24      	ldr	r3, [pc, #144]	; (8007c78 <USBD_LL_Init+0xac>)
 8007be6:	4a25      	ldr	r2, [pc, #148]	; (8007c7c <USBD_LL_Init+0xb0>)
 8007be8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007bea:	4b23      	ldr	r3, [pc, #140]	; (8007c78 <USBD_LL_Init+0xac>)
 8007bec:	2208      	movs	r2, #8
 8007bee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007bf0:	4b21      	ldr	r3, [pc, #132]	; (8007c78 <USBD_LL_Init+0xac>)
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007bf6:	4b20      	ldr	r3, [pc, #128]	; (8007c78 <USBD_LL_Init+0xac>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007bfc:	4b1e      	ldr	r3, [pc, #120]	; (8007c78 <USBD_LL_Init+0xac>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c02:	4b1d      	ldr	r3, [pc, #116]	; (8007c78 <USBD_LL_Init+0xac>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c08:	481b      	ldr	r0, [pc, #108]	; (8007c78 <USBD_LL_Init+0xac>)
 8007c0a:	f7fa fdf2 	bl	80027f2 <HAL_PCD_Init>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007c14:	f7f8 fcae 	bl	8000574 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007c1e:	2318      	movs	r3, #24
 8007c20:	2200      	movs	r2, #0
 8007c22:	2100      	movs	r1, #0
 8007c24:	f7fb fcfa 	bl	800361c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007c2e:	2358      	movs	r3, #88	; 0x58
 8007c30:	2200      	movs	r2, #0
 8007c32:	2180      	movs	r1, #128	; 0x80
 8007c34:	f7fb fcf2 	bl	800361c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007c3e:	23c0      	movs	r3, #192	; 0xc0
 8007c40:	2200      	movs	r2, #0
 8007c42:	2181      	movs	r1, #129	; 0x81
 8007c44:	f7fb fcea 	bl	800361c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007c4e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007c52:	2200      	movs	r2, #0
 8007c54:	2101      	movs	r1, #1
 8007c56:	f7fb fce1 	bl	800361c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c64:	2200      	movs	r2, #0
 8007c66:	2182      	movs	r1, #130	; 0x82
 8007c68:	f7fb fcd8 	bl	800361c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20001c3c 	.word	0x20001c3c
 8007c7c:	40005c00 	.word	0x40005c00

08007c80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fa fe85 	bl	80029a6 <HAL_PCD_Start>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 f948 	bl	8007f38 <USBD_Get_USB_Status>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	4608      	mov	r0, r1
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	70fb      	strb	r3, [r7, #3]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70bb      	strb	r3, [r7, #2]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007cde:	78bb      	ldrb	r3, [r7, #2]
 8007ce0:	883a      	ldrh	r2, [r7, #0]
 8007ce2:	78f9      	ldrb	r1, [r7, #3]
 8007ce4:	f7fa ffac 	bl	8002c40 <HAL_PCD_EP_Open>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f922 	bl	8007f38 <USBD_Get_USB_Status>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fa ffe2 	bl	8002cea <HAL_PCD_EP_Close>
 8007d26:	4603      	mov	r3, r0
 8007d28:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 f903 	bl	8007f38 <USBD_Get_USB_Status>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007d5a:	78fa      	ldrb	r2, [r7, #3]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fb f895 	bl	8002e8e <HAL_PCD_EP_SetStall>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 f8e4 	bl	8007f38 <USBD_Get_USB_Status>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007d98:	78fa      	ldrb	r2, [r7, #3]
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fb f8cb 	bl	8002f38 <HAL_PCD_EP_ClrStall>
 8007da2:	4603      	mov	r3, r0
 8007da4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f8c5 	bl	8007f38 <USBD_Get_USB_Status>
 8007dae:	4603      	mov	r3, r0
 8007db0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007dce:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	da08      	bge.n	8007dea <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	015b      	lsls	r3, r3, #5
 8007de2:	4413      	add	r3, r2
 8007de4:	332a      	adds	r3, #42	; 0x2a
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	e008      	b.n	8007dfc <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	015b      	lsls	r3, r3, #5
 8007df4:	4413      	add	r3, r2
 8007df6:	f203 232a 	addw	r3, r3, #554	; 0x22a
 8007dfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr

08007e06 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007e20:	78fa      	ldrb	r2, [r7, #3]
 8007e22:	4611      	mov	r1, r2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fa fee6 	bl	8002bf6 <HAL_PCD_SetAddress>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 f881 	bl	8007f38 <USBD_Get_USB_Status>
 8007e36:	4603      	mov	r3, r0
 8007e38:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	607a      	str	r2, [r7, #4]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	460b      	mov	r3, r1
 8007e52:	72fb      	strb	r3, [r7, #11]
 8007e54:	4613      	mov	r3, r2
 8007e56:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007e66:	893b      	ldrh	r3, [r7, #8]
 8007e68:	7af9      	ldrb	r1, [r7, #11]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	f7fa ffd4 	bl	8002e18 <HAL_PCD_EP_Transmit>
 8007e70:	4603      	mov	r3, r0
 8007e72:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f85e 	bl	8007f38 <USBD_Get_USB_Status>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007e80:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b086      	sub	sp, #24
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	461a      	mov	r2, r3
 8007e96:	460b      	mov	r3, r1
 8007e98:	72fb      	strb	r3, [r7, #11]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007eac:	893b      	ldrh	r3, [r7, #8]
 8007eae:	7af9      	ldrb	r1, [r7, #11]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	f7fa ff60 	bl	8002d76 <HAL_PCD_EP_Receive>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 f83b 	bl	8007f38 <USBD_Get_USB_Status>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007ec6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007ee2:	78fa      	ldrb	r2, [r7, #3]
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fa ff81 	bl	8002dee <HAL_PCD_EP_GetRxCount>
 8007eec:	4603      	mov	r3, r0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f00:	4b02      	ldr	r3, [pc, #8]	; (8007f0c <USBD_static_malloc+0x14>)
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr
 8007f0c:	20000b60 	.word	0x20000b60

08007f10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]

}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr

08007f22 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr

08007f38 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d817      	bhi.n	8007f7c <USBD_Get_USB_Status+0x44>
 8007f4c:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <USBD_Get_USB_Status+0x1c>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	08007f65 	.word	0x08007f65
 8007f58:	08007f6b 	.word	0x08007f6b
 8007f5c:	08007f71 	.word	0x08007f71
 8007f60:	08007f77 	.word	0x08007f77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
    break;
 8007f68:	e00b      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f6e:	e008      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f70:	2301      	movs	r3, #1
 8007f72:	73fb      	strb	r3, [r7, #15]
    break;
 8007f74:	e005      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f76:	2302      	movs	r3, #2
 8007f78:	73fb      	strb	r3, [r7, #15]
    break;
 8007f7a:	e002      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f80:	bf00      	nop
  }
  return usb_status;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop

08007f90 <main>:
 */

#include "main.h"

int main(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  hwInit();
 8007f94:	f7f9 f93c 	bl	8001210 <hwInit>
  apInit();
 8007f98:	f7f8 f944 	bl	8000224 <apInit>

  apMain();
 8007f9c:	f7f8 f950 	bl	8000240 <apMain>

  return 0;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <__errno>:
 8007fa8:	4b01      	ldr	r3, [pc, #4]	; (8007fb0 <__errno+0x8>)
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	200001a0 	.word	0x200001a0

08007fb4 <__libc_init_array>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	2500      	movs	r5, #0
 8007fb8:	4e0c      	ldr	r6, [pc, #48]	; (8007fec <__libc_init_array+0x38>)
 8007fba:	4c0d      	ldr	r4, [pc, #52]	; (8007ff0 <__libc_init_array+0x3c>)
 8007fbc:	1ba4      	subs	r4, r4, r6
 8007fbe:	10a4      	asrs	r4, r4, #2
 8007fc0:	42a5      	cmp	r5, r4
 8007fc2:	d109      	bne.n	8007fd8 <__libc_init_array+0x24>
 8007fc4:	f000 ff74 	bl	8008eb0 <_init>
 8007fc8:	2500      	movs	r5, #0
 8007fca:	4e0a      	ldr	r6, [pc, #40]	; (8007ff4 <__libc_init_array+0x40>)
 8007fcc:	4c0a      	ldr	r4, [pc, #40]	; (8007ff8 <__libc_init_array+0x44>)
 8007fce:	1ba4      	subs	r4, r4, r6
 8007fd0:	10a4      	asrs	r4, r4, #2
 8007fd2:	42a5      	cmp	r5, r4
 8007fd4:	d105      	bne.n	8007fe2 <__libc_init_array+0x2e>
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fdc:	4798      	blx	r3
 8007fde:	3501      	adds	r5, #1
 8007fe0:	e7ee      	b.n	8007fc0 <__libc_init_array+0xc>
 8007fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fe6:	4798      	blx	r3
 8007fe8:	3501      	adds	r5, #1
 8007fea:	e7f2      	b.n	8007fd2 <__libc_init_array+0x1e>
 8007fec:	0800904c 	.word	0x0800904c
 8007ff0:	0800904c 	.word	0x0800904c
 8007ff4:	0800904c 	.word	0x0800904c
 8007ff8:	08009050 	.word	0x08009050

08007ffc <memset>:
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4402      	add	r2, r0
 8008000:	4293      	cmp	r3, r2
 8008002:	d100      	bne.n	8008006 <memset+0xa>
 8008004:	4770      	bx	lr
 8008006:	f803 1b01 	strb.w	r1, [r3], #1
 800800a:	e7f9      	b.n	8008000 <memset+0x4>

0800800c <iprintf>:
 800800c:	b40f      	push	{r0, r1, r2, r3}
 800800e:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <iprintf+0x2c>)
 8008010:	b513      	push	{r0, r1, r4, lr}
 8008012:	681c      	ldr	r4, [r3, #0]
 8008014:	b124      	cbz	r4, 8008020 <iprintf+0x14>
 8008016:	69a3      	ldr	r3, [r4, #24]
 8008018:	b913      	cbnz	r3, 8008020 <iprintf+0x14>
 800801a:	4620      	mov	r0, r4
 800801c:	f000 fa22 	bl	8008464 <__sinit>
 8008020:	ab05      	add	r3, sp, #20
 8008022:	9a04      	ldr	r2, [sp, #16]
 8008024:	68a1      	ldr	r1, [r4, #8]
 8008026:	4620      	mov	r0, r4
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	f000 fbd7 	bl	80087dc <_vfiprintf_r>
 800802e:	b002      	add	sp, #8
 8008030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008034:	b004      	add	sp, #16
 8008036:	4770      	bx	lr
 8008038:	200001a0 	.word	0x200001a0

0800803c <_puts_r>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	460e      	mov	r6, r1
 8008040:	4605      	mov	r5, r0
 8008042:	b118      	cbz	r0, 800804c <_puts_r+0x10>
 8008044:	6983      	ldr	r3, [r0, #24]
 8008046:	b90b      	cbnz	r3, 800804c <_puts_r+0x10>
 8008048:	f000 fa0c 	bl	8008464 <__sinit>
 800804c:	69ab      	ldr	r3, [r5, #24]
 800804e:	68ac      	ldr	r4, [r5, #8]
 8008050:	b913      	cbnz	r3, 8008058 <_puts_r+0x1c>
 8008052:	4628      	mov	r0, r5
 8008054:	f000 fa06 	bl	8008464 <__sinit>
 8008058:	4b23      	ldr	r3, [pc, #140]	; (80080e8 <_puts_r+0xac>)
 800805a:	429c      	cmp	r4, r3
 800805c:	d117      	bne.n	800808e <_puts_r+0x52>
 800805e:	686c      	ldr	r4, [r5, #4]
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	071b      	lsls	r3, r3, #28
 8008064:	d51d      	bpl.n	80080a2 <_puts_r+0x66>
 8008066:	6923      	ldr	r3, [r4, #16]
 8008068:	b1db      	cbz	r3, 80080a2 <_puts_r+0x66>
 800806a:	3e01      	subs	r6, #1
 800806c:	68a3      	ldr	r3, [r4, #8]
 800806e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008072:	3b01      	subs	r3, #1
 8008074:	60a3      	str	r3, [r4, #8]
 8008076:	b9e9      	cbnz	r1, 80080b4 <_puts_r+0x78>
 8008078:	2b00      	cmp	r3, #0
 800807a:	da2e      	bge.n	80080da <_puts_r+0x9e>
 800807c:	4622      	mov	r2, r4
 800807e:	210a      	movs	r1, #10
 8008080:	4628      	mov	r0, r5
 8008082:	f000 f83f 	bl	8008104 <__swbuf_r>
 8008086:	3001      	adds	r0, #1
 8008088:	d011      	beq.n	80080ae <_puts_r+0x72>
 800808a:	200a      	movs	r0, #10
 800808c:	e011      	b.n	80080b2 <_puts_r+0x76>
 800808e:	4b17      	ldr	r3, [pc, #92]	; (80080ec <_puts_r+0xb0>)
 8008090:	429c      	cmp	r4, r3
 8008092:	d101      	bne.n	8008098 <_puts_r+0x5c>
 8008094:	68ac      	ldr	r4, [r5, #8]
 8008096:	e7e3      	b.n	8008060 <_puts_r+0x24>
 8008098:	4b15      	ldr	r3, [pc, #84]	; (80080f0 <_puts_r+0xb4>)
 800809a:	429c      	cmp	r4, r3
 800809c:	bf08      	it	eq
 800809e:	68ec      	ldreq	r4, [r5, #12]
 80080a0:	e7de      	b.n	8008060 <_puts_r+0x24>
 80080a2:	4621      	mov	r1, r4
 80080a4:	4628      	mov	r0, r5
 80080a6:	f000 f87f 	bl	80081a8 <__swsetup_r>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d0dd      	beq.n	800806a <_puts_r+0x2e>
 80080ae:	f04f 30ff 	mov.w	r0, #4294967295
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	da04      	bge.n	80080c2 <_puts_r+0x86>
 80080b8:	69a2      	ldr	r2, [r4, #24]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	dc06      	bgt.n	80080cc <_puts_r+0x90>
 80080be:	290a      	cmp	r1, #10
 80080c0:	d004      	beq.n	80080cc <_puts_r+0x90>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	7019      	strb	r1, [r3, #0]
 80080ca:	e7cf      	b.n	800806c <_puts_r+0x30>
 80080cc:	4622      	mov	r2, r4
 80080ce:	4628      	mov	r0, r5
 80080d0:	f000 f818 	bl	8008104 <__swbuf_r>
 80080d4:	3001      	adds	r0, #1
 80080d6:	d1c9      	bne.n	800806c <_puts_r+0x30>
 80080d8:	e7e9      	b.n	80080ae <_puts_r+0x72>
 80080da:	200a      	movs	r0, #10
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	6022      	str	r2, [r4, #0]
 80080e2:	7018      	strb	r0, [r3, #0]
 80080e4:	e7e5      	b.n	80080b2 <_puts_r+0x76>
 80080e6:	bf00      	nop
 80080e8:	08008fd8 	.word	0x08008fd8
 80080ec:	08008ff8 	.word	0x08008ff8
 80080f0:	08008fb8 	.word	0x08008fb8

080080f4 <puts>:
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <puts+0xc>)
 80080f6:	4601      	mov	r1, r0
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	f7ff bf9f 	b.w	800803c <_puts_r>
 80080fe:	bf00      	nop
 8008100:	200001a0 	.word	0x200001a0

08008104 <__swbuf_r>:
 8008104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008106:	460e      	mov	r6, r1
 8008108:	4614      	mov	r4, r2
 800810a:	4605      	mov	r5, r0
 800810c:	b118      	cbz	r0, 8008116 <__swbuf_r+0x12>
 800810e:	6983      	ldr	r3, [r0, #24]
 8008110:	b90b      	cbnz	r3, 8008116 <__swbuf_r+0x12>
 8008112:	f000 f9a7 	bl	8008464 <__sinit>
 8008116:	4b21      	ldr	r3, [pc, #132]	; (800819c <__swbuf_r+0x98>)
 8008118:	429c      	cmp	r4, r3
 800811a:	d12a      	bne.n	8008172 <__swbuf_r+0x6e>
 800811c:	686c      	ldr	r4, [r5, #4]
 800811e:	69a3      	ldr	r3, [r4, #24]
 8008120:	60a3      	str	r3, [r4, #8]
 8008122:	89a3      	ldrh	r3, [r4, #12]
 8008124:	071a      	lsls	r2, r3, #28
 8008126:	d52e      	bpl.n	8008186 <__swbuf_r+0x82>
 8008128:	6923      	ldr	r3, [r4, #16]
 800812a:	b363      	cbz	r3, 8008186 <__swbuf_r+0x82>
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	6820      	ldr	r0, [r4, #0]
 8008130:	b2f6      	uxtb	r6, r6
 8008132:	1ac0      	subs	r0, r0, r3
 8008134:	6963      	ldr	r3, [r4, #20]
 8008136:	4637      	mov	r7, r6
 8008138:	4283      	cmp	r3, r0
 800813a:	dc04      	bgt.n	8008146 <__swbuf_r+0x42>
 800813c:	4621      	mov	r1, r4
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f926 	bl	8008390 <_fflush_r>
 8008144:	bb28      	cbnz	r0, 8008192 <__swbuf_r+0x8e>
 8008146:	68a3      	ldr	r3, [r4, #8]
 8008148:	3001      	adds	r0, #1
 800814a:	3b01      	subs	r3, #1
 800814c:	60a3      	str	r3, [r4, #8]
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	6022      	str	r2, [r4, #0]
 8008154:	701e      	strb	r6, [r3, #0]
 8008156:	6963      	ldr	r3, [r4, #20]
 8008158:	4283      	cmp	r3, r0
 800815a:	d004      	beq.n	8008166 <__swbuf_r+0x62>
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	07db      	lsls	r3, r3, #31
 8008160:	d519      	bpl.n	8008196 <__swbuf_r+0x92>
 8008162:	2e0a      	cmp	r6, #10
 8008164:	d117      	bne.n	8008196 <__swbuf_r+0x92>
 8008166:	4621      	mov	r1, r4
 8008168:	4628      	mov	r0, r5
 800816a:	f000 f911 	bl	8008390 <_fflush_r>
 800816e:	b190      	cbz	r0, 8008196 <__swbuf_r+0x92>
 8008170:	e00f      	b.n	8008192 <__swbuf_r+0x8e>
 8008172:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <__swbuf_r+0x9c>)
 8008174:	429c      	cmp	r4, r3
 8008176:	d101      	bne.n	800817c <__swbuf_r+0x78>
 8008178:	68ac      	ldr	r4, [r5, #8]
 800817a:	e7d0      	b.n	800811e <__swbuf_r+0x1a>
 800817c:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <__swbuf_r+0xa0>)
 800817e:	429c      	cmp	r4, r3
 8008180:	bf08      	it	eq
 8008182:	68ec      	ldreq	r4, [r5, #12]
 8008184:	e7cb      	b.n	800811e <__swbuf_r+0x1a>
 8008186:	4621      	mov	r1, r4
 8008188:	4628      	mov	r0, r5
 800818a:	f000 f80d 	bl	80081a8 <__swsetup_r>
 800818e:	2800      	cmp	r0, #0
 8008190:	d0cc      	beq.n	800812c <__swbuf_r+0x28>
 8008192:	f04f 37ff 	mov.w	r7, #4294967295
 8008196:	4638      	mov	r0, r7
 8008198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800819a:	bf00      	nop
 800819c:	08008fd8 	.word	0x08008fd8
 80081a0:	08008ff8 	.word	0x08008ff8
 80081a4:	08008fb8 	.word	0x08008fb8

080081a8 <__swsetup_r>:
 80081a8:	4b32      	ldr	r3, [pc, #200]	; (8008274 <__swsetup_r+0xcc>)
 80081aa:	b570      	push	{r4, r5, r6, lr}
 80081ac:	681d      	ldr	r5, [r3, #0]
 80081ae:	4606      	mov	r6, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	b125      	cbz	r5, 80081be <__swsetup_r+0x16>
 80081b4:	69ab      	ldr	r3, [r5, #24]
 80081b6:	b913      	cbnz	r3, 80081be <__swsetup_r+0x16>
 80081b8:	4628      	mov	r0, r5
 80081ba:	f000 f953 	bl	8008464 <__sinit>
 80081be:	4b2e      	ldr	r3, [pc, #184]	; (8008278 <__swsetup_r+0xd0>)
 80081c0:	429c      	cmp	r4, r3
 80081c2:	d10f      	bne.n	80081e4 <__swsetup_r+0x3c>
 80081c4:	686c      	ldr	r4, [r5, #4]
 80081c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	0715      	lsls	r5, r2, #28
 80081ce:	d42c      	bmi.n	800822a <__swsetup_r+0x82>
 80081d0:	06d0      	lsls	r0, r2, #27
 80081d2:	d411      	bmi.n	80081f8 <__swsetup_r+0x50>
 80081d4:	2209      	movs	r2, #9
 80081d6:	6032      	str	r2, [r6, #0]
 80081d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081dc:	81a3      	strh	r3, [r4, #12]
 80081de:	f04f 30ff 	mov.w	r0, #4294967295
 80081e2:	e03e      	b.n	8008262 <__swsetup_r+0xba>
 80081e4:	4b25      	ldr	r3, [pc, #148]	; (800827c <__swsetup_r+0xd4>)
 80081e6:	429c      	cmp	r4, r3
 80081e8:	d101      	bne.n	80081ee <__swsetup_r+0x46>
 80081ea:	68ac      	ldr	r4, [r5, #8]
 80081ec:	e7eb      	b.n	80081c6 <__swsetup_r+0x1e>
 80081ee:	4b24      	ldr	r3, [pc, #144]	; (8008280 <__swsetup_r+0xd8>)
 80081f0:	429c      	cmp	r4, r3
 80081f2:	bf08      	it	eq
 80081f4:	68ec      	ldreq	r4, [r5, #12]
 80081f6:	e7e6      	b.n	80081c6 <__swsetup_r+0x1e>
 80081f8:	0751      	lsls	r1, r2, #29
 80081fa:	d512      	bpl.n	8008222 <__swsetup_r+0x7a>
 80081fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081fe:	b141      	cbz	r1, 8008212 <__swsetup_r+0x6a>
 8008200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008204:	4299      	cmp	r1, r3
 8008206:	d002      	beq.n	800820e <__swsetup_r+0x66>
 8008208:	4630      	mov	r0, r6
 800820a:	f000 fa19 	bl	8008640 <_free_r>
 800820e:	2300      	movs	r3, #0
 8008210:	6363      	str	r3, [r4, #52]	; 0x34
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	2300      	movs	r3, #0
 800821c:	6063      	str	r3, [r4, #4]
 800821e:	6923      	ldr	r3, [r4, #16]
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	f043 0308 	orr.w	r3, r3, #8
 8008228:	81a3      	strh	r3, [r4, #12]
 800822a:	6923      	ldr	r3, [r4, #16]
 800822c:	b94b      	cbnz	r3, 8008242 <__swsetup_r+0x9a>
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008238:	d003      	beq.n	8008242 <__swsetup_r+0x9a>
 800823a:	4621      	mov	r1, r4
 800823c:	4630      	mov	r0, r6
 800823e:	f000 f9bf 	bl	80085c0 <__smakebuf_r>
 8008242:	89a2      	ldrh	r2, [r4, #12]
 8008244:	f012 0301 	ands.w	r3, r2, #1
 8008248:	d00c      	beq.n	8008264 <__swsetup_r+0xbc>
 800824a:	2300      	movs	r3, #0
 800824c:	60a3      	str	r3, [r4, #8]
 800824e:	6963      	ldr	r3, [r4, #20]
 8008250:	425b      	negs	r3, r3
 8008252:	61a3      	str	r3, [r4, #24]
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	b953      	cbnz	r3, 800826e <__swsetup_r+0xc6>
 8008258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008260:	d1ba      	bne.n	80081d8 <__swsetup_r+0x30>
 8008262:	bd70      	pop	{r4, r5, r6, pc}
 8008264:	0792      	lsls	r2, r2, #30
 8008266:	bf58      	it	pl
 8008268:	6963      	ldrpl	r3, [r4, #20]
 800826a:	60a3      	str	r3, [r4, #8]
 800826c:	e7f2      	b.n	8008254 <__swsetup_r+0xac>
 800826e:	2000      	movs	r0, #0
 8008270:	e7f7      	b.n	8008262 <__swsetup_r+0xba>
 8008272:	bf00      	nop
 8008274:	200001a0 	.word	0x200001a0
 8008278:	08008fd8 	.word	0x08008fd8
 800827c:	08008ff8 	.word	0x08008ff8
 8008280:	08008fb8 	.word	0x08008fb8

08008284 <__sflush_r>:
 8008284:	898a      	ldrh	r2, [r1, #12]
 8008286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800828a:	4605      	mov	r5, r0
 800828c:	0710      	lsls	r0, r2, #28
 800828e:	460c      	mov	r4, r1
 8008290:	d458      	bmi.n	8008344 <__sflush_r+0xc0>
 8008292:	684b      	ldr	r3, [r1, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	dc05      	bgt.n	80082a4 <__sflush_r+0x20>
 8008298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800829a:	2b00      	cmp	r3, #0
 800829c:	dc02      	bgt.n	80082a4 <__sflush_r+0x20>
 800829e:	2000      	movs	r0, #0
 80082a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	d0f9      	beq.n	800829e <__sflush_r+0x1a>
 80082aa:	2300      	movs	r3, #0
 80082ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082b0:	682f      	ldr	r7, [r5, #0]
 80082b2:	6a21      	ldr	r1, [r4, #32]
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	d032      	beq.n	800831e <__sflush_r+0x9a>
 80082b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	075a      	lsls	r2, r3, #29
 80082be:	d505      	bpl.n	80082cc <__sflush_r+0x48>
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	1ac0      	subs	r0, r0, r3
 80082c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082c6:	b10b      	cbz	r3, 80082cc <__sflush_r+0x48>
 80082c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082ca:	1ac0      	subs	r0, r0, r3
 80082cc:	2300      	movs	r3, #0
 80082ce:	4602      	mov	r2, r0
 80082d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d2:	6a21      	ldr	r1, [r4, #32]
 80082d4:	4628      	mov	r0, r5
 80082d6:	47b0      	blx	r6
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	d106      	bne.n	80082ec <__sflush_r+0x68>
 80082de:	6829      	ldr	r1, [r5, #0]
 80082e0:	291d      	cmp	r1, #29
 80082e2:	d848      	bhi.n	8008376 <__sflush_r+0xf2>
 80082e4:	4a29      	ldr	r2, [pc, #164]	; (800838c <__sflush_r+0x108>)
 80082e6:	40ca      	lsrs	r2, r1
 80082e8:	07d6      	lsls	r6, r2, #31
 80082ea:	d544      	bpl.n	8008376 <__sflush_r+0xf2>
 80082ec:	2200      	movs	r2, #0
 80082ee:	6062      	str	r2, [r4, #4]
 80082f0:	6922      	ldr	r2, [r4, #16]
 80082f2:	04d9      	lsls	r1, r3, #19
 80082f4:	6022      	str	r2, [r4, #0]
 80082f6:	d504      	bpl.n	8008302 <__sflush_r+0x7e>
 80082f8:	1c42      	adds	r2, r0, #1
 80082fa:	d101      	bne.n	8008300 <__sflush_r+0x7c>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b903      	cbnz	r3, 8008302 <__sflush_r+0x7e>
 8008300:	6560      	str	r0, [r4, #84]	; 0x54
 8008302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008304:	602f      	str	r7, [r5, #0]
 8008306:	2900      	cmp	r1, #0
 8008308:	d0c9      	beq.n	800829e <__sflush_r+0x1a>
 800830a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800830e:	4299      	cmp	r1, r3
 8008310:	d002      	beq.n	8008318 <__sflush_r+0x94>
 8008312:	4628      	mov	r0, r5
 8008314:	f000 f994 	bl	8008640 <_free_r>
 8008318:	2000      	movs	r0, #0
 800831a:	6360      	str	r0, [r4, #52]	; 0x34
 800831c:	e7c0      	b.n	80082a0 <__sflush_r+0x1c>
 800831e:	2301      	movs	r3, #1
 8008320:	4628      	mov	r0, r5
 8008322:	47b0      	blx	r6
 8008324:	1c41      	adds	r1, r0, #1
 8008326:	d1c8      	bne.n	80082ba <__sflush_r+0x36>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0c5      	beq.n	80082ba <__sflush_r+0x36>
 800832e:	2b1d      	cmp	r3, #29
 8008330:	d001      	beq.n	8008336 <__sflush_r+0xb2>
 8008332:	2b16      	cmp	r3, #22
 8008334:	d101      	bne.n	800833a <__sflush_r+0xb6>
 8008336:	602f      	str	r7, [r5, #0]
 8008338:	e7b1      	b.n	800829e <__sflush_r+0x1a>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	e7ad      	b.n	80082a0 <__sflush_r+0x1c>
 8008344:	690f      	ldr	r7, [r1, #16]
 8008346:	2f00      	cmp	r7, #0
 8008348:	d0a9      	beq.n	800829e <__sflush_r+0x1a>
 800834a:	0793      	lsls	r3, r2, #30
 800834c:	bf18      	it	ne
 800834e:	2300      	movne	r3, #0
 8008350:	680e      	ldr	r6, [r1, #0]
 8008352:	bf08      	it	eq
 8008354:	694b      	ldreq	r3, [r1, #20]
 8008356:	eba6 0807 	sub.w	r8, r6, r7
 800835a:	600f      	str	r7, [r1, #0]
 800835c:	608b      	str	r3, [r1, #8]
 800835e:	f1b8 0f00 	cmp.w	r8, #0
 8008362:	dd9c      	ble.n	800829e <__sflush_r+0x1a>
 8008364:	4643      	mov	r3, r8
 8008366:	463a      	mov	r2, r7
 8008368:	6a21      	ldr	r1, [r4, #32]
 800836a:	4628      	mov	r0, r5
 800836c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800836e:	47b0      	blx	r6
 8008370:	2800      	cmp	r0, #0
 8008372:	dc06      	bgt.n	8008382 <__sflush_r+0xfe>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	e78e      	b.n	80082a0 <__sflush_r+0x1c>
 8008382:	4407      	add	r7, r0
 8008384:	eba8 0800 	sub.w	r8, r8, r0
 8008388:	e7e9      	b.n	800835e <__sflush_r+0xda>
 800838a:	bf00      	nop
 800838c:	20400001 	.word	0x20400001

08008390 <_fflush_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	690b      	ldr	r3, [r1, #16]
 8008394:	4605      	mov	r5, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b1db      	cbz	r3, 80083d2 <_fflush_r+0x42>
 800839a:	b118      	cbz	r0, 80083a4 <_fflush_r+0x14>
 800839c:	6983      	ldr	r3, [r0, #24]
 800839e:	b90b      	cbnz	r3, 80083a4 <_fflush_r+0x14>
 80083a0:	f000 f860 	bl	8008464 <__sinit>
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <_fflush_r+0x48>)
 80083a6:	429c      	cmp	r4, r3
 80083a8:	d109      	bne.n	80083be <_fflush_r+0x2e>
 80083aa:	686c      	ldr	r4, [r5, #4]
 80083ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083b0:	b17b      	cbz	r3, 80083d2 <_fflush_r+0x42>
 80083b2:	4621      	mov	r1, r4
 80083b4:	4628      	mov	r0, r5
 80083b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ba:	f7ff bf63 	b.w	8008284 <__sflush_r>
 80083be:	4b07      	ldr	r3, [pc, #28]	; (80083dc <_fflush_r+0x4c>)
 80083c0:	429c      	cmp	r4, r3
 80083c2:	d101      	bne.n	80083c8 <_fflush_r+0x38>
 80083c4:	68ac      	ldr	r4, [r5, #8]
 80083c6:	e7f1      	b.n	80083ac <_fflush_r+0x1c>
 80083c8:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <_fflush_r+0x50>)
 80083ca:	429c      	cmp	r4, r3
 80083cc:	bf08      	it	eq
 80083ce:	68ec      	ldreq	r4, [r5, #12]
 80083d0:	e7ec      	b.n	80083ac <_fflush_r+0x1c>
 80083d2:	2000      	movs	r0, #0
 80083d4:	bd38      	pop	{r3, r4, r5, pc}
 80083d6:	bf00      	nop
 80083d8:	08008fd8 	.word	0x08008fd8
 80083dc:	08008ff8 	.word	0x08008ff8
 80083e0:	08008fb8 	.word	0x08008fb8

080083e4 <std>:
 80083e4:	2300      	movs	r3, #0
 80083e6:	b510      	push	{r4, lr}
 80083e8:	4604      	mov	r4, r0
 80083ea:	e9c0 3300 	strd	r3, r3, [r0]
 80083ee:	6083      	str	r3, [r0, #8]
 80083f0:	8181      	strh	r1, [r0, #12]
 80083f2:	6643      	str	r3, [r0, #100]	; 0x64
 80083f4:	81c2      	strh	r2, [r0, #14]
 80083f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083fa:	6183      	str	r3, [r0, #24]
 80083fc:	4619      	mov	r1, r3
 80083fe:	2208      	movs	r2, #8
 8008400:	305c      	adds	r0, #92	; 0x5c
 8008402:	f7ff fdfb 	bl	8007ffc <memset>
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <std+0x38>)
 8008408:	6224      	str	r4, [r4, #32]
 800840a:	6263      	str	r3, [r4, #36]	; 0x24
 800840c:	4b04      	ldr	r3, [pc, #16]	; (8008420 <std+0x3c>)
 800840e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008410:	4b04      	ldr	r3, [pc, #16]	; (8008424 <std+0x40>)
 8008412:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008414:	4b04      	ldr	r3, [pc, #16]	; (8008428 <std+0x44>)
 8008416:	6323      	str	r3, [r4, #48]	; 0x30
 8008418:	bd10      	pop	{r4, pc}
 800841a:	bf00      	nop
 800841c:	08008d39 	.word	0x08008d39
 8008420:	08008d5b 	.word	0x08008d5b
 8008424:	08008d93 	.word	0x08008d93
 8008428:	08008db7 	.word	0x08008db7

0800842c <_cleanup_r>:
 800842c:	4901      	ldr	r1, [pc, #4]	; (8008434 <_cleanup_r+0x8>)
 800842e:	f000 b885 	b.w	800853c <_fwalk_reent>
 8008432:	bf00      	nop
 8008434:	08008391 	.word	0x08008391

08008438 <__sfmoreglue>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	2568      	movs	r5, #104	; 0x68
 800843c:	1e4a      	subs	r2, r1, #1
 800843e:	4355      	muls	r5, r2
 8008440:	460e      	mov	r6, r1
 8008442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008446:	f000 f947 	bl	80086d8 <_malloc_r>
 800844a:	4604      	mov	r4, r0
 800844c:	b140      	cbz	r0, 8008460 <__sfmoreglue+0x28>
 800844e:	2100      	movs	r1, #0
 8008450:	e9c0 1600 	strd	r1, r6, [r0]
 8008454:	300c      	adds	r0, #12
 8008456:	60a0      	str	r0, [r4, #8]
 8008458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800845c:	f7ff fdce 	bl	8007ffc <memset>
 8008460:	4620      	mov	r0, r4
 8008462:	bd70      	pop	{r4, r5, r6, pc}

08008464 <__sinit>:
 8008464:	6983      	ldr	r3, [r0, #24]
 8008466:	b510      	push	{r4, lr}
 8008468:	4604      	mov	r4, r0
 800846a:	bb33      	cbnz	r3, 80084ba <__sinit+0x56>
 800846c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008470:	6503      	str	r3, [r0, #80]	; 0x50
 8008472:	4b12      	ldr	r3, [pc, #72]	; (80084bc <__sinit+0x58>)
 8008474:	4a12      	ldr	r2, [pc, #72]	; (80084c0 <__sinit+0x5c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6282      	str	r2, [r0, #40]	; 0x28
 800847a:	4298      	cmp	r0, r3
 800847c:	bf04      	itt	eq
 800847e:	2301      	moveq	r3, #1
 8008480:	6183      	streq	r3, [r0, #24]
 8008482:	f000 f81f 	bl	80084c4 <__sfp>
 8008486:	6060      	str	r0, [r4, #4]
 8008488:	4620      	mov	r0, r4
 800848a:	f000 f81b 	bl	80084c4 <__sfp>
 800848e:	60a0      	str	r0, [r4, #8]
 8008490:	4620      	mov	r0, r4
 8008492:	f000 f817 	bl	80084c4 <__sfp>
 8008496:	2200      	movs	r2, #0
 8008498:	60e0      	str	r0, [r4, #12]
 800849a:	2104      	movs	r1, #4
 800849c:	6860      	ldr	r0, [r4, #4]
 800849e:	f7ff ffa1 	bl	80083e4 <std>
 80084a2:	2201      	movs	r2, #1
 80084a4:	2109      	movs	r1, #9
 80084a6:	68a0      	ldr	r0, [r4, #8]
 80084a8:	f7ff ff9c 	bl	80083e4 <std>
 80084ac:	2202      	movs	r2, #2
 80084ae:	2112      	movs	r1, #18
 80084b0:	68e0      	ldr	r0, [r4, #12]
 80084b2:	f7ff ff97 	bl	80083e4 <std>
 80084b6:	2301      	movs	r3, #1
 80084b8:	61a3      	str	r3, [r4, #24]
 80084ba:	bd10      	pop	{r4, pc}
 80084bc:	08008fb4 	.word	0x08008fb4
 80084c0:	0800842d 	.word	0x0800842d

080084c4 <__sfp>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	4b1b      	ldr	r3, [pc, #108]	; (8008534 <__sfp+0x70>)
 80084c8:	4607      	mov	r7, r0
 80084ca:	681e      	ldr	r6, [r3, #0]
 80084cc:	69b3      	ldr	r3, [r6, #24]
 80084ce:	b913      	cbnz	r3, 80084d6 <__sfp+0x12>
 80084d0:	4630      	mov	r0, r6
 80084d2:	f7ff ffc7 	bl	8008464 <__sinit>
 80084d6:	3648      	adds	r6, #72	; 0x48
 80084d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084dc:	3b01      	subs	r3, #1
 80084de:	d503      	bpl.n	80084e8 <__sfp+0x24>
 80084e0:	6833      	ldr	r3, [r6, #0]
 80084e2:	b133      	cbz	r3, 80084f2 <__sfp+0x2e>
 80084e4:	6836      	ldr	r6, [r6, #0]
 80084e6:	e7f7      	b.n	80084d8 <__sfp+0x14>
 80084e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084ec:	b16d      	cbz	r5, 800850a <__sfp+0x46>
 80084ee:	3468      	adds	r4, #104	; 0x68
 80084f0:	e7f4      	b.n	80084dc <__sfp+0x18>
 80084f2:	2104      	movs	r1, #4
 80084f4:	4638      	mov	r0, r7
 80084f6:	f7ff ff9f 	bl	8008438 <__sfmoreglue>
 80084fa:	6030      	str	r0, [r6, #0]
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d1f1      	bne.n	80084e4 <__sfp+0x20>
 8008500:	230c      	movs	r3, #12
 8008502:	4604      	mov	r4, r0
 8008504:	603b      	str	r3, [r7, #0]
 8008506:	4620      	mov	r0, r4
 8008508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800850a:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <__sfp+0x74>)
 800850c:	6665      	str	r5, [r4, #100]	; 0x64
 800850e:	e9c4 5500 	strd	r5, r5, [r4]
 8008512:	60a5      	str	r5, [r4, #8]
 8008514:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008518:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800851c:	2208      	movs	r2, #8
 800851e:	4629      	mov	r1, r5
 8008520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008524:	f7ff fd6a 	bl	8007ffc <memset>
 8008528:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800852c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008530:	e7e9      	b.n	8008506 <__sfp+0x42>
 8008532:	bf00      	nop
 8008534:	08008fb4 	.word	0x08008fb4
 8008538:	ffff0001 	.word	0xffff0001

0800853c <_fwalk_reent>:
 800853c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008540:	4680      	mov	r8, r0
 8008542:	4689      	mov	r9, r1
 8008544:	2600      	movs	r6, #0
 8008546:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800854a:	b914      	cbnz	r4, 8008552 <_fwalk_reent+0x16>
 800854c:	4630      	mov	r0, r6
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008552:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008556:	3f01      	subs	r7, #1
 8008558:	d501      	bpl.n	800855e <_fwalk_reent+0x22>
 800855a:	6824      	ldr	r4, [r4, #0]
 800855c:	e7f5      	b.n	800854a <_fwalk_reent+0xe>
 800855e:	89ab      	ldrh	r3, [r5, #12]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d907      	bls.n	8008574 <_fwalk_reent+0x38>
 8008564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008568:	3301      	adds	r3, #1
 800856a:	d003      	beq.n	8008574 <_fwalk_reent+0x38>
 800856c:	4629      	mov	r1, r5
 800856e:	4640      	mov	r0, r8
 8008570:	47c8      	blx	r9
 8008572:	4306      	orrs	r6, r0
 8008574:	3568      	adds	r5, #104	; 0x68
 8008576:	e7ee      	b.n	8008556 <_fwalk_reent+0x1a>

08008578 <__swhatbuf_r>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	460e      	mov	r6, r1
 800857c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008580:	b096      	sub	sp, #88	; 0x58
 8008582:	2900      	cmp	r1, #0
 8008584:	4614      	mov	r4, r2
 8008586:	461d      	mov	r5, r3
 8008588:	da07      	bge.n	800859a <__swhatbuf_r+0x22>
 800858a:	2300      	movs	r3, #0
 800858c:	602b      	str	r3, [r5, #0]
 800858e:	89b3      	ldrh	r3, [r6, #12]
 8008590:	061a      	lsls	r2, r3, #24
 8008592:	d410      	bmi.n	80085b6 <__swhatbuf_r+0x3e>
 8008594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008598:	e00e      	b.n	80085b8 <__swhatbuf_r+0x40>
 800859a:	466a      	mov	r2, sp
 800859c:	f000 fc32 	bl	8008e04 <_fstat_r>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	dbf2      	blt.n	800858a <__swhatbuf_r+0x12>
 80085a4:	9a01      	ldr	r2, [sp, #4]
 80085a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085ae:	425a      	negs	r2, r3
 80085b0:	415a      	adcs	r2, r3
 80085b2:	602a      	str	r2, [r5, #0]
 80085b4:	e7ee      	b.n	8008594 <__swhatbuf_r+0x1c>
 80085b6:	2340      	movs	r3, #64	; 0x40
 80085b8:	2000      	movs	r0, #0
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	b016      	add	sp, #88	; 0x58
 80085be:	bd70      	pop	{r4, r5, r6, pc}

080085c0 <__smakebuf_r>:
 80085c0:	898b      	ldrh	r3, [r1, #12]
 80085c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085c4:	079d      	lsls	r5, r3, #30
 80085c6:	4606      	mov	r6, r0
 80085c8:	460c      	mov	r4, r1
 80085ca:	d507      	bpl.n	80085dc <__smakebuf_r+0x1c>
 80085cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	2301      	movs	r3, #1
 80085d6:	6163      	str	r3, [r4, #20]
 80085d8:	b002      	add	sp, #8
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	ab01      	add	r3, sp, #4
 80085de:	466a      	mov	r2, sp
 80085e0:	f7ff ffca 	bl	8008578 <__swhatbuf_r>
 80085e4:	9900      	ldr	r1, [sp, #0]
 80085e6:	4605      	mov	r5, r0
 80085e8:	4630      	mov	r0, r6
 80085ea:	f000 f875 	bl	80086d8 <_malloc_r>
 80085ee:	b948      	cbnz	r0, 8008604 <__smakebuf_r+0x44>
 80085f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f4:	059a      	lsls	r2, r3, #22
 80085f6:	d4ef      	bmi.n	80085d8 <__smakebuf_r+0x18>
 80085f8:	f023 0303 	bic.w	r3, r3, #3
 80085fc:	f043 0302 	orr.w	r3, r3, #2
 8008600:	81a3      	strh	r3, [r4, #12]
 8008602:	e7e3      	b.n	80085cc <__smakebuf_r+0xc>
 8008604:	4b0d      	ldr	r3, [pc, #52]	; (800863c <__smakebuf_r+0x7c>)
 8008606:	62b3      	str	r3, [r6, #40]	; 0x28
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	6020      	str	r0, [r4, #0]
 800860c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008610:	81a3      	strh	r3, [r4, #12]
 8008612:	9b00      	ldr	r3, [sp, #0]
 8008614:	6120      	str	r0, [r4, #16]
 8008616:	6163      	str	r3, [r4, #20]
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	b15b      	cbz	r3, 8008634 <__smakebuf_r+0x74>
 800861c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008620:	4630      	mov	r0, r6
 8008622:	f000 fc01 	bl	8008e28 <_isatty_r>
 8008626:	b128      	cbz	r0, 8008634 <__smakebuf_r+0x74>
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	f023 0303 	bic.w	r3, r3, #3
 800862e:	f043 0301 	orr.w	r3, r3, #1
 8008632:	81a3      	strh	r3, [r4, #12]
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	431d      	orrs	r5, r3
 8008638:	81a5      	strh	r5, [r4, #12]
 800863a:	e7cd      	b.n	80085d8 <__smakebuf_r+0x18>
 800863c:	0800842d 	.word	0x0800842d

08008640 <_free_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4605      	mov	r5, r0
 8008644:	2900      	cmp	r1, #0
 8008646:	d043      	beq.n	80086d0 <_free_r+0x90>
 8008648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800864c:	1f0c      	subs	r4, r1, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	bfb8      	it	lt
 8008652:	18e4      	addlt	r4, r4, r3
 8008654:	f000 fc18 	bl	8008e88 <__malloc_lock>
 8008658:	4a1e      	ldr	r2, [pc, #120]	; (80086d4 <_free_r+0x94>)
 800865a:	6813      	ldr	r3, [r2, #0]
 800865c:	4610      	mov	r0, r2
 800865e:	b933      	cbnz	r3, 800866e <_free_r+0x2e>
 8008660:	6063      	str	r3, [r4, #4]
 8008662:	6014      	str	r4, [r2, #0]
 8008664:	4628      	mov	r0, r5
 8008666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800866a:	f000 bc0e 	b.w	8008e8a <__malloc_unlock>
 800866e:	42a3      	cmp	r3, r4
 8008670:	d90b      	bls.n	800868a <_free_r+0x4a>
 8008672:	6821      	ldr	r1, [r4, #0]
 8008674:	1862      	adds	r2, r4, r1
 8008676:	4293      	cmp	r3, r2
 8008678:	bf01      	itttt	eq
 800867a:	681a      	ldreq	r2, [r3, #0]
 800867c:	685b      	ldreq	r3, [r3, #4]
 800867e:	1852      	addeq	r2, r2, r1
 8008680:	6022      	streq	r2, [r4, #0]
 8008682:	6063      	str	r3, [r4, #4]
 8008684:	6004      	str	r4, [r0, #0]
 8008686:	e7ed      	b.n	8008664 <_free_r+0x24>
 8008688:	4613      	mov	r3, r2
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	b10a      	cbz	r2, 8008692 <_free_r+0x52>
 800868e:	42a2      	cmp	r2, r4
 8008690:	d9fa      	bls.n	8008688 <_free_r+0x48>
 8008692:	6819      	ldr	r1, [r3, #0]
 8008694:	1858      	adds	r0, r3, r1
 8008696:	42a0      	cmp	r0, r4
 8008698:	d10b      	bne.n	80086b2 <_free_r+0x72>
 800869a:	6820      	ldr	r0, [r4, #0]
 800869c:	4401      	add	r1, r0
 800869e:	1858      	adds	r0, r3, r1
 80086a0:	4282      	cmp	r2, r0
 80086a2:	6019      	str	r1, [r3, #0]
 80086a4:	d1de      	bne.n	8008664 <_free_r+0x24>
 80086a6:	6810      	ldr	r0, [r2, #0]
 80086a8:	6852      	ldr	r2, [r2, #4]
 80086aa:	4401      	add	r1, r0
 80086ac:	6019      	str	r1, [r3, #0]
 80086ae:	605a      	str	r2, [r3, #4]
 80086b0:	e7d8      	b.n	8008664 <_free_r+0x24>
 80086b2:	d902      	bls.n	80086ba <_free_r+0x7a>
 80086b4:	230c      	movs	r3, #12
 80086b6:	602b      	str	r3, [r5, #0]
 80086b8:	e7d4      	b.n	8008664 <_free_r+0x24>
 80086ba:	6820      	ldr	r0, [r4, #0]
 80086bc:	1821      	adds	r1, r4, r0
 80086be:	428a      	cmp	r2, r1
 80086c0:	bf01      	itttt	eq
 80086c2:	6811      	ldreq	r1, [r2, #0]
 80086c4:	6852      	ldreq	r2, [r2, #4]
 80086c6:	1809      	addeq	r1, r1, r0
 80086c8:	6021      	streq	r1, [r4, #0]
 80086ca:	6062      	str	r2, [r4, #4]
 80086cc:	605c      	str	r4, [r3, #4]
 80086ce:	e7c9      	b.n	8008664 <_free_r+0x24>
 80086d0:	bd38      	pop	{r3, r4, r5, pc}
 80086d2:	bf00      	nop
 80086d4:	20000d80 	.word	0x20000d80

080086d8 <_malloc_r>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	1ccd      	adds	r5, r1, #3
 80086dc:	f025 0503 	bic.w	r5, r5, #3
 80086e0:	3508      	adds	r5, #8
 80086e2:	2d0c      	cmp	r5, #12
 80086e4:	bf38      	it	cc
 80086e6:	250c      	movcc	r5, #12
 80086e8:	2d00      	cmp	r5, #0
 80086ea:	4606      	mov	r6, r0
 80086ec:	db01      	blt.n	80086f2 <_malloc_r+0x1a>
 80086ee:	42a9      	cmp	r1, r5
 80086f0:	d903      	bls.n	80086fa <_malloc_r+0x22>
 80086f2:	230c      	movs	r3, #12
 80086f4:	6033      	str	r3, [r6, #0]
 80086f6:	2000      	movs	r0, #0
 80086f8:	bd70      	pop	{r4, r5, r6, pc}
 80086fa:	f000 fbc5 	bl	8008e88 <__malloc_lock>
 80086fe:	4a21      	ldr	r2, [pc, #132]	; (8008784 <_malloc_r+0xac>)
 8008700:	6814      	ldr	r4, [r2, #0]
 8008702:	4621      	mov	r1, r4
 8008704:	b991      	cbnz	r1, 800872c <_malloc_r+0x54>
 8008706:	4c20      	ldr	r4, [pc, #128]	; (8008788 <_malloc_r+0xb0>)
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	b91b      	cbnz	r3, 8008714 <_malloc_r+0x3c>
 800870c:	4630      	mov	r0, r6
 800870e:	f000 fb03 	bl	8008d18 <_sbrk_r>
 8008712:	6020      	str	r0, [r4, #0]
 8008714:	4629      	mov	r1, r5
 8008716:	4630      	mov	r0, r6
 8008718:	f000 fafe 	bl	8008d18 <_sbrk_r>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d124      	bne.n	800876a <_malloc_r+0x92>
 8008720:	230c      	movs	r3, #12
 8008722:	4630      	mov	r0, r6
 8008724:	6033      	str	r3, [r6, #0]
 8008726:	f000 fbb0 	bl	8008e8a <__malloc_unlock>
 800872a:	e7e4      	b.n	80086f6 <_malloc_r+0x1e>
 800872c:	680b      	ldr	r3, [r1, #0]
 800872e:	1b5b      	subs	r3, r3, r5
 8008730:	d418      	bmi.n	8008764 <_malloc_r+0x8c>
 8008732:	2b0b      	cmp	r3, #11
 8008734:	d90f      	bls.n	8008756 <_malloc_r+0x7e>
 8008736:	600b      	str	r3, [r1, #0]
 8008738:	18cc      	adds	r4, r1, r3
 800873a:	50cd      	str	r5, [r1, r3]
 800873c:	4630      	mov	r0, r6
 800873e:	f000 fba4 	bl	8008e8a <__malloc_unlock>
 8008742:	f104 000b 	add.w	r0, r4, #11
 8008746:	1d23      	adds	r3, r4, #4
 8008748:	f020 0007 	bic.w	r0, r0, #7
 800874c:	1ac3      	subs	r3, r0, r3
 800874e:	d0d3      	beq.n	80086f8 <_malloc_r+0x20>
 8008750:	425a      	negs	r2, r3
 8008752:	50e2      	str	r2, [r4, r3]
 8008754:	e7d0      	b.n	80086f8 <_malloc_r+0x20>
 8008756:	684b      	ldr	r3, [r1, #4]
 8008758:	428c      	cmp	r4, r1
 800875a:	bf16      	itet	ne
 800875c:	6063      	strne	r3, [r4, #4]
 800875e:	6013      	streq	r3, [r2, #0]
 8008760:	460c      	movne	r4, r1
 8008762:	e7eb      	b.n	800873c <_malloc_r+0x64>
 8008764:	460c      	mov	r4, r1
 8008766:	6849      	ldr	r1, [r1, #4]
 8008768:	e7cc      	b.n	8008704 <_malloc_r+0x2c>
 800876a:	1cc4      	adds	r4, r0, #3
 800876c:	f024 0403 	bic.w	r4, r4, #3
 8008770:	42a0      	cmp	r0, r4
 8008772:	d005      	beq.n	8008780 <_malloc_r+0xa8>
 8008774:	1a21      	subs	r1, r4, r0
 8008776:	4630      	mov	r0, r6
 8008778:	f000 face 	bl	8008d18 <_sbrk_r>
 800877c:	3001      	adds	r0, #1
 800877e:	d0cf      	beq.n	8008720 <_malloc_r+0x48>
 8008780:	6025      	str	r5, [r4, #0]
 8008782:	e7db      	b.n	800873c <_malloc_r+0x64>
 8008784:	20000d80 	.word	0x20000d80
 8008788:	20000d84 	.word	0x20000d84

0800878c <__sfputc_r>:
 800878c:	6893      	ldr	r3, [r2, #8]
 800878e:	b410      	push	{r4}
 8008790:	3b01      	subs	r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	6093      	str	r3, [r2, #8]
 8008796:	da07      	bge.n	80087a8 <__sfputc_r+0x1c>
 8008798:	6994      	ldr	r4, [r2, #24]
 800879a:	42a3      	cmp	r3, r4
 800879c:	db01      	blt.n	80087a2 <__sfputc_r+0x16>
 800879e:	290a      	cmp	r1, #10
 80087a0:	d102      	bne.n	80087a8 <__sfputc_r+0x1c>
 80087a2:	bc10      	pop	{r4}
 80087a4:	f7ff bcae 	b.w	8008104 <__swbuf_r>
 80087a8:	6813      	ldr	r3, [r2, #0]
 80087aa:	1c58      	adds	r0, r3, #1
 80087ac:	6010      	str	r0, [r2, #0]
 80087ae:	7019      	strb	r1, [r3, #0]
 80087b0:	4608      	mov	r0, r1
 80087b2:	bc10      	pop	{r4}
 80087b4:	4770      	bx	lr

080087b6 <__sfputs_r>:
 80087b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b8:	4606      	mov	r6, r0
 80087ba:	460f      	mov	r7, r1
 80087bc:	4614      	mov	r4, r2
 80087be:	18d5      	adds	r5, r2, r3
 80087c0:	42ac      	cmp	r4, r5
 80087c2:	d101      	bne.n	80087c8 <__sfputs_r+0x12>
 80087c4:	2000      	movs	r0, #0
 80087c6:	e007      	b.n	80087d8 <__sfputs_r+0x22>
 80087c8:	463a      	mov	r2, r7
 80087ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ce:	4630      	mov	r0, r6
 80087d0:	f7ff ffdc 	bl	800878c <__sfputc_r>
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d1f3      	bne.n	80087c0 <__sfputs_r+0xa>
 80087d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087dc <_vfiprintf_r>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	460c      	mov	r4, r1
 80087e2:	b09d      	sub	sp, #116	; 0x74
 80087e4:	4617      	mov	r7, r2
 80087e6:	461d      	mov	r5, r3
 80087e8:	4606      	mov	r6, r0
 80087ea:	b118      	cbz	r0, 80087f4 <_vfiprintf_r+0x18>
 80087ec:	6983      	ldr	r3, [r0, #24]
 80087ee:	b90b      	cbnz	r3, 80087f4 <_vfiprintf_r+0x18>
 80087f0:	f7ff fe38 	bl	8008464 <__sinit>
 80087f4:	4b7c      	ldr	r3, [pc, #496]	; (80089e8 <_vfiprintf_r+0x20c>)
 80087f6:	429c      	cmp	r4, r3
 80087f8:	d158      	bne.n	80088ac <_vfiprintf_r+0xd0>
 80087fa:	6874      	ldr	r4, [r6, #4]
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	0718      	lsls	r0, r3, #28
 8008800:	d55e      	bpl.n	80088c0 <_vfiprintf_r+0xe4>
 8008802:	6923      	ldr	r3, [r4, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d05b      	beq.n	80088c0 <_vfiprintf_r+0xe4>
 8008808:	2300      	movs	r3, #0
 800880a:	9309      	str	r3, [sp, #36]	; 0x24
 800880c:	2320      	movs	r3, #32
 800880e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008812:	2330      	movs	r3, #48	; 0x30
 8008814:	f04f 0b01 	mov.w	fp, #1
 8008818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800881c:	9503      	str	r5, [sp, #12]
 800881e:	46b8      	mov	r8, r7
 8008820:	4645      	mov	r5, r8
 8008822:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008826:	b10b      	cbz	r3, 800882c <_vfiprintf_r+0x50>
 8008828:	2b25      	cmp	r3, #37	; 0x25
 800882a:	d154      	bne.n	80088d6 <_vfiprintf_r+0xfa>
 800882c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008830:	d00b      	beq.n	800884a <_vfiprintf_r+0x6e>
 8008832:	4653      	mov	r3, sl
 8008834:	463a      	mov	r2, r7
 8008836:	4621      	mov	r1, r4
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff ffbc 	bl	80087b6 <__sfputs_r>
 800883e:	3001      	adds	r0, #1
 8008840:	f000 80c2 	beq.w	80089c8 <_vfiprintf_r+0x1ec>
 8008844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008846:	4453      	add	r3, sl
 8008848:	9309      	str	r3, [sp, #36]	; 0x24
 800884a:	f898 3000 	ldrb.w	r3, [r8]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 80ba 	beq.w	80089c8 <_vfiprintf_r+0x1ec>
 8008854:	2300      	movs	r3, #0
 8008856:	f04f 32ff 	mov.w	r2, #4294967295
 800885a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800885e:	9304      	str	r3, [sp, #16]
 8008860:	9307      	str	r3, [sp, #28]
 8008862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008866:	931a      	str	r3, [sp, #104]	; 0x68
 8008868:	46a8      	mov	r8, r5
 800886a:	2205      	movs	r2, #5
 800886c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008870:	485e      	ldr	r0, [pc, #376]	; (80089ec <_vfiprintf_r+0x210>)
 8008872:	f000 fafb 	bl	8008e6c <memchr>
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	bb78      	cbnz	r0, 80088da <_vfiprintf_r+0xfe>
 800887a:	06d9      	lsls	r1, r3, #27
 800887c:	bf44      	itt	mi
 800887e:	2220      	movmi	r2, #32
 8008880:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008884:	071a      	lsls	r2, r3, #28
 8008886:	bf44      	itt	mi
 8008888:	222b      	movmi	r2, #43	; 0x2b
 800888a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800888e:	782a      	ldrb	r2, [r5, #0]
 8008890:	2a2a      	cmp	r2, #42	; 0x2a
 8008892:	d02a      	beq.n	80088ea <_vfiprintf_r+0x10e>
 8008894:	46a8      	mov	r8, r5
 8008896:	2000      	movs	r0, #0
 8008898:	250a      	movs	r5, #10
 800889a:	9a07      	ldr	r2, [sp, #28]
 800889c:	4641      	mov	r1, r8
 800889e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088a2:	3b30      	subs	r3, #48	; 0x30
 80088a4:	2b09      	cmp	r3, #9
 80088a6:	d969      	bls.n	800897c <_vfiprintf_r+0x1a0>
 80088a8:	b360      	cbz	r0, 8008904 <_vfiprintf_r+0x128>
 80088aa:	e024      	b.n	80088f6 <_vfiprintf_r+0x11a>
 80088ac:	4b50      	ldr	r3, [pc, #320]	; (80089f0 <_vfiprintf_r+0x214>)
 80088ae:	429c      	cmp	r4, r3
 80088b0:	d101      	bne.n	80088b6 <_vfiprintf_r+0xda>
 80088b2:	68b4      	ldr	r4, [r6, #8]
 80088b4:	e7a2      	b.n	80087fc <_vfiprintf_r+0x20>
 80088b6:	4b4f      	ldr	r3, [pc, #316]	; (80089f4 <_vfiprintf_r+0x218>)
 80088b8:	429c      	cmp	r4, r3
 80088ba:	bf08      	it	eq
 80088bc:	68f4      	ldreq	r4, [r6, #12]
 80088be:	e79d      	b.n	80087fc <_vfiprintf_r+0x20>
 80088c0:	4621      	mov	r1, r4
 80088c2:	4630      	mov	r0, r6
 80088c4:	f7ff fc70 	bl	80081a8 <__swsetup_r>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d09d      	beq.n	8008808 <_vfiprintf_r+0x2c>
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	b01d      	add	sp, #116	; 0x74
 80088d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d6:	46a8      	mov	r8, r5
 80088d8:	e7a2      	b.n	8008820 <_vfiprintf_r+0x44>
 80088da:	4a44      	ldr	r2, [pc, #272]	; (80089ec <_vfiprintf_r+0x210>)
 80088dc:	4645      	mov	r5, r8
 80088de:	1a80      	subs	r0, r0, r2
 80088e0:	fa0b f000 	lsl.w	r0, fp, r0
 80088e4:	4318      	orrs	r0, r3
 80088e6:	9004      	str	r0, [sp, #16]
 80088e8:	e7be      	b.n	8008868 <_vfiprintf_r+0x8c>
 80088ea:	9a03      	ldr	r2, [sp, #12]
 80088ec:	1d11      	adds	r1, r2, #4
 80088ee:	6812      	ldr	r2, [r2, #0]
 80088f0:	9103      	str	r1, [sp, #12]
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	db01      	blt.n	80088fa <_vfiprintf_r+0x11e>
 80088f6:	9207      	str	r2, [sp, #28]
 80088f8:	e004      	b.n	8008904 <_vfiprintf_r+0x128>
 80088fa:	4252      	negs	r2, r2
 80088fc:	f043 0302 	orr.w	r3, r3, #2
 8008900:	9207      	str	r2, [sp, #28]
 8008902:	9304      	str	r3, [sp, #16]
 8008904:	f898 3000 	ldrb.w	r3, [r8]
 8008908:	2b2e      	cmp	r3, #46	; 0x2e
 800890a:	d10e      	bne.n	800892a <_vfiprintf_r+0x14e>
 800890c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008910:	2b2a      	cmp	r3, #42	; 0x2a
 8008912:	d138      	bne.n	8008986 <_vfiprintf_r+0x1aa>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	f108 0802 	add.w	r8, r8, #2
 800891a:	1d1a      	adds	r2, r3, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	9203      	str	r2, [sp, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfb8      	it	lt
 8008924:	f04f 33ff 	movlt.w	r3, #4294967295
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	4d33      	ldr	r5, [pc, #204]	; (80089f8 <_vfiprintf_r+0x21c>)
 800892c:	2203      	movs	r2, #3
 800892e:	f898 1000 	ldrb.w	r1, [r8]
 8008932:	4628      	mov	r0, r5
 8008934:	f000 fa9a 	bl	8008e6c <memchr>
 8008938:	b140      	cbz	r0, 800894c <_vfiprintf_r+0x170>
 800893a:	2340      	movs	r3, #64	; 0x40
 800893c:	1b40      	subs	r0, r0, r5
 800893e:	fa03 f000 	lsl.w	r0, r3, r0
 8008942:	9b04      	ldr	r3, [sp, #16]
 8008944:	f108 0801 	add.w	r8, r8, #1
 8008948:	4303      	orrs	r3, r0
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	f898 1000 	ldrb.w	r1, [r8]
 8008950:	2206      	movs	r2, #6
 8008952:	482a      	ldr	r0, [pc, #168]	; (80089fc <_vfiprintf_r+0x220>)
 8008954:	f108 0701 	add.w	r7, r8, #1
 8008958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800895c:	f000 fa86 	bl	8008e6c <memchr>
 8008960:	2800      	cmp	r0, #0
 8008962:	d037      	beq.n	80089d4 <_vfiprintf_r+0x1f8>
 8008964:	4b26      	ldr	r3, [pc, #152]	; (8008a00 <_vfiprintf_r+0x224>)
 8008966:	bb1b      	cbnz	r3, 80089b0 <_vfiprintf_r+0x1d4>
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	3307      	adds	r3, #7
 800896c:	f023 0307 	bic.w	r3, r3, #7
 8008970:	3308      	adds	r3, #8
 8008972:	9303      	str	r3, [sp, #12]
 8008974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008976:	444b      	add	r3, r9
 8008978:	9309      	str	r3, [sp, #36]	; 0x24
 800897a:	e750      	b.n	800881e <_vfiprintf_r+0x42>
 800897c:	fb05 3202 	mla	r2, r5, r2, r3
 8008980:	2001      	movs	r0, #1
 8008982:	4688      	mov	r8, r1
 8008984:	e78a      	b.n	800889c <_vfiprintf_r+0xc0>
 8008986:	2300      	movs	r3, #0
 8008988:	250a      	movs	r5, #10
 800898a:	4619      	mov	r1, r3
 800898c:	f108 0801 	add.w	r8, r8, #1
 8008990:	9305      	str	r3, [sp, #20]
 8008992:	4640      	mov	r0, r8
 8008994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008998:	3a30      	subs	r2, #48	; 0x30
 800899a:	2a09      	cmp	r2, #9
 800899c:	d903      	bls.n	80089a6 <_vfiprintf_r+0x1ca>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0c3      	beq.n	800892a <_vfiprintf_r+0x14e>
 80089a2:	9105      	str	r1, [sp, #20]
 80089a4:	e7c1      	b.n	800892a <_vfiprintf_r+0x14e>
 80089a6:	fb05 2101 	mla	r1, r5, r1, r2
 80089aa:	2301      	movs	r3, #1
 80089ac:	4680      	mov	r8, r0
 80089ae:	e7f0      	b.n	8008992 <_vfiprintf_r+0x1b6>
 80089b0:	ab03      	add	r3, sp, #12
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	4622      	mov	r2, r4
 80089b6:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <_vfiprintf_r+0x228>)
 80089b8:	a904      	add	r1, sp, #16
 80089ba:	4630      	mov	r0, r6
 80089bc:	f3af 8000 	nop.w
 80089c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089c4:	4681      	mov	r9, r0
 80089c6:	d1d5      	bne.n	8008974 <_vfiprintf_r+0x198>
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	065b      	lsls	r3, r3, #25
 80089cc:	f53f af7e 	bmi.w	80088cc <_vfiprintf_r+0xf0>
 80089d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089d2:	e77d      	b.n	80088d0 <_vfiprintf_r+0xf4>
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	4622      	mov	r2, r4
 80089da:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <_vfiprintf_r+0x228>)
 80089dc:	a904      	add	r1, sp, #16
 80089de:	4630      	mov	r0, r6
 80089e0:	f000 f888 	bl	8008af4 <_printf_i>
 80089e4:	e7ec      	b.n	80089c0 <_vfiprintf_r+0x1e4>
 80089e6:	bf00      	nop
 80089e8:	08008fd8 	.word	0x08008fd8
 80089ec:	08009018 	.word	0x08009018
 80089f0:	08008ff8 	.word	0x08008ff8
 80089f4:	08008fb8 	.word	0x08008fb8
 80089f8:	0800901e 	.word	0x0800901e
 80089fc:	08009022 	.word	0x08009022
 8008a00:	00000000 	.word	0x00000000
 8008a04:	080087b7 	.word	0x080087b7

08008a08 <_printf_common>:
 8008a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a0c:	4691      	mov	r9, r2
 8008a0e:	461f      	mov	r7, r3
 8008a10:	688a      	ldr	r2, [r1, #8]
 8008a12:	690b      	ldr	r3, [r1, #16]
 8008a14:	4606      	mov	r6, r0
 8008a16:	4293      	cmp	r3, r2
 8008a18:	bfb8      	it	lt
 8008a1a:	4613      	movlt	r3, r2
 8008a1c:	f8c9 3000 	str.w	r3, [r9]
 8008a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a24:	460c      	mov	r4, r1
 8008a26:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a2a:	b112      	cbz	r2, 8008a32 <_printf_common+0x2a>
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	f8c9 3000 	str.w	r3, [r9]
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	0699      	lsls	r1, r3, #26
 8008a36:	bf42      	ittt	mi
 8008a38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a3c:	3302      	addmi	r3, #2
 8008a3e:	f8c9 3000 	strmi.w	r3, [r9]
 8008a42:	6825      	ldr	r5, [r4, #0]
 8008a44:	f015 0506 	ands.w	r5, r5, #6
 8008a48:	d107      	bne.n	8008a5a <_printf_common+0x52>
 8008a4a:	f104 0a19 	add.w	sl, r4, #25
 8008a4e:	68e3      	ldr	r3, [r4, #12]
 8008a50:	f8d9 2000 	ldr.w	r2, [r9]
 8008a54:	1a9b      	subs	r3, r3, r2
 8008a56:	42ab      	cmp	r3, r5
 8008a58:	dc29      	bgt.n	8008aae <_printf_common+0xa6>
 8008a5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a5e:	6822      	ldr	r2, [r4, #0]
 8008a60:	3300      	adds	r3, #0
 8008a62:	bf18      	it	ne
 8008a64:	2301      	movne	r3, #1
 8008a66:	0692      	lsls	r2, r2, #26
 8008a68:	d42e      	bmi.n	8008ac8 <_printf_common+0xc0>
 8008a6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a6e:	4639      	mov	r1, r7
 8008a70:	4630      	mov	r0, r6
 8008a72:	47c0      	blx	r8
 8008a74:	3001      	adds	r0, #1
 8008a76:	d021      	beq.n	8008abc <_printf_common+0xb4>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	68e5      	ldr	r5, [r4, #12]
 8008a7c:	f003 0306 	and.w	r3, r3, #6
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	bf18      	it	ne
 8008a84:	2500      	movne	r5, #0
 8008a86:	f8d9 2000 	ldr.w	r2, [r9]
 8008a8a:	f04f 0900 	mov.w	r9, #0
 8008a8e:	bf08      	it	eq
 8008a90:	1aad      	subeq	r5, r5, r2
 8008a92:	68a3      	ldr	r3, [r4, #8]
 8008a94:	6922      	ldr	r2, [r4, #16]
 8008a96:	bf08      	it	eq
 8008a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	bfc4      	itt	gt
 8008aa0:	1a9b      	subgt	r3, r3, r2
 8008aa2:	18ed      	addgt	r5, r5, r3
 8008aa4:	341a      	adds	r4, #26
 8008aa6:	454d      	cmp	r5, r9
 8008aa8:	d11a      	bne.n	8008ae0 <_printf_common+0xd8>
 8008aaa:	2000      	movs	r0, #0
 8008aac:	e008      	b.n	8008ac0 <_printf_common+0xb8>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	4652      	mov	r2, sl
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	47c0      	blx	r8
 8008ab8:	3001      	adds	r0, #1
 8008aba:	d103      	bne.n	8008ac4 <_printf_common+0xbc>
 8008abc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac4:	3501      	adds	r5, #1
 8008ac6:	e7c2      	b.n	8008a4e <_printf_common+0x46>
 8008ac8:	2030      	movs	r0, #48	; 0x30
 8008aca:	18e1      	adds	r1, r4, r3
 8008acc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ad6:	4422      	add	r2, r4
 8008ad8:	3302      	adds	r3, #2
 8008ada:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ade:	e7c4      	b.n	8008a6a <_printf_common+0x62>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	47c0      	blx	r8
 8008aea:	3001      	adds	r0, #1
 8008aec:	d0e6      	beq.n	8008abc <_printf_common+0xb4>
 8008aee:	f109 0901 	add.w	r9, r9, #1
 8008af2:	e7d8      	b.n	8008aa6 <_printf_common+0x9e>

08008af4 <_printf_i>:
 8008af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008af8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008afc:	460c      	mov	r4, r1
 8008afe:	7e09      	ldrb	r1, [r1, #24]
 8008b00:	b085      	sub	sp, #20
 8008b02:	296e      	cmp	r1, #110	; 0x6e
 8008b04:	4617      	mov	r7, r2
 8008b06:	4606      	mov	r6, r0
 8008b08:	4698      	mov	r8, r3
 8008b0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b0c:	f000 80b3 	beq.w	8008c76 <_printf_i+0x182>
 8008b10:	d822      	bhi.n	8008b58 <_printf_i+0x64>
 8008b12:	2963      	cmp	r1, #99	; 0x63
 8008b14:	d036      	beq.n	8008b84 <_printf_i+0x90>
 8008b16:	d80a      	bhi.n	8008b2e <_printf_i+0x3a>
 8008b18:	2900      	cmp	r1, #0
 8008b1a:	f000 80b9 	beq.w	8008c90 <_printf_i+0x19c>
 8008b1e:	2958      	cmp	r1, #88	; 0x58
 8008b20:	f000 8083 	beq.w	8008c2a <_printf_i+0x136>
 8008b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008b2c:	e032      	b.n	8008b94 <_printf_i+0xa0>
 8008b2e:	2964      	cmp	r1, #100	; 0x64
 8008b30:	d001      	beq.n	8008b36 <_printf_i+0x42>
 8008b32:	2969      	cmp	r1, #105	; 0x69
 8008b34:	d1f6      	bne.n	8008b24 <_printf_i+0x30>
 8008b36:	6820      	ldr	r0, [r4, #0]
 8008b38:	6813      	ldr	r3, [r2, #0]
 8008b3a:	0605      	lsls	r5, r0, #24
 8008b3c:	f103 0104 	add.w	r1, r3, #4
 8008b40:	d52a      	bpl.n	8008b98 <_printf_i+0xa4>
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6011      	str	r1, [r2, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	da03      	bge.n	8008b52 <_printf_i+0x5e>
 8008b4a:	222d      	movs	r2, #45	; 0x2d
 8008b4c:	425b      	negs	r3, r3
 8008b4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b52:	486f      	ldr	r0, [pc, #444]	; (8008d10 <_printf_i+0x21c>)
 8008b54:	220a      	movs	r2, #10
 8008b56:	e039      	b.n	8008bcc <_printf_i+0xd8>
 8008b58:	2973      	cmp	r1, #115	; 0x73
 8008b5a:	f000 809d 	beq.w	8008c98 <_printf_i+0x1a4>
 8008b5e:	d808      	bhi.n	8008b72 <_printf_i+0x7e>
 8008b60:	296f      	cmp	r1, #111	; 0x6f
 8008b62:	d020      	beq.n	8008ba6 <_printf_i+0xb2>
 8008b64:	2970      	cmp	r1, #112	; 0x70
 8008b66:	d1dd      	bne.n	8008b24 <_printf_i+0x30>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	f043 0320 	orr.w	r3, r3, #32
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	e003      	b.n	8008b7a <_printf_i+0x86>
 8008b72:	2975      	cmp	r1, #117	; 0x75
 8008b74:	d017      	beq.n	8008ba6 <_printf_i+0xb2>
 8008b76:	2978      	cmp	r1, #120	; 0x78
 8008b78:	d1d4      	bne.n	8008b24 <_printf_i+0x30>
 8008b7a:	2378      	movs	r3, #120	; 0x78
 8008b7c:	4865      	ldr	r0, [pc, #404]	; (8008d14 <_printf_i+0x220>)
 8008b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b82:	e055      	b.n	8008c30 <_printf_i+0x13c>
 8008b84:	6813      	ldr	r3, [r2, #0]
 8008b86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b8a:	1d19      	adds	r1, r3, #4
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6011      	str	r1, [r2, #0]
 8008b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b94:	2301      	movs	r3, #1
 8008b96:	e08c      	b.n	8008cb2 <_printf_i+0x1be>
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b9e:	6011      	str	r1, [r2, #0]
 8008ba0:	bf18      	it	ne
 8008ba2:	b21b      	sxthne	r3, r3
 8008ba4:	e7cf      	b.n	8008b46 <_printf_i+0x52>
 8008ba6:	6813      	ldr	r3, [r2, #0]
 8008ba8:	6825      	ldr	r5, [r4, #0]
 8008baa:	1d18      	adds	r0, r3, #4
 8008bac:	6010      	str	r0, [r2, #0]
 8008bae:	0628      	lsls	r0, r5, #24
 8008bb0:	d501      	bpl.n	8008bb6 <_printf_i+0xc2>
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	e002      	b.n	8008bbc <_printf_i+0xc8>
 8008bb6:	0668      	lsls	r0, r5, #25
 8008bb8:	d5fb      	bpl.n	8008bb2 <_printf_i+0xbe>
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	296f      	cmp	r1, #111	; 0x6f
 8008bbe:	bf14      	ite	ne
 8008bc0:	220a      	movne	r2, #10
 8008bc2:	2208      	moveq	r2, #8
 8008bc4:	4852      	ldr	r0, [pc, #328]	; (8008d10 <_printf_i+0x21c>)
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bcc:	6865      	ldr	r5, [r4, #4]
 8008bce:	2d00      	cmp	r5, #0
 8008bd0:	60a5      	str	r5, [r4, #8]
 8008bd2:	f2c0 8095 	blt.w	8008d00 <_printf_i+0x20c>
 8008bd6:	6821      	ldr	r1, [r4, #0]
 8008bd8:	f021 0104 	bic.w	r1, r1, #4
 8008bdc:	6021      	str	r1, [r4, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d13d      	bne.n	8008c5e <_printf_i+0x16a>
 8008be2:	2d00      	cmp	r5, #0
 8008be4:	f040 808e 	bne.w	8008d04 <_printf_i+0x210>
 8008be8:	4665      	mov	r5, ip
 8008bea:	2a08      	cmp	r2, #8
 8008bec:	d10b      	bne.n	8008c06 <_printf_i+0x112>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	07db      	lsls	r3, r3, #31
 8008bf2:	d508      	bpl.n	8008c06 <_printf_i+0x112>
 8008bf4:	6923      	ldr	r3, [r4, #16]
 8008bf6:	6862      	ldr	r2, [r4, #4]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	bfde      	ittt	le
 8008bfc:	2330      	movle	r3, #48	; 0x30
 8008bfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c06:	ebac 0305 	sub.w	r3, ip, r5
 8008c0a:	6123      	str	r3, [r4, #16]
 8008c0c:	f8cd 8000 	str.w	r8, [sp]
 8008c10:	463b      	mov	r3, r7
 8008c12:	aa03      	add	r2, sp, #12
 8008c14:	4621      	mov	r1, r4
 8008c16:	4630      	mov	r0, r6
 8008c18:	f7ff fef6 	bl	8008a08 <_printf_common>
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d14d      	bne.n	8008cbc <_printf_i+0x1c8>
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
 8008c24:	b005      	add	sp, #20
 8008c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c2a:	4839      	ldr	r0, [pc, #228]	; (8008d10 <_printf_i+0x21c>)
 8008c2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008c30:	6813      	ldr	r3, [r2, #0]
 8008c32:	6821      	ldr	r1, [r4, #0]
 8008c34:	1d1d      	adds	r5, r3, #4
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6015      	str	r5, [r2, #0]
 8008c3a:	060a      	lsls	r2, r1, #24
 8008c3c:	d50b      	bpl.n	8008c56 <_printf_i+0x162>
 8008c3e:	07ca      	lsls	r2, r1, #31
 8008c40:	bf44      	itt	mi
 8008c42:	f041 0120 	orrmi.w	r1, r1, #32
 8008c46:	6021      	strmi	r1, [r4, #0]
 8008c48:	b91b      	cbnz	r3, 8008c52 <_printf_i+0x15e>
 8008c4a:	6822      	ldr	r2, [r4, #0]
 8008c4c:	f022 0220 	bic.w	r2, r2, #32
 8008c50:	6022      	str	r2, [r4, #0]
 8008c52:	2210      	movs	r2, #16
 8008c54:	e7b7      	b.n	8008bc6 <_printf_i+0xd2>
 8008c56:	064d      	lsls	r5, r1, #25
 8008c58:	bf48      	it	mi
 8008c5a:	b29b      	uxthmi	r3, r3
 8008c5c:	e7ef      	b.n	8008c3e <_printf_i+0x14a>
 8008c5e:	4665      	mov	r5, ip
 8008c60:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c64:	fb02 3311 	mls	r3, r2, r1, r3
 8008c68:	5cc3      	ldrb	r3, [r0, r3]
 8008c6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c6e:	460b      	mov	r3, r1
 8008c70:	2900      	cmp	r1, #0
 8008c72:	d1f5      	bne.n	8008c60 <_printf_i+0x16c>
 8008c74:	e7b9      	b.n	8008bea <_printf_i+0xf6>
 8008c76:	6813      	ldr	r3, [r2, #0]
 8008c78:	6825      	ldr	r5, [r4, #0]
 8008c7a:	1d18      	adds	r0, r3, #4
 8008c7c:	6961      	ldr	r1, [r4, #20]
 8008c7e:	6010      	str	r0, [r2, #0]
 8008c80:	0628      	lsls	r0, r5, #24
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	d501      	bpl.n	8008c8a <_printf_i+0x196>
 8008c86:	6019      	str	r1, [r3, #0]
 8008c88:	e002      	b.n	8008c90 <_printf_i+0x19c>
 8008c8a:	066a      	lsls	r2, r5, #25
 8008c8c:	d5fb      	bpl.n	8008c86 <_printf_i+0x192>
 8008c8e:	8019      	strh	r1, [r3, #0]
 8008c90:	2300      	movs	r3, #0
 8008c92:	4665      	mov	r5, ip
 8008c94:	6123      	str	r3, [r4, #16]
 8008c96:	e7b9      	b.n	8008c0c <_printf_i+0x118>
 8008c98:	6813      	ldr	r3, [r2, #0]
 8008c9a:	1d19      	adds	r1, r3, #4
 8008c9c:	6011      	str	r1, [r2, #0]
 8008c9e:	681d      	ldr	r5, [r3, #0]
 8008ca0:	6862      	ldr	r2, [r4, #4]
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f000 f8e1 	bl	8008e6c <memchr>
 8008caa:	b108      	cbz	r0, 8008cb0 <_printf_i+0x1bc>
 8008cac:	1b40      	subs	r0, r0, r5
 8008cae:	6060      	str	r0, [r4, #4]
 8008cb0:	6863      	ldr	r3, [r4, #4]
 8008cb2:	6123      	str	r3, [r4, #16]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cba:	e7a7      	b.n	8008c0c <_printf_i+0x118>
 8008cbc:	6923      	ldr	r3, [r4, #16]
 8008cbe:	462a      	mov	r2, r5
 8008cc0:	4639      	mov	r1, r7
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	47c0      	blx	r8
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d0aa      	beq.n	8008c20 <_printf_i+0x12c>
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	079b      	lsls	r3, r3, #30
 8008cce:	d413      	bmi.n	8008cf8 <_printf_i+0x204>
 8008cd0:	68e0      	ldr	r0, [r4, #12]
 8008cd2:	9b03      	ldr	r3, [sp, #12]
 8008cd4:	4298      	cmp	r0, r3
 8008cd6:	bfb8      	it	lt
 8008cd8:	4618      	movlt	r0, r3
 8008cda:	e7a3      	b.n	8008c24 <_printf_i+0x130>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	464a      	mov	r2, r9
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	47c0      	blx	r8
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	d09a      	beq.n	8008c20 <_printf_i+0x12c>
 8008cea:	3501      	adds	r5, #1
 8008cec:	68e3      	ldr	r3, [r4, #12]
 8008cee:	9a03      	ldr	r2, [sp, #12]
 8008cf0:	1a9b      	subs	r3, r3, r2
 8008cf2:	42ab      	cmp	r3, r5
 8008cf4:	dcf2      	bgt.n	8008cdc <_printf_i+0x1e8>
 8008cf6:	e7eb      	b.n	8008cd0 <_printf_i+0x1dc>
 8008cf8:	2500      	movs	r5, #0
 8008cfa:	f104 0919 	add.w	r9, r4, #25
 8008cfe:	e7f5      	b.n	8008cec <_printf_i+0x1f8>
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1ac      	bne.n	8008c5e <_printf_i+0x16a>
 8008d04:	7803      	ldrb	r3, [r0, #0]
 8008d06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d0e:	e76c      	b.n	8008bea <_printf_i+0xf6>
 8008d10:	08009029 	.word	0x08009029
 8008d14:	0800903a 	.word	0x0800903a

08008d18 <_sbrk_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	4c05      	ldr	r4, [pc, #20]	; (8008d34 <_sbrk_r+0x1c>)
 8008d1e:	4605      	mov	r5, r0
 8008d20:	4608      	mov	r0, r1
 8008d22:	6023      	str	r3, [r4, #0]
 8008d24:	f7f7 fd10 	bl	8000748 <_sbrk>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d102      	bne.n	8008d32 <_sbrk_r+0x1a>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <_sbrk_r+0x1a>
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	2000209c 	.word	0x2000209c

08008d38 <__sread>:
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d40:	f000 f8a4 	bl	8008e8c <_read_r>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	bfab      	itete	ge
 8008d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d4c:	181b      	addge	r3, r3, r0
 8008d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d52:	bfac      	ite	ge
 8008d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d56:	81a3      	strhlt	r3, [r4, #12]
 8008d58:	bd10      	pop	{r4, pc}

08008d5a <__swrite>:
 8008d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5e:	461f      	mov	r7, r3
 8008d60:	898b      	ldrh	r3, [r1, #12]
 8008d62:	4605      	mov	r5, r0
 8008d64:	05db      	lsls	r3, r3, #23
 8008d66:	460c      	mov	r4, r1
 8008d68:	4616      	mov	r6, r2
 8008d6a:	d505      	bpl.n	8008d78 <__swrite+0x1e>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d74:	f000 f868 	bl	8008e48 <_lseek_r>
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d80:	81a3      	strh	r3, [r4, #12]
 8008d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d86:	463b      	mov	r3, r7
 8008d88:	4628      	mov	r0, r5
 8008d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8e:	f000 b817 	b.w	8008dc0 <_write_r>

08008d92 <__sseek>:
 8008d92:	b510      	push	{r4, lr}
 8008d94:	460c      	mov	r4, r1
 8008d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9a:	f000 f855 	bl	8008e48 <_lseek_r>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	bf15      	itete	ne
 8008da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dae:	81a3      	strheq	r3, [r4, #12]
 8008db0:	bf18      	it	ne
 8008db2:	81a3      	strhne	r3, [r4, #12]
 8008db4:	bd10      	pop	{r4, pc}

08008db6 <__sclose>:
 8008db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dba:	f000 b813 	b.w	8008de4 <_close_r>
	...

08008dc0 <_write_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	4608      	mov	r0, r1
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4c05      	ldr	r4, [pc, #20]	; (8008de0 <_write_r+0x20>)
 8008dcc:	6022      	str	r2, [r4, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f7f7 fc6d 	bl	80006ae <_write>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_write_r+0x1e>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_write_r+0x1e>
 8008ddc:	602b      	str	r3, [r5, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	2000209c 	.word	0x2000209c

08008de4 <_close_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	2300      	movs	r3, #0
 8008de8:	4c05      	ldr	r4, [pc, #20]	; (8008e00 <_close_r+0x1c>)
 8008dea:	4605      	mov	r5, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	f7f7 fc79 	bl	80006e6 <_close>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_close_r+0x1a>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_close_r+0x1a>
 8008dfc:	602b      	str	r3, [r5, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	2000209c 	.word	0x2000209c

08008e04 <_fstat_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	2300      	movs	r3, #0
 8008e08:	4c06      	ldr	r4, [pc, #24]	; (8008e24 <_fstat_r+0x20>)
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	4611      	mov	r1, r2
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	f7f7 fc73 	bl	80006fc <_fstat>
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	d102      	bne.n	8008e20 <_fstat_r+0x1c>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	b103      	cbz	r3, 8008e20 <_fstat_r+0x1c>
 8008e1e:	602b      	str	r3, [r5, #0]
 8008e20:	bd38      	pop	{r3, r4, r5, pc}
 8008e22:	bf00      	nop
 8008e24:	2000209c 	.word	0x2000209c

08008e28 <_isatty_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	4c05      	ldr	r4, [pc, #20]	; (8008e44 <_isatty_r+0x1c>)
 8008e2e:	4605      	mov	r5, r0
 8008e30:	4608      	mov	r0, r1
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	f7f7 fc71 	bl	800071a <_isatty>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d102      	bne.n	8008e42 <_isatty_r+0x1a>
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	b103      	cbz	r3, 8008e42 <_isatty_r+0x1a>
 8008e40:	602b      	str	r3, [r5, #0]
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	2000209c 	.word	0x2000209c

08008e48 <_lseek_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	2200      	movs	r2, #0
 8008e52:	4c05      	ldr	r4, [pc, #20]	; (8008e68 <_lseek_r+0x20>)
 8008e54:	6022      	str	r2, [r4, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f7f7 fc69 	bl	800072e <_lseek>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_lseek_r+0x1e>
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_lseek_r+0x1e>
 8008e64:	602b      	str	r3, [r5, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	2000209c 	.word	0x2000209c

08008e6c <memchr>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	b2c9      	uxtb	r1, r1
 8008e70:	4402      	add	r2, r0
 8008e72:	4290      	cmp	r0, r2
 8008e74:	4603      	mov	r3, r0
 8008e76:	d101      	bne.n	8008e7c <memchr+0x10>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e003      	b.n	8008e84 <memchr+0x18>
 8008e7c:	781c      	ldrb	r4, [r3, #0]
 8008e7e:	3001      	adds	r0, #1
 8008e80:	428c      	cmp	r4, r1
 8008e82:	d1f6      	bne.n	8008e72 <memchr+0x6>
 8008e84:	4618      	mov	r0, r3
 8008e86:	bd10      	pop	{r4, pc}

08008e88 <__malloc_lock>:
 8008e88:	4770      	bx	lr

08008e8a <__malloc_unlock>:
 8008e8a:	4770      	bx	lr

08008e8c <_read_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4605      	mov	r5, r0
 8008e90:	4608      	mov	r0, r1
 8008e92:	4611      	mov	r1, r2
 8008e94:	2200      	movs	r2, #0
 8008e96:	4c05      	ldr	r4, [pc, #20]	; (8008eac <_read_r+0x20>)
 8008e98:	6022      	str	r2, [r4, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	f7f7 fbea 	bl	8000674 <_read>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d102      	bne.n	8008eaa <_read_r+0x1e>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	b103      	cbz	r3, 8008eaa <_read_r+0x1e>
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	2000209c 	.word	0x2000209c

08008eb0 <_init>:
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	bf00      	nop
 8008eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb6:	bc08      	pop	{r3}
 8008eb8:	469e      	mov	lr, r3
 8008eba:	4770      	bx	lr

08008ebc <_fini>:
 8008ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ebe:	bf00      	nop
 8008ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ec2:	bc08      	pop	{r3}
 8008ec4:	469e      	mov	lr, r3
 8008ec6:	4770      	bx	lr
