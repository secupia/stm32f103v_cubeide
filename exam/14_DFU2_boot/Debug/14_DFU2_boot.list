
14_DFU2_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d9c  08003d9c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08003d9c  08003d9c  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d9c  08003d9c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08003da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015fc  20000100  08003ea0  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016fc  08003ea0  000216fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022154  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005062  00000000  00000000  00042279  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000083c8  00000000  00000000  000472db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ed0  00000000  00000000  0004f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000f18  00000000  00000000  00050578  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001c0a8  00000000  00000000  00051490  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017b5d  00000000  00000000  0006d538  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007bd37  00000000  00000000  00085095  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00100dcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002280  00000000  00000000  00100e48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000100 	.word	0x20000100
 8000200:	00000000 	.word	0x00000000
 8000204:	08003cc4 	.word	0x08003cc4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000104 	.word	0x20000104
 8000220:	08003cc4 	.word	0x08003cc4

08000224 <apInit>:

void apInit(void)
{
  //uartOpen(_DEF_UART1, 57600);  // USB
  //uartOpen(_DEF_UART2, 57600);  // UART1
}
 8000224:	4770      	bx	lr

08000226 <apMain>:

void apMain(void)
{
 8000226:	b510      	push	{r4, lr}
  uint32_t pre_time;

  pre_time = millis();
 8000228:	f000 f858 	bl	80002dc <millis>
 800022c:	4604      	mov	r4, r0

  while(1)
  {
    if(millis()-pre_time >= 100)
 800022e:	f000 f855 	bl	80002dc <millis>
 8000232:	1b00      	subs	r0, r0, r4
 8000234:	2863      	cmp	r0, #99	; 0x63
 8000236:	d9fa      	bls.n	800022e <apMain+0x8>
    {
      pre_time = millis();
 8000238:	f000 f850 	bl	80002dc <millis>
 800023c:	4604      	mov	r4, r0
      ledToggle(_DEF_LED3);
 800023e:	2002      	movs	r0, #2
 8000240:	f000 fa22 	bl	8000688 <ledToggle>
 8000244:	e7f3      	b.n	800022e <apMain+0x8>
	...

08000248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000248:	b570      	push	{r4, r5, r6, lr}
 800024a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	2400      	movs	r4, #0
 800024e:	9402      	str	r4, [sp, #8]
 8000250:	9403      	str	r4, [sp, #12]
 8000252:	9404      	str	r4, [sp, #16]
 8000254:	9405      	str	r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000256:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <MX_GPIO_Init+0x80>)
 8000258:	699a      	ldr	r2, [r3, #24]
 800025a:	f042 0208 	orr.w	r2, r2, #8
 800025e:	619a      	str	r2, [r3, #24]
 8000260:	699a      	ldr	r2, [r3, #24]
 8000262:	f002 0208 	and.w	r2, r2, #8
 8000266:	9200      	str	r2, [sp, #0]
 8000268:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	699a      	ldr	r2, [r3, #24]
 800026c:	f042 0204 	orr.w	r2, r2, #4
 8000270:	619a      	str	r2, [r3, #24]
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0304 	and.w	r3, r3, #4
 8000278:	9301      	str	r3, [sp, #4]
 800027a:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 800027c:	4e13      	ldr	r6, [pc, #76]	; (80002cc <MX_GPIO_Init+0x84>)
 800027e:	4622      	mov	r2, r4
 8000280:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000284:	4630      	mov	r0, r6
 8000286:	f000 fe13 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 800028a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800028e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000290:	2301      	movs	r3, #1
 8000292:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000294:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000296:	2502      	movs	r5, #2
 8000298:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029a:	a902      	add	r1, sp, #8
 800029c:	4630      	mov	r0, r6
 800029e:	f000 fd0f 	bl	8000cc0 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002a2:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80002a6:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80002a8:	2311      	movs	r3, #17
 80002aa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ac:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ae:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b0:	4d07      	ldr	r5, [pc, #28]	; (80002d0 <MX_GPIO_Init+0x88>)
 80002b2:	a902      	add	r1, sp, #8
 80002b4:	4628      	mov	r0, r5
 80002b6:	f000 fd03 	bl	8000cc0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80002ba:	4622      	mov	r2, r4
 80002bc:	4631      	mov	r1, r6
 80002be:	4628      	mov	r0, r5
 80002c0:	f000 fdf6 	bl	8000eb0 <HAL_GPIO_WritePin>

}
 80002c4:	b006      	add	sp, #24
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	40010800 	.word	0x40010800

080002d4 <delay>:
{
 80002d4:	b508      	push	{r3, lr}
  HAL_Delay(ms);
 80002d6:	f000 fb11 	bl	80008fc <HAL_Delay>
}
 80002da:	bd08      	pop	{r3, pc}

080002dc <millis>:
{
 80002dc:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80002de:	f000 fb07 	bl	80008f0 <HAL_GetTick>
}
 80002e2:	bd08      	pop	{r3, pc}

080002e4 <SystemClock_Config>:
{
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e8:	2400      	movs	r4, #0
 80002ea:	940e      	str	r4, [sp, #56]	; 0x38
 80002ec:	9411      	str	r4, [sp, #68]	; 0x44
 80002ee:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	9407      	str	r4, [sp, #28]
 80002f2:	9408      	str	r4, [sp, #32]
 80002f4:	9409      	str	r4, [sp, #36]	; 0x24
 80002f6:	940a      	str	r4, [sp, #40]	; 0x28
 80002f8:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fa:	9401      	str	r4, [sp, #4]
 80002fc:	9402      	str	r4, [sp, #8]
 80002fe:	9403      	str	r4, [sp, #12]
 8000300:	9404      	str	r4, [sp, #16]
 8000302:	9405      	str	r4, [sp, #20]
 8000304:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000306:	2305      	movs	r3, #5
 8000308:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800030e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000310:	2201      	movs	r2, #1
 8000312:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	2502      	movs	r5, #2
 8000318:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000320:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	a80c      	add	r0, sp, #48	; 0x30
 8000324:	f001 fab4 	bl	8001890 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000334:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000336:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000338:	4629      	mov	r1, r5
 800033a:	a807      	add	r0, sp, #28
 800033c:	f001 fcce 	bl	8001cdc <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000340:	2311      	movs	r3, #17
 8000342:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000348:	9302      	str	r3, [sp, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800034a:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034c:	a801      	add	r0, sp, #4
 800034e:	f001 fda9 	bl	8001ea4 <HAL_RCCEx_PeriphCLKConfig>
}
 8000352:	b017      	add	sp, #92	; 0x5c
 8000354:	bd30      	pop	{r4, r5, pc}
	...

08000358 <bspInit>:
{
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	b086      	sub	sp, #24
  HAL_Init();
 800035c:	f000 faaa 	bl	80008b4 <HAL_Init>
  SystemClock_Config();
 8000360:	f7ff ffc0 	bl	80002e4 <SystemClock_Config>
  MX_GPIO_Init();
 8000364:	f7ff ff70 	bl	8000248 <MX_GPIO_Init>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <bspInit+0x60>)
 800036a:	699a      	ldr	r2, [r3, #24]
 800036c:	f042 0220 	orr.w	r2, r2, #32
 8000370:	619a      	str	r2, [r3, #24]
 8000372:	699a      	ldr	r2, [r3, #24]
 8000374:	f002 0220 	and.w	r2, r2, #32
 8000378:	9200      	str	r2, [sp, #0]
 800037a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	699a      	ldr	r2, [r3, #24]
 800037e:	f042 0204 	orr.w	r2, r2, #4
 8000382:	619a      	str	r2, [r3, #24]
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0304 	and.w	r3, r3, #4
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	2600      	movs	r6, #0
 8000390:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000392:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8000396:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000398:	2311      	movs	r3, #17
 800039a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039c:	2302      	movs	r3, #2
 800039e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a0:	4c06      	ldr	r4, [pc, #24]	; (80003bc <bspInit+0x64>)
 80003a2:	a902      	add	r1, sp, #8
 80003a4:	4620      	mov	r0, r4
 80003a6:	f000 fc8b 	bl	8000cc0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80003aa:	4632      	mov	r2, r6
 80003ac:	4629      	mov	r1, r5
 80003ae:	4620      	mov	r0, r4
 80003b0:	f000 fd7e 	bl	8000eb0 <HAL_GPIO_WritePin>
}
 80003b4:	b006      	add	sp, #24
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010800 	.word	0x40010800

080003c0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003c0:	4770      	bx	lr
	...

080003c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <HAL_MspInit+0x3c>)
 80003c8:	699a      	ldr	r2, [r3, #24]
 80003ca:	f042 0201 	orr.w	r2, r2, #1
 80003ce:	619a      	str	r2, [r3, #24]
 80003d0:	699a      	ldr	r2, [r3, #24]
 80003d2:	f002 0201 	and.w	r2, r2, #1
 80003d6:	9200      	str	r2, [sp, #0]
 80003d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	69da      	ldr	r2, [r3, #28]
 80003dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003e0:	61da      	str	r2, [r3, #28]
 80003e2:	69db      	ldr	r3, [r3, #28]
 80003e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e8:	9301      	str	r3, [sp, #4]
 80003ea:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ec:	4a05      	ldr	r2, [pc, #20]	; (8000404 <HAL_MspInit+0x40>)
 80003ee:	6853      	ldr	r3, [r2, #4]
 80003f0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	b002      	add	sp, #8
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40010000 	.word	0x40010000

08000408 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000408:	4770      	bx	lr

0800040a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800040a:	e7fe      	b.n	800040a <HardFault_Handler>

0800040c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800040c:	e7fe      	b.n	800040c <MemManage_Handler>

0800040e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040e:	e7fe      	b.n	800040e <BusFault_Handler>

08000410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000410:	e7fe      	b.n	8000410 <UsageFault_Handler>

08000412 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000412:	4770      	bx	lr

08000414 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000414:	4770      	bx	lr

08000416 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000416:	4770      	bx	lr

08000418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000418:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800041a:	f000 fa5d 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041e:	bd08      	pop	{r3, pc}

08000420 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000422:	4802      	ldr	r0, [pc, #8]	; (800042c <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8000424:	f001 f884 	bl	8001530 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000428:	bd08      	pop	{r3, pc}
 800042a:	bf00      	nop
 800042c:	2000129c 	.word	0x2000129c

08000430 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <SystemInit+0x40>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	f042 0201 	orr.w	r2, r2, #1
 8000438:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800043a:	6859      	ldr	r1, [r3, #4]
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <SystemInit+0x44>)
 800043e:	400a      	ands	r2, r1
 8000440:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000448:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800044c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000454:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800045c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800045e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000462:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <SystemInit+0x48>)
 8000466:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800046a:	609a      	str	r2, [r3, #8]
#endif 
}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	f8ff0000 	.word	0xf8ff0000
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800047c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800047e:	e003      	b.n	8000488 <LoopCopyDataInit>

08000480 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000480:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000482:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000484:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000486:	3104      	adds	r1, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000488:	480a      	ldr	r0, [pc, #40]	; (80004b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800048c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800048e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000490:	d3f6      	bcc.n	8000480 <CopyDataInit>
  ldr r2, =_sbss
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000494:	e002      	b.n	800049c <LoopFillZerobss>

08000496 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000498:	f842 3b04 	str.w	r3, [r2], #4

0800049c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800049e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004a0:	d3f9      	bcc.n	8000496 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004a2:	f7ff ffc5 	bl	8000430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004a6:	f003 fbe9 	bl	8003c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004aa:	f003 fbdd 	bl	8003c68 <main>
  bx lr
 80004ae:	4770      	bx	lr
  ldr r3, =_sidata
 80004b0:	08003da4 	.word	0x08003da4
  ldr r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004b8:	200000fc 	.word	0x200000fc
  ldr r2, =_sbss
 80004bc:	20000100 	.word	0x20000100
  ldr r3, = _ebss
 80004c0:	200016fc 	.word	0x200016fc

080004c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC1_2_IRQHandler>
	...

080004c8 <flashInSector>:

  return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80004c8:	b410      	push	{r4}
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <flashInSector+0x4c>)
 80004cc:	f853 4030 	ldr.w	r4, [r3, r0, lsl #3]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80004d0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80004d4:	889b      	ldrh	r3, [r3, #4]
 80004d6:	4423      	add	r3, r4
 80004d8:	3b01      	subs	r3, #1
  flash_start  = addr;
  flash_end    = addr + length - 1;
 80004da:	440a      	add	r2, r1
 80004dc:	3a01      	subs	r2, #1

  /* sector size < flash size */
  if (sector_start >= flash_start && sector_start <= flash_end)
 80004de:	428c      	cmp	r4, r1
 80004e0:	d303      	bcc.n	80004ea <flashInSector+0x22>
 80004e2:	4294      	cmp	r4, r2
 80004e4:	d913      	bls.n	800050e <flashInSector+0x46>
  bool ret = false;
 80004e6:	2000      	movs	r0, #0
 80004e8:	e000      	b.n	80004ec <flashInSector+0x24>
 80004ea:	2000      	movs	r0, #0
  {
    ret = true;
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d302      	bcc.n	80004f6 <flashInSector+0x2e>
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d800      	bhi.n	80004f6 <flashInSector+0x2e>
  {
    ret = true;
 80004f4:	2001      	movs	r0, #1
  }

  /* sector size > flash size */
  if (flash_start >= sector_start && flash_start <= sector_end)
 80004f6:	428c      	cmp	r4, r1
 80004f8:	d802      	bhi.n	8000500 <flashInSector+0x38>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d300      	bcc.n	8000500 <flashInSector+0x38>
  {
    ret = true;
 80004fe:	2001      	movs	r0, #1
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8000500:	4294      	cmp	r4, r2
 8000502:	d802      	bhi.n	800050a <flashInSector+0x42>
 8000504:	4293      	cmp	r3, r2
 8000506:	d300      	bcc.n	800050a <flashInSector+0x42>
  {
    ret = true;
 8000508:	2001      	movs	r0, #1
  }

  return ret;
}
 800050a:	bc10      	pop	{r4}
 800050c:	4770      	bx	lr
    ret = true;
 800050e:	2001      	movs	r0, #1
 8000510:	e7ec      	b.n	80004ec <flashInSector+0x24>
 8000512:	bf00      	nop
 8000514:	2000011c 	.word	0x2000011c

08000518 <flashInit>:
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	e00b      	b.n	8000534 <flashInit+0x1c>
    flash_tbl[i].addr = 0x08000000 + i*FLASH_SECTOR_SIZE;
 800051c:	f503 3180 	add.w	r1, r3, #65536	; 0x10000
 8000520:	02c9      	lsls	r1, r1, #11
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <flashInit+0x24>)
 8000524:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    flash_tbl[i].length = FLASH_SECTOR_SIZE;
 8000528:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800052c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000530:	8091      	strh	r1, [r2, #4]
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8000532:	3301      	adds	r3, #1
 8000534:	2bff      	cmp	r3, #255	; 0xff
 8000536:	ddf1      	ble.n	800051c <flashInit+0x4>
}
 8000538:	2001      	movs	r0, #1
 800053a:	4770      	bx	lr
 800053c:	2000011c 	.word	0x2000011c

08000540 <flashErase>:
{
 8000540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	4607      	mov	r7, r0
 8000548:	460e      	mov	r6, r1
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 800054a:	2400      	movs	r4, #0
  uint32_t sector_count = 0;
 800054c:	4625      	mov	r5, r4
  int16_t start_sector_num = (-1);
 800054e:	f04f 38ff 	mov.w	r8, #4294967295
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8000552:	e001      	b.n	8000558 <flashErase+0x18>
      sector_count++;
 8000554:	3501      	adds	r5, #1
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8000556:	3401      	adds	r4, #1
 8000558:	2cff      	cmp	r4, #255	; 0xff
 800055a:	dc0c      	bgt.n	8000576 <flashErase+0x36>
    if(flashInSector(i, addr, length) == true)
 800055c:	4632      	mov	r2, r6
 800055e:	4639      	mov	r1, r7
 8000560:	b2a0      	uxth	r0, r4
 8000562:	f7ff ffb1 	bl	80004c8 <flashInSector>
 8000566:	2800      	cmp	r0, #0
 8000568:	d0f5      	beq.n	8000556 <flashErase+0x16>
      if(start_sector_num < 0)
 800056a:	f1b8 0f00 	cmp.w	r8, #0
 800056e:	daf1      	bge.n	8000554 <flashErase+0x14>
        start_sector_num = i;
 8000570:	fa0f f884 	sxth.w	r8, r4
 8000574:	e7ee      	b.n	8000554 <flashErase+0x14>
  if(sector_count > 0)
 8000576:	b925      	cbnz	r5, 8000582 <flashErase+0x42>
  bool ret = false;
 8000578:	2400      	movs	r4, #0
}
 800057a:	4620      	mov	r0, r4
 800057c:	b006      	add	sp, #24
 800057e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_FLASH_Unlock();
 8000582:	f000 fa7f 	bl	8000a84 <HAL_FLASH_Unlock>
    init.TypeErase = FLASH_TYPEERASE_PAGES;
 8000586:	2300      	movs	r3, #0
 8000588:	9302      	str	r3, [sp, #8]
    init.Banks     = FLASH_BANK_1;
 800058a:	2301      	movs	r3, #1
 800058c:	9303      	str	r3, [sp, #12]
    init.PageAddress = flash_tbl[start_sector_num].addr;
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <flashErase+0x70>)
 8000590:	f853 3038 	ldr.w	r3, [r3, r8, lsl #3]
 8000594:	9304      	str	r3, [sp, #16]
    init.NbPages     = sector_count;
 8000596:	9505      	str	r5, [sp, #20]
    status = HAL_FLASHEx_Erase(&init, &page_error);
 8000598:	a901      	add	r1, sp, #4
 800059a:	a802      	add	r0, sp, #8
 800059c:	f000 fb3e 	bl	8000c1c <HAL_FLASHEx_Erase>
    if(status == HAL_OK)
 80005a0:	b118      	cbz	r0, 80005aa <flashErase+0x6a>
  bool ret = false;
 80005a2:	2400      	movs	r4, #0
    HAL_FLASH_Lock();
 80005a4:	f000 fa88 	bl	8000ab8 <HAL_FLASH_Lock>
 80005a8:	e7e7      	b.n	800057a <flashErase+0x3a>
      ret = true;
 80005aa:	2401      	movs	r4, #1
 80005ac:	e7fa      	b.n	80005a4 <flashErase+0x64>
 80005ae:	bf00      	nop
 80005b0:	2000011c 	.word	0x2000011c

080005b4 <flashWrite>:
{
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(addr%2 != 0)
 80005b6:	f010 0f01 	tst.w	r0, #1
 80005ba:	d002      	beq.n	80005c2 <flashWrite+0xe>
    return false;
 80005bc:	2400      	movs	r4, #0
}
 80005be:	4620      	mov	r0, r4
 80005c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005c2:	4617      	mov	r7, r2
 80005c4:	460d      	mov	r5, r1
 80005c6:	4606      	mov	r6, r0
  HAL_FLASH_Unlock();
 80005c8:	f000 fa5c 	bl	8000a84 <HAL_FLASH_Unlock>
  for(int i=0; i<length; i+=2)
 80005cc:	2400      	movs	r4, #0
 80005ce:	42bc      	cmp	r4, r7
 80005d0:	d20d      	bcs.n	80005ee <flashWrite+0x3a>
    data  = p_data[i+0] << 0;
 80005d2:	5d2a      	ldrb	r2, [r5, r4]
    data |= p_data[i+1] << 8;
 80005d4:	192b      	adds	r3, r5, r4
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 80005dc:	b292      	uxth	r2, r2
 80005de:	2300      	movs	r3, #0
 80005e0:	19a1      	adds	r1, r4, r6
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 faa8 	bl	8000b38 <HAL_FLASH_Program>
    if(status != HAL_OK)
 80005e8:	b928      	cbnz	r0, 80005f6 <flashWrite+0x42>
  for(int i=0; i<length; i+=2)
 80005ea:	3402      	adds	r4, #2
 80005ec:	e7ef      	b.n	80005ce <flashWrite+0x1a>
  bool ret = true;
 80005ee:	2401      	movs	r4, #1
  HAL_FLASH_Lock();
 80005f0:	f000 fa62 	bl	8000ab8 <HAL_FLASH_Lock>
  return ret;
 80005f4:	e7e3      	b.n	80005be <flashWrite+0xa>
      ret = false;
 80005f6:	2400      	movs	r4, #0
 80005f8:	e7fa      	b.n	80005f0 <flashWrite+0x3c>
	...

080005fc <ledOff>:
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
	if(ch >= LED_MAX_CH) return;
 80005fc:	2803      	cmp	r0, #3
 80005fe:	d900      	bls.n	8000602 <ledOff+0x6>
 8000600:	4770      	bx	lr
{
 8000602:	b508      	push	{r3, lr}
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <ledOff+0x1c>)
 8000606:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 800060a:	79ca      	ldrb	r2, [r1, #7]
 800060c:	8889      	ldrh	r1, [r1, #4]
 800060e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8000612:	f000 fc4d 	bl	8000eb0 <HAL_GPIO_WritePin>
}
 8000616:	bd08      	pop	{r3, pc}
 8000618:	20000004 	.word	0x20000004

0800061c <ledInit>:
{
 800061c:	b510      	push	{r4, lr}
 800061e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	2400      	movs	r4, #0
 8000622:	9402      	str	r4, [sp, #8]
 8000624:	9403      	str	r4, [sp, #12]
 8000626:	9404      	str	r4, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <ledInit+0x64>)
 800062a:	699a      	ldr	r2, [r3, #24]
 800062c:	f042 0208 	orr.w	r2, r2, #8
 8000630:	619a      	str	r2, [r3, #24]
 8000632:	699a      	ldr	r2, [r3, #24]
 8000634:	f002 0208 	and.w	r2, r2, #8
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	699a      	ldr	r2, [r3, #24]
 800063e:	f042 0204 	orr.w	r2, r2, #4
 8000642:	619a      	str	r2, [r3, #24]
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2302      	movs	r3, #2
 8000654:	9305      	str	r3, [sp, #20]
  for( int i=0; i<LED_MAX_CH; i++)
 8000656:	e00e      	b.n	8000676 <ledInit+0x5a>
  	GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <ledInit+0x68>)
 800065a:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800065e:	8892      	ldrh	r2, [r2, #4]
 8000660:	a906      	add	r1, sp, #24
 8000662:	f841 2d10 	str.w	r2, [r1, #-16]!
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000666:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800066a:	f000 fb29 	bl	8000cc0 <HAL_GPIO_Init>
  	ledOff(i);
 800066e:	b2e0      	uxtb	r0, r4
 8000670:	f7ff ffc4 	bl	80005fc <ledOff>
  for( int i=0; i<LED_MAX_CH; i++)
 8000674:	3401      	adds	r4, #1
 8000676:	2c03      	cmp	r4, #3
 8000678:	ddee      	ble.n	8000658 <ledInit+0x3c>
}
 800067a:	b006      	add	sp, #24
 800067c:	bd10      	pop	{r4, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	20000004 	.word	0x20000004

08000688 <ledToggle>:

void ledToggle(uint8_t ch)
{
	if(ch >= LED_MAX_CH) return;
 8000688:	2803      	cmp	r0, #3
 800068a:	d900      	bls.n	800068e <ledToggle+0x6>
 800068c:	4770      	bx	lr
{
 800068e:	b508      	push	{r3, lr}
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <ledToggle+0x1c>)
 8000692:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8000696:	8891      	ldrh	r1, [r2, #4]
 8000698:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800069c:	f000 fc0e 	bl	8000ebc <HAL_GPIO_TogglePin>
}
 80006a0:	bd08      	pop	{r3, pc}
 80006a2:	bf00      	nop
 80006a4:	20000004 	.word	0x20000004

080006a8 <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 80006a8:	b508      	push	{r3, lr}
  bool ret = true;

  /* if reset pin on */
  //if(RCC->CSR & (1<<26))
  if(RCC->CSR == (1<<26))
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <resetInit+0x80>)
 80006ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80006b2:	d012      	beq.n	80006da <resetInit+0x32>
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
    delay(500);
    reset_count = rtcBackupRegRead(1);
  }

  rtcBackupRegWrite(1, 0);
 80006b4:	2100      	movs	r1, #0
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 f86e 	bl	8000798 <rtcBackupRegWrite>

  if(reset_count != 2)
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <resetInit+0x84>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d02f      	beq.n	8000724 <resetInit+0x7c>
  {
    void(**jump_func)() = (void(**)())(0x08005000 + 4);    //_estack -> Reset_Handler

    if((uint32_t)(*jump_func) != 0xFFFFFFFF)
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <resetInit+0x88>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006cc:	d02a      	beq.n	8000724 <resetInit+0x7c>
    {
      HAL_RCC_DeInit();
 80006ce:	f001 f869 	bl	80017a4 <HAL_RCC_DeInit>
      HAL_DeInit();
 80006d2:	f000 f8b9 	bl	8000848 <HAL_DeInit>

      for(int i=0; i<8; i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	e01c      	b.n	8000714 <resetInit+0x6c>
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 f854 	bl	8000788 <rtcBackupRegRead>
 80006e0:	1c41      	adds	r1, r0, #1
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 f858 	bl	8000798 <rtcBackupRegWrite>
    delay(500);
 80006e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ec:	f7ff fdf2 	bl	80002d4 <delay>
    reset_count = rtcBackupRegRead(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 f849 	bl	8000788 <rtcBackupRegRead>
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <resetInit+0x84>)
 80006f8:	6018      	str	r0, [r3, #0]
 80006fa:	e7db      	b.n	80006b4 <resetInit+0xc>
      {
         NVIC->ICER[i] = 0xFFFFFFFF;
 80006fc:	f103 0120 	add.w	r1, r3, #32
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <resetInit+0x8c>)
 8000702:	f04f 30ff 	mov.w	r0, #4294967295
 8000706:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800070a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800070e:	f3bf 8f6f 	isb	sy
      for(int i=0; i<8; i++)
 8000712:	3301      	adds	r3, #1
 8000714:	2b07      	cmp	r3, #7
 8000716:	ddf1      	ble.n	80006fc <resetInit+0x54>

         __DSB();
         __ISB();
      }
      SysTick->CTRL = 0;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <resetInit+0x90>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]

      (*jump_func)();
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <resetInit+0x88>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4798      	blx	r3
    }

  }

  return ret;
}
 8000724:	2001      	movs	r0, #1
 8000726:	bd08      	pop	{r3, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	2000091c 	.word	0x2000091c
 8000730:	08005004 	.word	0x08005004
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000e010 	.word	0xe000e010

0800073c <rtcInit>:


RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 800073c:	b500      	push	{lr}
 800073e:	b083      	sub	sp, #12
  bool ret = true;

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <rtcInit+0x40>)
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f042 0210 	orr.w	r2, r2, #16
 8000748:	619a      	str	r2, [r3, #24]
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0310 	and.w	r3, r3, #16
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	9b01      	ldr	r3, [sp, #4]

  /** Initialize RTC Only */
  hrtc.Instance           = RTC;
 8000754:	480a      	ldr	r0, [pc, #40]	; (8000780 <rtcInit+0x44>)
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <rtcInit+0x48>)
 8000758:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 8000760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000764:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000766:	f001 fd01 	bl	800216c <HAL_RTC_Init>
 800076a:	b918      	cbnz	r0, 8000774 <rtcInit+0x38>
  {
    Error_Handler();
  }

  return ret;
}
 800076c:	2001      	movs	r0, #1
 800076e:	b003      	add	sp, #12
 8000770:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000774:	f7ff fe24 	bl	80003c0 <Error_Handler>
 8000778:	e7f8      	b.n	800076c <rtcInit+0x30>
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000
 8000780:	20000e3c 	.word	0x20000e3c
 8000784:	40002800 	.word	0x40002800

08000788 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000788:	b508      	push	{r3, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 800078a:	4601      	mov	r1, r0
 800078c:	4801      	ldr	r0, [pc, #4]	; (8000794 <rtcBackupRegRead+0xc>)
 800078e:	f001 fd57 	bl	8002240 <HAL_RTCEx_BKUPRead>

}
 8000792:	bd08      	pop	{r3, pc}
 8000794:	20000e3c 	.word	0x20000e3c

08000798 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000798:	b508      	push	{r3, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800079a:	460a      	mov	r2, r1
 800079c:	4601      	mov	r1, r0
 800079e:	4802      	ldr	r0, [pc, #8]	; (80007a8 <rtcBackupRegWrite+0x10>)
 80007a0:	f001 fd46 	bl	8002230 <HAL_RTCEx_BKUPWrite>
}
 80007a4:	bd08      	pop	{r3, pc}
 80007a6:	bf00      	nop
 80007a8:	20000e3c 	.word	0x20000e3c

080007ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80007ac:	6802      	ldr	r2, [r0, #0]
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <HAL_RTC_MspInit+0x34>)
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d000      	beq.n	80007b6 <HAL_RTC_MspInit+0xa>
 80007b4:	4770      	bx	lr
{
 80007b6:	b500      	push	{lr}
 80007b8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80007ba:	f000 ffd7 	bl	800176c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_RTC_MspInit+0x38>)
 80007c0:	69da      	ldr	r2, [r3, #28]
 80007c2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80007c6:	61da      	str	r2, [r3, #28]
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	9b01      	ldr	r3, [sp, #4]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_RTC_MspInit+0x3c>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80007d8:	b003      	add	sp, #12
 80007da:	f85d fb04 	ldr.w	pc, [sp], #4
 80007de:	bf00      	nop
 80007e0:	40002800 	.word	0x40002800
 80007e4:	40021000 	.word	0x40021000
 80007e8:	4242043c 	.word	0x4242043c

080007ec <usbInit>:




bool usbInit(void)
{
 80007ec:	b530      	push	{r4, r5, lr}
 80007ee:	b085      	sub	sp, #20
  bool ret = true;


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	2400      	movs	r4, #0
 80007f2:	9400      	str	r4, [sp, #0]
 80007f4:	9401      	str	r4, [sp, #4]
 80007f6:	9402      	str	r4, [sp, #8]
 80007f8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
#endif
  delay(200);
 80007fa:	20c8      	movs	r0, #200	; 0xc8
 80007fc:	f7ff fd6a 	bl	80002d4 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000800:	4d08      	ldr	r5, [pc, #32]	; (8000824 <usbInit+0x38>)
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000808:	4628      	mov	r0, r5
 800080a:	f000 fb51 	bl	8000eb0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	4669      	mov	r1, sp
 8000812:	4628      	mov	r0, r5
 8000814:	f000 fa54 	bl	8000cc0 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 8000818:	f003 f83c 	bl	8003894 <MX_USB_DEVICE_Init>

  return ret;
}
 800081c:	2001      	movs	r0, #1
 800081e:	b005      	add	sp, #20
 8000820:	bd30      	pop	{r4, r5, pc}
 8000822:	bf00      	nop
 8000824:	40010800 	.word	0x40010800

08000828 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8000828:	b508      	push	{r3, lr}
  bspInit();
 800082a:	f7ff fd95 	bl	8000358 <bspInit>
  rtcInit();
 800082e:	f7ff ff85 	bl	800073c <rtcInit>

  resetInit();
 8000832:	f7ff ff39 	bl	80006a8 <resetInit>
  ledInit();
 8000836:	f7ff fef1 	bl	800061c <ledInit>
  usbInit();
 800083a:	f7ff ffd7 	bl	80007ec <usbInit>
  //uartInit();
  flashInit();
 800083e:	f7ff fe6b 	bl	8000518 <flashInit>
}
 8000842:	bd08      	pop	{r3, pc}

08000844 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000844:	4770      	bx	lr
	...

08000848 <HAL_DeInit>:
{
 8000848:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_DeInit+0x1c>)
 800084c:	f04f 32ff 	mov.w	r2, #4294967295
 8000850:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000852:	2400      	movs	r4, #0
 8000854:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 8000856:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000858:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 800085a:	f7ff fff3 	bl	8000844 <HAL_MspDeInit>
}
 800085e:	4620      	mov	r0, r4
 8000860:	bd10      	pop	{r4, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b510      	push	{r4, lr}
 800086a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_InitTick+0x40>)
 800086e:	7818      	ldrb	r0, [r3, #0]
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	fbb3 f3f0 	udiv	r3, r3, r0
 8000878:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <HAL_InitTick+0x44>)
 800087a:	6810      	ldr	r0, [r2, #0]
 800087c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000880:	f000 f8a2 	bl	80009c8 <HAL_SYSTICK_Config>
 8000884:	b968      	cbnz	r0, 80008a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000886:	2c0f      	cmp	r4, #15
 8000888:	d901      	bls.n	800088e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800088a:	2001      	movs	r0, #1
 800088c:	e00a      	b.n	80008a4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088e:	2200      	movs	r2, #0
 8000890:	4621      	mov	r1, r4
 8000892:	f04f 30ff 	mov.w	r0, #4294967295
 8000896:	f000 f857 	bl	8000948 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <HAL_InitTick+0x48>)
 800089c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800089e:	2000      	movs	r0, #0
 80008a0:	e000      	b.n	80008a4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80008a2:	2001      	movs	r0, #1
}
 80008a4:	bd10      	pop	{r4, pc}
 80008a6:	bf00      	nop
 80008a8:	20000024 	.word	0x20000024
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000028 	.word	0x20000028

080008b4 <HAL_Init>:
{
 80008b4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b6:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x20>)
 80008b8:	6813      	ldr	r3, [r2, #0]
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 f82f 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffce 	bl	8000868 <HAL_InitTick>
  HAL_MspInit();
 80008cc:	f7ff fd7a 	bl	80003c4 <HAL_MspInit>
}
 80008d0:	2000      	movs	r0, #0
 80008d2:	bd08      	pop	{r3, pc}
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008d8:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <HAL_IncTick+0x10>)
 80008da:	6811      	ldr	r1, [r2, #0]
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <HAL_IncTick+0x14>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	440b      	add	r3, r1
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000e50 	.word	0x20000e50
 80008ec:	20000024 	.word	0x20000024

080008f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008f0:	4b01      	ldr	r3, [pc, #4]	; (80008f8 <HAL_GetTick+0x8>)
 80008f2:	6818      	ldr	r0, [r3, #0]
}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000e50 	.word	0x20000e50

080008fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008fc:	b538      	push	{r3, r4, r5, lr}
 80008fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000900:	f7ff fff6 	bl	80008f0 <HAL_GetTick>
 8000904:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000906:	f1b4 3fff 	cmp.w	r4, #4294967295
 800090a:	d002      	beq.n	8000912 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <HAL_Delay+0x24>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000912:	f7ff ffed 	bl	80008f0 <HAL_GetTick>
 8000916:	1b40      	subs	r0, r0, r5
 8000918:	42a0      	cmp	r0, r4
 800091a:	d3fa      	bcc.n	8000912 <HAL_Delay+0x16>
  {
  }
}
 800091c:	bd38      	pop	{r3, r4, r5, pc}
 800091e:	bf00      	nop
 8000920:	20000024 	.word	0x20000024

08000924 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000926:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000928:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800092c:	041b      	lsls	r3, r3, #16
 800092e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000930:	0200      	lsls	r0, r0, #8
 8000932:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000936:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000938:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800093c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000940:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000948:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_NVIC_SetPriority+0x60>)
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000952:	f1c3 0407 	rsb	r4, r3, #7
 8000956:	2c04      	cmp	r4, #4
 8000958:	bf28      	it	cs
 800095a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095c:	1d1d      	adds	r5, r3, #4
 800095e:	2d06      	cmp	r5, #6
 8000960:	d918      	bls.n	8000994 <HAL_NVIC_SetPriority+0x4c>
 8000962:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	f04f 35ff 	mov.w	r5, #4294967295
 8000968:	fa05 f404 	lsl.w	r4, r5, r4
 800096c:	ea21 0104 	bic.w	r1, r1, r4
 8000970:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000972:	fa05 f303 	lsl.w	r3, r5, r3
 8000976:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800097c:	2800      	cmp	r0, #0
 800097e:	db0b      	blt.n	8000998 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	0109      	lsls	r1, r1, #4
 8000982:	b2c9      	uxtb	r1, r1
 8000984:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000988:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800098c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000990:	bc30      	pop	{r4, r5}
 8000992:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000994:	2300      	movs	r3, #0
 8000996:	e7e5      	b.n	8000964 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	f000 000f 	and.w	r0, r0, #15
 800099c:	0109      	lsls	r1, r1, #4
 800099e:	b2c9      	uxtb	r1, r1
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <HAL_NVIC_SetPriority+0x64>)
 80009a2:	5419      	strb	r1, [r3, r0]
 80009a4:	e7f4      	b.n	8000990 <HAL_NVIC_SetPriority+0x48>
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00
 80009ac:	e000ed14 	.word	0xe000ed14

080009b0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009b0:	f000 021f 	and.w	r2, r0, #31
 80009b4:	0940      	lsrs	r0, r0, #5
 80009b6:	2301      	movs	r3, #1
 80009b8:	4093      	lsls	r3, r2
 80009ba:	4a02      	ldr	r2, [pc, #8]	; (80009c4 <HAL_NVIC_EnableIRQ+0x14>)
 80009bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000e100 	.word	0xe000e100

080009c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c8:	3801      	subs	r0, #1
 80009ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ce:	d20a      	bcs.n	80009e6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_SYSTICK_Config+0x24>)
 80009d2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <HAL_SYSTICK_Config+0x28>)
 80009d6:	21f0      	movs	r1, #240	; 0xf0
 80009d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	2000      	movs	r0, #0
 80009de:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000e010 	.word	0xe000e010
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <FLASH_Program_HalfWord+0x14>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <FLASH_Program_HalfWord+0x18>)
 80009fc:	6913      	ldr	r3, [r2, #16]
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000a04:	8001      	strh	r1, [r0, #0]
}
 8000a06:	4770      	bx	lr
 8000a08:	20000e58 	.word	0x20000e58
 8000a0c:	40022000 	.word	0x40022000

08000a10 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <FLASH_SetErrorCode+0x6c>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	f013 0f10 	tst.w	r3, #16
 8000a18:	d027      	beq.n	8000a6a <FLASH_SetErrorCode+0x5a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <FLASH_SetErrorCode+0x70>)
 8000a1c:	69d3      	ldr	r3, [r2, #28]
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000a24:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a26:	4a15      	ldr	r2, [pc, #84]	; (8000a7c <FLASH_SetErrorCode+0x6c>)
 8000a28:	68d2      	ldr	r2, [r2, #12]
 8000a2a:	f012 0f04 	tst.w	r2, #4
 8000a2e:	d006      	beq.n	8000a3e <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000a30:	4913      	ldr	r1, [pc, #76]	; (8000a80 <FLASH_SetErrorCode+0x70>)
 8000a32:	69ca      	ldr	r2, [r1, #28]
 8000a34:	f042 0201 	orr.w	r2, r2, #1
 8000a38:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <FLASH_SetErrorCode+0x6c>)
 8000a40:	69d2      	ldr	r2, [r2, #28]
 8000a42:	f012 0f01 	tst.w	r2, #1
 8000a46:	d009      	beq.n	8000a5c <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000a48:	490d      	ldr	r1, [pc, #52]	; (8000a80 <FLASH_SetErrorCode+0x70>)
 8000a4a:	69ca      	ldr	r2, [r1, #28]
 8000a4c:	f042 0204 	orr.w	r2, r2, #4
 8000a50:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a52:	490a      	ldr	r1, [pc, #40]	; (8000a7c <FLASH_SetErrorCode+0x6c>)
 8000a54:	69ca      	ldr	r2, [r1, #28]
 8000a56:	f022 0201 	bic.w	r2, r2, #1
 8000a5a:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a5c:	f240 1201 	movw	r2, #257	; 0x101
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d004      	beq.n	8000a6e <FLASH_SetErrorCode+0x5e>
 8000a64:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <FLASH_SetErrorCode+0x6c>)
 8000a66:	60d3      	str	r3, [r2, #12]
}  
 8000a68:	4770      	bx	lr
  uint32_t flags = 0U;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e7db      	b.n	8000a26 <FLASH_SetErrorCode+0x16>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a6e:	4a03      	ldr	r2, [pc, #12]	; (8000a7c <FLASH_SetErrorCode+0x6c>)
 8000a70:	69d3      	ldr	r3, [r2, #28]
 8000a72:	f023 0301 	bic.w	r3, r3, #1
 8000a76:	61d3      	str	r3, [r2, #28]
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40022000 	.word	0x40022000
 8000a80:	20000e58 	.word	0x20000e58

08000a84 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_FLASH_Unlock+0x2c>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000a8c:	d00d      	beq.n	8000aaa <HAL_FLASH_Unlock+0x26>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_FLASH_Unlock+0x2c>)
 8000a90:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_FLASH_Unlock+0x30>)
 8000a92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a94:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000a98:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a9a:	691b      	ldr	r3, [r3, #16]
 8000a9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000aa0:	d001      	beq.n	8000aa6 <HAL_FLASH_Unlock+0x22>
      status = HAL_ERROR;
 8000aa2:	2001      	movs	r0, #1
}
 8000aa4:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	2000      	movs	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40022000 	.word	0x40022000
 8000ab4:	45670123 	.word	0x45670123

08000ab8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000ab8:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <HAL_FLASH_Lock+0x10>)
 8000aba:	6913      	ldr	r3, [r2, #16]
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	6113      	str	r3, [r2, #16]
}
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40022000 	.word	0x40022000

08000acc <FLASH_WaitForLastOperation>:
{
 8000acc:	b538      	push	{r3, r4, r5, lr}
 8000ace:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff ff0e 	bl	80008f0 <HAL_GetTick>
 8000ad4:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <FLASH_WaitForLastOperation+0x68>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	f013 0f01 	tst.w	r3, #1
 8000ade:	d00a      	beq.n	8000af6 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8000ae0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000ae4:	d0f7      	beq.n	8000ad6 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ae6:	b30c      	cbz	r4, 8000b2c <FLASH_WaitForLastOperation+0x60>
 8000ae8:	f7ff ff02 	bl	80008f0 <HAL_GetTick>
 8000aec:	1b40      	subs	r0, r0, r5
 8000aee:	42a0      	cmp	r0, r4
 8000af0:	d9f1      	bls.n	8000ad6 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000af2:	2003      	movs	r0, #3
 8000af4:	e019      	b.n	8000b2a <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <FLASH_WaitForLastOperation+0x68>)
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	f013 0f20 	tst.w	r3, #32
 8000afe:	d002      	beq.n	8000b06 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <FLASH_WaitForLastOperation+0x68>)
 8000b02:	2220      	movs	r2, #32
 8000b04:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <FLASH_WaitForLastOperation+0x68>)
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	f013 0f10 	tst.w	r3, #16
 8000b0e:	d109      	bne.n	8000b24 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <FLASH_WaitForLastOperation+0x68>)
 8000b12:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b14:	f013 0f01 	tst.w	r3, #1
 8000b18:	d104      	bne.n	8000b24 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <FLASH_WaitForLastOperation+0x68>)
 8000b1c:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000b1e:	f013 0f04 	tst.w	r3, #4
 8000b22:	d005      	beq.n	8000b30 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8000b24:	f7ff ff74 	bl	8000a10 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b28:	2001      	movs	r0, #1
}
 8000b2a:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	e7fc      	b.n	8000b2a <FLASH_WaitForLastOperation+0x5e>
  return HAL_OK;
 8000b30:	2000      	movs	r0, #0
 8000b32:	e7fa      	b.n	8000b2a <FLASH_WaitForLastOperation+0x5e>
 8000b34:	40022000 	.word	0x40022000

08000b38 <HAL_FLASH_Program>:
{
 8000b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8000b3c:	4c23      	ldr	r4, [pc, #140]	; (8000bcc <HAL_FLASH_Program+0x94>)
 8000b3e:	7e24      	ldrb	r4, [r4, #24]
 8000b40:	2c01      	cmp	r4, #1
 8000b42:	d041      	beq.n	8000bc8 <HAL_FLASH_Program+0x90>
 8000b44:	461e      	mov	r6, r3
 8000b46:	4690      	mov	r8, r2
 8000b48:	460f      	mov	r7, r1
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <HAL_FLASH_Program+0x94>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b52:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b56:	f7ff ffb9 	bl	8000acc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	bb70      	cbnz	r0, 8000bbc <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b5e:	2c01      	cmp	r4, #1
 8000b60:	d029      	beq.n	8000bb6 <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000b62:	2c02      	cmp	r4, #2
 8000b64:	d024      	beq.n	8000bb0 <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 8000b66:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8000b6a:	2400      	movs	r4, #0
 8000b6c:	454c      	cmp	r4, r9
 8000b6e:	d225      	bcs.n	8000bbc <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b70:	0121      	lsls	r1, r4, #4
 8000b72:	f1c1 0220 	rsb	r2, r1, #32
 8000b76:	f1a1 0320 	sub.w	r3, r1, #32
 8000b7a:	fa28 f101 	lsr.w	r1, r8, r1
 8000b7e:	fa06 f202 	lsl.w	r2, r6, r2
 8000b82:	4311      	orrs	r1, r2
 8000b84:	fa26 f303 	lsr.w	r3, r6, r3
 8000b88:	4319      	orrs	r1, r3
 8000b8a:	b289      	uxth	r1, r1
 8000b8c:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8000b90:	f7ff ff30 	bl	80009f4 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b98:	f7ff ff98 	bl	8000acc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_FLASH_Program+0x98>)
 8000b9e:	691d      	ldr	r5, [r3, #16]
 8000ba0:	f025 0501 	bic.w	r5, r5, #1
 8000ba4:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	b940      	cbnz	r0, 8000bbc <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 8000baa:	3401      	adds	r4, #1
 8000bac:	b2e4      	uxtb	r4, r4
 8000bae:	e7dd      	b.n	8000b6c <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8000bb0:	f04f 0902 	mov.w	r9, #2
 8000bb4:	e7d9      	b.n	8000b6a <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8000bb6:	f04f 0901 	mov.w	r9, #1
 8000bba:	e7d6      	b.n	8000b6a <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 8000bbc:	4a03      	ldr	r2, [pc, #12]	; (8000bcc <HAL_FLASH_Program+0x94>)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	7611      	strb	r1, [r2, #24]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8000bc8:	2302      	movs	r3, #2
 8000bca:	e7fa      	b.n	8000bc2 <HAL_FLASH_Program+0x8a>
 8000bcc:	20000e58 	.word	0x20000e58
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <FLASH_MassErase+0x1c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <FLASH_MassErase+0x20>)
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	f042 0204 	orr.w	r2, r2, #4
 8000be2:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bea:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000e58 	.word	0x20000e58
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <FLASH_PageErase+0x1c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <FLASH_PageErase+0x20>)
 8000c00:	691a      	ldr	r2, [r3, #16]
 8000c02:	f042 0202 	orr.w	r2, r2, #2
 8000c06:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000c08:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c0a:	691a      	ldr	r2, [r3, #16]
 8000c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c10:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000c12:	4770      	bx	lr
 8000c14:	20000e58 	.word	0x20000e58
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <HAL_FLASHEx_Erase+0x9c>)
 8000c1e:	7e1b      	ldrb	r3, [r3, #24]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d046      	beq.n	8000cb2 <HAL_FLASHEx_Erase+0x96>
{
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	460e      	mov	r6, r1
 8000c28:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <HAL_FLASHEx_Erase+0x9c>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c30:	6803      	ldr	r3, [r0, #0]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d020      	beq.n	8000c78 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c3a:	f7ff ff47 	bl	8000acc <FLASH_WaitForLastOperation>
 8000c3e:	bb90      	cbnz	r0, 8000ca6 <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8000c46:	68a5      	ldr	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c48:	2201      	movs	r2, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000c4a:	68e1      	ldr	r1, [r4, #12]
 8000c4c:	68a3      	ldr	r3, [r4, #8]
 8000c4e:	eb03 23c1 	add.w	r3, r3, r1, lsl #11
        for(address = pEraseInit->PageAddress;
 8000c52:	42ab      	cmp	r3, r5
 8000c54:	d928      	bls.n	8000ca8 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8000c56:	4628      	mov	r0, r5
 8000c58:	f7ff ffce 	bl	8000bf8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c60:	f7ff ff34 	bl	8000acc <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000c64:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <HAL_FLASHEx_Erase+0xa0>)
 8000c66:	6913      	ldr	r3, [r2, #16]
 8000c68:	f023 0302 	bic.w	r3, r3, #2
 8000c6c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8000c6e:	4602      	mov	r2, r0
 8000c70:	b9b8      	cbnz	r0, 8000ca2 <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 8000c72:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000c76:	e7e8      	b.n	8000c4a <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c7c:	f7ff ff26 	bl	8000acc <FLASH_WaitForLastOperation>
 8000c80:	b108      	cbz	r0, 8000c86 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c82:	2201      	movs	r2, #1
 8000c84:	e010      	b.n	8000ca8 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff ffa4 	bl	8000bd4 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c90:	f7ff ff1c 	bl	8000acc <FLASH_WaitForLastOperation>
 8000c94:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000c96:	4909      	ldr	r1, [pc, #36]	; (8000cbc <HAL_FLASHEx_Erase+0xa0>)
 8000c98:	690b      	ldr	r3, [r1, #16]
 8000c9a:	f023 0304 	bic.w	r3, r3, #4
 8000c9e:	610b      	str	r3, [r1, #16]
 8000ca0:	e002      	b.n	8000ca8 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 8000ca2:	6035      	str	r5, [r6, #0]
            break;
 8000ca4:	e000      	b.n	8000ca8 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ca6:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_FLASHEx_Erase+0x9c>)
 8000caa:	2100      	movs	r1, #0
 8000cac:	7619      	strb	r1, [r3, #24]
}
 8000cae:	4610      	mov	r0, r2
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8000cb2:	2202      	movs	r2, #2
}
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4770      	bx	lr
 8000cb8:	20000e58 	.word	0x20000e58
 8000cbc:	40022000 	.word	0x40022000

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b4f0      	push	{r4, r5, r6, r7}
 8000cc2:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000cc4:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000cc6:	4635      	mov	r5, r6
 8000cc8:	e0ab      	b.n	8000e22 <HAL_GPIO_Init+0x162>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d063      	beq.n	8000d96 <HAL_GPIO_Init+0xd6>
 8000cce:	2c01      	cmp	r4, #1
 8000cd0:	d100      	bne.n	8000cd4 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd2:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cd4:	2bff      	cmp	r3, #255	; 0xff
 8000cd6:	d872      	bhi.n	8000dbe <HAL_GPIO_Init+0xfe>
 8000cd8:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000cda:	2bff      	cmp	r3, #255	; 0xff
 8000cdc:	d872      	bhi.n	8000dc4 <HAL_GPIO_Init+0x104>
 8000cde:	00ac      	lsls	r4, r5, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce0:	f8dc 2000 	ldr.w	r2, [ip]
 8000ce4:	270f      	movs	r7, #15
 8000ce6:	40a7      	lsls	r7, r4
 8000ce8:	ea22 0207 	bic.w	r2, r2, r7
 8000cec:	fa06 f404 	lsl.w	r4, r6, r4
 8000cf0:	4322      	orrs	r2, r4
 8000cf2:	f8cc 2000 	str.w	r2, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf6:	684a      	ldr	r2, [r1, #4]
 8000cf8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000cfc:	f000 8090 	beq.w	8000e20 <HAL_GPIO_Init+0x160>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d00:	4a65      	ldr	r2, [pc, #404]	; (8000e98 <HAL_GPIO_Init+0x1d8>)
 8000d02:	6994      	ldr	r4, [r2, #24]
 8000d04:	f044 0401 	orr.w	r4, r4, #1
 8000d08:	6194      	str	r4, [r2, #24]
 8000d0a:	6992      	ldr	r2, [r2, #24]
 8000d0c:	f002 0201 	and.w	r2, r2, #1
 8000d10:	9201      	str	r2, [sp, #4]
 8000d12:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8000d14:	08ac      	lsrs	r4, r5, #2
 8000d16:	1ca7      	adds	r7, r4, #2
 8000d18:	4a60      	ldr	r2, [pc, #384]	; (8000e9c <HAL_GPIO_Init+0x1dc>)
 8000d1a:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d1e:	f005 0203 	and.w	r2, r5, #3
 8000d22:	0097      	lsls	r7, r2, #2
 8000d24:	220f      	movs	r2, #15
 8000d26:	40ba      	lsls	r2, r7
 8000d28:	ea2c 0c02 	bic.w	ip, ip, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d2c:	4a5c      	ldr	r2, [pc, #368]	; (8000ea0 <HAL_GPIO_Init+0x1e0>)
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	d04e      	beq.n	8000dd0 <HAL_GPIO_Init+0x110>
 8000d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d36:	4290      	cmp	r0, r2
 8000d38:	f000 808b 	beq.w	8000e52 <HAL_GPIO_Init+0x192>
 8000d3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f000 8088 	beq.w	8000e56 <HAL_GPIO_Init+0x196>
 8000d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	f000 8085 	beq.w	8000e5a <HAL_GPIO_Init+0x19a>
 8000d50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f000 8082 	beq.w	8000e5e <HAL_GPIO_Init+0x19e>
 8000d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	d034      	beq.n	8000dcc <HAL_GPIO_Init+0x10c>
 8000d62:	2206      	movs	r2, #6
 8000d64:	e035      	b.n	8000dd2 <HAL_GPIO_Init+0x112>
      switch (GPIO_Init->Mode)
 8000d66:	4f4f      	ldr	r7, [pc, #316]	; (8000ea4 <HAL_GPIO_Init+0x1e4>)
 8000d68:	42bc      	cmp	r4, r7
 8000d6a:	d014      	beq.n	8000d96 <HAL_GPIO_Init+0xd6>
 8000d6c:	d90b      	bls.n	8000d86 <HAL_GPIO_Init+0xc6>
 8000d6e:	4f4e      	ldr	r7, [pc, #312]	; (8000ea8 <HAL_GPIO_Init+0x1e8>)
 8000d70:	42bc      	cmp	r4, r7
 8000d72:	d010      	beq.n	8000d96 <HAL_GPIO_Init+0xd6>
 8000d74:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d78:	42bc      	cmp	r4, r7
 8000d7a:	d00c      	beq.n	8000d96 <HAL_GPIO_Init+0xd6>
 8000d7c:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000d80:	42bc      	cmp	r4, r7
 8000d82:	d1a7      	bne.n	8000cd4 <HAL_GPIO_Init+0x14>
 8000d84:	e007      	b.n	8000d96 <HAL_GPIO_Init+0xd6>
 8000d86:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000d8a:	42bc      	cmp	r4, r7
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0xd6>
 8000d8e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d92:	42bc      	cmp	r4, r7
 8000d94:	d19e      	bne.n	8000cd4 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d96:	688c      	ldr	r4, [r1, #8]
 8000d98:	b17c      	cbz	r4, 8000dba <HAL_GPIO_Init+0xfa>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d9a:	2c01      	cmp	r4, #1
 8000d9c:	d008      	beq.n	8000db0 <HAL_GPIO_Init+0xf0>
            GPIOx->BRR = ioposition;
 8000d9e:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da0:	2608      	movs	r6, #8
 8000da2:	e797      	b.n	8000cd4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da4:	68ce      	ldr	r6, [r1, #12]
 8000da6:	3608      	adds	r6, #8
          break;
 8000da8:	e794      	b.n	8000cd4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000daa:	68ce      	ldr	r6, [r1, #12]
 8000dac:	360c      	adds	r6, #12
          break;
 8000dae:	e791      	b.n	8000cd4 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8000db0:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000db2:	2608      	movs	r6, #8
 8000db4:	e78e      	b.n	8000cd4 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db6:	2600      	movs	r6, #0
 8000db8:	e78c      	b.n	8000cd4 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dba:	2604      	movs	r6, #4
 8000dbc:	e78a      	b.n	8000cd4 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dbe:	f100 0c04 	add.w	ip, r0, #4
 8000dc2:	e78a      	b.n	8000cda <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000dc4:	f1a5 0408 	sub.w	r4, r5, #8
 8000dc8:	00a4      	lsls	r4, r4, #2
 8000dca:	e789      	b.n	8000ce0 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dcc:	2205      	movs	r2, #5
 8000dce:	e000      	b.n	8000dd2 <HAL_GPIO_Init+0x112>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	40ba      	lsls	r2, r7
 8000dd4:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 8000dd8:	3402      	adds	r4, #2
 8000dda:	4f30      	ldr	r7, [pc, #192]	; (8000e9c <HAL_GPIO_Init+0x1dc>)
 8000ddc:	f847 2024 	str.w	r2, [r7, r4, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de0:	684a      	ldr	r2, [r1, #4]
 8000de2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000de6:	d03c      	beq.n	8000e62 <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000de8:	4c30      	ldr	r4, [pc, #192]	; (8000eac <HAL_GPIO_Init+0x1ec>)
 8000dea:	6822      	ldr	r2, [r4, #0]
 8000dec:	431a      	orrs	r2, r3
 8000dee:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000df0:	684a      	ldr	r2, [r1, #4]
 8000df2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000df6:	d03a      	beq.n	8000e6e <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000df8:	4c2c      	ldr	r4, [pc, #176]	; (8000eac <HAL_GPIO_Init+0x1ec>)
 8000dfa:	6862      	ldr	r2, [r4, #4]
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e00:	684a      	ldr	r2, [r1, #4]
 8000e02:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8000e06:	d038      	beq.n	8000e7a <HAL_GPIO_Init+0x1ba>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e08:	4c28      	ldr	r4, [pc, #160]	; (8000eac <HAL_GPIO_Init+0x1ec>)
 8000e0a:	68a2      	ldr	r2, [r4, #8]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e10:	684a      	ldr	r2, [r1, #4]
 8000e12:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8000e16:	d036      	beq.n	8000e86 <HAL_GPIO_Init+0x1c6>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e18:	4c24      	ldr	r4, [pc, #144]	; (8000eac <HAL_GPIO_Init+0x1ec>)
 8000e1a:	68e2      	ldr	r2, [r4, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e20:	3501      	adds	r5, #1
 8000e22:	2d0f      	cmp	r5, #15
 8000e24:	d835      	bhi.n	8000e92 <HAL_GPIO_Init+0x1d2>
    ioposition = (0x01U << position);
 8000e26:	2201      	movs	r2, #1
 8000e28:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	680b      	ldr	r3, [r1, #0]
 8000e2c:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d1f6      	bne.n	8000e20 <HAL_GPIO_Init+0x160>
      switch (GPIO_Init->Mode)
 8000e32:	684c      	ldr	r4, [r1, #4]
 8000e34:	2c12      	cmp	r4, #18
 8000e36:	d0b8      	beq.n	8000daa <HAL_GPIO_Init+0xea>
 8000e38:	d895      	bhi.n	8000d66 <HAL_GPIO_Init+0xa6>
 8000e3a:	2c02      	cmp	r4, #2
 8000e3c:	d0b2      	beq.n	8000da4 <HAL_GPIO_Init+0xe4>
 8000e3e:	f67f af44 	bls.w	8000cca <HAL_GPIO_Init+0xa>
 8000e42:	2c03      	cmp	r4, #3
 8000e44:	d0b7      	beq.n	8000db6 <HAL_GPIO_Init+0xf6>
 8000e46:	2c11      	cmp	r4, #17
 8000e48:	f47f af44 	bne.w	8000cd4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e4c:	68ce      	ldr	r6, [r1, #12]
 8000e4e:	3604      	adds	r6, #4
          break;
 8000e50:	e740      	b.n	8000cd4 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e52:	2201      	movs	r2, #1
 8000e54:	e7bd      	b.n	8000dd2 <HAL_GPIO_Init+0x112>
 8000e56:	2202      	movs	r2, #2
 8000e58:	e7bb      	b.n	8000dd2 <HAL_GPIO_Init+0x112>
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	e7b9      	b.n	8000dd2 <HAL_GPIO_Init+0x112>
 8000e5e:	2204      	movs	r2, #4
 8000e60:	e7b7      	b.n	8000dd2 <HAL_GPIO_Init+0x112>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e62:	4c12      	ldr	r4, [pc, #72]	; (8000eac <HAL_GPIO_Init+0x1ec>)
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	ea22 0203 	bic.w	r2, r2, r3
 8000e6a:	6022      	str	r2, [r4, #0]
 8000e6c:	e7c0      	b.n	8000df0 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e6e:	4c0f      	ldr	r4, [pc, #60]	; (8000eac <HAL_GPIO_Init+0x1ec>)
 8000e70:	6862      	ldr	r2, [r4, #4]
 8000e72:	ea22 0203 	bic.w	r2, r2, r3
 8000e76:	6062      	str	r2, [r4, #4]
 8000e78:	e7c2      	b.n	8000e00 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e7a:	4c0c      	ldr	r4, [pc, #48]	; (8000eac <HAL_GPIO_Init+0x1ec>)
 8000e7c:	68a2      	ldr	r2, [r4, #8]
 8000e7e:	ea22 0203 	bic.w	r2, r2, r3
 8000e82:	60a2      	str	r2, [r4, #8]
 8000e84:	e7c4      	b.n	8000e10 <HAL_GPIO_Init+0x150>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e86:	4c09      	ldr	r4, [pc, #36]	; (8000eac <HAL_GPIO_Init+0x1ec>)
 8000e88:	68e2      	ldr	r2, [r4, #12]
 8000e8a:	ea22 0303 	bic.w	r3, r2, r3
 8000e8e:	60e3      	str	r3, [r4, #12]
 8000e90:	e7c6      	b.n	8000e20 <HAL_GPIO_Init+0x160>
        }
      }
    }
  }
}
 8000e92:	b002      	add	sp, #8
 8000e94:	bcf0      	pop	{r4, r5, r6, r7}
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	10210000 	.word	0x10210000
 8000ea8:	10310000 	.word	0x10310000
 8000eac:	40010400 	.word	0x40010400

08000eb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eb0:	b912      	cbnz	r2, 8000eb8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eb2:	0409      	lsls	r1, r1, #16
 8000eb4:	6101      	str	r1, [r0, #16]
  }
}
 8000eb6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000eb8:	6101      	str	r1, [r0, #16]
 8000eba:	4770      	bx	lr

08000ebc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ebc:	68c3      	ldr	r3, [r0, #12]
 8000ebe:	4059      	eors	r1, r3
 8000ec0:	60c1      	str	r1, [r0, #12]
}
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d066      	beq.n	8000f96 <HAL_PCD_Init+0xd2>
{
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	4604      	mov	r4, r0
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000ece:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000ed2:	b1c3      	cbz	r3, 8000f06 <HAL_PCD_Init+0x42>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eda:	6820      	ldr	r0, [r4, #0]
 8000edc:	f001 f9c7 	bl	800226e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000ee0:	4625      	mov	r5, r4
 8000ee2:	f855 7b10 	ldr.w	r7, [r5], #16
 8000ee6:	466e      	mov	r6, sp
 8000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	6033      	str	r3, [r6, #0]
 8000ef0:	1d23      	adds	r3, r4, #4
 8000ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	f001 f9ab 	bl	8002250 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000efa:	2100      	movs	r1, #0
 8000efc:	6820      	ldr	r0, [r4, #0]
 8000efe:	f001 f9c0 	bl	8002282 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	e015      	b.n	8000f32 <HAL_PCD_Init+0x6e>
    hpcd->Lock = HAL_UNLOCKED;
 8000f06:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
    HAL_PCD_MspInit(hpcd);
 8000f0a:	f002 fdbd 	bl	8003a88 <HAL_PCD_MspInit>
 8000f0e:	e7e1      	b.n	8000ed4 <HAL_PCD_Init+0x10>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000f10:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8000f14:	2101      	movs	r1, #1
 8000f16:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    hpcd->IN_ep[index].num = index;
 8000f1a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000f1e:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000f20:	2100      	movs	r1, #0
 8000f22:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000f26:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000f28:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000f2a:	1c9a      	adds	r2, r3, #2
 8000f2c:	0152      	lsls	r2, r2, #5
 8000f2e:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8000f30:	3301      	adds	r3, #1
 8000f32:	2b0e      	cmp	r3, #14
 8000f34:	d9ec      	bls.n	8000f10 <HAL_PCD_Init+0x4c>
  }
 
  for (index = 0U; index < 15U ; index++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	e012      	b.n	8000f60 <HAL_PCD_Init+0x9c>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000f3a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f882 1229 	strb.w	r1, [r2, #553]	; 0x229
    hpcd->OUT_ep[index].num = index;
 8000f44:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000f48:	8693      	strh	r3, [r2, #52]	; 0x34
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000f4a:	f882 122b 	strb.w	r1, [r2, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000f4e:	f8c2 1238 	str.w	r1, [r2, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000f52:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000f56:	f103 0212 	add.w	r2, r3, #18
 8000f5a:	0152      	lsls	r2, r2, #5
 8000f5c:	50a1      	str	r1, [r4, r2]
  for (index = 0U; index < 15U ; index++)
 8000f5e:	3301      	adds	r3, #1
 8000f60:	2b0e      	cmp	r3, #14
 8000f62:	d9ea      	bls.n	8000f3a <HAL_PCD_Init+0x76>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f64:	4625      	mov	r5, r4
 8000f66:	f855 7b10 	ldr.w	r7, [r5], #16
 8000f6a:	466e      	mov	r6, sp
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	6033      	str	r3, [r6, #0]
 8000f74:	1d23      	adds	r3, r4, #4
 8000f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f78:	4638      	mov	r0, r7
 8000f7a:	f001 f984 	bl	8002286 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8000f7e:	2500      	movs	r5, #0
 8000f80:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8000f8a:	6820      	ldr	r0, [r4, #0]
 8000f8c:	f001 fbb8 	bl	8002700 <USB_DevDisconnect>
  return HAL_OK;
 8000f90:	4628      	mov	r0, r5
}
 8000f92:	b007      	add	sp, #28
 8000f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000f96:	2001      	movs	r0, #1
}
 8000f98:	4770      	bx	lr

08000f9a <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000f9a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d010      	beq.n	8000fc4 <HAL_PCD_Start+0x2a>
{
 8000fa2:	b510      	push	{r4, lr}
 8000fa4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000fac:	f002 fe5b 	bl	8003c66 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000fb0:	6820      	ldr	r0, [r4, #0]
 8000fb2:	f001 fba3 	bl	80026fc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000fb6:	6820      	ldr	r0, [r4, #0]
 8000fb8:	f001 f951 	bl	800225e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8000fc2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000fc4:	2002      	movs	r0, #2
}
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_PCD_Stop>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000fc8:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d011      	beq.n	8000ff4 <HAL_PCD_Stop+0x2c>
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  __HAL_PCD_DISABLE(hpcd);
 8000fda:	6800      	ldr	r0, [r0, #0]
 8000fdc:	f001 f947 	bl	800226e <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8000fe0:	6820      	ldr	r0, [r4, #0]
 8000fe2:	f001 fb7a 	bl	80026da <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 8000fe6:	6820      	ldr	r0, [r4, #0]
 8000fe8:	f001 fb8a 	bl	8002700 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8000ff2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000ff4:	2002      	movs	r0, #2
}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000ff8:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d00d      	beq.n	800101c <HAL_PCD_SetAddress+0x24>
{
 8001000:	b510      	push	{r4, lr}
 8001002:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001004:	2301      	movs	r3, #1
 8001006:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 800100a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 800100e:	6800      	ldr	r0, [r0, #0]
 8001010:	f001 fb6e 	bl	80026f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001014:	2000      	movs	r0, #0
 8001016:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 800101a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800101c:	2002      	movs	r0, #2
}
 800101e:	4770      	bx	lr

08001020 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001020:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001022:	b24d      	sxtb	r5, r1
 8001024:	2d00      	cmp	r5, #0
 8001026:	db1c      	blt.n	8001062 <HAL_PCD_EP_Open+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001028:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800102c:	0164      	lsls	r4, r4, #5
 800102e:	f504 740a 	add.w	r4, r4, #552	; 0x228
 8001032:	4404      	add	r4, r0
  }
  ep->num   = ep_addr & 0x7FU;
 8001034:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001038:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800103a:	0fed      	lsrs	r5, r5, #31
 800103c:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 800103e:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 8001040:	70e3      	strb	r3, [r4, #3]
    
  __HAL_LOCK(hpcd);
 8001042:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8001046:	2b01      	cmp	r3, #1
 8001048:	d011      	beq.n	800106e <HAL_PCD_EP_Open+0x4e>
 800104a:	4605      	mov	r5, r0
 800104c:	2301      	movs	r3, #1
 800104e:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001052:	4621      	mov	r1, r4
 8001054:	6800      	ldr	r0, [r0, #0]
 8001056:	f001 f92c 	bl	80022b2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800105a:	2000      	movs	r0, #0
 800105c:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
  return ret;
}
 8001060:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001062:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8001066:	0164      	lsls	r4, r4, #5
 8001068:	3428      	adds	r4, #40	; 0x28
 800106a:	4404      	add	r4, r0
 800106c:	e7e2      	b.n	8001034 <HAL_PCD_EP_Open+0x14>
  __HAL_LOCK(hpcd);
 800106e:	2002      	movs	r0, #2
 8001070:	e7f6      	b.n	8001060 <HAL_PCD_EP_Open+0x40>

08001072 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001072:	b570      	push	{r4, r5, r6, lr}
 8001074:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001078:	016c      	lsls	r4, r5, #5
 800107a:	f504 710a 	add.w	r1, r4, #552	; 0x228
 800107e:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001080:	4404      	add	r4, r0
 8001082:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8001086:	f105 0212 	add.w	r2, r5, #18
 800108a:	0152      	lsls	r2, r2, #5
 800108c:	1886      	adds	r6, r0, r2
 800108e:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	6073      	str	r3, [r6, #4]
  ep->is_in = 0U;
 8001094:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  ep->num = ep_addr & 0x7FU;
 8001098:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228

  if ((ep_addr & 0x7FU) == 0U)
 800109c:	b125      	cbz	r5, 80010a8 <HAL_PCD_EP_Receive+0x36>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800109e:	6800      	ldr	r0, [r0, #0]
 80010a0:	f001 fb4a 	bl	8002738 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80010a4:	2000      	movs	r0, #0
 80010a6:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 80010a8:	6800      	ldr	r0, [r0, #0]
 80010aa:	f001 fb45 	bl	8002738 <USB_EPStartXfer>
 80010ae:	e7f9      	b.n	80010a4 <HAL_PCD_EP_Receive+0x32>

080010b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80010b6:	016c      	lsls	r4, r5, #5
 80010b8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80010bc:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80010be:	4404      	add	r4, r0
 80010c0:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 80010c2:	1caa      	adds	r2, r5, #2
 80010c4:	0152      	lsls	r2, r2, #5
 80010c6:	1886      	adds	r6, r0, r2
 80010c8:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	6073      	str	r3, [r6, #4]
  ep->is_in = 1U;
 80010ce:	2301      	movs	r3, #1
 80010d0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & 0x7FU;
 80010d4:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28

  if ((ep_addr & 0x7FU) == 0U)
 80010d8:	b125      	cbz	r5, 80010e4 <HAL_PCD_EP_Transmit+0x34>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80010da:	6800      	ldr	r0, [r0, #0]
 80010dc:	f001 fb2c 	bl	8002738 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80010e0:	2000      	movs	r0, #0
 80010e2:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 80010e4:	6800      	ldr	r0, [r0, #0]
 80010e6:	f001 fb27 	bl	8002738 <USB_EPStartXfer>
 80010ea:	e7f9      	b.n	80010e0 <HAL_PCD_EP_Transmit+0x30>

080010ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80010ec:	b570      	push	{r4, r5, r6, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8ad 3006 	strh.w	r3, [sp, #6]
  __IO uint16_t wEPVal = 0;
 80010f8:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80010fc:	6820      	ldr	r0, [r4, #0]
 80010fe:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001102:	b29b      	uxth	r3, r3
 8001104:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001108:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800110c:	f000 820d 	beq.w	800152a <PCD_EP_ISR_Handler+0x43e>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001110:	f8bd 5006 	ldrh.w	r5, [sp, #6]
    
    if (epindex == 0)
 8001114:	f015 050f 	ands.w	r5, r5, #15
 8001118:	f040 80c2 	bne.w	80012a0 <PCD_EP_ISR_Handler+0x1b4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800111c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001120:	f013 0f10 	tst.w	r3, #16
 8001124:	d050      	beq.n	80011c8 <PCD_EP_ISR_Handler+0xdc>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001126:	8803      	ldrh	r3, [r0, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800112e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001132:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001136:	d179      	bne.n	800122c <PCD_EP_ISR_Handler+0x140>
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001138:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800113c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001140:	d0dc      	beq.n	80010fc <PCD_EP_ISR_Handler+0x10>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001142:	8803      	ldrh	r3, [r0, #0]
 8001144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001148:	051b      	lsls	r3, r3, #20
 800114a:	0d1b      	lsrs	r3, r3, #20
 800114c:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800114e:	6820      	ldr	r0, [r4, #0]
 8001150:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001154:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800115c:	3306      	adds	r3, #6
 800115e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001162:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800116a:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          
          if (ep->xfer_count != 0U)
 800116e:	2b00      	cmp	r3, #0
 8001170:	d17c      	bne.n	800126c <PCD_EP_ISR_Handler+0x180>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
            ep->xfer_buff+=ep->xfer_count;
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001172:	2100      	movs	r1, #0
 8001174:	4620      	mov	r0, r4
 8001176:	f002 fcaf 	bl	8003ad8 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001180:	3206      	adds	r2, #6
 8001182:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001186:	f8d4 1238 	ldr.w	r1, [r4, #568]	; 0x238
 800118a:	293e      	cmp	r1, #62	; 0x3e
 800118c:	d97c      	bls.n	8001288 <PCD_EP_ISR_Handler+0x19c>
 800118e:	f3c1 124f 	ubfx	r2, r1, #5, #16
 8001192:	f011 0f1f 	tst.w	r1, #31
 8001196:	d101      	bne.n	800119c <PCD_EP_ISR_Handler+0xb0>
 8001198:	3a01      	subs	r2, #1
 800119a:	b292      	uxth	r2, r2
 800119c:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80011a0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80011a4:	b292      	uxth	r2, r2
 80011a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80011aa:	6822      	ldr	r2, [r4, #0]
 80011ac:	8813      	ldrh	r3, [r2, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011b8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80011bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	8013      	strh	r3, [r2, #0]
 80011c6:	e799      	b.n	80010fc <PCD_EP_ISR_Handler+0x10>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011c8:	8803      	ldrh	r3, [r0, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80011d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011d8:	6822      	ldr	r2, [r4, #0]
 80011da:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80011de:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80011e2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80011e6:	3302      	adds	r3, #2
 80011e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80011ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80011f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011f4:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80011f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80011f8:	4413      	add	r3, r2
 80011fa:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80011fc:	2100      	movs	r1, #0
 80011fe:	4620      	mov	r0, r4
 8001200:	f002 fc74 	bl	8003aec <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001204:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001208:	2b00      	cmp	r3, #0
 800120a:	f43f af77 	beq.w	80010fc <PCD_EP_ISR_Handler+0x10>
 800120e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001210:	2b00      	cmp	r3, #0
 8001212:	f47f af73 	bne.w	80010fc <PCD_EP_ISR_Handler+0x10>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001216:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800121a:	6822      	ldr	r2, [r4, #0]
 800121c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001220:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800122a:	e767      	b.n	80010fc <PCD_EP_ISR_Handler+0x10>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800122c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001230:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001234:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001238:	3306      	adds	r3, #6
 800123a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800123e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001246:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800124a:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 800124e:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001252:	f001 fbce 	bl	80029f2 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	8813      	ldrh	r3, [r2, #0]
 800125a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800125e:	051b      	lsls	r3, r3, #20
 8001260:	0d1b      	lsrs	r3, r3, #20
 8001262:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001264:	4620      	mov	r0, r4
 8001266:	f002 fc2f 	bl	8003ac8 <HAL_PCD_SetupStageCallback>
 800126a:	e747      	b.n	80010fc <PCD_EP_ISR_Handler+0x10>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800126c:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8001270:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8001274:	f001 fbbd 	bl	80029f2 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001278:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 800127c:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8001280:	4413      	add	r3, r2
 8001282:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
 8001286:	e774      	b.n	8001172 <PCD_EP_ISR_Handler+0x86>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001288:	f3c1 024f 	ubfx	r2, r1, #1, #16
 800128c:	f011 0f01 	tst.w	r1, #1
 8001290:	d001      	beq.n	8001296 <PCD_EP_ISR_Handler+0x1aa>
 8001292:	3201      	adds	r2, #1
 8001294:	b292      	uxth	r2, r2
 8001296:	0292      	lsls	r2, r2, #10
 8001298:	b292      	uxth	r2, r2
 800129a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800129e:	e784      	b.n	80011aa <PCD_EP_ISR_Handler+0xbe>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80012a0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	f8ad 3004 	strh.w	r3, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80012ae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80012b2:	d135      	bne.n	8001320 <PCD_EP_ISR_Handler+0x234>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80012b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80012b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012bc:	f43f af1e 	beq.w	80010fc <PCD_EP_ISR_Handler+0x10>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80012c0:	6822      	ldr	r2, [r4, #0]
 80012c2:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80012cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 80012d6:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80012da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 80b2 	bne.w	8001448 <PCD_EP_ISR_Handler+0x35c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80012e4:	6820      	ldr	r0, [r4, #0]
 80012e6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80012ea:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 80012ee:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80012f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80012f6:	3302      	adds	r3, #2
 80012f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80012fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001304:	1caa      	adds	r2, r5, #2
 8001306:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 800130a:	6053      	str	r3, [r2, #4]
          if (ep->xfer_count != 0U)
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80c6 	beq.w	800149e <PCD_EP_ISR_Handler+0x3b2>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001312:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001316:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8001318:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800131a:	f001 f9f8 	bl	800270e <USB_WritePMA>
 800131e:	e0be      	b.n	800149e <PCD_EP_ISR_Handler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001320:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001328:	051b      	lsls	r3, r3, #20
 800132a:	0d1b      	lsrs	r3, r3, #20
 800132c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001330:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8001334:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8001338:	b9d3      	cbnz	r3, 8001370 <PCD_EP_ISR_Handler+0x284>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800133a:	6820      	ldr	r0, [r4, #0]
 800133c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001340:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8001344:	f892 2228 	ldrb.w	r2, [r2, #552]	; 0x228
 8001348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800134c:	3306      	adds	r3, #6
 800134e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001352:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8001356:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 800135a:	b386      	cbz	r6, 80013be <PCD_EP_ISR_Handler+0x2d2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800135c:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001360:	4633      	mov	r3, r6
 8001362:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8001366:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 800136a:	f001 fb42 	bl	80029f2 <USB_ReadPMA>
 800136e:	e026      	b.n	80013be <PCD_EP_ISR_Handler+0x2d2>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001370:	6820      	ldr	r0, [r4, #0]
 8001372:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8001376:	f893 2228 	ldrb.w	r2, [r3, #552]	; 0x228
 800137a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800137e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001382:	d042      	beq.n	800140a <PCD_EP_ISR_Handler+0x31e>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001384:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800138c:	3302      	adds	r3, #2
 800138e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001392:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8001396:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 800139a:	bb66      	cbnz	r6, 80013f6 <PCD_EP_ISR_Handler+0x30a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800139c:	6822      	ldr	r2, [r4, #0]
 800139e:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80013a2:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80013a6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80013aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ae:	051b      	lsls	r3, r3, #20
 80013b0:	0d1b      	lsrs	r3, r3, #20
 80013b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013ba:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count+=count;
 80013be:	f105 0312 	add.w	r3, r5, #18
 80013c2:	015b      	lsls	r3, r3, #5
 80013c4:	18e1      	adds	r1, r4, r3
 80013c6:	684a      	ldr	r2, [r1, #4]
 80013c8:	4432      	add	r2, r6
 80013ca:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=count;
 80013cc:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80013d0:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 80013d4:	4432      	add	r2, r6
 80013d6:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013da:	58e3      	ldr	r3, [r4, r3]
 80013dc:	b11b      	cbz	r3, 80013e6 <PCD_EP_ISR_Handler+0x2fa>
 80013de:	f8d1 1238 	ldr.w	r1, [r1, #568]	; 0x238
 80013e2:	428e      	cmp	r6, r1
 80013e4:	d228      	bcs.n	8001438 <PCD_EP_ISR_Handler+0x34c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80013e6:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80013ea:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80013ee:	4620      	mov	r0, r4
 80013f0:	f002 fb72 	bl	8003ad8 <HAL_PCD_DataOutStageCallback>
 80013f4:	e75e      	b.n	80012b4 <PCD_EP_ISR_Handler+0x1c8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80013f6:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80013fa:	4633      	mov	r3, r6
 80013fc:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8001400:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001404:	f001 faf5 	bl	80029f2 <USB_ReadPMA>
 8001408:	e7c8      	b.n	800139c <PCD_EP_ISR_Handler+0x2b0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800140a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800140e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001412:	3306      	adds	r3, #6
 8001414:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001418:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 800141c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001420:	2e00      	cmp	r6, #0
 8001422:	d0bb      	beq.n	800139c <PCD_EP_ISR_Handler+0x2b0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001424:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001428:	4633      	mov	r3, r6
 800142a:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 800142e:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001432:	f001 fade 	bl	80029f2 <USB_ReadPMA>
 8001436:	e7b1      	b.n	800139c <PCD_EP_ISR_Handler+0x2b0>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001438:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800143c:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001440:	4620      	mov	r0, r4
 8001442:	f7ff fe16 	bl	8001072 <HAL_PCD_EP_Receive>
 8001446:	e735      	b.n	80012b4 <PCD_EP_ISR_Handler+0x1c8>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001448:	6820      	ldr	r0, [r4, #0]
 800144a:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 800144e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001452:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001456:	f013 0f40 	tst.w	r3, #64	; 0x40
 800145a:	d046      	beq.n	80014ea <PCD_EP_ISR_Handler+0x3fe>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800145c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001464:	3302      	adds	r3, #2
 8001466:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800146a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800146e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001472:	1caa      	adds	r2, r5, #2
 8001474:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8001478:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 800147a:	bb7b      	cbnz	r3, 80014dc <PCD_EP_ISR_Handler+0x3f0>
            if (ep->xfer_count != 0U)
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800147c:	6822      	ldr	r2, [r4, #0]
 800147e:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8001482:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001486:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800148a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800148e:	051b      	lsls	r3, r3, #20
 8001490:	0d1b      	lsrs	r3, r3, #20
 8001492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800149e:	6822      	ldr	r2, [r4, #0]
 80014a0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80014a4:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 80014a8:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 80014ac:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80014b0:	3302      	adds	r3, #2
 80014b2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80014b6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80014ba:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014be:	1cab      	adds	r3, r5, #2
 80014c0:	015b      	lsls	r3, r3, #5
 80014c2:	18e1      	adds	r1, r4, r3
 80014c4:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=ep->xfer_count;
 80014c6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80014c8:	440a      	add	r2, r1
 80014ca:	63c2      	str	r2, [r0, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80014cc:	58e3      	ldr	r3, [r4, r3]
 80014ce:	bb23      	cbnz	r3, 800151a <PCD_EP_ISR_Handler+0x42e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80014d0:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 80014d4:	4620      	mov	r0, r4
 80014d6:	f002 fb09 	bl	8003aec <HAL_PCD_DataInStageCallback>
 80014da:	e60f      	b.n	80010fc <PCD_EP_ISR_Handler+0x10>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80014dc:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 80014e0:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80014e2:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80014e4:	f001 f913 	bl	800270e <USB_WritePMA>
 80014e8:	e7c8      	b.n	800147c <PCD_EP_ISR_Handler+0x390>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80014ea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80014ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80014f2:	3306      	adds	r3, #6
 80014f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80014f8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80014fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001500:	1caa      	adds	r2, r5, #2
 8001502:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8001506:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0b7      	beq.n	800147c <PCD_EP_ISR_Handler+0x390>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800150c:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001510:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001512:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001514:	f001 f8fb 	bl	800270e <USB_WritePMA>
 8001518:	e7b0      	b.n	800147c <PCD_EP_ISR_Handler+0x390>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800151a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800151e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff fdc4 	bl	80010b0 <HAL_PCD_EP_Transmit>
 8001528:	e5e8      	b.n	80010fc <PCD_EP_ISR_Handler+0x10>
        }
      } 
    }
  }
  return HAL_OK;
}
 800152a:	2000      	movs	r0, #0
 800152c:	b002      	add	sp, #8
 800152e:	bd70      	pop	{r4, r5, r6, pc}

08001530 <HAL_PCD_IRQHandler>:
{ 
 8001530:	b510      	push	{r4, lr}
 8001532:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001534:	6800      	ldr	r0, [r0, #0]
 8001536:	f001 f8e5 	bl	8002704 <USB_ReadInterrupts>
 800153a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800153e:	d145      	bne.n	80015cc <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001540:	6820      	ldr	r0, [r4, #0]
 8001542:	f001 f8df 	bl	8002704 <USB_ReadInterrupts>
 8001546:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800154a:	d143      	bne.n	80015d4 <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800154c:	6820      	ldr	r0, [r4, #0]
 800154e:	f001 f8d9 	bl	8002704 <USB_ReadInterrupts>
 8001552:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8001556:	d008      	beq.n	800156a <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001558:	6822      	ldr	r2, [r4, #0]
 800155a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800155e:	b29b      	uxth	r3, r3
 8001560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001564:	b29b      	uxth	r3, r3
 8001566:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800156a:	6820      	ldr	r0, [r4, #0]
 800156c:	f001 f8ca 	bl	8002704 <USB_ReadInterrupts>
 8001570:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001574:	d008      	beq.n	8001588 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001576:	6822      	ldr	r2, [r4, #0]
 8001578:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800157c:	b29b      	uxth	r3, r3
 800157e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001582:	b29b      	uxth	r3, r3
 8001584:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001588:	6820      	ldr	r0, [r4, #0]
 800158a:	f001 f8bb 	bl	8002704 <USB_ReadInterrupts>
 800158e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001592:	d130      	bne.n	80015f6 <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001594:	6820      	ldr	r0, [r4, #0]
 8001596:	f001 f8b5 	bl	8002704 <USB_ReadInterrupts>
 800159a:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800159e:	d149      	bne.n	8001634 <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80015a0:	6820      	ldr	r0, [r4, #0]
 80015a2:	f001 f8af 	bl	8002704 <USB_ReadInterrupts>
 80015a6:	f410 7f00 	tst.w	r0, #512	; 0x200
 80015aa:	d164      	bne.n	8001676 <HAL_PCD_IRQHandler+0x146>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80015ac:	6820      	ldr	r0, [r4, #0]
 80015ae:	f001 f8a9 	bl	8002704 <USB_ReadInterrupts>
 80015b2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80015b6:	d008      	beq.n	80015ca <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80015b8:	6822      	ldr	r2, [r4, #0]
 80015ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80015be:	b29b      	uxth	r3, r3
 80015c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80015ca:	bd10      	pop	{r4, pc}
    PCD_EP_ISR_Handler(hpcd);
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7ff fd8d 	bl	80010ec <PCD_EP_ISR_Handler>
 80015d2:	e7b5      	b.n	8001540 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015d4:	6822      	ldr	r2, [r4, #0]
 80015d6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80015e6:	4620      	mov	r0, r4
 80015e8:	f002 fa8f 	bl	8003b0a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80015ec:	2100      	movs	r1, #0
 80015ee:	4620      	mov	r0, r4
 80015f0:	f7ff fd02 	bl	8000ff8 <HAL_PCD_SetAddress>
 80015f4:	e7aa      	b.n	800154c <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	f023 0304 	bic.w	r3, r3, #4
 8001602:	b29b      	uxth	r3, r3
 8001604:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8001608:	6822      	ldr	r2, [r4, #0]
 800160a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800160e:	b29b      	uxth	r3, r3
 8001610:	f023 0308 	bic.w	r3, r3, #8
 8001614:	b29b      	uxth	r3, r3
 8001616:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800161a:	4620      	mov	r0, r4
 800161c:	f002 fa96 	bl	8003b4c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001620:	6822      	ldr	r2, [r4, #0]
 8001622:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001626:	b29b      	uxth	r3, r3
 8001628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800162c:	b29b      	uxth	r3, r3
 800162e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001632:	e7af      	b.n	8001594 <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001634:	6822      	ldr	r2, [r4, #0]
 8001636:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001648:	b29b      	uxth	r3, r3
 800164a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800164e:	b29b      	uxth	r3, r3
 8001650:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001662:	6820      	ldr	r0, [r4, #0]
 8001664:	f001 f84e 	bl	8002704 <USB_ReadInterrupts>
 8001668:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800166c:	d198      	bne.n	80015a0 <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 800166e:	4620      	mov	r0, r4
 8001670:	f002 fa5c 	bl	8003b2c <HAL_PCD_SuspendCallback>
 8001674:	e794      	b.n	80015a0 <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001676:	6822      	ldr	r2, [r4, #0]
 8001678:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800167c:	b29b      	uxth	r3, r3
 800167e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001682:	b29b      	uxth	r3, r3
 8001684:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001688:	4620      	mov	r0, r4
 800168a:	f002 fa38 	bl	8003afe <HAL_PCD_SOFCallback>
 800168e:	e78d      	b.n	80015ac <HAL_PCD_IRQHandler+0x7c>

08001690 <HAL_PCD_EP_SetStall>:
{
 8001690:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001692:	b24a      	sxtb	r2, r1
 8001694:	2a00      	cmp	r2, #0
 8001696:	db1b      	blt.n	80016d0 <HAL_PCD_EP_SetStall+0x40>
    ep = &hpcd->OUT_ep[ep_addr];
 8001698:	014b      	lsls	r3, r1, #5
 800169a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800169e:	4403      	add	r3, r0
  ep->is_stall = 1U;
 80016a0:	2401      	movs	r4, #1
 80016a2:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80016a4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80016a8:	701d      	strb	r5, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80016aa:	0fd2      	lsrs	r2, r2, #31
 80016ac:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 80016ae:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 80016b2:	42a2      	cmp	r2, r4
 80016b4:	d018      	beq.n	80016e8 <HAL_PCD_EP_SetStall+0x58>
 80016b6:	4604      	mov	r4, r0
 80016b8:	2201      	movs	r2, #1
 80016ba:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 80016be:	4619      	mov	r1, r3
 80016c0:	6800      	ldr	r0, [r0, #0]
 80016c2:	f000 ff8a 	bl	80025da <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80016c6:	b14d      	cbz	r5, 80016dc <HAL_PCD_EP_SetStall+0x4c>
  __HAL_UNLOCK(hpcd); 
 80016c8:	2000      	movs	r0, #0
 80016ca:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80016d0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80016d4:	015b      	lsls	r3, r3, #5
 80016d6:	3328      	adds	r3, #40	; 0x28
 80016d8:	4403      	add	r3, r0
 80016da:	e7e1      	b.n	80016a0 <HAL_PCD_EP_SetStall+0x10>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016dc:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80016e0:	6820      	ldr	r0, [r4, #0]
 80016e2:	f001 f812 	bl	800270a <USB_EP0_OutStart>
 80016e6:	e7ef      	b.n	80016c8 <HAL_PCD_EP_SetStall+0x38>
  __HAL_LOCK(hpcd);
 80016e8:	2002      	movs	r0, #2
 80016ea:	e7f0      	b.n	80016ce <HAL_PCD_EP_SetStall+0x3e>

080016ec <HAL_PCD_EP_ClrStall>:
{
 80016ec:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80016ee:	b24a      	sxtb	r2, r1
 80016f0:	2a00      	cmp	r2, #0
 80016f2:	db1a      	blt.n	800172a <HAL_PCD_EP_ClrStall+0x3e>
    ep = &hpcd->OUT_ep[ep_addr];
 80016f4:	014b      	lsls	r3, r1, #5
 80016f6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80016fa:	4403      	add	r3, r0
  ep->is_stall = 0U;
 80016fc:	2400      	movs	r4, #0
 80016fe:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001700:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001704:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001706:	0fd2      	lsrs	r2, r2, #31
 8001708:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd); 
 800170a:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 800170e:	2a01      	cmp	r2, #1
 8001710:	d011      	beq.n	8001736 <HAL_PCD_EP_ClrStall+0x4a>
 8001712:	4604      	mov	r4, r0
 8001714:	2201      	movs	r2, #1
 8001716:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 800171a:	4619      	mov	r1, r3
 800171c:	6800      	ldr	r0, [r0, #0]
 800171e:	f000 ff93 	bl	8002648 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001722:	2000      	movs	r0, #0
 8001724:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8001728:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800172a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	3328      	adds	r3, #40	; 0x28
 8001732:	4403      	add	r3, r0
 8001734:	e7e2      	b.n	80016fc <HAL_PCD_EP_ClrStall+0x10>
  __HAL_LOCK(hpcd); 
 8001736:	2002      	movs	r0, #2
 8001738:	e7f6      	b.n	8001728 <HAL_PCD_EP_ClrStall+0x3c>

0800173a <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 800173a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800173e:	d00c      	beq.n	800175a <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001740:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001744:	0149      	lsls	r1, r1, #5
 8001746:	3128      	adds	r1, #40	; 0x28
 8001748:	4401      	add	r1, r0
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800174a:	b15a      	cbz	r2, 8001764 <HAL_PCDEx_PMAConfig+0x2a>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 800174c:	2201      	movs	r2, #1
 800174e:	728a      	strb	r2, [r1, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8001750:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001752:	0c1b      	lsrs	r3, r3, #16
 8001754:	810b      	strh	r3, [r1, #8]
  }
  
  return HAL_OK; 
}
 8001756:	2000      	movs	r0, #0
 8001758:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800175a:	0149      	lsls	r1, r1, #5
 800175c:	f501 710a 	add.w	r1, r1, #552	; 0x228
 8001760:	4401      	add	r1, r0
 8001762:	e7f2      	b.n	800174a <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 0U;
 8001764:	728a      	strb	r2, [r1, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8001766:	808b      	strh	r3, [r1, #4]
 8001768:	e7f5      	b.n	8001756 <HAL_PCDEx_PMAConfig+0x1c>
	...

0800176c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800176c:	4b01      	ldr	r3, [pc, #4]	; (8001774 <HAL_PWR_EnableBkUpAccess+0x8>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]
}
 8001772:	4770      	bx	lr
 8001774:	420e0020 	.word	0x420e0020

08001778 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001778:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <RCC_Delay+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <RCC_Delay+0x28>)
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	0a5b      	lsrs	r3, r3, #9
 8001786:	fb00 f003 	mul.w	r0, r0, r3
 800178a:	9001      	str	r0, [sp, #4]
  __ASM volatile ("nop");
 800178c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800178e:	9b01      	ldr	r3, [sp, #4]
 8001790:	1e5a      	subs	r2, r3, #1
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f9      	bne.n	800178c <RCC_Delay+0x14>
}
 8001798:	b002      	add	sp, #8
 800179a:	4770      	bx	lr
 800179c:	20000000 	.word	0x20000000
 80017a0:	10624dd3 	.word	0x10624dd3

080017a4 <HAL_RCC_DeInit>:
{
 80017a4:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 80017a6:	f7ff f8a3 	bl	80008f0 <HAL_GetTick>
 80017aa:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80017ac:	4a35      	ldr	r2, [pc, #212]	; (8001884 <HAL_RCC_DeInit+0xe0>)
 80017ae:	6813      	ldr	r3, [r2, #0]
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80017b6:	4b33      	ldr	r3, [pc, #204]	; (8001884 <HAL_RCC_DeInit+0xe0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f013 0f02 	tst.w	r3, #2
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_DeInit+0x2c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c0:	f7ff f896 	bl	80008f0 <HAL_GetTick>
 80017c4:	1b00      	subs	r0, r0, r4
 80017c6:	2802      	cmp	r0, #2
 80017c8:	d9f5      	bls.n	80017b6 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 80017ca:	2403      	movs	r4, #3
}
 80017cc:	4620      	mov	r0, r4
 80017ce:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80017d0:	4d2c      	ldr	r5, [pc, #176]	; (8001884 <HAL_RCC_DeInit+0xe0>)
 80017d2:	682b      	ldr	r3, [r5, #0]
 80017d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80017de:	f7ff f887 	bl	80008f0 <HAL_GetTick>
 80017e2:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 80017e4:	2300      	movs	r3, #0
 80017e6:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_RCC_DeInit+0xe0>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f013 0f0c 	tst.w	r3, #12
 80017f0:	d008      	beq.n	8001804 <HAL_RCC_DeInit+0x60>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f2:	f7ff f87d 	bl	80008f0 <HAL_GetTick>
 80017f6:	1b00      	subs	r0, r0, r4
 80017f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80017fc:	4298      	cmp	r0, r3
 80017fe:	d9f3      	bls.n	80017e8 <HAL_RCC_DeInit+0x44>
      return HAL_TIMEOUT;
 8001800:	2403      	movs	r4, #3
 8001802:	e7e3      	b.n	80017cc <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_RCC_DeInit+0xe4>)
 8001806:	4a21      	ldr	r2, [pc, #132]	; (800188c <HAL_RCC_DeInit+0xe8>)
 8001808:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff f82c 	bl	8000868 <HAL_InitTick>
 8001810:	4604      	mov	r4, r0
 8001812:	b108      	cbz	r0, 8001818 <HAL_RCC_DeInit+0x74>
    return HAL_ERROR;
 8001814:	2401      	movs	r4, #1
 8001816:	e7d9      	b.n	80017cc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8001818:	f7ff f86a 	bl	80008f0 <HAL_GetTick>
 800181c:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800181e:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_RCC_DeInit+0xe0>)
 8001820:	6813      	ldr	r3, [r2, #0]
 8001822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001826:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <HAL_RCC_DeInit+0xe0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001830:	d006      	beq.n	8001840 <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff f85d 	bl	80008f0 <HAL_GetTick>
 8001836:	1b40      	subs	r0, r0, r5
 8001838:	2802      	cmp	r0, #2
 800183a:	d9f5      	bls.n	8001828 <HAL_RCC_DeInit+0x84>
      return HAL_TIMEOUT;
 800183c:	2403      	movs	r4, #3
 800183e:	e7c5      	b.n	80017cc <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 8001840:	4e10      	ldr	r6, [pc, #64]	; (8001884 <HAL_RCC_DeInit+0xe0>)
 8001842:	2300      	movs	r3, #0
 8001844:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 8001846:	f7ff f853 	bl	80008f0 <HAL_GetTick>
 800184a:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800184c:	6833      	ldr	r3, [r6, #0]
 800184e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001852:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_DeInit+0xe0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800185c:	d006      	beq.n	800186c <HAL_RCC_DeInit+0xc8>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185e:	f7ff f847 	bl	80008f0 <HAL_GetTick>
 8001862:	1b40      	subs	r0, r0, r5
 8001864:	2864      	cmp	r0, #100	; 0x64
 8001866:	d9f5      	bls.n	8001854 <HAL_RCC_DeInit+0xb0>
      return HAL_TIMEOUT;
 8001868:	2403      	movs	r4, #3
 800186a:	e7af      	b.n	80017cc <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_DeInit+0xe0>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001874:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001878:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_REG(RCC->CIR);
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001882:	e7a3      	b.n	80017cc <HAL_RCC_DeInit+0x28>
 8001884:	40021000 	.word	0x40021000
 8001888:	20000000 	.word	0x20000000
 800188c:	007a1200 	.word	0x007a1200

08001890 <HAL_RCC_OscConfig>:
{
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	6803      	ldr	r3, [r0, #0]
 8001898:	f013 0f01 	tst.w	r3, #1
 800189c:	d02c      	beq.n	80018f8 <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800189e:	4bab      	ldr	r3, [pc, #684]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d01d      	beq.n	80018e6 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018aa:	4ba8      	ldr	r3, [pc, #672]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d012      	beq.n	80018dc <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	6863      	ldr	r3, [r4, #4]
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018bc:	d041      	beq.n	8001942 <HAL_RCC_OscConfig+0xb2>
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d155      	bne.n	800196e <HAL_RCC_OscConfig+0xde>
 80018c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018c6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e037      	b.n	800194c <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018dc:	4b9b      	ldr	r3, [pc, #620]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80018e4:	d0e7      	beq.n	80018b6 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e6:	4b99      	ldr	r3, [pc, #612]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018ee:	d003      	beq.n	80018f8 <HAL_RCC_OscConfig+0x68>
 80018f0:	6863      	ldr	r3, [r4, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 81ae 	beq.w	8001c54 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	f013 0f02 	tst.w	r3, #2
 80018fe:	d076      	beq.n	80019ee <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001900:	4b92      	ldr	r3, [pc, #584]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f013 0f0c 	tst.w	r3, #12
 8001908:	d05f      	beq.n	80019ca <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800190a:	4b90      	ldr	r3, [pc, #576]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b08      	cmp	r3, #8
 8001914:	d054      	beq.n	80019c0 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001916:	6923      	ldr	r3, [r4, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 808a 	beq.w	8001a32 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 800191e:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <HAL_RCC_OscConfig+0x2c0>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001924:	f7fe ffe4 	bl	80008f0 <HAL_GetTick>
 8001928:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b88      	ldr	r3, [pc, #544]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f013 0f02 	tst.w	r3, #2
 8001932:	d175      	bne.n	8001a20 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001934:	f7fe ffdc 	bl	80008f0 <HAL_GetTick>
 8001938:	1b40      	subs	r0, r0, r5
 800193a:	2802      	cmp	r0, #2
 800193c:	d9f5      	bls.n	800192a <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 800193e:	2003      	movs	r0, #3
 8001940:	e18b      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001942:	4a82      	ldr	r2, [pc, #520]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001944:	6813      	ldr	r3, [r2, #0]
 8001946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800194c:	6863      	ldr	r3, [r4, #4]
 800194e:	b343      	cbz	r3, 80019a2 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8001950:	f7fe ffce 	bl	80008f0 <HAL_GetTick>
 8001954:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b7d      	ldr	r3, [pc, #500]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800195e:	d1cb      	bne.n	80018f8 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001960:	f7fe ffc6 	bl	80008f0 <HAL_GetTick>
 8001964:	1b40      	subs	r0, r0, r5
 8001966:	2864      	cmp	r0, #100	; 0x64
 8001968:	d9f5      	bls.n	8001956 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800196a:	2003      	movs	r0, #3
 800196c:	e175      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001972:	d009      	beq.n	8001988 <HAL_RCC_OscConfig+0xf8>
 8001974:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e7e1      	b.n	800194c <HAL_RCC_OscConfig+0xbc>
 8001988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800198c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e7d4      	b.n	800194c <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 80019a2:	f7fe ffa5 	bl	80008f0 <HAL_GetTick>
 80019a6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a8:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019b0:	d0a2      	beq.n	80018f8 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b2:	f7fe ff9d 	bl	80008f0 <HAL_GetTick>
 80019b6:	1b40      	subs	r0, r0, r5
 80019b8:	2864      	cmp	r0, #100	; 0x64
 80019ba:	d9f5      	bls.n	80019a8 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80019bc:	2003      	movs	r0, #3
 80019be:	e14c      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019c0:	4b62      	ldr	r3, [pc, #392]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80019c8:	d1a5      	bne.n	8001916 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	4b60      	ldr	r3, [pc, #384]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f013 0f02 	tst.w	r3, #2
 80019d2:	d004      	beq.n	80019de <HAL_RCC_OscConfig+0x14e>
 80019d4:	6923      	ldr	r3, [r4, #16]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
 80019dc:	e13d      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4a5b      	ldr	r2, [pc, #364]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019e6:	6961      	ldr	r1, [r4, #20]
 80019e8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019ec:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	f013 0f08 	tst.w	r3, #8
 80019f4:	d032      	beq.n	8001a5c <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f6:	69a3      	ldr	r3, [r4, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d05b      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 80019fc:	4b55      	ldr	r3, [pc, #340]	; (8001b54 <HAL_RCC_OscConfig+0x2c4>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a02:	f7fe ff75 	bl	80008f0 <HAL_GetTick>
 8001a06:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a08:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	f013 0f02 	tst.w	r3, #2
 8001a10:	d121      	bne.n	8001a56 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a12:	f7fe ff6d 	bl	80008f0 <HAL_GetTick>
 8001a16:	1b40      	subs	r0, r0, r5
 8001a18:	2802      	cmp	r0, #2
 8001a1a:	d9f5      	bls.n	8001a08 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	e11c      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001a22:	6813      	ldr	r3, [r2, #0]
 8001a24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a28:	6961      	ldr	r1, [r4, #20]
 8001a2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e7dd      	b.n	80019ee <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_OscConfig+0x2c0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a38:	f7fe ff5a 	bl	80008f0 <HAL_GetTick>
 8001a3c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f013 0f02 	tst.w	r3, #2
 8001a46:	d0d2      	beq.n	80019ee <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a48:	f7fe ff52 	bl	80008f0 <HAL_GetTick>
 8001a4c:	1b40      	subs	r0, r0, r5
 8001a4e:	2802      	cmp	r0, #2
 8001a50:	d9f5      	bls.n	8001a3e <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8001a52:	2003      	movs	r0, #3
 8001a54:	e101      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff fe8e 	bl	8001778 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	f013 0f04 	tst.w	r3, #4
 8001a62:	f000 8097 	beq.w	8001b94 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a66:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a6e:	d133      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a70:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001a72:	69da      	ldr	r2, [r3, #28]
 8001a74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a78:	61da      	str	r2, [r3, #28]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a84:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a86:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <HAL_RCC_OscConfig+0x2c8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a8e:	d025      	beq.n	8001adc <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a90:	68e3      	ldr	r3, [r4, #12]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d036      	beq.n	8001b04 <HAL_RCC_OscConfig+0x274>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d14c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2a4>
 8001a9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a9e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001aa2:	6a1a      	ldr	r2, [r3, #32]
 8001aa4:	f022 0201 	bic.w	r2, r2, #1
 8001aa8:	621a      	str	r2, [r3, #32]
 8001aaa:	6a1a      	ldr	r2, [r3, #32]
 8001aac:	f022 0204 	bic.w	r2, r2, #4
 8001ab0:	621a      	str	r2, [r3, #32]
 8001ab2:	e02c      	b.n	8001b0e <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_RCC_OscConfig+0x2c4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001aba:	f7fe ff19 	bl	80008f0 <HAL_GetTick>
 8001abe:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	f013 0f02 	tst.w	r3, #2
 8001ac8:	d0c8      	beq.n	8001a5c <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aca:	f7fe ff11 	bl	80008f0 <HAL_GetTick>
 8001ace:	1b40      	subs	r0, r0, r5
 8001ad0:	2802      	cmp	r0, #2
 8001ad2:	d9f5      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	e0c0      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 8001ad8:	2500      	movs	r5, #0
 8001ada:	e7d4      	b.n	8001a86 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001adc:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_RCC_OscConfig+0x2c8>)
 8001ade:	6813      	ldr	r3, [r2, #0]
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001ae6:	f7fe ff03 	bl	80008f0 <HAL_GetTick>
 8001aea:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_RCC_OscConfig+0x2c8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001af4:	d1cc      	bne.n	8001a90 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7fe fefb 	bl	80008f0 <HAL_GetTick>
 8001afa:	1b80      	subs	r0, r0, r6
 8001afc:	2864      	cmp	r0, #100	; 0x64
 8001afe:	d9f5      	bls.n	8001aec <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 8001b00:	2003      	movs	r0, #3
 8001b02:	e0aa      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001b06:	6a13      	ldr	r3, [r2, #32]
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0e:	68e3      	ldr	r3, [r4, #12]
 8001b10:	b373      	cbz	r3, 8001b70 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 8001b12:	f7fe feed 	bl	80008f0 <HAL_GetTick>
 8001b16:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	f013 0f02 	tst.w	r3, #2
 8001b20:	d137      	bne.n	8001b92 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7fe fee5 	bl	80008f0 <HAL_GetTick>
 8001b26:	1b80      	subs	r0, r0, r6
 8001b28:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b2c:	4298      	cmp	r0, r3
 8001b2e:	d9f3      	bls.n	8001b18 <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 8001b30:	2003      	movs	r0, #3
 8001b32:	e092      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d011      	beq.n	8001b5c <HAL_RCC_OscConfig+0x2cc>
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <HAL_RCC_OscConfig+0x2bc>)
 8001b3a:	6a1a      	ldr	r2, [r3, #32]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	621a      	str	r2, [r3, #32]
 8001b42:	6a1a      	ldr	r2, [r3, #32]
 8001b44:	f022 0204 	bic.w	r2, r2, #4
 8001b48:	621a      	str	r2, [r3, #32]
 8001b4a:	e7e0      	b.n	8001b0e <HAL_RCC_OscConfig+0x27e>
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	42420000 	.word	0x42420000
 8001b54:	42420480 	.word	0x42420480
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_RCC_OscConfig+0x3d4>)
 8001b5e:	6a1a      	ldr	r2, [r3, #32]
 8001b60:	f042 0204 	orr.w	r2, r2, #4
 8001b64:	621a      	str	r2, [r3, #32]
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	621a      	str	r2, [r3, #32]
 8001b6e:	e7ce      	b.n	8001b0e <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 8001b70:	f7fe febe 	bl	80008f0 <HAL_GetTick>
 8001b74:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b76:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <HAL_RCC_OscConfig+0x3d4>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	f013 0f02 	tst.w	r3, #2
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f7fe feb6 	bl	80008f0 <HAL_GetTick>
 8001b84:	1b80      	subs	r0, r0, r6
 8001b86:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b8a:	4298      	cmp	r0, r3
 8001b8c:	d9f3      	bls.n	8001b76 <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 8001b8e:	2003      	movs	r0, #3
 8001b90:	e063      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 8001b92:	b9e5      	cbnz	r5, 8001bce <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b94:	69e3      	ldr	r3, [r4, #28]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d05e      	beq.n	8001c58 <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9a:	4a32      	ldr	r2, [pc, #200]	; (8001c64 <HAL_RCC_OscConfig+0x3d4>)
 8001b9c:	6852      	ldr	r2, [r2, #4]
 8001b9e:	f002 020c 	and.w	r2, r2, #12
 8001ba2:	2a08      	cmp	r2, #8
 8001ba4:	d05b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d017      	beq.n	8001bda <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_RCC_OscConfig+0x3d8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bb0:	f7fe fe9e 	bl	80008f0 <HAL_GetTick>
 8001bb4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_RCC_OscConfig+0x3d4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bbe:	d047      	beq.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7fe fe96 	bl	80008f0 <HAL_GetTick>
 8001bc4:	1b00      	subs	r0, r0, r4
 8001bc6:	2802      	cmp	r0, #2
 8001bc8:	d9f5      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 8001bca:	2003      	movs	r0, #3
 8001bcc:	e045      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bce:	4a25      	ldr	r2, [pc, #148]	; (8001c64 <HAL_RCC_OscConfig+0x3d4>)
 8001bd0:	69d3      	ldr	r3, [r2, #28]
 8001bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	61d3      	str	r3, [r2, #28]
 8001bd8:	e7dc      	b.n	8001b94 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_RCC_OscConfig+0x3d8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001be0:	f7fe fe86 	bl	80008f0 <HAL_GetTick>
 8001be4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be6:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <HAL_RCC_OscConfig+0x3d4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bee:	d006      	beq.n	8001bfe <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7fe fe7e 	bl	80008f0 <HAL_GetTick>
 8001bf4:	1b40      	subs	r0, r0, r5
 8001bf6:	2802      	cmp	r0, #2
 8001bf8:	d9f5      	bls.n	8001be6 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8001bfa:	2003      	movs	r0, #3
 8001bfc:	e02d      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bfe:	6a23      	ldr	r3, [r4, #32]
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d01a      	beq.n	8001c3c <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c06:	4917      	ldr	r1, [pc, #92]	; (8001c64 <HAL_RCC_OscConfig+0x3d4>)
 8001c08:	684b      	ldr	r3, [r1, #4]
 8001c0a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001c0e:	6a22      	ldr	r2, [r4, #32]
 8001c10:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c12:	4302      	orrs	r2, r0
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_RCC_OscConfig+0x3d8>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c1e:	f7fe fe67 	bl	80008f0 <HAL_GetTick>
 8001c22:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_RCC_OscConfig+0x3d4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c2c:	d10e      	bne.n	8001c4c <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7fe fe5f 	bl	80008f0 <HAL_GetTick>
 8001c32:	1b00      	subs	r0, r0, r4
 8001c34:	2802      	cmp	r0, #2
 8001c36:	d9f5      	bls.n	8001c24 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 8001c38:	2003      	movs	r0, #3
 8001c3a:	e00e      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c3c:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCC_OscConfig+0x3d4>)
 8001c3e:	6853      	ldr	r3, [r2, #4]
 8001c40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c44:	68a1      	ldr	r1, [r4, #8]
 8001c46:	430b      	orrs	r3, r1
 8001c48:	6053      	str	r3, [r2, #4]
 8001c4a:	e7dc      	b.n	8001c06 <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	e004      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
 8001c50:	2000      	movs	r0, #0
 8001c52:	e002      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 8001c54:	2001      	movs	r0, #1
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 8001c58:	2000      	movs	r0, #0
}
 8001c5a:	b002      	add	sp, #8
 8001c5c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
 8001c60:	e7fb      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	42420060 	.word	0x42420060

08001c6c <HAL_RCC_GetSysClockFreq>:
{
 8001c6c:	b410      	push	{r4}
 8001c6e:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c70:	4c16      	ldr	r4, [pc, #88]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x60>)
 8001c72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c76:	f10d 0c18 	add.w	ip, sp, #24
 8001c7a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c7e:	8a23      	ldrh	r3, [r4, #16]
 8001c80:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001c86:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c88:	f003 020c 	and.w	r2, r3, #12
 8001c8c:	2a08      	cmp	r2, #8
 8001c8e:	d11a      	bne.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c90:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001c94:	4462      	add	r2, ip
 8001c96:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c9a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c9e:	d105      	bne.n	8001cac <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ca0:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x68>)
 8001ca2:	fb00 f002 	mul.w	r0, r0, r2
}
 8001ca6:	b007      	add	sp, #28
 8001ca8:	bc10      	pop	{r4}
 8001caa:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001cb4:	4463      	add	r3, ip
 8001cb6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cba:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001cbc:	fb00 f002 	mul.w	r0, r0, r2
 8001cc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cc4:	e7ef      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8001cc6:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001cc8:	e7ed      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cca:	bf00      	nop
 8001ccc:	08003cdc 	.word	0x08003cdc
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	003d0900 	.word	0x003d0900
 8001cd8:	007a1200 	.word	0x007a1200

08001cdc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cdc:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <HAL_RCC_ClockConfig+0x18c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	428b      	cmp	r3, r1
 8001ce6:	d20c      	bcs.n	8001d02 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce8:	4a5f      	ldr	r2, [pc, #380]	; (8001e68 <HAL_RCC_ClockConfig+0x18c>)
 8001cea:	6813      	ldr	r3, [r2, #0]
 8001cec:	f023 0307 	bic.w	r3, r3, #7
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cf4:	6813      	ldr	r3, [r2, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	428b      	cmp	r3, r1
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001cfe:	2001      	movs	r0, #1
}
 8001d00:	4770      	bx	lr
{
 8001d02:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	6803      	ldr	r3, [r0, #0]
 8001d06:	f013 0f02 	tst.w	r3, #2
 8001d0a:	d017      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	f013 0f04 	tst.w	r3, #4
 8001d10:	d004      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d12:	4a56      	ldr	r2, [pc, #344]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001d14:	6853      	ldr	r3, [r2, #4]
 8001d16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d1a:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1c:	6803      	ldr	r3, [r0, #0]
 8001d1e:	f013 0f08 	tst.w	r3, #8
 8001d22:	d004      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d24:	4a51      	ldr	r2, [pc, #324]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001d26:	6853      	ldr	r3, [r2, #4]
 8001d28:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d2c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2e:	4a4f      	ldr	r2, [pc, #316]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001d30:	6853      	ldr	r3, [r2, #4]
 8001d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d36:	6884      	ldr	r4, [r0, #8]
 8001d38:	4323      	orrs	r3, r4
 8001d3a:	6053      	str	r3, [r2, #4]
 8001d3c:	460d      	mov	r5, r1
 8001d3e:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d40:	6803      	ldr	r3, [r0, #0]
 8001d42:	f013 0f01 	tst.w	r3, #1
 8001d46:	d052      	beq.n	8001dee <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d48:	6843      	ldr	r3, [r0, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d023      	beq.n	8001d96 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d028      	beq.n	8001da4 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d52:	4a46      	ldr	r2, [pc, #280]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	f012 0f02 	tst.w	r2, #2
 8001d5a:	f000 8082 	beq.w	8001e62 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5e:	4943      	ldr	r1, [pc, #268]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001d60:	684a      	ldr	r2, [r1, #4]
 8001d62:	f022 0203 	bic.w	r2, r2, #3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001d6a:	f7fe fdc1 	bl	80008f0 <HAL_GetTick>
 8001d6e:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d70:	6863      	ldr	r3, [r4, #4]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d01d      	beq.n	8001db2 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d02a      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7a:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f013 0f0c 	tst.w	r3, #12
 8001d82:	d034      	beq.n	8001dee <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d84:	f7fe fdb4 	bl	80008f0 <HAL_GetTick>
 8001d88:	1b80      	subs	r0, r0, r6
 8001d8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d8e:	4298      	cmp	r0, r3
 8001d90:	d9f3      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8001d92:	2003      	movs	r0, #3
 8001d94:	e064      	b.n	8001e60 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4a35      	ldr	r2, [pc, #212]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001d9e:	d1de      	bne.n	8001d5e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001da0:	2001      	movs	r0, #1
 8001da2:	e05d      	b.n	8001e60 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	4a31      	ldr	r2, [pc, #196]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001dac:	d1d7      	bne.n	8001d5e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001dae:	2001      	movs	r0, #1
 8001db0:	e056      	b.n	8001e60 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d017      	beq.n	8001dee <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbe:	f7fe fd97 	bl	80008f0 <HAL_GetTick>
 8001dc2:	1b80      	subs	r0, r0, r6
 8001dc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dc8:	4298      	cmp	r0, r3
 8001dca:	d9f2      	bls.n	8001db2 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8001dcc:	2003      	movs	r0, #3
 8001dce:	e047      	b.n	8001e60 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d008      	beq.n	8001dee <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ddc:	f7fe fd88 	bl	80008f0 <HAL_GetTick>
 8001de0:	1b80      	subs	r0, r0, r6
 8001de2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001de6:	4298      	cmp	r0, r3
 8001de8:	d9f2      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8001dea:	2003      	movs	r0, #3
 8001dec:	e038      	b.n	8001e60 <HAL_RCC_ClockConfig+0x184>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_RCC_ClockConfig+0x18c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	42ab      	cmp	r3, r5
 8001df8:	d90c      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_RCC_ClockConfig+0x18c>)
 8001dfc:	6813      	ldr	r3, [r2, #0]
 8001dfe:	f023 0307 	bic.w	r3, r3, #7
 8001e02:	432b      	orrs	r3, r5
 8001e04:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e06:	6813      	ldr	r3, [r2, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	42ab      	cmp	r3, r5
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8001e10:	2001      	movs	r0, #1
 8001e12:	e025      	b.n	8001e60 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	f013 0f04 	tst.w	r3, #4
 8001e1a:	d006      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1c:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001e1e:	6853      	ldr	r3, [r2, #4]
 8001e20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e24:	68e1      	ldr	r1, [r4, #12]
 8001e26:	430b      	orrs	r3, r1
 8001e28:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	f013 0f08 	tst.w	r3, #8
 8001e30:	d007      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001e34:	6853      	ldr	r3, [r2, #4]
 8001e36:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e3a:	6921      	ldr	r1, [r4, #16]
 8001e3c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e40:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e42:	f7ff ff13 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_ClockConfig+0x190>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e4e:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <HAL_RCC_ClockConfig+0x194>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	40d8      	lsrs	r0, r3
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_RCC_ClockConfig+0x198>)
 8001e56:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7fe fd05 	bl	8000868 <HAL_InitTick>
  return HAL_OK;
 8001e5e:	2000      	movs	r0, #0
}
 8001e60:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001e62:	2001      	movs	r0, #1
 8001e64:	e7fc      	b.n	8001e60 <HAL_RCC_ClockConfig+0x184>
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08003d04 	.word	0x08003d04
 8001e74:	20000000 	.word	0x20000000

08001e78 <HAL_RCC_GetHCLKFreq>:
}
 8001e78:	4b01      	ldr	r3, [pc, #4]	; (8001e80 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000000 	.word	0x20000000

08001e84 <HAL_RCC_GetPCLK2Freq>:
{
 8001e84:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e86:	f7ff fff7 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001e92:	4a03      	ldr	r2, [pc, #12]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e94:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001e96:	40d8      	lsrs	r0, r3
 8001e98:	bd08      	pop	{r3, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08003d14 	.word	0x08003d14

08001ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eaa:	6803      	ldr	r3, [r0, #0]
 8001eac:	f013 0f01 	tst.w	r3, #1
 8001eb0:	d034      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001eba:	d148      	bne.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ec4:	61da      	str	r2, [r3, #28]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ed0:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001eda:	d03a      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001edc:	4b33      	ldr	r3, [pc, #204]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ee4:	d011      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001ee6:	6862      	ldr	r2, [r4, #4]
 8001ee8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d00c      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ef0:	4a2e      	ldr	r2, [pc, #184]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001ef2:	6a13      	ldr	r3, [r2, #32]
 8001ef4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef8:	492e      	ldr	r1, [pc, #184]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001efa:	2601      	movs	r6, #1
 8001efc:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001efe:	2600      	movs	r6, #0
 8001f00:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f02:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f04:	f013 0f01 	tst.w	r3, #1
 8001f08:	d137      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001f0a:	4a28      	ldr	r2, [pc, #160]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001f0c:	6a13      	ldr	r3, [r2, #32]
 8001f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f12:	6861      	ldr	r1, [r4, #4]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f18:	2d00      	cmp	r5, #0
 8001f1a:	d13f      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	f013 0f02 	tst.w	r3, #2
 8001f22:	d006      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f24:	4a21      	ldr	r2, [pc, #132]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001f26:	6853      	ldr	r3, [r2, #4]
 8001f28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f2c:	68a1      	ldr	r1, [r4, #8]
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	f013 0f10 	tst.w	r3, #16
 8001f38:	d035      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f3a:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001f3c:	6853      	ldr	r3, [r2, #4]
 8001f3e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f42:	6961      	ldr	r1, [r4, #20]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f48:	2000      	movs	r0, #0
}
 8001f4a:	b002      	add	sp, #8
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2500      	movs	r5, #0
 8001f50:	e7bf      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f52:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001f54:	6813      	ldr	r3, [r2, #0]
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fcc8 	bl	80008f0 <HAL_GetTick>
 8001f60:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f6a:	d1b7      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x38>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6c:	f7fe fcc0 	bl	80008f0 <HAL_GetTick>
 8001f70:	1b80      	subs	r0, r0, r6
 8001f72:	2864      	cmp	r0, #100	; 0x64
 8001f74:	d9f5      	bls.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8001f76:	2003      	movs	r0, #3
 8001f78:	e7e7      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fcb9 	bl	80008f0 <HAL_GetTick>
 8001f7e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f013 0f02 	tst.w	r3, #2
 8001f88:	d1bf      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe fcb1 	bl	80008f0 <HAL_GetTick>
 8001f8e:	1b80      	subs	r0, r0, r6
 8001f90:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f94:	4298      	cmp	r0, r3
 8001f96:	d9f3      	bls.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8001f98:	2003      	movs	r0, #3
 8001f9a:	e7d6      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9c:	69d3      	ldr	r3, [r2, #28]
 8001f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	61d3      	str	r3, [r2, #28]
 8001fa4:	e7ba      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	e7cf      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	42420440 	.word	0x42420440

08001fb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001fb8:	b530      	push	{r4, r5, lr}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fbe:	4c3f      	ldr	r4, [pc, #252]	; (80020bc <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8001fc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fc4:	f10d 0c18 	add.w	ip, sp, #24
 8001fc8:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fcc:	8a23      	ldrh	r3, [r4, #16]
 8001fce:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001fd2:	1e68      	subs	r0, r5, #1
 8001fd4:	280f      	cmp	r0, #15
 8001fd6:	d866      	bhi.n	80020a6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8001fd8:	e8df f000 	tbb	[pc, r0]
 8001fdc:	32655a39 	.word	0x32655a39
 8001fe0:	36656565 	.word	0x36656565
 8001fe4:	65656565 	.word	0x65656565
 8001fe8:	08656565 	.word	0x08656565
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8001fee:	685a      	ldr	r2, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001ff6:	d058      	beq.n	80020aa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ff8:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001ffc:	a906      	add	r1, sp, #24
 8001ffe:	440b      	add	r3, r1
 8002000:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002004:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002008:	d016      	beq.n	8002038 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002012:	440b      	add	r3, r1
 8002014:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 800201a:	fbb3 f3f2 	udiv	r3, r3, r2
 800201e:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002022:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800202a:	d10b      	bne.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 800202c:	0040      	lsls	r0, r0, #1
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>)
 8002030:	fba3 3000 	umull	r3, r0, r3, r0
 8002034:	0840      	lsrs	r0, r0, #1
 8002036:	e005      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002038:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCCEx_GetPeriphCLKFreq+0x114>)
 800203a:	fb03 f000 	mul.w	r0, r3, r0
 800203e:	e7f0      	b.n	8002022 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002040:	f7ff fe14 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
    {
      break;
    }
  }
  return(frequency);
}
 8002044:	b007      	add	sp, #28
 8002046:	bd30      	pop	{r4, r5, pc}
      frequency = HAL_RCC_GetSysClockFreq();
 8002048:	f7ff fe10 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
      break;
 800204c:	e7fa      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
      temp_reg = RCC->BDCR;
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002052:	f240 3202 	movw	r2, #770	; 0x302
 8002056:	401a      	ands	r2, r3
 8002058:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800205c:	d027      	beq.n	80020ae <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800205e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002066:	d004      	beq.n	8002072 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800206c:	d009      	beq.n	8002082 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
        frequency = 0U;
 800206e:	2000      	movs	r0, #0
 8002070:	e7e8      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002072:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8002074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002076:	f012 0f02 	tst.w	r2, #2
 800207a:	d0f5      	beq.n	8002068 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        frequency = LSI_VALUE;
 800207c:	f649 4040 	movw	r0, #40000	; 0x9c40
 8002080:	e7e0      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800208a:	d113      	bne.n	80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
        frequency = 0U;
 800208c:	2000      	movs	r0, #0
 800208e:	e7d9      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002090:	f7ff fef8 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800209c:	3301      	adds	r3, #1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80020a4:	e7ce      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  uint32_t temp_reg = 0U, frequency = 0U;
 80020a6:	2000      	movs	r0, #0
 80020a8:	e7cc      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 80020aa:	2000      	movs	r0, #0
 80020ac:	e7ca      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        frequency = LSE_VALUE;
 80020ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020b2:	e7c7      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        frequency = HSE_VALUE / 128U;
 80020b4:	f24f 4024 	movw	r0, #62500	; 0xf424
  return(frequency);
 80020b8:	e7c4      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 80020ba:	bf00      	nop
 80020bc:	08003cf0 	.word	0x08003cf0
 80020c0:	40021000 	.word	0x40021000
 80020c4:	007a1200 	.word	0x007a1200
 80020c8:	aaaaaaab 	.word	0xaaaaaaab
 80020cc:	003d0900 	.word	0x003d0900

080020d0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80020d0:	b538      	push	{r3, r4, r5, lr}
 80020d2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  
  tickstart = HAL_GetTick();
 80020d4:	f7fe fc0c 	bl	80008f0 <HAL_GetTick>
 80020d8:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	f012 0f20 	tst.w	r2, #32
 80020e2:	d107      	bne.n	80020f4 <RTC_EnterInitMode+0x24>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020e4:	f7fe fc04 	bl	80008f0 <HAL_GetTick>
 80020e8:	1b40      	subs	r0, r0, r5
 80020ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020ee:	d9f4      	bls.n	80020da <RTC_EnterInitMode+0xa>
    {       
      return HAL_TIMEOUT;
 80020f0:	2003      	movs	r0, #3
 80020f2:	e004      	b.n	80020fe <RTC_EnterInitMode+0x2e>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	f042 0210 	orr.w	r2, r2, #16
 80020fa:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 80020fc:	2000      	movs	r0, #0
}
 80020fe:	bd38      	pop	{r3, r4, r5, pc}

08002100 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8002100:	b538      	push	{r3, r4, r5, lr}
 8002102:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002104:	6802      	ldr	r2, [r0, #0]
 8002106:	6853      	ldr	r3, [r2, #4]
 8002108:	f023 0310 	bic.w	r3, r3, #16
 800210c:	6053      	str	r3, [r2, #4]
  
  tickstart = HAL_GetTick();
 800210e:	f7fe fbef 	bl	80008f0 <HAL_GetTick>
 8002112:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f013 0f20 	tst.w	r3, #32
 800211c:	d107      	bne.n	800212e <RTC_ExitInitMode+0x2e>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800211e:	f7fe fbe7 	bl	80008f0 <HAL_GetTick>
 8002122:	1b40      	subs	r0, r0, r5
 8002124:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002128:	d9f4      	bls.n	8002114 <RTC_ExitInitMode+0x14>
    {       
      return HAL_TIMEOUT;
 800212a:	2003      	movs	r0, #3
 800212c:	e000      	b.n	8002130 <RTC_ExitInitMode+0x30>
    } 
  }
  
  return HAL_OK;  
 800212e:	2000      	movs	r0, #0
}
 8002130:	bd38      	pop	{r3, r4, r5, pc}

08002132 <HAL_RTC_WaitForSynchro>:
  if(hrtc == NULL)
 8002132:	b1c0      	cbz	r0, 8002166 <HAL_RTC_WaitForSynchro+0x34>
{
 8002134:	b538      	push	{r3, r4, r5, lr}
 8002136:	4604      	mov	r4, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002138:	6802      	ldr	r2, [r0, #0]
 800213a:	6853      	ldr	r3, [r2, #4]
 800213c:	f023 0308 	bic.w	r3, r3, #8
 8002140:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8002142:	f7fe fbd5 	bl	80008f0 <HAL_GetTick>
 8002146:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f013 0f08 	tst.w	r3, #8
 8002150:	d107      	bne.n	8002162 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8002152:	f7fe fbcd 	bl	80008f0 <HAL_GetTick>
 8002156:	1b40      	subs	r0, r0, r5
 8002158:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800215c:	d9f4      	bls.n	8002148 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800215e:	2003      	movs	r0, #3
 8002160:	e000      	b.n	8002164 <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 8002162:	2000      	movs	r0, #0
}
 8002164:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8002166:	2001      	movs	r0, #1
}
 8002168:	4770      	bx	lr
	...

0800216c <HAL_RTC_Init>:
  if(hrtc == NULL)
 800216c:	2800      	cmp	r0, #0
 800216e:	d05a      	beq.n	8002226 <HAL_RTC_Init+0xba>
{
 8002170:	b510      	push	{r4, lr}
 8002172:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002174:	7c43      	ldrb	r3, [r0, #17]
 8002176:	b153      	cbz	r3, 800218e <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002178:	2302      	movs	r3, #2
 800217a:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800217c:	4620      	mov	r0, r4
 800217e:	f7ff ffd8 	bl	8002132 <HAL_RTC_WaitForSynchro>
 8002182:	b140      	cbz	r0, 8002196 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002184:	2304      	movs	r3, #4
 8002186:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800218e:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8002190:	f7fe fb0c 	bl	80007ac <HAL_RTC_MspInit>
 8002194:	e7f0      	b.n	8002178 <HAL_RTC_Init+0xc>
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002196:	4620      	mov	r0, r4
 8002198:	f7ff ff9a 	bl	80020d0 <RTC_EnterInitMode>
 800219c:	2800      	cmp	r0, #0
 800219e:	d130      	bne.n	8002202 <HAL_RTC_Init+0x96>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80021a0:	6822      	ldr	r2, [r4, #0]
 80021a2:	6853      	ldr	r3, [r2, #4]
 80021a4:	f023 0307 	bic.w	r3, r3, #7
 80021a8:	6053      	str	r3, [r2, #4]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80021aa:	68a3      	ldr	r3, [r4, #8]
 80021ac:	b123      	cbz	r3, 80021b8 <HAL_RTC_Init+0x4c>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80021ae:	4a1f      	ldr	r2, [pc, #124]	; (800222c <HAL_RTC_Init+0xc0>)
 80021b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80021b8:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_RTC_Init+0xc0>)
 80021ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021bc:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80021c0:	68a1      	ldr	r1, [r4, #8]
 80021c2:	430b      	orrs	r3, r1
 80021c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80021c6:	6862      	ldr	r2, [r4, #4]
 80021c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80021cc:	d01d      	beq.n	800220a <HAL_RTC_Init+0x9e>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80021ce:	6821      	ldr	r1, [r4, #0]
 80021d0:	688b      	ldr	r3, [r1, #8]
 80021d2:	f023 030f 	bic.w	r3, r3, #15
 80021d6:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 80021da:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80021dc:	6821      	ldr	r1, [r4, #0]
 80021de:	68cb      	ldr	r3, [r1, #12]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	b292      	uxth	r2, r2
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60cb      	str	r3, [r1, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff ff88 	bl	8002100 <RTC_ExitInitMode>
 80021f0:	4603      	mov	r3, r0
 80021f2:	b9a0      	cbnz	r0, 800221e <HAL_RTC_Init+0xb2>
    hrtc->DateToUpdate.Year = 0x00U;
 80021f4:	2200      	movs	r2, #0
 80021f6:	73e2      	strb	r2, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80021f8:	2201      	movs	r2, #1
 80021fa:	7362      	strb	r2, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80021fc:	73a2      	strb	r2, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80021fe:	7462      	strb	r2, [r4, #17]
    return HAL_OK;
 8002200:	e7c3      	b.n	800218a <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002202:	2304      	movs	r3, #4
 8002204:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e7bf      	b.n	800218a <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800220a:	2001      	movs	r0, #1
 800220c:	f7ff fed4 	bl	8001fb8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002210:	b108      	cbz	r0, 8002216 <HAL_RTC_Init+0xaa>
        prescaler = prescaler - 1U;
 8002212:	1e42      	subs	r2, r0, #1
 8002214:	e7db      	b.n	80021ce <HAL_RTC_Init+0x62>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002216:	2304      	movs	r3, #4
 8002218:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e7b5      	b.n	800218a <HAL_RTC_Init+0x1e>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800221e:	2304      	movs	r3, #4
 8002220:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e7b1      	b.n	800218a <HAL_RTC_Init+0x1e>
     return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	4770      	bx	lr
 800222c:	40006c00 	.word	0x40006c00

08002230 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
  tmp += (BackupRegister * 4U);
 8002230:	0089      	lsls	r1, r1, #2
 8002232:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002236:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800223a:	b292      	uxth	r2, r2
 800223c:	600a      	str	r2, [r1, #0]
}
 800223e:	4770      	bx	lr

08002240 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
  backupregister += (BackupRegister * 4U);
 8002240:	0089      	lsls	r1, r1, #2
 8002242:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002246:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800224a:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 800224c:	b280      	uxth	r0, r0
 800224e:	4770      	bx	lr

08002250 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002250:	b084      	sub	sp, #16
 8002252:	a801      	add	r0, sp, #4
 8002254:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002258:	2000      	movs	r0, #0
 800225a:	b004      	add	sp, #16
 800225c:	4770      	bx	lr

0800225e <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800225e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002262:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002266:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800226a:	2000      	movs	r0, #0
 800226c:	4770      	bx	lr

0800226e <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800226e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002272:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8002276:	045b      	lsls	r3, r3, #17
 8002278:	0c5b      	lsrs	r3, r3, #17
 800227a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800227e:	2000      	movs	r0, #0
 8002280:	4770      	bx	lr

08002282 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002282:	2000      	movs	r0, #0
 8002284:	4770      	bx	lr

08002286 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002286:	b084      	sub	sp, #16
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	ac05      	add	r4, sp, #20
 800228c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002290:	2301      	movs	r3, #1
 8002292:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002296:	2400      	movs	r4, #0
 8002298:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800229c:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80022a0:	f8a0 4050 	strh.w	r4, [r0, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 80022a4:	f7ff ffdb 	bl	800225e <USB_EnableGlobalInt>
    
  return HAL_OK;
}
 80022a8:	4620      	mov	r0, r4
 80022aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022ae:	b004      	add	sp, #16
 80022b0:	4770      	bx	lr

080022b2 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80022b2:	b410      	push	{r4}
  /* initialize Endpoint */
  switch (ep->type)
 80022b4:	78cb      	ldrb	r3, [r1, #3]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d80f      	bhi.n	80022da <USB_ActivateEndpoint+0x28>
 80022ba:	e8df f003 	tbb	[pc, r3]
 80022be:	6d02      	.short	0x6d02
 80022c0:	6054      	.short	0x6054
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80022c2:	780a      	ldrb	r2, [r1, #0]
 80022c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80022ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80022da:	780a      	ldrb	r2, [r1, #0]
 80022dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022e4:	051b      	lsls	r3, r3, #20
 80022e6:	0d1b      	lsrs	r3, r3, #20
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80022f6:	7a8b      	ldrb	r3, [r1, #10]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 80af 	bne.w	800245c <USB_ActivateEndpoint+0x1aa>
  {
    if (ep->is_in)
 80022fe:	784b      	ldrb	r3, [r1, #1]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d056      	beq.n	80023b2 <USB_ActivateEndpoint+0x100>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002304:	888a      	ldrh	r2, [r1, #4]
 8002306:	0852      	lsrs	r2, r2, #1
 8002308:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800230c:	780c      	ldrb	r4, [r1, #0]
 800230e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002312:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002316:	0052      	lsls	r2, r2, #1
 8002318:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800231c:	780a      	ldrb	r2, [r1, #0]
 800231e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002322:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002326:	d00b      	beq.n	8002340 <USB_ActivateEndpoint+0x8e>
 8002328:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800232c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002330:	051b      	lsls	r3, r3, #20
 8002332:	0d1b      	lsrs	r3, r3, #20
 8002334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800233c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002340:	780a      	ldrb	r2, [r1, #0]
 8002342:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002346:	b29b      	uxth	r3, r3
 8002348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002350:	f083 0320 	eor.w	r3, r3, #32
 8002354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002360:	2000      	movs	r0, #0
 8002362:	bc10      	pop	{r4}
 8002364:	4770      	bx	lr
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002366:	780a      	ldrb	r2, [r1, #0]
 8002368:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800236c:	b29b      	uxth	r3, r3
 800236e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002376:	b29b      	uxth	r3, r3
 8002378:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 800237c:	e7ad      	b.n	80022da <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800237e:	780a      	ldrb	r2, [r1, #0]
 8002380:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800238a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002392:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 8002396:	e7a0      	b.n	80022da <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002398:	780a      	ldrb	r2, [r1, #0]
 800239a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80023a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 80023b0:	e793      	b.n	80022da <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80023b2:	888a      	ldrh	r2, [r1, #4]
 80023b4:	0852      	lsrs	r2, r2, #1
 80023b6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80023ba:	780c      	ldrb	r4, [r1, #0]
 80023bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80023c0:	3304      	adds	r3, #4
 80023c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80023c6:	0052      	lsls	r2, r2, #1
 80023c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80023cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80023d0:	780a      	ldrb	r2, [r1, #0]
 80023d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80023d6:	3306      	adds	r3, #6
 80023d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80023dc:	690c      	ldr	r4, [r1, #16]
 80023de:	2c3e      	cmp	r4, #62	; 0x3e
 80023e0:	d930      	bls.n	8002444 <USB_ActivateEndpoint+0x192>
 80023e2:	f3c4 124f 	ubfx	r2, r4, #5, #16
 80023e6:	f014 0f1f 	tst.w	r4, #31
 80023ea:	d101      	bne.n	80023f0 <USB_ActivateEndpoint+0x13e>
 80023ec:	3a01      	subs	r2, #1
 80023ee:	b292      	uxth	r2, r2
 80023f0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80023f4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80023f8:	b292      	uxth	r2, r2
 80023fa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023fe:	780a      	ldrb	r2, [r1, #0]
 8002400:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002404:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002408:	d00b      	beq.n	8002422 <USB_ActivateEndpoint+0x170>
 800240a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800240e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002412:	051b      	lsls	r3, r3, #20
 8002414:	0d1b      	lsrs	r3, r3, #20
 8002416:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002422:	780a      	ldrb	r2, [r1, #0]
 8002424:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002428:	b29b      	uxth	r3, r3
 800242a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800242e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002432:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800243a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002442:	e78d      	b.n	8002360 <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002444:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8002448:	f014 0f01 	tst.w	r4, #1
 800244c:	d001      	beq.n	8002452 <USB_ActivateEndpoint+0x1a0>
 800244e:	3201      	adds	r2, #1
 8002450:	b292      	uxth	r2, r2
 8002452:	0292      	lsls	r2, r2, #10
 8002454:	b292      	uxth	r2, r2
 8002456:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800245a:	e7d0      	b.n	80023fe <USB_ActivateEndpoint+0x14c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800245c:	780a      	ldrb	r2, [r1, #0]
 800245e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002462:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002466:	051b      	lsls	r3, r3, #20
 8002468:	0d1b      	lsrs	r3, r3, #20
 800246a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800246e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002472:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002476:	88ca      	ldrh	r2, [r1, #6]
 8002478:	0852      	lsrs	r2, r2, #1
 800247a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800247e:	780c      	ldrb	r4, [r1, #0]
 8002480:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002484:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002488:	0052      	lsls	r2, r2, #1
 800248a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800248e:	890a      	ldrh	r2, [r1, #8]
 8002490:	0852      	lsrs	r2, r2, #1
 8002492:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002496:	780c      	ldrb	r4, [r1, #0]
 8002498:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800249c:	3304      	adds	r3, #4
 800249e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80024a2:	0052      	lsls	r2, r2, #1
 80024a4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    if (ep->is_in==0)
 80024a8:	784b      	ldrb	r3, [r1, #1]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d14b      	bne.n	8002546 <USB_ActivateEndpoint+0x294>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80024ae:	780a      	ldrb	r2, [r1, #0]
 80024b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024b4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80024b8:	d00b      	beq.n	80024d2 <USB_ActivateEndpoint+0x220>
 80024ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c2:	051b      	lsls	r3, r3, #20
 80024c4:	0d1b      	lsrs	r3, r3, #20
 80024c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024d2:	780a      	ldrb	r2, [r1, #0]
 80024d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024dc:	d00b      	beq.n	80024f6 <USB_ActivateEndpoint+0x244>
 80024de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024e6:	051b      	lsls	r3, r3, #20
 80024e8:	0d1b      	lsrs	r3, r3, #20
 80024ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80024f6:	780a      	ldrb	r2, [r1, #0]
 80024f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002500:	051b      	lsls	r3, r3, #20
 8002502:	0d1b      	lsrs	r3, r3, #20
 8002504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800250c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002510:	780a      	ldrb	r2, [r1, #0]
 8002512:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002516:	b29b      	uxth	r3, r3
 8002518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800251c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002520:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002524:	f248 0480 	movw	r4, #32896	; 0x8080
 8002528:	4323      	orrs	r3, r4
 800252a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800252e:	780a      	ldrb	r2, [r1, #0]
 8002530:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002534:	b29b      	uxth	r3, r3
 8002536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800253a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800253e:	4323      	orrs	r3, r4
 8002540:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002544:	e70c      	b.n	8002360 <USB_ActivateEndpoint+0xae>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002546:	780a      	ldrb	r2, [r1, #0]
 8002548:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800254c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002550:	d00b      	beq.n	800256a <USB_ActivateEndpoint+0x2b8>
 8002552:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800255a:	051b      	lsls	r3, r3, #20
 800255c:	0d1b      	lsrs	r3, r3, #20
 800255e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002566:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800256a:	780a      	ldrb	r2, [r1, #0]
 800256c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002570:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002574:	d00b      	beq.n	800258e <USB_ActivateEndpoint+0x2dc>
 8002576:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800257a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800257e:	051b      	lsls	r3, r3, #20
 8002580:	0d1b      	lsrs	r3, r3, #20
 8002582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002586:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800258a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800258e:	780a      	ldrb	r2, [r1, #0]
 8002590:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002598:	051b      	lsls	r3, r3, #20
 800259a:	0d1b      	lsrs	r3, r3, #20
 800259c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025a8:	780b      	ldrb	r3, [r1, #0]
 80025aa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80025ae:	b292      	uxth	r2, r2
 80025b0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80025b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025b8:	f248 0480 	movw	r4, #32896	; 0x8080
 80025bc:	4322      	orrs	r2, r4
 80025be:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80025c2:	780a      	ldrb	r2, [r1, #0]
 80025c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d2:	4323      	orrs	r3, r4
 80025d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80025d8:	e6c2      	b.n	8002360 <USB_ActivateEndpoint+0xae>

080025da <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 80025da:	780a      	ldrb	r2, [r1, #0]
 80025dc:	b18a      	cbz	r2, 8002602 <USB_EPSetStall+0x28>
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 80025de:	784b      	ldrb	r3, [r1, #1]
 80025e0:	bb13      	cbnz	r3, 8002628 <USB_EPSetStall+0x4e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 80025e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002600:	e010      	b.n	8002624 <USB_EPSetStall+0x4a>
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002602:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800260c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002610:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002614:	f083 0310 	eor.w	r3, r3, #16
 8002618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002620:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8002624:	2000      	movs	r0, #0
 8002626:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002628:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800262c:	b29b      	uxth	r3, r3
 800262e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002636:	f083 0310 	eor.w	r3, r3, #16
 800263a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800263e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002642:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002646:	e7ed      	b.n	8002624 <USB_EPSetStall+0x4a>

08002648 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002648:	784b      	ldrb	r3, [r1, #1]
 800264a:	b31b      	cbz	r3, 8002694 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800264c:	780a      	ldrb	r2, [r1, #0]
 800264e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002652:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002656:	d00b      	beq.n	8002670 <USB_EPClearStall+0x28>
 8002658:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800265c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002660:	051b      	lsls	r3, r3, #20
 8002662:	0d1b      	lsrs	r3, r3, #20
 8002664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002668:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800266c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002670:	780a      	ldrb	r2, [r1, #0]
 8002672:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002676:	b29b      	uxth	r3, r3
 8002678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002680:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  return HAL_OK;
}
 8002690:	2000      	movs	r0, #0
 8002692:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002694:	780a      	ldrb	r2, [r1, #0]
 8002696:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800269a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800269e:	d00b      	beq.n	80026b8 <USB_EPClearStall+0x70>
 80026a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026a8:	051b      	lsls	r3, r3, #20
 80026aa:	0d1b      	lsrs	r3, r3, #20
 80026ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026b8:	780a      	ldrb	r2, [r1, #0]
 80026ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80026cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80026d8:	e7da      	b.n	8002690 <USB_EPClearStall+0x48>

080026da <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 80026da:	4603      	mov	r3, r0
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 80026dc:	2201      	movs	r2, #1
 80026de:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  
  /* clear interrupt status register */
  USBx->ISTR = 0;
 80026e2:	2000      	movs	r0, #0
 80026e4:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  
  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 80026e8:	2203      	movs	r2, #3
 80026ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
}
 80026ee:	4770      	bx	lr

080026f0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 80026f0:	b911      	cbnz	r1, 80026f8 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 80026f8:	2000      	movs	r0, #0
 80026fa:	4770      	bx	lr

080026fc <USB_DevConnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80026fc:	2000      	movs	r0, #0
 80026fe:	4770      	bx	lr

08002700 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002700:	2000      	movs	r0, #0
 8002702:	4770      	bx	lr

08002704 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002704:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002708:	4770      	bx	lr

0800270a <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800270a:	2000      	movs	r0, #0
 800270c:	4770      	bx	lr

0800270e <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800270e:	3301      	adds	r3, #1
 8002710:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002712:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 800271a:	b163      	cbz	r3, 8002736 <USB_WritePMA+0x28>
{
 800271c:	b410      	push	{r4}
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800271e:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002720:	7848      	ldrb	r0, [r1, #1]
 8002722:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    *pdwVal++ = temp2;
 8002726:	f822 4b04 	strh.w	r4, [r2], #4
    pdwVal++;
    pbUsrBuf++;
 800272a:	3102      	adds	r1, #2
  for (index = nbytes; index != 0; index--)
 800272c:	3b01      	subs	r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f5      	bne.n	800271e <USB_WritePMA+0x10>
  }
}
 8002732:	bc10      	pop	{r4}
 8002734:	4770      	bx	lr
 8002736:	4770      	bx	lr

08002738 <USB_EPStartXfer>:
{
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t len = ep->xfer_len;
 800273a:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 800273c:	784d      	ldrb	r5, [r1, #1]
 800273e:	2d01      	cmp	r5, #1
 8002740:	d034      	beq.n	80027ac <USB_EPStartXfer+0x74>
    if (ep->xfer_len > ep->maxpacket)
 8002742:	690b      	ldr	r3, [r1, #16]
 8002744:	4293      	cmp	r3, r2
 8002746:	f080 80ea 	bcs.w	800291e <USB_EPStartXfer+0x1e6>
      ep->xfer_len-=len; 
 800274a:	1ad2      	subs	r2, r2, r3
 800274c:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0) 
 800274e:	7a8a      	ldrb	r2, [r1, #10]
 8002750:	2a00      	cmp	r2, #0
 8002752:	f040 80f4 	bne.w	800293e <USB_EPStartXfer+0x206>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002756:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800275a:	780c      	ldrb	r4, [r1, #0]
 800275c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002760:	3206      	adds	r2, #6
 8002762:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002766:	2b3e      	cmp	r3, #62	; 0x3e
 8002768:	f240 80dd 	bls.w	8002926 <USB_EPStartXfer+0x1ee>
 800276c:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8002770:	f013 0f1f 	tst.w	r3, #31
 8002774:	d101      	bne.n	800277a <USB_EPStartXfer+0x42>
 8002776:	3c01      	subs	r4, #1
 8002778:	b2a4      	uxth	r4, r4
 800277a:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 800277e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002782:	b2a4      	uxth	r4, r4
 8002784:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002788:	780a      	ldrb	r2, [r1, #0]
 800278a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800278e:	b29b      	uxth	r3, r3
 8002790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002798:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800279c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80027a8:	2000      	movs	r0, #0
 80027aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 80027ac:	690f      	ldr	r7, [r1, #16]
 80027ae:	4297      	cmp	r7, r2
 80027b0:	d225      	bcs.n	80027fe <USB_EPStartXfer+0xc6>
      ep->xfer_len-=len; 
 80027b2:	1bd2      	subs	r2, r2, r7
 80027b4:	618a      	str	r2, [r1, #24]
 80027b6:	460e      	mov	r6, r1
 80027b8:	4604      	mov	r4, r0
    if (ep->doublebuffer == 0) 
 80027ba:	7a8b      	ldrb	r3, [r1, #10]
 80027bc:	b31b      	cbz	r3, 8002806 <USB_EPStartXfer+0xce>
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80027be:	780b      	ldrb	r3, [r1, #0]
 80027c0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80027c4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027c8:	d069      	beq.n	800289e <USB_EPStartXfer+0x166>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027ca:	2d00      	cmp	r5, #0
 80027cc:	d137      	bne.n	800283e <USB_EPStartXfer+0x106>
 80027ce:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80027d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80027d6:	3306      	adds	r3, #6
 80027d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80027dc:	2f3e      	cmp	r7, #62	; 0x3e
 80027de:	d922      	bls.n	8002826 <USB_EPStartXfer+0xee>
 80027e0:	f3c7 124f 	ubfx	r2, r7, #5, #16
 80027e4:	f017 0f1f 	tst.w	r7, #31
 80027e8:	d101      	bne.n	80027ee <USB_EPStartXfer+0xb6>
 80027ea:	3a01      	subs	r2, #1
 80027ec:	b292      	uxth	r2, r2
 80027ee:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80027f2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80027f6:	b292      	uxth	r2, r2
 80027f8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80027fc:	e028      	b.n	8002850 <USB_EPStartXfer+0x118>
      ep->xfer_len =0;
 80027fe:	2300      	movs	r3, #0
 8002800:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8002802:	4617      	mov	r7, r2
 8002804:	e7d7      	b.n	80027b6 <USB_EPStartXfer+0x7e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002806:	b2bb      	uxth	r3, r7
 8002808:	888a      	ldrh	r2, [r1, #4]
 800280a:	6949      	ldr	r1, [r1, #20]
 800280c:	f7ff ff7f 	bl	800270e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002810:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002814:	7832      	ldrb	r2, [r6, #0]
 8002816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800281a:	3302      	adds	r3, #2
 800281c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002820:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 8002824:	e02a      	b.n	800287c <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002826:	f3c7 024f 	ubfx	r2, r7, #1, #16
 800282a:	f017 0f01 	tst.w	r7, #1
 800282e:	d001      	beq.n	8002834 <USB_EPStartXfer+0xfc>
 8002830:	3201      	adds	r2, #1
 8002832:	b292      	uxth	r2, r2
 8002834:	0292      	lsls	r2, r2, #10
 8002836:	b292      	uxth	r2, r2
 8002838:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800283c:	e008      	b.n	8002850 <USB_EPStartXfer+0x118>
 800283e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002842:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002846:	3302      	adds	r3, #2
 8002848:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800284c:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8002850:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002852:	b2bb      	uxth	r3, r7
 8002854:	6971      	ldr	r1, [r6, #20]
 8002856:	4620      	mov	r0, r4
 8002858:	f7ff ff59 	bl	800270e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800285c:	7873      	ldrb	r3, [r6, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d14d      	bne.n	80028fe <USB_EPStartXfer+0x1c6>
 8002862:	7832      	ldrb	r2, [r6, #0]
 8002864:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800286c:	051b      	lsls	r3, r3, #20
 800286e:	0d1b      	lsrs	r3, r3, #20
 8002870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002874:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002878:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800287c:	7832      	ldrb	r2, [r6, #0]
 800287e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002882:	b29b      	uxth	r3, r3
 8002884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800288c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002898:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 800289c:	e784      	b.n	80027a8 <USB_EPStartXfer+0x70>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800289e:	bb1d      	cbnz	r5, 80028e8 <USB_EPStartXfer+0x1b0>
 80028a0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80028a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80028a8:	3302      	adds	r3, #2
 80028aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80028ae:	2f3e      	cmp	r7, #62	; 0x3e
 80028b0:	d90e      	bls.n	80028d0 <USB_EPStartXfer+0x198>
 80028b2:	f3c7 124f 	ubfx	r2, r7, #5, #16
 80028b6:	f017 0f1f 	tst.w	r7, #31
 80028ba:	d101      	bne.n	80028c0 <USB_EPStartXfer+0x188>
 80028bc:	3a01      	subs	r2, #1
 80028be:	b292      	uxth	r2, r2
 80028c0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80028c4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80028c8:	b292      	uxth	r2, r2
 80028ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80028ce:	e014      	b.n	80028fa <USB_EPStartXfer+0x1c2>
 80028d0:	f3c7 024f 	ubfx	r2, r7, #1, #16
 80028d4:	f017 0f01 	tst.w	r7, #1
 80028d8:	d001      	beq.n	80028de <USB_EPStartXfer+0x1a6>
 80028da:	3201      	adds	r2, #1
 80028dc:	b292      	uxth	r2, r2
 80028de:	0292      	lsls	r2, r2, #10
 80028e0:	b292      	uxth	r2, r2
 80028e2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80028e6:	e008      	b.n	80028fa <USB_EPStartXfer+0x1c2>
 80028e8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80028ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80028f0:	3302      	adds	r3, #2
 80028f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80028f6:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr0;
 80028fa:	88f2      	ldrh	r2, [r6, #6]
 80028fc:	e7a9      	b.n	8002852 <USB_EPStartXfer+0x11a>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d1bc      	bne.n	800287c <USB_EPStartXfer+0x144>
 8002902:	7832      	ldrb	r2, [r6, #0]
 8002904:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800290c:	051b      	lsls	r3, r3, #20
 800290e:	0d1b      	lsrs	r3, r3, #20
 8002910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002918:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 800291c:	e7ae      	b.n	800287c <USB_EPStartXfer+0x144>
      ep->xfer_len =0;
 800291e:	2300      	movs	r3, #0
 8002920:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8002922:	4613      	mov	r3, r2
 8002924:	e713      	b.n	800274e <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002926:	f3c3 044f 	ubfx	r4, r3, #1, #16
 800292a:	f013 0f01 	tst.w	r3, #1
 800292e:	d001      	beq.n	8002934 <USB_EPStartXfer+0x1fc>
 8002930:	3401      	adds	r4, #1
 8002932:	b2a4      	uxth	r4, r4
 8002934:	02a4      	lsls	r4, r4, #10
 8002936:	b2a4      	uxth	r4, r4
 8002938:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 800293c:	e724      	b.n	8002788 <USB_EPStartXfer+0x50>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800293e:	b9bd      	cbnz	r5, 8002970 <USB_EPStartXfer+0x238>
 8002940:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002944:	780c      	ldrb	r4, [r1, #0]
 8002946:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800294a:	3202      	adds	r2, #2
 800294c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002950:	2b3e      	cmp	r3, #62	; 0x3e
 8002952:	d928      	bls.n	80029a6 <USB_EPStartXfer+0x26e>
 8002954:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8002958:	f013 0f1f 	tst.w	r3, #31
 800295c:	d101      	bne.n	8002962 <USB_EPStartXfer+0x22a>
 800295e:	3c01      	subs	r4, #1
 8002960:	b2a4      	uxth	r4, r4
 8002962:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8002966:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800296a:	b2a4      	uxth	r4, r4
 800296c:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8002970:	784a      	ldrb	r2, [r1, #1]
 8002972:	bb82      	cbnz	r2, 80029d6 <USB_EPStartXfer+0x29e>
 8002974:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002978:	780c      	ldrb	r4, [r1, #0]
 800297a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800297e:	3206      	adds	r2, #6
 8002980:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002984:	2b3e      	cmp	r3, #62	; 0x3e
 8002986:	d91a      	bls.n	80029be <USB_EPStartXfer+0x286>
 8002988:	f3c3 144f 	ubfx	r4, r3, #5, #16
 800298c:	f013 0f1f 	tst.w	r3, #31
 8002990:	d101      	bne.n	8002996 <USB_EPStartXfer+0x25e>
 8002992:	3c01      	subs	r4, #1
 8002994:	b2a4      	uxth	r4, r4
 8002996:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 800299a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800299e:	b2a4      	uxth	r4, r4
 80029a0:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 80029a4:	e6f0      	b.n	8002788 <USB_EPStartXfer+0x50>
 80029a6:	f3c3 044f 	ubfx	r4, r3, #1, #16
 80029aa:	f013 0f01 	tst.w	r3, #1
 80029ae:	d001      	beq.n	80029b4 <USB_EPStartXfer+0x27c>
 80029b0:	3401      	adds	r4, #1
 80029b2:	b2a4      	uxth	r4, r4
 80029b4:	02a4      	lsls	r4, r4, #10
 80029b6:	b2a4      	uxth	r4, r4
 80029b8:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 80029bc:	e7d8      	b.n	8002970 <USB_EPStartXfer+0x238>
 80029be:	f3c3 044f 	ubfx	r4, r3, #1, #16
 80029c2:	f013 0f01 	tst.w	r3, #1
 80029c6:	d001      	beq.n	80029cc <USB_EPStartXfer+0x294>
 80029c8:	3401      	adds	r4, #1
 80029ca:	b2a4      	uxth	r4, r4
 80029cc:	02a4      	lsls	r4, r4, #10
 80029ce:	b2a4      	uxth	r4, r4
 80029d0:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 80029d4:	e6d8      	b.n	8002788 <USB_EPStartXfer+0x50>
 80029d6:	2a01      	cmp	r2, #1
 80029d8:	f47f aed6 	bne.w	8002788 <USB_EPStartXfer+0x50>
 80029dc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80029e0:	780c      	ldrb	r4, [r1, #0]
 80029e2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80029e6:	3202      	adds	r2, #2
 80029e8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80029ec:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 80029f0:	e6ca      	b.n	8002788 <USB_EPStartXfer+0x50>

080029f2 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80029f2:	3301      	adds	r3, #1
 80029f4:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80029f6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80029fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 80029fe:	e004      	b.n	8002a0a <USB_ReadPMA+0x18>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002a00:	6810      	ldr	r0, [r2, #0]
 8002a02:	f821 0b02 	strh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 8002a06:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002a08:	3204      	adds	r2, #4
  for (index = nbytes; index != 0; index--)
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f8      	bne.n	8002a00 <USB_ReadPMA+0xe>
    pbUsrBuf++;
  }
}
 8002a0e:	4770      	bx	lr

08002a10 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_DFU_CfgDesc);
 8002a10:	231b      	movs	r3, #27
 8002a12:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_CfgDesc;
}
 8002a14:	4800      	ldr	r0, [pc, #0]	; (8002a18 <USBD_DFU_GetCfgDesc+0x8>)
 8002a16:	4770      	bx	lr
 8002a18:	20000068 	.word	0x20000068

08002a1c <USBD_DFU_DataIn>:
static uint8_t  USBD_DFU_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{

  return USBD_OK;
}
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	4770      	bx	lr

08002a20 <USBD_DFU_EP0_RxReady>:
  */
static uint8_t  USBD_DFU_EP0_RxReady (USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 8002a20:	2000      	movs	r0, #0
 8002a22:	4770      	bx	lr

08002a24 <USBD_DFU_SOF>:
  */
static uint8_t  USBD_DFU_SOF (USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 8002a24:	2000      	movs	r0, #0
 8002a26:	4770      	bx	lr

08002a28 <USBD_DFU_IsoINIncomplete>:
  */
static uint8_t  USBD_DFU_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{

  return USBD_OK;
}
 8002a28:	2000      	movs	r0, #0
 8002a2a:	4770      	bx	lr

08002a2c <USBD_DFU_IsoOutIncomplete>:
  */
static uint8_t  USBD_DFU_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{

  return USBD_OK;
}
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	4770      	bx	lr

08002a30 <USBD_DFU_DataOut>:
static uint8_t  USBD_DFU_DataOut (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{

  return USBD_OK;
}
 8002a30:	2000      	movs	r0, #0
 8002a32:	4770      	bx	lr

08002a34 <USBD_DFU_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_DFU_DeviceQualifierDesc);
 8002a34:	230a      	movs	r3, #10
 8002a36:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_DeviceQualifierDesc;
}
 8002a38:	4800      	ldr	r0, [pc, #0]	; (8002a3c <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8002a3a:	4770      	bx	lr
 8002a3c:	20000084 	.word	0x20000084

08002a40 <DFU_ClearStatus>:
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8002a40:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8002a44:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8002a48:	2a0a      	cmp	r2, #10
 8002a4a:	d011      	beq.n	8002a70 <DFU_ClearStatus+0x30>
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0;/*iString*/
  }
  else
  {   /*State Error*/
    hdfu->dev_state = DFU_STATE_ERROR;
 8002a4c:	210a      	movs	r1, #10
 8002a4e:	f883 1400 	strb.w	r1, [r3, #1024]	; 0x400
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002a52:	220e      	movs	r2, #14
 8002a54:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
    hdfu->dev_status[1] = 0;
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8002a5e:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8002a62:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8002a66:	f883 1405 	strb.w	r1, [r3, #1029]	; 0x405
    hdfu->dev_status[5] = 0;/*iString*/
 8002a6a:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
  }
}
 8002a6e:	4770      	bx	lr
    hdfu->dev_state = DFU_STATE_IDLE;
 8002a70:	2102      	movs	r1, #2
 8002a72:	f883 1400 	strb.w	r1, [r3, #1024]	; 0x400
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
    hdfu->dev_status[1] = 0;
 8002a7c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8002a80:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8002a84:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8002a88:	f883 1405 	strb.w	r1, [r3, #1029]	; 0x405
    hdfu->dev_status[5] = 0;/*iString*/
 8002a8c:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
 8002a90:	4770      	bx	lr

08002a92 <DFU_Abort>:
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8002a92:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002a96:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
 8002a9a:	1e8a      	subs	r2, r1, #2
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	2a01      	cmp	r2, #1
 8002aa0:	d905      	bls.n	8002aae <DFU_Abort+0x1c>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8002aa2:	2905      	cmp	r1, #5
 8002aa4:	d003      	beq.n	8002aae <DFU_Abort+0x1c>
 8002aa6:	2906      	cmp	r1, #6
 8002aa8:	d001      	beq.n	8002aae <DFU_Abort+0x1c>
        || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE )
 8002aaa:	2909      	cmp	r1, #9
 8002aac:	d113      	bne.n	8002ad6 <DFU_Abort+0x44>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8002aae:	2102      	movs	r1, #2
 8002ab0:	f883 1400 	strb.w	r1, [r3, #1024]	; 0x400
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
    hdfu->dev_status[1] = 0;
 8002aba:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8002abe:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8002ac2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;
 8002ac6:	f883 1405 	strb.w	r1, [r3, #1029]	; 0x405
    hdfu->dev_status[5] = 0; /*iString*/
 8002aca:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
    hdfu->wblock_num = 0;
 8002ace:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wlength = 0;
 8002ad2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  }  
}
 8002ad6:	4770      	bx	lr

08002ad8 <USBD_DFU_GetUsrStringDesc>:
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002ad8:	2906      	cmp	r1, #6
 8002ada:	d809      	bhi.n	8002af0 <USBD_DFU_GetUsrStringDesc+0x18>
{
 8002adc:	b510      	push	{r4, lr}
    USBD_GetString ((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8002ade:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002ae2:	4c04      	ldr	r4, [pc, #16]	; (8002af4 <USBD_DFU_GetUsrStringDesc+0x1c>)
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	f000 fe75 	bl	80037d6 <USBD_GetString>
    return USBD_StrDesc;  
 8002aec:	4620      	mov	r0, r4
}
 8002aee:	bd10      	pop	{r4, pc}
    return NULL;
 8002af0:	2000      	movs	r0, #0
}
 8002af2:	4770      	bx	lr
 8002af4:	20000920 	.word	0x20000920

08002af8 <DFU_Leave>:
  */
void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 USBD_DFU_HandleTypeDef   *hdfu;
 
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8002af8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 
 hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407

  if ((USBD_DFU_CfgDesc[(11 + (9 * USBD_DFU_MAX_ITF_NUM))]) & 0x04)
 8002b02:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <DFU_Leave+0x70>)
 8002b04:	7d12      	ldrb	r2, [r2, #20]
 8002b06:	f012 0f04 	tst.w	r2, #4
 8002b0a:	d00c      	beq.n	8002b26 <DFU_Leave+0x2e>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002b0c:	2106      	movs	r1, #6
 8002b0e:	f883 1400 	strb.w	r1, [r3, #1024]	; 0x400

    hdfu->dev_status[1] = 0;
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8002b18:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0;
 8002b1c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;       
 8002b20:	f883 1405 	strb.w	r1, [r3, #1029]	; 0x405
 8002b24:	4770      	bx	lr
{
 8002b26:	b510      	push	{r4, lr}
 8002b28:	4604      	mov	r4, r0
    return;
  }
  else
  {
    
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002b2a:	2108      	movs	r1, #8
 8002b2c:	f883 1400 	strb.w	r1, [r3, #1024]	; 0x400
    
    hdfu->dev_status[1] = 0;
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8002b36:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0;
 8002b3a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;     
 8002b3e:	f883 1405 	strb.w	r1, [r3, #1029]	; 0x405
    
    /* Disconnect the USB device */
    USBD_Stop (pdev);
 8002b42:	f000 facd 	bl	80030e0 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002b46:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002b4e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b52:	4906      	ldr	r1, [pc, #24]	; (8002b6c <DFU_Leave+0x74>)
 8002b54:	68ca      	ldr	r2, [r1, #12]
 8002b56:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <DFU_Leave+0x78>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
 8002b60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <DFU_Leave+0x6c>
 8002b68:	20000068 	.word	0x20000068
 8002b6c:	e000ed00 	.word	0xe000ed00
 8002b70:	05fa0004 	.word	0x05fa0004

08002b74 <USBD_DFU_EP0_TxReady>:
{
 8002b74:	b530      	push	{r4, r5, lr}
 8002b76:	b083      	sub	sp, #12
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8002b78:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8002b7c:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d004      	beq.n	8002b8e <USBD_DFU_EP0_TxReady+0x1a>
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress*/
 8002b84:	2b07      	cmp	r3, #7
 8002b86:	d068      	beq.n	8002c5a <USBD_DFU_EP0_TxReady+0xe6>
  return USBD_OK;
 8002b88:	2000      	movs	r0, #0
}
 8002b8a:	b003      	add	sp, #12
 8002b8c:	bd30      	pop	{r4, r5, pc}
    if (hdfu->wblock_num == 0)   
 8002b8e:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d140      	bne.n	8002c18 <USBD_DFU_EP0_TxReady+0xa4>
      if ((hdfu->buffer.d8[0] ==  DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1))
 8002b96:	7823      	ldrb	r3, [r4, #0]
 8002b98:	b91b      	cbnz	r3, 8002ba2 <USBD_DFU_EP0_TxReady+0x2e>
 8002b9a:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
 8002b9e:	2a01      	cmp	r2, #1
 8002ba0:	d04a      	beq.n	8002c38 <USBD_DFU_EP0_TxReady+0xc4>
      else if  (( hdfu->buffer.d8[0] ==  DFU_CMD_SETADDRESSPOINTER ) && (hdfu->wlength == 5))
 8002ba2:	2b21      	cmp	r3, #33	; 0x21
 8002ba4:	d019      	beq.n	8002bda <USBD_DFU_EP0_TxReady+0x66>
      else if (( hdfu->buffer.d8[0] ==  DFU_CMD_ERASE ) && (hdfu->wlength == 5))
 8002ba6:	2b41      	cmp	r3, #65	; 0x41
 8002ba8:	d128      	bne.n	8002bfc <USBD_DFU_EP0_TxReady+0x88>
 8002baa:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d124      	bne.n	8002bfc <USBD_DFU_EP0_TxReady+0x88>
        hdfu->data_ptr  = hdfu->buffer.d8[1];
 8002bb2:	7863      	ldrb	r3, [r4, #1]
        hdfu->data_ptr += hdfu->buffer.d8[2] << 8;
 8002bb4:	78a2      	ldrb	r2, [r4, #2]
 8002bb6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8002bba:	78e2      	ldrb	r2, [r4, #3]
 8002bbc:	eb03 4302 	add.w	r3, r3, r2, lsl #16
        hdfu->data_ptr += hdfu->buffer.d8[4] << 24;
 8002bc0:	7922      	ldrb	r2, [r4, #4]
 8002bc2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8002bc6:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8002bca:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
 8002bce:	68d2      	ldr	r2, [r2, #12]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	4790      	blx	r2
 8002bd4:	b380      	cbz	r0, 8002c38 <USBD_DFU_EP0_TxReady+0xc4>
          return USBD_FAIL;
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	e7d7      	b.n	8002b8a <USBD_DFU_EP0_TxReady+0x16>
      else if  (( hdfu->buffer.d8[0] ==  DFU_CMD_SETADDRESSPOINTER ) && (hdfu->wlength == 5))
 8002bda:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
 8002bde:	2a05      	cmp	r2, #5
 8002be0:	d1e1      	bne.n	8002ba6 <USBD_DFU_EP0_TxReady+0x32>
        hdfu->data_ptr  = hdfu->buffer.d8[1];
 8002be2:	7863      	ldrb	r3, [r4, #1]
        hdfu->data_ptr += hdfu->buffer.d8[2] << 8;
 8002be4:	78a2      	ldrb	r2, [r4, #2]
 8002be6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8002bea:	78e2      	ldrb	r2, [r4, #3]
 8002bec:	eb03 4302 	add.w	r3, r3, r2, lsl #16
        hdfu->data_ptr += hdfu->buffer.d8[4] << 24;
 8002bf0:	7922      	ldrb	r2, [r4, #4]
 8002bf2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8002bf6:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
 8002bfa:	e01d      	b.n	8002c38 <USBD_DFU_EP0_TxReady+0xc4>
        hdfu->wlength = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
        hdfu->wblock_num = 0;     
 8002c02:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
        req.bmRequest = 0;
 8002c06:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError (pdev, &req);
 8002c10:	4669      	mov	r1, sp
 8002c12:	f000 fbac 	bl	800336e <USBD_CtlError>
 8002c16:	e00f      	b.n	8002c38 <USBD_DFU_EP0_TxReady+0xc4>
    else if (hdfu->wblock_num > 1)  
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d90d      	bls.n	8002c38 <USBD_DFU_EP0_TxReady+0xc4>
      addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002c1c:	4912      	ldr	r1, [pc, #72]	; (8002c68 <USBD_DFU_EP0_TxReady+0xf4>)
 8002c1e:	4419      	add	r1, r3
 8002c20:	f8d4 5410 	ldr.w	r5, [r4, #1040]	; 0x410
      if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8002c24:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
 8002c2e:	eb05 2181 	add.w	r1, r5, r1, lsl #10
 8002c32:	4620      	mov	r0, r4
 8002c34:	4798      	blx	r3
 8002c36:	b9a0      	cbnz	r0, 8002c62 <USBD_DFU_EP0_TxReady+0xee>
    hdfu->wlength = 0;
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f8c4 040c 	str.w	r0, [r4, #1036]	; 0x40c
    hdfu->wblock_num = 0;
 8002c3e:	f8c4 0408 	str.w	r0, [r4, #1032]	; 0x408
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002c42:	2303      	movs	r3, #3
 8002c44:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_status[1] = 0;
 8002c48:	f884 0402 	strb.w	r0, [r4, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8002c4c:	f884 0403 	strb.w	r0, [r4, #1027]	; 0x403
    hdfu->dev_status[3] = 0;
 8002c50:	f884 0404 	strb.w	r0, [r4, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;    
 8002c54:	f884 3405 	strb.w	r3, [r4, #1029]	; 0x405
    return USBD_OK;
 8002c58:	e797      	b.n	8002b8a <USBD_DFU_EP0_TxReady+0x16>
    DFU_Leave(pdev);
 8002c5a:	f7ff ff4d 	bl	8002af8 <DFU_Leave>
  return USBD_OK;
 8002c5e:	2000      	movs	r0, #0
 8002c60:	e793      	b.n	8002b8a <USBD_DFU_EP0_TxReady+0x16>
        return USBD_FAIL;
 8002c62:	2002      	movs	r0, #2
 8002c64:	e791      	b.n	8002b8a <USBD_DFU_EP0_TxReady+0x16>
 8002c66:	bf00      	nop
 8002c68:	003ffffe 	.word	0x003ffffe

08002c6c <DFU_Upload>:
{
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8002c6e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if (req->wLength > 0)
 8002c72:	88cb      	ldrh	r3, [r1, #6]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d060      	beq.n	8002d3a <DFU_Upload+0xce>
 8002c78:	4605      	mov	r5, r0
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8002c7a:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d001      	beq.n	8002c86 <DFU_Upload+0x1a>
 8002c82:	2b09      	cmp	r3, #9
 8002c84:	d151      	bne.n	8002d2a <DFU_Upload+0xbe>
      hdfu->wblock_num = req->wValue;
 8002c86:	884b      	ldrh	r3, [r1, #2]
 8002c88:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
      hdfu->wlength = req->wLength;
 8002c8c:	88ca      	ldrh	r2, [r1, #6]
 8002c8e:	f8c4 240c 	str.w	r2, [r4, #1036]	; 0x40c
      if (hdfu->wblock_num == 0)  
 8002c92:	b9d3      	cbnz	r3, 8002cca <DFU_Upload+0x5e>
        hdfu->dev_state = (hdfu->wlength > 3)? DFU_STATE_IDLE:DFU_STATE_UPLOAD_IDLE;        
 8002c94:	2a03      	cmp	r2, #3
 8002c96:	d816      	bhi.n	8002cc6 <DFU_Upload+0x5a>
 8002c98:	2209      	movs	r2, #9
 8002c9a:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
        hdfu->dev_status[1] = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f884 3402 	strb.w	r3, [r4, #1026]	; 0x402
        hdfu->dev_status[2] = 0;
 8002ca4:	f884 3403 	strb.w	r3, [r4, #1027]	; 0x403
        hdfu->dev_status[3] = 0;
 8002ca8:	f884 3404 	strb.w	r3, [r4, #1028]	; 0x404
        hdfu->dev_status[4] = hdfu->dev_state;       
 8002cac:	f884 2405 	strb.w	r2, [r4, #1029]	; 0x405
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8002cb0:	7023      	strb	r3, [r4, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8002cb2:	2321      	movs	r3, #33	; 0x21
 8002cb4:	7063      	strb	r3, [r4, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002cb6:	2341      	movs	r3, #65	; 0x41
 8002cb8:	70a3      	strb	r3, [r4, #2]
        USBD_CtlSendData (pdev,
 8002cba:	2203      	movs	r2, #3
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f000 fda6 	bl	8003810 <USBD_CtlSendData>
 8002cc4:	e045      	b.n	8002d52 <DFU_Upload+0xe6>
        hdfu->dev_state = (hdfu->wlength > 3)? DFU_STATE_IDLE:DFU_STATE_UPLOAD_IDLE;        
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	e7e7      	b.n	8002c9a <DFU_Upload+0x2e>
      else if (hdfu->wblock_num > 1)
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d91d      	bls.n	8002d0a <DFU_Upload+0x9e>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE ;
 8002cce:	2009      	movs	r0, #9
 8002cd0:	f884 0400 	strb.w	r0, [r4, #1024]	; 0x400
        hdfu->dev_status[1] = 0;
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	f884 1402 	strb.w	r1, [r4, #1026]	; 0x402
        hdfu->dev_status[2] = 0;
 8002cda:	f884 1403 	strb.w	r1, [r4, #1027]	; 0x403
        hdfu->dev_status[3] = 0;
 8002cde:	f884 1404 	strb.w	r1, [r4, #1028]	; 0x404
        hdfu->dev_status[4] = hdfu->dev_state;
 8002ce2:	f884 0405 	strb.w	r0, [r4, #1029]	; 0x405
        addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002ce6:	481b      	ldr	r0, [pc, #108]	; (8002d54 <DFU_Upload+0xe8>)
 8002ce8:	4418      	add	r0, r3
 8002cea:	f8d4 6410 	ldr.w	r6, [r4, #1040]	; 0x410
        phaddr =  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);  
 8002cee:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	eb06 2080 	add.w	r0, r6, r0, lsl #10
 8002cfa:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8002cfc:	f8b4 240c 	ldrh.w	r2, [r4, #1036]	; 0x40c
 8002d00:	4601      	mov	r1, r0
 8002d02:	4628      	mov	r0, r5
 8002d04:	f000 fd84 	bl	8003810 <USBD_CtlSendData>
 8002d08:	e023      	b.n	8002d52 <DFU_Upload+0xe6>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
        hdfu->dev_status[1] = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f884 3402 	strb.w	r3, [r4, #1026]	; 0x402
        hdfu->dev_status[2] = 0;
 8002d16:	f884 3403 	strb.w	r3, [r4, #1027]	; 0x403
        hdfu->dev_status[3] = 0;
 8002d1a:	f884 3404 	strb.w	r3, [r4, #1028]	; 0x404
        hdfu->dev_status[4] = hdfu->dev_state;        
 8002d1e:	f884 2405 	strb.w	r2, [r4, #1029]	; 0x405
        USBD_CtlError (pdev, req); 
 8002d22:	4628      	mov	r0, r5
 8002d24:	f000 fb23 	bl	800336e <USBD_CtlError>
 8002d28:	e013      	b.n	8002d52 <DFU_Upload+0xe6>
      hdfu->wlength = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
      hdfu->wblock_num = 0;   
 8002d30:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
      USBD_CtlError (pdev, req);
 8002d34:	f000 fb1b 	bl	800336e <USBD_CtlError>
 8002d38:	e00b      	b.n	8002d52 <DFU_Upload+0xe6>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
    hdfu->dev_status[1] = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f884 3402 	strb.w	r3, [r4, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8002d46:	f884 3403 	strb.w	r3, [r4, #1027]	; 0x403
    hdfu->dev_status[3] = 0;
 8002d4a:	f884 3404 	strb.w	r3, [r4, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;
 8002d4e:	f884 2405 	strb.w	r2, [r4, #1029]	; 0x405
}
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
 8002d54:	003ffffe 	.word	0x003ffffe

08002d58 <DFU_GetStatus>:
{
 8002d58:	b538      	push	{r3, r4, r5, lr}
 8002d5a:	4605      	mov	r5, r0
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8002d5c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (hdfu->dev_state)
 8002d60:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d008      	beq.n	8002d7a <DFU_GetStatus+0x22>
 8002d68:	2b06      	cmp	r3, #6
 8002d6a:	d03c      	beq.n	8002de6 <DFU_GetStatus+0x8e>
  USBD_CtlSendData (pdev,
 8002d6c:	2206      	movs	r2, #6
 8002d6e:	f204 4101 	addw	r1, r4, #1025	; 0x401
 8002d72:	4628      	mov	r0, r5
 8002d74:	f000 fd4c 	bl	8003810 <USBD_CtlSendData>
}
 8002d78:	bd38      	pop	{r3, r4, r5, pc}
    if (hdfu->wlength != 0)
 8002d7a:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8002d7e:	b32b      	cbz	r3, 8002dcc <DFU_GetStatus+0x74>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002d80:	2204      	movs	r2, #4
 8002d82:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
      hdfu->dev_status[1] = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f884 3402 	strb.w	r3, [r4, #1026]	; 0x402
      hdfu->dev_status[2] = 0;
 8002d8c:	f884 3403 	strb.w	r3, [r4, #1027]	; 0x403
      hdfu->dev_status[3] = 0;
 8002d90:	f884 3404 	strb.w	r3, [r4, #1028]	; 0x404
      hdfu->dev_status[4] = hdfu->dev_state;
 8002d94:	f884 2405 	strb.w	r2, [r4, #1029]	; 0x405
      if ((hdfu->wblock_num == 0) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002d98:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
 8002d9c:	b14b      	cbz	r3, 8002db2 <DFU_GetStatus+0x5a>
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8002d9e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f204 4201 	addw	r2, r4, #1025	; 0x401
 8002da8:	2101      	movs	r1, #1
 8002daa:	f8d4 0410 	ldr.w	r0, [r4, #1040]	; 0x410
 8002dae:	4798      	blx	r3
 8002db0:	e7dc      	b.n	8002d6c <DFU_GetStatus+0x14>
      if ((hdfu->wblock_num == 0) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002db2:	7823      	ldrb	r3, [r4, #0]
 8002db4:	2b41      	cmp	r3, #65	; 0x41
 8002db6:	d1f2      	bne.n	8002d9e <DFU_GetStatus+0x46>
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002db8:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f204 4201 	addw	r2, r4, #1025	; 0x401
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	f8d4 0410 	ldr.w	r0, [r4, #1040]	; 0x410
 8002dc8:	4798      	blx	r3
 8002dca:	e7cf      	b.n	8002d6c <DFU_GetStatus+0x14>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8002dcc:	2205      	movs	r2, #5
 8002dce:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
      hdfu->dev_status[1] = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f884 3402 	strb.w	r3, [r4, #1026]	; 0x402
      hdfu->dev_status[2] = 0;
 8002dd8:	f884 3403 	strb.w	r3, [r4, #1027]	; 0x403
      hdfu->dev_status[3] = 0;
 8002ddc:	f884 3404 	strb.w	r3, [r4, #1028]	; 0x404
      hdfu->dev_status[4] = hdfu->dev_state;     
 8002de0:	f884 2405 	strb.w	r2, [r4, #1029]	; 0x405
 8002de4:	e7c2      	b.n	8002d6c <DFU_GetStatus+0x14>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8002de6:	f894 3407 	ldrb.w	r3, [r4, #1031]	; 0x407
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d013      	beq.n	8002e16 <DFU_GetStatus+0xbe>
    else if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) && \
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1bc      	bne.n	8002d6c <DFU_GetStatus+0x14>
      ((USBD_DFU_CfgDesc[(11 + (9 * USBD_DFU_MAX_ITF_NUM))]) & 0x04))
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <DFU_GetStatus+0xdc>)
 8002df4:	7d1b      	ldrb	r3, [r3, #20]
    else if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) && \
 8002df6:	f013 0f04 	tst.w	r3, #4
 8002dfa:	d0b7      	beq.n	8002d6c <DFU_GetStatus+0x14>
      hdfu->dev_state = DFU_STATE_IDLE;
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
      hdfu->dev_status[1] = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f884 3402 	strb.w	r3, [r4, #1026]	; 0x402
      hdfu->dev_status[2] = 0;
 8002e08:	f884 3403 	strb.w	r3, [r4, #1027]	; 0x403
      hdfu->dev_status[3] = 0;
 8002e0c:	f884 3404 	strb.w	r3, [r4, #1028]	; 0x404
      hdfu->dev_status[4] = hdfu->dev_state;      
 8002e10:	f884 2405 	strb.w	r2, [r4, #1029]	; 0x405
 8002e14:	e7aa      	b.n	8002d6c <DFU_GetStatus+0x14>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8002e16:	2307      	movs	r3, #7
 8002e18:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_status[1] = 1;             /*bwPollTimeout = 1ms*/
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f884 2402 	strb.w	r2, [r4, #1026]	; 0x402
      hdfu->dev_status[2] = 0;
 8002e22:	2200      	movs	r2, #0
 8002e24:	f884 2403 	strb.w	r2, [r4, #1027]	; 0x403
      hdfu->dev_status[3] = 0;
 8002e28:	f884 2404 	strb.w	r2, [r4, #1028]	; 0x404
      hdfu->dev_status[4] = hdfu->dev_state;   
 8002e2c:	f884 3405 	strb.w	r3, [r4, #1029]	; 0x405
 8002e30:	e79c      	b.n	8002d6c <DFU_GetStatus+0x14>
 8002e32:	bf00      	nop
 8002e34:	20000068 	.word	0x20000068

08002e38 <DFU_GetState>:
{
 8002e38:	b508      	push	{r3, lr}
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8002e3a:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
  USBD_CtlSendData (pdev, 
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002e44:	f000 fce4 	bl	8003810 <USBD_CtlSendData>
}
 8002e48:	bd08      	pop	{r3, pc}

08002e4a <DFU_Download>:
{
 8002e4a:	b508      	push	{r3, lr}
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8002e4c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  if (req->wLength > 0)
 8002e50:	88ca      	ldrh	r2, [r1, #6]
 8002e52:	b1ba      	cbz	r2, 8002e84 <DFU_Download+0x3a>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002e54:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8002e58:	2a02      	cmp	r2, #2
 8002e5a:	d001      	beq.n	8002e60 <DFU_Download+0x16>
 8002e5c:	2a05      	cmp	r2, #5
 8002e5e:	d10e      	bne.n	8002e7e <DFU_Download+0x34>
      hdfu->wblock_num = req->wValue;
 8002e60:	884a      	ldrh	r2, [r1, #2]
 8002e62:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      hdfu->wlength = req->wLength;
 8002e66:	88ca      	ldrh	r2, [r1, #6]
 8002e68:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002e6c:	2103      	movs	r1, #3
 8002e6e:	f883 1400 	strb.w	r1, [r3, #1024]	; 0x400
      hdfu->dev_status[4] = hdfu->dev_state;
 8002e72:	f883 1405 	strb.w	r1, [r3, #1029]	; 0x405
      USBD_CtlPrepareRx (pdev,
 8002e76:	4619      	mov	r1, r3
 8002e78:	f000 fcdf 	bl	800383a <USBD_CtlPrepareRx>
 8002e7c:	e01a      	b.n	8002eb4 <DFU_Download+0x6a>
      USBD_CtlError (pdev, req);
 8002e7e:	f000 fa76 	bl	800336e <USBD_CtlError>
 8002e82:	e017      	b.n	8002eb4 <DFU_Download+0x6a>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE )
 8002e84:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8002e88:	2a05      	cmp	r2, #5
 8002e8a:	d004      	beq.n	8002e96 <DFU_Download+0x4c>
 8002e8c:	2a02      	cmp	r2, #2
 8002e8e:	d002      	beq.n	8002e96 <DFU_Download+0x4c>
      USBD_CtlError (pdev, req);
 8002e90:	f000 fa6d 	bl	800336e <USBD_CtlError>
}
 8002e94:	e00e      	b.n	8002eb4 <DFU_Download+0x6a>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002e9c:	2106      	movs	r1, #6
 8002e9e:	f883 1400 	strb.w	r1, [r3, #1024]	; 0x400
      hdfu->dev_status[1] = 0;
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
      hdfu->dev_status[2] = 0;
 8002ea8:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
      hdfu->dev_status[3] = 0;
 8002eac:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
      hdfu->dev_status[4] = hdfu->dev_state;        
 8002eb0:	f883 1405 	strb.w	r1, [r3, #1029]	; 0x405
}
 8002eb4:	bd08      	pop	{r3, pc}
	...

08002eb8 <DFU_Detach>:
{
 8002eb8:	b510      	push	{r4, lr}
 8002eba:	4604      	mov	r4, r0
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8002ebc:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002ec0:	f893 0400 	ldrb.w	r0, [r3, #1024]	; 0x400
 8002ec4:	1e82      	subs	r2, r0, #2
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	2a01      	cmp	r2, #1
 8002eca:	d905      	bls.n	8002ed8 <DFU_Detach+0x20>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8002ecc:	2805      	cmp	r0, #5
 8002ece:	d003      	beq.n	8002ed8 <DFU_Detach+0x20>
 8002ed0:	2806      	cmp	r0, #6
 8002ed2:	d001      	beq.n	8002ed8 <DFU_Detach+0x20>
        || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE )
 8002ed4:	2809      	cmp	r0, #9
 8002ed6:	d113      	bne.n	8002f00 <DFU_Detach+0x48>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002ed8:	2002      	movs	r0, #2
 8002eda:	f883 0400 	strb.w	r0, [r3, #1024]	; 0x400
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
    hdfu->dev_status[1] = 0;
 8002ee4:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
    hdfu->dev_status[2] = 0;
 8002ee8:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8002eec:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;
 8002ef0:	f883 0405 	strb.w	r0, [r3, #1029]	; 0x405
    hdfu->dev_status[5] = 0; /*iString*/
 8002ef4:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
    hdfu->wblock_num = 0;
 8002ef8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wlength = 0;
 8002efc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  if ((USBD_DFU_CfgDesc[12 + (9 * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <DFU_Detach+0x68>)
 8002f02:	7d5b      	ldrb	r3, [r3, #21]
 8002f04:	f013 0f10 	tst.w	r3, #16
 8002f08:	d103      	bne.n	8002f12 <DFU_Detach+0x5a>
    USBD_Delay (req->wValue);  
 8002f0a:	8848      	ldrh	r0, [r1, #2]
 8002f0c:	f7fd fcf6 	bl	80008fc <HAL_Delay>
}
 8002f10:	bd10      	pop	{r4, pc}
    USBD_Stop (pdev);
 8002f12:	4620      	mov	r0, r4
 8002f14:	f000 f8e4 	bl	80030e0 <USBD_Stop>
    USBD_Start (pdev);  
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f000 f8dc 	bl	80030d6 <USBD_Start>
 8002f1e:	e7f7      	b.n	8002f10 <DFU_Detach+0x58>
 8002f20:	20000068 	.word	0x20000068

08002f24 <USBD_DFU_Setup>:
{
 8002f24:	b510      	push	{r4, lr}
  hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8002f26:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f2a:	780b      	ldrb	r3, [r1, #0]
 8002f2c:	f013 0360 	ands.w	r3, r3, #96	; 0x60
 8002f30:	d02a      	beq.n	8002f88 <USBD_DFU_Setup+0x64>
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d154      	bne.n	8002fe0 <USBD_DFU_Setup+0xbc>
    switch (req->bRequest)
 8002f36:	784b      	ldrb	r3, [r1, #1]
 8002f38:	2b06      	cmp	r3, #6
 8002f3a:	d821      	bhi.n	8002f80 <USBD_DFU_Setup+0x5c>
 8002f3c:	e8df f003 	tbb	[pc, r3]
 8002f40:	0c08041c 	.word	0x0c08041c
 8002f44:	1410      	.short	0x1410
 8002f46:	18          	.byte	0x18
 8002f47:	00          	.byte	0x00
      DFU_Download(pdev, req);
 8002f48:	f7ff ff7f 	bl	8002e4a <DFU_Download>
  uint8_t ret = USBD_OK;
 8002f4c:	2000      	movs	r0, #0
      break;
 8002f4e:	e048      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
      DFU_Upload(pdev, req);   
 8002f50:	f7ff fe8c 	bl	8002c6c <DFU_Upload>
  uint8_t ret = USBD_OK;
 8002f54:	2000      	movs	r0, #0
      break;
 8002f56:	e044      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
      DFU_GetStatus(pdev);
 8002f58:	f7ff fefe 	bl	8002d58 <DFU_GetStatus>
  uint8_t ret = USBD_OK;
 8002f5c:	2000      	movs	r0, #0
      break;
 8002f5e:	e040      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
      DFU_ClearStatus(pdev);
 8002f60:	f7ff fd6e 	bl	8002a40 <DFU_ClearStatus>
  uint8_t ret = USBD_OK;
 8002f64:	2000      	movs	r0, #0
      break;      
 8002f66:	e03c      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
      DFU_GetState(pdev);
 8002f68:	f7ff ff66 	bl	8002e38 <DFU_GetState>
  uint8_t ret = USBD_OK;
 8002f6c:	2000      	movs	r0, #0
      break;  
 8002f6e:	e038      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
      DFU_Abort(pdev);
 8002f70:	f7ff fd8f 	bl	8002a92 <DFU_Abort>
  uint8_t ret = USBD_OK;
 8002f74:	2000      	movs	r0, #0
      break;
 8002f76:	e034      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
      DFU_Detach(pdev, req);
 8002f78:	f7ff ff9e 	bl	8002eb8 <DFU_Detach>
  uint8_t ret = USBD_OK;
 8002f7c:	2000      	movs	r0, #0
      break;
 8002f7e:	e030      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
      USBD_CtlError (pdev, req);
 8002f80:	f000 f9f5 	bl	800336e <USBD_CtlError>
      ret = USBD_FAIL; 
 8002f84:	2002      	movs	r0, #2
 8002f86:	e02c      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
    switch (req->bRequest)
 8002f88:	784b      	ldrb	r3, [r1, #1]
 8002f8a:	2b0a      	cmp	r3, #10
 8002f8c:	d017      	beq.n	8002fbe <USBD_DFU_Setup+0x9a>
 8002f8e:	2b0b      	cmp	r3, #11
 8002f90:	d01c      	beq.n	8002fcc <USBD_DFU_Setup+0xa8>
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d003      	beq.n	8002f9e <USBD_DFU_Setup+0x7a>
      USBD_CtlError (pdev, req);
 8002f96:	f000 f9ea 	bl	800336e <USBD_CtlError>
      ret = USBD_FAIL;     
 8002f9a:	2002      	movs	r0, #2
 8002f9c:	e021      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
      if( (req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8002f9e:	884b      	ldrh	r3, [r1, #2]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	2b21      	cmp	r3, #33	; 0x21
 8002fa4:	d005      	beq.n	8002fb2 <USBD_DFU_Setup+0x8e>
  uint16_t len = 0;
 8002fa6:	2200      	movs	r2, #0
  uint8_t *pbuf = 0;
 8002fa8:	4611      	mov	r1, r2
      USBD_CtlSendData (pdev, 
 8002faa:	f000 fc31 	bl	8003810 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002fae:	2000      	movs	r0, #0
      break;
 8002fb0:	e017      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
        len = MIN(USB_DFU_DESC_SIZ , req->wLength);
 8002fb2:	88ca      	ldrh	r2, [r1, #6]
 8002fb4:	2a09      	cmp	r2, #9
 8002fb6:	bf28      	it	cs
 8002fb8:	2209      	movcs	r2, #9
        pbuf = USBD_DFU_CfgDesc + (9 * (USBD_DFU_MAX_ITF_NUM + 1));
 8002fba:	490a      	ldr	r1, [pc, #40]	; (8002fe4 <USBD_DFU_Setup+0xc0>)
 8002fbc:	e7f5      	b.n	8002faa <USBD_DFU_Setup+0x86>
      USBD_CtlSendData (pdev,
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f204 4114 	addw	r1, r4, #1044	; 0x414
 8002fc4:	f000 fc24 	bl	8003810 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002fc8:	2000      	movs	r0, #0
      break;
 8002fca:	e00a      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8002fcc:	788b      	ldrb	r3, [r1, #2]
 8002fce:	b91b      	cbnz	r3, 8002fd8 <USBD_DFU_Setup+0xb4>
        hdfu->alt_setting = (uint8_t)(req->wValue);
 8002fd0:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  uint8_t ret = USBD_OK;
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	e004      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
        USBD_CtlError (pdev, req);
 8002fd8:	f000 f9c9 	bl	800336e <USBD_CtlError>
        ret = USBD_FAIL;  
 8002fdc:	2002      	movs	r0, #2
 8002fde:	e000      	b.n	8002fe2 <USBD_DFU_Setup+0xbe>
  uint8_t ret = USBD_OK;
 8002fe0:	2000      	movs	r0, #0
}
 8002fe2:	bd10      	pop	{r4, pc}
 8002fe4:	2000007a 	.word	0x2000007a

08002fe8 <USBD_DFU_DeInit>:
  hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8002fe8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hdfu->wblock_num = 0;
 8002fec:	2200      	movs	r2, #0
 8002fee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wlength = 0;
 8002ff2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->dev_state = DFU_STATE_IDLE;
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	f883 1400 	strb.w	r1, [r3, #1024]	; 0x400
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002ffc:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8003000:	f883 1405 	strb.w	r1, [r3, #1029]	; 0x405
  if(pdev->pClassData != NULL)
 8003004:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8003008:	b173      	cbz	r3, 8003028 <USBD_DFU_DeInit+0x40>
{
 800300a:	b510      	push	{r4, lr}
 800300c:	4604      	mov	r4, r0
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit(); 
 800300e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003016:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800301a:	f000 fe23 	bl	8003c64 <USBD_static_free>
    pdev->pClassData = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003024:	2000      	movs	r0, #0
 8003026:	bd10      	pop	{r4, pc}
 8003028:	2000      	movs	r0, #0
 800302a:	4770      	bx	lr

0800302c <USBD_DFU_Init>:
{
 800302c:	b510      	push	{r4, lr}
 800302e:	4604      	mov	r4, r0
  pdev->pClassData = USBD_malloc(sizeof (USBD_DFU_HandleTypeDef));
 8003030:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8003034:	f000 fe12 	bl	8003c5c <USBD_static_malloc>
 8003038:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800303c:	b318      	cbz	r0, 8003086 <USBD_DFU_Init+0x5a>
    hdfu->alt_setting = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	f8c0 3414 	str.w	r3, [r0, #1044]	; 0x414
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8003044:	4a11      	ldr	r2, [pc, #68]	; (800308c <USBD_DFU_Init+0x60>)
 8003046:	f8c0 2410 	str.w	r2, [r0, #1040]	; 0x410
    hdfu->wblock_num = 0;
 800304a:	f8c0 3408 	str.w	r3, [r0, #1032]	; 0x408
    hdfu->wlength = 0;
 800304e:	f8c0 340c 	str.w	r3, [r0, #1036]	; 0x40c
    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8003052:	f880 3407 	strb.w	r3, [r0, #1031]	; 0x407
    hdfu->dev_state = DFU_STATE_IDLE;
 8003056:	2202      	movs	r2, #2
 8003058:	f880 2400 	strb.w	r2, [r0, #1024]	; 0x400
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800305c:	f880 3401 	strb.w	r3, [r0, #1025]	; 0x401
    hdfu->dev_status[1] = 0;
 8003060:	f880 3402 	strb.w	r3, [r0, #1026]	; 0x402
    hdfu->dev_status[2] = 0;   
 8003064:	f880 3403 	strb.w	r3, [r0, #1027]	; 0x403
    hdfu->dev_status[3] = 0;
 8003068:	f880 3404 	strb.w	r3, [r0, #1028]	; 0x404
    hdfu->dev_status[4] = DFU_STATE_IDLE;    
 800306c:	f880 2405 	strb.w	r2, [r0, #1029]	; 0x405
    hdfu->dev_status[5] = 0;    
 8003070:	f880 3406 	strb.w	r3, [r0, #1030]	; 0x406
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8003074:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4798      	blx	r3
 800307c:	b908      	cbnz	r0, 8003082 <USBD_DFU_Init+0x56>
  return USBD_OK;
 800307e:	2000      	movs	r0, #0
}
 8003080:	bd10      	pop	{r4, pc}
      return USBD_FAIL;
 8003082:	2002      	movs	r0, #2
 8003084:	e7fc      	b.n	8003080 <USBD_DFU_Init+0x54>
    return USBD_FAIL; 
 8003086:	2002      	movs	r0, #2
 8003088:	e7fa      	b.n	8003080 <USBD_DFU_Init+0x54>
 800308a:	bf00      	nop
 800308c:	08005000 	.word	0x08005000

08003090 <USBD_DFU_RegisterMedia>:
  if(fops != NULL)
 8003090:	b109      	cbz	r1, 8003096 <USBD_DFU_RegisterMedia+0x6>
    pdev->pUserData= fops;
 8003092:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
}
 8003096:	2000      	movs	r0, #0
 8003098:	4770      	bx	lr

0800309a <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800309a:	b198      	cbz	r0, 80030c4 <USBD_Init+0x2a>
{
 800309c:	b508      	push	{r3, lr}
 800309e:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80030a0:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 80030a4:	b110      	cbz	r0, 80030ac <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80030a6:	2000      	movs	r0, #0
 80030a8:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80030ac:	b109      	cbz	r1, 80030b2 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80030ae:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 80030b2:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80030ba:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80030bc:	f000 fd4c 	bl	8003b58 <USBD_LL_Init>
  
  return USBD_OK; 
 80030c0:	2000      	movs	r0, #0
}
 80030c2:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80030c4:	2002      	movs	r0, #2
}
 80030c6:	4770      	bx	lr

080030c8 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80030c8:	b119      	cbz	r1, 80030d2 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80030ca:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80030ce:	2000      	movs	r0, #0
 80030d0:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80030d2:	2002      	movs	r0, #2
  }
  
  return status;
}
 80030d4:	4770      	bx	lr

080030d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80030d6:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80030d8:	f000 fd6a 	bl	8003bb0 <USBD_LL_Start>
  
  return USBD_OK;  
}
 80030dc:	2000      	movs	r0, #0
 80030de:	bd08      	pop	{r3, pc}

080030e0 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 80030e0:	b510      	push	{r4, lr}
 80030e2:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80030e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	7901      	ldrb	r1, [r0, #4]
 80030ec:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 80030ee:	4620      	mov	r0, r4
 80030f0:	f000 fd66 	bl	8003bc0 <USBD_LL_Stop>
  
  return USBD_OK;  
}
 80030f4:	2000      	movs	r0, #0
 80030f6:	bd10      	pop	{r4, pc}

080030f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80030f8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80030fa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030fe:	b133      	cbz	r3, 800310e <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4798      	blx	r3
 8003104:	b908      	cbnz	r0, 800310a <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 8003106:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 8003108:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800310a:	2002      	movs	r0, #2
 800310c:	e7fc      	b.n	8003108 <USBD_SetClassConfig+0x10>
 800310e:	2002      	movs	r0, #2
 8003110:	e7fa      	b.n	8003108 <USBD_SetClassConfig+0x10>

08003112 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003112:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003114:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4798      	blx	r3
  return USBD_OK;
}
 800311c:	2000      	movs	r0, #0
 800311e:	bd08      	pop	{r3, pc}

08003120 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003124:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8003128:	4628      	mov	r0, r5
 800312a:	f000 f90c 	bl	8003346 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800312e:	2301      	movs	r3, #1
 8003130:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8003134:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003138:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800313c:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8003140:	f001 031f 	and.w	r3, r1, #31
 8003144:	2b01      	cmp	r3, #1
 8003146:	d00e      	beq.n	8003166 <USBD_LL_SetupStage+0x46>
 8003148:	b13b      	cbz	r3, 800315a <USBD_LL_SetupStage+0x3a>
 800314a:	2b02      	cmp	r3, #2
 800314c:	d010      	beq.n	8003170 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800314e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003152:	4620      	mov	r0, r4
 8003154:	f000 fd47 	bl	8003be6 <USBD_LL_StallEP>
    break;
 8003158:	e003      	b.n	8003162 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800315a:	4629      	mov	r1, r5
 800315c:	4620      	mov	r0, r4
 800315e:	f000 fa6e 	bl	800363e <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003162:	2000      	movs	r0, #0
 8003164:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003166:	4629      	mov	r1, r5
 8003168:	4620      	mov	r0, r4
 800316a:	f000 fa8c 	bl	8003686 <USBD_StdItfReq>
    break;
 800316e:	e7f8      	b.n	8003162 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003170:	4629      	mov	r1, r5
 8003172:	4620      	mov	r0, r4
 8003174:	f000 faa3 	bl	80036be <USBD_StdEPReq>
    break;
 8003178:	e7f3      	b.n	8003162 <USBD_LL_SetupStage+0x42>

0800317a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800317a:	b510      	push	{r4, lr}
 800317c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800317e:	bb21      	cbnz	r1, 80031ca <USBD_LL_DataOutStage+0x50>
 8003180:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003182:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003186:	2a03      	cmp	r2, #3
 8003188:	d001      	beq.n	800318e <USBD_LL_DataOutStage+0x14>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800318a:	2000      	movs	r0, #0
 800318c:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 800318e:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8003192:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003196:	4291      	cmp	r1, r2
 8003198:	d80c      	bhi.n	80031b4 <USBD_LL_DataOutStage+0x3a>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800319a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	b123      	cbz	r3, 80031ac <USBD_LL_DataOutStage+0x32>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80031a2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80031a6:	2a03      	cmp	r2, #3
 80031a8:	d100      	bne.n	80031ac <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev); 
 80031aa:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80031ac:	4620      	mov	r0, r4
 80031ae:	f000 fb5b 	bl	8003868 <USBD_CtlSendStatus>
 80031b2:	e7ea      	b.n	800318a <USBD_LL_DataOutStage+0x10>
        pep->rem_length -=  pep->maxpacket;
 80031b4:	1a89      	subs	r1, r1, r2
 80031b6:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 80031ba:	428a      	cmp	r2, r1
 80031bc:	bf28      	it	cs
 80031be:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 80031c0:	b292      	uxth	r2, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	f000 fb48 	bl	8003858 <USBD_CtlContinueRx>
 80031c8:	e7df      	b.n	800318a <USBD_LL_DataOutStage+0x10>
 80031ca:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL)&&
 80031cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0d9      	beq.n	800318a <USBD_LL_DataOutStage+0x10>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80031d6:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80031da:	2903      	cmp	r1, #3
 80031dc:	d1d5      	bne.n	800318a <USBD_LL_DataOutStage+0x10>
    pdev->pClass->DataOut(pdev, epnum); 
 80031de:	4611      	mov	r1, r2
 80031e0:	4798      	blx	r3
 80031e2:	e7d2      	b.n	800318a <USBD_LL_DataOutStage+0x10>

080031e4 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80031e4:	b510      	push	{r4, lr}
 80031e6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80031e8:	2900      	cmp	r1, #0
 80031ea:	d146      	bne.n	800327a <USBD_LL_DataInStage+0x96>
 80031ec:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80031ee:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80031f2:	2a02      	cmp	r2, #2
 80031f4:	d005      	beq.n	8003202 <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80031f6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d039      	beq.n	8003272 <USBD_LL_DataInStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80031fe:	2000      	movs	r0, #0
 8003200:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 8003202:	69c1      	ldr	r1, [r0, #28]
 8003204:	6a02      	ldr	r2, [r0, #32]
 8003206:	4291      	cmp	r1, r2
 8003208:	d819      	bhi.n	800323e <USBD_LL_DataInStage+0x5a>
        if((pep->total_length % pep->maxpacket == 0) &&
 800320a:	6981      	ldr	r1, [r0, #24]
 800320c:	fbb1 f3f2 	udiv	r3, r1, r2
 8003210:	fb02 1313 	mls	r3, r2, r3, r1
 8003214:	b92b      	cbnz	r3, 8003222 <USBD_LL_DataInStage+0x3e>
 8003216:	428a      	cmp	r2, r1
 8003218:	d803      	bhi.n	8003222 <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 800321a:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 800321e:	4299      	cmp	r1, r3
 8003220:	d31a      	bcc.n	8003258 <USBD_LL_DataInStage+0x74>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003222:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	b12b      	cbz	r3, 8003236 <USBD_LL_DataInStage+0x52>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800322a:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800322e:	2a03      	cmp	r2, #3
 8003230:	d101      	bne.n	8003236 <USBD_LL_DataInStage+0x52>
            pdev->pClass->EP0_TxSent(pdev); 
 8003232:	4620      	mov	r0, r4
 8003234:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003236:	4620      	mov	r0, r4
 8003238:	f000 fb21 	bl	800387e <USBD_CtlReceiveStatus>
 800323c:	e7db      	b.n	80031f6 <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 800323e:	1a8a      	subs	r2, r1, r2
 8003240:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8003242:	b292      	uxth	r2, r2
 8003244:	4619      	mov	r1, r3
 8003246:	f000 faf0 	bl	800382a <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 800324a:	2300      	movs	r3, #0
 800324c:	461a      	mov	r2, r3
 800324e:	4619      	mov	r1, r3
 8003250:	4620      	mov	r0, r4
 8003252:	f000 fcfb 	bl	8003c4c <USBD_LL_PrepareReceive>
 8003256:	e7ce      	b.n	80031f6 <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003258:	2200      	movs	r2, #0
 800325a:	4611      	mov	r1, r2
 800325c:	f000 fae5 	bl	800382a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003260:	2100      	movs	r1, #0
 8003262:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8003266:	460b      	mov	r3, r1
 8003268:	460a      	mov	r2, r1
 800326a:	4620      	mov	r0, r4
 800326c:	f000 fcee 	bl	8003c4c <USBD_LL_PrepareReceive>
 8003270:	e7c1      	b.n	80031f6 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8003278:	e7c1      	b.n	80031fe <USBD_LL_DataInStage+0x1a>
 800327a:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 800327c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0bb      	beq.n	80031fe <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003286:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800328a:	2903      	cmp	r1, #3
 800328c:	d1b7      	bne.n	80031fe <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 800328e:	4611      	mov	r1, r2
 8003290:	4798      	blx	r3
 8003292:	e7b4      	b.n	80031fe <USBD_LL_DataInStage+0x1a>

08003294 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003294:	b538      	push	{r3, r4, r5, lr}
 8003296:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003298:	2340      	movs	r3, #64	; 0x40
 800329a:	2200      	movs	r2, #0
 800329c:	4611      	mov	r1, r2
 800329e:	f000 fc97 	bl	8003bd0 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80032a2:	2540      	movs	r5, #64	; 0x40
 80032a4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80032a8:	462b      	mov	r3, r5
 80032aa:	2200      	movs	r2, #0
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 fc8e 	bl	8003bd0 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80032b4:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80032bc:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80032c0:	b12b      	cbz	r3, 80032ce <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80032c2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	7921      	ldrb	r1, [r4, #4]
 80032ca:	4620      	mov	r0, r4
 80032cc:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80032ce:	2000      	movs	r0, #0
 80032d0:	bd38      	pop	{r3, r4, r5, pc}

080032d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80032d2:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80032d4:	2000      	movs	r0, #0
 80032d6:	4770      	bx	lr

080032d8 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80032d8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80032dc:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80032e0:	2304      	movs	r3, #4
 80032e2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80032e6:	2000      	movs	r0, #0
 80032e8:	4770      	bx	lr

080032ea <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80032ea:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80032ee:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80032f2:	2000      	movs	r0, #0
 80032f4:	4770      	bx	lr

080032f6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80032f6:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80032f8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d001      	beq.n	8003304 <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8003300:	2000      	movs	r0, #0
 8003302:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 8003304:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f8      	beq.n	8003300 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800330e:	4798      	blx	r3
 8003310:	e7f6      	b.n	8003300 <USBD_LL_SOF+0xa>

08003312 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;
 8003312:	2300      	movs	r3, #0

    while (*buf != '\0') 
 8003314:	e002      	b.n	800331c <USBD_GetLen+0xa>
    {
        len++;
 8003316:	3301      	adds	r3, #1
 8003318:	b2db      	uxtb	r3, r3
        buf++;
 800331a:	3001      	adds	r0, #1
    while (*buf != '\0') 
 800331c:	7802      	ldrb	r2, [r0, #0]
 800331e:	2a00      	cmp	r2, #0
 8003320:	d1f9      	bne.n	8003316 <USBD_GetLen+0x4>
    }

    return len;
}
 8003322:	4618      	mov	r0, r3
 8003324:	4770      	bx	lr

08003326 <USBD_SetFeature>:
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003326:	884b      	ldrh	r3, [r1, #2]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10b      	bne.n	8003344 <USBD_SetFeature+0x1e>
{
 800332c:	b510      	push	{r4, lr}
 800332e:	4604      	mov	r4, r0
    pdev->dev_remote_wakeup = 1;  
 8003330:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8003334:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800333c:	4620      	mov	r0, r4
 800333e:	f000 fa93 	bl	8003868 <USBD_CtlSendStatus>
}
 8003342:	bd10      	pop	{r4, pc}
 8003344:	4770      	bx	lr

08003346 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003346:	780b      	ldrb	r3, [r1, #0]
 8003348:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800334a:	784b      	ldrb	r3, [r1, #1]
 800334c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800334e:	788b      	ldrb	r3, [r1, #2]
 8003350:	78ca      	ldrb	r2, [r1, #3]
 8003352:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003356:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003358:	790b      	ldrb	r3, [r1, #4]
 800335a:	794a      	ldrb	r2, [r1, #5]
 800335c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003360:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003362:	798b      	ldrb	r3, [r1, #6]
 8003364:	79ca      	ldrb	r2, [r1, #7]
 8003366:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800336a:	80c3      	strh	r3, [r0, #6]
}
 800336c:	4770      	bx	lr

0800336e <USBD_CtlError>:
{
 800336e:	b510      	push	{r4, lr}
 8003370:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003372:	2180      	movs	r1, #128	; 0x80
 8003374:	f000 fc37 	bl	8003be6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003378:	2100      	movs	r1, #0
 800337a:	4620      	mov	r0, r4
 800337c:	f000 fc33 	bl	8003be6 <USBD_LL_StallEP>
}
 8003380:	bd10      	pop	{r4, pc}

08003382 <USBD_GetDescriptor>:
{
 8003382:	b530      	push	{r4, r5, lr}
 8003384:	b083      	sub	sp, #12
 8003386:	4604      	mov	r4, r0
 8003388:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 800338a:	8849      	ldrh	r1, [r1, #2]
 800338c:	0a0b      	lsrs	r3, r1, #8
 800338e:	3b01      	subs	r3, #1
 8003390:	2b06      	cmp	r3, #6
 8003392:	f200 8084 	bhi.w	800349e <USBD_GetDescriptor+0x11c>
 8003396:	e8df f003 	tbb	[pc, r3]
 800339a:	1304      	.short	0x1304
 800339c:	66828227 	.word	0x66828227
 80033a0:	73          	.byte	0x73
 80033a1:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80033a2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f10d 0106 	add.w	r1, sp, #6
 80033ac:	7c00      	ldrb	r0, [r0, #16]
 80033ae:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80033b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80033b4:	b112      	cbz	r2, 80033bc <USBD_GetDescriptor+0x3a>
 80033b6:	88eb      	ldrh	r3, [r5, #6]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d174      	bne.n	80034a6 <USBD_GetDescriptor+0x124>
}
 80033bc:	b003      	add	sp, #12
 80033be:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80033c0:	7c03      	ldrb	r3, [r0, #16]
 80033c2:	b943      	cbnz	r3, 80033d6 <USBD_GetDescriptor+0x54>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80033c4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	f10d 0006 	add.w	r0, sp, #6
 80033ce:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80033d0:	2302      	movs	r3, #2
 80033d2:	7043      	strb	r3, [r0, #1]
 80033d4:	e7ec      	b.n	80033b0 <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80033d6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	f10d 0006 	add.w	r0, sp, #6
 80033e0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80033e2:	2302      	movs	r3, #2
 80033e4:	7043      	strb	r3, [r0, #1]
 80033e6:	e7e3      	b.n	80033b0 <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 80033e8:	b2c9      	uxtb	r1, r1
 80033ea:	2905      	cmp	r1, #5
 80033ec:	d834      	bhi.n	8003458 <USBD_GetDescriptor+0xd6>
 80033ee:	e8df f001 	tbb	[pc, r1]
 80033f2:	0b03      	.short	0x0b03
 80033f4:	2b231b13 	.word	0x2b231b13
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80033f8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f10d 0106 	add.w	r1, sp, #6
 8003402:	7c00      	ldrb	r0, [r0, #16]
 8003404:	4798      	blx	r3
      break;
 8003406:	e7d3      	b.n	80033b0 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003408:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f10d 0106 	add.w	r1, sp, #6
 8003412:	7c00      	ldrb	r0, [r0, #16]
 8003414:	4798      	blx	r3
      break;
 8003416:	e7cb      	b.n	80033b0 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003418:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f10d 0106 	add.w	r1, sp, #6
 8003422:	7c00      	ldrb	r0, [r0, #16]
 8003424:	4798      	blx	r3
      break;
 8003426:	e7c3      	b.n	80033b0 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003428:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f10d 0106 	add.w	r1, sp, #6
 8003432:	7c00      	ldrb	r0, [r0, #16]
 8003434:	4798      	blx	r3
      break;
 8003436:	e7bb      	b.n	80033b0 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003438:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f10d 0106 	add.w	r1, sp, #6
 8003442:	7c00      	ldrb	r0, [r0, #16]
 8003444:	4798      	blx	r3
      break;
 8003446:	e7b3      	b.n	80033b0 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003448:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f10d 0106 	add.w	r1, sp, #6
 8003452:	7c00      	ldrb	r0, [r0, #16]
 8003454:	4798      	blx	r3
      break;
 8003456:	e7ab      	b.n	80033b0 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8003458:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	f10d 0206 	add.w	r2, sp, #6
 8003462:	4798      	blx	r3
      break;
 8003464:	e7a4      	b.n	80033b0 <USBD_GetDescriptor+0x2e>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003466:	7c03      	ldrb	r3, [r0, #16]
 8003468:	b933      	cbnz	r3, 8003478 <USBD_GetDescriptor+0xf6>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800346a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	f10d 0006 	add.w	r0, sp, #6
 8003474:	4798      	blx	r3
      break;
 8003476:	e79b      	b.n	80033b0 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8003478:	4629      	mov	r1, r5
 800347a:	f7ff ff78 	bl	800336e <USBD_CtlError>
      return;
 800347e:	e79d      	b.n	80033bc <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003480:	7c03      	ldrb	r3, [r0, #16]
 8003482:	b943      	cbnz	r3, 8003496 <USBD_GetDescriptor+0x114>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003484:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f10d 0006 	add.w	r0, sp, #6
 800348e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003490:	2307      	movs	r3, #7
 8003492:	7043      	strb	r3, [r0, #1]
      break; 
 8003494:	e78c      	b.n	80033b0 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8003496:	4629      	mov	r1, r5
 8003498:	f7ff ff69 	bl	800336e <USBD_CtlError>
      return;
 800349c:	e78e      	b.n	80033bc <USBD_GetDescriptor+0x3a>
     USBD_CtlError(pdev , req);
 800349e:	4629      	mov	r1, r5
 80034a0:	f7ff ff65 	bl	800336e <USBD_CtlError>
    return;
 80034a4:	e78a      	b.n	80033bc <USBD_GetDescriptor+0x3a>
    len = MIN(len , req->wLength);
 80034a6:	429a      	cmp	r2, r3
 80034a8:	bf28      	it	cs
 80034aa:	461a      	movcs	r2, r3
 80034ac:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80034b0:	4601      	mov	r1, r0
 80034b2:	4620      	mov	r0, r4
 80034b4:	f000 f9ac 	bl	8003810 <USBD_CtlSendData>
 80034b8:	e780      	b.n	80033bc <USBD_GetDescriptor+0x3a>

080034ba <USBD_SetAddress>:
{
 80034ba:	b538      	push	{r3, r4, r5, lr}
 80034bc:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80034be:	888b      	ldrh	r3, [r1, #4]
 80034c0:	b9e3      	cbnz	r3, 80034fc <USBD_SetAddress+0x42>
 80034c2:	88cb      	ldrh	r3, [r1, #6]
 80034c4:	b9d3      	cbnz	r3, 80034fc <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80034c6:	788d      	ldrb	r5, [r1, #2]
 80034c8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80034cc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d00c      	beq.n	80034ee <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 80034d4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80034d8:	4629      	mov	r1, r5
 80034da:	f000 fba7 	bl	8003c2c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80034de:	4620      	mov	r0, r4
 80034e0:	f000 f9c2 	bl	8003868 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80034e4:	b135      	cbz	r5, 80034f4 <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80034e6:	2302      	movs	r3, #2
 80034e8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80034ec:	e009      	b.n	8003502 <USBD_SetAddress+0x48>
      USBD_CtlError(pdev , req);
 80034ee:	f7ff ff3e 	bl	800336e <USBD_CtlError>
 80034f2:	e006      	b.n	8003502 <USBD_SetAddress+0x48>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80034f4:	2301      	movs	r3, #1
 80034f6:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80034fa:	e002      	b.n	8003502 <USBD_SetAddress+0x48>
     USBD_CtlError(pdev , req);                        
 80034fc:	4620      	mov	r0, r4
 80034fe:	f7ff ff36 	bl	800336e <USBD_CtlError>
}
 8003502:	bd38      	pop	{r3, r4, r5, pc}

08003504 <USBD_SetConfig>:
{
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	4604      	mov	r4, r0
 8003508:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 800350a:	7889      	ldrb	r1, [r1, #2]
 800350c:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <USBD_SetConfig+0xa0>)
 800350e:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003510:	2901      	cmp	r1, #1
 8003512:	d809      	bhi.n	8003528 <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 8003514:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003518:	2b02      	cmp	r3, #2
 800351a:	d009      	beq.n	8003530 <USBD_SetConfig+0x2c>
 800351c:	2b03      	cmp	r3, #3
 800351e:	d01c      	beq.n	800355a <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 8003520:	4629      	mov	r1, r5
 8003522:	f7ff ff24 	bl	800336e <USBD_CtlError>
      break;
 8003526:	e002      	b.n	800352e <USBD_SetConfig+0x2a>
     USBD_CtlError(pdev , req);                              
 8003528:	4629      	mov	r1, r5
 800352a:	f7ff ff20 	bl	800336e <USBD_CtlError>
}
 800352e:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 8003530:	b181      	cbz	r1, 8003554 <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 8003532:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003534:	2303      	movs	r3, #3
 8003536:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800353a:	f7ff fddd 	bl	80030f8 <USBD_SetClassConfig>
 800353e:	2802      	cmp	r0, #2
 8003540:	d003      	beq.n	800354a <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 8003542:	4620      	mov	r0, r4
 8003544:	f000 f990 	bl	8003868 <USBD_CtlSendStatus>
 8003548:	e7f1      	b.n	800352e <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 800354a:	4629      	mov	r1, r5
 800354c:	4620      	mov	r0, r4
 800354e:	f7ff ff0e 	bl	800336e <USBD_CtlError>
          return;
 8003552:	e7ec      	b.n	800352e <USBD_SetConfig+0x2a>
         USBD_CtlSendStatus(pdev);
 8003554:	f000 f988 	bl	8003868 <USBD_CtlSendStatus>
 8003558:	e7e9      	b.n	800352e <USBD_SetConfig+0x2a>
      if (cfgidx == 0) 
 800355a:	b189      	cbz	r1, 8003580 <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 800355c:	6843      	ldr	r3, [r0, #4]
 800355e:	4299      	cmp	r1, r3
 8003560:	d01d      	beq.n	800359e <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003562:	b2d9      	uxtb	r1, r3
 8003564:	f7ff fdd5 	bl	8003112 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <USBD_SetConfig+0xa0>)
 800356a:	7819      	ldrb	r1, [r3, #0]
 800356c:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800356e:	4620      	mov	r0, r4
 8003570:	f7ff fdc2 	bl	80030f8 <USBD_SetClassConfig>
 8003574:	2802      	cmp	r0, #2
 8003576:	d00d      	beq.n	8003594 <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 8003578:	4620      	mov	r0, r4
 800357a:	f000 f975 	bl	8003868 <USBD_CtlSendStatus>
 800357e:	e7d6      	b.n	800352e <USBD_SetConfig+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003580:	2302      	movs	r3, #2
 8003582:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003586:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003588:	f7ff fdc3 	bl	8003112 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800358c:	4620      	mov	r0, r4
 800358e:	f000 f96b 	bl	8003868 <USBD_CtlSendStatus>
 8003592:	e7cc      	b.n	800352e <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 8003594:	4629      	mov	r1, r5
 8003596:	4620      	mov	r0, r4
 8003598:	f7ff fee9 	bl	800336e <USBD_CtlError>
          return;
 800359c:	e7c7      	b.n	800352e <USBD_SetConfig+0x2a>
        USBD_CtlSendStatus(pdev);
 800359e:	f000 f963 	bl	8003868 <USBD_CtlSendStatus>
 80035a2:	e7c4      	b.n	800352e <USBD_SetConfig+0x2a>
 80035a4:	20000a1f 	.word	0x20000a1f

080035a8 <USBD_GetConfig>:
{
 80035a8:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 80035aa:	88cb      	ldrh	r3, [r1, #6]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d108      	bne.n	80035c2 <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 80035b0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d007      	beq.n	80035c8 <USBD_GetConfig+0x20>
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d00d      	beq.n	80035d8 <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 80035bc:	f7ff fed7 	bl	800336e <USBD_CtlError>
}
 80035c0:	e001      	b.n	80035c6 <USBD_GetConfig+0x1e>
     USBD_CtlError(pdev , req);
 80035c2:	f7ff fed4 	bl	800336e <USBD_CtlError>
}
 80035c6:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 80035c8:	4601      	mov	r1, r0
 80035ca:	2300      	movs	r3, #0
 80035cc:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 80035d0:	2201      	movs	r2, #1
 80035d2:	f000 f91d 	bl	8003810 <USBD_CtlSendData>
      break;
 80035d6:	e7f6      	b.n	80035c6 <USBD_GetConfig+0x1e>
      USBD_CtlSendData (pdev, 
 80035d8:	2201      	movs	r2, #1
 80035da:	1d01      	adds	r1, r0, #4
 80035dc:	f000 f918 	bl	8003810 <USBD_CtlSendData>
      break;
 80035e0:	e7f1      	b.n	80035c6 <USBD_GetConfig+0x1e>

080035e2 <USBD_GetStatus>:
{
 80035e2:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 80035e4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80035e8:	3b02      	subs	r3, #2
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d80c      	bhi.n	8003608 <USBD_GetStatus+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80035ee:	2301      	movs	r3, #1
 80035f0:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80035f2:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80035f6:	b10b      	cbz	r3, 80035fc <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80035f8:	2303      	movs	r3, #3
 80035fa:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80035fc:	2202      	movs	r2, #2
 80035fe:	f100 010c 	add.w	r1, r0, #12
 8003602:	f000 f905 	bl	8003810 <USBD_CtlSendData>
}
 8003606:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 8003608:	f7ff feb1 	bl	800336e <USBD_CtlError>
}
 800360c:	e7fb      	b.n	8003606 <USBD_GetStatus+0x24>

0800360e <USBD_ClrFeature>:
{
 800360e:	b510      	push	{r4, lr}
 8003610:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 8003612:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003616:	3b02      	subs	r3, #2
 8003618:	2b01      	cmp	r3, #1
 800361a:	d80d      	bhi.n	8003638 <USBD_ClrFeature+0x2a>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800361c:	884b      	ldrh	r3, [r1, #2]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d109      	bne.n	8003636 <USBD_ClrFeature+0x28>
      pdev->dev_remote_wakeup = 0; 
 8003622:	2300      	movs	r3, #0
 8003624:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003628:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003630:	4620      	mov	r0, r4
 8003632:	f000 f919 	bl	8003868 <USBD_CtlSendStatus>
}
 8003636:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 8003638:	f7ff fe99 	bl	800336e <USBD_CtlError>
}
 800363c:	e7fb      	b.n	8003636 <USBD_ClrFeature+0x28>

0800363e <USBD_StdDevReq>:
{
 800363e:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 8003640:	784b      	ldrb	r3, [r1, #1]
 8003642:	2b09      	cmp	r3, #9
 8003644:	d81c      	bhi.n	8003680 <USBD_StdDevReq+0x42>
 8003646:	e8df f003 	tbb	[pc, r3]
 800364a:	1812      	.short	0x1812
 800364c:	091b151b 	.word	0x091b151b
 8003650:	0c0f1b05 	.word	0x0c0f1b05
    USBD_GetDescriptor (pdev, req) ;
 8003654:	f7ff fe95 	bl	8003382 <USBD_GetDescriptor>
}
 8003658:	2000      	movs	r0, #0
 800365a:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 800365c:	f7ff ff2d 	bl	80034ba <USBD_SetAddress>
    break;
 8003660:	e7fa      	b.n	8003658 <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 8003662:	f7ff ff4f 	bl	8003504 <USBD_SetConfig>
    break;
 8003666:	e7f7      	b.n	8003658 <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 8003668:	f7ff ff9e 	bl	80035a8 <USBD_GetConfig>
    break;
 800366c:	e7f4      	b.n	8003658 <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 800366e:	f7ff ffb8 	bl	80035e2 <USBD_GetStatus>
    break;
 8003672:	e7f1      	b.n	8003658 <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 8003674:	f7ff fe57 	bl	8003326 <USBD_SetFeature>
    break;
 8003678:	e7ee      	b.n	8003658 <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 800367a:	f7ff ffc8 	bl	800360e <USBD_ClrFeature>
    break;
 800367e:	e7eb      	b.n	8003658 <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 8003680:	f7ff fe75 	bl	800336e <USBD_CtlError>
    break;
 8003684:	e7e8      	b.n	8003658 <USBD_StdDevReq+0x1a>

08003686 <USBD_StdItfReq>:
{
 8003686:	b538      	push	{r3, r4, r5, lr}
 8003688:	4604      	mov	r4, r0
 800368a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800368c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003690:	2b03      	cmp	r3, #3
 8003692:	d111      	bne.n	80036b8 <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003694:	790b      	ldrb	r3, [r1, #4]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d80b      	bhi.n	80036b2 <USBD_StdItfReq+0x2c>
      pdev->pClass->Setup (pdev, req); 
 800369a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80036a2:	88eb      	ldrh	r3, [r5, #6]
 80036a4:	b10b      	cbz	r3, 80036aa <USBD_StdItfReq+0x24>
}
 80036a6:	2000      	movs	r0, #0
 80036a8:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 80036aa:	4620      	mov	r0, r4
 80036ac:	f000 f8dc 	bl	8003868 <USBD_CtlSendStatus>
 80036b0:	e7f9      	b.n	80036a6 <USBD_StdItfReq+0x20>
       USBD_CtlError(pdev , req);
 80036b2:	f7ff fe5c 	bl	800336e <USBD_CtlError>
 80036b6:	e7f6      	b.n	80036a6 <USBD_StdItfReq+0x20>
     USBD_CtlError(pdev , req);
 80036b8:	f7ff fe59 	bl	800336e <USBD_CtlError>
    break;
 80036bc:	e7f3      	b.n	80036a6 <USBD_StdItfReq+0x20>

080036be <USBD_StdEPReq>:
{
 80036be:	b538      	push	{r3, r4, r5, lr}
 80036c0:	4605      	mov	r5, r0
 80036c2:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80036c4:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80036c6:	780b      	ldrb	r3, [r1, #0]
 80036c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d105      	bne.n	80036dc <USBD_StdEPReq+0x1e>
    pdev->pClass->Setup (pdev, req);
 80036d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4798      	blx	r3
}
 80036d8:	2000      	movs	r0, #0
 80036da:	bd38      	pop	{r3, r4, r5, pc}
 80036dc:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 80036de:	7863      	ldrb	r3, [r4, #1]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d025      	beq.n	8003730 <USBD_StdEPReq+0x72>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d047      	beq.n	8003778 <USBD_StdEPReq+0xba>
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d1f5      	bne.n	80036d8 <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 80036ec:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d005      	beq.n	8003700 <USBD_StdEPReq+0x42>
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d00a      	beq.n	800370e <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 80036f8:	4621      	mov	r1, r4
 80036fa:	f7ff fe38 	bl	800336e <USBD_CtlError>
      break;    
 80036fe:	e7eb      	b.n	80036d8 <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003700:	2900      	cmp	r1, #0
 8003702:	d0e9      	beq.n	80036d8 <USBD_StdEPReq+0x1a>
 8003704:	2980      	cmp	r1, #128	; 0x80
 8003706:	d0e7      	beq.n	80036d8 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8003708:	f000 fa6d 	bl	8003be6 <USBD_LL_StallEP>
 800370c:	e7e4      	b.n	80036d8 <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800370e:	8863      	ldrh	r3, [r4, #2]
 8003710:	b923      	cbnz	r3, 800371c <USBD_StdEPReq+0x5e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003712:	b119      	cbz	r1, 800371c <USBD_StdEPReq+0x5e>
 8003714:	2980      	cmp	r1, #128	; 0x80
 8003716:	d001      	beq.n	800371c <USBD_StdEPReq+0x5e>
          USBD_LL_StallEP(pdev , ep_addr);
 8003718:	f000 fa65 	bl	8003be6 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800371c:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4621      	mov	r1, r4
 8003724:	4628      	mov	r0, r5
 8003726:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003728:	4628      	mov	r0, r5
 800372a:	f000 f89d 	bl	8003868 <USBD_CtlSendStatus>
      break;
 800372e:	e7d3      	b.n	80036d8 <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 8003730:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003734:	2b02      	cmp	r3, #2
 8003736:	d005      	beq.n	8003744 <USBD_StdEPReq+0x86>
 8003738:	2b03      	cmp	r3, #3
 800373a:	d00a      	beq.n	8003752 <USBD_StdEPReq+0x94>
      USBD_CtlError(pdev , req);
 800373c:	4621      	mov	r1, r4
 800373e:	f7ff fe16 	bl	800336e <USBD_CtlError>
      break;    
 8003742:	e7c9      	b.n	80036d8 <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003744:	2900      	cmp	r1, #0
 8003746:	d0c7      	beq.n	80036d8 <USBD_StdEPReq+0x1a>
 8003748:	2980      	cmp	r1, #128	; 0x80
 800374a:	d0c5      	beq.n	80036d8 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 800374c:	f000 fa4b 	bl	8003be6 <USBD_LL_StallEP>
 8003750:	e7c2      	b.n	80036d8 <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003752:	8863      	ldrh	r3, [r4, #2]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1bf      	bne.n	80036d8 <USBD_StdEPReq+0x1a>
        if ((ep_addr & 0x7F) != 0x00) 
 8003758:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800375c:	d103      	bne.n	8003766 <USBD_StdEPReq+0xa8>
        USBD_CtlSendStatus(pdev);
 800375e:	4628      	mov	r0, r5
 8003760:	f000 f882 	bl	8003868 <USBD_CtlSendStatus>
 8003764:	e7b8      	b.n	80036d8 <USBD_StdEPReq+0x1a>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003766:	f000 fa46 	bl	8003bf6 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800376a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4621      	mov	r1, r4
 8003772:	4628      	mov	r0, r5
 8003774:	4798      	blx	r3
 8003776:	e7f2      	b.n	800375e <USBD_StdEPReq+0xa0>
    switch (pdev->dev_state) 
 8003778:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800377c:	2b02      	cmp	r3, #2
 800377e:	d005      	beq.n	800378c <USBD_StdEPReq+0xce>
 8003780:	2b03      	cmp	r3, #3
 8003782:	d009      	beq.n	8003798 <USBD_StdEPReq+0xda>
      USBD_CtlError(pdev , req);
 8003784:	4621      	mov	r1, r4
 8003786:	f7ff fdf2 	bl	800336e <USBD_CtlError>
      break;
 800378a:	e7a5      	b.n	80036d8 <USBD_StdEPReq+0x1a>
      if ((ep_addr & 0x7F) != 0x00) 
 800378c:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8003790:	d0a2      	beq.n	80036d8 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8003792:	f000 fa28 	bl	8003be6 <USBD_LL_StallEP>
 8003796:	e79f      	b.n	80036d8 <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003798:	f012 0f80 	tst.w	r2, #128	; 0x80
 800379c:	d111      	bne.n	80037c2 <USBD_StdEPReq+0x104>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800379e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80037a2:	3410      	adds	r4, #16
 80037a4:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 80037a8:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80037aa:	4628      	mov	r0, r5
 80037ac:	f000 fa2b 	bl	8003c06 <USBD_LL_IsStallEP>
 80037b0:	b170      	cbz	r0, 80037d0 <USBD_StdEPReq+0x112>
        pep->status = 0x0001;     
 80037b2:	2301      	movs	r3, #1
 80037b4:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 80037b6:	2202      	movs	r2, #2
 80037b8:	4621      	mov	r1, r4
 80037ba:	4628      	mov	r0, r5
 80037bc:	f000 f828 	bl	8003810 <USBD_CtlSendData>
      break;
 80037c0:	e78a      	b.n	80036d8 <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80037c2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80037c6:	3401      	adds	r4, #1
 80037c8:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 80037cc:	3404      	adds	r4, #4
 80037ce:	e7ec      	b.n	80037aa <USBD_StdEPReq+0xec>
        pep->status = 0x0000;  
 80037d0:	2300      	movs	r3, #0
 80037d2:	6023      	str	r3, [r4, #0]
 80037d4:	e7ef      	b.n	80037b6 <USBD_StdEPReq+0xf8>

080037d6 <USBD_GetString>:
  if (desc != NULL) 
 80037d6:	b1d0      	cbz	r0, 800380e <USBD_GetString+0x38>
{
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	460d      	mov	r5, r1
 80037dc:	4616      	mov	r6, r2
 80037de:	4604      	mov	r4, r0
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80037e0:	f7ff fd97 	bl	8003312 <USBD_GetLen>
 80037e4:	3001      	adds	r0, #1
 80037e6:	0040      	lsls	r0, r0, #1
 80037e8:	b280      	uxth	r0, r0
 80037ea:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 80037ec:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80037ee:	2303      	movs	r3, #3
 80037f0:	706b      	strb	r3, [r5, #1]
 80037f2:	2302      	movs	r3, #2
    while (*desc != '\0') 
 80037f4:	e007      	b.n	8003806 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 80037f6:	3401      	adds	r4, #1
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 80037fe:	3302      	adds	r3, #2
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2100      	movs	r1, #0
 8003804:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0') 
 8003806:	7821      	ldrb	r1, [r4, #0]
 8003808:	2900      	cmp	r1, #0
 800380a:	d1f4      	bne.n	80037f6 <USBD_GetString+0x20>
}
 800380c:	bd70      	pop	{r4, r5, r6, pc}
 800380e:	4770      	bx	lr

08003810 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003810:	b510      	push	{r4, lr}
 8003812:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003814:	2202      	movs	r2, #2
 8003816:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800381a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 800381c:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800381e:	460a      	mov	r2, r1
 8003820:	2100      	movs	r1, #0
 8003822:	f000 fa0b 	bl	8003c3c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003826:	2000      	movs	r0, #0
 8003828:	bd10      	pop	{r4, pc}

0800382a <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800382a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800382c:	4613      	mov	r3, r2
 800382e:	460a      	mov	r2, r1
 8003830:	2100      	movs	r1, #0
 8003832:	f000 fa03 	bl	8003c3c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003836:	2000      	movs	r0, #0
 8003838:	bd08      	pop	{r3, pc}

0800383a <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800383a:	b510      	push	{r4, lr}
 800383c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800383e:	2203      	movs	r2, #3
 8003840:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003844:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8003848:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800384c:	460a      	mov	r2, r1
 800384e:	2100      	movs	r1, #0
 8003850:	f000 f9fc 	bl	8003c4c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003854:	2000      	movs	r0, #0
 8003856:	bd10      	pop	{r4, pc}

08003858 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003858:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800385a:	4613      	mov	r3, r2
 800385c:	460a      	mov	r2, r1
 800385e:	2100      	movs	r1, #0
 8003860:	f000 f9f4 	bl	8003c4c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003864:	2000      	movs	r0, #0
 8003866:	bd08      	pop	{r3, pc}

08003868 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003868:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800386a:	2304      	movs	r3, #4
 800386c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003870:	2300      	movs	r3, #0
 8003872:	461a      	mov	r2, r3
 8003874:	4619      	mov	r1, r3
 8003876:	f000 f9e1 	bl	8003c3c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800387a:	2000      	movs	r0, #0
 800387c:	bd08      	pop	{r3, pc}

0800387e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800387e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003880:	2305      	movs	r3, #5
 8003882:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003886:	2300      	movs	r3, #0
 8003888:	461a      	mov	r2, r3
 800388a:	4619      	mov	r1, r3
 800388c:	f000 f9de 	bl	8003c4c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003890:	2000      	movs	r0, #0
 8003892:	bd08      	pop	{r3, pc}

08003894 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003894:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003896:	2200      	movs	r2, #0
 8003898:	490f      	ldr	r1, [pc, #60]	; (80038d8 <MX_USB_DEVICE_Init+0x44>)
 800389a:	4810      	ldr	r0, [pc, #64]	; (80038dc <MX_USB_DEVICE_Init+0x48>)
 800389c:	f7ff fbfd 	bl	800309a <USBD_Init>
 80038a0:	b970      	cbnz	r0, 80038c0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 80038a2:	490f      	ldr	r1, [pc, #60]	; (80038e0 <MX_USB_DEVICE_Init+0x4c>)
 80038a4:	480d      	ldr	r0, [pc, #52]	; (80038dc <MX_USB_DEVICE_Init+0x48>)
 80038a6:	f7ff fc0f 	bl	80030c8 <USBD_RegisterClass>
 80038aa:	b960      	cbnz	r0, 80038c6 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 80038ac:	490d      	ldr	r1, [pc, #52]	; (80038e4 <MX_USB_DEVICE_Init+0x50>)
 80038ae:	480b      	ldr	r0, [pc, #44]	; (80038dc <MX_USB_DEVICE_Init+0x48>)
 80038b0:	f7ff fbee 	bl	8003090 <USBD_DFU_RegisterMedia>
 80038b4:	b950      	cbnz	r0, 80038cc <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80038b6:	4809      	ldr	r0, [pc, #36]	; (80038dc <MX_USB_DEVICE_Init+0x48>)
 80038b8:	f7ff fc0d 	bl	80030d6 <USBD_Start>
 80038bc:	b948      	cbnz	r0, 80038d2 <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80038be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80038c0:	f7fc fd7e 	bl	80003c0 <Error_Handler>
 80038c4:	e7ed      	b.n	80038a2 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80038c6:	f7fc fd7b 	bl	80003c0 <Error_Handler>
 80038ca:	e7ef      	b.n	80038ac <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80038cc:	f7fc fd78 	bl	80003c0 <Error_Handler>
 80038d0:	e7f1      	b.n	80038b6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80038d2:	f7fc fd75 	bl	80003c0 <Error_Handler>
}
 80038d6:	e7f2      	b.n	80038be <MX_USB_DEVICE_Init+0x2a>
 80038d8:	20000090 	.word	0x20000090
 80038dc:	20000e78 	.word	0x20000e78
 80038e0:	2000002c 	.word	0x2000002c
 80038e4:	200000e0 	.word	0x200000e0

080038e8 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80038e8:	2312      	movs	r3, #18
 80038ea:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80038ec:	4800      	ldr	r0, [pc, #0]	; (80038f0 <USBD_FS_DeviceDescriptor+0x8>)
 80038ee:	4770      	bx	lr
 80038f0:	200000ac 	.word	0x200000ac

080038f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 80038f4:	2304      	movs	r3, #4
 80038f6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80038f8:	4800      	ldr	r0, [pc, #0]	; (80038fc <USBD_FS_LangIDStrDescriptor+0x8>)
 80038fa:	4770      	bx	lr
 80038fc:	200000c0 	.word	0x200000c0

08003900 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003900:	2300      	movs	r3, #0
 8003902:	4293      	cmp	r3, r2
 8003904:	d216      	bcs.n	8003934 <IntToUnicode+0x34>
{
 8003906:	b430      	push	{r4, r5}
 8003908:	e00b      	b.n	8003922 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800390a:	3437      	adds	r4, #55	; 0x37
 800390c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8003910:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8003912:	005c      	lsls	r4, r3, #1
 8003914:	3401      	adds	r4, #1
 8003916:	2500      	movs	r5, #0
 8003918:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800391a:	3301      	adds	r3, #1
 800391c:	b2db      	uxtb	r3, r3
 800391e:	4293      	cmp	r3, r2
 8003920:	d206      	bcs.n	8003930 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 8003922:	0f04      	lsrs	r4, r0, #28
 8003924:	2c09      	cmp	r4, #9
 8003926:	d8f0      	bhi.n	800390a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8003928:	3430      	adds	r4, #48	; 0x30
 800392a:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800392e:	e7ef      	b.n	8003910 <IntToUnicode+0x10>
  }
}
 8003930:	bc30      	pop	{r4, r5}
 8003932:	4770      	bx	lr
 8003934:	4770      	bx	lr
	...

08003938 <Get_SerialNum>:
{
 8003938:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <Get_SerialNum+0x2c>)
 800393c:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800393e:	3304      	adds	r3, #4
 8003940:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003942:	3304      	adds	r3, #4
 8003944:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003946:	18c0      	adds	r0, r0, r3
 8003948:	d100      	bne.n	800394c <Get_SerialNum+0x14>
}
 800394a:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800394c:	4d06      	ldr	r5, [pc, #24]	; (8003968 <Get_SerialNum+0x30>)
 800394e:	2208      	movs	r2, #8
 8003950:	1ca9      	adds	r1, r5, #2
 8003952:	f7ff ffd5 	bl	8003900 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003956:	2204      	movs	r2, #4
 8003958:	f105 0112 	add.w	r1, r5, #18
 800395c:	4620      	mov	r0, r4
 800395e:	f7ff ffcf 	bl	8003900 <IntToUnicode>
}
 8003962:	e7f2      	b.n	800394a <Get_SerialNum+0x12>
 8003964:	1ffff7e8 	.word	0x1ffff7e8
 8003968:	200000c4 	.word	0x200000c4

0800396c <USBD_FS_SerialStrDescriptor>:
{
 800396c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800396e:	231a      	movs	r3, #26
 8003970:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8003972:	f7ff ffe1 	bl	8003938 <Get_SerialNum>
}
 8003976:	4801      	ldr	r0, [pc, #4]	; (800397c <USBD_FS_SerialStrDescriptor+0x10>)
 8003978:	bd08      	pop	{r3, pc}
 800397a:	bf00      	nop
 800397c:	200000c4 	.word	0x200000c4

08003980 <USBD_FS_ProductStrDescriptor>:
{
 8003980:	b508      	push	{r3, lr}
 8003982:	460a      	mov	r2, r1
  if(speed == 0)
 8003984:	b128      	cbz	r0, 8003992 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003986:	4905      	ldr	r1, [pc, #20]	; (800399c <USBD_FS_ProductStrDescriptor+0x1c>)
 8003988:	4805      	ldr	r0, [pc, #20]	; (80039a0 <USBD_FS_ProductStrDescriptor+0x20>)
 800398a:	f7ff ff24 	bl	80037d6 <USBD_GetString>
}
 800398e:	4803      	ldr	r0, [pc, #12]	; (800399c <USBD_FS_ProductStrDescriptor+0x1c>)
 8003990:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003992:	4902      	ldr	r1, [pc, #8]	; (800399c <USBD_FS_ProductStrDescriptor+0x1c>)
 8003994:	4802      	ldr	r0, [pc, #8]	; (80039a0 <USBD_FS_ProductStrDescriptor+0x20>)
 8003996:	f7ff ff1e 	bl	80037d6 <USBD_GetString>
 800399a:	e7f8      	b.n	800398e <USBD_FS_ProductStrDescriptor+0xe>
 800399c:	2000109c 	.word	0x2000109c
 80039a0:	08003d4c 	.word	0x08003d4c

080039a4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80039a4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80039a6:	4c04      	ldr	r4, [pc, #16]	; (80039b8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80039a8:	460a      	mov	r2, r1
 80039aa:	4621      	mov	r1, r4
 80039ac:	4803      	ldr	r0, [pc, #12]	; (80039bc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80039ae:	f7ff ff12 	bl	80037d6 <USBD_GetString>
}
 80039b2:	4620      	mov	r0, r4
 80039b4:	bd10      	pop	{r4, pc}
 80039b6:	bf00      	nop
 80039b8:	2000109c 	.word	0x2000109c
 80039bc:	08003d38 	.word	0x08003d38

080039c0 <USBD_FS_ConfigStrDescriptor>:
{
 80039c0:	b508      	push	{r3, lr}
 80039c2:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80039c4:	b128      	cbz	r0, 80039d2 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80039c6:	4905      	ldr	r1, [pc, #20]	; (80039dc <USBD_FS_ConfigStrDescriptor+0x1c>)
 80039c8:	4805      	ldr	r0, [pc, #20]	; (80039e0 <USBD_FS_ConfigStrDescriptor+0x20>)
 80039ca:	f7ff ff04 	bl	80037d6 <USBD_GetString>
}
 80039ce:	4803      	ldr	r0, [pc, #12]	; (80039dc <USBD_FS_ConfigStrDescriptor+0x1c>)
 80039d0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80039d2:	4902      	ldr	r1, [pc, #8]	; (80039dc <USBD_FS_ConfigStrDescriptor+0x1c>)
 80039d4:	4802      	ldr	r0, [pc, #8]	; (80039e0 <USBD_FS_ConfigStrDescriptor+0x20>)
 80039d6:	f7ff fefe 	bl	80037d6 <USBD_GetString>
 80039da:	e7f8      	b.n	80039ce <USBD_FS_ConfigStrDescriptor+0xe>
 80039dc:	2000109c 	.word	0x2000109c
 80039e0:	08003d1c 	.word	0x08003d1c

080039e4 <USBD_FS_InterfaceStrDescriptor>:
{
 80039e4:	b508      	push	{r3, lr}
 80039e6:	460a      	mov	r2, r1
  if(speed == 0)
 80039e8:	b128      	cbz	r0, 80039f6 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80039ea:	4905      	ldr	r1, [pc, #20]	; (8003a00 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80039ec:	4805      	ldr	r0, [pc, #20]	; (8003a04 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80039ee:	f7ff fef2 	bl	80037d6 <USBD_GetString>
}
 80039f2:	4803      	ldr	r0, [pc, #12]	; (8003a00 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80039f4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80039f6:	4902      	ldr	r1, [pc, #8]	; (8003a00 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80039fa:	f7ff feec 	bl	80037d6 <USBD_GetString>
 80039fe:	e7f8      	b.n	80039f2 <USBD_FS_InterfaceStrDescriptor+0xe>
 8003a00:	2000109c 	.word	0x2000109c
 8003a04:	08003d28 	.word	0x08003d28

08003a08 <MEM_If_Init_FS>:
uint16_t MEM_If_Init_FS(void)
{
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
  /* USER CODE END 0 */
}
 8003a08:	2000      	movs	r0, #0
 8003a0a:	4770      	bx	lr

08003a0c <MEM_If_DeInit_FS>:
uint16_t MEM_If_DeInit_FS(void)
{
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
  /* USER CODE END 1 */
}
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	4770      	bx	lr

08003a10 <MEM_If_Read_FS>:
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  for (int i=0; i<Len; i++)
 8003a10:	2300      	movs	r3, #0
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d208      	bcs.n	8003a28 <MEM_If_Read_FS+0x18>
{
 8003a16:	b410      	push	{r4}
  {
    dest[i] = src[i];
 8003a18:	5cc4      	ldrb	r4, [r0, r3]
 8003a1a:	54cc      	strb	r4, [r1, r3]
  for (int i=0; i<Len; i++)
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d3fa      	bcc.n	8003a18 <MEM_If_Read_FS+0x8>
  }
  return (uint8_t*)(dest);
  /* USER CODE END 4 */
}
 8003a22:	4608      	mov	r0, r1
 8003a24:	bc10      	pop	{r4}
 8003a26:	4770      	bx	lr
 8003a28:	4608      	mov	r0, r1
 8003a2a:	4770      	bx	lr

08003a2c <MEM_If_GetStatus_FS>:
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8003a2c:	b141      	cbz	r1, 8003a40 <MEM_If_GetStatus_FS+0x14>
 8003a2e:	2901      	cmp	r1, #1
 8003a30:	d104      	bne.n	8003a3c <MEM_If_GetStatus_FS+0x10>
  {
    case DFU_MEDIA_PROGRAM:
      buffer[1] = (50 >> 0);
 8003a32:	2332      	movs	r3, #50	; 0x32
 8003a34:	7053      	strb	r3, [r2, #1]
      buffer[2] = (50 >> 8);
 8003a36:	2300      	movs	r3, #0
 8003a38:	7093      	strb	r3, [r2, #2]
      buffer[3] = 0;
 8003a3a:	70d3      	strb	r3, [r2, #3]

    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	4770      	bx	lr
      buffer[1] = (50 >> 0);
 8003a40:	2332      	movs	r3, #50	; 0x32
 8003a42:	7053      	strb	r3, [r2, #1]
      buffer[2] = (50 >> 8);
 8003a44:	2300      	movs	r3, #0
 8003a46:	7093      	strb	r3, [r2, #2]
      buffer[3] = 0;
 8003a48:	70d3      	strb	r3, [r2, #3]
 8003a4a:	e7f7      	b.n	8003a3c <MEM_If_GetStatus_FS+0x10>

08003a4c <MEM_If_Write_FS>:
{
 8003a4c:	b508      	push	{r3, lr}
 8003a4e:	460b      	mov	r3, r1
  if (flashWrite((uint32_t)dest, src, Len) != true)
 8003a50:	4601      	mov	r1, r0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fc fdae 	bl	80005b4 <flashWrite>
 8003a58:	b108      	cbz	r0, 8003a5e <MEM_If_Write_FS+0x12>
  return (USBD_OK);
 8003a5a:	2000      	movs	r0, #0
}
 8003a5c:	bd08      	pop	{r3, pc}
    return 1;
 8003a5e:	2001      	movs	r0, #1
 8003a60:	e7fc      	b.n	8003a5c <MEM_If_Write_FS+0x10>

08003a62 <MEM_If_Erase_FS>:
{
 8003a62:	b508      	push	{r3, lr}
  if (flashErase(Add, 2048) != true)
 8003a64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a68:	f7fc fd6a 	bl	8000540 <flashErase>
 8003a6c:	b108      	cbz	r0, 8003a72 <MEM_If_Erase_FS+0x10>
  return (USBD_OK);
 8003a6e:	2000      	movs	r0, #0
}
 8003a70:	bd08      	pop	{r3, pc}
    return 1;
 8003a72:	2001      	movs	r0, #1
 8003a74:	e7fc      	b.n	8003a70 <MEM_If_Erase_FS+0xe>

08003a76 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003a76:	b118      	cbz	r0, 8003a80 <USBD_Get_USB_Status+0xa>
 8003a78:	2802      	cmp	r0, #2
 8003a7a:	d003      	beq.n	8003a84 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8003a7c:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003a7e:	4770      	bx	lr
      usb_status = USBD_OK;
 8003a80:	2000      	movs	r0, #0
 8003a82:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8003a84:	2001      	movs	r0, #1
    break;
 8003a86:	4770      	bx	lr

08003a88 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8003a88:	6802      	ldr	r2, [r0, #0]
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_PCD_MspInit+0x3c>)
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d000      	beq.n	8003a92 <HAL_PCD_MspInit+0xa>
 8003a90:	4770      	bx	lr
{
 8003a92:	b500      	push	{lr}
 8003a94:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8003a96:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003aa0:	61da      	str	r2, [r3, #28]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003aac:	2200      	movs	r2, #0
 8003aae:	4611      	mov	r1, r2
 8003ab0:	2014      	movs	r0, #20
 8003ab2:	f7fc ff49 	bl	8000948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003ab6:	2014      	movs	r0, #20
 8003ab8:	f7fc ff7a 	bl	80009b0 <HAL_NVIC_EnableIRQ>
}
 8003abc:	b003      	add	sp, #12
 8003abe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ac2:	bf00      	nop
 8003ac4:	40005c00 	.word	0x40005c00

08003ac8 <HAL_PCD_SetupStageCallback>:
{
 8003ac8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003aca:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8003ace:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003ad2:	f7ff fb25 	bl	8003120 <USBD_LL_SetupStage>
}
 8003ad6:	bd08      	pop	{r3, pc}

08003ad8 <HAL_PCD_DataOutStageCallback>:
{
 8003ad8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003ada:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003ade:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8003ae2:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003ae6:	f7ff fb48 	bl	800317a <USBD_LL_DataOutStage>
}
 8003aea:	bd08      	pop	{r3, pc}

08003aec <HAL_PCD_DataInStageCallback>:
{
 8003aec:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003aee:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af4:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003af8:	f7ff fb74 	bl	80031e4 <USBD_LL_DataInStage>
}
 8003afc:	bd08      	pop	{r3, pc}

08003afe <HAL_PCD_SOFCallback>:
{
 8003afe:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003b00:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003b04:	f7ff fbf7 	bl	80032f6 <USBD_LL_SOF>
}
 8003b08:	bd08      	pop	{r3, pc}

08003b0a <HAL_PCD_ResetCallback>:
{ 
 8003b0a:	b510      	push	{r4, lr}
 8003b0c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003b0e:	6883      	ldr	r3, [r0, #8]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d001      	beq.n	8003b18 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8003b14:	f7fc fc54 	bl	80003c0 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003b18:	2101      	movs	r1, #1
 8003b1a:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 8003b1e:	f7ff fbd8 	bl	80032d2 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003b22:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 8003b26:	f7ff fbb5 	bl	8003294 <USBD_LL_Reset>
}
 8003b2a:	bd10      	pop	{r4, pc}

08003b2c <HAL_PCD_SuspendCallback>:
{
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003b30:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003b34:	f7ff fbd0 	bl	80032d8 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8003b38:	69a3      	ldr	r3, [r4, #24]
 8003b3a:	b123      	cbz	r3, 8003b46 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003b3c:	4a02      	ldr	r2, [pc, #8]	; (8003b48 <HAL_PCD_SuspendCallback+0x1c>)
 8003b3e:	6913      	ldr	r3, [r2, #16]
 8003b40:	f043 0306 	orr.w	r3, r3, #6
 8003b44:	6113      	str	r3, [r2, #16]
}
 8003b46:	bd10      	pop	{r4, pc}
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <HAL_PCD_ResumeCallback>:
{
 8003b4c:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003b4e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003b52:	f7ff fbca 	bl	80032ea <USBD_LL_Resume>
}
 8003b56:	bd08      	pop	{r3, pc}

08003b58 <USBD_LL_Init>:
{
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003b5c:	4812      	ldr	r0, [pc, #72]	; (8003ba8 <USBD_LL_Init+0x50>)
 8003b5e:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8003b62:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Instance = USB;
 8003b66:	4b11      	ldr	r3, [pc, #68]	; (8003bac <USBD_LL_Init+0x54>)
 8003b68:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003b6a:	2308      	movs	r3, #8
 8003b6c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003b76:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003b78:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003b7a:	f7fd f9a3 	bl	8000ec4 <HAL_PCD_Init>
 8003b7e:	b978      	cbnz	r0, 8003ba0 <USBD_LL_Init+0x48>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003b80:	2318      	movs	r3, #24
 8003b82:	2200      	movs	r2, #0
 8003b84:	4611      	mov	r1, r2
 8003b86:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003b8a:	f7fd fdd6 	bl	800173a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003b8e:	2358      	movs	r3, #88	; 0x58
 8003b90:	2200      	movs	r2, #0
 8003b92:	2180      	movs	r1, #128	; 0x80
 8003b94:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003b98:	f7fd fdcf 	bl	800173a <HAL_PCDEx_PMAConfig>
}
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8003ba0:	f7fc fc0e 	bl	80003c0 <Error_Handler>
 8003ba4:	e7ec      	b.n	8003b80 <USBD_LL_Init+0x28>
 8003ba6:	bf00      	nop
 8003ba8:	2000129c 	.word	0x2000129c
 8003bac:	40005c00 	.word	0x40005c00

08003bb0 <USBD_LL_Start>:
{
 8003bb0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003bb2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003bb6:	f7fd f9f0 	bl	8000f9a <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bba:	f7ff ff5c 	bl	8003a76 <USBD_Get_USB_Status>
}
 8003bbe:	bd08      	pop	{r3, pc}

08003bc0 <USBD_LL_Stop>:
{
 8003bc0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8003bc2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003bc6:	f7fd f9ff 	bl	8000fc8 <HAL_PCD_Stop>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bca:	f7ff ff54 	bl	8003a76 <USBD_Get_USB_Status>
}
 8003bce:	bd08      	pop	{r3, pc}

08003bd0 <USBD_LL_OpenEP>:
{
 8003bd0:	b510      	push	{r4, lr}
 8003bd2:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003bdc:	f7fd fa20 	bl	8001020 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003be0:	f7ff ff49 	bl	8003a76 <USBD_Get_USB_Status>
}
 8003be4:	bd10      	pop	{r4, pc}

08003be6 <USBD_LL_StallEP>:
{
 8003be6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003be8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003bec:	f7fd fd50 	bl	8001690 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bf0:	f7ff ff41 	bl	8003a76 <USBD_Get_USB_Status>
}
 8003bf4:	bd08      	pop	{r3, pc}

08003bf6 <USBD_LL_ClearStallEP>:
{
 8003bf6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003bf8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003bfc:	f7fd fd76 	bl	80016ec <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c00:	f7ff ff39 	bl	8003a76 <USBD_Get_USB_Status>
}
 8003c04:	bd08      	pop	{r3, pc}

08003c06 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003c06:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 8003c0a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003c0e:	d106      	bne.n	8003c1e <USBD_LL_IsStallEP+0x18>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003c10:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003c14:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8003c18:	f891 022a 	ldrb.w	r0, [r1, #554]	; 0x22a
}
 8003c1c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003c1e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003c22:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8003c26:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 8003c2a:	4770      	bx	lr

08003c2c <USBD_LL_SetUSBAddress>:
{
 8003c2c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003c2e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003c32:	f7fd f9e1 	bl	8000ff8 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c36:	f7ff ff1e 	bl	8003a76 <USBD_Get_USB_Status>
}
 8003c3a:	bd08      	pop	{r3, pc}

08003c3c <USBD_LL_Transmit>:
{
 8003c3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003c3e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003c42:	f7fd fa35 	bl	80010b0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c46:	f7ff ff16 	bl	8003a76 <USBD_Get_USB_Status>
}
 8003c4a:	bd08      	pop	{r3, pc}

08003c4c <USBD_LL_PrepareReceive>:
{
 8003c4c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003c4e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003c52:	f7fd fa0e 	bl	8001072 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c56:	f7ff ff0e 	bl	8003a76 <USBD_Get_USB_Status>
}
 8003c5a:	bd08      	pop	{r3, pc}

08003c5c <USBD_static_malloc>:
}
 8003c5c:	4800      	ldr	r0, [pc, #0]	; (8003c60 <USBD_static_malloc+0x4>)
 8003c5e:	4770      	bx	lr
 8003c60:	20000a20 	.word	0x20000a20

08003c64 <USBD_static_free>:
}
 8003c64:	4770      	bx	lr

08003c66 <HAL_PCDEx_SetConnectionState>:
}
 8003c66:	4770      	bx	lr

08003c68 <main>:
 */

#include "main.h"

int main(void)
{
 8003c68:	b508      	push	{r3, lr}
  hwInit();
 8003c6a:	f7fc fddd 	bl	8000828 <hwInit>
  apInit();
 8003c6e:	f7fc fad9 	bl	8000224 <apInit>

  apMain();
 8003c72:	f7fc fad8 	bl	8000226 <apMain>

  return 0;
}
 8003c76:	2000      	movs	r0, #0
 8003c78:	bd08      	pop	{r3, pc}
	...

08003c7c <__libc_init_array>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	2500      	movs	r5, #0
 8003c80:	4e0c      	ldr	r6, [pc, #48]	; (8003cb4 <__libc_init_array+0x38>)
 8003c82:	4c0d      	ldr	r4, [pc, #52]	; (8003cb8 <__libc_init_array+0x3c>)
 8003c84:	1ba4      	subs	r4, r4, r6
 8003c86:	10a4      	asrs	r4, r4, #2
 8003c88:	42a5      	cmp	r5, r4
 8003c8a:	d109      	bne.n	8003ca0 <__libc_init_array+0x24>
 8003c8c:	f000 f81a 	bl	8003cc4 <_init>
 8003c90:	2500      	movs	r5, #0
 8003c92:	4e0a      	ldr	r6, [pc, #40]	; (8003cbc <__libc_init_array+0x40>)
 8003c94:	4c0a      	ldr	r4, [pc, #40]	; (8003cc0 <__libc_init_array+0x44>)
 8003c96:	1ba4      	subs	r4, r4, r6
 8003c98:	10a4      	asrs	r4, r4, #2
 8003c9a:	42a5      	cmp	r5, r4
 8003c9c:	d105      	bne.n	8003caa <__libc_init_array+0x2e>
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ca4:	4798      	blx	r3
 8003ca6:	3501      	adds	r5, #1
 8003ca8:	e7ee      	b.n	8003c88 <__libc_init_array+0xc>
 8003caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cae:	4798      	blx	r3
 8003cb0:	3501      	adds	r5, #1
 8003cb2:	e7f2      	b.n	8003c9a <__libc_init_array+0x1e>
 8003cb4:	08003d9c 	.word	0x08003d9c
 8003cb8:	08003d9c 	.word	0x08003d9c
 8003cbc:	08003d9c 	.word	0x08003d9c
 8003cc0:	08003da0 	.word	0x08003da0

08003cc4 <_init>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr

08003cd0 <_fini>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr
