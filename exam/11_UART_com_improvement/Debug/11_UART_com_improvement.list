
11_UART_com_improvement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007648  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b4  080078b4  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  080078b4  080078b4  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078b4  080078b4  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  080078bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001664  200001a8  08007a64  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000180c  08007a64  0002180c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021341  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d9d  00000000  00000000  00041512  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  000462b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  00047388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c2b8  00000000  00000000  00048238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000191da  00000000  00000000  000644f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dae3  00000000  00000000  0007d6ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb1ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b4  00000000  00000000  000fb228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001a8 	.word	0x200001a8
 8000200:	00000000 	.word	0x00000000
 8000204:	08007814 	.word	0x08007814

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001ac 	.word	0x200001ac
 8000220:	08007814 	.word	0x08007814

08000224 <apInit>:
extern uint8_t cdcRead(void);
extern void cdcDataIn(uint8_t rx_data);
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);

void apInit(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);  // USB
 8000228:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800022c:	2000      	movs	r0, #0
 800022e:	f000 fbdf 	bl	80009f0 <uartOpen>
  uartOpen(_DEF_UART2, 57600);  // UART1
 8000232:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000236:	2001      	movs	r0, #1
 8000238:	f000 fbda 	bl	80009f0 <uartOpen>
}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}

08000240 <apMain>:

void apMain(void)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b0a5      	sub	sp, #148	; 0x94
 8000244:	af00      	add	r7, sp, #0
  uint32_t pre_time;
  uint8_t rx_buf[128];
  uint32_t rx_len;

  pre_time = millis();
 8000246:	f000 f89c 	bl	8000382 <millis>
 800024a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

  while(1)
  {
    if(millis()-pre_time >= 500)
 800024e:	f000 f898 	bl	8000382 <millis>
 8000252:	4602      	mov	r2, r0
 8000254:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000258:	1ad3      	subs	r3, r2, r3
 800025a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800025e:	d306      	bcc.n	800026e <apMain+0x2e>
    {
      pre_time = millis();
 8000260:	f000 f88f 	bl	8000382 <millis>
 8000264:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
      ledToggle(_DEF_LED3);
 8000268:	2002      	movs	r0, #2
 800026a:	f000 faeb 	bl	8000844 <ledToggle>

      //uartPrintf(_DEF_UART2, "Uart1 %d \n", millis());
    }

    if(uartGetBaud(_DEF_UART1) != uartGetBaud(_DEF_UART2))
 800026e:	2000      	movs	r0, #0
 8000270:	f000 fcd4 	bl	8000c1c <uartGetBaud>
 8000274:	4604      	mov	r4, r0
 8000276:	2001      	movs	r0, #1
 8000278:	f000 fcd0 	bl	8000c1c <uartGetBaud>
 800027c:	4603      	mov	r3, r0
 800027e:	429c      	cmp	r4, r3
 8000280:	d007      	beq.n	8000292 <apMain+0x52>
    {
      uartOpen(_DEF_UART2, uartGetBaud(_DEF_UART1));
 8000282:	2000      	movs	r0, #0
 8000284:	f000 fcca 	bl	8000c1c <uartGetBaud>
 8000288:	4603      	mov	r3, r0
 800028a:	4619      	mov	r1, r3
 800028c:	2001      	movs	r0, #1
 800028e:	f000 fbaf 	bl	80009f0 <uartOpen>
    }

    // USB -> UART
    rx_len = uartAvailable(_DEF_UART1);
 8000292:	2000      	movs	r0, #0
 8000294:	f000 fc42 	bl	8000b1c <uartAvailable>
 8000298:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    if(rx_len > 128)
 800029c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80002a0:	2b80      	cmp	r3, #128	; 0x80
 80002a2:	d902      	bls.n	80002aa <apMain+0x6a>
    {
      rx_len = 128;
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    if(rx_len > 0)
 80002aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d020      	beq.n	80002f4 <apMain+0xb4>
    {
      for(int i=0; i<rx_len; i++)
 80002b2:	2300      	movs	r3, #0
 80002b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80002b8:	e00f      	b.n	80002da <apMain+0x9a>
      {
        rx_buf[i] = uartRead(_DEF_UART1);
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 fc60 	bl	8000b80 <uartRead>
 80002c0:	4603      	mov	r3, r0
 80002c2:	4619      	mov	r1, r3
 80002c4:	463a      	mov	r2, r7
 80002c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80002ca:	4413      	add	r3, r2
 80002cc:	460a      	mov	r2, r1
 80002ce:	701a      	strb	r2, [r3, #0]
      for(int i=0; i<rx_len; i++)
 80002d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80002d4:	3301      	adds	r3, #1
 80002d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80002da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80002de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d8e9      	bhi.n	80002ba <apMain+0x7a>
      }
      uartWrite(_DEF_UART2, rx_buf, rx_len);
 80002e6:	463b      	mov	r3, r7
 80002e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80002ec:	4619      	mov	r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 fc68 	bl	8000bc4 <uartWrite>
    }

    // UART -> USB
    rx_len = uartAvailable(_DEF_UART2);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 fc11 	bl	8000b1c <uartAvailable>
 80002fa:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    if(rx_len > 128)
 80002fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000302:	2b80      	cmp	r3, #128	; 0x80
 8000304:	d902      	bls.n	800030c <apMain+0xcc>
    {
      rx_len = 128;
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    if(rx_len > 0)
 800030c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000310:	2b00      	cmp	r3, #0
 8000312:	d09c      	beq.n	800024e <apMain+0xe>
    {
      for(int i=0; i<rx_len; i++)
 8000314:	2300      	movs	r3, #0
 8000316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800031a:	e00f      	b.n	800033c <apMain+0xfc>
      {
        rx_buf[i] = uartRead(_DEF_UART2);
 800031c:	2001      	movs	r0, #1
 800031e:	f000 fc2f 	bl	8000b80 <uartRead>
 8000322:	4603      	mov	r3, r0
 8000324:	4619      	mov	r1, r3
 8000326:	463a      	mov	r2, r7
 8000328:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800032c:	4413      	add	r3, r2
 800032e:	460a      	mov	r2, r1
 8000330:	701a      	strb	r2, [r3, #0]
      for(int i=0; i<rx_len; i++)
 8000332:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000336:	3301      	adds	r3, #1
 8000338:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800033c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000340:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000344:	429a      	cmp	r2, r3
 8000346:	d8e9      	bhi.n	800031c <apMain+0xdc>
      }
      uartWrite(_DEF_UART1, rx_buf, rx_len);
 8000348:	463b      	mov	r3, r7
 800034a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800034e:	4619      	mov	r1, r3
 8000350:	2000      	movs	r0, #0
 8000352:	f000 fc37 	bl	8000bc4 <uartWrite>
    if(millis()-pre_time >= 500)
 8000356:	e77a      	b.n	800024e <apMain+0xe>

08000358 <bspInit>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


void bspInit(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  HAL_Init();
 800035c:	f000 fd6a 	bl	8000e34 <HAL_Init>

  SystemClock_Config();
 8000360:	f000 f816 	bl	8000390 <SystemClock_Config>

  MX_GPIO_Init();
 8000364:	f000 f876 	bl	8000454 <MX_GPIO_Init>

}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <delay>:

void delay(uint32_t ms)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 fdbf 	bl	8000ef8 <HAL_Delay>
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <millis>:

uint32_t millis(void)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000386:	f000 fdad 	bl	8000ee4 <HAL_GetTick>
 800038a:	4603      	mov	r3, r0
}
 800038c:	4618      	mov	r0, r3
 800038e:	bd80      	pop	{r7, pc}

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b096      	sub	sp, #88	; 0x58
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f007 fa30 	bl	8007804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	f107 031c 	add.w	r3, r7, #28
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]
 80003c2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80003c4:	2305      	movs	r3, #5
 80003c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80003d2:	2301      	movs	r3, #1
 80003d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d6:	2301      	movs	r3, #1
 80003d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003da:	2302      	movs	r3, #2
 80003dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 fd5e 	bl	8002eb0 <HAL_RCC_OscConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003fa:	f000 f86b 	bl	80004d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	230f      	movs	r3, #15
 8000400:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000402:	2302      	movs	r3, #2
 8000404:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800040e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	2102      	movs	r1, #2
 800041a:	4618      	mov	r0, r3
 800041c:	f002 ffac 	bl	8003378 <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000426:	f000 f855 	bl	80004d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800042a:	2311      	movs	r3, #17
 800042c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800042e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000432:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4618      	mov	r0, r3
 800043c:	f003 f95a 	bl	80036f4 <HAL_RCCEx_PeriphCLKConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000446:	f000 f845 	bl	80004d4 <Error_Handler>
  }
}
 800044a:	bf00      	nop
 800044c:	3758      	adds	r7, #88	; 0x58
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_GPIO_Init+0x78>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a17      	ldr	r2, [pc, #92]	; (80004cc <MX_GPIO_Init+0x78>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_GPIO_Init+0x78>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_GPIO_Init+0x78>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a11      	ldr	r2, [pc, #68]	; (80004cc <MX_GPIO_Init+0x78>)
 8000486:	f043 0304 	orr.w	r3, r3, #4
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_GPIO_Init+0x78>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0304 	and.w	r3, r3, #4
 8000494:	603b      	str	r3, [r7, #0]
 8000496:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800049e:	480c      	ldr	r0, [pc, #48]	; (80004d0 <MX_GPIO_Init+0x7c>)
 80004a0:	f001 fd7e 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 80004a4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80004a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4619      	mov	r1, r3
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_GPIO_Init+0x7c>)
 80004be:	f001 fb2f 	bl	8001b20 <HAL_GPIO_Init>
}
 80004c2:	bf00      	nop
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <HAL_MspInit+0x5c>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a14      	ldr	r2, [pc, #80]	; (800053c <HAL_MspInit+0x5c>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <HAL_MspInit+0x5c>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_MspInit+0x5c>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <HAL_MspInit+0x60>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <HAL_MspInit+0x60>)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40021000 	.word	0x40021000
 8000540:	40010000 	.word	0x40010000

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <HardFault_Handler+0x4>

08000556 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <MemManage_Handler+0x4>

0800055c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <BusFault_Handler+0x4>

08000562 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <UsageFault_Handler+0x4>

08000568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000590:	f000 fc96 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <DMA1_Channel5_IRQHandler+0x10>)
 800059e:	f001 f855 	bl	800164c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000530 	.word	0x20000530

080005ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005b2:	f001 fe1e 	bl	80021f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200013ac 	.word	0x200013ac

080005c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <USART1_IRQHandler+0x10>)
 80005c6:	f003 fd09 	bl	8003fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000574 	.word	0x20000574

080005d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <SystemInit+0x5c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a14      	ldr	r2, [pc, #80]	; (8000630 <SystemInit+0x5c>)
 80005de:	f043 0301 	orr.w	r3, r3, #1
 80005e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <SystemInit+0x5c>)
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	4911      	ldr	r1, [pc, #68]	; (8000630 <SystemInit+0x5c>)
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <SystemInit+0x60>)
 80005ec:	4013      	ands	r3, r2
 80005ee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <SystemInit+0x5c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <SystemInit+0x5c>)
 80005f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <SystemInit+0x5c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <SystemInit+0x5c>)
 8000606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800060a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <SystemInit+0x5c>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <SystemInit+0x5c>)
 8000612:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000616:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <SystemInit+0x5c>)
 800061a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800061e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <SystemInit+0x64>)
 8000622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000626:	609a      	str	r2, [r3, #8]
#endif 
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000
 8000634:	f8ff0000 	.word	0xf8ff0000
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800063c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800063e:	e003      	b.n	8000648 <LoopCopyDataInit>

08000640 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000642:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000644:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000646:	3104      	adds	r1, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800064c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800064e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000650:	d3f6      	bcc.n	8000640 <CopyDataInit>
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000654:	e002      	b.n	800065c <LoopFillZerobss>

08000656 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000658:	f842 3b04 	str.w	r3, [r2], #4

0800065c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800065e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000660:	d3f9      	bcc.n	8000656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000662:	f7ff ffb7 	bl	80005d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000666:	f007 f8a9 	bl	80077bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f007 f89b 	bl	80077a4 <main>
  bx lr
 800066e:	4770      	bx	lr
  ldr r3, =_sidata
 8000670:	080078bc 	.word	0x080078bc
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000678:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 800067c:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 8000680:	2000180c 	.word	0x2000180c

08000684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_2_IRQHandler>

08000686 <qbufferCreate>:
#include "qbuffer.h"



bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000686:	b480      	push	{r7}
 8000688:	b087      	sub	sp, #28
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
  bool ret    = true;
 8000692:	2301      	movs	r3, #1
 8000694:	75fb      	strb	r3, [r7, #23]

  p_node->in  = 0;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	60da      	str	r2, [r3, #12]
    p_node->len = 0;
    p_node->p_buf = NULL;
    ret = false;
  }
#endif
  return ret;
 80006ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	371c      	adds	r7, #28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr

080006ba <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b087      	sub	sp, #28
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80006c6:	2301      	movs	r3, #1
 80006c8:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	e026      	b.n	800071e <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d009      	beq.n	80006ec <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	68da      	ldr	r2, [r3, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	441a      	add	r2, r3
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	440b      	add	r3, r1
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d00c      	beq.n	8000712 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	6892      	ldr	r2, [r2, #8]
 8000702:	fbb3 f1f2 	udiv	r1, r3, r2
 8000706:	fb02 f201 	mul.w	r2, r2, r1
 800070a:	1a9a      	subs	r2, r3, r2
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	e002      	b.n	8000718 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8000712:	2300      	movs	r3, #0
 8000714:	75fb      	strb	r3, [r7, #23]
      break;
 8000716:	e006      	b.n	8000726 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	3301      	adds	r3, #1
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	429a      	cmp	r2, r3
 8000724:	d8d4      	bhi.n	80006d0 <qbufferRead+0x16>
    }
  }

  return ret;
 8000726:	7dfb      	ldrb	r3, [r7, #23]
}
 8000728:	4618      	mov	r0, r3
 800072a:	371c      	adds	r7, #28
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000732:	b480      	push	{r7}
 8000734:	b085      	sub	sp, #20
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;  // + p_node->len **
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	441a      	add	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	6892      	ldr	r2, [r2, #8]
 800074e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000752:	fb02 f201 	mul.w	r2, r2, r1
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	60fb      	str	r3, [r7, #12]

  return ret;
 800075a:	68fb      	ldr	r3, [r7, #12]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
	...

08000768 <ledInit>:
		{GPIOB, GPIO_PIN_14, GPIO_PIN_SET, GPIO_PIN_RESET},
		{GPIOB, GPIO_PIN_15, GPIO_PIN_SET, GPIO_PIN_RESET},
};

void ledInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#endif
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <ledInit+0x94>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <ledInit+0x94>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <ledInit+0x94>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0308 	and.w	r3, r3, #8
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <ledInit+0x94>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a18      	ldr	r2, [pc, #96]	; (80007fc <ledInit+0x94>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <ledInit+0x94>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  //GPIO_InitStruct.Pin = LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
  //HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
  for( int i=0; i<LED_MAX_CH; i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
 80007bc:	e017      	b.n	80007ee <ledInit+0x86>
  {
  	GPIO_InitStruct.Pin = led_tbl[i].pin;
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <ledInit+0x98>)
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	4413      	add	r3, r2
 80007c6:	889b      	ldrh	r3, [r3, #4]
 80007c8:	60fb      	str	r3, [r7, #12]
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80007ca:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <ledInit+0x98>)
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007d2:	f107 020c 	add.w	r2, r7, #12
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 f9a1 	bl	8001b20 <HAL_GPIO_Init>

  	ledOff(i);
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f80e 	bl	8000804 <ledOff>
  for( int i=0; i<LED_MAX_CH; i++)
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	3301      	adds	r3, #1
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	dde4      	ble.n	80007be <ledInit+0x56>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	20000004 	.word	0x20000004

08000804 <ledOff>:
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b03      	cmp	r3, #3
 8000812:	d811      	bhi.n	8000838 <ledOff+0x34>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <ledOff+0x3c>)
 8000818:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <ledOff+0x3c>)
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	4413      	add	r3, r2
 8000824:	8899      	ldrh	r1, [r3, #4]
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <ledOff+0x3c>)
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	4413      	add	r3, r2
 800082e:	79db      	ldrb	r3, [r3, #7]
 8000830:	461a      	mov	r2, r3
 8000832:	f001 fbb5 	bl	8001fa0 <HAL_GPIO_WritePin>
 8000836:	e000      	b.n	800083a <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 8000838:	bf00      	nop
}
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000004 	.word	0x20000004

08000844 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b03      	cmp	r3, #3
 8000852:	d80c      	bhi.n	800086e <ledToggle+0x2a>
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <ledToggle+0x34>)
 8000858:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4a06      	ldr	r2, [pc, #24]	; (8000878 <ledToggle+0x34>)
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	4413      	add	r3, r2
 8000864:	889b      	ldrh	r3, [r3, #4]
 8000866:	4619      	mov	r1, r3
 8000868:	f001 fbb2 	bl	8001fd0 <HAL_GPIO_TogglePin>
 800086c:	e000      	b.n	8000870 <ledToggle+0x2c>
	if(ch >= LED_MAX_CH) return;
 800086e:	bf00      	nop
}
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000004 	.word	0x20000004

0800087c <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  bool ret = true;
 8000882:	2301      	movs	r3, #1
 8000884:	71fb      	strb	r3, [r7, #7]

  /* if reset pin on */
  if(RCC->CSR & (1<<26))
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <resetInit+0x50>)
 8000888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d012      	beq.n	80008b8 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8000892:	2001      	movs	r0, #1
 8000894:	f000 f84e 	bl	8000934 <rtcBackupRegRead>
 8000898:	4603      	mov	r3, r0
 800089a:	3301      	adds	r3, #1
 800089c:	4619      	mov	r1, r3
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 f858 	bl	8000954 <rtcBackupRegWrite>
    delay(500);
 80008a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a8:	f7ff fd60 	bl	800036c <delay>
    reset_count = rtcBackupRegRead(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 f841 	bl	8000934 <rtcBackupRegRead>
 80008b2:	4602      	mov	r2, r0
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <resetInit+0x54>)
 80008b6:	601a      	str	r2, [r3, #0]
  }

  rtcBackupRegWrite(1, 0);
 80008b8:	2100      	movs	r1, #0
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 f84a 	bl	8000954 <rtcBackupRegWrite>

  return ret;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000
 80008d0:	200001c4 	.word	0x200001c4

080008d4 <rtcInit>:


RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  bool ret = true;
 80008da:	2301      	movs	r3, #1
 80008dc:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <rtcInit+0x54>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a11      	ldr	r2, [pc, #68]	; (8000928 <rtcInit+0x54>)
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <rtcInit+0x54>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /** Initialize RTC Only */
  hrtc.Instance           = RTC;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <rtcInit+0x58>)
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <rtcInit+0x5c>)
 80008fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <rtcInit+0x58>)
 80008fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000902:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <rtcInit+0x58>)
 8000906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <rtcInit+0x58>)
 800090e:	f003 f891 	bl	8003a34 <HAL_RTC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <rtcInit+0x48>
  {
    Error_Handler();
 8000918:	f7ff fddc 	bl	80004d4 <Error_Handler>
  }

  return ret;
 800091c:	79fb      	ldrb	r3, [r7, #7]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	2000051c 	.word	0x2000051c
 8000930:	40002800 	.word	0x40002800

08000934 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <rtcBackupRegRead+0x1c>)
 8000940:	f003 f9a6 	bl	8003c90 <HAL_RTCEx_BKUPRead>
 8000944:	4603      	mov	r3, r0

}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000051c 	.word	0x2000051c

08000954 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <rtcBackupRegWrite+0x1c>)
 8000964:	f003 f97a 	bl	8003c5c <HAL_RTCEx_BKUPWrite>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000051c 	.word	0x2000051c

08000974 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <HAL_RTC_MspInit+0x3c>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d110      	bne.n	80009a8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000986:	f002 fa87 	bl	8002e98 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_RTC_MspInit+0x40>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <HAL_RTC_MspInit+0x40>)
 8000990:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000994:	61d3      	str	r3, [r2, #28]
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <HAL_RTC_MspInit+0x40>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_RTC_MspInit+0x44>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40002800 	.word	0x40002800
 80009b4:	40021000 	.word	0x40021000
 80009b8:	4242043c 	.word	0x4242043c

080009bc <uartInit>:
DMA_HandleTypeDef  hdma_usart1_rx;



bool uartInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	e007      	b.n	80009d8 <uartInit+0x1c>
  {
    is_open[i] = false;
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <uartInit+0x30>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3301      	adds	r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	ddf4      	ble.n	80009c8 <uartInit+0xc>
  }


  return true;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	200001c8 	.word	0x200001c8

080009f0 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <uartOpen+0x1c>
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d007      	beq.n	8000a1a <uartOpen+0x2a>
 8000a0a:	e074      	b.n	8000af6 <uartOpen+0x106>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	4a3c      	ldr	r2, [pc, #240]	; (8000b00 <uartOpen+0x110>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
      break;
 8000a18:	e06d      	b.n	8000af6 <uartOpen+0x106>

    case _DEF_UART2:
      huart1.Instance = USART1;
 8000a1a:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <uartOpen+0x114>)
 8000a1c:	4a3a      	ldr	r2, [pc, #232]	; (8000b08 <uartOpen+0x118>)
 8000a1e:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8000a20:	4a38      	ldr	r2, [pc, #224]	; (8000b04 <uartOpen+0x114>)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <uartOpen+0x114>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b35      	ldr	r3, [pc, #212]	; (8000b04 <uartOpen+0x114>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <uartOpen+0x114>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <uartOpen+0x114>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <uartOpen+0x114>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <uartOpen+0x114>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8000a4a:	482e      	ldr	r0, [pc, #184]	; (8000b04 <uartOpen+0x114>)
 8000a4c:	f003 f989 	bl	8003d62 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	011b      	lsls	r3, r3, #4
 8000a54:	4a2d      	ldr	r2, [pc, #180]	; (8000b0c <uartOpen+0x11c>)
 8000a56:	4413      	add	r3, r2
 8000a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a5c:	492c      	ldr	r1, [pc, #176]	; (8000b10 <uartOpen+0x120>)
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe11 	bl	8000686 <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA1_CLK_ENABLE();
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <uartOpen+0x124>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a2a      	ldr	r2, [pc, #168]	; (8000b14 <uartOpen+0x124>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6153      	str	r3, [r2, #20]
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <uartOpen+0x124>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]

      /* DMA interrupt init */
      /* DMA1_Channel5_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	200f      	movs	r0, #15
 8000a82:	f000 fb48 	bl	8001116 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 fb61 	bl	800114e <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a8c:	481d      	ldr	r0, [pc, #116]	; (8000b04 <uartOpen+0x114>)
 8000a8e:	f003 f91b 	bl	8003cc8 <HAL_UART_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <uartOpen+0xae>
      {
        ret = false;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
      }
      break;
 8000a9c:	e02a      	b.n	8000af4 <uartOpen+0x104>
        ret = true;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <uartOpen+0x110>)
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aae:	4918      	ldr	r1, [pc, #96]	; (8000b10 <uartOpen+0x120>)
 8000ab0:	4814      	ldr	r0, [pc, #80]	; (8000b04 <uartOpen+0x114>)
 8000ab2:	f003 fa13 	bl	8003edc <HAL_UART_Receive_DMA>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <uartOpen+0xd0>
          ret = false;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <uartOpen+0x11c>)
 8000ac4:	011b      	lsls	r3, r3, #4
 8000ac6:	4413      	add	r3, r2
 8000ac8:	3308      	adds	r3, #8
 8000aca:	6819      	ldr	r1, [r3, #0]
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <uartOpen+0x128>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	1a8a      	subs	r2, r1, r2
 8000ad6:	490d      	ldr	r1, [pc, #52]	; (8000b0c <uartOpen+0x11c>)
 8000ad8:	011b      	lsls	r3, r3, #4
 8000ada:	440b      	add	r3, r1
 8000adc:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
 8000ade:	79fa      	ldrb	r2, [r7, #7]
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	490a      	ldr	r1, [pc, #40]	; (8000b0c <uartOpen+0x11c>)
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	440a      	add	r2, r1
 8000ae8:	6812      	ldr	r2, [r2, #0]
 8000aea:	4908      	ldr	r1, [pc, #32]	; (8000b0c <uartOpen+0x11c>)
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	440b      	add	r3, r1
 8000af0:	3304      	adds	r3, #4
 8000af2:	601a      	str	r2, [r3, #0]
      break;
 8000af4:	bf00      	nop
  }

  return ret;
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200001c8 	.word	0x200001c8
 8000b04:	20000574 	.word	0x20000574
 8000b08:	40013800 	.word	0x40013800
 8000b0c:	200001cc 	.word	0x200001cc
 8000b10:	200001ec 	.word	0x200001ec
 8000b14:	40021000 	.word	0x40021000
 8000b18:	20000530 	.word	0x20000530

08000b1c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <uartAvailable+0x1a>
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d004      	beq.n	8000b3e <uartAvailable+0x22>
 8000b34:	e01b      	b.n	8000b6e <uartAvailable+0x52>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 8000b36:	f006 f8ef 	bl	8006d18 <cdcAvailable>
 8000b3a:	60f8      	str	r0, [r7, #12]
      break;
 8000b3c:	e017      	b.n	8000b6e <uartAvailable+0x52>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <uartAvailable+0x5c>)
 8000b42:	011b      	lsls	r3, r3, #4
 8000b44:	4413      	add	r3, r2
 8000b46:	3308      	adds	r3, #8
 8000b48:	6819      	ldr	r1, [r3, #0]
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <uartAvailable+0x60>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	1a8a      	subs	r2, r1, r2
 8000b54:	4908      	ldr	r1, [pc, #32]	; (8000b78 <uartAvailable+0x5c>)
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	440b      	add	r3, r1
 8000b5a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <uartAvailable+0x5c>)
 8000b62:	4413      	add	r3, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fde4 	bl	8000732 <qbufferAvailable>
 8000b6a:	60f8      	str	r0, [r7, #12]
      break;
 8000b6c:	bf00      	nop

  }

  return ret;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200001cc 	.word	0x200001cc
 8000b7c:	20000530 	.word	0x20000530

08000b80 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <uartRead+0x1a>
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d005      	beq.n	8000ba4 <uartRead+0x24>
 8000b98:	e00c      	b.n	8000bb4 <uartRead+0x34>
  {
    case _DEF_UART1:
      ret = cdcRead();
 8000b9a:	f006 f8d9 	bl	8006d50 <cdcRead>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8000ba2:	e007      	b.n	8000bb4 <uartRead+0x34>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8000ba4:	f107 030f 	add.w	r3, r7, #15
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4619      	mov	r1, r3
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <uartRead+0x40>)
 8000bae:	f7ff fd84 	bl	80006ba <qbufferRead>
      break;
 8000bb2:	bf00      	nop

  }

  return ret;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200001dc 	.word	0x200001dc

08000bc4 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <uartWrite+0x1e>
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d006      	beq.n	8000bee <uartWrite+0x2a>
 8000be0:	e014      	b.n	8000c0c <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	68b8      	ldr	r0, [r7, #8]
 8000be6:	f006 f905 	bl	8006df4 <cdcWrite>
 8000bea:	6178      	str	r0, [r7, #20]
      break;
 8000bec:	e00e      	b.n	8000c0c <uartWrite+0x48>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	2364      	movs	r3, #100	; 0x64
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	4808      	ldr	r0, [pc, #32]	; (8000c18 <uartWrite+0x54>)
 8000bf8:	f003 f8d7 	bl	8003daa <HAL_UART_Transmit>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8000c00:	7cfb      	ldrb	r3, [r7, #19]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <uartWrite+0x46>
      {
        ret = length;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	617b      	str	r3, [r7, #20]
      }
      break;
 8000c0a:	bf00      	nop

  }

  return ret;
 8000c0c:	697b      	ldr	r3, [r7, #20]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000574 	.word	0x20000574

08000c1c <uartGetBaud>:

  return ret;
}

uint32_t uartGetBaud(uint8_t ch)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]


  switch(ch)
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <uartGetBaud+0x1a>
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d004      	beq.n	8000c3e <uartGetBaud+0x22>
 8000c34:	e007      	b.n	8000c46 <uartGetBaud+0x2a>
  {
    case _DEF_UART1:
      ret = cdcGetBaud();
 8000c36:	f006 f905 	bl	8006e44 <cdcGetBaud>
 8000c3a:	60f8      	str	r0, [r7, #12]
      break;
 8000c3c:	e003      	b.n	8000c46 <uartGetBaud+0x2a>

    case _DEF_UART2:
      ret = huart1.Init.BaudRate;
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <uartGetBaud+0x34>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
      break;
 8000c44:	bf00      	nop

  }

  return ret;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000574 	.word	0x20000574

08000c54 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a33      	ldr	r2, [pc, #204]	; (8000d60 <HAL_UART_MspInit+0xe8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d15f      	bne.n	8000d58 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c98:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <HAL_UART_MspInit+0xec>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a31      	ldr	r2, [pc, #196]	; (8000d64 <HAL_UART_MspInit+0xec>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <HAL_UART_MspInit+0xec>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <HAL_UART_MspInit+0xec>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a2b      	ldr	r2, [pc, #172]	; (8000d64 <HAL_UART_MspInit+0xec>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <HAL_UART_MspInit+0xec>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4822      	ldr	r0, [pc, #136]	; (8000d68 <HAL_UART_MspInit+0xf0>)
 8000cde:	f000 ff1f 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481c      	ldr	r0, [pc, #112]	; (8000d68 <HAL_UART_MspInit+0xf0>)
 8000cf8:	f000 ff12 	bl	8001b20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_UART_MspInit+0xf4>)
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <HAL_UART_MspInit+0xf8>)
 8000d00:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_UART_MspInit+0xf4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0xf4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_UART_MspInit+0xf4>)
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_UART_MspInit+0xf4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_UART_MspInit+0xf4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_UART_MspInit+0xf4>)
 8000d22:	2220      	movs	r2, #32
 8000d24:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_UART_MspInit+0xf4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d2c:	480f      	ldr	r0, [pc, #60]	; (8000d6c <HAL_UART_MspInit+0xf4>)
 8000d2e:	f000 fa37 	bl	80011a0 <HAL_DMA_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000d38:	f7ff fbcc 	bl	80004d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <HAL_UART_MspInit+0xf4>)
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_UART_MspInit+0xf4>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2025      	movs	r0, #37	; 0x25
 8000d4e:	f000 f9e2 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d52:	2025      	movs	r0, #37	; 0x25
 8000d54:	f000 f9fb 	bl	800114e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40013800 	.word	0x40013800
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	20000530 	.word	0x20000530
 8000d70:	40020058 	.word	0x40020058

08000d74 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <HAL_UART_MspDeInit+0x40>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d112      	bne.n	8000dac <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_UART_MspDeInit+0x44>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_UART_MspDeInit+0x44>)
 8000d8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d90:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000d92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000d96:	4809      	ldr	r0, [pc, #36]	; (8000dbc <HAL_UART_MspDeInit+0x48>)
 8000d98:	f001 f830 	bl	8001dfc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 fa73 	bl	800128c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000da6:	2025      	movs	r0, #37	; 0x25
 8000da8:	f000 f9df 	bl	800116a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40013800 	.word	0x40013800
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010800 	.word	0x40010800

08000dc0 <usbInit>:




bool usbInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
  bool ret = true;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	75fb      	strb	r3, [r7, #23]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ddc:	2311      	movs	r3, #17
 8000dde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2302      	movs	r3, #2
 8000de6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4808      	ldr	r0, [pc, #32]	; (8000e10 <usbInit+0x50>)
 8000dee:	f000 fe97 	bl	8001b20 <HAL_GPIO_Init>
#if 0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
  delay(200);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
#endif
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <usbInit+0x50>)
 8000dfc:	f000 fe90 	bl	8001b20 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 8000e00:	f005 ff5a 	bl	8006cb8 <MX_USB_DEVICE_Init>

  return ret;
 8000e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40010800 	.word	0x40010800

08000e14 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  bspInit();
 8000e18:	f7ff fa9e 	bl	8000358 <bspInit>
  rtcInit();
 8000e1c:	f7ff fd5a 	bl	80008d4 <rtcInit>

  resetInit();
 8000e20:	f7ff fd2c 	bl	800087c <resetInit>
  ledInit();
 8000e24:	f7ff fca0 	bl	8000768 <ledInit>
  usbInit();
 8000e28:	f7ff ffca 	bl	8000dc0 <usbInit>
  uartInit();
 8000e2c:	f7ff fdc6 	bl	80009bc <uartInit>

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_Init+0x28>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_Init+0x28>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f95b 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fb46 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40022000 	.word	0x40022000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f981 	bl	8001186 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f93b 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000028 	.word	0x20000028
 8000ebc:	20000024 	.word	0x20000024

08000ec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_IncTick+0x1c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	20000028 	.word	0x20000028
 8000ee0:	200005b4 	.word	0x200005b4

08000ee4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b02      	ldr	r3, [pc, #8]	; (8000ef4 <HAL_GetTick+0x10>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	200005b4 	.word	0x200005b4

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff fff0 	bl	8000ee4 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_Delay+0x40>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffe0 	bl	8000ee4 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000028 	.word	0x20000028

08000f3c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4906      	ldr	r1, [pc, #24]	; (8000fcc <NVIC_EnableIRQ+0x2c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <NVIC_DisableIRQ+0x30>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	3320      	adds	r3, #32
 8000ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	da0b      	bge.n	8001030 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <NVIC_SetPriority+0x4c>)
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	3b04      	subs	r3, #4
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102e:	e009      	b.n	8001044 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <NVIC_SetPriority+0x50>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	e000e100 	.word	0xe000e100

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff90 	bl	8001004 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff17 	bl	8000f3c <NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff2c 	bl	8000f84 <NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff90 	bl	8001058 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5f 	bl	8001004 <NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff1f 	bl	8000fa0 <NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff29 	bl	8000fd0 <NVIC_DisableIRQ>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ff94 	bl	80010bc <SysTick_Config>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e059      	b.n	800126a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_DMA_Init+0xd4>)
 80011be:	429a      	cmp	r2, r3
 80011c0:	d80f      	bhi.n	80011e2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <HAL_DMA_Init+0xd8>)
 80011ca:	4413      	add	r3, r2
 80011cc:	4a2b      	ldr	r2, [pc, #172]	; (800127c <HAL_DMA_Init+0xdc>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	009a      	lsls	r2, r3, #2
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a28      	ldr	r2, [pc, #160]	; (8001280 <HAL_DMA_Init+0xe0>)
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c
 80011e0:	e00e      	b.n	8001200 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_DMA_Init+0xe4>)
 80011ea:	4413      	add	r3, r2
 80011ec:	4a23      	ldr	r2, [pc, #140]	; (800127c <HAL_DMA_Init+0xdc>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	009a      	lsls	r2, r3, #2
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a22      	ldr	r2, [pc, #136]	; (8001288 <HAL_DMA_Init+0xe8>)
 80011fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2202      	movs	r2, #2
 8001204:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001216:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800121a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40020407 	.word	0x40020407
 8001278:	bffdfff8 	.word	0xbffdfff8
 800127c:	cccccccd 	.word	0xcccccccd
 8001280:	40020000 	.word	0x40020000
 8001284:	bffdfbf8 	.word	0xbffdfbf8
 8001288:	40020400 	.word	0x40020400

0800128c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e05c      	b.n	8001358 <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_DMA_DeInit+0xd8>)
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d80f      	bhi.n	80012fa <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_DMA_DeInit+0xdc>)
 80012e2:	4413      	add	r3, r2
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <HAL_DMA_DeInit+0xe0>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	009a      	lsls	r2, r3, #2
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <HAL_DMA_DeInit+0xe4>)
 80012f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80012f8:	e00e      	b.n	8001318 <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_DMA_DeInit+0xe8>)
 8001302:	4413      	add	r3, r2
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <HAL_DMA_DeInit+0xe0>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	009a      	lsls	r2, r3, #2
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a18      	ldr	r2, [pc, #96]	; (8001378 <HAL_DMA_DeInit+0xec>)
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40020407 	.word	0x40020407
 8001368:	bffdfff8 	.word	0xbffdfff8
 800136c:	cccccccd 	.word	0xcccccccd
 8001370:	40020000 	.word	0x40020000
 8001374:	bffdfbf8 	.word	0xbffdfbf8
 8001378:	40020400 	.word	0x40020400

0800137c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_DMA_Start_IT+0x20>
 8001398:	2302      	movs	r3, #2
 800139a:	e04a      	b.n	8001432 <HAL_DMA_Start_IT+0xb6>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d13a      	bne.n	8001424 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2202      	movs	r2, #2
 80013b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 fb76 	bl	8001ac4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 020e 	orr.w	r2, r2, #14
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e00f      	b.n	8001412 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0204 	bic.w	r2, r2, #4
 8001400:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 020a 	orr.w	r2, r2, #10
 8001410:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 0201 	orr.w	r2, r2, #1
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e005      	b.n	8001430 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800142c:	2302      	movs	r3, #2
 800142e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001430:	7dfb      	ldrb	r3, [r7, #23]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800144e:	2b02      	cmp	r3, #2
 8001450:	d005      	beq.n	800145e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2204      	movs	r2, #4
 8001456:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e0d6      	b.n	800160c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 020e 	bic.w	r2, r2, #14
 800146c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b64      	ldr	r3, [pc, #400]	; (8001618 <HAL_DMA_Abort_IT+0x1dc>)
 8001486:	429a      	cmp	r2, r3
 8001488:	d958      	bls.n	800153c <HAL_DMA_Abort_IT+0x100>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a63      	ldr	r2, [pc, #396]	; (800161c <HAL_DMA_Abort_IT+0x1e0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d04f      	beq.n	8001534 <HAL_DMA_Abort_IT+0xf8>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a61      	ldr	r2, [pc, #388]	; (8001620 <HAL_DMA_Abort_IT+0x1e4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d048      	beq.n	8001530 <HAL_DMA_Abort_IT+0xf4>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a60      	ldr	r2, [pc, #384]	; (8001624 <HAL_DMA_Abort_IT+0x1e8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d040      	beq.n	800152a <HAL_DMA_Abort_IT+0xee>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a5e      	ldr	r2, [pc, #376]	; (8001628 <HAL_DMA_Abort_IT+0x1ec>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d038      	beq.n	8001524 <HAL_DMA_Abort_IT+0xe8>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a5d      	ldr	r2, [pc, #372]	; (800162c <HAL_DMA_Abort_IT+0x1f0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d030      	beq.n	800151e <HAL_DMA_Abort_IT+0xe2>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a5b      	ldr	r2, [pc, #364]	; (8001630 <HAL_DMA_Abort_IT+0x1f4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d028      	beq.n	8001518 <HAL_DMA_Abort_IT+0xdc>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a53      	ldr	r2, [pc, #332]	; (8001618 <HAL_DMA_Abort_IT+0x1dc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d020      	beq.n	8001512 <HAL_DMA_Abort_IT+0xd6>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a57      	ldr	r2, [pc, #348]	; (8001634 <HAL_DMA_Abort_IT+0x1f8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d019      	beq.n	800150e <HAL_DMA_Abort_IT+0xd2>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a56      	ldr	r2, [pc, #344]	; (8001638 <HAL_DMA_Abort_IT+0x1fc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d012      	beq.n	800150a <HAL_DMA_Abort_IT+0xce>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a54      	ldr	r2, [pc, #336]	; (800163c <HAL_DMA_Abort_IT+0x200>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00a      	beq.n	8001504 <HAL_DMA_Abort_IT+0xc8>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a53      	ldr	r2, [pc, #332]	; (8001640 <HAL_DMA_Abort_IT+0x204>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d102      	bne.n	80014fe <HAL_DMA_Abort_IT+0xc2>
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	e01b      	b.n	8001536 <HAL_DMA_Abort_IT+0xfa>
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	e018      	b.n	8001536 <HAL_DMA_Abort_IT+0xfa>
 8001504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001508:	e015      	b.n	8001536 <HAL_DMA_Abort_IT+0xfa>
 800150a:	2310      	movs	r3, #16
 800150c:	e013      	b.n	8001536 <HAL_DMA_Abort_IT+0xfa>
 800150e:	2301      	movs	r3, #1
 8001510:	e011      	b.n	8001536 <HAL_DMA_Abort_IT+0xfa>
 8001512:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001516:	e00e      	b.n	8001536 <HAL_DMA_Abort_IT+0xfa>
 8001518:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800151c:	e00b      	b.n	8001536 <HAL_DMA_Abort_IT+0xfa>
 800151e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001522:	e008      	b.n	8001536 <HAL_DMA_Abort_IT+0xfa>
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	e005      	b.n	8001536 <HAL_DMA_Abort_IT+0xfa>
 800152a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152e:	e002      	b.n	8001536 <HAL_DMA_Abort_IT+0xfa>
 8001530:	2310      	movs	r3, #16
 8001532:	e000      	b.n	8001536 <HAL_DMA_Abort_IT+0xfa>
 8001534:	2301      	movs	r3, #1
 8001536:	4a43      	ldr	r2, [pc, #268]	; (8001644 <HAL_DMA_Abort_IT+0x208>)
 8001538:	6053      	str	r3, [r2, #4]
 800153a:	e057      	b.n	80015ec <HAL_DMA_Abort_IT+0x1b0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a36      	ldr	r2, [pc, #216]	; (800161c <HAL_DMA_Abort_IT+0x1e0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d04f      	beq.n	80015e6 <HAL_DMA_Abort_IT+0x1aa>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a35      	ldr	r2, [pc, #212]	; (8001620 <HAL_DMA_Abort_IT+0x1e4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d048      	beq.n	80015e2 <HAL_DMA_Abort_IT+0x1a6>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a33      	ldr	r2, [pc, #204]	; (8001624 <HAL_DMA_Abort_IT+0x1e8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d040      	beq.n	80015dc <HAL_DMA_Abort_IT+0x1a0>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a32      	ldr	r2, [pc, #200]	; (8001628 <HAL_DMA_Abort_IT+0x1ec>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d038      	beq.n	80015d6 <HAL_DMA_Abort_IT+0x19a>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a30      	ldr	r2, [pc, #192]	; (800162c <HAL_DMA_Abort_IT+0x1f0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d030      	beq.n	80015d0 <HAL_DMA_Abort_IT+0x194>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a2f      	ldr	r2, [pc, #188]	; (8001630 <HAL_DMA_Abort_IT+0x1f4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d028      	beq.n	80015ca <HAL_DMA_Abort_IT+0x18e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a26      	ldr	r2, [pc, #152]	; (8001618 <HAL_DMA_Abort_IT+0x1dc>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d020      	beq.n	80015c4 <HAL_DMA_Abort_IT+0x188>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a2b      	ldr	r2, [pc, #172]	; (8001634 <HAL_DMA_Abort_IT+0x1f8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d019      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x184>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a29      	ldr	r2, [pc, #164]	; (8001638 <HAL_DMA_Abort_IT+0x1fc>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d012      	beq.n	80015bc <HAL_DMA_Abort_IT+0x180>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a28      	ldr	r2, [pc, #160]	; (800163c <HAL_DMA_Abort_IT+0x200>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00a      	beq.n	80015b6 <HAL_DMA_Abort_IT+0x17a>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a26      	ldr	r2, [pc, #152]	; (8001640 <HAL_DMA_Abort_IT+0x204>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d102      	bne.n	80015b0 <HAL_DMA_Abort_IT+0x174>
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	e01b      	b.n	80015e8 <HAL_DMA_Abort_IT+0x1ac>
 80015b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b4:	e018      	b.n	80015e8 <HAL_DMA_Abort_IT+0x1ac>
 80015b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ba:	e015      	b.n	80015e8 <HAL_DMA_Abort_IT+0x1ac>
 80015bc:	2310      	movs	r3, #16
 80015be:	e013      	b.n	80015e8 <HAL_DMA_Abort_IT+0x1ac>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e011      	b.n	80015e8 <HAL_DMA_Abort_IT+0x1ac>
 80015c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c8:	e00e      	b.n	80015e8 <HAL_DMA_Abort_IT+0x1ac>
 80015ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015ce:	e00b      	b.n	80015e8 <HAL_DMA_Abort_IT+0x1ac>
 80015d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d4:	e008      	b.n	80015e8 <HAL_DMA_Abort_IT+0x1ac>
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	e005      	b.n	80015e8 <HAL_DMA_Abort_IT+0x1ac>
 80015dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e0:	e002      	b.n	80015e8 <HAL_DMA_Abort_IT+0x1ac>
 80015e2:	2310      	movs	r3, #16
 80015e4:	e000      	b.n	80015e8 <HAL_DMA_Abort_IT+0x1ac>
 80015e6:	2301      	movs	r3, #1
 80015e8:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_DMA_Abort_IT+0x20c>)
 80015ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4798      	blx	r3
    } 
  }
  return status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40020080 	.word	0x40020080
 800161c:	40020008 	.word	0x40020008
 8001620:	4002001c 	.word	0x4002001c
 8001624:	40020030 	.word	0x40020030
 8001628:	40020044 	.word	0x40020044
 800162c:	40020058 	.word	0x40020058
 8001630:	4002006c 	.word	0x4002006c
 8001634:	40020408 	.word	0x40020408
 8001638:	4002041c 	.word	0x4002041c
 800163c:	40020430 	.word	0x40020430
 8001640:	40020444 	.word	0x40020444
 8001644:	40020400 	.word	0x40020400
 8001648:	40020000 	.word	0x40020000

0800164c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	2204      	movs	r2, #4
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80d6 	beq.w	8001822 <HAL_DMA_IRQHandler+0x1d6>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80d0 	beq.w	8001822 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0320 	and.w	r3, r3, #32
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0204 	bic.w	r2, r2, #4
 800169e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b9b      	ldr	r3, [pc, #620]	; (8001914 <HAL_DMA_IRQHandler+0x2c8>)
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d958      	bls.n	800175e <HAL_DMA_IRQHandler+0x112>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a99      	ldr	r2, [pc, #612]	; (8001918 <HAL_DMA_IRQHandler+0x2cc>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d04f      	beq.n	8001756 <HAL_DMA_IRQHandler+0x10a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a98      	ldr	r2, [pc, #608]	; (800191c <HAL_DMA_IRQHandler+0x2d0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d048      	beq.n	8001752 <HAL_DMA_IRQHandler+0x106>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a96      	ldr	r2, [pc, #600]	; (8001920 <HAL_DMA_IRQHandler+0x2d4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d040      	beq.n	800174c <HAL_DMA_IRQHandler+0x100>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a95      	ldr	r2, [pc, #596]	; (8001924 <HAL_DMA_IRQHandler+0x2d8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d038      	beq.n	8001746 <HAL_DMA_IRQHandler+0xfa>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a93      	ldr	r2, [pc, #588]	; (8001928 <HAL_DMA_IRQHandler+0x2dc>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d030      	beq.n	8001740 <HAL_DMA_IRQHandler+0xf4>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a92      	ldr	r2, [pc, #584]	; (800192c <HAL_DMA_IRQHandler+0x2e0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d028      	beq.n	800173a <HAL_DMA_IRQHandler+0xee>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a89      	ldr	r2, [pc, #548]	; (8001914 <HAL_DMA_IRQHandler+0x2c8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d020      	beq.n	8001734 <HAL_DMA_IRQHandler+0xe8>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a8e      	ldr	r2, [pc, #568]	; (8001930 <HAL_DMA_IRQHandler+0x2e4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d019      	beq.n	8001730 <HAL_DMA_IRQHandler+0xe4>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a8c      	ldr	r2, [pc, #560]	; (8001934 <HAL_DMA_IRQHandler+0x2e8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d012      	beq.n	800172c <HAL_DMA_IRQHandler+0xe0>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a8b      	ldr	r2, [pc, #556]	; (8001938 <HAL_DMA_IRQHandler+0x2ec>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00a      	beq.n	8001726 <HAL_DMA_IRQHandler+0xda>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a89      	ldr	r2, [pc, #548]	; (800193c <HAL_DMA_IRQHandler+0x2f0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d102      	bne.n	8001720 <HAL_DMA_IRQHandler+0xd4>
 800171a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800171e:	e01b      	b.n	8001758 <HAL_DMA_IRQHandler+0x10c>
 8001720:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001724:	e018      	b.n	8001758 <HAL_DMA_IRQHandler+0x10c>
 8001726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172a:	e015      	b.n	8001758 <HAL_DMA_IRQHandler+0x10c>
 800172c:	2340      	movs	r3, #64	; 0x40
 800172e:	e013      	b.n	8001758 <HAL_DMA_IRQHandler+0x10c>
 8001730:	2304      	movs	r3, #4
 8001732:	e011      	b.n	8001758 <HAL_DMA_IRQHandler+0x10c>
 8001734:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001738:	e00e      	b.n	8001758 <HAL_DMA_IRQHandler+0x10c>
 800173a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800173e:	e00b      	b.n	8001758 <HAL_DMA_IRQHandler+0x10c>
 8001740:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001744:	e008      	b.n	8001758 <HAL_DMA_IRQHandler+0x10c>
 8001746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800174a:	e005      	b.n	8001758 <HAL_DMA_IRQHandler+0x10c>
 800174c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001750:	e002      	b.n	8001758 <HAL_DMA_IRQHandler+0x10c>
 8001752:	2340      	movs	r3, #64	; 0x40
 8001754:	e000      	b.n	8001758 <HAL_DMA_IRQHandler+0x10c>
 8001756:	2304      	movs	r3, #4
 8001758:	4a79      	ldr	r2, [pc, #484]	; (8001940 <HAL_DMA_IRQHandler+0x2f4>)
 800175a:	6053      	str	r3, [r2, #4]
 800175c:	e057      	b.n	800180e <HAL_DMA_IRQHandler+0x1c2>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6d      	ldr	r2, [pc, #436]	; (8001918 <HAL_DMA_IRQHandler+0x2cc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d04f      	beq.n	8001808 <HAL_DMA_IRQHandler+0x1bc>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6b      	ldr	r2, [pc, #428]	; (800191c <HAL_DMA_IRQHandler+0x2d0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d048      	beq.n	8001804 <HAL_DMA_IRQHandler+0x1b8>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a6a      	ldr	r2, [pc, #424]	; (8001920 <HAL_DMA_IRQHandler+0x2d4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d040      	beq.n	80017fe <HAL_DMA_IRQHandler+0x1b2>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a68      	ldr	r2, [pc, #416]	; (8001924 <HAL_DMA_IRQHandler+0x2d8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d038      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x1ac>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a67      	ldr	r2, [pc, #412]	; (8001928 <HAL_DMA_IRQHandler+0x2dc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d030      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x1a6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a65      	ldr	r2, [pc, #404]	; (800192c <HAL_DMA_IRQHandler+0x2e0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d028      	beq.n	80017ec <HAL_DMA_IRQHandler+0x1a0>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a5d      	ldr	r2, [pc, #372]	; (8001914 <HAL_DMA_IRQHandler+0x2c8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d020      	beq.n	80017e6 <HAL_DMA_IRQHandler+0x19a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a61      	ldr	r2, [pc, #388]	; (8001930 <HAL_DMA_IRQHandler+0x2e4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d019      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x196>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a60      	ldr	r2, [pc, #384]	; (8001934 <HAL_DMA_IRQHandler+0x2e8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d012      	beq.n	80017de <HAL_DMA_IRQHandler+0x192>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5e      	ldr	r2, [pc, #376]	; (8001938 <HAL_DMA_IRQHandler+0x2ec>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00a      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x18c>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5d      	ldr	r2, [pc, #372]	; (800193c <HAL_DMA_IRQHandler+0x2f0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d102      	bne.n	80017d2 <HAL_DMA_IRQHandler+0x186>
 80017cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d0:	e01b      	b.n	800180a <HAL_DMA_IRQHandler+0x1be>
 80017d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017d6:	e018      	b.n	800180a <HAL_DMA_IRQHandler+0x1be>
 80017d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017dc:	e015      	b.n	800180a <HAL_DMA_IRQHandler+0x1be>
 80017de:	2340      	movs	r3, #64	; 0x40
 80017e0:	e013      	b.n	800180a <HAL_DMA_IRQHandler+0x1be>
 80017e2:	2304      	movs	r3, #4
 80017e4:	e011      	b.n	800180a <HAL_DMA_IRQHandler+0x1be>
 80017e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017ea:	e00e      	b.n	800180a <HAL_DMA_IRQHandler+0x1be>
 80017ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f0:	e00b      	b.n	800180a <HAL_DMA_IRQHandler+0x1be>
 80017f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017f6:	e008      	b.n	800180a <HAL_DMA_IRQHandler+0x1be>
 80017f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017fc:	e005      	b.n	800180a <HAL_DMA_IRQHandler+0x1be>
 80017fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001802:	e002      	b.n	800180a <HAL_DMA_IRQHandler+0x1be>
 8001804:	2340      	movs	r3, #64	; 0x40
 8001806:	e000      	b.n	800180a <HAL_DMA_IRQHandler+0x1be>
 8001808:	2304      	movs	r3, #4
 800180a:	4a4e      	ldr	r2, [pc, #312]	; (8001944 <HAL_DMA_IRQHandler+0x2f8>)
 800180c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8136 	beq.w	8001a84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001820:	e130      	b.n	8001a84 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	2202      	movs	r2, #2
 8001828:	409a      	lsls	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80f8 	beq.w	8001a24 <HAL_DMA_IRQHandler+0x3d8>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80f2 	beq.w	8001a24 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10b      	bne.n	8001866 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 020a 	bic.w	r2, r2, #10
 800185c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_DMA_IRQHandler+0x2c8>)
 800186e:	429a      	cmp	r2, r3
 8001870:	d973      	bls.n	800195a <HAL_DMA_IRQHandler+0x30e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a28      	ldr	r2, [pc, #160]	; (8001918 <HAL_DMA_IRQHandler+0x2cc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d06a      	beq.n	8001952 <HAL_DMA_IRQHandler+0x306>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a26      	ldr	r2, [pc, #152]	; (800191c <HAL_DMA_IRQHandler+0x2d0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d063      	beq.n	800194e <HAL_DMA_IRQHandler+0x302>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a25      	ldr	r2, [pc, #148]	; (8001920 <HAL_DMA_IRQHandler+0x2d4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d05b      	beq.n	8001948 <HAL_DMA_IRQHandler+0x2fc>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a23      	ldr	r2, [pc, #140]	; (8001924 <HAL_DMA_IRQHandler+0x2d8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d038      	beq.n	800190c <HAL_DMA_IRQHandler+0x2c0>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a22      	ldr	r2, [pc, #136]	; (8001928 <HAL_DMA_IRQHandler+0x2dc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d030      	beq.n	8001906 <HAL_DMA_IRQHandler+0x2ba>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_DMA_IRQHandler+0x2e0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d028      	beq.n	8001900 <HAL_DMA_IRQHandler+0x2b4>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a18      	ldr	r2, [pc, #96]	; (8001914 <HAL_DMA_IRQHandler+0x2c8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d020      	beq.n	80018fa <HAL_DMA_IRQHandler+0x2ae>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <HAL_DMA_IRQHandler+0x2e4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d019      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x2aa>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <HAL_DMA_IRQHandler+0x2e8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d012      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x2a6>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a19      	ldr	r2, [pc, #100]	; (8001938 <HAL_DMA_IRQHandler+0x2ec>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00a      	beq.n	80018ec <HAL_DMA_IRQHandler+0x2a0>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_DMA_IRQHandler+0x2f0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d102      	bne.n	80018e6 <HAL_DMA_IRQHandler+0x29a>
 80018e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e4:	e036      	b.n	8001954 <HAL_DMA_IRQHandler+0x308>
 80018e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ea:	e033      	b.n	8001954 <HAL_DMA_IRQHandler+0x308>
 80018ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f0:	e030      	b.n	8001954 <HAL_DMA_IRQHandler+0x308>
 80018f2:	2320      	movs	r3, #32
 80018f4:	e02e      	b.n	8001954 <HAL_DMA_IRQHandler+0x308>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e02c      	b.n	8001954 <HAL_DMA_IRQHandler+0x308>
 80018fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fe:	e029      	b.n	8001954 <HAL_DMA_IRQHandler+0x308>
 8001900:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001904:	e026      	b.n	8001954 <HAL_DMA_IRQHandler+0x308>
 8001906:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190a:	e023      	b.n	8001954 <HAL_DMA_IRQHandler+0x308>
 800190c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001910:	e020      	b.n	8001954 <HAL_DMA_IRQHandler+0x308>
 8001912:	bf00      	nop
 8001914:	40020080 	.word	0x40020080
 8001918:	40020008 	.word	0x40020008
 800191c:	4002001c 	.word	0x4002001c
 8001920:	40020030 	.word	0x40020030
 8001924:	40020044 	.word	0x40020044
 8001928:	40020058 	.word	0x40020058
 800192c:	4002006c 	.word	0x4002006c
 8001930:	40020408 	.word	0x40020408
 8001934:	4002041c 	.word	0x4002041c
 8001938:	40020430 	.word	0x40020430
 800193c:	40020444 	.word	0x40020444
 8001940:	40020400 	.word	0x40020400
 8001944:	40020000 	.word	0x40020000
 8001948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194c:	e002      	b.n	8001954 <HAL_DMA_IRQHandler+0x308>
 800194e:	2320      	movs	r3, #32
 8001950:	e000      	b.n	8001954 <HAL_DMA_IRQHandler+0x308>
 8001952:	2302      	movs	r3, #2
 8001954:	4a4e      	ldr	r2, [pc, #312]	; (8001a90 <HAL_DMA_IRQHandler+0x444>)
 8001956:	6053      	str	r3, [r2, #4]
 8001958:	e057      	b.n	8001a0a <HAL_DMA_IRQHandler+0x3be>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a4d      	ldr	r2, [pc, #308]	; (8001a94 <HAL_DMA_IRQHandler+0x448>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d04f      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x3b8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a4b      	ldr	r2, [pc, #300]	; (8001a98 <HAL_DMA_IRQHandler+0x44c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d048      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x3b4>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a4a      	ldr	r2, [pc, #296]	; (8001a9c <HAL_DMA_IRQHandler+0x450>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d040      	beq.n	80019fa <HAL_DMA_IRQHandler+0x3ae>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a48      	ldr	r2, [pc, #288]	; (8001aa0 <HAL_DMA_IRQHandler+0x454>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d038      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x3a8>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a47      	ldr	r2, [pc, #284]	; (8001aa4 <HAL_DMA_IRQHandler+0x458>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d030      	beq.n	80019ee <HAL_DMA_IRQHandler+0x3a2>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a45      	ldr	r2, [pc, #276]	; (8001aa8 <HAL_DMA_IRQHandler+0x45c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d028      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x39c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a44      	ldr	r2, [pc, #272]	; (8001aac <HAL_DMA_IRQHandler+0x460>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d020      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x396>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a42      	ldr	r2, [pc, #264]	; (8001ab0 <HAL_DMA_IRQHandler+0x464>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d019      	beq.n	80019de <HAL_DMA_IRQHandler+0x392>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a41      	ldr	r2, [pc, #260]	; (8001ab4 <HAL_DMA_IRQHandler+0x468>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d012      	beq.n	80019da <HAL_DMA_IRQHandler+0x38e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a3f      	ldr	r2, [pc, #252]	; (8001ab8 <HAL_DMA_IRQHandler+0x46c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00a      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x388>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a3e      	ldr	r2, [pc, #248]	; (8001abc <HAL_DMA_IRQHandler+0x470>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d102      	bne.n	80019ce <HAL_DMA_IRQHandler+0x382>
 80019c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019cc:	e01b      	b.n	8001a06 <HAL_DMA_IRQHandler+0x3ba>
 80019ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d2:	e018      	b.n	8001a06 <HAL_DMA_IRQHandler+0x3ba>
 80019d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d8:	e015      	b.n	8001a06 <HAL_DMA_IRQHandler+0x3ba>
 80019da:	2320      	movs	r3, #32
 80019dc:	e013      	b.n	8001a06 <HAL_DMA_IRQHandler+0x3ba>
 80019de:	2302      	movs	r3, #2
 80019e0:	e011      	b.n	8001a06 <HAL_DMA_IRQHandler+0x3ba>
 80019e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e6:	e00e      	b.n	8001a06 <HAL_DMA_IRQHandler+0x3ba>
 80019e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019ec:	e00b      	b.n	8001a06 <HAL_DMA_IRQHandler+0x3ba>
 80019ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f2:	e008      	b.n	8001a06 <HAL_DMA_IRQHandler+0x3ba>
 80019f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f8:	e005      	b.n	8001a06 <HAL_DMA_IRQHandler+0x3ba>
 80019fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fe:	e002      	b.n	8001a06 <HAL_DMA_IRQHandler+0x3ba>
 8001a00:	2320      	movs	r3, #32
 8001a02:	e000      	b.n	8001a06 <HAL_DMA_IRQHandler+0x3ba>
 8001a04:	2302      	movs	r3, #2
 8001a06:	4a2e      	ldr	r2, [pc, #184]	; (8001ac0 <HAL_DMA_IRQHandler+0x474>)
 8001a08:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d034      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a22:	e02f      	b.n	8001a84 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	2208      	movs	r2, #8
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d028      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x43a>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d023      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020e 	bic.w	r2, r2, #14
 8001a4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	4798      	blx	r3
    }
  }
  return;
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
}
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020008 	.word	0x40020008
 8001a98:	4002001c 	.word	0x4002001c
 8001a9c:	40020030 	.word	0x40020030
 8001aa0:	40020044 	.word	0x40020044
 8001aa4:	40020058 	.word	0x40020058
 8001aa8:	4002006c 	.word	0x4002006c
 8001aac:	40020080 	.word	0x40020080
 8001ab0:	40020408 	.word	0x40020408
 8001ab4:	4002041c 	.word	0x4002041c
 8001ab8:	40020430 	.word	0x40020430
 8001abc:	40020444 	.word	0x40020444
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d108      	bne.n	8001b04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b02:	e007      	b.n	8001b14 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b08b      	sub	sp, #44	; 0x2c
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
 8001b42:	e133      	b.n	8001dac <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001b44:	2201      	movs	r2, #1
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8122 	bne.w	8001da6 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b12      	cmp	r3, #18
 8001b68:	d034      	beq.n	8001bd4 <HAL_GPIO_Init+0xb4>
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d80d      	bhi.n	8001b8a <HAL_GPIO_Init+0x6a>
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d02b      	beq.n	8001bca <HAL_GPIO_Init+0xaa>
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d804      	bhi.n	8001b80 <HAL_GPIO_Init+0x60>
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d031      	beq.n	8001bde <HAL_GPIO_Init+0xbe>
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d01c      	beq.n	8001bb8 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b7e:	e048      	b.n	8001c12 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d043      	beq.n	8001c0c <HAL_GPIO_Init+0xec>
 8001b84:	2b11      	cmp	r3, #17
 8001b86:	d01b      	beq.n	8001bc0 <HAL_GPIO_Init+0xa0>
          break;
 8001b88:	e043      	b.n	8001c12 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001b8a:	4a8d      	ldr	r2, [pc, #564]	; (8001dc0 <HAL_GPIO_Init+0x2a0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d026      	beq.n	8001bde <HAL_GPIO_Init+0xbe>
 8001b90:	4a8b      	ldr	r2, [pc, #556]	; (8001dc0 <HAL_GPIO_Init+0x2a0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d806      	bhi.n	8001ba4 <HAL_GPIO_Init+0x84>
 8001b96:	4a8b      	ldr	r2, [pc, #556]	; (8001dc4 <HAL_GPIO_Init+0x2a4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d020      	beq.n	8001bde <HAL_GPIO_Init+0xbe>
 8001b9c:	4a8a      	ldr	r2, [pc, #552]	; (8001dc8 <HAL_GPIO_Init+0x2a8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01d      	beq.n	8001bde <HAL_GPIO_Init+0xbe>
          break;
 8001ba2:	e036      	b.n	8001c12 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001ba4:	4a89      	ldr	r2, [pc, #548]	; (8001dcc <HAL_GPIO_Init+0x2ac>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d019      	beq.n	8001bde <HAL_GPIO_Init+0xbe>
 8001baa:	4a89      	ldr	r2, [pc, #548]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d016      	beq.n	8001bde <HAL_GPIO_Init+0xbe>
 8001bb0:	4a88      	ldr	r2, [pc, #544]	; (8001dd4 <HAL_GPIO_Init+0x2b4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0xbe>
          break;
 8001bb6:	e02c      	b.n	8001c12 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	623b      	str	r3, [r7, #32]
          break;
 8001bbe:	e028      	b.n	8001c12 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	623b      	str	r3, [r7, #32]
          break;
 8001bc8:	e023      	b.n	8001c12 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	3308      	adds	r3, #8
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e01e      	b.n	8001c12 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	330c      	adds	r3, #12
 8001bda:	623b      	str	r3, [r7, #32]
          break;
 8001bdc:	e019      	b.n	8001c12 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001be6:	2304      	movs	r3, #4
 8001be8:	623b      	str	r3, [r7, #32]
          break;
 8001bea:	e012      	b.n	8001c12 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	611a      	str	r2, [r3, #16]
          break;
 8001bfe:	e008      	b.n	8001c12 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c00:	2308      	movs	r3, #8
 8001c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	615a      	str	r2, [r3, #20]
          break;
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
          break;
 8001c10:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2bff      	cmp	r3, #255	; 0xff
 8001c16:	d801      	bhi.n	8001c1c <HAL_GPIO_Init+0xfc>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	e001      	b.n	8001c20 <HAL_GPIO_Init+0x100>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2bff      	cmp	r3, #255	; 0xff
 8001c26:	d802      	bhi.n	8001c2e <HAL_GPIO_Init+0x10e>
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_Init+0x114>
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	3b08      	subs	r3, #8
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	401a      	ands	r2, r3
 8001c46:	6a39      	ldr	r1, [r7, #32]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80a2 	beq.w	8001da6 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c62:	4b5d      	ldr	r3, [pc, #372]	; (8001dd8 <HAL_GPIO_Init+0x2b8>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	4a5c      	ldr	r2, [pc, #368]	; (8001dd8 <HAL_GPIO_Init+0x2b8>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6193      	str	r3, [r2, #24]
 8001c6e:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <HAL_GPIO_Init+0x2b8>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001c7a:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_GPIO_Init+0x2bc>)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01f      	beq.n	8001ce6 <HAL_GPIO_Init+0x1c6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <HAL_GPIO_Init+0x2c4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d019      	beq.n	8001ce2 <HAL_GPIO_Init+0x1c2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4d      	ldr	r2, [pc, #308]	; (8001de8 <HAL_GPIO_Init+0x2c8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0x1be>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	; (8001dec <HAL_GPIO_Init+0x2cc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00d      	beq.n	8001cda <HAL_GPIO_Init+0x1ba>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4b      	ldr	r2, [pc, #300]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <HAL_GPIO_Init+0x1b6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4a      	ldr	r2, [pc, #296]	; (8001df4 <HAL_GPIO_Init+0x2d4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_GPIO_Init+0x1b2>
 8001cce:	2305      	movs	r3, #5
 8001cd0:	e00a      	b.n	8001ce8 <HAL_GPIO_Init+0x1c8>
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x1c8>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x1c8>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x1c8>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x1c8>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x1c8>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001cf8:	4938      	ldr	r1, [pc, #224]	; (8001ddc <HAL_GPIO_Init+0x2bc>)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d12:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4938      	ldr	r1, [pc, #224]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
 8001d1e:	e006      	b.n	8001d2e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d20:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	4933      	ldr	r1, [pc, #204]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d3a:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	492e      	ldr	r1, [pc, #184]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
 8001d46:	e006      	b.n	8001d56 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	4929      	ldr	r1, [pc, #164]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	4924      	ldr	r1, [pc, #144]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
 8001d6e:	e006      	b.n	8001d7e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	491f      	ldr	r1, [pc, #124]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	491a      	ldr	r1, [pc, #104]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60cb      	str	r3, [r1, #12]
 8001d96:	e006      	b.n	8001da6 <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	4915      	ldr	r1, [pc, #84]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	3301      	adds	r3, #1
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	2b0f      	cmp	r3, #15
 8001db0:	f67f aec8 	bls.w	8001b44 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001db4:	bf00      	nop
 8001db6:	372c      	adds	r7, #44	; 0x2c
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	10210000 	.word	0x10210000
 8001dc4:	10110000 	.word	0x10110000
 8001dc8:	10120000 	.word	0x10120000
 8001dcc:	10310000 	.word	0x10310000
 8001dd0:	10320000 	.word	0x10320000
 8001dd4:	10220000 	.word	0x10220000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	40010c00 	.word	0x40010c00
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40011400 	.word	0x40011400
 8001df0:	40011800 	.word	0x40011800
 8001df4:	40011c00 	.word	0x40011c00
 8001df8:	40010400 	.word	0x40010400

08001dfc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8001e16:	e0a6      	b.n	8001f66 <HAL_GPIO_DeInit+0x16a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8099 	beq.w	8001f60 <HAL_GPIO_DeInit+0x164>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2bff      	cmp	r3, #255	; 0xff
 8001e32:	d801      	bhi.n	8001e38 <HAL_GPIO_DeInit+0x3c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	e001      	b.n	8001e3c <HAL_GPIO_DeInit+0x40>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2bff      	cmp	r3, #255	; 0xff
 8001e42:	d802      	bhi.n	8001e4a <HAL_GPIO_DeInit+0x4e>
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_DeInit+0x54>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b08      	subs	r3, #8
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	613b      	str	r3, [r7, #16]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	210f      	movs	r1, #15
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	401a      	ands	r2, r3
 8001e62:	2104      	movs	r1, #4
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	401a      	ands	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
 8001e7e:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <HAL_GPIO_DeInit+0x184>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a38      	ldr	r2, [pc, #224]	; (8001f84 <HAL_GPIO_DeInit+0x188>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d01f      	beq.n	8001ee8 <HAL_GPIO_DeInit+0xec>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a37      	ldr	r2, [pc, #220]	; (8001f88 <HAL_GPIO_DeInit+0x18c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d019      	beq.n	8001ee4 <HAL_GPIO_DeInit+0xe8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a36      	ldr	r2, [pc, #216]	; (8001f8c <HAL_GPIO_DeInit+0x190>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d013      	beq.n	8001ee0 <HAL_GPIO_DeInit+0xe4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a35      	ldr	r2, [pc, #212]	; (8001f90 <HAL_GPIO_DeInit+0x194>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00d      	beq.n	8001edc <HAL_GPIO_DeInit+0xe0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a34      	ldr	r2, [pc, #208]	; (8001f94 <HAL_GPIO_DeInit+0x198>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <HAL_GPIO_DeInit+0xdc>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a33      	ldr	r2, [pc, #204]	; (8001f98 <HAL_GPIO_DeInit+0x19c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d101      	bne.n	8001ed4 <HAL_GPIO_DeInit+0xd8>
 8001ed0:	2305      	movs	r3, #5
 8001ed2:	e00a      	b.n	8001eea <HAL_GPIO_DeInit+0xee>
 8001ed4:	2306      	movs	r3, #6
 8001ed6:	e008      	b.n	8001eea <HAL_GPIO_DeInit+0xee>
 8001ed8:	2304      	movs	r3, #4
 8001eda:	e006      	b.n	8001eea <HAL_GPIO_DeInit+0xee>
 8001edc:	2303      	movs	r3, #3
 8001ede:	e004      	b.n	8001eea <HAL_GPIO_DeInit+0xee>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_DeInit+0xee>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_GPIO_DeInit+0xee>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	f002 0203 	and.w	r2, r2, #3
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	4093      	lsls	r3, r2
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d132      	bne.n	8001f60 <HAL_GPIO_DeInit+0x164>
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_GPIO_DeInit+0x184>)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	4819      	ldr	r0, [pc, #100]	; (8001f80 <HAL_GPIO_DeInit+0x184>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	400a      	ands	r2, r1
 8001f22:	3302      	adds	r3, #2
 8001f24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <HAL_GPIO_DeInit+0x1a0>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	491a      	ldr	r1, [pc, #104]	; (8001f9c <HAL_GPIO_DeInit+0x1a0>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_GPIO_DeInit+0x1a0>)
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4917      	ldr	r1, [pc, #92]	; (8001f9c <HAL_GPIO_DeInit+0x1a0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_GPIO_DeInit+0x1a0>)
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	4913      	ldr	r1, [pc, #76]	; (8001f9c <HAL_GPIO_DeInit+0x1a0>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_GPIO_DeInit+0x1a0>)
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4910      	ldr	r1, [pc, #64]	; (8001f9c <HAL_GPIO_DeInit+0x1a0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
      }
    }

    position++;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	3301      	adds	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f47f af52 	bne.w	8001e18 <HAL_GPIO_DeInit+0x1c>
  }
}
 8001f74:	bf00      	nop
 8001f76:	3724      	adds	r7, #36	; 0x24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40010800 	.word	0x40010800
 8001f88:	40010c00 	.word	0x40010c00
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	40011400 	.word	0x40011400
 8001f94:	40011800 	.word	0x40011800
 8001f98:	40011c00 	.word	0x40011c00
 8001f9c:	40010400 	.word	0x40010400

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fbc:	e003      	b.n	8001fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	611a      	str	r2, [r3, #16]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	405a      	eors	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff4:	b08b      	sub	sp, #44	; 0x2c
 8001ff6:	af06      	add	r7, sp, #24
 8001ff8:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0ca      	b.n	800219e <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f005 f923 	bl	8007268 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f002 fc2e 	bl	8004890 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	687e      	ldr	r6, [r7, #4]
 800203c:	466d      	mov	r5, sp
 800203e:	f106 0410 	add.w	r4, r6, #16
 8002042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	602b      	str	r3, [r5, #0]
 800204a:	1d33      	adds	r3, r6, #4
 800204c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204e:	6838      	ldr	r0, [r7, #0]
 8002050:	f002 fbf4 	bl	800483c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f002 fc34 	bl	80048c8 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e037      	b.n	80020d6 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	015b      	lsls	r3, r3, #5
 800206c:	4413      	add	r3, r2
 800206e:	3329      	adds	r3, #41	; 0x29
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	b2d9      	uxtb	r1, r3
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	015b      	lsls	r3, r3, #5
 800207e:	4413      	add	r3, r2
 8002080:	3328      	adds	r3, #40	; 0x28
 8002082:	460a      	mov	r2, r1
 8002084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	b299      	uxth	r1, r3
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015b      	lsls	r3, r3, #5
 8002090:	4413      	add	r3, r2
 8002092:	3334      	adds	r3, #52	; 0x34
 8002094:	460a      	mov	r2, r1
 8002096:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	015b      	lsls	r3, r3, #5
 800209e:	4413      	add	r3, r2
 80020a0:	332b      	adds	r3, #43	; 0x2b
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	015b      	lsls	r3, r3, #5
 80020ac:	4413      	add	r3, r2
 80020ae:	3338      	adds	r3, #56	; 0x38
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	015b      	lsls	r3, r3, #5
 80020ba:	4413      	add	r3, r2
 80020bc:	333c      	adds	r3, #60	; 0x3c
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3302      	adds	r3, #2
 80020c8:	015b      	lsls	r3, r3, #5
 80020ca:	4413      	add	r3, r2
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b0e      	cmp	r3, #14
 80020da:	d9c4      	bls.n	8002066 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	e03c      	b.n	800215c <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015b      	lsls	r3, r3, #5
 80020e8:	4413      	add	r3, r2
 80020ea:	f203 2329 	addw	r3, r3, #553	; 0x229
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	b2d9      	uxtb	r1, r3
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015b      	lsls	r3, r3, #5
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002102:	460a      	mov	r2, r1
 8002104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	b299      	uxth	r1, r3
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	015b      	lsls	r3, r3, #5
 8002110:	4413      	add	r3, r2
 8002112:	3334      	adds	r3, #52	; 0x34
 8002114:	460a      	mov	r2, r1
 8002116:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	015b      	lsls	r3, r3, #5
 800211e:	4413      	add	r3, r2
 8002120:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015b      	lsls	r3, r3, #5
 800212e:	4413      	add	r3, r2
 8002130:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	015b      	lsls	r3, r3, #5
 800213e:	4413      	add	r3, r2
 8002140:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3312      	adds	r3, #18
 800214e:	015b      	lsls	r3, r3, #5
 8002150:	4413      	add	r3, r2
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3301      	adds	r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b0e      	cmp	r3, #14
 8002160:	d9bf      	bls.n	80020e2 <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	687e      	ldr	r6, [r7, #4]
 800216a:	466d      	mov	r5, sp
 800216c:	f106 0410 	add.w	r4, r6, #16
 8002170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	602b      	str	r3, [r5, #0]
 8002178:	1d33      	adds	r3, r6, #4
 800217a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	f002 fbaf 	bl	80048e0 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fb99 	bl	80058ce <USB_DevDisconnect>
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021a6 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_PCD_Start+0x16>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e016      	b.n	80021ea <HAL_PCD_Start+0x44>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80021c4:	2101      	movs	r1, #1
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f005 fab5 	bl	8007736 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 fb72 	bl	80058ba <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 fb3e 	bl	800485c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 fb6f 	bl	80058e2 <USB_ReadInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800220e:	d102      	bne.n	8002216 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 fad9 	bl	80027c8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f003 fb61 	bl	80058e2 <USB_ReadInterrupts>
 8002220:	4603      	mov	r3, r0
 8002222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222a:	d112      	bne.n	8002252 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002234:	b29a      	uxth	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223e:	b292      	uxth	r2, r2
 8002240:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f005 f884 	bl	8007352 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 800224a:	2100      	movs	r1, #0
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f8d2 	bl	80023f6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fb43 	bl	80058e2 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002266:	d10b      	bne.n	8002280 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002270:	b29a      	uxth	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800227a:	b292      	uxth	r2, r2
 800227c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fb2c 	bl	80058e2 <USB_ReadInterrupts>
 800228a:	4603      	mov	r3, r0
 800228c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002294:	d10b      	bne.n	80022ae <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800229e:	b29a      	uxth	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a8:	b292      	uxth	r2, r2
 80022aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 fb15 	bl	80058e2 <USB_ReadInterrupts>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	d126      	bne.n	8002312 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	b292      	uxth	r2, r2
 80022d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0208 	bic.w	r2, r2, #8
 80022ee:	b292      	uxth	r2, r2
 80022f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f005 f865 	bl	80073c4 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002302:	b29a      	uxth	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800230c:	b292      	uxth	r2, r2
 800230e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fae3 	bl	80058e2 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002326:	d131      	bne.n	800238c <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002330:	b29a      	uxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0208 	orr.w	r2, r2, #8
 800233a:	b292      	uxth	r2, r2
 800233c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002352:	b292      	uxth	r2, r2
 8002354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002360:	b29a      	uxth	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0204 	orr.w	r2, r2, #4
 800236a:	b292      	uxth	r2, r2
 800236c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f003 fab4 	bl	80058e2 <USB_ReadInterrupts>
 800237a:	4603      	mov	r3, r0
 800237c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002384:	d002      	beq.n	800238c <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f005 f802 	bl	8007390 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f003 faa6 	bl	80058e2 <USB_ReadInterrupts>
 8002396:	4603      	mov	r3, r0
 8002398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800239c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a0:	d10e      	bne.n	80023c0 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023b4:	b292      	uxth	r2, r2
 80023b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f004 ffbb 	bl	8007336 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 fa8c 	bl	80058e2 <USB_ReadInterrupts>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d4:	d10b      	bne.n	80023ee <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023de:	b29a      	uxth	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e8:	b292      	uxth	r2, r2
 80023ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_PCD_SetAddress+0x1a>
 800240c:	2302      	movs	r3, #2
 800240e:	e013      	b.n	8002438 <HAL_PCD_SetAddress+0x42>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f003 fa33 	bl	8005894 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	70fb      	strb	r3, [r7, #3]
 8002452:	460b      	mov	r3, r1
 8002454:	803b      	strh	r3, [r7, #0]
 8002456:	4613      	mov	r3, r2
 8002458:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8002462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002466:	2b00      	cmp	r3, #0
 8002468:	da08      	bge.n	800247c <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002470:	015b      	lsls	r3, r3, #5
 8002472:	3328      	adds	r3, #40	; 0x28
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e008      	b.n	800248e <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002482:	015b      	lsls	r3, r3, #5
 8002484:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800249a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	09db      	lsrs	r3, r3, #7
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80024aa:	883a      	ldrh	r2, [r7, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	78ba      	ldrb	r2, [r7, #2]
 80024b4:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_PCD_EP_Open+0x84>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e00e      	b.n	80024e2 <HAL_PCD_EP_Open+0xa2>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 fa28 	bl	8004928 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 80024e0:	7afb      	ldrb	r3, [r7, #11]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 80024fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da08      	bge.n	8002514 <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002508:	015b      	lsls	r3, r3, #5
 800250a:	3328      	adds	r3, #40	; 0x28
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e008      	b.n	8002526 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800251a:	015b      	lsls	r3, r3, #5
 800251c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002532:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	09db      	lsrs	r3, r3, #7
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_PCD_EP_Close+0x66>
 800254c:	2302      	movs	r3, #2
 800254e:	e00e      	b.n	800256e <HAL_PCD_EP_Close+0x84>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68f9      	ldr	r1, [r7, #12]
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fca4 	bl	8004eac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	460b      	mov	r3, r1
 8002584:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800258a:	7afb      	ldrb	r3, [r7, #11]
 800258c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002590:	015b      	lsls	r3, r3, #5
 8002592:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4413      	add	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2200      	movs	r2, #0
 80025b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80025b4:	7afb      	ldrb	r3, [r7, #11]
 80025b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6979      	ldr	r1, [r7, #20]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 fdf3 	bl	80051bc <USB_EPStartXfer>
 80025d6:	e005      	b.n	80025e4 <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6979      	ldr	r1, [r7, #20]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fdec 	bl	80051bc <USB_EPStartXfer>
  }

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	3312      	adds	r3, #18
 8002604:	015b      	lsls	r3, r3, #5
 8002606:	4413      	add	r3, r2
 8002608:	3304      	adds	r3, #4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	460b      	mov	r3, r1
 8002626:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800262c:	7afb      	ldrb	r3, [r7, #11]
 800262e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002632:	015b      	lsls	r3, r3, #5
 8002634:	3328      	adds	r3, #40	; 0x28
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2201      	movs	r2, #1
 8002652:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002654:	7afb      	ldrb	r3, [r7, #11]
 8002656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800265a:	b2da      	uxtb	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8002660:	7afb      	ldrb	r3, [r7, #11]
 8002662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6979      	ldr	r1, [r7, #20]
 8002670:	4618      	mov	r0, r3
 8002672:	f002 fda3 	bl	80051bc <USB_EPStartXfer>
 8002676:	e005      	b.n	8002684 <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6979      	ldr	r1, [r7, #20]
 800267e:	4618      	mov	r0, r3
 8002680:	f002 fd9c 	bl	80051bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 800269e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	da08      	bge.n	80026b8 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ac:	015b      	lsls	r3, r3, #5
 80026ae:	3328      	adds	r3, #40	; 0x28
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e006      	b.n	80026c6 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	015b      	lsls	r3, r3, #5
 80026bc:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80026d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	09db      	lsrs	r3, r3, #7
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_EP_SetStall+0x68>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e01c      	b.n	8002730 <HAL_PCD_EP_SetStall+0xa2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68f9      	ldr	r1, [r7, #12]
 8002704:	4618      	mov	r0, r3
 8002706:	f002 ffdb 	bl	80056c0 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002710:	2b00      	cmp	r3, #0
 8002712:	d108      	bne.n	8002726 <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f003 f8ef 	bl	8005904 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8002748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800274c:	2b00      	cmp	r3, #0
 800274e:	da08      	bge.n	8002762 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002756:	015b      	lsls	r3, r3, #5
 8002758:	3328      	adds	r3, #40	; 0x28
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	e006      	b.n	8002770 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	015b      	lsls	r3, r3, #5
 8002766:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	09db      	lsrs	r3, r3, #7
 800278a:	b2db      	uxtb	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_PCD_EP_ClrStall+0x68>
 800279c:	2302      	movs	r3, #2
 800279e:	e00e      	b.n	80027be <HAL_PCD_EP_ClrStall+0x86>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 ffe6 	bl	8005780 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
  uint16_t count = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	837b      	strh	r3, [r7, #26]
  uint8_t epindex = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	767b      	strb	r3, [r7, #25]
  __IO uint16_t wIstr = 0;  
 80027dc:	2300      	movs	r3, #0
 80027de:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80027e4:	e308      	b.n	8002df8 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027e6:	89fb      	ldrh	r3, [r7, #14]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	767b      	strb	r3, [r7, #25]
    
    if (epindex == 0)
 80027f2:	7e7b      	ldrb	r3, [r7, #25]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 812a 	bne.w	8002a4e <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80027fa:	89fb      	ldrh	r3, [r7, #14]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d14d      	bne.n	80028a2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	b29b      	uxth	r3, r3
 800281c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3328      	adds	r3, #40	; 0x28
 8002822:	61fb      	str	r3, [r7, #28]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282c:	b29b      	uxth	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	3302      	adds	r3, #2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	441a      	add	r2, r3
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002860:	2100      	movs	r1, #0
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f004 fd50 	bl	8007308 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 82c1 	beq.w	8002df8 <PCD_EP_ISR_Handler+0x630>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 82bc 	bne.w	8002df8 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800288c:	b2da      	uxtb	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	b292      	uxth	r2, r2
 8002894:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028a0:	e2aa      	b.n	8002df8 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80028a8:	61fb      	str	r3, [r7, #28]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028b4:	89bb      	ldrh	r3, [r7, #12]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d031      	beq.n	8002924 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	3306      	adds	r3, #6
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	889a      	ldrh	r2, [r3, #4]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	b29b      	uxth	r3, r3
 8002902:	f003 f850 	bl	80059a6 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b299      	uxth	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002916:	400b      	ands	r3, r1
 8002918:	b29b      	uxth	r3, r3
 800291a:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f004 fcc9 	bl	80072b4 <HAL_PCD_SetupStageCallback>
 8002922:	e269      	b.n	8002df8 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002924:	89bb      	ldrh	r3, [r7, #12]
 8002926:	b29b      	uxth	r3, r3
 8002928:	b21b      	sxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	f280 8264 	bge.w	8002df8 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b299      	uxth	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002940:	400b      	ands	r3, r1
 8002942:	b29b      	uxth	r3, r3
 8002944:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	3306      	adds	r3, #6
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	4413      	add	r3, r2
 8002964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d011      	beq.n	80029a0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	6959      	ldr	r1, [r3, #20]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	889a      	ldrh	r2, [r3, #4]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	b29b      	uxth	r3, r3
 800298e:	f003 f80a 	bl	80059a6 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	441a      	add	r2, r3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80029a0:	2100      	movs	r1, #0
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f004 fc98 	bl	80072d8 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3306      	adds	r3, #6
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b3e      	cmp	r3, #62	; 0x3e
 80029c8:	d918      	bls.n	80029fc <PCD_EP_ISR_Handler+0x234>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	82fb      	strh	r3, [r7, #22]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <PCD_EP_ISR_Handler+0x21c>
 80029de:	8afb      	ldrh	r3, [r7, #22]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	82fb      	strh	r3, [r7, #22]
 80029e4:	8afb      	ldrh	r3, [r7, #22]
 80029e6:	029b      	lsls	r3, r3, #10
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e012      	b.n	8002a22 <PCD_EP_ISR_Handler+0x25a>
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	82fb      	strh	r3, [r7, #22]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <PCD_EP_ISR_Handler+0x24e>
 8002a10:	8afb      	ldrh	r3, [r7, #22]
 8002a12:	3301      	adds	r3, #1
 8002a14:	82fb      	strh	r3, [r7, #22]
 8002a16:	8afb      	ldrh	r3, [r7, #22]
 8002a18:	029b      	lsls	r3, r3, #10
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a32:	b29c      	uxth	r4, r3
 8002a34:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002a38:	b29c      	uxth	r4, r3
 8002a3a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002a3e:	b29c      	uxth	r4, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b98      	ldr	r3, [pc, #608]	; (8002ca8 <PCD_EP_ISR_Handler+0x4e0>)
 8002a46:	4323      	orrs	r3, r4
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	8013      	strh	r3, [r2, #0]
 8002a4c:	e1d4      	b.n	8002df8 <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	7e7b      	ldrb	r3, [r7, #25]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a60:	89bb      	ldrh	r3, [r7, #12]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b21b      	sxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f280 80d0 	bge.w	8002c0c <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	7e7b      	ldrb	r3, [r7, #25]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b299      	uxth	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	7e7b      	ldrb	r3, [r7, #25]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	441a      	add	r2, r3
 8002a88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a8c:	400b      	ands	r3, r1
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a92:	7e7b      	ldrb	r3, [r7, #25]
 8002a94:	015b      	lsls	r3, r3, #5
 8002a96:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	61fb      	str	r3, [r7, #28]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	7a9b      	ldrb	r3, [r3, #10]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d122      	bne.n	8002aee <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	3306      	adds	r3, #6
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad2:	837b      	strh	r3, [r7, #26]
          if (count != 0U)
 8002ad4:	8b7b      	ldrh	r3, [r7, #26]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d073      	beq.n	8002bc2 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	6959      	ldr	r1, [r3, #20]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	889a      	ldrh	r2, [r3, #4]
 8002ae6:	8b7b      	ldrh	r3, [r7, #26]
 8002ae8:	f002 ff5d 	bl	80059a6 <USB_ReadPMA>
 8002aec:	e069      	b.n	8002bc2 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d022      	beq.n	8002b4e <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b32:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8002b34:	8b7b      	ldrh	r3, [r7, #26]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d02b      	beq.n	8002b92 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	6959      	ldr	r1, [r3, #20]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	88da      	ldrh	r2, [r3, #6]
 8002b46:	8b7b      	ldrh	r3, [r7, #26]
 8002b48:	f002 ff2d 	bl	80059a6 <USB_ReadPMA>
 8002b4c:	e021      	b.n	8002b92 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	3306      	adds	r3, #6
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b78:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8002b7a:	8b7b      	ldrh	r3, [r7, #26]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	6959      	ldr	r1, [r3, #20]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	891a      	ldrh	r2, [r3, #8]
 8002b8c:	8b7b      	ldrh	r3, [r7, #26]
 8002b8e:	f002 ff0a 	bl	80059a6 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002ba8:	4013      	ands	r3, r2
 8002baa:	b299      	uxth	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	4b3c      	ldr	r3, [pc, #240]	; (8002cac <PCD_EP_ISR_Handler+0x4e4>)
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	8b7b      	ldrh	r3, [r7, #26]
 8002bc8:	441a      	add	r2, r3
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	8b7b      	ldrh	r3, [r7, #26]
 8002bd4:	441a      	add	r2, r3
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d004      	beq.n	8002bec <PCD_EP_ISR_Handler+0x424>
 8002be2:	8b7a      	ldrh	r2, [r7, #26]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d206      	bcs.n	8002bfa <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f004 fb70 	bl	80072d8 <HAL_PCD_DataOutStageCallback>
 8002bf8:	e008      	b.n	8002c0c <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	7819      	ldrb	r1, [r3, #0]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff fcb5 	bl	8002576 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c0c:	89bb      	ldrh	r3, [r7, #12]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80ef 	beq.w	8002df8 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c1a:	7e7b      	ldrb	r3, [r7, #25]
 8002c1c:	015b      	lsls	r3, r3, #5
 8002c1e:	3328      	adds	r3, #40	; 0x28
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	4413      	add	r3, r2
 8002c24:	61fb      	str	r3, [r7, #28]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	7e7b      	ldrb	r3, [r7, #25]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	7e7a      	ldrb	r2, [r7, #25]
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	440a      	add	r2, r1
 8002c42:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	7a9b      	ldrb	r3, [r3, #10]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d12c      	bne.n	8002cb0 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8083 	beq.w	8002d94 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	6959      	ldr	r1, [r3, #20]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	889a      	ldrh	r2, [r3, #4]
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	f002 fe3b 	bl	800591a <USB_WritePMA>
 8002ca4:	e076      	b.n	8002d94 <PCD_EP_ISR_Handler+0x5cc>
 8002ca6:	bf00      	nop
 8002ca8:	ffff8080 	.word	0xffff8080
 8002cac:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d026      	beq.n	8002d18 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d031      	beq.n	8002d64 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	6959      	ldr	r1, [r3, #20]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	88da      	ldrh	r2, [r3, #6]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f002 fe02 	bl	800591a <USB_WritePMA>
 8002d16:	e025      	b.n	8002d64 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3306      	adds	r3, #6
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	6959      	ldr	r1, [r3, #20]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	891a      	ldrh	r2, [r3, #8]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f002 fddb 	bl	800591a <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	b299      	uxth	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	441a      	add	r2, r3
 8002d8c:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <PCD_EP_ISR_Handler+0x650>)
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	3302      	adds	r3, #2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	441a      	add	r2, r3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f004 fa92 	bl	8007308 <HAL_PCD_DataInStageCallback>
 8002de4:	e008      	b.n	8002df8 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	7819      	ldrb	r1, [r3, #0]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff fc10 	bl	8002618 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	81fa      	strh	r2, [r7, #14]
 8002e06:	b21b      	sxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f6ff acec 	blt.w	80027e6 <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3724      	adds	r7, #36	; 0x24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}
 8002e18:	ffffc080 	.word	0xffffc080

08002e1c <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	817b      	strh	r3, [r7, #10]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002e3c:	897b      	ldrh	r3, [r7, #10]
 8002e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e42:	015b      	lsls	r3, r3, #5
 8002e44:	3328      	adds	r3, #40	; 0x28
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e006      	b.n	8002e5c <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e4e:	897b      	ldrh	r3, [r7, #10]
 8002e50:	015b      	lsls	r3, r3, #5
 8002e52:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4413      	add	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e5c:	893b      	ldrh	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	809a      	strh	r2, [r3, #4]
 8002e70:	e00b      	b.n	8002e8a <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2201      	movs	r2, #1
 8002e76:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_PWR_EnableBkUpAccess+0x14>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	420e0020 	.word	0x420e0020

08002eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8087 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002eca:	4b92      	ldr	r3, [pc, #584]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed6:	4b8f      	ldr	r3, [pc, #572]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d112      	bne.n	8002f08 <HAL_RCC_OscConfig+0x58>
 8002ee2:	4b8c      	ldr	r3, [pc, #560]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eee:	d10b      	bne.n	8002f08 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	4b88      	ldr	r3, [pc, #544]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d06c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x126>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d168      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e22d      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f10:	d106      	bne.n	8002f20 <HAL_RCC_OscConfig+0x70>
 8002f12:	4b80      	ldr	r3, [pc, #512]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7f      	ldr	r2, [pc, #508]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e02e      	b.n	8002f7e <HAL_RCC_OscConfig+0xce>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x92>
 8002f28:	4b7a      	ldr	r3, [pc, #488]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a79      	ldr	r2, [pc, #484]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b77      	ldr	r3, [pc, #476]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a76      	ldr	r2, [pc, #472]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	e01d      	b.n	8002f7e <HAL_RCC_OscConfig+0xce>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCC_OscConfig+0xb6>
 8002f4c:	4b71      	ldr	r3, [pc, #452]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a70      	ldr	r2, [pc, #448]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b6e      	ldr	r3, [pc, #440]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6d      	ldr	r2, [pc, #436]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e00b      	b.n	8002f7e <HAL_RCC_OscConfig+0xce>
 8002f66:	4b6b      	ldr	r3, [pc, #428]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6a      	ldr	r2, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b68      	ldr	r3, [pc, #416]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a67      	ldr	r2, [pc, #412]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d013      	beq.n	8002fae <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fd ffad 	bl	8000ee4 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8e:	f7fd ffa9 	bl	8000ee4 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b64      	cmp	r3, #100	; 0x64
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e1e1      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa0:	4b5c      	ldr	r3, [pc, #368]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0xde>
 8002fac:	e014      	b.n	8002fd8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fd ff99 	bl	8000ee4 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb6:	f7fd ff95 	bl	8000ee4 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b64      	cmp	r3, #100	; 0x64
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1cd      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc8:	4b52      	ldr	r3, [pc, #328]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x106>
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d063      	beq.n	80030ac <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fe4:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ff0:	4b48      	ldr	r3, [pc, #288]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d11c      	bne.n	8003036 <HAL_RCC_OscConfig+0x186>
 8002ffc:	4b45      	ldr	r3, [pc, #276]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d116      	bne.n	8003036 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003008:	4b42      	ldr	r3, [pc, #264]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_OscConfig+0x170>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e1a1      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b3c      	ldr	r3, [pc, #240]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4939      	ldr	r1, [pc, #228]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003034:	e03a      	b.n	80030ac <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d020      	beq.n	8003080 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303e:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_RCC_OscConfig+0x268>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fd ff4e 	bl	8000ee4 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304c:	f7fd ff4a 	bl	8000ee4 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e182      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4926      	ldr	r1, [pc, #152]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
 800307e:	e015      	b.n	80030ac <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003080:	4b25      	ldr	r3, [pc, #148]	; (8003118 <HAL_RCC_OscConfig+0x268>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fd ff2d 	bl	8000ee4 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308e:	f7fd ff29 	bl	8000ee4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e161      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a0:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d039      	beq.n	800312c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d019      	beq.n	80030f4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c6:	f7fd ff0d 	bl	8000ee4 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ce:	f7fd ff09 	bl	8000ee4 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e141      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_RCC_OscConfig+0x264>)
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80030ec:	2001      	movs	r0, #1
 80030ee:	f000 fae3 	bl	80036b8 <RCC_Delay>
 80030f2:	e01b      	b.n	800312c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_RCC_OscConfig+0x26c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fa:	f7fd fef3 	bl	8000ee4 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	e00e      	b.n	8003120 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003102:	f7fd feef 	bl	8000ee4 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d907      	bls.n	8003120 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e127      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
 8003114:	40021000 	.word	0x40021000
 8003118:	42420000 	.word	0x42420000
 800311c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b92      	ldr	r3, [pc, #584]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1ea      	bne.n	8003102 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a6 	beq.w	8003286 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b8b      	ldr	r3, [pc, #556]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b88      	ldr	r3, [pc, #544]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a87      	ldr	r2, [pc, #540]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	61d3      	str	r3, [r2, #28]
 8003156:	4b85      	ldr	r3, [pc, #532]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b82      	ldr	r3, [pc, #520]	; (8003370 <HAL_RCC_OscConfig+0x4c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b7f      	ldr	r3, [pc, #508]	; (8003370 <HAL_RCC_OscConfig+0x4c0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7e      	ldr	r2, [pc, #504]	; (8003370 <HAL_RCC_OscConfig+0x4c0>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fd feb1 	bl	8000ee4 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fd fead 	bl	8000ee4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	; 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0e5      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b75      	ldr	r3, [pc, #468]	; (8003370 <HAL_RCC_OscConfig+0x4c0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x30a>
 80031ac:	4b6f      	ldr	r3, [pc, #444]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a6e      	ldr	r2, [pc, #440]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	e02d      	b.n	8003216 <HAL_RCC_OscConfig+0x366>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x32c>
 80031c2:	4b6a      	ldr	r3, [pc, #424]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a69      	ldr	r2, [pc, #420]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a66      	ldr	r2, [pc, #408]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6213      	str	r3, [r2, #32]
 80031da:	e01c      	b.n	8003216 <HAL_RCC_OscConfig+0x366>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x34e>
 80031e4:	4b61      	ldr	r3, [pc, #388]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4a60      	ldr	r2, [pc, #384]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	4b5e      	ldr	r3, [pc, #376]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a5d      	ldr	r2, [pc, #372]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0x366>
 80031fe:	4b5b      	ldr	r3, [pc, #364]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a5a      	ldr	r2, [pc, #360]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	4b58      	ldr	r3, [pc, #352]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a57      	ldr	r2, [pc, #348]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fd fe61 	bl	8000ee4 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fd fe5d 	bl	8000ee4 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e093      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	4b4b      	ldr	r3, [pc, #300]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ee      	beq.n	8003226 <HAL_RCC_OscConfig+0x376>
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fd fe4b 	bl	8000ee4 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fd fe47 	bl	8000ee4 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e07d      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	4b40      	ldr	r3, [pc, #256]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ee      	bne.n	8003252 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b3c      	ldr	r3, [pc, #240]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4a3b      	ldr	r2, [pc, #236]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d069      	beq.n	8003362 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328e:	4b37      	ldr	r3, [pc, #220]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b08      	cmp	r3, #8
 8003298:	d061      	beq.n	800335e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d146      	bne.n	8003330 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b34      	ldr	r3, [pc, #208]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fd fe1c 	bl	8000ee4 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fd fe18 	bl	8000ee4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e050      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c2:	4b2a      	ldr	r3, [pc, #168]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d6:	d108      	bne.n	80032ea <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4921      	ldr	r1, [pc, #132]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ea:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a19      	ldr	r1, [r3, #32]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	430b      	orrs	r3, r1
 80032fc:	491b      	ldr	r1, [pc, #108]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fd fdec 	bl	8000ee4 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003310:	f7fd fde8 	bl	8000ee4 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e020      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003322:	4b12      	ldr	r3, [pc, #72]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x460>
 800332e:	e018      	b.n	8003362 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fd fdd5 	bl	8000ee4 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333e:	f7fd fdd1 	bl	8000ee4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e009      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_RCC_OscConfig+0x4bc>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f0      	bne.n	800333e <HAL_RCC_OscConfig+0x48e>
 800335c:	e001      	b.n	8003362 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000
 8003370:	40007000 	.word	0x40007000
 8003374:	42420060 	.word	0x42420060

08003378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003386:	4b7e      	ldr	r3, [pc, #504]	; (8003580 <HAL_RCC_ClockConfig+0x208>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d910      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003394:	4b7a      	ldr	r3, [pc, #488]	; (8003580 <HAL_RCC_ClockConfig+0x208>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 0207 	bic.w	r2, r3, #7
 800339c:	4978      	ldr	r1, [pc, #480]	; (8003580 <HAL_RCC_ClockConfig+0x208>)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033a4:	4b76      	ldr	r3, [pc, #472]	; (8003580 <HAL_RCC_ClockConfig+0x208>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e0e0      	b.n	8003578 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d020      	beq.n	8003404 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ce:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4a6c      	ldr	r2, [pc, #432]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 80033d4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033d8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4a66      	ldr	r2, [pc, #408]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 80033ec:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033f0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f2:	4b64      	ldr	r3, [pc, #400]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4961      	ldr	r1, [pc, #388]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d06a      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003418:	4b5a      	ldr	r3, [pc, #360]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d115      	bne.n	8003450 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0a7      	b.n	8003578 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d107      	bne.n	8003440 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003430:	4b54      	ldr	r3, [pc, #336]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e09b      	b.n	8003578 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	4b50      	ldr	r3, [pc, #320]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e093      	b.n	8003578 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003450:	4b4c      	ldr	r3, [pc, #304]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f023 0203 	bic.w	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4949      	ldr	r1, [pc, #292]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003462:	f7fd fd3f 	bl	8000ee4 <HAL_GetTick>
 8003466:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d112      	bne.n	8003496 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003472:	f7fd fd37 	bl	8000ee4 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e077      	b.n	8003578 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003488:	4b3e      	ldr	r3, [pc, #248]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b04      	cmp	r3, #4
 8003492:	d1ee      	bne.n	8003472 <HAL_RCC_ClockConfig+0xfa>
 8003494:	e027      	b.n	80034e6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d11d      	bne.n	80034da <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7fd fd20 	bl	8000ee4 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e060      	b.n	8003578 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034b6:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d1ee      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x128>
 80034c2:	e010      	b.n	80034e6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fd fd0e 	bl	8000ee4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e04e      	b.n	8003578 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034da:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1ee      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <HAL_RCC_ClockConfig+0x208>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d210      	bcs.n	8003516 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f4:	4b22      	ldr	r3, [pc, #136]	; (8003580 <HAL_RCC_ClockConfig+0x208>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 0207 	bic.w	r2, r3, #7
 80034fc:	4920      	ldr	r1, [pc, #128]	; (8003580 <HAL_RCC_ClockConfig+0x208>)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_RCC_ClockConfig+0x208>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e030      	b.n	8003578 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003522:	4b18      	ldr	r3, [pc, #96]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4915      	ldr	r1, [pc, #84]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	490d      	ldr	r1, [pc, #52]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003554:	f000 f81c 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8003558:	4601      	mov	r1, r0
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_RCC_ClockConfig+0x20c>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_RCC_ClockConfig+0x210>)
 8003566:	5cd3      	ldrb	r3, [r2, r3]
 8003568:	fa21 f303 	lsr.w	r3, r1, r3
 800356c:	4a07      	ldr	r2, [pc, #28]	; (800358c <HAL_RCC_ClockConfig+0x214>)
 800356e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003570:	2000      	movs	r0, #0
 8003572:	f7fd fc75 	bl	8000e60 <HAL_InitTick>
  
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40022000 	.word	0x40022000
 8003584:	40021000 	.word	0x40021000
 8003588:	0800789c 	.word	0x0800789c
 800358c:	20000000 	.word	0x20000000

08003590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003590:	b490      	push	{r4, r7}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003596:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003598:	1d3c      	adds	r4, r7, #4
 800359a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800359c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035a0:	4b28      	ldr	r3, [pc, #160]	; (8003644 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	2300      	movs	r3, #0
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x40>
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x46>
 80035ce:	e02d      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d0:	4b1e      	ldr	r3, [pc, #120]	; (800364c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035d2:	623b      	str	r3, [r7, #32]
      break;
 80035d4:	e02d      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	0c9b      	lsrs	r3, r3, #18
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035e2:	4413      	add	r3, r2
 80035e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035f4:	4b14      	ldr	r3, [pc, #80]	; (8003648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	0c5b      	lsrs	r3, r3, #17
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003602:	4413      	add	r3, r2
 8003604:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003608:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	4a0f      	ldr	r2, [pc, #60]	; (800364c <HAL_RCC_GetSysClockFreq+0xbc>)
 800360e:	fb02 f203 	mul.w	r2, r2, r3
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
 800361a:	e004      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	4a0c      	ldr	r2, [pc, #48]	; (8003650 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	623b      	str	r3, [r7, #32]
      break;
 800362a:	e002      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <HAL_RCC_GetSysClockFreq+0xbc>)
 800362e:	623b      	str	r3, [r7, #32]
      break;
 8003630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003632:	6a3b      	ldr	r3, [r7, #32]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3728      	adds	r7, #40	; 0x28
 8003638:	46bd      	mov	sp, r7
 800363a:	bc90      	pop	{r4, r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	0800782c 	.word	0x0800782c
 8003644:	0800783c 	.word	0x0800783c
 8003648:	40021000 	.word	0x40021000
 800364c:	007a1200 	.word	0x007a1200
 8003650:	003d0900 	.word	0x003d0900

08003654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003658:	4b02      	ldr	r3, [pc, #8]	; (8003664 <HAL_RCC_GetHCLKFreq+0x10>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	20000000 	.word	0x20000000

08003668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800366c:	f7ff fff2 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003670:	4601      	mov	r1, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4a03      	ldr	r2, [pc, #12]	; (800368c <HAL_RCC_GetPCLK1Freq+0x24>)
 800367e:	5cd3      	ldrb	r3, [r2, r3]
 8003680:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	080078ac 	.word	0x080078ac

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003694:	f7ff ffde 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 8003698:	4601      	mov	r1, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	0adb      	lsrs	r3, r3, #11
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4a03      	ldr	r2, [pc, #12]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a6:	5cd3      	ldrb	r3, [r2, r3]
 80036a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	080078ac 	.word	0x080078ac

080036b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <RCC_Delay+0x34>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <RCC_Delay+0x38>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0a5b      	lsrs	r3, r3, #9
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80036d4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1e5a      	subs	r2, r3, #1
 80036da:	60fa      	str	r2, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f9      	bne.n	80036d4 <RCC_Delay+0x1c>
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000000 	.word	0x20000000
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d07d      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003710:	2300      	movs	r3, #0
 8003712:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003714:	4b4f      	ldr	r3, [pc, #316]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003720:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4a4b      	ldr	r2, [pc, #300]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372a:	61d3      	str	r3, [r2, #28]
 800372c:	4b49      	ldr	r3, [pc, #292]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b46      	ldr	r3, [pc, #280]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d118      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003748:	4b43      	ldr	r3, [pc, #268]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a42      	ldr	r2, [pc, #264]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003752:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003754:	f7fd fbc6 	bl	8000ee4 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	e008      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375c:	f7fd fbc2 	bl	8000ee4 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e06d      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b3a      	ldr	r3, [pc, #232]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800377a:	4b36      	ldr	r3, [pc, #216]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003782:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02e      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d027      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003798:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037a2:	4b2e      	ldr	r3, [pc, #184]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037a8:	4b2c      	ldr	r3, [pc, #176]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ae:	4a29      	ldr	r2, [pc, #164]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d014      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fd fb91 	bl	8000ee4 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c4:	e00a      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7fd fb8d 	bl	8000ee4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e036      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ee      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4917      	ldr	r1, [pc, #92]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003800:	4b14      	ldr	r3, [pc, #80]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	490b      	ldr	r1, [pc, #44]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	4904      	ldr	r1, [pc, #16]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	40007000 	.word	0x40007000
 800385c:	42420440 	.word	0x42420440

08003860 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b08d      	sub	sp, #52	; 0x34
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003868:	4b6c      	ldr	r3, [pc, #432]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800386a:	f107 040c 	add.w	r4, r7, #12
 800386e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003874:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	2300      	movs	r3, #0
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	2300      	movs	r3, #0
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3b01      	subs	r3, #1
 8003892:	2b0f      	cmp	r3, #15
 8003894:	f200 80b9 	bhi.w	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	08003983 	.word	0x08003983
 80038a4:	080039ef 	.word	0x080039ef
 80038a8:	08003a0b 	.word	0x08003a0b
 80038ac:	08003973 	.word	0x08003973
 80038b0:	08003a0b 	.word	0x08003a0b
 80038b4:	08003a0b 	.word	0x08003a0b
 80038b8:	08003a0b 	.word	0x08003a0b
 80038bc:	0800397b 	.word	0x0800397b
 80038c0:	08003a0b 	.word	0x08003a0b
 80038c4:	08003a0b 	.word	0x08003a0b
 80038c8:	08003a0b 	.word	0x08003a0b
 80038cc:	08003a0b 	.word	0x08003a0b
 80038d0:	08003a0b 	.word	0x08003a0b
 80038d4:	08003a0b 	.word	0x08003a0b
 80038d8:	08003a0b 	.word	0x08003a0b
 80038dc:	080038e1 	.word	0x080038e1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80038e6:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 808d 	beq.w	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	0c9b      	lsrs	r3, r3, #18
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003900:	4413      	add	r3, r2
 8003902:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003906:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d018      	beq.n	8003944 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003912:	4b44      	ldr	r3, [pc, #272]	; (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	0c5b      	lsrs	r3, r3, #17
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003920:	4413      	add	r3, r2
 8003922:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003932:	4a3d      	ldr	r2, [pc, #244]	; (8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	fbb2 f2f3 	udiv	r2, r2, r3
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	fb02 f303 	mul.w	r3, r2, r3
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003942:	e004      	b.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	4a39      	ldr	r2, [pc, #228]	; (8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 8003948:	fb02 f303 	mul.w	r3, r2, r3
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800394e:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800395a:	d102      	bne.n	8003962 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003960:	e055      	b.n	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          frequency = (pllclk * 2) / 3;
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4a32      	ldr	r2, [pc, #200]	; (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003970:	e04d      	b.n	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003972:	f7ff fe0d 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 8003976:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003978:	e04a      	b.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800397a:	f7ff fe09 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 800397e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003980:	e046      	b.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003982:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003992:	d108      	bne.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 800399e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a4:	e022      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b0:	d109      	bne.n	80039c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80039b2:	4b1c      	ldr	r3, [pc, #112]	; (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80039be:	f649 4340 	movw	r3, #40000	; 0x9c40
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c4:	e012      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d0:	d109      	bne.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        frequency = HSE_VALUE / 128U;
 80039de:	f24f 4324 	movw	r3, #62500	; 0xf424
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e4:	e002      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 80039ec:	e010      	b.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80039ee:	f7ff fe4f 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	0b9b      	lsrs	r3, r3, #14
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	3301      	adds	r3, #1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a08:	e002      	b.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  default: 
    {
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      break;
 8003a0e:	bf00      	nop
    }
  }
  return(frequency);
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3734      	adds	r7, #52	; 0x34
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd90      	pop	{r4, r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	08007840 	.word	0x08007840
 8003a20:	08007850 	.word	0x08007850
 8003a24:	40021000 	.word	0x40021000
 8003a28:	007a1200 	.word	0x007a1200
 8003a2c:	003d0900 	.word	0x003d0900
 8003a30:	aaaaaaab 	.word	0xaaaaaaab

08003a34 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e084      	b.n	8003b54 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	7c5b      	ldrb	r3, [r3, #17]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fc ff8a 	bl	8000974 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f87a 	bl	8003b60 <HAL_RTC_WaitForSynchro>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2204      	movs	r2, #4
 8003a76:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e06b      	b.n	8003b54 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f89c 	bl	8003bba <RTC_EnterInitMode>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e060      	b.n	8003b54 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0207 	bic.w	r2, r2, #7
 8003aa0:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003aaa:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <HAL_RTC_Init+0x128>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a2b      	ldr	r2, [pc, #172]	; (8003b5c <HAL_RTC_Init+0x128>)
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003ab6:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <HAL_RTC_Init+0x128>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	4926      	ldr	r1, [pc, #152]	; (8003b5c <HAL_RTC_Init+0x128>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d003      	beq.n	8003ada <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e00e      	b.n	8003af8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003ada:	2001      	movs	r0, #1
 8003adc:	f7ff fec0 	bl	8003860 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ae0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d104      	bne.n	8003af2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2204      	movs	r2, #4
 8003aec:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e030      	b.n	8003b54 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 010f 	bic.w	r1, r3, #15
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	0c1a      	lsrs	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	b291      	uxth	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	430b      	orrs	r3, r1
 8003b22:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f870 	bl	8003c0a <RTC_ExitInitMode>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2204      	movs	r2, #4
 8003b34:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00c      	b.n	8003b54 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40006c00 	.word	0x40006c00

08003b60 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e01d      	b.n	8003bb2 <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0208 	bic.w	r2, r2, #8
 8003b84:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8003b86:	f7fd f9ad 	bl	8000ee4 <HAL_GetTick>
 8003b8a:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b8c:	e009      	b.n	8003ba2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8003b8e:	f7fd f9a9 	bl	8000ee4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e007      	b.n	8003bb2 <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ee      	beq.n	8003b8e <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 8003bc6:	f7fd f98d 	bl	8000ee4 <HAL_GetTick>
 8003bca:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bcc:	e009      	b.n	8003be2 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003bce:	f7fd f989 	bl	8000ee4 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bdc:	d901      	bls.n	8003be2 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e00f      	b.n	8003c02 <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ee      	beq.n	8003bce <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0210 	orr.w	r2, r2, #16
 8003bfe:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0210 	bic.w	r2, r2, #16
 8003c24:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8003c26:	f7fd f95d 	bl	8000ee4 <HAL_GetTick>
 8003c2a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c2c:	e009      	b.n	8003c42 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c2e:	f7fd f959 	bl	8000ee4 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c3c:	d901      	bls.n	8003c42 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e007      	b.n	8003c52 <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ee      	beq.n	8003c2e <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <HAL_RTCEx_BKUPWrite+0x30>)
 8003c6e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4413      	add	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	b292      	uxth	r2, r2
 8003c80:	601a      	str	r2, [r3, #0]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	40006c00 	.word	0x40006c00

08003c90 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 8003ca2:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <HAL_RTCEx_BKUPRead+0x34>)
 8003ca4:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4413      	add	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	40006c00 	.word	0x40006c00

08003cc8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e03f      	b.n	8003d5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc ffc2 	bl	8000c78 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	; 0x24
 8003cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d0a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fc7d 	bl	800460c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d30:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d40:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_UART_DeInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e016      	b.n	8003da2 <HAL_UART_DeInit+0x40>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fc fff9 	bl	8000d74 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b088      	sub	sp, #32
 8003dae:	af02      	add	r7, sp, #8
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	f040 8083 	bne.w	8003ed2 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Transmit+0x2e>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e07b      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Transmit+0x40>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e074      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2221      	movs	r2, #33	; 0x21
 8003dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e00:	f7fd f870 	bl	8000ee4 <HAL_GetTick>
 8003e04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	88fa      	ldrh	r2, [r7, #6]
 8003e0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003e12:	e042      	b.n	8003e9a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2a:	d122      	bne.n	8003e72 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2200      	movs	r2, #0
 8003e34:	2180      	movs	r1, #128	; 0x80
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fa6a 	bl	8004310 <UART_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e046      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e58:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	3302      	adds	r3, #2
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	e017      	b.n	8003e9a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	e013      	b.n	8003e9a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2180      	movs	r1, #128	; 0x80
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fa47 	bl	8004310 <UART_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e023      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	60ba      	str	r2, [r7, #8]
 8003e92:	781a      	ldrb	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1b7      	bne.n	8003e14 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2140      	movs	r1, #64	; 0x40
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fa2e 	bl	8004310 <UART_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e00a      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e000      	b.n	8003ed4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d166      	bne.n	8003fc4 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL) || (Size == 0U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_UART_Receive_DMA+0x26>
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e05f      	b.n	8003fc6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Receive_DMA+0x38>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e058      	b.n	8003fc6 <HAL_UART_Receive_DMA+0xea>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2222      	movs	r2, #34	; 0x22
 8003f32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3a:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <HAL_UART_Receive_DMA+0xf4>)
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f42:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <HAL_UART_Receive_DMA+0xf8>)
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <HAL_UART_Receive_DMA+0xfc>)
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	2200      	movs	r2, #0
 8003f54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4619      	mov	r1, r3
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	f7fd fa05 	bl	800137c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f9e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fbe:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	080041f9 	.word	0x080041f9
 8003fd4:	08004261 	.word	0x08004261
 8003fd8:	0800427d 	.word	0x0800427d

08003fdc <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10d      	bne.n	800402e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_UART_IRQHandler+0x52>
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa6f 	bl	800450a <UART_Receive_IT>
      return;
 800402c:	e0cc      	b.n	80041c8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80ab 	beq.w	800418c <HAL_UART_IRQHandler+0x1b0>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <HAL_UART_IRQHandler+0x70>
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80a0 	beq.w	800418c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_UART_IRQHandler+0x90>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	f043 0201 	orr.w	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_UART_IRQHandler+0xb0>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	f043 0202 	orr.w	r2, r3, #2
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_UART_IRQHandler+0xd0>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	f043 0204 	orr.w	r2, r3, #4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_UART_IRQHandler+0xf0>
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	f043 0208 	orr.w	r2, r3, #8
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d078      	beq.n	80041c6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <HAL_UART_IRQHandler+0x112>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fa0e 	bl	800450a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <HAL_UART_IRQHandler+0x13a>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d031      	beq.n	800417a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f959 	bl	80043ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d023      	beq.n	8004172 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004138:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	2b00      	cmp	r3, #0
 8004140:	d013      	beq.n	800416a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004146:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <HAL_UART_IRQHandler+0x1f4>)
 8004148:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414e:	4618      	mov	r0, r3
 8004150:	f7fd f974 	bl	800143c <HAL_DMA_Abort_IT>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004164:	4610      	mov	r0, r2
 8004166:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	e00e      	b.n	8004188 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fc fd72 	bl	8000c54 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	e00a      	b.n	8004188 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fc fd6e 	bl	8000c54 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	e006      	b.n	8004188 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc fd6a 	bl	8000c54 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004186:	e01e      	b.n	80041c6 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004188:	bf00      	nop
    return;
 800418a:	e01c      	b.n	80041c6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_UART_IRQHandler+0x1cc>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f945 	bl	8004430 <UART_Transmit_IT>
    return;
 80041a6:	e00f      	b.n	80041c8 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <HAL_UART_IRQHandler+0x1ec>
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f98c 	bl	80044da <UART_EndTransmit_IT>
    return;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80041c6:	bf00      	nop
  }
}
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	08004409 	.word	0x08004409

080041d4 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d11e      	bne.n	8004252 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004228:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004248:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7fc fd07 	bl	8000c66 <HAL_UART_RxCpltCallback>
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	60fb      	str	r3, [r7, #12]
  HAL_UART_RxHalfCpltCallback(huart); 
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff ffb9 	bl	80041e6 <HAL_UART_RxHalfCpltCallback>
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf14      	ite	ne
 800429c:	2301      	movne	r3, #1
 800429e:	2300      	moveq	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b21      	cmp	r3, #33	; 0x21
 80042ae:	d108      	bne.n	80042c2 <UART_DMAError+0x46>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2200      	movs	r2, #0
 80042ba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042bc:	68b8      	ldr	r0, [r7, #8]
 80042be:	f000 f871 	bl	80043a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b22      	cmp	r3, #34	; 0x22
 80042e2:	d108      	bne.n	80042f6 <UART_DMAError+0x7a>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2200      	movs	r2, #0
 80042ee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042f0:	68b8      	ldr	r0, [r7, #8]
 80042f2:	f000 f86c 	bl	80043ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	f043 0210 	orr.w	r2, r3, #16
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8004302:	68b8      	ldr	r0, [r7, #8]
 8004304:	f7fc fca6 	bl	8000c54 <HAL_UART_ErrorCallback>
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004320:	e02c      	b.n	800437c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d028      	beq.n	800437c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <UART_WaitOnFlagUntilTimeout+0x30>
 8004330:	f7fc fdd8 	bl	8000ee4 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	429a      	cmp	r2, r3
 800433e:	d21d      	bcs.n	800437c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800434e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e00f      	b.n	800439c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	429a      	cmp	r2, r3
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	429a      	cmp	r2, r3
 8004398:	d0c3      	beq.n	8004322 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80043ba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7fc fc16 	bl	8000c54 <HAL_UART_ErrorCallback>
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b21      	cmp	r3, #33	; 0x21
 8004442:	d144      	bne.n	80044ce <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444c:	d11a      	bne.n	8004484 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004462:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	1c9a      	adds	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	621a      	str	r2, [r3, #32]
 8004476:	e00e      	b.n	8004496 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	621a      	str	r2, [r3, #32]
 8004482:	e008      	b.n	8004496 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	1c59      	adds	r1, r3, #1
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6211      	str	r1, [r2, #32]
 800448e:	781a      	ldrb	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29b      	uxth	r3, r3
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4619      	mov	r1, r3
 80044a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr

080044da <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f0:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fe6a 	bl	80041d4 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b22      	cmp	r3, #34	; 0x22
 800451c:	d171      	bne.n	8004602 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004526:	d123      	bne.n	8004570 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10e      	bne.n	8004554 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	1c9a      	adds	r2, r3, #2
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	629a      	str	r2, [r3, #40]	; 0x28
 8004552:	e029      	b.n	80045a8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b29b      	uxth	r3, r3
 800455c:	b2db      	uxtb	r3, r3
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	629a      	str	r2, [r3, #40]	; 0x28
 800456e:	e01b      	b.n	80045a8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6858      	ldr	r0, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	1c59      	adds	r1, r3, #1
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6291      	str	r1, [r2, #40]	; 0x28
 8004588:	b2c2      	uxtb	r2, r0
 800458a:	701a      	strb	r2, [r3, #0]
 800458c:	e00c      	b.n	80045a8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	1c58      	adds	r0, r3, #1
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	6288      	str	r0, [r1, #40]	; 0x28
 80045a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4619      	mov	r1, r3
 80045b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d120      	bne.n	80045fe <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0220 	bic.w	r2, r2, #32
 80045ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045da:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0201 	bic.w	r2, r2, #1
 80045ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7fc fb36 	bl	8000c66 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e002      	b.n	8004604 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004602:	2302      	movs	r3, #2
  }
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800460c:	b5b0      	push	{r4, r5, r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800464e:	f023 030c 	bic.w	r3, r3, #12
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	430b      	orrs	r3, r1
 800465a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6f      	ldr	r2, [pc, #444]	; (8004834 <UART_SetConfig+0x228>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d16b      	bne.n	8004754 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800467c:	f7ff f808 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 8004680:	4602      	mov	r2, r0
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009a      	lsls	r2, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	fbb2 f3f3 	udiv	r3, r2, r3
 8004696:	4a68      	ldr	r2, [pc, #416]	; (8004838 <UART_SetConfig+0x22c>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	011c      	lsls	r4, r3, #4
 80046a0:	f7fe fff6 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	009a      	lsls	r2, r3, #2
 80046ae:	441a      	add	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80046ba:	f7fe ffe9 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 80046be:	4602      	mov	r2, r0
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009a      	lsls	r2, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	4a58      	ldr	r2, [pc, #352]	; (8004838 <UART_SetConfig+0x22c>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2264      	movs	r2, #100	; 0x64
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	1aeb      	subs	r3, r5, r3
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	3332      	adds	r3, #50	; 0x32
 80046e8:	4a53      	ldr	r2, [pc, #332]	; (8004838 <UART_SetConfig+0x22c>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f4:	441c      	add	r4, r3
 80046f6:	f7fe ffcb 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	009a      	lsls	r2, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004710:	f7fe ffbe 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 8004714:	4602      	mov	r2, r0
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009a      	lsls	r2, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	4a43      	ldr	r2, [pc, #268]	; (8004838 <UART_SetConfig+0x22c>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	2264      	movs	r2, #100	; 0x64
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	1aeb      	subs	r3, r5, r3
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	3332      	adds	r3, #50	; 0x32
 800473e:	4a3e      	ldr	r2, [pc, #248]	; (8004838 <UART_SetConfig+0x22c>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f003 020f 	and.w	r2, r3, #15
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4422      	add	r2, r4
 8004750:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004752:	e06a      	b.n	800482a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004754:	f7fe ff88 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 8004758:	4602      	mov	r2, r0
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009a      	lsls	r2, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	4a32      	ldr	r2, [pc, #200]	; (8004838 <UART_SetConfig+0x22c>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	011c      	lsls	r4, r3, #4
 8004778:	f7fe ff76 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 800477c:	4602      	mov	r2, r0
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009a      	lsls	r2, r3, #2
 8004786:	441a      	add	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004792:	f7fe ff69 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 8004796:	4602      	mov	r2, r0
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009a      	lsls	r2, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <UART_SetConfig+0x22c>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2264      	movs	r2, #100	; 0x64
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	1aeb      	subs	r3, r5, r3
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	3332      	adds	r3, #50	; 0x32
 80047c0:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <UART_SetConfig+0x22c>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047cc:	441c      	add	r4, r3
 80047ce:	f7fe ff4b 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 80047d2:	4602      	mov	r2, r0
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009a      	lsls	r2, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	fbb2 f5f3 	udiv	r5, r2, r3
 80047e8:	f7fe ff3e 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	009a      	lsls	r2, r3, #2
 80047f6:	441a      	add	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	4a0d      	ldr	r2, [pc, #52]	; (8004838 <UART_SetConfig+0x22c>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	2264      	movs	r2, #100	; 0x64
 800480c:	fb02 f303 	mul.w	r3, r2, r3
 8004810:	1aeb      	subs	r3, r5, r3
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	3332      	adds	r3, #50	; 0x32
 8004816:	4a08      	ldr	r2, [pc, #32]	; (8004838 <UART_SetConfig+0x22c>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	f003 020f 	and.w	r2, r3, #15
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4422      	add	r2, r4
 8004828:	609a      	str	r2, [r3, #8]
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bdb0      	pop	{r4, r5, r7, pc}
 8004832:	bf00      	nop
 8004834:	40013800 	.word	0x40013800
 8004838:	51eb851f 	.word	0x51eb851f

0800483c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800483c:	b084      	sub	sp, #16
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	f107 0014 	add.w	r0, r7, #20
 800484a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	b004      	add	sp, #16
 800485a:	4770      	bx	lr

0800485c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8004868:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800486c:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	b29b      	uxth	r3, r3
 800487a:	4313      	orrs	r3, r2
 800487c:	b29a      	uxth	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800489c:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 80048a0:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	43db      	mvns	r3, r3
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	4013      	ands	r3, r2
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048e0:	b084      	sub	sp, #16
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	f107 0014 	add.w	r0, r7, #20
 80048ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff ffa2 	bl	800485c <USB_EnableGlobalInt>
    
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004924:	b004      	add	sp, #16
 8004926:	4770      	bx	lr

08004928 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004928:	b490      	push	{r4, r7}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	78db      	ldrb	r3, [r3, #3]
 8004936:	2b03      	cmp	r3, #3
 8004938:	d85f      	bhi.n	80049fa <USB_ActivateEndpoint+0xd2>
 800493a:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <USB_ActivateEndpoint+0x18>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004951 	.word	0x08004951
 8004944:	080049cf 	.word	0x080049cf
 8004948:	0800497d 	.word	0x0800497d
 800494c:	080049a3 	.word	0x080049a3
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	b29b      	uxth	r3, r3
 800495e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	b29a      	uxth	r2, r3
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004976:	b292      	uxth	r2, r2
 8004978:	801a      	strh	r2, [r3, #0]
    break;
 800497a:	e03f      	b.n	80049fc <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	7812      	ldrb	r2, [r2, #0]
 8004990:	0092      	lsls	r2, r2, #2
 8004992:	440a      	add	r2, r1
 8004994:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499c:	b29b      	uxth	r3, r3
 800499e:	8013      	strh	r3, [r2, #0]
    break;
 80049a0:	e02c      	b.n	80049fc <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80049b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80049c8:	b292      	uxth	r2, r2
 80049ca:	801a      	strh	r2, [r3, #0]
    break;
 80049cc:	e016      	b.n	80049fc <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049f4:	b292      	uxth	r2, r2
 80049f6:	801a      	strh	r2, [r3, #0]
    break;
 80049f8:	e000      	b.n	80049fc <USB_ActivateEndpoint+0xd4>
  default:
      break;
 80049fa:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004a0e:	4013      	ands	r3, r2
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	b299      	uxth	r1, r3
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	441a      	add	r2, r3
 8004a26:	4b75      	ldr	r3, [pc, #468]	; (8004bfc <USB_ActivateEndpoint+0x2d4>)
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	7a9b      	ldrb	r3, [r3, #10]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f040 80e8 	bne.w	8004c08 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	785b      	ldrb	r3, [r3, #1]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d04c      	beq.n	8004ada <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	889b      	ldrh	r3, [r3, #4]
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	0059      	lsls	r1, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	005a      	lsls	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a66:	460a      	mov	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <USB_ActivateEndpoint+0x180>
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004a92:	4013      	ands	r3, r2
 8004a94:	b299      	uxth	r1, r3
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	4b57      	ldr	r3, [pc, #348]	; (8004c00 <USB_ActivateEndpoint+0x2d8>)
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004abe:	b29c      	uxth	r4, r3
 8004ac0:	f084 0320 	eor.w	r3, r4, #32
 8004ac4:	b29c      	uxth	r4, r3
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	441a      	add	r2, r3
 8004ad0:	4b4a      	ldr	r3, [pc, #296]	; (8004bfc <USB_ActivateEndpoint+0x2d4>)
 8004ad2:	4323      	orrs	r3, r4
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]
 8004ad8:	e1d9      	b.n	8004e8e <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	889b      	ldrh	r3, [r3, #4]
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	0059      	lsls	r1, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	3304      	adds	r3, #4
 8004af8:	005a      	lsls	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b02:	460a      	mov	r2, r1
 8004b04:	601a      	str	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4413      	add	r3, r2
 8004b18:	3306      	adds	r3, #6
 8004b1a:	005a      	lsls	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b2c:	d918      	bls.n	8004b60 <USB_ActivateEndpoint+0x238>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	81fb      	strh	r3, [r7, #14]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <USB_ActivateEndpoint+0x220>
 8004b42:	89fb      	ldrh	r3, [r7, #14]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	81fb      	strh	r3, [r7, #14]
 8004b48:	89fb      	ldrh	r3, [r7, #14]
 8004b4a:	029b      	lsls	r3, r3, #10
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e012      	b.n	8004b86 <USB_ActivateEndpoint+0x25e>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	81fb      	strh	r3, [r7, #14]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <USB_ActivateEndpoint+0x252>
 8004b74:	89fb      	ldrh	r3, [r7, #14]
 8004b76:	3301      	adds	r3, #1
 8004b78:	81fb      	strh	r3, [r7, #14]
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	029b      	lsls	r3, r3, #10
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d013      	beq.n	8004bc4 <USB_ActivateEndpoint+0x29c>
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004bae:	4013      	ands	r3, r2
 8004bb0:	b299      	uxth	r1, r3
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <USB_ActivateEndpoint+0x2dc>)
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bda:	b29c      	uxth	r4, r3
 8004bdc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004be0:	b29c      	uxth	r4, r3
 8004be2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004be6:	b29c      	uxth	r4, r3
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	441a      	add	r2, r3
 8004bf2:	4b02      	ldr	r3, [pc, #8]	; (8004bfc <USB_ActivateEndpoint+0x2d4>)
 8004bf4:	4323      	orrs	r3, r4
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	8013      	strh	r3, [r2, #0]
 8004bfa:	e148      	b.n	8004e8e <USB_ActivateEndpoint+0x566>
 8004bfc:	ffff8080 	.word	0xffff8080
 8004c00:	ffff80c0 	.word	0xffff80c0
 8004c04:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	f640 630f 	movw	r3, #3599	; 0xe0f
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	b299      	uxth	r1, r3
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	441a      	add	r2, r3
 8004c28:	4b9c      	ldr	r3, [pc, #624]	; (8004e9c <USB_ActivateEndpoint+0x574>)
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	88db      	ldrh	r3, [r3, #6]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	0059      	lsls	r1, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	005a      	lsls	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c56:	460a      	mov	r2, r1
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	891b      	ldrh	r3, [r3, #8]
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	0059      	lsls	r1, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	3304      	adds	r3, #4
 8004c78:	005a      	lsls	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c82:	460a      	mov	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]
    
    if (ep->is_in==0)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	785b      	ldrb	r3, [r3, #1]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f040 8083 	bne.w	8004d96 <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d013      	beq.n	8004cce <USB_ActivateEndpoint+0x3a6>
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004cb8:	4013      	ands	r3, r2
 8004cba:	b299      	uxth	r1, r3
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	4b76      	ldr	r3, [pc, #472]	; (8004ea0 <USB_ActivateEndpoint+0x578>)
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d013      	beq.n	8004d0c <USB_ActivateEndpoint+0x3e4>
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	b299      	uxth	r1, r3
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	441a      	add	r2, r3
 8004d04:	4b67      	ldr	r3, [pc, #412]	; (8004ea4 <USB_ActivateEndpoint+0x57c>)
 8004d06:	430b      	orrs	r3, r1
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004d1e:	4013      	ands	r3, r2
 8004d20:	b299      	uxth	r1, r3
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	4b5d      	ldr	r3, [pc, #372]	; (8004ea4 <USB_ActivateEndpoint+0x57c>)
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4a:	b29c      	uxth	r4, r3
 8004d4c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004d50:	b29c      	uxth	r4, r3
 8004d52:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004d56:	b29c      	uxth	r4, r3
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	4b51      	ldr	r3, [pc, #324]	; (8004ea8 <USB_ActivateEndpoint+0x580>)
 8004d64:	4323      	orrs	r3, r4
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d80:	b29c      	uxth	r4, r3
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	441a      	add	r2, r3
 8004d8c:	4b46      	ldr	r3, [pc, #280]	; (8004ea8 <USB_ActivateEndpoint+0x580>)
 8004d8e:	4323      	orrs	r3, r4
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	8013      	strh	r3, [r2, #0]
 8004d94:	e07b      	b.n	8004e8e <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d013      	beq.n	8004dd4 <USB_ActivateEndpoint+0x4ac>
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	b299      	uxth	r1, r3
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	4b34      	ldr	r3, [pc, #208]	; (8004ea0 <USB_ActivateEndpoint+0x578>)
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d013      	beq.n	8004e12 <USB_ActivateEndpoint+0x4ea>
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	b299      	uxth	r1, r3
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	441a      	add	r2, r3
 8004e0a:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <USB_ActivateEndpoint+0x57c>)
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004e24:	4013      	ands	r3, r2
 8004e26:	b299      	uxth	r1, r3
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <USB_ActivateEndpoint+0x578>)
 8004e34:	430b      	orrs	r3, r1
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e50:	b29c      	uxth	r4, r3
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	441a      	add	r2, r3
 8004e5c:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <USB_ActivateEndpoint+0x580>)
 8004e5e:	4323      	orrs	r3, r4
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	b29c      	uxth	r4, r3
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <USB_ActivateEndpoint+0x580>)
 8004e88:	4323      	orrs	r3, r4
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc90      	pop	{r4, r7}
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	ffff8180 	.word	0xffff8180
 8004ea0:	ffffc080 	.word	0xffffc080
 8004ea4:	ffff80c0 	.word	0xffff80c0
 8004ea8:	ffff8080 	.word	0xffff8080

08004eac <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004eac:	b490      	push	{r4, r7}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	7a9b      	ldrb	r3, [r3, #10]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d16d      	bne.n	8004f9a <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	785b      	ldrb	r3, [r3, #1]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d034      	beq.n	8004f30 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d013      	beq.n	8004f04 <USB_DeactivateEndpoint+0x58>
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004eee:	4013      	ands	r3, r2
 8004ef0:	b299      	uxth	r1, r3
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	441a      	add	r2, r3
 8004efc:	4b68      	ldr	r3, [pc, #416]	; (80050a0 <USB_DeactivateEndpoint+0x1f4>)
 8004efe:	430b      	orrs	r3, r1
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1a:	b29c      	uxth	r4, r3
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	4b5f      	ldr	r3, [pc, #380]	; (80050a4 <USB_DeactivateEndpoint+0x1f8>)
 8004f28:	4323      	orrs	r3, r4
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	8013      	strh	r3, [r2, #0]
 8004f2e:	e139      	b.n	80051a4 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d013      	beq.n	8004f6e <USB_DeactivateEndpoint+0xc2>
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004f58:	4013      	ands	r3, r2
 8004f5a:	b299      	uxth	r1, r3
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	4b50      	ldr	r3, [pc, #320]	; (80050a8 <USB_DeactivateEndpoint+0x1fc>)
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f84:	b29c      	uxth	r4, r3
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	441a      	add	r2, r3
 8004f90:	4b44      	ldr	r3, [pc, #272]	; (80050a4 <USB_DeactivateEndpoint+0x1f8>)
 8004f92:	4323      	orrs	r3, r4
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	8013      	strh	r3, [r2, #0]
 8004f98:	e104      	b.n	80051a4 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f040 8084 	bne.w	80050ac <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d013      	beq.n	8004fe2 <USB_DeactivateEndpoint+0x136>
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004fcc:	4013      	ands	r3, r2
 8004fce:	b299      	uxth	r1, r3
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	4b33      	ldr	r3, [pc, #204]	; (80050a8 <USB_DeactivateEndpoint+0x1fc>)
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d013      	beq.n	8005020 <USB_DeactivateEndpoint+0x174>
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b29a      	uxth	r2, r3
 8005006:	f640 730f 	movw	r3, #3855	; 0xf0f
 800500a:	4013      	ands	r3, r2
 800500c:	b299      	uxth	r1, r3
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <USB_DeactivateEndpoint+0x1f4>)
 800501a:	430b      	orrs	r3, r1
 800501c:	b29b      	uxth	r3, r3
 800501e:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	b29a      	uxth	r2, r3
 800502e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005032:	4013      	ands	r3, r2
 8005034:	b299      	uxth	r1, r3
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	441a      	add	r2, r3
 8005040:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <USB_DeactivateEndpoint+0x1f4>)
 8005042:	430b      	orrs	r3, r1
 8005044:	b29b      	uxth	r3, r3
 8005046:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	b29c      	uxth	r4, r3
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	441a      	add	r2, r3
 800506a:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <USB_DeactivateEndpoint+0x1f8>)
 800506c:	4323      	orrs	r3, r4
 800506e:	b29b      	uxth	r3, r3
 8005070:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005088:	b29c      	uxth	r4, r3
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	441a      	add	r2, r3
 8005094:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <USB_DeactivateEndpoint+0x1f8>)
 8005096:	4323      	orrs	r3, r4
 8005098:	b29b      	uxth	r3, r3
 800509a:	8013      	strh	r3, [r2, #0]
 800509c:	e082      	b.n	80051a4 <USB_DeactivateEndpoint+0x2f8>
 800509e:	bf00      	nop
 80050a0:	ffff80c0 	.word	0xffff80c0
 80050a4:	ffff8080 	.word	0xffff8080
 80050a8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d013      	beq.n	80050ea <USB_DeactivateEndpoint+0x23e>
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80050d4:	4013      	ands	r3, r2
 80050d6:	b299      	uxth	r1, r3
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	441a      	add	r2, r3
 80050e2:	4b33      	ldr	r3, [pc, #204]	; (80051b0 <USB_DeactivateEndpoint+0x304>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d013      	beq.n	8005128 <USB_DeactivateEndpoint+0x27c>
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29a      	uxth	r2, r3
 800510e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005112:	4013      	ands	r3, r2
 8005114:	b299      	uxth	r1, r3
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	441a      	add	r2, r3
 8005120:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <USB_DeactivateEndpoint+0x308>)
 8005122:	430b      	orrs	r3, r1
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29a      	uxth	r2, r3
 8005136:	f640 730f 	movw	r3, #3855	; 0xf0f
 800513a:	4013      	ands	r3, r2
 800513c:	b299      	uxth	r1, r3
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	441a      	add	r2, r3
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <USB_DeactivateEndpoint+0x304>)
 800514a:	430b      	orrs	r3, r1
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005166:	b29c      	uxth	r4, r3
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <USB_DeactivateEndpoint+0x30c>)
 8005174:	4323      	orrs	r3, r4
 8005176:	b29b      	uxth	r3, r3
 8005178:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800518c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005190:	b29c      	uxth	r4, r3
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	441a      	add	r2, r3
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <USB_DeactivateEndpoint+0x30c>)
 800519e:	4323      	orrs	r3, r4
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc90      	pop	{r4, r7}
 80051ae:	4770      	bx	lr
 80051b0:	ffffc080 	.word	0xffffc080
 80051b4:	ffff80c0 	.word	0xffff80c0
 80051b8:	ffff8080 	.word	0xffff8080

080051bc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b08d      	sub	sp, #52	; 0x34
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	f040 8149 	bne.w	800546c <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d909      	bls.n	80051fa <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	699a      	ldr	r2, [r3, #24]
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	1ad2      	subs	r2, r2, r3
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	619a      	str	r2, [r3, #24]
 80051f8:	e005      	b.n	8005206 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2200      	movs	r2, #0
 8005204:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	7a9b      	ldrb	r3, [r3, #10]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d11b      	bne.n	8005246 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6959      	ldr	r1, [r3, #20]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	889a      	ldrh	r2, [r3, #4]
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	b29b      	uxth	r3, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fb7d 	bl	800591a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005226:	b29b      	uxth	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	3302      	adds	r3, #2
 8005234:	005a      	lsls	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800523e:	461a      	mov	r2, r3
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	e0f6      	b.n	8005434 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d059      	beq.n	8005310 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d13b      	bne.n	80052dc <USB_EPStartXfer+0x120>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800526a:	b29b      	uxth	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	4413      	add	r3, r2
 8005276:	3306      	adds	r3, #6
 8005278:	005a      	lsls	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	2b3e      	cmp	r3, #62	; 0x3e
 8005288:	d916      	bls.n	80052b8 <USB_EPStartXfer+0xfc>
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <USB_EPStartXfer+0xe4>
 800529a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800529c:	3b01      	subs	r3, #1
 800529e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052a2:	029b      	lsls	r3, r3, #10
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e027      	b.n	8005308 <USB_EPStartXfer+0x14c>
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <USB_EPStartXfer+0x112>
 80052c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052ca:	3301      	adds	r3, #1
 80052cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052d0:	029b      	lsls	r3, r3, #10
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e015      	b.n	8005308 <USB_EPStartXfer+0x14c>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d111      	bne.n	8005308 <USB_EPStartXfer+0x14c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	4413      	add	r3, r2
 80052f6:	3302      	adds	r3, #2
 80052f8:	005a      	lsls	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005302:	461a      	mov	r2, r3
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	891b      	ldrh	r3, [r3, #8]
 800530c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800530e:	e058      	b.n	80053c2 <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	785b      	ldrb	r3, [r3, #1]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d13b      	bne.n	8005390 <USB_EPStartXfer+0x1d4>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	3302      	adds	r3, #2
 800532c:	005a      	lsls	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	2b3e      	cmp	r3, #62	; 0x3e
 800533c:	d916      	bls.n	800536c <USB_EPStartXfer+0x1b0>
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <USB_EPStartXfer+0x198>
 800534e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005350:	3b01      	subs	r3, #1
 8005352:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005356:	029b      	lsls	r3, r3, #10
 8005358:	b29b      	uxth	r3, r3
 800535a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005362:	b29b      	uxth	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e027      	b.n	80053bc <USB_EPStartXfer+0x200>
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <USB_EPStartXfer+0x1c6>
 800537c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800537e:	3301      	adds	r3, #1
 8005380:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005384:	029b      	lsls	r3, r3, #10
 8005386:	b29b      	uxth	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	e015      	b.n	80053bc <USB_EPStartXfer+0x200>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d111      	bne.n	80053bc <USB_EPStartXfer+0x200>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	3302      	adds	r3, #2
 80053ac:	005a      	lsls	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b6:	461a      	mov	r2, r3
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	88db      	ldrh	r3, [r3, #6]
 80053c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6959      	ldr	r1, [r3, #20]
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 faa4 	bl	800591a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	785b      	ldrb	r3, [r3, #1]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d114      	bne.n	8005404 <USB_EPStartXfer+0x248>
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80053ec:	4013      	ands	r3, r2
 80053ee:	b299      	uxth	r1, r3
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	441a      	add	r2, r3
 80053fa:	4b92      	ldr	r3, [pc, #584]	; (8005644 <USB_EPStartXfer+0x488>)
 80053fc:	430b      	orrs	r3, r1
 80053fe:	b29b      	uxth	r3, r3
 8005400:	8013      	strh	r3, [r2, #0]
 8005402:	e017      	b.n	8005434 <USB_EPStartXfer+0x278>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d113      	bne.n	8005434 <USB_EPStartXfer+0x278>
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29a      	uxth	r2, r3
 800541a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800541e:	4013      	ands	r3, r2
 8005420:	b299      	uxth	r1, r3
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	441a      	add	r2, r3
 800542c:	4b86      	ldr	r3, [pc, #536]	; (8005648 <USB_EPStartXfer+0x48c>)
 800542e:	430b      	orrs	r3, r1
 8005430:	b29b      	uxth	r3, r3
 8005432:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544a:	b29c      	uxth	r4, r3
 800544c:	f084 0310 	eor.w	r3, r4, #16
 8005450:	b29c      	uxth	r4, r3
 8005452:	f084 0320 	eor.w	r3, r4, #32
 8005456:	b29c      	uxth	r4, r3
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	4b7a      	ldr	r3, [pc, #488]	; (800564c <USB_EPStartXfer+0x490>)
 8005464:	4323      	orrs	r3, r4
 8005466:	b29b      	uxth	r3, r3
 8005468:	8013      	strh	r3, [r2, #0]
 800546a:	e122      	b.n	80056b2 <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	429a      	cmp	r2, r3
 8005476:	d909      	bls.n	800548c <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	1ad2      	subs	r2, r2, r3
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	619a      	str	r2, [r3, #24]
 800548a:	e005      	b.n	8005498 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2200      	movs	r2, #0
 8005496:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	7a9b      	ldrb	r3, [r3, #10]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d13b      	bne.n	8005518 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	461a      	mov	r2, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	4413      	add	r3, r2
 80054b2:	3306      	adds	r3, #6
 80054b4:	005a      	lsls	r2, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	2b3e      	cmp	r3, #62	; 0x3e
 80054c4:	d916      	bls.n	80054f4 <USB_EPStartXfer+0x338>
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d102      	bne.n	80054dc <USB_EPStartXfer+0x320>
 80054d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054d8:	3b01      	subs	r3, #1
 80054da:	847b      	strh	r3, [r7, #34]	; 0x22
 80054dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e0c3      	b.n	800567c <USB_EPStartXfer+0x4c0>
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	085b      	lsrs	r3, r3, #1
 80054f8:	847b      	strh	r3, [r7, #34]	; 0x22
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <USB_EPStartXfer+0x34e>
 8005504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005506:	3301      	adds	r3, #1
 8005508:	847b      	strh	r3, [r7, #34]	; 0x22
 800550a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800550c:	029b      	lsls	r3, r3, #10
 800550e:	b29b      	uxth	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e0b1      	b.n	800567c <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d13b      	bne.n	8005598 <USB_EPStartXfer+0x3dc>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005526:	b29b      	uxth	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4413      	add	r3, r2
 8005532:	3302      	adds	r3, #2
 8005534:	005a      	lsls	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	2b3e      	cmp	r3, #62	; 0x3e
 8005544:	d916      	bls.n	8005574 <USB_EPStartXfer+0x3b8>
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	843b      	strh	r3, [r7, #32]
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <USB_EPStartXfer+0x3a0>
 8005556:	8c3b      	ldrh	r3, [r7, #32]
 8005558:	3b01      	subs	r3, #1
 800555a:	843b      	strh	r3, [r7, #32]
 800555c:	8c3b      	ldrh	r3, [r7, #32]
 800555e:	029b      	lsls	r3, r3, #10
 8005560:	b29b      	uxth	r3, r3
 8005562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556a:	b29b      	uxth	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e027      	b.n	80055c4 <USB_EPStartXfer+0x408>
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	085b      	lsrs	r3, r3, #1
 8005578:	843b      	strh	r3, [r7, #32]
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <USB_EPStartXfer+0x3ce>
 8005584:	8c3b      	ldrh	r3, [r7, #32]
 8005586:	3301      	adds	r3, #1
 8005588:	843b      	strh	r3, [r7, #32]
 800558a:	8c3b      	ldrh	r3, [r7, #32]
 800558c:	029b      	lsls	r3, r3, #10
 800558e:	b29b      	uxth	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	e015      	b.n	80055c4 <USB_EPStartXfer+0x408>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d111      	bne.n	80055c4 <USB_EPStartXfer+0x408>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	3302      	adds	r3, #2
 80055b4:	005a      	lsls	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055be:	461a      	mov	r2, r3
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d141      	bne.n	8005650 <USB_EPStartXfer+0x494>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4413      	add	r3, r2
 80055de:	3306      	adds	r3, #6
 80055e0:	005a      	lsls	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	2b3e      	cmp	r3, #62	; 0x3e
 80055f0:	d916      	bls.n	8005620 <USB_EPStartXfer+0x464>
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	83fb      	strh	r3, [r7, #30]
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <USB_EPStartXfer+0x44c>
 8005602:	8bfb      	ldrh	r3, [r7, #30]
 8005604:	3b01      	subs	r3, #1
 8005606:	83fb      	strh	r3, [r7, #30]
 8005608:	8bfb      	ldrh	r3, [r7, #30]
 800560a:	029b      	lsls	r3, r3, #10
 800560c:	b29b      	uxth	r3, r3
 800560e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005616:	b29b      	uxth	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e02d      	b.n	800567c <USB_EPStartXfer+0x4c0>
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	83fb      	strh	r3, [r7, #30]
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <USB_EPStartXfer+0x47a>
 8005630:	8bfb      	ldrh	r3, [r7, #30]
 8005632:	3301      	adds	r3, #1
 8005634:	83fb      	strh	r3, [r7, #30]
 8005636:	8bfb      	ldrh	r3, [r7, #30]
 8005638:	029b      	lsls	r3, r3, #10
 800563a:	b29b      	uxth	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e01b      	b.n	800567c <USB_EPStartXfer+0x4c0>
 8005644:	ffff80c0 	.word	0xffff80c0
 8005648:	ffffc080 	.word	0xffffc080
 800564c:	ffff8080 	.word	0xffff8080
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	785b      	ldrb	r3, [r3, #1]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d111      	bne.n	800567c <USB_EPStartXfer+0x4c0>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565e:	b29b      	uxth	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	4413      	add	r3, r2
 800566a:	3302      	adds	r3, #2
 800566c:	005a      	lsls	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005676:	461a      	mov	r2, r3
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	b29c      	uxth	r4, r3
 8005694:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005698:	b29c      	uxth	r4, r3
 800569a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800569e:	b29c      	uxth	r4, r3
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	4b04      	ldr	r3, [pc, #16]	; (80056bc <USB_EPStartXfer+0x500>)
 80056ac:	4323      	orrs	r3, r4
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3734      	adds	r7, #52	; 0x34
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd90      	pop	{r4, r7, pc}
 80056bc:	ffff8080 	.word	0xffff8080

080056c0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 80056c0:	b490      	push	{r4, r7}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d118      	bne.n	8005704 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 80056e4:	401c      	ands	r4, r3
 80056e6:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 80056ea:	f084 0410 	eor.w	r4, r4, #16
 80056ee:	b2a1      	uxth	r1, r4
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	441a      	add	r2, r3
 80056fa:	4b20      	ldr	r3, [pc, #128]	; (800577c <USB_EPSetStall+0xbc>)
 80056fc:	430b      	orrs	r3, r1
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8013      	strh	r3, [r2, #0]
 8005702:	e034      	b.n	800576e <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	785b      	ldrb	r3, [r3, #1]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d018      	beq.n	800573e <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005722:	b29c      	uxth	r4, r3
 8005724:	f084 0310 	eor.w	r3, r4, #16
 8005728:	b29c      	uxth	r4, r3
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	4b11      	ldr	r3, [pc, #68]	; (800577c <USB_EPSetStall+0xbc>)
 8005736:	4323      	orrs	r3, r4
 8005738:	b29b      	uxth	r3, r3
 800573a:	8013      	strh	r3, [r2, #0]
 800573c:	e017      	b.n	800576e <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005754:	b29c      	uxth	r4, r3
 8005756:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800575a:	b29c      	uxth	r4, r3
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	441a      	add	r2, r3
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <USB_EPSetStall+0xbc>)
 8005768:	4323      	orrs	r3, r4
 800576a:	b29b      	uxth	r3, r3
 800576c:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bc90      	pop	{r4, r7}
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	ffff8080 	.word	0xffff8080

08005780 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005780:	b490      	push	{r4, r7}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d03a      	beq.n	8005808 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d013      	beq.n	80057d0 <USB_EPClearStall+0x50>
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80057ba:	4013      	ands	r3, r2
 80057bc:	b299      	uxth	r1, r3
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	441a      	add	r2, r3
 80057c8:	4b2f      	ldr	r3, [pc, #188]	; (8005888 <USB_EPClearStall+0x108>)
 80057ca:	430b      	orrs	r3, r1
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e6:	b29c      	uxth	r4, r3
 80057e8:	f084 0310 	eor.w	r3, r4, #16
 80057ec:	b29c      	uxth	r4, r3
 80057ee:	f084 0320 	eor.w	r3, r4, #32
 80057f2:	b29c      	uxth	r4, r3
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	441a      	add	r2, r3
 80057fe:	4b23      	ldr	r3, [pc, #140]	; (800588c <USB_EPClearStall+0x10c>)
 8005800:	4323      	orrs	r3, r4
 8005802:	b29b      	uxth	r3, r3
 8005804:	8013      	strh	r3, [r2, #0]
 8005806:	e039      	b.n	800587c <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d013      	beq.n	8005846 <USB_EPClearStall+0xc6>
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29a      	uxth	r2, r3
 800582c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005830:	4013      	ands	r3, r2
 8005832:	b299      	uxth	r1, r3
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	4b14      	ldr	r3, [pc, #80]	; (8005890 <USB_EPClearStall+0x110>)
 8005840:	430b      	orrs	r3, r1
 8005842:	b29b      	uxth	r3, r3
 8005844:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585c:	b29c      	uxth	r4, r3
 800585e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005862:	b29c      	uxth	r4, r3
 8005864:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005868:	b29c      	uxth	r4, r3
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	441a      	add	r2, r3
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <USB_EPClearStall+0x10c>)
 8005876:	4323      	orrs	r3, r4
 8005878:	b29b      	uxth	r3, r3
 800587a:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bc90      	pop	{r4, r7}
 8005886:	4770      	bx	lr
 8005888:	ffff80c0 	.word	0xffff80c0
 800588c:	ffff8080 	.word	0xffff8080
 8005890:	ffffc080 	.word	0xffffc080

08005894 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr

080058ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr

080058ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr

080058e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80058f8:	68fb      	ldr	r3, [r7, #12]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr

08005904 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800591a:	b480      	push	{r7}
 800591c:	b08b      	sub	sp, #44	; 0x2c
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	4611      	mov	r1, r2
 8005926:	461a      	mov	r2, r3
 8005928:	460b      	mov	r3, r1
 800592a:	80fb      	strh	r3, [r7, #6]
 800592c:	4613      	mov	r3, r2
 800592e:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8005930:	88bb      	ldrh	r3, [r7, #4]
 8005932:	3301      	adds	r3, #1
 8005934:	105b      	asrs	r3, r3, #1
 8005936:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
 800593c:	2300      	movs	r3, #0
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	461a      	mov	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005956:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
 800595c:	e01b      	b.n	8005996 <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	3301      	adds	r3, #1
 8005968:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	461a      	mov	r2, r3
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	623a      	str	r2, [r7, #32]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	b292      	uxth	r2, r2
 8005982:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	3302      	adds	r3, #2
 8005988:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3301      	adds	r3, #1
 800598e:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	3b01      	subs	r3, #1
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e0      	bne.n	800595e <USB_WritePMA+0x44>
  }
}
 800599c:	bf00      	nop
 800599e:	372c      	adds	r7, #44	; 0x2c
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr

080059a6 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b089      	sub	sp, #36	; 0x24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	4611      	mov	r1, r2
 80059b2:	461a      	mov	r2, r3
 80059b4:	460b      	mov	r3, r1
 80059b6:	80fb      	strh	r3, [r7, #6]
 80059b8:	4613      	mov	r3, r2
 80059ba:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80059bc:	88bb      	ldrh	r3, [r7, #4]
 80059be:	3301      	adds	r3, #1
 80059c0:	105b      	asrs	r3, r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	461a      	mov	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059da:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	e00e      	b.n	8005a00 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	1d1a      	adds	r2, r3, #4
 80059e6:	61ba      	str	r2, [r7, #24]
 80059e8:	6819      	ldr	r1, [r3, #0]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	60ba      	str	r2, [r7, #8]
 80059f0:	b28a      	uxth	r2, r1
 80059f2:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	3301      	adds	r3, #1
 80059f8:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1ed      	bne.n	80059e2 <USB_ReadPMA+0x3c>
  }
}
 8005a06:	bf00      	nop
 8005a08:	3724      	adds	r7, #36	; 0x24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr

08005a10 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	7c1b      	ldrb	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10e      	bne.n	8005a46 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	2181      	movs	r1, #129	; 0x81
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fd4a 	bl	80074ca <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8005a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f001 fd43 	bl	80074ca <USBD_LL_OpenEP>
 8005a44:	e00b      	b.n	8005a5e <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005a46:	2340      	movs	r3, #64	; 0x40
 8005a48:	2202      	movs	r2, #2
 8005a4a:	2181      	movs	r1, #129	; 0x81
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 fd3c 	bl	80074ca <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8005a52:	2340      	movs	r3, #64	; 0x40
 8005a54:	2202      	movs	r2, #2
 8005a56:	2101      	movs	r1, #1
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 fd36 	bl	80074ca <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8005a5e:	2308      	movs	r3, #8
 8005a60:	2203      	movs	r2, #3
 8005a62:	2182      	movs	r1, #130	; 0x82
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 fd30 	bl	80074ca <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005a6a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a6e:	f001 fe4d 	bl	800770c <USBD_static_malloc>
 8005a72:	4602      	mov	r2, r0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
 8005a88:	e026      	b.n	8005ad8 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a90:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	7c1b      	ldrb	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d109      	bne.n	8005ac8 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005abe:	2101      	movs	r1, #1
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 fdec 	bl	800769e <USBD_LL_PrepareReceive>
 8005ac6:	e007      	b.n	8005ad8 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ace:	2340      	movs	r3, #64	; 0x40
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f001 fde3 	bl	800769e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	460b      	mov	r3, r1
 8005aec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8005af2:	2181      	movs	r1, #129	; 0x81
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 fd0e 	bl	8007516 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8005afa:	2101      	movs	r1, #1
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 fd0a 	bl	8007516 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8005b02:	2182      	movs	r1, #130	; 0x82
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 fd06 	bl	8007516 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00e      	beq.n	8005b32 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b24:	4618      	mov	r0, r3
 8005b26:	f001 fdfd 	bl	8007724 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b4c:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d03a      	beq.n	8005bd0 <USBD_CDC_Setup+0x94>
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d000      	beq.n	8005b60 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8005b5e:	e043      	b.n	8005be8 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	88db      	ldrh	r3, [r3, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d029      	beq.n	8005bbc <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	b25b      	sxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da11      	bge.n	8005b96 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005b7e:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	88d2      	ldrh	r2, [r2, #6]
 8005b84:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8005b86:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	88db      	ldrh	r3, [r3, #6]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f001 f80e 	bl	8006bb0 <USBD_CtlSendData>
    break;
 8005b94:	e029      	b.n	8005bea <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	785a      	ldrb	r2, [r3, #1]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	88db      	ldrh	r3, [r3, #6]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8005bac:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	88db      	ldrh	r3, [r3, #6]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 f829 	bl	8006c0c <USBD_CtlPrepareRx>
    break;
 8005bba:	e016      	b.n	8005bea <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	7850      	ldrb	r0, [r2, #1]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	4798      	blx	r3
    break;
 8005bce:	e00c      	b.n	8005bea <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b0a      	cmp	r3, #10
 8005bd6:	d001      	beq.n	8005bdc <USBD_CDC_Setup+0xa0>
 8005bd8:	2b0b      	cmp	r3, #11
      break;
 8005bda:	e005      	b.n	8005be8 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8005bdc:	2201      	movs	r2, #1
 8005bde:	4905      	ldr	r1, [pc, #20]	; (8005bf4 <USBD_CDC_Setup+0xb8>)
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 ffe5 	bl	8006bb0 <USBD_CtlSendData>
      break;
 8005be6:	bf00      	nop
    break;
 8005be8:	bf00      	nop
  }
  return USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	200002ec 	.word	0x200002ec

08005bf8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c0a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e000      	b.n	8005c24 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8005c22:	2302      	movs	r3, #2
  }
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr

08005c2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c40:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 fd4c 	bl	80076e4 <USBD_LL_GetRxDataSize>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00d      	beq.n	8005c7a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c72:	4611      	mov	r1, r2
 8005c74:	4798      	blx	r3

    return USBD_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e000      	b.n	8005c7c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005c7a:	2302      	movs	r3, #2
  }
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c92:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d015      	beq.n	8005cca <USBD_CDC_EP0_RxReady+0x46>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ca4:	2bff      	cmp	r3, #255	; 0xff
 8005ca6:	d010      	beq.n	8005cca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005cb6:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005cbe:	b292      	uxth	r2, r2
 8005cc0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	22ff      	movs	r2, #255	; 0xff
 8005cc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2243      	movs	r2, #67	; 0x43
 8005ce0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005ce2:	4b03      	ldr	r3, [pc, #12]	; (8005cf0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	200000b4 	.word	0x200000b4

08005cf4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2243      	movs	r2, #67	; 0x43
 8005d00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005d02:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000070 	.word	0x20000070

08005d14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2243      	movs	r2, #67	; 0x43
 8005d20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005d22:	4b03      	ldr	r3, [pc, #12]	; (8005d30 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	200000f8 	.word	0x200000f8

08005d34 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	220a      	movs	r2, #10
 8005d40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005d42:	4b03      	ldr	r3, [pc, #12]	; (8005d50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	2000002c 	.word	0x2000002c

08005d54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8005d70:	2300      	movs	r3, #0
 8005d72:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr

08005d80 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005d94:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr

08005db2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005dc2:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr

08005dd8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005de6:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d017      	beq.n	8005e22 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d110      	bne.n	8005e1e <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2181      	movs	r1, #129	; 0x81
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f001 fc1f 	bl	8007658 <USBD_LL_Transmit>
      
      return USBD_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e002      	b.n	8005e24 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8005e22:	2302      	movs	r3, #2
  }
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e3a:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d017      	beq.n	8005e76 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	7c1b      	ldrb	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e58:	2101      	movs	r1, #1
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 fc1f 	bl	800769e <USBD_LL_PrepareReceive>
 8005e60:	e007      	b.n	8005e72 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e68:	2340      	movs	r3, #64	; 0x40
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f001 fc16 	bl	800769e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	e000      	b.n	8005e78 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005e76:	2302      	movs	r3, #2
  }
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8005e94:	2302      	movs	r3, #2
 8005e96:	e01a      	b.n	8005ece <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	79fa      	ldrb	r2, [r7, #7]
 8005ec4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f001 fa8a 	bl	80073e0 <USBD_LL_Init>
  
  return USBD_OK; 
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d006      	beq.n	8005ef8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]
 8005ef6:	e001      	b.n	8005efc <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8005ef8:	2302      	movs	r3, #2
 8005efa:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fabf 	bl	8007494 <USBD_LL_Start>
  
  return USBD_OK;  
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005f40:	2302      	movs	r3, #2
 8005f42:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00c      	beq.n	8005f68 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	78fa      	ldrb	r2, [r7, #3]
 8005f58:	4611      	mov	r1, r2
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	78fa      	ldrb	r2, [r7, #3]
 8005f88:	4611      	mov	r1, r2
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	4798      	blx	r3
  return USBD_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fd59 	bl	8006a62 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d00b      	beq.n	8005fec <USBD_LL_SetupStage+0x54>
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d011      	beq.n	8005ffc <USBD_LL_SetupStage+0x64>
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d117      	bne.n	800600c <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f987 	bl	80062f8 <USBD_StdDevReq>
    break;
 8005fea:	e01a      	b.n	8006022 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f9cf 	bl	8006398 <USBD_StdItfReq>
    break;
 8005ffa:	e012      	b.n	8006022 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f9fa 	bl	80063fe <USBD_StdEPReq>
    break;
 800600a:	e00a      	b.n	8006022 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8006012:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006016:	b2db      	uxtb	r3, r3
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 fa9a 	bl	8007554 <USBD_LL_StallEP>
    break;
 8006020:	bf00      	nop
  }  
  return USBD_OK;  
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	460b      	mov	r3, r1
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800603a:	7afb      	ldrb	r3, [r7, #11]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d138      	bne.n	80060b2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006046:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800604e:	2b03      	cmp	r3, #3
 8006050:	d142      	bne.n	80060d8 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	429a      	cmp	r2, r3
 800605c:	d914      	bls.n	8006088 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	4293      	cmp	r3, r2
 8006076:	bf28      	it	cs
 8006078:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800607a:	b29b      	uxth	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fde1 	bl	8006c48 <USBD_CtlContinueRx>
 8006086:	e027      	b.n	80060d8 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800609a:	2b03      	cmp	r3, #3
 800609c:	d105      	bne.n	80060aa <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fdde 	bl	8006c6c <USBD_CtlSendStatus>
 80060b0:	e012      	b.n	80060d8 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d107      	bne.n	80060d8 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	7afa      	ldrb	r2, [r7, #11]
 80060d2:	4611      	mov	r1, r2
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	4798      	blx	r3
  }  
  return USBD_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b086      	sub	sp, #24
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	460b      	mov	r3, r1
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80060f0:	7afb      	ldrb	r3, [r7, #11]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d16c      	bne.n	80061d0 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3314      	adds	r3, #20
 80060fa:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8006102:	2b02      	cmp	r3, #2
 8006104:	d157      	bne.n	80061b6 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	429a      	cmp	r2, r3
 8006110:	d915      	bls.n	800613e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	1ad2      	subs	r2, r2, r3
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8006124:	b29b      	uxth	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fd5c 	bl	8006be8 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8006130:	2300      	movs	r3, #0
 8006132:	2200      	movs	r2, #0
 8006134:	2100      	movs	r1, #0
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f001 fab1 	bl	800769e <USBD_LL_PrepareReceive>
 800613c:	e03b      	b.n	80061b6 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	68d2      	ldr	r2, [r2, #12]
 8006146:	fbb3 f1f2 	udiv	r1, r3, r2
 800614a:	fb02 f201 	mul.w	r2, r2, r1
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d11c      	bne.n	800618e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800615c:	429a      	cmp	r2, r3
 800615e:	d316      	bcc.n	800618e <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 800616a:	429a      	cmp	r2, r3
 800616c:	d20f      	bcs.n	800618e <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800616e:	2200      	movs	r2, #0
 8006170:	2100      	movs	r1, #0
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fd38 	bl	8006be8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8006180:	2300      	movs	r3, #0
 8006182:	2200      	movs	r2, #0
 8006184:	2100      	movs	r1, #0
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f001 fa89 	bl	800769e <USBD_LL_PrepareReceive>
 800618c:	e013      	b.n	80061b6 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d105      	bne.n	80061b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fd6e 	bl	8006c92 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d11a      	bne.n	80061f6 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff fead 	bl	8005f20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80061ce:	e012      	b.n	80061f6 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00c      	beq.n	80061f6 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d107      	bne.n	80061f6 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	7afa      	ldrb	r2, [r7, #11]
 80061f0:	4611      	mov	r1, r2
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	4798      	blx	r3
  }  
  return USBD_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8006208:	2340      	movs	r3, #64	; 0x40
 800620a:	2200      	movs	r2, #0
 800620c:	2100      	movs	r1, #0
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 f95b 	bl	80074ca <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2240      	movs	r2, #64	; 0x40
 8006218:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800621c:	2340      	movs	r3, #64	; 0x40
 800621e:	2200      	movs	r2, #0
 8006220:	2180      	movs	r1, #128	; 0x80
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 f951 	bl	80074ca <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2240      	movs	r2, #64	; 0x40
 800622c:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6852      	ldr	r2, [r2, #4]
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	4611      	mov	r1, r2
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	4798      	blx	r3
 
  
  return USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	78fa      	ldrb	r2, [r7, #3]
 800626e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr

0800627c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2204      	movs	r2, #4
 8006294:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr

080062c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d10b      	bne.n	80062ee <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	2b09      	cmp	r3, #9
 800630c:	d839      	bhi.n	8006382 <USBD_StdDevReq+0x8a>
 800630e:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <USBD_StdDevReq+0x1c>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	08006365 	.word	0x08006365
 8006318:	08006379 	.word	0x08006379
 800631c:	08006383 	.word	0x08006383
 8006320:	0800636f 	.word	0x0800636f
 8006324:	08006383 	.word	0x08006383
 8006328:	08006347 	.word	0x08006347
 800632c:	0800633d 	.word	0x0800633d
 8006330:	08006383 	.word	0x08006383
 8006334:	0800635b 	.word	0x0800635b
 8006338:	08006351 	.word	0x08006351
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f936 	bl	80065b0 <USBD_GetDescriptor>
    break;
 8006344:	e022      	b.n	800638c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fa25 	bl	8006798 <USBD_SetAddress>
    break;
 800634e:	e01d      	b.n	800638c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa5e 	bl	8006814 <USBD_SetConfig>
    break;
 8006358:	e018      	b.n	800638c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fae1 	bl	8006924 <USBD_GetConfig>
    break;
 8006362:	e013      	b.n	800638c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fb0e 	bl	8006988 <USBD_GetStatus>
    break;
 800636c:	e00e      	b.n	800638c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fb33 	bl	80069dc <USBD_SetFeature>
    break;
 8006376:	e009      	b.n	800638c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fb49 	bl	8006a12 <USBD_ClrFeature>
    break;
 8006380:	e004      	b.n	800638c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fba8 	bl	8006ada <USBD_CtlError>
    break;
 800638a:	bf00      	nop
  }
  
  return ret;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop

08006398 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d11b      	bne.n	80063e8 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	889b      	ldrh	r3, [r3, #4]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d811      	bhi.n	80063de <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	88db      	ldrh	r3, [r3, #6]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d110      	bne.n	80063f2 <USBD_StdItfReq+0x5a>
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10d      	bne.n	80063f2 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fc48 	bl	8006c6c <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80063dc:	e009      	b.n	80063f2 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fb7a 	bl	8006ada <USBD_CtlError>
    break;
 80063e6:	e004      	b.n	80063f2 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fb75 	bl	8006ada <USBD_CtlError>
    break;
 80063f0:	e000      	b.n	80063f4 <USBD_StdItfReq+0x5c>
    break;
 80063f2:	bf00      	nop
  }
  return USBD_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8006408:	2300      	movs	r3, #0
 800640a:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	889b      	ldrh	r3, [r3, #4]
 8006410:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800641a:	2b20      	cmp	r3, #32
 800641c:	d108      	bne.n	8006430 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	4798      	blx	r3
    
    return USBD_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e0ba      	b.n	80065a6 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d039      	beq.n	80064ac <USBD_StdEPReq+0xae>
 8006438:	2b03      	cmp	r3, #3
 800643a:	d002      	beq.n	8006442 <USBD_StdEPReq+0x44>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d06b      	beq.n	8006518 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8006440:	e0b0      	b.n	80065a4 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006448:	2b02      	cmp	r3, #2
 800644a:	d002      	beq.n	8006452 <USBD_StdEPReq+0x54>
 800644c:	2b03      	cmp	r3, #3
 800644e:	d00c      	beq.n	800646a <USBD_StdEPReq+0x6c>
 8006450:	e025      	b.n	800649e <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d027      	beq.n	80064a8 <USBD_StdEPReq+0xaa>
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b80      	cmp	r3, #128	; 0x80
 800645c:	d024      	beq.n	80064a8 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 f876 	bl	8007554 <USBD_LL_StallEP>
      break;	
 8006468:	e01e      	b.n	80064a8 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	885b      	ldrh	r3, [r3, #2]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <USBD_StdEPReq+0x8a>
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	2b80      	cmp	r3, #128	; 0x80
 800647c:	d004      	beq.n	8006488 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 f866 	bl	8007554 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fbe8 	bl	8006c6c <USBD_CtlSendStatus>
      break;
 800649c:	e005      	b.n	80064aa <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fb1a 	bl	8006ada <USBD_CtlError>
      break;    
 80064a6:	e000      	b.n	80064aa <USBD_StdEPReq+0xac>
      break;	
 80064a8:	bf00      	nop
    break;
 80064aa:	e07b      	b.n	80065a4 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d002      	beq.n	80064bc <USBD_StdEPReq+0xbe>
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d00c      	beq.n	80064d4 <USBD_StdEPReq+0xd6>
 80064ba:	e024      	b.n	8006506 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d026      	beq.n	8006510 <USBD_StdEPReq+0x112>
 80064c2:	7bbb      	ldrb	r3, [r7, #14]
 80064c4:	2b80      	cmp	r3, #128	; 0x80
 80064c6:	d023      	beq.n	8006510 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 f841 	bl	8007554 <USBD_LL_StallEP>
      break;	
 80064d2:	e01d      	b.n	8006510 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	885b      	ldrh	r3, [r3, #2]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d11b      	bne.n	8006514 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00b      	beq.n	80064fe <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 f851 	bl	8007592 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fbb4 	bl	8006c6c <USBD_CtlSendStatus>
      break;
 8006504:	e006      	b.n	8006514 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fae6 	bl	8006ada <USBD_CtlError>
      break;    
 800650e:	e002      	b.n	8006516 <USBD_StdEPReq+0x118>
      break;	
 8006510:	bf00      	nop
 8006512:	e047      	b.n	80065a4 <USBD_StdEPReq+0x1a6>
      break;
 8006514:	bf00      	nop
    break;
 8006516:	e045      	b.n	80065a4 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800651e:	2b02      	cmp	r3, #2
 8006520:	d002      	beq.n	8006528 <USBD_StdEPReq+0x12a>
 8006522:	2b03      	cmp	r3, #3
 8006524:	d00b      	beq.n	800653e <USBD_StdEPReq+0x140>
 8006526:	e036      	b.n	8006596 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800652e:	2b00      	cmp	r3, #0
 8006530:	d036      	beq.n	80065a0 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 f80c 	bl	8007554 <USBD_LL_StallEP>
      break;	
 800653c:	e030      	b.n	80065a0 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800653e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006542:	2b00      	cmp	r3, #0
 8006544:	da08      	bge.n	8006558 <USBD_StdEPReq+0x15a>
 8006546:	7bbb      	ldrb	r3, [r7, #14]
 8006548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800654c:	3301      	adds	r3, #1
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	4413      	add	r3, r2
 8006554:	3304      	adds	r3, #4
 8006556:	e007      	b.n	8006568 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8006558:	7bbb      	ldrb	r3, [r7, #14]
 800655a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800655e:	3310      	adds	r3, #16
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	4413      	add	r3, r2
 8006566:	3304      	adds	r3, #4
 8006568:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800656a:	7bbb      	ldrb	r3, [r7, #14]
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 f82e 	bl	80075d0 <USBD_LL_IsStallEP>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e002      	b.n	8006588 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8006588:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800658a:	2202      	movs	r2, #2
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fb0e 	bl	8006bb0 <USBD_CtlSendData>
      break;
 8006594:	e005      	b.n	80065a2 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fa9e 	bl	8006ada <USBD_CtlError>
      break;
 800659e:	e000      	b.n	80065a2 <USBD_StdEPReq+0x1a4>
      break;	
 80065a0:	bf00      	nop
    break;
 80065a2:	bf00      	nop
  }
  return ret;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	885b      	ldrh	r3, [r3, #2]
 80065be:	0a1b      	lsrs	r3, r3, #8
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	2b06      	cmp	r3, #6
 80065c6:	f200 80c9 	bhi.w	800675c <USBD_GetDescriptor+0x1ac>
 80065ca:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <USBD_GetDescriptor+0x20>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	080065ed 	.word	0x080065ed
 80065d4:	08006605 	.word	0x08006605
 80065d8:	08006645 	.word	0x08006645
 80065dc:	0800675d 	.word	0x0800675d
 80065e0:	0800675d 	.word	0x0800675d
 80065e4:	08006709 	.word	0x08006709
 80065e8:	0800672f 	.word	0x0800672f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	7c12      	ldrb	r2, [r2, #16]
 80065f8:	f107 010a 	add.w	r1, r7, #10
 80065fc:	4610      	mov	r0, r2
 80065fe:	4798      	blx	r3
 8006600:	60f8      	str	r0, [r7, #12]
    break;
 8006602:	e0b0      	b.n	8006766 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	7c1b      	ldrb	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10d      	bne.n	8006628 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	f107 020a 	add.w	r2, r7, #10
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
 800661c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3301      	adds	r3, #1
 8006622:	2202      	movs	r2, #2
 8006624:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006626:	e09e      	b.n	8006766 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	f107 020a 	add.w	r2, r7, #10
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
 8006638:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	2202      	movs	r2, #2
 8006640:	701a      	strb	r2, [r3, #0]
    break;
 8006642:	e090      	b.n	8006766 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	885b      	ldrh	r3, [r3, #2]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b05      	cmp	r3, #5
 800664c:	d856      	bhi.n	80066fc <USBD_GetDescriptor+0x14c>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <USBD_GetDescriptor+0xa4>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	0800666d 	.word	0x0800666d
 8006658:	08006685 	.word	0x08006685
 800665c:	0800669d 	.word	0x0800669d
 8006660:	080066b5 	.word	0x080066b5
 8006664:	080066cd 	.word	0x080066cd
 8006668:	080066e5 	.word	0x080066e5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	7c12      	ldrb	r2, [r2, #16]
 8006678:	f107 010a 	add.w	r1, r7, #10
 800667c:	4610      	mov	r0, r2
 800667e:	4798      	blx	r3
 8006680:	60f8      	str	r0, [r7, #12]
      break;
 8006682:	e040      	b.n	8006706 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	7c12      	ldrb	r2, [r2, #16]
 8006690:	f107 010a 	add.w	r1, r7, #10
 8006694:	4610      	mov	r0, r2
 8006696:	4798      	blx	r3
 8006698:	60f8      	str	r0, [r7, #12]
      break;
 800669a:	e034      	b.n	8006706 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	7c12      	ldrb	r2, [r2, #16]
 80066a8:	f107 010a 	add.w	r1, r7, #10
 80066ac:	4610      	mov	r0, r2
 80066ae:	4798      	blx	r3
 80066b0:	60f8      	str	r0, [r7, #12]
      break;
 80066b2:	e028      	b.n	8006706 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	7c12      	ldrb	r2, [r2, #16]
 80066c0:	f107 010a 	add.w	r1, r7, #10
 80066c4:	4610      	mov	r0, r2
 80066c6:	4798      	blx	r3
 80066c8:	60f8      	str	r0, [r7, #12]
      break;
 80066ca:	e01c      	b.n	8006706 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	7c12      	ldrb	r2, [r2, #16]
 80066d8:	f107 010a 	add.w	r1, r7, #10
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
 80066e0:	60f8      	str	r0, [r7, #12]
      break;
 80066e2:	e010      	b.n	8006706 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	7c12      	ldrb	r2, [r2, #16]
 80066f0:	f107 010a 	add.w	r1, r7, #10
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
      break;
 80066fa:	e004      	b.n	8006706 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f9eb 	bl	8006ada <USBD_CtlError>
      return;
 8006704:	e044      	b.n	8006790 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8006706:	e02e      	b.n	8006766 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7c1b      	ldrb	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d109      	bne.n	8006724 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006718:	f107 020a 	add.w	r2, r7, #10
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
 8006720:	60f8      	str	r0, [r7, #12]
      break;
 8006722:	e020      	b.n	8006766 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f9d7 	bl	8006ada <USBD_CtlError>
      return;
 800672c:	e030      	b.n	8006790 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	7c1b      	ldrb	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10d      	bne.n	8006752 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	f107 020a 	add.w	r2, r7, #10
 8006742:	4610      	mov	r0, r2
 8006744:	4798      	blx	r3
 8006746:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	2207      	movs	r2, #7
 800674e:	701a      	strb	r2, [r3, #0]
      break; 
 8006750:	e009      	b.n	8006766 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f9c0 	bl	8006ada <USBD_CtlError>
      return;
 800675a:	e019      	b.n	8006790 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f9bb 	bl	8006ada <USBD_CtlError>
    return;
 8006764:	e014      	b.n	8006790 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8006766:	897b      	ldrh	r3, [r7, #10]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d011      	beq.n	8006790 <USBD_GetDescriptor+0x1e0>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	88db      	ldrh	r3, [r3, #6]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00d      	beq.n	8006790 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	88da      	ldrh	r2, [r3, #6]
 8006778:	897b      	ldrh	r3, [r7, #10]
 800677a:	4293      	cmp	r3, r2
 800677c:	bf28      	it	cs
 800677e:	4613      	movcs	r3, r2
 8006780:	b29b      	uxth	r3, r3
 8006782:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8006784:	897b      	ldrh	r3, [r7, #10]
 8006786:	461a      	mov	r2, r3
 8006788:	68f9      	ldr	r1, [r7, #12]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa10 	bl	8006bb0 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop

08006798 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	889b      	ldrh	r3, [r3, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d12c      	bne.n	8006804 <USBD_SetAddress+0x6c>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	88db      	ldrh	r3, [r3, #6]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d128      	bne.n	8006804 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	885b      	ldrh	r3, [r3, #2]
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067bc:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d104      	bne.n	80067d2 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f985 	bl	8006ada <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80067d0:	e01c      	b.n	800680c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	7bfa      	ldrb	r2, [r7, #15]
 80067d6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 ff1b 	bl	800761a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fa41 	bl	8006c6c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80067f8:	e008      	b.n	800680c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006802:	e003      	b.n	800680c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f967 	bl	8006ada <USBD_CtlError>
  } 
}
 800680c:	bf00      	nop
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	885b      	ldrh	r3, [r3, #2]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	4b3e      	ldr	r3, [pc, #248]	; (8006920 <USBD_SetConfig+0x10c>)
 8006826:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8006828:	4b3d      	ldr	r3, [pc, #244]	; (8006920 <USBD_SetConfig+0x10c>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d904      	bls.n	800683a <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f951 	bl	8006ada <USBD_CtlError>
 8006838:	e06f      	b.n	800691a <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006840:	2b02      	cmp	r3, #2
 8006842:	d002      	beq.n	800684a <USBD_SetConfig+0x36>
 8006844:	2b03      	cmp	r3, #3
 8006846:	d023      	beq.n	8006890 <USBD_SetConfig+0x7c>
 8006848:	e062      	b.n	8006910 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800684a:	4b35      	ldr	r3, [pc, #212]	; (8006920 <USBD_SetConfig+0x10c>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01a      	beq.n	8006888 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8006852:	4b33      	ldr	r3, [pc, #204]	; (8006920 <USBD_SetConfig+0x10c>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2203      	movs	r2, #3
 8006860:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006864:	4b2e      	ldr	r3, [pc, #184]	; (8006920 <USBD_SetConfig+0x10c>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff fb62 	bl	8005f34 <USBD_SetClassConfig>
 8006870:	4603      	mov	r3, r0
 8006872:	2b02      	cmp	r3, #2
 8006874:	d104      	bne.n	8006880 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f92e 	bl	8006ada <USBD_CtlError>
          return;
 800687e:	e04c      	b.n	800691a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f9f3 	bl	8006c6c <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8006886:	e048      	b.n	800691a <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f9ef 	bl	8006c6c <USBD_CtlSendStatus>
      break;
 800688e:	e044      	b.n	800691a <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8006890:	4b23      	ldr	r3, [pc, #140]	; (8006920 <USBD_SetConfig+0x10c>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d112      	bne.n	80068be <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80068a0:	4b1f      	ldr	r3, [pc, #124]	; (8006920 <USBD_SetConfig+0x10c>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80068aa:	4b1d      	ldr	r3, [pc, #116]	; (8006920 <USBD_SetConfig+0x10c>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff fb5e 	bl	8005f72 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f9d8 	bl	8006c6c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80068bc:	e02d      	b.n	800691a <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 80068be:	4b18      	ldr	r3, [pc, #96]	; (8006920 <USBD_SetConfig+0x10c>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d01d      	beq.n	8006908 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff fb4c 	bl	8005f72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80068da:	4b11      	ldr	r3, [pc, #68]	; (8006920 <USBD_SetConfig+0x10c>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80068e4:	4b0e      	ldr	r3, [pc, #56]	; (8006920 <USBD_SetConfig+0x10c>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff fb22 	bl	8005f34 <USBD_SetClassConfig>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d104      	bne.n	8006900 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f8ee 	bl	8006ada <USBD_CtlError>
          return;
 80068fe:	e00c      	b.n	800691a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f9b3 	bl	8006c6c <USBD_CtlSendStatus>
      break;
 8006906:	e008      	b.n	800691a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f9af 	bl	8006c6c <USBD_CtlSendStatus>
      break;
 800690e:	e004      	b.n	800691a <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f8e1 	bl	8006ada <USBD_CtlError>
      break;
 8006918:	bf00      	nop
    }
  }
}
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	200002ed 	.word	0x200002ed

08006924 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	88db      	ldrh	r3, [r3, #6]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d004      	beq.n	8006940 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f8ce 	bl	8006ada <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800693e:	e01f      	b.n	8006980 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006946:	2b02      	cmp	r3, #2
 8006948:	d002      	beq.n	8006950 <USBD_GetConfig+0x2c>
 800694a:	2b03      	cmp	r3, #3
 800694c:	d00b      	beq.n	8006966 <USBD_GetConfig+0x42>
 800694e:	e012      	b.n	8006976 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800695a:	2201      	movs	r2, #1
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f926 	bl	8006bb0 <USBD_CtlSendData>
      break;
 8006964:	e00c      	b.n	8006980 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800696a:	2201      	movs	r2, #1
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f91e 	bl	8006bb0 <USBD_CtlSendData>
      break;
 8006974:	e004      	b.n	8006980 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f8ae 	bl	8006ada <USBD_CtlError>
      break;
 800697e:	bf00      	nop
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006998:	3b02      	subs	r3, #2
 800699a:	2b01      	cmp	r3, #1
 800699c:	d815      	bhi.n	80069ca <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f043 0202 	orr.w	r2, r3, #2
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 80069be:	2202      	movs	r2, #2
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f8f4 	bl	8006bb0 <USBD_CtlSendData>
                      2);
    break;
 80069c8:	e004      	b.n	80069d4 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f884 	bl	8006ada <USBD_CtlError>
    break;
 80069d2:	bf00      	nop
  }
}
 80069d4:	bf00      	nop
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	885b      	ldrh	r3, [r3, #2]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d10d      	bne.n	8006a0a <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f931 	bl	8006c6c <USBD_CtlSendStatus>
  }

}
 8006a0a:	bf00      	nop
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b082      	sub	sp, #8
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006a22:	3b02      	subs	r3, #2
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d812      	bhi.n	8006a4e <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	885b      	ldrh	r3, [r3, #2]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d113      	bne.n	8006a58 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f910 	bl	8006c6c <USBD_CtlSendStatus>
    }
    break;
 8006a4c:	e004      	b.n	8006a58 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f842 	bl	8006ada <USBD_CtlError>
    break;
 8006a56:	e000      	b.n	8006a5a <USBD_ClrFeature+0x48>
    break;
 8006a58:	bf00      	nop
  }
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781a      	ldrb	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	785a      	ldrb	r2, [r3, #1]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	3302      	adds	r3, #2
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	3303      	adds	r3, #3
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	3305      	adds	r3, #5
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	4413      	add	r3, r2
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	3306      	adds	r3, #6
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	3307      	adds	r3, #7
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	4413      	add	r3, r2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	80da      	strh	r2, [r3, #6]

}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr

08006ada <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8006ae4:	2180      	movs	r1, #128	; 0x80
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fd34 	bl	8007554 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8006aec:	2100      	movs	r1, #0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fd30 	bl	8007554 <USBD_LL_StallEP>
}
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d033      	beq.n	8006b7a <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f835 	bl	8006b82 <USBD_GetLen>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	881a      	ldrh	r2, [r3, #0]
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	1c59      	adds	r1, r3, #1
 8006b2e:	75f9      	strb	r1, [r7, #23]
 8006b30:	4619      	mov	r1, r3
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	440b      	add	r3, r1
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	75fa      	strb	r2, [r7, #23]
 8006b40:	461a      	mov	r2, r3
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	4413      	add	r3, r2
 8006b46:	2203      	movs	r2, #3
 8006b48:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8006b4a:	e012      	b.n	8006b72 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	60fa      	str	r2, [r7, #12]
 8006b52:	7dfa      	ldrb	r2, [r7, #23]
 8006b54:	1c51      	adds	r1, r2, #1
 8006b56:	75f9      	strb	r1, [r7, #23]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	75fa      	strb	r2, [r7, #23]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	2200      	movs	r2, #0
 8006b70:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e8      	bne.n	8006b4c <USBD_GetString+0x50>
    }
  } 
}
 8006b7a:	bf00      	nop
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8006b8e:	e005      	b.n	8006b9c <USBD_GetLen+0x1a>
    {
        len++;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	3301      	adds	r3, #1
 8006b94:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1f5      	bne.n	8006b90 <USBD_GetLen+0xe>
    }

    return len;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8006bc6:	88fa      	ldrh	r2, [r7, #6]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8006bcc:	88fa      	ldrh	r2, [r7, #6]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 fd3d 	bl	8007658 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fd2b 	bl	8007658 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2203      	movs	r2, #3
 8006c1e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8006c22:	88fa      	ldrh	r2, [r7, #6]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8006c2a:	88fa      	ldrh	r2, [r7, #6]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	2100      	movs	r1, #0
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fd30 	bl	800769e <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	4613      	mov	r3, r2
 8006c54:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 fd1e 	bl	800769e <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2204      	movs	r2, #4
 8006c78:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2100      	movs	r1, #0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fce8 	bl	8007658 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b082      	sub	sp, #8
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2205      	movs	r2, #5
 8006c9e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fcf8 	bl	800769e <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	4912      	ldr	r1, [pc, #72]	; (8006d08 <MX_USB_DEVICE_Init+0x50>)
 8006cc0:	4812      	ldr	r0, [pc, #72]	; (8006d0c <MX_USB_DEVICE_Init+0x54>)
 8006cc2:	f7ff f8dd 	bl	8005e80 <USBD_Init>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ccc:	f7f9 fc02 	bl	80004d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006cd0:	490f      	ldr	r1, [pc, #60]	; (8006d10 <MX_USB_DEVICE_Init+0x58>)
 8006cd2:	480e      	ldr	r0, [pc, #56]	; (8006d0c <MX_USB_DEVICE_Init+0x54>)
 8006cd4:	f7ff f8ff 	bl	8005ed6 <USBD_RegisterClass>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006cde:	f7f9 fbf9 	bl	80004d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ce2:	490c      	ldr	r1, [pc, #48]	; (8006d14 <MX_USB_DEVICE_Init+0x5c>)
 8006ce4:	4809      	ldr	r0, [pc, #36]	; (8006d0c <MX_USB_DEVICE_Init+0x54>)
 8006ce6:	f7ff f835 	bl	8005d54 <USBD_CDC_RegisterInterface>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006cf0:	f7f9 fbf0 	bl	80004d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006cf4:	4805      	ldr	r0, [pc, #20]	; (8006d0c <MX_USB_DEVICE_Init+0x54>)
 8006cf6:	f7ff f907 	bl	8005f08 <USBD_Start>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d00:	f7f9 fbe8 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d04:	bf00      	nop
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000158 	.word	0x20000158
 8006d0c:	200005b8 	.word	0x200005b8
 8006d10:	20000038 	.word	0x20000038
 8006d14:	20000148 	.word	0x20000148

08006d18 <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];
bool    rx_full = false;

uint32_t cdcAvailable(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8006d1e:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <cdcAvailable+0x2c>)
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <cdcAvailable+0x30>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	4a08      	ldr	r2, [pc, #32]	; (8006d4c <cdcAvailable+0x34>)
 8006d2a:	6812      	ldr	r2, [r2, #0]
 8006d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d30:	fb02 f201 	mul.w	r2, r2, r1
 8006d34:	1a9b      	subs	r3, r3, r2
 8006d36:	607b      	str	r3, [r7, #4]

  return ret;
 8006d38:	687b      	ldr	r3, [r7, #4]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr
 8006d44:	200002f0 	.word	0x200002f0
 8006d48:	200002f4 	.word	0x200002f4
 8006d4c:	20000144 	.word	0x20000144

08006d50 <cdcRead>:

uint8_t cdcRead(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8006d56:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <cdcRead+0x40>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a0e      	ldr	r2, [pc, #56]	; (8006d94 <cdcRead+0x44>)
 8006d5c:	5cd3      	ldrb	r3, [r2, r3]
 8006d5e:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 8006d60:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <cdcRead+0x40>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <cdcRead+0x48>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d00b      	beq.n	8006d84 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 8006d6c:	4b08      	ldr	r3, [pc, #32]	; (8006d90 <cdcRead+0x40>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3301      	adds	r3, #1
 8006d72:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <cdcRead+0x4c>)
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d7a:	fb02 f201 	mul.w	r2, r2, r1
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	4a03      	ldr	r2, [pc, #12]	; (8006d90 <cdcRead+0x40>)
 8006d82:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d84:	79fb      	ldrb	r3, [r7, #7]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr
 8006d90:	200002f4 	.word	0x200002f4
 8006d94:	20000fac 	.word	0x20000fac
 8006d98:	200002f0 	.word	0x200002f0
 8006d9c:	20000144 	.word	0x20000144

08006da0 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;    // overwrite
 8006daa:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <cdcDataIn+0x44>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	490e      	ldr	r1, [pc, #56]	; (8006de8 <cdcDataIn+0x48>)
 8006db0:	79fa      	ldrb	r2, [r7, #7]
 8006db2:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 8006db4:	4b0b      	ldr	r3, [pc, #44]	; (8006de4 <cdcDataIn+0x44>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3301      	adds	r3, #1
 8006dba:	4a0c      	ldr	r2, [pc, #48]	; (8006dec <cdcDataIn+0x4c>)
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dc2:	fb02 f201 	mul.w	r2, r2, r1
 8006dc6:	1a9b      	subs	r3, r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 8006dca:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <cdcDataIn+0x50>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d002      	beq.n	8006dda <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8006dd4:	4a03      	ldr	r2, [pc, #12]	; (8006de4 <cdcDataIn+0x44>)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6013      	str	r3, [r2, #0]
  }
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr
 8006de4:	200002f0 	.word	0x200002f0
 8006de8:	20000fac 	.word	0x20000fac
 8006dec:	20000144 	.word	0x20000144
 8006df0:	200002f4 	.word	0x200002f4

08006df4 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8006dfe:	f7f9 fac0 	bl	8000382 <millis>
 8006e02:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f8f8 	bl	8007000 <CDC_Transmit_FS>
 8006e10:	4603      	mov	r3, r0
 8006e12:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 8006e14:	7afb      	ldrb	r3, [r7, #11]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <cdcWrite+0x2a>
    {
      return length;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	e00e      	b.n	8006e3c <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d101      	bne.n	8006e28 <cdcWrite+0x34>
    {
      return 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	e009      	b.n	8006e3c <cdcWrite+0x48>
    }

    if(millis() - pre_time >= 100)    // time out handling.
 8006e28:	f7f9 faab 	bl	8000382 <millis>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b63      	cmp	r3, #99	; 0x63
 8006e34:	d800      	bhi.n	8006e38 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8006e36:	e7e5      	b.n	8006e04 <cdcWrite+0x10>
    {
      break;
 8006e38:	bf00      	nop
    }
  }
  return 0;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <cdcGetBaud>:


uint32_t cdcGetBaud(void)
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  return LineCoding.bitrate;
 8006e48:	4b02      	ldr	r3, [pc, #8]	; (8006e54 <cdcGetBaud+0x10>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr
 8006e54:	2000013c 	.word	0x2000013c

08006e58 <USB_CDC_SOF>:

uint8_t USB_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

  if(rx_full == true)
 8006e60:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <USB_CDC_SOF+0x3c>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d010      	beq.n	8006e8a <USB_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    /* amount of empty space in receive buffer */
    buf_len = (rx_len - cdcAvailable()) - 1;
 8006e68:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <USB_CDC_SOF+0x40>)
 8006e6a:	681c      	ldr	r4, [r3, #0]
 8006e6c:	f7ff ff54 	bl	8006d18 <cdcAvailable>
 8006e70:	4603      	mov	r3, r0
 8006e72:	1ae3      	subs	r3, r4, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b3f      	cmp	r3, #63	; 0x3f
 8006e7c:	d905      	bls.n	8006e8a <USB_CDC_SOF+0x32>
    {
      /* Allow next data transmission */
      USBD_CDC_ReceivePacket(pdev);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fe ffd4 	bl	8005e2c <USBD_CDC_ReceivePacket>
      rx_full = false;
 8006e84:	4b03      	ldr	r3, [pc, #12]	; (8006e94 <USB_CDC_SOF+0x3c>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	701a      	strb	r2, [r3, #0]
    }
  }


  return 0;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd90      	pop	{r4, r7, pc}
 8006e94:	200002f8 	.word	0x200002f8
 8006e98:	20000144 	.word	0x20000144

08006e9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4905      	ldr	r1, [pc, #20]	; (8006eb8 <CDC_Init_FS+0x1c>)
 8006ea4:	4805      	ldr	r0, [pc, #20]	; (8006ebc <CDC_Init_FS+0x20>)
 8006ea6:	f7fe ff6b 	bl	8005d80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006eaa:	4905      	ldr	r1, [pc, #20]	; (8006ec0 <CDC_Init_FS+0x24>)
 8006eac:	4803      	ldr	r0, [pc, #12]	; (8006ebc <CDC_Init_FS+0x20>)
 8006eae:	f7fe ff80 	bl	8005db2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006eb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20000bc4 	.word	0x20000bc4
 8006ebc:	200005b8 	.word	0x200005b8
 8006ec0:	200007dc 	.word	0x200007dc

08006ec4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ec8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr
	...

08006ed4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	6039      	str	r1, [r7, #0]
 8006ede:	71fb      	strb	r3, [r7, #7]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2b23      	cmp	r3, #35	; 0x23
 8006ee8:	d84a      	bhi.n	8006f80 <CDC_Control_FS+0xac>
 8006eea:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <CDC_Control_FS+0x1c>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f81 	.word	0x08006f81
 8006ef4:	08006f81 	.word	0x08006f81
 8006ef8:	08006f81 	.word	0x08006f81
 8006efc:	08006f81 	.word	0x08006f81
 8006f00:	08006f81 	.word	0x08006f81
 8006f04:	08006f81 	.word	0x08006f81
 8006f08:	08006f81 	.word	0x08006f81
 8006f0c:	08006f81 	.word	0x08006f81
 8006f10:	08006f81 	.word	0x08006f81
 8006f14:	08006f81 	.word	0x08006f81
 8006f18:	08006f81 	.word	0x08006f81
 8006f1c:	08006f81 	.word	0x08006f81
 8006f20:	08006f81 	.word	0x08006f81
 8006f24:	08006f81 	.word	0x08006f81
 8006f28:	08006f81 	.word	0x08006f81
 8006f2c:	08006f81 	.word	0x08006f81
 8006f30:	08006f81 	.word	0x08006f81
 8006f34:	08006f81 	.word	0x08006f81
 8006f38:	08006f81 	.word	0x08006f81
 8006f3c:	08006f81 	.word	0x08006f81
 8006f40:	08006f81 	.word	0x08006f81
 8006f44:	08006f81 	.word	0x08006f81
 8006f48:	08006f81 	.word	0x08006f81
 8006f4c:	08006f81 	.word	0x08006f81
 8006f50:	08006f81 	.word	0x08006f81
 8006f54:	08006f81 	.word	0x08006f81
 8006f58:	08006f81 	.word	0x08006f81
 8006f5c:	08006f81 	.word	0x08006f81
 8006f60:	08006f81 	.word	0x08006f81
 8006f64:	08006f81 	.word	0x08006f81
 8006f68:	08006f81 	.word	0x08006f81
 8006f6c:	08006f81 	.word	0x08006f81
 8006f70:	08006f81 	.word	0x08006f81
 8006f74:	08006f81 	.word	0x08006f81
 8006f78:	08006f81 	.word	0x08006f81
 8006f7c:	08006f81 	.word	0x08006f81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f80:	bf00      	nop
  }

  return (USBD_OK);
 8006f82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bc80      	pop	{r7}
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop

08006f90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f90:	b590      	push	{r4, r7, lr}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t buf_len;


  for(int i=0; i<*Len; i++)
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	e009      	b.n	8006fb4 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fef9 	bl	8006da0 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d8f0      	bhi.n	8006fa0 <CDC_Receive_FS+0x10>
  }

  /* amount of empty space in receive buffer */
  buf_len = (rx_len - cdcAvailable()) - 1;
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <CDC_Receive_FS+0x64>)
 8006fc0:	681c      	ldr	r4, [r3, #0]
 8006fc2:	f7ff fea9 	bl	8006d18 <cdcAvailable>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	1ae3      	subs	r3, r4, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b3f      	cmp	r3, #63	; 0x3f
 8006fd2:	d907      	bls.n	8006fe4 <CDC_Receive_FS+0x54>
  {
    /* Allow next data transmission */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	4808      	ldr	r0, [pc, #32]	; (8006ff8 <CDC_Receive_FS+0x68>)
 8006fd8:	f7fe feeb 	bl	8005db2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006fdc:	4806      	ldr	r0, [pc, #24]	; (8006ff8 <CDC_Receive_FS+0x68>)
 8006fde:	f7fe ff25 	bl	8005e2c <USBD_CDC_ReceivePacket>
 8006fe2:	e002      	b.n	8006fea <CDC_Receive_FS+0x5a>
  }
  else
  {
    /* wait as the insufficient buffer capacity */
    rx_full = true;
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <CDC_Receive_FS+0x6c>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 8006fea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd90      	pop	{r4, r7, pc}
 8006ff4:	20000144 	.word	0x20000144
 8006ff8:	200005b8 	.word	0x200005b8
 8006ffc:	200002f8 	.word	0x200002f8

08007000 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007010:	4b0d      	ldr	r3, [pc, #52]	; (8007048 <CDC_Transmit_FS+0x48>)
 8007012:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007016:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007022:	2301      	movs	r3, #1
 8007024:	e00b      	b.n	800703e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007026:	887b      	ldrh	r3, [r7, #2]
 8007028:	461a      	mov	r2, r3
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4806      	ldr	r0, [pc, #24]	; (8007048 <CDC_Transmit_FS+0x48>)
 800702e:	f7fe fea7 	bl	8005d80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007032:	4805      	ldr	r0, [pc, #20]	; (8007048 <CDC_Transmit_FS+0x48>)
 8007034:	f7fe fed0 	bl	8005dd8 <USBD_CDC_TransmitPacket>
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200005b8 	.word	0x200005b8

0800704c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	6039      	str	r1, [r7, #0]
 8007056:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2212      	movs	r2, #18
 800705c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800705e:	4b03      	ldr	r3, [pc, #12]	; (800706c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	bc80      	pop	{r7}
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	20000174 	.word	0x20000174

08007070 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2204      	movs	r2, #4
 8007080:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007082:	4b03      	ldr	r3, [pc, #12]	; (8007090 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000188 	.word	0x20000188

08007094 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	6039      	str	r1, [r7, #0]
 800709e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d105      	bne.n	80070b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	4907      	ldr	r1, [pc, #28]	; (80070c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80070aa:	4808      	ldr	r0, [pc, #32]	; (80070cc <USBD_FS_ProductStrDescriptor+0x38>)
 80070ac:	f7ff fd26 	bl	8006afc <USBD_GetString>
 80070b0:	e004      	b.n	80070bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	4904      	ldr	r1, [pc, #16]	; (80070c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80070b6:	4805      	ldr	r0, [pc, #20]	; (80070cc <USBD_FS_ProductStrDescriptor+0x38>)
 80070b8:	f7ff fd20 	bl	8006afc <USBD_GetString>
  }
  return USBD_StrDesc;
 80070bc:	4b02      	ldr	r3, [pc, #8]	; (80070c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200011ac 	.word	0x200011ac
 80070cc:	08007854 	.word	0x08007854

080070d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	4904      	ldr	r1, [pc, #16]	; (80070f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070e0:	4804      	ldr	r0, [pc, #16]	; (80070f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070e2:	f7ff fd0b 	bl	8006afc <USBD_GetString>
  return USBD_StrDesc;
 80070e6:	4b02      	ldr	r3, [pc, #8]	; (80070f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	200011ac 	.word	0x200011ac
 80070f4:	0800786c 	.word	0x0800786c

080070f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	6039      	str	r1, [r7, #0]
 8007102:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	221a      	movs	r2, #26
 8007108:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800710a:	f000 f843 	bl	8007194 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800710e:	4b02      	ldr	r3, [pc, #8]	; (8007118 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	2000018c 	.word	0x2000018c

0800711c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	6039      	str	r1, [r7, #0]
 8007126:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007128:	79fb      	ldrb	r3, [r7, #7]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d105      	bne.n	800713a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	4907      	ldr	r1, [pc, #28]	; (8007150 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007132:	4808      	ldr	r0, [pc, #32]	; (8007154 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007134:	f7ff fce2 	bl	8006afc <USBD_GetString>
 8007138:	e004      	b.n	8007144 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	4904      	ldr	r1, [pc, #16]	; (8007150 <USBD_FS_ConfigStrDescriptor+0x34>)
 800713e:	4805      	ldr	r0, [pc, #20]	; (8007154 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007140:	f7ff fcdc 	bl	8006afc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007144:	4b02      	ldr	r3, [pc, #8]	; (8007150 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	200011ac 	.word	0x200011ac
 8007154:	08007880 	.word	0x08007880

08007158 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	6039      	str	r1, [r7, #0]
 8007162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d105      	bne.n	8007176 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	4907      	ldr	r1, [pc, #28]	; (800718c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800716e:	4808      	ldr	r0, [pc, #32]	; (8007190 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007170:	f7ff fcc4 	bl	8006afc <USBD_GetString>
 8007174:	e004      	b.n	8007180 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	4904      	ldr	r1, [pc, #16]	; (800718c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800717a:	4805      	ldr	r0, [pc, #20]	; (8007190 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800717c:	f7ff fcbe 	bl	8006afc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007180:	4b02      	ldr	r3, [pc, #8]	; (800718c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	200011ac 	.word	0x200011ac
 8007190:	0800788c 	.word	0x0800788c

08007194 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800719a:	4b0f      	ldr	r3, [pc, #60]	; (80071d8 <Get_SerialNum+0x44>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071a0:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <Get_SerialNum+0x48>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071a6:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <Get_SerialNum+0x4c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4413      	add	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071ba:	2208      	movs	r2, #8
 80071bc:	4909      	ldr	r1, [pc, #36]	; (80071e4 <Get_SerialNum+0x50>)
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 f814 	bl	80071ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071c4:	2204      	movs	r2, #4
 80071c6:	4908      	ldr	r1, [pc, #32]	; (80071e8 <Get_SerialNum+0x54>)
 80071c8:	68b8      	ldr	r0, [r7, #8]
 80071ca:	f000 f80f 	bl	80071ec <IntToUnicode>
  }
}
 80071ce:	bf00      	nop
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	1ffff7e8 	.word	0x1ffff7e8
 80071dc:	1ffff7ec 	.word	0x1ffff7ec
 80071e0:	1ffff7f0 	.word	0x1ffff7f0
 80071e4:	2000018e 	.word	0x2000018e
 80071e8:	2000019e 	.word	0x2000019e

080071ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4613      	mov	r3, r2
 80071f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071fe:	2300      	movs	r3, #0
 8007200:	75fb      	strb	r3, [r7, #23]
 8007202:	e027      	b.n	8007254 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	0f1b      	lsrs	r3, r3, #28
 8007208:	2b09      	cmp	r3, #9
 800720a:	d80b      	bhi.n	8007224 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	0f1b      	lsrs	r3, r3, #28
 8007210:	b2da      	uxtb	r2, r3
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	4619      	mov	r1, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	440b      	add	r3, r1
 800721c:	3230      	adds	r2, #48	; 0x30
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	e00a      	b.n	800723a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	0f1b      	lsrs	r3, r3, #28
 8007228:	b2da      	uxtb	r2, r3
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	4619      	mov	r1, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	440b      	add	r3, r1
 8007234:	3237      	adds	r2, #55	; 0x37
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	3301      	adds	r3, #1
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	4413      	add	r3, r2
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	3301      	adds	r3, #1
 8007252:	75fb      	strb	r3, [r7, #23]
 8007254:	7dfa      	ldrb	r2, [r7, #23]
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	429a      	cmp	r2, r3
 800725a:	d3d3      	bcc.n	8007204 <IntToUnicode+0x18>
  }
}
 800725c:	bf00      	nop
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	bc80      	pop	{r7}
 8007264:	4770      	bx	lr
	...

08007268 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a0d      	ldr	r2, [pc, #52]	; (80072ac <HAL_PCD_MspInit+0x44>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d113      	bne.n	80072a2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800727a:	4b0d      	ldr	r3, [pc, #52]	; (80072b0 <HAL_PCD_MspInit+0x48>)
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	4a0c      	ldr	r2, [pc, #48]	; (80072b0 <HAL_PCD_MspInit+0x48>)
 8007280:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007284:	61d3      	str	r3, [r2, #28]
 8007286:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <HAL_PCD_MspInit+0x48>)
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007292:	2200      	movs	r2, #0
 8007294:	2100      	movs	r1, #0
 8007296:	2014      	movs	r0, #20
 8007298:	f7f9 ff3d 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800729c:	2014      	movs	r0, #20
 800729e:	f7f9 ff56 	bl	800114e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80072a2:	bf00      	nop
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40005c00 	.word	0x40005c00
 80072b0:	40021000 	.word	0x40021000

080072b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 80072c8:	4619      	mov	r1, r3
 80072ca:	4610      	mov	r0, r2
 80072cc:	f7fe fe64 	bl	8005f98 <USBD_LL_SetupStage>
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	015b      	lsls	r3, r3, #5
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	78fb      	ldrb	r3, [r7, #3]
 80072fa:	4619      	mov	r1, r3
 80072fc:	f7fe fe96 	bl	800602c <USBD_LL_DataOutStage>
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	015b      	lsls	r3, r3, #5
 8007320:	4413      	add	r3, r2
 8007322:	333c      	adds	r3, #60	; 0x3c
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	4619      	mov	r1, r3
 800732a:	f7fe feda 	bl	80060e2 <USBD_LL_DataInStage>
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe ffbd 	bl	80062c4 <USBD_LL_SOF>
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800735a:	2301      	movs	r3, #1
 800735c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d001      	beq.n	800736a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007366:	f7f9 f8b5 	bl	80004d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8007370:	7bfa      	ldrb	r2, [r7, #15]
 8007372:	4611      	mov	r1, r2
 8007374:	4618      	mov	r0, r3
 8007376:	f7fe ff72 	bl	800625e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe ff3d 	bl	8006200 <USBD_LL_Reset>
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe ff6c 	bl	800627c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d005      	beq.n	80073b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073ac:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <HAL_PCD_SuspendCallback+0x30>)
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	4a03      	ldr	r2, [pc, #12]	; (80073c0 <HAL_PCD_SuspendCallback+0x30>)
 80073b2:	f043 0306 	orr.w	r3, r3, #6
 80073b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	e000ed00 	.word	0xe000ed00

080073c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe ff66 	bl	80062a4 <USBD_LL_Resume>
}
 80073d8:	bf00      	nop
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80073e8:	4a28      	ldr	r2, [pc, #160]	; (800748c <USBD_LL_Init+0xac>)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a26      	ldr	r2, [pc, #152]	; (800748c <USBD_LL_Init+0xac>)
 80073f4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 80073f8:	4b24      	ldr	r3, [pc, #144]	; (800748c <USBD_LL_Init+0xac>)
 80073fa:	4a25      	ldr	r2, [pc, #148]	; (8007490 <USBD_LL_Init+0xb0>)
 80073fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80073fe:	4b23      	ldr	r3, [pc, #140]	; (800748c <USBD_LL_Init+0xac>)
 8007400:	2208      	movs	r2, #8
 8007402:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007404:	4b21      	ldr	r3, [pc, #132]	; (800748c <USBD_LL_Init+0xac>)
 8007406:	2202      	movs	r2, #2
 8007408:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800740a:	4b20      	ldr	r3, [pc, #128]	; (800748c <USBD_LL_Init+0xac>)
 800740c:	2200      	movs	r2, #0
 800740e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007410:	4b1e      	ldr	r3, [pc, #120]	; (800748c <USBD_LL_Init+0xac>)
 8007412:	2200      	movs	r2, #0
 8007414:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007416:	4b1d      	ldr	r3, [pc, #116]	; (800748c <USBD_LL_Init+0xac>)
 8007418:	2200      	movs	r2, #0
 800741a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800741c:	481b      	ldr	r0, [pc, #108]	; (800748c <USBD_LL_Init+0xac>)
 800741e:	f7fa fde8 	bl	8001ff2 <HAL_PCD_Init>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007428:	f7f9 f854 	bl	80004d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007432:	2318      	movs	r3, #24
 8007434:	2200      	movs	r2, #0
 8007436:	2100      	movs	r1, #0
 8007438:	f7fb fcf0 	bl	8002e1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007442:	2358      	movs	r3, #88	; 0x58
 8007444:	2200      	movs	r2, #0
 8007446:	2180      	movs	r1, #128	; 0x80
 8007448:	f7fb fce8 	bl	8002e1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007452:	23c0      	movs	r3, #192	; 0xc0
 8007454:	2200      	movs	r2, #0
 8007456:	2181      	movs	r1, #129	; 0x81
 8007458:	f7fb fce0 	bl	8002e1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007462:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007466:	2200      	movs	r2, #0
 8007468:	2101      	movs	r1, #1
 800746a:	f7fb fcd7 	bl	8002e1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007478:	2200      	movs	r2, #0
 800747a:	2182      	movs	r1, #130	; 0x82
 800747c:	f7fb fcce 	bl	8002e1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200013ac 	.word	0x200013ac
 8007490:	40005c00 	.word	0x40005c00

08007494 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fa fe7b 	bl	80021a6 <HAL_PCD_Start>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f948 	bl	800774c <USBD_Get_USB_Status>
 80074bc:	4603      	mov	r3, r0
 80074be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	4608      	mov	r0, r1
 80074d4:	4611      	mov	r1, r2
 80074d6:	461a      	mov	r2, r3
 80074d8:	4603      	mov	r3, r0
 80074da:	70fb      	strb	r3, [r7, #3]
 80074dc:	460b      	mov	r3, r1
 80074de:	70bb      	strb	r3, [r7, #2]
 80074e0:	4613      	mov	r3, r2
 80074e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80074f2:	78bb      	ldrb	r3, [r7, #2]
 80074f4:	883a      	ldrh	r2, [r7, #0]
 80074f6:	78f9      	ldrb	r1, [r7, #3]
 80074f8:	f7fa ffa2 	bl	8002440 <HAL_PCD_EP_Open>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	4618      	mov	r0, r3
 8007504:	f000 f922 	bl	800774c <USBD_Get_USB_Status>
 8007508:	4603      	mov	r3, r0
 800750a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800750c:	7bbb      	ldrb	r3, [r7, #14]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	460b      	mov	r3, r1
 8007520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007530:	78fa      	ldrb	r2, [r7, #3]
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f7fa ffd8 	bl	80024ea <HAL_PCD_EP_Close>
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	4618      	mov	r0, r3
 8007542:	f000 f903 	bl	800774c <USBD_Get_USB_Status>
 8007546:	4603      	mov	r3, r0
 8007548:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800754a:	7bbb      	ldrb	r3, [r7, #14]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800756e:	78fa      	ldrb	r2, [r7, #3]
 8007570:	4611      	mov	r1, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f7fb f88b 	bl	800268e <HAL_PCD_EP_SetStall>
 8007578:	4603      	mov	r3, r0
 800757a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f8e4 	bl	800774c <USBD_Get_USB_Status>
 8007584:	4603      	mov	r3, r0
 8007586:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007588:	7bbb      	ldrb	r3, [r7, #14]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fb f8c1 	bl	8002738 <HAL_PCD_EP_ClrStall>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f8c5 	bl	800774c <USBD_Get_USB_Status>
 80075c2:	4603      	mov	r3, r0
 80075c4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80075c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80075e2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80075e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	da08      	bge.n	80075fe <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	015b      	lsls	r3, r3, #5
 80075f6:	4413      	add	r3, r2
 80075f8:	332a      	adds	r3, #42	; 0x2a
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	e008      	b.n	8007610 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	015b      	lsls	r3, r3, #5
 8007608:	4413      	add	r3, r2
 800760a:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800760e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr

0800761a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007634:	78fa      	ldrb	r2, [r7, #3]
 8007636:	4611      	mov	r1, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f7fa fedc 	bl	80023f6 <HAL_PCD_SetAddress>
 800763e:	4603      	mov	r3, r0
 8007640:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	4618      	mov	r0, r3
 8007646:	f000 f881 	bl	800774c <USBD_Get_USB_Status>
 800764a:	4603      	mov	r3, r0
 800764c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800764e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	607a      	str	r2, [r7, #4]
 8007662:	461a      	mov	r2, r3
 8007664:	460b      	mov	r3, r1
 8007666:	72fb      	strb	r3, [r7, #11]
 8007668:	4613      	mov	r3, r2
 800766a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800767a:	893b      	ldrh	r3, [r7, #8]
 800767c:	7af9      	ldrb	r1, [r7, #11]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	f7fa ffca 	bl	8002618 <HAL_PCD_EP_Transmit>
 8007684:	4603      	mov	r3, r0
 8007686:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	4618      	mov	r0, r3
 800768c:	f000 f85e 	bl	800774c <USBD_Get_USB_Status>
 8007690:	4603      	mov	r3, r0
 8007692:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007694:	7dbb      	ldrb	r3, [r7, #22]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b086      	sub	sp, #24
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	461a      	mov	r2, r3
 80076aa:	460b      	mov	r3, r1
 80076ac:	72fb      	strb	r3, [r7, #11]
 80076ae:	4613      	mov	r3, r2
 80076b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80076c0:	893b      	ldrh	r3, [r7, #8]
 80076c2:	7af9      	ldrb	r1, [r7, #11]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	f7fa ff56 	bl	8002576 <HAL_PCD_EP_Receive>
 80076ca:	4603      	mov	r3, r0
 80076cc:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 f83b 	bl	800774c <USBD_Get_USB_Status>
 80076d6:	4603      	mov	r3, r0
 80076d8:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80076da:	7dbb      	ldrb	r3, [r7, #22]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80076f6:	78fa      	ldrb	r2, [r7, #3]
 80076f8:	4611      	mov	r1, r2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fa ff77 	bl	80025ee <HAL_PCD_EP_GetRxCount>
 8007700:	4603      	mov	r3, r0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007714:	4b02      	ldr	r3, [pc, #8]	; (8007720 <USBD_static_malloc+0x14>)
}
 8007716:	4618      	mov	r0, r3
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr
 8007720:	200002fc 	.word	0x200002fc

08007724 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]

}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr

08007736 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007742:	bf00      	nop
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	bc80      	pop	{r7}
 800774a:	4770      	bx	lr

0800774c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	2b03      	cmp	r3, #3
 800775e:	d817      	bhi.n	8007790 <USBD_Get_USB_Status+0x44>
 8007760:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <USBD_Get_USB_Status+0x1c>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	08007779 	.word	0x08007779
 800776c:	0800777f 	.word	0x0800777f
 8007770:	08007785 	.word	0x08007785
 8007774:	0800778b 	.word	0x0800778b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	73fb      	strb	r3, [r7, #15]
    break;
 800777c:	e00b      	b.n	8007796 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800777e:	2302      	movs	r3, #2
 8007780:	73fb      	strb	r3, [r7, #15]
    break;
 8007782:	e008      	b.n	8007796 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007784:	2301      	movs	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
    break;
 8007788:	e005      	b.n	8007796 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800778a:	2302      	movs	r3, #2
 800778c:	73fb      	strb	r3, [r7, #15]
    break;
 800778e:	e002      	b.n	8007796 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007790:	2302      	movs	r3, #2
 8007792:	73fb      	strb	r3, [r7, #15]
    break;
 8007794:	bf00      	nop
  }
  return usb_status;
 8007796:	7bfb      	ldrb	r3, [r7, #15]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop

080077a4 <main>:
 */

#include "main.h"

int main(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
  hwInit();
 80077a8:	f7f9 fb34 	bl	8000e14 <hwInit>
  apInit();
 80077ac:	f7f8 fd3a 	bl	8000224 <apInit>

  apMain();
 80077b0:	f7f8 fd46 	bl	8000240 <apMain>

  return 0;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <__libc_init_array>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	2500      	movs	r5, #0
 80077c0:	4e0c      	ldr	r6, [pc, #48]	; (80077f4 <__libc_init_array+0x38>)
 80077c2:	4c0d      	ldr	r4, [pc, #52]	; (80077f8 <__libc_init_array+0x3c>)
 80077c4:	1ba4      	subs	r4, r4, r6
 80077c6:	10a4      	asrs	r4, r4, #2
 80077c8:	42a5      	cmp	r5, r4
 80077ca:	d109      	bne.n	80077e0 <__libc_init_array+0x24>
 80077cc:	f000 f822 	bl	8007814 <_init>
 80077d0:	2500      	movs	r5, #0
 80077d2:	4e0a      	ldr	r6, [pc, #40]	; (80077fc <__libc_init_array+0x40>)
 80077d4:	4c0a      	ldr	r4, [pc, #40]	; (8007800 <__libc_init_array+0x44>)
 80077d6:	1ba4      	subs	r4, r4, r6
 80077d8:	10a4      	asrs	r4, r4, #2
 80077da:	42a5      	cmp	r5, r4
 80077dc:	d105      	bne.n	80077ea <__libc_init_array+0x2e>
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077e4:	4798      	blx	r3
 80077e6:	3501      	adds	r5, #1
 80077e8:	e7ee      	b.n	80077c8 <__libc_init_array+0xc>
 80077ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077ee:	4798      	blx	r3
 80077f0:	3501      	adds	r5, #1
 80077f2:	e7f2      	b.n	80077da <__libc_init_array+0x1e>
 80077f4:	080078b4 	.word	0x080078b4
 80077f8:	080078b4 	.word	0x080078b4
 80077fc:	080078b4 	.word	0x080078b4
 8007800:	080078b8 	.word	0x080078b8

08007804 <memset>:
 8007804:	4603      	mov	r3, r0
 8007806:	4402      	add	r2, r0
 8007808:	4293      	cmp	r3, r2
 800780a:	d100      	bne.n	800780e <memset+0xa>
 800780c:	4770      	bx	lr
 800780e:	f803 1b01 	strb.w	r1, [r3], #1
 8007812:	e7f9      	b.n	8007808 <memset+0x4>

08007814 <_init>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	bf00      	nop
 8007818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781a:	bc08      	pop	{r3}
 800781c:	469e      	mov	lr, r3
 800781e:	4770      	bx	lr

08007820 <_fini>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr
