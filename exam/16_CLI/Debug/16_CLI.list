
16_CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008804  080051e4  080051e4  000051e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800d9e8  0800d9e8  0000d9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db74  0800db74  00010204  2**0
                  CONTENTS
  4 .ARM          00000000  0800db74  0800db74  00010204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800db74  0800db74  00010204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db74  0800db74  0000db74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db78  0800db78  0000db78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800db7c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f38  20000204  0800dd80  00010204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000213c  0800dd80  0001213c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023758  00000000  00000000  0001022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005450  00000000  00000000  00033985  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  00038dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f58  00000000  00000000  00039f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cf06  00000000  00000000  0003aee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a0f6  00000000  00000000  00057de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e3e0  00000000  00000000  00071edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f02bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046d8  00000000  00000000  000f0338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080051e4 <__do_global_dtors_aux>:
 80051e4:	b510      	push	{r4, lr}
 80051e6:	4c05      	ldr	r4, [pc, #20]	; (80051fc <__do_global_dtors_aux+0x18>)
 80051e8:	7823      	ldrb	r3, [r4, #0]
 80051ea:	b933      	cbnz	r3, 80051fa <__do_global_dtors_aux+0x16>
 80051ec:	4b04      	ldr	r3, [pc, #16]	; (8005200 <__do_global_dtors_aux+0x1c>)
 80051ee:	b113      	cbz	r3, 80051f6 <__do_global_dtors_aux+0x12>
 80051f0:	4804      	ldr	r0, [pc, #16]	; (8005204 <__do_global_dtors_aux+0x20>)
 80051f2:	f3af 8000 	nop.w
 80051f6:	2301      	movs	r3, #1
 80051f8:	7023      	strb	r3, [r4, #0]
 80051fa:	bd10      	pop	{r4, pc}
 80051fc:	20000204 	.word	0x20000204
 8005200:	00000000 	.word	0x00000000
 8005204:	0800d9d0 	.word	0x0800d9d0

08005208 <frame_dummy>:
 8005208:	b508      	push	{r3, lr}
 800520a:	4b03      	ldr	r3, [pc, #12]	; (8005218 <frame_dummy+0x10>)
 800520c:	b11b      	cbz	r3, 8005216 <frame_dummy+0xe>
 800520e:	4903      	ldr	r1, [pc, #12]	; (800521c <frame_dummy+0x14>)
 8005210:	4803      	ldr	r0, [pc, #12]	; (8005220 <frame_dummy+0x18>)
 8005212:	f3af 8000 	nop.w
 8005216:	bd08      	pop	{r3, pc}
 8005218:	00000000 	.word	0x00000000
 800521c:	20000208 	.word	0x20000208
 8005220:	0800d9d0 	.word	0x0800d9d0

08005224 <apInit>:
#include "ap.h"



void apInit(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);  // USB
 8005228:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800522c:	2000      	movs	r0, #0
 800522e:	f001 f885 	bl	800633c <uartOpen>
  uartOpen(_DEF_UART2, 57600);  // UART1
 8005232:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005236:	2001      	movs	r0, #1
 8005238:	f001 f880 	bl	800633c <uartOpen>

  cliOpen(_DEF_UART1, 57600);
 800523c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005240:	2000      	movs	r0, #0
 8005242:	f000 fac3 	bl	80057cc <cliOpen>
  cliOpenLog(_DEF_UART2, 57600);
 8005246:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800524a:	2001      	movs	r0, #1
 800524c:	f000 fadc 	bl	8005808 <cliOpenLog>
}
 8005250:	bf00      	nop
 8005252:	bd80      	pop	{r7, pc}

08005254 <apMain>:

void apMain(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 800525a:	f000 f876 	bl	800534a <millis>
 800525e:	6078      	str	r0, [r7, #4]

  while(1)
  {
    if(millis()-pre_time >= 500)
 8005260:	f000 f873 	bl	800534a <millis>
 8005264:	4602      	mov	r2, r0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800526e:	d305      	bcc.n	800527c <apMain+0x28>
    {
      pre_time = millis();
 8005270:	f000 f86b 	bl	800534a <millis>
 8005274:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED3);
 8005276:	2002      	movs	r0, #2
 8005278:	f000 ff8a 	bl	8006190 <ledToggle>
    }

    if (uartAvailable(_DEF_UART2) > 0)
 800527c:	2001      	movs	r0, #1
 800527e:	f001 f8f3 	bl	8006468 <uartAvailable>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <apMain+0x4a>
    {
      uint8_t rx_data;
      rx_data = uartRead(_DEF_UART2);
 8005288:	2001      	movs	r0, #1
 800528a:	f001 f91f 	bl	80064cc <uartRead>
 800528e:	4603      	mov	r3, r0
 8005290:	70fb      	strb	r3, [r7, #3]

      uartPrintf(_DEF_UART2, "Rx : 0x%X\n", rx_data);
 8005292:	78fb      	ldrb	r3, [r7, #3]
 8005294:	461a      	mov	r2, r3
 8005296:	4903      	ldr	r1, [pc, #12]	; (80052a4 <apMain+0x50>)
 8005298:	2001      	movs	r0, #1
 800529a:	f001 f965 	bl	8006568 <uartPrintf>
    }

    cliMain();
 800529e:	f000 fb6b 	bl	8005978 <cliMain>
    if(millis()-pre_time >= 500)
 80052a2:	e7dd      	b.n	8005260 <apMain+0xc>
 80052a4:	0800d9e8 	.word	0x0800d9e8

080052a8 <bspInit>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


void bspInit(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
  HAL_Init();
 80052ae:	f001 fa77 	bl	80067a0 <HAL_Init>
  SystemClock_Config();
 80052b2:	f000 f851 	bl	8005358 <SystemClock_Config>

  MX_GPIO_Init();
 80052b6:	f000 f8b1 	bl	800541c <MX_GPIO_Init>


  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052ba:	4b1c      	ldr	r3, [pc, #112]	; (800532c <bspInit+0x84>)
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	4a1b      	ldr	r2, [pc, #108]	; (800532c <bspInit+0x84>)
 80052c0:	f043 0320 	orr.w	r3, r3, #32
 80052c4:	6193      	str	r3, [r2, #24]
 80052c6:	4b19      	ldr	r3, [pc, #100]	; (800532c <bspInit+0x84>)
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	607b      	str	r3, [r7, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d2:	4b16      	ldr	r3, [pc, #88]	; (800532c <bspInit+0x84>)
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	4a15      	ldr	r2, [pc, #84]	; (800532c <bspInit+0x84>)
 80052d8:	f043 0304 	orr.w	r3, r3, #4
 80052dc:	6193      	str	r3, [r2, #24]
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <bspInit+0x84>)
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ea:	f107 0308 	add.w	r3, r7, #8
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	605a      	str	r2, [r3, #4]
 80052f4:	609a      	str	r2, [r3, #8]
 80052f6:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80052f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80052fe:	2311      	movs	r3, #17
 8005300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005302:	2300      	movs	r3, #0
 8005304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005306:	2302      	movs	r3, #2
 8005308:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800530a:	f107 0308 	add.w	r3, r7, #8
 800530e:	4619      	mov	r1, r3
 8005310:	4807      	ldr	r0, [pc, #28]	; (8005330 <bspInit+0x88>)
 8005312:	f002 f8bb 	bl	800748c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8005316:	2200      	movs	r2, #0
 8005318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800531c:	4804      	ldr	r0, [pc, #16]	; (8005330 <bspInit+0x88>)
 800531e:	f002 faf5 	bl	800790c <HAL_GPIO_WritePin>

}
 8005322:	bf00      	nop
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40021000 	.word	0x40021000
 8005330:	40010800 	.word	0x40010800

08005334 <delay>:

void delay(uint32_t ms)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 fa91 	bl	8006864 <HAL_Delay>
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <millis>:

uint32_t millis(void)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800534e:	f001 fa7f 	bl	8006850 <HAL_GetTick>
 8005352:	4603      	mov	r3, r0
}
 8005354:	4618      	mov	r0, r3
 8005356:	bd80      	pop	{r7, pc}

08005358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b096      	sub	sp, #88	; 0x58
 800535c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800535e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005362:	2228      	movs	r2, #40	; 0x28
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f007 fefe 	bl	800d168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800536c:	f107 031c 	add.w	r3, r7, #28
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800537c:	1d3b      	adds	r3, r7, #4
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	609a      	str	r2, [r3, #8]
 8005386:	60da      	str	r2, [r3, #12]
 8005388:	611a      	str	r2, [r3, #16]
 800538a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800538c:	2305      	movs	r3, #5
 800538e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005396:	2300      	movs	r3, #0
 8005398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800539a:	2301      	movs	r3, #1
 800539c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800539e:	2301      	movs	r3, #1
 80053a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053a2:	2302      	movs	r3, #2
 80053a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80053ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80053b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053b6:	4618      	mov	r0, r3
 80053b8:	f003 fa30 	bl	800881c <HAL_RCC_OscConfig>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80053c2:	f000 f86b 	bl	800549c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053c6:	230f      	movs	r3, #15
 80053c8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053ca:	2302      	movs	r3, #2
 80053cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053ce:	2300      	movs	r3, #0
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80053d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80053d8:	2300      	movs	r3, #0
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80053dc:	f107 031c 	add.w	r3, r7, #28
 80053e0:	2102      	movs	r1, #2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f003 fc7e 	bl	8008ce4 <HAL_RCC_ClockConfig>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80053ee:	f000 f855 	bl	800549c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80053f2:	2311      	movs	r3, #17
 80053f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80053f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053fa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005400:	1d3b      	adds	r3, r7, #4
 8005402:	4618      	mov	r0, r3
 8005404:	f003 fe2c 	bl	8009060 <HAL_RCCEx_PeriphCLKConfig>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800540e:	f000 f845 	bl	800549c <Error_Handler>
  }
}
 8005412:	bf00      	nop
 8005414:	3758      	adds	r7, #88	; 0x58
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005422:	f107 0308 	add.w	r3, r7, #8
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	609a      	str	r2, [r3, #8]
 800542e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005430:	4b18      	ldr	r3, [pc, #96]	; (8005494 <MX_GPIO_Init+0x78>)
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	4a17      	ldr	r2, [pc, #92]	; (8005494 <MX_GPIO_Init+0x78>)
 8005436:	f043 0308 	orr.w	r3, r3, #8
 800543a:	6193      	str	r3, [r2, #24]
 800543c:	4b15      	ldr	r3, [pc, #84]	; (8005494 <MX_GPIO_Init+0x78>)
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005448:	4b12      	ldr	r3, [pc, #72]	; (8005494 <MX_GPIO_Init+0x78>)
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	4a11      	ldr	r2, [pc, #68]	; (8005494 <MX_GPIO_Init+0x78>)
 800544e:	f043 0304 	orr.w	r3, r3, #4
 8005452:	6193      	str	r3, [r2, #24]
 8005454:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <MX_GPIO_Init+0x78>)
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	603b      	str	r3, [r7, #0]
 800545e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8005460:	2200      	movs	r2, #0
 8005462:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005466:	480c      	ldr	r0, [pc, #48]	; (8005498 <MX_GPIO_Init+0x7c>)
 8005468:	f002 fa50 	bl	800790c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 800546c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005472:	2301      	movs	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800547a:	2302      	movs	r3, #2
 800547c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800547e:	f107 0308 	add.w	r3, r7, #8
 8005482:	4619      	mov	r1, r3
 8005484:	4804      	ldr	r0, [pc, #16]	; (8005498 <MX_GPIO_Init+0x7c>)
 8005486:	f002 f801 	bl	800748c <HAL_GPIO_Init>
}
 800548a:	bf00      	nop
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40021000 	.word	0x40021000
 8005498:	40010c00 	.word	0x40010c00

0800549c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80054a0:	bf00      	nop
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr

080054a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <HAL_MspInit+0x5c>)
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	4a14      	ldr	r2, [pc, #80]	; (8005504 <HAL_MspInit+0x5c>)
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	6193      	str	r3, [r2, #24]
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <HAL_MspInit+0x5c>)
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054c6:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <HAL_MspInit+0x5c>)
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	4a0e      	ldr	r2, [pc, #56]	; (8005504 <HAL_MspInit+0x5c>)
 80054cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d0:	61d3      	str	r3, [r2, #28]
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <HAL_MspInit+0x5c>)
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054da:	607b      	str	r3, [r7, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80054de:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <HAL_MspInit+0x60>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	4a04      	ldr	r2, [pc, #16]	; (8005508 <HAL_MspInit+0x60>)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr
 8005504:	40021000 	.word	0x40021000
 8005508:	40010000 	.word	0x40010000

0800550c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800551c:	e7fe      	b.n	800551c <HardFault_Handler+0x4>

0800551e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800551e:	b480      	push	{r7}
 8005520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005522:	e7fe      	b.n	8005522 <MemManage_Handler+0x4>

08005524 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005528:	e7fe      	b.n	8005528 <BusFault_Handler+0x4>

0800552a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800552a:	b480      	push	{r7}
 800552c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800552e:	e7fe      	b.n	800552e <UsageFault_Handler+0x4>

08005530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005540:	bf00      	nop
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800554c:	bf00      	nop
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005558:	f001 f968 	bl	800682c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800555c:	bf00      	nop
 800555e:	bd80      	pop	{r7, pc}

08005560 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005564:	4802      	ldr	r0, [pc, #8]	; (8005570 <DMA1_Channel5_IRQHandler+0x10>)
 8005566:	f001 fd27 	bl	8006fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800556a:	bf00      	nop
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000e5c 	.word	0x20000e5c

08005574 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005578:	4802      	ldr	r0, [pc, #8]	; (8005584 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800557a:	f002 faf0 	bl	8007b5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20001cd8 	.word	0x20001cd8

08005588 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800558c:	4802      	ldr	r0, [pc, #8]	; (8005598 <USART1_IRQHandler+0x10>)
 800558e:	f004 f9db 	bl	8009948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005592:	bf00      	nop
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000ea0 	.word	0x20000ea0

0800559c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80055a4:	4b11      	ldr	r3, [pc, #68]	; (80055ec <_sbrk+0x50>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <_sbrk+0x16>
		heap_end = &end;
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <_sbrk+0x50>)
 80055ae:	4a10      	ldr	r2, [pc, #64]	; (80055f0 <_sbrk+0x54>)
 80055b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80055b2:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <_sbrk+0x50>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <_sbrk+0x50>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4413      	add	r3, r2
 80055c0:	466a      	mov	r2, sp
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d907      	bls.n	80055d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80055c6:	f007 fda5 	bl	800d114 <__errno>
 80055ca:	4602      	mov	r2, r0
 80055cc:	230c      	movs	r3, #12
 80055ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80055d0:	f04f 33ff 	mov.w	r3, #4294967295
 80055d4:	e006      	b.n	80055e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80055d6:	4b05      	ldr	r3, [pc, #20]	; (80055ec <_sbrk+0x50>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4413      	add	r3, r2
 80055de:	4a03      	ldr	r2, [pc, #12]	; (80055ec <_sbrk+0x50>)
 80055e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80055e2:	68fb      	ldr	r3, [r7, #12]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20000220 	.word	0x20000220
 80055f0:	20002140 	.word	0x20002140

080055f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80055f8:	4b15      	ldr	r3, [pc, #84]	; (8005650 <SystemInit+0x5c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a14      	ldr	r2, [pc, #80]	; (8005650 <SystemInit+0x5c>)
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005604:	4b12      	ldr	r3, [pc, #72]	; (8005650 <SystemInit+0x5c>)
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	4911      	ldr	r1, [pc, #68]	; (8005650 <SystemInit+0x5c>)
 800560a:	4b12      	ldr	r3, [pc, #72]	; (8005654 <SystemInit+0x60>)
 800560c:	4013      	ands	r3, r2
 800560e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005610:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <SystemInit+0x5c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a0e      	ldr	r2, [pc, #56]	; (8005650 <SystemInit+0x5c>)
 8005616:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800561a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800561e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <SystemInit+0x5c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a0a      	ldr	r2, [pc, #40]	; (8005650 <SystemInit+0x5c>)
 8005626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800562c:	4b08      	ldr	r3, [pc, #32]	; (8005650 <SystemInit+0x5c>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4a07      	ldr	r2, [pc, #28]	; (8005650 <SystemInit+0x5c>)
 8005632:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005636:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <SystemInit+0x5c>)
 800563a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800563e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <SystemInit+0x64>)
 8005642:	4a06      	ldr	r2, [pc, #24]	; (800565c <SystemInit+0x68>)
 8005644:	609a      	str	r2, [r3, #8]
#endif 
}
 8005646:	bf00      	nop
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40021000 	.word	0x40021000
 8005654:	f8ff0000 	.word	0xf8ff0000
 8005658:	e000ed00 	.word	0xe000ed00
 800565c:	08005000 	.word	0x08005000

08005660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005660:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005662:	e003      	b.n	800566c <LoopCopyDataInit>

08005664 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005666:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005668:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800566a:	3104      	adds	r1, #4

0800566c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800566c:	480a      	ldr	r0, [pc, #40]	; (8005698 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005670:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005672:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005674:	d3f6      	bcc.n	8005664 <CopyDataInit>
  ldr r2, =_sbss
 8005676:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005678:	e002      	b.n	8005680 <LoopFillZerobss>

0800567a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800567a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800567c:	f842 3b04 	str.w	r3, [r2], #4

08005680 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005680:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005682:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005684:	d3f9      	bcc.n	800567a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005686:	f7ff ffb5 	bl	80055f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800568a:	f007 fd49 	bl	800d120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800568e:	f007 fd35 	bl	800d0fc <main>
  bx lr
 8005692:	4770      	bx	lr
  ldr r3, =_sidata
 8005694:	0800db7c 	.word	0x0800db7c
  ldr r0, =_sdata
 8005698:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800569c:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 80056a0:	20000204 	.word	0x20000204
  ldr r3, = _ebss
 80056a4:	2000213c 	.word	0x2000213c

080056a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80056a8:	e7fe      	b.n	80056a8 <ADC1_2_IRQHandler>

080056aa <qbufferCreate>:
#include "qbuffer.h"



bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
  bool ret    = true;
 80056b6:	2301      	movs	r3, #1
 80056b8:	75fb      	strb	r3, [r7, #23]

  p_node->in  = 0;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	60da      	str	r2, [r3, #12]
    p_node->len = 0;
    p_node->p_buf = NULL;
    ret = false;
  }
#endif
  return ret;
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr

080056de <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80056de:	b480      	push	{r7}
 80056e0:	b087      	sub	sp, #28
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80056ea:	2301      	movs	r3, #1
 80056ec:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	e026      	b.n	8005742 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d009      	beq.n	8005710 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	441a      	add	r2, r3
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	440b      	add	r3, r1
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d00c      	beq.n	8005736 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	3301      	adds	r3, #1
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	6892      	ldr	r2, [r2, #8]
 8005726:	fbb3 f1f2 	udiv	r1, r3, r2
 800572a:	fb02 f201 	mul.w	r2, r2, r1
 800572e:	1a9a      	subs	r2, r3, r2
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	605a      	str	r2, [r3, #4]
 8005734:	e002      	b.n	800573c <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
      break;
 800573a:	e006      	b.n	800574a <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	3301      	adds	r3, #1
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	429a      	cmp	r2, r3
 8005748:	d8d4      	bhi.n	80056f4 <qbufferRead+0x16>
    }
  }

  return ret;
 800574a:	7dfb      	ldrb	r3, [r7, #23]
}
 800574c:	4618      	mov	r0, r3
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;  // + p_node->len **
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	441a      	add	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6892      	ldr	r2, [r2, #8]
 8005772:	fbb3 f1f2 	udiv	r1, r3, r2
 8005776:	fb02 f201 	mul.w	r2, r2, r1
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  return ret;
 800577e:	68fb      	ldr	r3, [r7, #12]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	bc80      	pop	{r7}
 8005788:	4770      	bx	lr
	...

0800578c <cliInit>:




bool cliInit(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8005790:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <cliInit+0x3c>)
 8005792:	2200      	movs	r2, #0
 8005794:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8005796:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <cliInit+0x3c>)
 8005798:	2200      	movs	r2, #0
 800579a:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <cliInit+0x3c>)
 800579e:	2200      	movs	r2, #0
 80057a0:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <cliInit+0x3c>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	749a      	strb	r2, [r3, #18]
  cli_node.hist_line_last  = 0;
 80057a8:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <cliInit+0x3c>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	74da      	strb	r2, [r3, #19]
  cli_node.hist_line_count = 0;
 80057ae:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <cliInit+0x3c>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	751a      	strb	r2, [r3, #20]
  cli_node.hist_line_new   = false;
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <cliInit+0x3c>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	745a      	strb	r2, [r3, #17]

  cliLineClean(&cli_node);
 80057ba:	4803      	ldr	r0, [pc, #12]	; (80057c8 <cliInit+0x3c>)
 80057bc:	f000 fb5c 	bl	8005e78 <cliLineClean>

  return true;
 80057c0:	2301      	movs	r3, #1
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000d84 	.word	0x20000d84

080057cc <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	6039      	str	r1, [r7, #0]
 80057d6:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80057d8:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <cliOpen+0x38>)
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 80057de:	4a09      	ldr	r2, [pc, #36]	; (8005804 <cliOpen+0x38>)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fda7 	bl	800633c <uartOpen>
 80057ee:	4603      	mov	r3, r0
 80057f0:	461a      	mov	r2, r3
 80057f2:	4b04      	ldr	r3, [pc, #16]	; (8005804 <cliOpen+0x38>)
 80057f4:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 80057f6:	4b03      	ldr	r3, [pc, #12]	; (8005804 <cliOpen+0x38>)
 80057f8:	7a1b      	ldrb	r3, [r3, #8]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000d84 	.word	0x20000d84

08005808 <cliOpenLog>:

bool cliOpenLog(uint8_t ch, uint32_t baud)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	6039      	str	r1, [r7, #0]
 8005812:	71fb      	strb	r3, [r7, #7]
  bool ret;

  cli_node.log_ch = ch;
 8005814:	4a0b      	ldr	r2, [pc, #44]	; (8005844 <cliOpenLog+0x3c>)
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	7293      	strb	r3, [r2, #10]
  cli_node.log_baud = baud;
 800581a:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <cliOpenLog+0x3c>)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	60d3      	str	r3, [r2, #12]

  ret = uartOpen(ch, baud);
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fd89 	bl	800633c <uartOpen>
 800582a:	4603      	mov	r3, r0
 800582c:	73fb      	strb	r3, [r7, #15]

  if (ret == true)
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <cliOpenLog+0x32>
  {
    cli_node.is_log = true;
 8005834:	4b03      	ldr	r3, [pc, #12]	; (8005844 <cliOpenLog+0x3c>)
 8005836:	2201      	movs	r2, #1
 8005838:	725a      	strb	r2, [r3, #9]
  }
  return ret;
 800583a:	7bfb      	ldrb	r3, [r7, #15]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000d84 	.word	0x20000d84

08005848 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8005850:	4b33      	ldr	r3, [pc, #204]	; (8005920 <cliShowLog+0xd8>)
 8005852:	7a5b      	ldrb	r3, [r3, #9]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d05e      	beq.n	8005916 <cliShowLog+0xce>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	7a98      	ldrb	r0, [r3, #10]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8005862:	461a      	mov	r2, r3
 8005864:	492f      	ldr	r1, [pc, #188]	; (8005924 <cliShowLog+0xdc>)
 8005866:	f000 fe7f 	bl	8006568 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	7a98      	ldrb	r0, [r3, #10]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005874:	461a      	mov	r2, r3
 8005876:	492c      	ldr	r1, [pc, #176]	; (8005928 <cliShowLog+0xe0>)
 8005878:	f000 fe76 	bl	8006568 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	7a98      	ldrb	r0, [r3, #10]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005886:	461a      	mov	r2, r3
 8005888:	4928      	ldr	r1, [pc, #160]	; (800592c <cliShowLog+0xe4>)
 800588a:	f000 fe6d 	bl	8006568 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	7a98      	ldrb	r0, [r3, #10]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	33a1      	adds	r3, #161	; 0xa1
 8005896:	461a      	mov	r2, r3
 8005898:	4925      	ldr	r1, [pc, #148]	; (8005930 <cliShowLog+0xe8>)
 800589a:	f000 fe65 	bl	8006568 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	7a98      	ldrb	r0, [r3, #10]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80058a8:	461a      	mov	r2, r3
 80058aa:	4922      	ldr	r1, [pc, #136]	; (8005934 <cliShowLog+0xec>)
 80058ac:	f000 fe5c 	bl	8006568 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7a98      	ldrb	r0, [r3, #10]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	7cdb      	ldrb	r3, [r3, #19]
 80058b8:	461a      	mov	r2, r3
 80058ba:	491f      	ldr	r1, [pc, #124]	; (8005938 <cliShowLog+0xf0>)
 80058bc:	f000 fe54 	bl	8006568 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	7a98      	ldrb	r0, [r3, #10]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7d1b      	ldrb	r3, [r3, #20]
 80058c8:	461a      	mov	r2, r3
 80058ca:	491c      	ldr	r1, [pc, #112]	; (800593c <cliShowLog+0xf4>)
 80058cc:	f000 fe4c 	bl	8006568 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e013      	b.n	80058fe <cliShowLog+0xb6>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	7a98      	ldrb	r0, [r3, #10]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	00da      	lsls	r2, r3, #3
 80058e4:	1ad2      	subs	r2, r2, r3
 80058e6:	f102 0310 	add.w	r3, r2, #16
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4413      	add	r3, r2
 80058ee:	3305      	adds	r3, #5
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4913      	ldr	r1, [pc, #76]	; (8005940 <cliShowLog+0xf8>)
 80058f4:	f000 fe38 	bl	8006568 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	7d1b      	ldrb	r3, [r3, #20]
 8005902:	461a      	mov	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4293      	cmp	r3, r2
 8005908:	dbe5      	blt.n	80058d6 <cliShowLog+0x8e>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	7a9b      	ldrb	r3, [r3, #10]
 800590e:	490d      	ldr	r1, [pc, #52]	; (8005944 <cliShowLog+0xfc>)
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fe29 	bl	8006568 <uartPrintf>
  }
}
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000d84 	.word	0x20000d84
 8005924:	0800d9f4 	.word	0x0800d9f4
 8005928:	0800da04 	.word	0x0800da04
 800592c:	0800da14 	.word	0x0800da14
 8005930:	0800da24 	.word	0x0800da24
 8005934:	0800da34 	.word	0x0800da34
 8005938:	0800da44 	.word	0x0800da44
 800593c:	0800da54 	.word	0x0800da54
 8005940:	0800da64 	.word	0x0800da64
 8005944:	0800da74 	.word	0x0800da74

08005948 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	4906      	ldr	r1, [pc, #24]	; (8005970 <cliShowPrompt+0x28>)
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fe06 	bl	8006568 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	4904      	ldr	r1, [pc, #16]	; (8005974 <cliShowPrompt+0x2c>)
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fe00 	bl	8006568 <uartPrintf>
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	0800da78 	.word	0x0800da78
 8005974:	0800da7c 	.word	0x0800da7c

08005978 <cliMain>:

bool cliMain(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800597c:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <cliMain+0x40>)
 800597e:	7a1b      	ldrb	r3, [r3, #8]
 8005980:	f083 0301 	eor.w	r3, r3, #1
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <cliMain+0x16>
  {
    return false;
 800598a:	2300      	movs	r3, #0
 800598c:	e012      	b.n	80059b4 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <cliMain+0x40>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fd68 	bl	8006468 <uartAvailable>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <cliMain+0x40>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fd92 	bl	80064cc <uartRead>
 80059a8:	4603      	mov	r3, r0
 80059aa:	4619      	mov	r1, r3
 80059ac:	4802      	ldr	r0, [pc, #8]	; (80059b8 <cliMain+0x40>)
 80059ae:	f000 f805 	bl	80059bc <cliUpdate>
  }

  return true;
 80059b2:	2301      	movs	r3, #1
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000d84 	.word	0x20000d84

080059bc <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08c      	sub	sp, #48	; 0x30
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 80059c8:	2300      	movs	r3, #0
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	33a1      	adds	r3, #161	; 0xa1
 80059d2:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	7c1b      	ldrb	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f040 8162 	bne.w	8005ca2 <cliUpdate+0x2e6>
  {
    switch(rx_data)
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	2b0d      	cmp	r3, #13
 80059e2:	d009      	beq.n	80059f8 <cliUpdate+0x3c>
 80059e4:	2b0d      	cmp	r3, #13
 80059e6:	dc02      	bgt.n	80059ee <cliUpdate+0x32>
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d062      	beq.n	8005ab2 <cliUpdate+0xf6>
 80059ec:	e0d1      	b.n	8005b92 <cliUpdate+0x1d6>
 80059ee:	2b1b      	cmp	r3, #27
 80059f0:	d019      	beq.n	8005a26 <cliUpdate+0x6a>
 80059f2:	2b7f      	cmp	r3, #127	; 0x7f
 80059f4:	d01b      	beq.n	8005a2e <cliUpdate+0x72>
 80059f6:	e0cc      	b.n	8005b92 <cliUpdate+0x1d6>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <cliUpdate+0x4c>
        {
          cliLineAdd(p_cli);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fa51 	bl	8005eaa <cliLineAdd>
        }

        line->count = 0;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff ff92 	bl	8005948 <cliShowPrompt>
        break;
 8005a24:	e144      	b.n	8005cb0 <cliUpdate+0x2f4>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	741a      	strb	r2, [r3, #16]
        break;
 8005a2c:	e140      	b.n	8005cb0 <cliUpdate+0x2f4>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	f080 8133 	bcs.w	8005ca6 <cliUpdate+0x2ea>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8005a50:	2301      	movs	r3, #1
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a54:	e013      	b.n	8005a7e <cliUpdate+0xc2>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	441a      	add	r2, r3
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6c:	440b      	add	r3, r1
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	69f9      	ldr	r1, [r7, #28]
 8005a72:	5c89      	ldrb	r1, [r1, r2]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8005a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7e:	7efb      	ldrb	r3, [r7, #27]
 8005a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a82:	429a      	cmp	r2, r3
 8005a84:	dbe7      	blt.n	8005a56 <cliUpdate+0x9a>
          }

          line->count--;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	498e      	ldr	r1, [pc, #568]	; (8005ce4 <cliUpdate+0x328>)
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fd5c 	bl	8006568 <uartPrintf>
        }
        break;
 8005ab0:	e0f9      	b.n	8005ca6 <cliUpdate+0x2ea>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d055      	beq.n	8005b68 <cliUpdate+0x1ac>
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d050      	beq.n	8005b68 <cliUpdate+0x1ac>
        {
          if (line->cursor == line->count)
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d10e      	bne.n	8005af4 <cliUpdate+0x138>
          {
            line->count--;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005aec:	461a      	mov	r2, r3
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	2100      	movs	r1, #0
 8005af2:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d231      	bcs.n	8005b68 <cliUpdate+0x1ac>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8005b14:	2300      	movs	r3, #0
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b18:	e013      	b.n	8005b42 <cliUpdate+0x186>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b20:	461a      	mov	r2, r3
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	441a      	add	r2, r3
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	440b      	add	r3, r1
 8005b32:	3b01      	subs	r3, #1
 8005b34:	69f9      	ldr	r1, [r7, #28]
 8005b36:	5c89      	ldrb	r1, [r1, r2]
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	3301      	adds	r3, #1
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b42:	7ebb      	ldrb	r3, [r7, #26]
 8005b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b46:	429a      	cmp	r2, r3
 8005b48:	dbe7      	blt.n	8005b1a <cliUpdate+0x15e>
            }

            line->count--;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005b60:	461a      	mov	r2, r3
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	2100      	movs	r1, #0
 8005b66:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 809b 	beq.w	8005caa <cliUpdate+0x2ee>
        {
          line->cursor--;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	4957      	ldr	r1, [pc, #348]	; (8005ce8 <cliUpdate+0x32c>)
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fcec 	bl	8006568 <uartPrintf>
        }
        break;
 8005b90:	e08b      	b.n	8005caa <cliUpdate+0x2ee>


      default:
        if ((line->count + 1) < line->buf_len)
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005b98:	3301      	adds	r3, #1
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	f280 8084 	bge.w	8005cae <cliUpdate+0x2f2>
        {
          if (line->cursor == line->count)
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d124      	bne.n	8005c00 <cliUpdate+0x244>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	1cf9      	adds	r1, r7, #3
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fca6 	bl	8006510 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005bca:	461a      	mov	r2, r3
 8005bcc:	78f9      	ldrb	r1, [r7, #3]
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	5499      	strb	r1, [r3, r2]
            line->count++;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005bd8:	3301      	adds	r3, #1
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005be8:	3301      	adds	r3, #1
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d24e      	bcs.n	8005cae <cliUpdate+0x2f2>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8005c20:	2300      	movs	r3, #0
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
 8005c24:	e013      	b.n	8005c4e <cliUpdate+0x292>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	1e5a      	subs	r2, r3, #1
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	1acb      	subs	r3, r1, r3
 8005c40:	69f9      	ldr	r1, [r7, #28]
 8005c42:	5c89      	ldrb	r1, [r1, r2]
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4e:	7e7b      	ldrb	r3, [r7, #25]
 8005c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c52:	429a      	cmp	r2, r3
 8005c54:	dbe7      	blt.n	8005c26 <cliUpdate+0x26a>
            }
            line->buf[line->cursor] = rx_data;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	78f9      	ldrb	r1, [r7, #3]
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	5499      	strb	r1, [r3, r2]
            line->count++;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2100      	movs	r1, #0
 8005c90:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	4914      	ldr	r1, [pc, #80]	; (8005cec <cliUpdate+0x330>)
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fc64 	bl	8006568 <uartPrintf>
          }
        }
        break;
 8005ca0:	e005      	b.n	8005cae <cliUpdate+0x2f2>
    }
  }
 8005ca2:	bf00      	nop
 8005ca4:	e004      	b.n	8005cb0 <cliUpdate+0x2f4>
        break;
 8005ca6:	bf00      	nop
 8005ca8:	e002      	b.n	8005cb0 <cliUpdate+0x2f4>
        break;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <cliUpdate+0x2f4>
        break;
 8005cae:	bf00      	nop

  switch(p_cli->state)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	7c1b      	ldrb	r3, [r3, #16]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	f200 80d1 	bhi.w	8005e5e <cliUpdate+0x4a2>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <cliUpdate+0x308>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cd5 	.word	0x08005cd5
 8005cc8:	08005cdd 	.word	0x08005cdd
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005e55 	.word	0x08005e55
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	741a      	strb	r2, [r3, #16]
      break;
 8005cda:	e0c0      	b.n	8005e5e <cliUpdate+0x4a2>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2203      	movs	r2, #3
 8005ce0:	741a      	strb	r2, [r3, #16]
      break;
 8005ce2:	e0bc      	b.n	8005e5e <cliUpdate+0x4a2>
 8005ce4:	0800da84 	.word	0x0800da84
 8005ce8:	0800da8c 	.word	0x0800da8c
 8005cec:	0800da94 	.word	0x0800da94

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	2b44      	cmp	r3, #68	; 0x44
 8005cfa:	d11a      	bne.n	8005d32 <cliUpdate+0x376>
      {
        if (line->cursor > 0)
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d015      	beq.n	8005d32 <cliUpdate+0x376>
        {
          line->cursor--;
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 8005d16:	231b      	movs	r3, #27
 8005d18:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8005d1a:	235b      	movs	r3, #91	; 0x5b
 8005d1c:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	f107 010c 	add.w	r1, r7, #12
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fbef 	bl	8006510 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	2b43      	cmp	r3, #67	; 0x43
 8005d36:	d11d      	bne.n	8005d74 <cliUpdate+0x3b8>
      {
        if (line->cursor < line->buf_len)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d207      	bcs.n	8005d58 <cliUpdate+0x39c>
        {
          line->cursor++;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d4e:	3301      	adds	r3, #1
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
        tx_buf[0] = 0x1B;
 8005d58:	231b      	movs	r3, #27
 8005d5a:	733b      	strb	r3, [r7, #12]
        tx_buf[1] = 0x5B;
 8005d5c:	235b      	movs	r3, #91	; 0x5b
 8005d5e:	737b      	strb	r3, [r7, #13]
        tx_buf[2] = rx_data;
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	73bb      	strb	r3, [r7, #14]
        uartWrite(p_cli->ch, tx_buf, 3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f107 010c 	add.w	r1, r7, #12
 8005d6c:	2203      	movs	r2, #3
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fbce 	bl	8006510 <uartWrite>
      }

      if (rx_data == CLI_KEY_UP)
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	2b41      	cmp	r3, #65	; 0x41
 8005d78:	d10b      	bne.n	8005d92 <cliUpdate+0x3d6>
      {
        cliLineChange(p_cli, true);
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f8e3 	bl	8005f48 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	33a1      	adds	r3, #161	; 0xa1
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f000 fbeb 	bl	8006568 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	2b42      	cmp	r3, #66	; 0x42
 8005d96:	d10b      	bne.n	8005db0 <cliUpdate+0x3f4>
      {
        cliLineChange(p_cli, false);
 8005d98:	2100      	movs	r1, #0
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f8d4 	bl	8005f48 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	781a      	ldrb	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	33a1      	adds	r3, #161	; 0xa1
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f000 fbdc 	bl	8006568 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	2b31      	cmp	r3, #49	; 0x31
 8005db4:	d10f      	bne.n	8005dd6 <cliUpdate+0x41a>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	7818      	ldrb	r0, [r3, #0]
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	492b      	ldr	r1, [pc, #172]	; (8005e70 <cliUpdate+0x4b4>)
 8005dc4:	f000 fbd0 	bl	8006568 <uartPrintf>
        line->cursor = 0;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2204      	movs	r2, #4
 8005dd4:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	2b34      	cmp	r3, #52	; 0x34
 8005dda:	d13f      	bne.n	8005e5c <cliUpdate+0x4a0>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d210      	bcs.n	8005e0e <cliUpdate+0x452>
        {
          mov_len = line->count - line->cursor;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	8afa      	ldrh	r2, [r7, #22]
 8005e06:	491b      	ldr	r1, [pc, #108]	; (8005e74 <cliUpdate+0x4b8>)
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fbad 	bl	8006568 <uartPrintf>
        }
        if (line->cursor > line->count)
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d910      	bls.n	8005e40 <cliUpdate+0x484>
        {
          mov_len = line->cursor - line->count;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	8afa      	ldrh	r2, [r7, #22]
 8005e38:	490d      	ldr	r1, [pc, #52]	; (8005e70 <cliUpdate+0x4b4>)
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fb94 	bl	8006568 <uartPrintf>
        }
        line->cursor = line->count;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2204      	movs	r2, #4
 8005e50:	741a      	strb	r2, [r3, #16]
      }
      break;
 8005e52:	e003      	b.n	8005e5c <cliUpdate+0x4a0>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	741a      	strb	r2, [r3, #16]
      break;
 8005e5a:	e000      	b.n	8005e5e <cliUpdate+0x4a2>
      break;
 8005e5c:	bf00      	nop
  }



  cliShowLog(p_cli);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fcf2 	bl	8005848 <cliShowLog>

  return ret;
 8005e64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3730      	adds	r7, #48	; 0x30
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	0800daa0 	.word	0x0800daa0
 8005e74:	0800daa8 	.word	0x0800daa8

08005e78 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
  p_cli->line.cursor  = 0;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	221f      	movs	r2, #31
 8005e94:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  p_cli->line.buf[0]  = 0;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr

08005eaa <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8005eaa:	b4f0      	push	{r4, r5, r6, r7}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	7cdb      	ldrb	r3, [r3, #19]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	00da      	lsls	r2, r3, #3
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	188b      	adds	r3, r1, r2
 8005ec6:	f103 0210 	add.w	r2, r3, #16
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	33a1      	adds	r3, #161	; 0xa1
 8005ece:	1d50      	adds	r0, r2, #5
 8005ed0:	f103 0420 	add.w	r4, r3, #32
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	f8d1 c000 	ldr.w	ip, [r1]
 8005edc:	684e      	ldr	r6, [r1, #4]
 8005ede:	688d      	ldr	r5, [r1, #8]
 8005ee0:	68c9      	ldr	r1, [r1, #12]
 8005ee2:	f8c2 c000 	str.w	ip, [r2]
 8005ee6:	6056      	str	r6, [r2, #4]
 8005ee8:	6095      	str	r5, [r2, #8]
 8005eea:	60d1      	str	r1, [r2, #12]
 8005eec:	3310      	adds	r3, #16
 8005eee:	3010      	adds	r0, #16
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d1ef      	bne.n	8005ed4 <cliLineAdd+0x2a>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	8819      	ldrh	r1, [r3, #0]
 8005ef8:	789b      	ldrb	r3, [r3, #2]
 8005efa:	8011      	strh	r1, [r2, #0]
 8005efc:	7093      	strb	r3, [r2, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	7d1b      	ldrb	r3, [r3, #20]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d805      	bhi.n	8005f12 <cliLineAdd+0x68>
  {
    p_cli->hist_line_count++;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7d1b      	ldrb	r3, [r3, #20]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	751a      	strb	r2, [r3, #20]
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	7cdb      	ldrb	r3, [r3, #19]
 8005f16:	b25a      	sxtb	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	749a      	strb	r2, [r3, #18]
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	7cdb      	ldrb	r3, [r3, #19]
 8005f20:	3301      	adds	r3, #1
 8005f22:	425a      	negs	r2, r3
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	f002 0203 	and.w	r2, r2, #3
 8005f2c:	bf58      	it	pl
 8005f2e:	4253      	negpl	r3, r2
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	74da      	strb	r2, [r3, #19]
  p_cli->hist_line_new  = true;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	745a      	strb	r2, [r3, #17]
}
 8005f3c:	bf00      	nop
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bcf0      	pop	{r4, r5, r6, r7}
 8005f44:	4770      	bx	lr
	...

08005f48 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8005f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	7d1b      	ldrb	r3, [r3, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d07f      	beq.n	800605c <cliLineChange+0x114>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <cliLineChange+0x30>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	7818      	ldrb	r0, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8005f70:	461a      	mov	r2, r3
 8005f72:	493c      	ldr	r1, [pc, #240]	; (8006064 <cliLineChange+0x11c>)
 8005f74:	f000 faf8 	bl	8006568 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d008      	beq.n	8005f94 <cliLineChange+0x4c>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	7818      	ldrb	r0, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4936      	ldr	r1, [pc, #216]	; (8006068 <cliLineChange+0x120>)
 8005f90:	f000 faea 	bl	8006568 <uartPrintf>
  }


  if (key_up == true)
 8005f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d11f      	bne.n	8005fdc <cliLineChange+0x94>
  {
    if (p_cli->hist_line_new == true)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	7c5b      	ldrb	r3, [r3, #17]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d004      	beq.n	8005fae <cliLineChange+0x66>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	7cdb      	ldrb	r3, [r3, #19]
 8005fa8:	b25a      	sxtb	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	749a      	strb	r2, [r3, #18]
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	7d1b      	ldrb	r3, [r3, #20]
 8005fba:	4413      	add	r3, r2
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	7d12      	ldrb	r2, [r2, #20]
 8005fc2:	fb93 f1f2 	sdiv	r1, r3, r2
 8005fc6:	fb02 f201 	mul.w	r2, r2, r1
 8005fca:	1a9b      	subs	r3, r3, r2
 8005fcc:	b25a      	sxtb	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	749a      	strb	r2, [r3, #18]
    change_i = p_cli->hist_line_i;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8005fd8:	73fb      	strb	r3, [r7, #15]
 8005fda:	e011      	b.n	8006000 <cliLineChange+0xb8>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	7d12      	ldrb	r2, [r2, #20]
 8005fe8:	fb93 f1f2 	sdiv	r1, r3, r2
 8005fec:	fb02 f201 	mul.w	r2, r2, r1
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	b25a      	sxtb	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	749a      	strb	r2, [r3, #18]
    change_i = p_cli->hist_line_i;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8005ffe:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8006000:	7bfa      	ldrb	r2, [r7, #15]
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	00da      	lsls	r2, r3, #3
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	1883      	adds	r3, r0, r2
 8006012:	3310      	adds	r3, #16
 8006014:	3305      	adds	r3, #5
 8006016:	f101 00a1 	add.w	r0, r1, #161	; 0xa1
 800601a:	f103 0420 	add.w	r4, r3, #32
 800601e:	4602      	mov	r2, r0
 8006020:	4619      	mov	r1, r3
 8006022:	f8d1 c000 	ldr.w	ip, [r1]
 8006026:	684e      	ldr	r6, [r1, #4]
 8006028:	688d      	ldr	r5, [r1, #8]
 800602a:	68c9      	ldr	r1, [r1, #12]
 800602c:	f8c2 c000 	str.w	ip, [r2]
 8006030:	6056      	str	r6, [r2, #4]
 8006032:	6095      	str	r5, [r2, #8]
 8006034:	60d1      	str	r1, [r2, #12]
 8006036:	3310      	adds	r3, #16
 8006038:	3010      	adds	r0, #16
 800603a:	42a3      	cmp	r3, r4
 800603c:	d1ef      	bne.n	800601e <cliLineChange+0xd6>
 800603e:	4602      	mov	r2, r0
 8006040:	8819      	ldrh	r1, [r3, #0]
 8006042:	789b      	ldrb	r3, [r3, #2]
 8006044:	8011      	strh	r1, [r2, #0]
 8006046:	7093      	strb	r3, [r2, #2]
  p_cli->line.cursor = p_cli->line.count;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2

  p_cli->hist_line_new = false;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	745a      	strb	r2, [r3, #17]
 800605a:	e000      	b.n	800605e <cliLineChange+0x116>
    return;
 800605c:	bf00      	nop
}
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006064:	0800daa0 	.word	0x0800daa0
 8006068:	0800dab0 	.word	0x0800dab0

0800606c <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);
#if 1
bool flashInit(void)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8006072:	2300      	movs	r3, #0
 8006074:	607b      	str	r3, [r7, #4]
 8006076:	e012      	b.n	800609e <flashInit+0x32>
  {
    flash_tbl[i].addr = 0x08000000 + i*FLASH_SECTOR_SIZE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800607e:	02db      	lsls	r3, r3, #11
 8006080:	4619      	mov	r1, r3
 8006082:	4a0b      	ldr	r2, [pc, #44]	; (80060b0 <flashInit+0x44>)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    flash_tbl[i].length = FLASH_SECTOR_SIZE;
 800608a:	4a09      	ldr	r2, [pc, #36]	; (80060b0 <flashInit+0x44>)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4413      	add	r3, r2
 8006092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006096:	809a      	strh	r2, [r3, #4]
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3301      	adds	r3, #1
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2bff      	cmp	r3, #255	; 0xff
 80060a2:	dde9      	ble.n	8006078 <flashInit+0xc>
  }

  return true;
 80060a4:	2301      	movs	r3, #1
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr
 80060b0:	20000224 	.word	0x20000224

080060b4 <ledInit>:
		{GPIOB, GPIO_PIN_14, GPIO_PIN_SET, GPIO_PIN_RESET},
		{GPIOB, GPIO_PIN_15, GPIO_PIN_SET, GPIO_PIN_RESET},
};

void ledInit(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af00      	add	r7, sp, #0
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#endif
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060ba:	f107 030c 	add.w	r3, r7, #12
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	605a      	str	r2, [r3, #4]
 80060c4:	609a      	str	r2, [r3, #8]
 80060c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060c8:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <ledInit+0x94>)
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <ledInit+0x94>)
 80060ce:	f043 0308 	orr.w	r3, r3, #8
 80060d2:	6193      	str	r3, [r2, #24]
 80060d4:	4b1c      	ldr	r3, [pc, #112]	; (8006148 <ledInit+0x94>)
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f003 0308 	and.w	r3, r3, #8
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060e0:	4b19      	ldr	r3, [pc, #100]	; (8006148 <ledInit+0x94>)
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	4a18      	ldr	r2, [pc, #96]	; (8006148 <ledInit+0x94>)
 80060e6:	f043 0304 	orr.w	r3, r3, #4
 80060ea:	6193      	str	r3, [r2, #24]
 80060ec:	4b16      	ldr	r3, [pc, #88]	; (8006148 <ledInit+0x94>)
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	607b      	str	r3, [r7, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  //GPIO_InitStruct.Pin = LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060f8:	2301      	movs	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006100:	2302      	movs	r3, #2
 8006102:	61bb      	str	r3, [r7, #24]
  //HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
  for( int i=0; i<LED_MAX_CH; i++)
 8006104:	2300      	movs	r3, #0
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e017      	b.n	800613a <ledInit+0x86>
  {
  	GPIO_InitStruct.Pin = led_tbl[i].pin;
 800610a:	4a10      	ldr	r2, [pc, #64]	; (800614c <ledInit+0x98>)
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4413      	add	r3, r2
 8006112:	889b      	ldrh	r3, [r3, #4]
 8006114:	60fb      	str	r3, [r7, #12]
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8006116:	4a0d      	ldr	r2, [pc, #52]	; (800614c <ledInit+0x98>)
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800611e:	f107 020c 	add.w	r2, r7, #12
 8006122:	4611      	mov	r1, r2
 8006124:	4618      	mov	r0, r3
 8006126:	f001 f9b1 	bl	800748c <HAL_GPIO_Init>

  	ledOff(i);
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	4618      	mov	r0, r3
 8006130:	f000 f80e 	bl	8006150 <ledOff>
  for( int i=0; i<LED_MAX_CH; i++)
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	3301      	adds	r3, #1
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	2b03      	cmp	r3, #3
 800613e:	dde4      	ble.n	800610a <ledInit+0x56>
  }
}
 8006140:	bf00      	nop
 8006142:	3720      	adds	r7, #32
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40021000 	.word	0x40021000
 800614c:	20000004 	.word	0x20000004

08006150 <ledOff>:
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	2b03      	cmp	r3, #3
 800615e:	d811      	bhi.n	8006184 <ledOff+0x34>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8006160:	79fb      	ldrb	r3, [r7, #7]
 8006162:	4a0a      	ldr	r2, [pc, #40]	; (800618c <ledOff+0x3c>)
 8006164:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	4a08      	ldr	r2, [pc, #32]	; (800618c <ledOff+0x3c>)
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	4413      	add	r3, r2
 8006170:	8899      	ldrh	r1, [r3, #4]
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	4a05      	ldr	r2, [pc, #20]	; (800618c <ledOff+0x3c>)
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	4413      	add	r3, r2
 800617a:	79db      	ldrb	r3, [r3, #7]
 800617c:	461a      	mov	r2, r3
 800617e:	f001 fbc5 	bl	800790c <HAL_GPIO_WritePin>
 8006182:	e000      	b.n	8006186 <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 8006184:	bf00      	nop
}
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20000004 	.word	0x20000004

08006190 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	2b03      	cmp	r3, #3
 800619e:	d80c      	bhi.n	80061ba <ledToggle+0x2a>
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	4a08      	ldr	r2, [pc, #32]	; (80061c4 <ledToggle+0x34>)
 80061a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	4a06      	ldr	r2, [pc, #24]	; (80061c4 <ledToggle+0x34>)
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	4413      	add	r3, r2
 80061b0:	889b      	ldrh	r3, [r3, #4]
 80061b2:	4619      	mov	r1, r3
 80061b4:	f001 fbc2 	bl	800793c <HAL_GPIO_TogglePin>
 80061b8:	e000      	b.n	80061bc <ledToggle+0x2c>
	if(ch >= LED_MAX_CH) return;
 80061ba:	bf00      	nop
}
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000004 	.word	0x20000004

080061c8 <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
  bool ret = true;
 80061ce:	2301      	movs	r3, #1
 80061d0:	71fb      	strb	r3, [r7, #7]

  /* if reset pin on */
  if(RCC->CSR & (1<<26))
 80061d2:	4b11      	ldr	r3, [pc, #68]	; (8006218 <resetInit+0x50>)
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d012      	beq.n	8006204 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 80061de:	2001      	movs	r0, #1
 80061e0:	f000 f84e 	bl	8006280 <rtcBackupRegRead>
 80061e4:	4603      	mov	r3, r0
 80061e6:	3301      	adds	r3, #1
 80061e8:	4619      	mov	r1, r3
 80061ea:	2001      	movs	r0, #1
 80061ec:	f000 f858 	bl	80062a0 <rtcBackupRegWrite>
    delay(500);
 80061f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061f4:	f7ff f89e 	bl	8005334 <delay>
    reset_count = rtcBackupRegRead(1);
 80061f8:	2001      	movs	r0, #1
 80061fa:	f000 f841 	bl	8006280 <rtcBackupRegRead>
 80061fe:	4602      	mov	r2, r0
 8006200:	4b06      	ldr	r3, [pc, #24]	; (800621c <resetInit+0x54>)
 8006202:	601a      	str	r2, [r3, #0]
  }

  rtcBackupRegWrite(1, 0);
 8006204:	2100      	movs	r1, #0
 8006206:	2001      	movs	r0, #1
 8006208:	f000 f84a 	bl	80062a0 <rtcBackupRegWrite>

  return ret;
 800620c:	79fb      	ldrb	r3, [r7, #7]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000
 800621c:	20000a24 	.word	0x20000a24

08006220 <rtcInit>:


RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
  bool ret = true;
 8006226:	2301      	movs	r3, #1
 8006228:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <rtcInit+0x54>)
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	4a11      	ldr	r2, [pc, #68]	; (8006274 <rtcInit+0x54>)
 8006230:	f043 0310 	orr.w	r3, r3, #16
 8006234:	6193      	str	r3, [r2, #24]
 8006236:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <rtcInit+0x54>)
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	683b      	ldr	r3, [r7, #0]

  /** Initialize RTC Only */
  hrtc.Instance           = RTC;
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <rtcInit+0x58>)
 8006244:	4a0d      	ldr	r2, [pc, #52]	; (800627c <rtcInit+0x5c>)
 8006246:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 8006248:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <rtcInit+0x58>)
 800624a:	f04f 32ff 	mov.w	r2, #4294967295
 800624e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <rtcInit+0x58>)
 8006252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006256:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006258:	4807      	ldr	r0, [pc, #28]	; (8006278 <rtcInit+0x58>)
 800625a:	f003 f8a1 	bl	80093a0 <HAL_RTC_Init>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <rtcInit+0x48>
  {
    Error_Handler();
 8006264:	f7ff f91a 	bl	800549c <Error_Handler>
  }

  return ret;
 8006268:	79fb      	ldrb	r3, [r7, #7]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40021000 	.word	0x40021000
 8006278:	20000e48 	.word	0x20000e48
 800627c:	40002800 	.word	0x40002800

08006280 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4804      	ldr	r0, [pc, #16]	; (800629c <rtcBackupRegRead+0x1c>)
 800628c:	f003 f9b6 	bl	80095fc <HAL_RTCEx_BKUPRead>
 8006290:	4603      	mov	r3, r0

}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000e48 	.word	0x20000e48

080062a0 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	4803      	ldr	r0, [pc, #12]	; (80062bc <rtcBackupRegWrite+0x1c>)
 80062b0:	f003 f98a 	bl	80095c8 <HAL_RTCEx_BKUPWrite>
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	20000e48 	.word	0x20000e48

080062c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a0b      	ldr	r2, [pc, #44]	; (80062fc <HAL_RTC_MspInit+0x3c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d110      	bne.n	80062f4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80062d2:	f002 fa97 	bl	8008804 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80062d6:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <HAL_RTC_MspInit+0x40>)
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	4a09      	ldr	r2, [pc, #36]	; (8006300 <HAL_RTC_MspInit+0x40>)
 80062dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062e0:	61d3      	str	r3, [r2, #28]
 80062e2:	4b07      	ldr	r3, [pc, #28]	; (8006300 <HAL_RTC_MspInit+0x40>)
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80062ee:	4b05      	ldr	r3, [pc, #20]	; (8006304 <HAL_RTC_MspInit+0x44>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40002800 	.word	0x40002800
 8006300:	40021000 	.word	0x40021000
 8006304:	4242043c 	.word	0x4242043c

08006308 <uartInit>:
DMA_HandleTypeDef  hdma_usart1_rx;



bool uartInit(void)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800630e:	2300      	movs	r3, #0
 8006310:	607b      	str	r3, [r7, #4]
 8006312:	e007      	b.n	8006324 <uartInit+0x1c>
  {
    is_open[i] = false;
 8006314:	4a08      	ldr	r2, [pc, #32]	; (8006338 <uartInit+0x30>)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3301      	adds	r3, #1
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b01      	cmp	r3, #1
 8006328:	ddf4      	ble.n	8006314 <uartInit+0xc>
  }


  return true;
 800632a:	2301      	movs	r3, #1
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	20000a28 	.word	0x20000a28

0800633c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	6039      	str	r1, [r7, #0]
 8006346:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <uartOpen+0x1c>
 8006352:	2b01      	cmp	r3, #1
 8006354:	d007      	beq.n	8006366 <uartOpen+0x2a>
 8006356:	e074      	b.n	8006442 <uartOpen+0x106>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	4a3c      	ldr	r2, [pc, #240]	; (800644c <uartOpen+0x110>)
 800635c:	2101      	movs	r1, #1
 800635e:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
      break;
 8006364:	e06d      	b.n	8006442 <uartOpen+0x106>

    case _DEF_UART2:
      huart1.Instance = USART1;
 8006366:	4b3a      	ldr	r3, [pc, #232]	; (8006450 <uartOpen+0x114>)
 8006368:	4a3a      	ldr	r2, [pc, #232]	; (8006454 <uartOpen+0x118>)
 800636a:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 800636c:	4a38      	ldr	r2, [pc, #224]	; (8006450 <uartOpen+0x114>)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006372:	4b37      	ldr	r3, [pc, #220]	; (8006450 <uartOpen+0x114>)
 8006374:	2200      	movs	r2, #0
 8006376:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8006378:	4b35      	ldr	r3, [pc, #212]	; (8006450 <uartOpen+0x114>)
 800637a:	2200      	movs	r2, #0
 800637c:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 800637e:	4b34      	ldr	r3, [pc, #208]	; (8006450 <uartOpen+0x114>)
 8006380:	2200      	movs	r2, #0
 8006382:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8006384:	4b32      	ldr	r3, [pc, #200]	; (8006450 <uartOpen+0x114>)
 8006386:	220c      	movs	r2, #12
 8006388:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800638a:	4b31      	ldr	r3, [pc, #196]	; (8006450 <uartOpen+0x114>)
 800638c:	2200      	movs	r2, #0
 800638e:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006390:	4b2f      	ldr	r3, [pc, #188]	; (8006450 <uartOpen+0x114>)
 8006392:	2200      	movs	r2, #0
 8006394:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8006396:	482e      	ldr	r0, [pc, #184]	; (8006450 <uartOpen+0x114>)
 8006398:	f003 f999 	bl	80096ce <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	4a2d      	ldr	r2, [pc, #180]	; (8006458 <uartOpen+0x11c>)
 80063a2:	4413      	add	r3, r2
 80063a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063a8:	492c      	ldr	r1, [pc, #176]	; (800645c <uartOpen+0x120>)
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff f97d 	bl	80056aa <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA1_CLK_ENABLE();
 80063b0:	4b2b      	ldr	r3, [pc, #172]	; (8006460 <uartOpen+0x124>)
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	4a2a      	ldr	r2, [pc, #168]	; (8006460 <uartOpen+0x124>)
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	6153      	str	r3, [r2, #20]
 80063bc:	4b28      	ldr	r3, [pc, #160]	; (8006460 <uartOpen+0x124>)
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	68bb      	ldr	r3, [r7, #8]

      /* DMA interrupt init */
      /* DMA1_Channel5_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80063c8:	2200      	movs	r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	200f      	movs	r0, #15
 80063ce:	f000 fb58 	bl	8006a82 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80063d2:	200f      	movs	r0, #15
 80063d4:	f000 fb71 	bl	8006aba <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart1) != HAL_OK)
 80063d8:	481d      	ldr	r0, [pc, #116]	; (8006450 <uartOpen+0x114>)
 80063da:	f003 f92b 	bl	8009634 <HAL_UART_Init>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <uartOpen+0xae>
      {
        ret = false;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
      }
      break;
 80063e8:	e02a      	b.n	8006440 <uartOpen+0x104>
        ret = true;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	4a16      	ldr	r2, [pc, #88]	; (800644c <uartOpen+0x110>)
 80063f2:	2101      	movs	r1, #1
 80063f4:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80063f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063fa:	4918      	ldr	r1, [pc, #96]	; (800645c <uartOpen+0x120>)
 80063fc:	4814      	ldr	r0, [pc, #80]	; (8006450 <uartOpen+0x114>)
 80063fe:	f003 fa23 	bl	8009848 <HAL_UART_Receive_DMA>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <uartOpen+0xd0>
          ret = false;
 8006408:	2300      	movs	r3, #0
 800640a:	73fb      	strb	r3, [r7, #15]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	4a12      	ldr	r2, [pc, #72]	; (8006458 <uartOpen+0x11c>)
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	4413      	add	r3, r2
 8006414:	3308      	adds	r3, #8
 8006416:	6819      	ldr	r1, [r3, #0]
 8006418:	4b12      	ldr	r3, [pc, #72]	; (8006464 <uartOpen+0x128>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	1a8a      	subs	r2, r1, r2
 8006422:	490d      	ldr	r1, [pc, #52]	; (8006458 <uartOpen+0x11c>)
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	440b      	add	r3, r1
 8006428:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
 800642a:	79fa      	ldrb	r2, [r7, #7]
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	490a      	ldr	r1, [pc, #40]	; (8006458 <uartOpen+0x11c>)
 8006430:	0112      	lsls	r2, r2, #4
 8006432:	440a      	add	r2, r1
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	4908      	ldr	r1, [pc, #32]	; (8006458 <uartOpen+0x11c>)
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	440b      	add	r3, r1
 800643c:	3304      	adds	r3, #4
 800643e:	601a      	str	r2, [r3, #0]
      break;
 8006440:	bf00      	nop
  }

  return ret;
 8006442:	7bfb      	ldrb	r3, [r7, #15]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000a28 	.word	0x20000a28
 8006450:	20000ea0 	.word	0x20000ea0
 8006454:	40013800 	.word	0x40013800
 8006458:	20000a2c 	.word	0x20000a2c
 800645c:	20000a4c 	.word	0x20000a4c
 8006460:	40021000 	.word	0x40021000
 8006464:	20000e5c 	.word	0x20000e5c

08006468 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <uartAvailable+0x1a>
 800647c:	2b01      	cmp	r3, #1
 800647e:	d004      	beq.n	800648a <uartAvailable+0x22>
 8006480:	e01b      	b.n	80064ba <uartAvailable+0x52>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 8006482:	f006 f8ff 	bl	800c684 <cdcAvailable>
 8006486:	60f8      	str	r0, [r7, #12]
      break;
 8006488:	e017      	b.n	80064ba <uartAvailable+0x52>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	4a0d      	ldr	r2, [pc, #52]	; (80064c4 <uartAvailable+0x5c>)
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	4413      	add	r3, r2
 8006492:	3308      	adds	r3, #8
 8006494:	6819      	ldr	r1, [r3, #0]
 8006496:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <uartAvailable+0x60>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	1a8a      	subs	r2, r1, r2
 80064a0:	4908      	ldr	r1, [pc, #32]	; (80064c4 <uartAvailable+0x5c>)
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	440b      	add	r3, r1
 80064a6:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	4a05      	ldr	r2, [pc, #20]	; (80064c4 <uartAvailable+0x5c>)
 80064ae:	4413      	add	r3, r2
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff f950 	bl	8005756 <qbufferAvailable>
 80064b6:	60f8      	str	r0, [r7, #12]
      break;
 80064b8:	bf00      	nop

  }

  return ret;
 80064ba:	68fb      	ldr	r3, [r7, #12]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000a2c 	.word	0x20000a2c
 80064c8:	20000e5c 	.word	0x20000e5c

080064cc <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <uartRead+0x1a>
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d005      	beq.n	80064f0 <uartRead+0x24>
 80064e4:	e00c      	b.n	8006500 <uartRead+0x34>
  {
    case _DEF_UART1:
      ret = cdcRead();
 80064e6:	f006 f8e9 	bl	800c6bc <cdcRead>
 80064ea:	4603      	mov	r3, r0
 80064ec:	73fb      	strb	r3, [r7, #15]
      break;
 80064ee:	e007      	b.n	8006500 <uartRead+0x34>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80064f0:	f107 030f 	add.w	r3, r7, #15
 80064f4:	2201      	movs	r2, #1
 80064f6:	4619      	mov	r1, r3
 80064f8:	4804      	ldr	r0, [pc, #16]	; (800650c <uartRead+0x40>)
 80064fa:	f7ff f8f0 	bl	80056de <qbufferRead>
      break;
 80064fe:	bf00      	nop

  }

  return ret;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000a3c 	.word	0x20000a3c

08006510 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <uartWrite+0x1e>
 8006528:	2b01      	cmp	r3, #1
 800652a:	d006      	beq.n	800653a <uartWrite+0x2a>
 800652c:	e014      	b.n	8006558 <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	68b8      	ldr	r0, [r7, #8]
 8006532:	f006 f915 	bl	800c760 <cdcWrite>
 8006536:	6178      	str	r0, [r7, #20]
      break;
 8006538:	e00e      	b.n	8006558 <uartWrite+0x48>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	b29a      	uxth	r2, r3
 800653e:	2364      	movs	r3, #100	; 0x64
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	4808      	ldr	r0, [pc, #32]	; (8006564 <uartWrite+0x54>)
 8006544:	f003 f8e7 	bl	8009716 <HAL_UART_Transmit>
 8006548:	4603      	mov	r3, r0
 800654a:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800654c:	7cfb      	ldrb	r3, [r7, #19]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <uartWrite+0x46>
      {
        ret = length;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	617b      	str	r3, [r7, #20]
      }
      break;
 8006556:	bf00      	nop

  }

  return ret;
 8006558:	697b      	ldr	r3, [r7, #20]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000ea0 	.word	0x20000ea0

08006568 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8006568:	b40e      	push	{r1, r2, r3}
 800656a:	b580      	push	{r7, lr}
 800656c:	b0c7      	sub	sp, #284	; 0x11c
 800656e:	af00      	add	r7, sp, #0
 8006570:	4602      	mov	r2, r0
 8006572:	1dfb      	adds	r3, r7, #7
 8006574:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8006576:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800657a:	f107 030c 	add.w	r3, r7, #12
 800657e:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8006580:	f107 030c 	add.w	r3, r7, #12
 8006584:	f107 0010 	add.w	r0, r7, #16
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800658e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006592:	f006 fe1d 	bl	800d1d0 <vsniprintf>
 8006596:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800659a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800659e:	f107 0110 	add.w	r1, r7, #16
 80065a2:	1dfb      	adds	r3, r7, #7
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff ffb2 	bl	8006510 <uartWrite>
 80065ac:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 80065b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80065ba:	46bd      	mov	sp, r7
 80065bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065c0:	b003      	add	sp, #12
 80065c2:	4770      	bx	lr

080065c4 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr

080065d6 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr

080065e8 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065f0:	f107 0310 	add.w	r3, r7, #16
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	605a      	str	r2, [r3, #4]
 80065fa:	609a      	str	r2, [r3, #8]
 80065fc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a33      	ldr	r2, [pc, #204]	; (80066d0 <HAL_UART_MspInit+0xe8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d15f      	bne.n	80066c8 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006608:	4b32      	ldr	r3, [pc, #200]	; (80066d4 <HAL_UART_MspInit+0xec>)
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	4a31      	ldr	r2, [pc, #196]	; (80066d4 <HAL_UART_MspInit+0xec>)
 800660e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006612:	6193      	str	r3, [r2, #24]
 8006614:	4b2f      	ldr	r3, [pc, #188]	; (80066d4 <HAL_UART_MspInit+0xec>)
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006620:	4b2c      	ldr	r3, [pc, #176]	; (80066d4 <HAL_UART_MspInit+0xec>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	4a2b      	ldr	r2, [pc, #172]	; (80066d4 <HAL_UART_MspInit+0xec>)
 8006626:	f043 0304 	orr.w	r3, r3, #4
 800662a:	6193      	str	r3, [r2, #24]
 800662c:	4b29      	ldr	r3, [pc, #164]	; (80066d4 <HAL_UART_MspInit+0xec>)
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800663c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800663e:	2302      	movs	r3, #2
 8006640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006642:	2303      	movs	r3, #3
 8006644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006646:	f107 0310 	add.w	r3, r7, #16
 800664a:	4619      	mov	r1, r3
 800664c:	4822      	ldr	r0, [pc, #136]	; (80066d8 <HAL_UART_MspInit+0xf0>)
 800664e:	f000 ff1d 	bl	800748c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006658:	2300      	movs	r3, #0
 800665a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665c:	2300      	movs	r3, #0
 800665e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006660:	f107 0310 	add.w	r3, r7, #16
 8006664:	4619      	mov	r1, r3
 8006666:	481c      	ldr	r0, [pc, #112]	; (80066d8 <HAL_UART_MspInit+0xf0>)
 8006668:	f000 ff10 	bl	800748c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800666c:	4b1b      	ldr	r3, [pc, #108]	; (80066dc <HAL_UART_MspInit+0xf4>)
 800666e:	4a1c      	ldr	r2, [pc, #112]	; (80066e0 <HAL_UART_MspInit+0xf8>)
 8006670:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006672:	4b1a      	ldr	r3, [pc, #104]	; (80066dc <HAL_UART_MspInit+0xf4>)
 8006674:	2200      	movs	r2, #0
 8006676:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006678:	4b18      	ldr	r3, [pc, #96]	; (80066dc <HAL_UART_MspInit+0xf4>)
 800667a:	2200      	movs	r2, #0
 800667c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800667e:	4b17      	ldr	r3, [pc, #92]	; (80066dc <HAL_UART_MspInit+0xf4>)
 8006680:	2280      	movs	r2, #128	; 0x80
 8006682:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006684:	4b15      	ldr	r3, [pc, #84]	; (80066dc <HAL_UART_MspInit+0xf4>)
 8006686:	2200      	movs	r2, #0
 8006688:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800668a:	4b14      	ldr	r3, [pc, #80]	; (80066dc <HAL_UART_MspInit+0xf4>)
 800668c:	2200      	movs	r2, #0
 800668e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006690:	4b12      	ldr	r3, [pc, #72]	; (80066dc <HAL_UART_MspInit+0xf4>)
 8006692:	2220      	movs	r2, #32
 8006694:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006696:	4b11      	ldr	r3, [pc, #68]	; (80066dc <HAL_UART_MspInit+0xf4>)
 8006698:	2200      	movs	r2, #0
 800669a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800669c:	480f      	ldr	r0, [pc, #60]	; (80066dc <HAL_UART_MspInit+0xf4>)
 800669e:	f000 fa35 	bl	8006b0c <HAL_DMA_Init>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80066a8:	f7fe fef8 	bl	800549c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a0b      	ldr	r2, [pc, #44]	; (80066dc <HAL_UART_MspInit+0xf4>)
 80066b0:	635a      	str	r2, [r3, #52]	; 0x34
 80066b2:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <HAL_UART_MspInit+0xf4>)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80066b8:	2200      	movs	r2, #0
 80066ba:	2100      	movs	r1, #0
 80066bc:	2025      	movs	r0, #37	; 0x25
 80066be:	f000 f9e0 	bl	8006a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80066c2:	2025      	movs	r0, #37	; 0x25
 80066c4:	f000 f9f9 	bl	8006aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80066c8:	bf00      	nop
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40013800 	.word	0x40013800
 80066d4:	40021000 	.word	0x40021000
 80066d8:	40010800 	.word	0x40010800
 80066dc:	20000e5c 	.word	0x20000e5c
 80066e0:	40020058 	.word	0x40020058

080066e4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a0c      	ldr	r2, [pc, #48]	; (8006724 <HAL_UART_MspDeInit+0x40>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d112      	bne.n	800671c <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80066f6:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <HAL_UART_MspDeInit+0x44>)
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	4a0b      	ldr	r2, [pc, #44]	; (8006728 <HAL_UART_MspDeInit+0x44>)
 80066fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006700:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006702:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006706:	4809      	ldr	r0, [pc, #36]	; (800672c <HAL_UART_MspDeInit+0x48>)
 8006708:	f001 f82e 	bl	8007768 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fa71 	bl	8006bf8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006716:	2025      	movs	r0, #37	; 0x25
 8006718:	f000 f9dd 	bl	8006ad6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40013800 	.word	0x40013800
 8006728:	40021000 	.word	0x40021000
 800672c:	40010800 	.word	0x40010800

08006730 <usbInit>:




bool usbInit(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
  bool ret = true;
 8006736:	2301      	movs	r3, #1
 8006738:	75fb      	strb	r3, [r7, #23]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800673a:	1d3b      	adds	r3, r7, #4
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	605a      	str	r2, [r3, #4]
 8006742:	609a      	str	r2, [r3, #8]
 8006744:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
#endif
  delay(200);
 8006746:	20c8      	movs	r0, #200	; 0xc8
 8006748:	f7fe fdf4 	bl	8005334 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800674c:	2201      	movs	r2, #1
 800674e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006752:	4808      	ldr	r0, [pc, #32]	; (8006774 <usbInit+0x44>)
 8006754:	f001 f8da 	bl	800790c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006758:	2300      	movs	r3, #0
 800675a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800675c:	1d3b      	adds	r3, r7, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4804      	ldr	r0, [pc, #16]	; (8006774 <usbInit+0x44>)
 8006762:	f000 fe93 	bl	800748c <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 8006766:	f005 ff5d 	bl	800c624 <MX_USB_DEVICE_Init>

  return ret;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40010800 	.word	0x40010800

08006778 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  bspInit();
 800677c:	f7fe fd94 	bl	80052a8 <bspInit>
  cliInit();
 8006780:	f7ff f804 	bl	800578c <cliInit>

  rtcInit();
 8006784:	f7ff fd4c 	bl	8006220 <rtcInit>
  resetInit();
 8006788:	f7ff fd1e 	bl	80061c8 <resetInit>
  ledInit();
 800678c:	f7ff fc92 	bl	80060b4 <ledInit>
  usbInit();
 8006790:	f7ff ffce 	bl	8006730 <usbInit>
  uartInit();
 8006794:	f7ff fdb8 	bl	8006308 <uartInit>
  flashInit();
 8006798:	f7ff fc68 	bl	800606c <flashInit>
}
 800679c:	bf00      	nop
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80067a4:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <HAL_Init+0x28>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a07      	ldr	r2, [pc, #28]	; (80067c8 <HAL_Init+0x28>)
 80067aa:	f043 0310 	orr.w	r3, r3, #16
 80067ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067b0:	2003      	movs	r0, #3
 80067b2:	f000 f95b 	bl	8006a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067b6:	2000      	movs	r0, #0
 80067b8:	f000 f808 	bl	80067cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067bc:	f7fe fe74 	bl	80054a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40022000 	.word	0x40022000

080067cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067d4:	4b12      	ldr	r3, [pc, #72]	; (8006820 <HAL_InitTick+0x54>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4b12      	ldr	r3, [pc, #72]	; (8006824 <HAL_InitTick+0x58>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	4619      	mov	r1, r3
 80067de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80067e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 f981 	bl	8006af2 <HAL_SYSTICK_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e00e      	b.n	8006818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b0f      	cmp	r3, #15
 80067fe:	d80a      	bhi.n	8006816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006800:	2200      	movs	r2, #0
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	f04f 30ff 	mov.w	r0, #4294967295
 8006808:	f000 f93b 	bl	8006a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800680c:	4a06      	ldr	r2, [pc, #24]	; (8006828 <HAL_InitTick+0x5c>)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	e000      	b.n	8006818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	20000000 	.word	0x20000000
 8006824:	20000028 	.word	0x20000028
 8006828:	20000024 	.word	0x20000024

0800682c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <HAL_IncTick+0x1c>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <HAL_IncTick+0x20>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4413      	add	r3, r2
 800683c:	4a03      	ldr	r2, [pc, #12]	; (800684c <HAL_IncTick+0x20>)
 800683e:	6013      	str	r3, [r2, #0]
}
 8006840:	bf00      	nop
 8006842:	46bd      	mov	sp, r7
 8006844:	bc80      	pop	{r7}
 8006846:	4770      	bx	lr
 8006848:	20000028 	.word	0x20000028
 800684c:	20000ee0 	.word	0x20000ee0

08006850 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
  return uwTick;
 8006854:	4b02      	ldr	r3, [pc, #8]	; (8006860 <HAL_GetTick+0x10>)
 8006856:	681b      	ldr	r3, [r3, #0]
}
 8006858:	4618      	mov	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr
 8006860:	20000ee0 	.word	0x20000ee0

08006864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800686c:	f7ff fff0 	bl	8006850 <HAL_GetTick>
 8006870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687c:	d005      	beq.n	800688a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800687e:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <HAL_Delay+0x40>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800688a:	bf00      	nop
 800688c:	f7ff ffe0 	bl	8006850 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	429a      	cmp	r2, r3
 800689a:	d8f7      	bhi.n	800688c <HAL_Delay+0x28>
  {
  }
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000028 	.word	0x20000028

080068a8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068b8:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <NVIC_SetPriorityGrouping+0x44>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068c4:	4013      	ands	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068da:	4a04      	ldr	r2, [pc, #16]	; (80068ec <NVIC_SetPriorityGrouping+0x44>)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	60d3      	str	r3, [r2, #12]
}
 80068e0:	bf00      	nop
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	e000ed00 	.word	0xe000ed00

080068f0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068f4:	4b04      	ldr	r3, [pc, #16]	; (8006908 <NVIC_GetPriorityGrouping+0x18>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	0a1b      	lsrs	r3, r3, #8
 80068fa:	f003 0307 	and.w	r3, r3, #7
}
 80068fe:	4618      	mov	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	bc80      	pop	{r7}
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	e000ed00 	.word	0xe000ed00

0800690c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	f003 021f 	and.w	r2, r3, #31
 800691c:	4906      	ldr	r1, [pc, #24]	; (8006938 <NVIC_EnableIRQ+0x2c>)
 800691e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	2001      	movs	r0, #1
 8006926:	fa00 f202 	lsl.w	r2, r0, r2
 800692a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr
 8006938:	e000e100 	.word	0xe000e100

0800693c <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	f003 021f 	and.w	r2, r3, #31
 800694c:	4907      	ldr	r1, [pc, #28]	; (800696c <NVIC_DisableIRQ+0x30>)
 800694e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	2001      	movs	r0, #1
 8006956:	fa00 f202 	lsl.w	r2, r0, r2
 800695a:	3320      	adds	r3, #32
 800695c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	e000e100 	.word	0xe000e100

08006970 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	4603      	mov	r3, r0
 8006978:	6039      	str	r1, [r7, #0]
 800697a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800697c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006980:	2b00      	cmp	r3, #0
 8006982:	da0b      	bge.n	800699c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	b2da      	uxtb	r2, r3
 8006988:	490c      	ldr	r1, [pc, #48]	; (80069bc <NVIC_SetPriority+0x4c>)
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	f003 030f 	and.w	r3, r3, #15
 8006990:	3b04      	subs	r3, #4
 8006992:	0112      	lsls	r2, r2, #4
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	440b      	add	r3, r1
 8006998:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800699a:	e009      	b.n	80069b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	4907      	ldr	r1, [pc, #28]	; (80069c0 <NVIC_SetPriority+0x50>)
 80069a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a6:	0112      	lsls	r2, r2, #4
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	440b      	add	r3, r1
 80069ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	e000ed00 	.word	0xe000ed00
 80069c0:	e000e100 	.word	0xe000e100

080069c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b089      	sub	sp, #36	; 0x24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f1c3 0307 	rsb	r3, r3, #7
 80069de:	2b04      	cmp	r3, #4
 80069e0:	bf28      	it	cs
 80069e2:	2304      	movcs	r3, #4
 80069e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	3304      	adds	r3, #4
 80069ea:	2b06      	cmp	r3, #6
 80069ec:	d902      	bls.n	80069f4 <NVIC_EncodePriority+0x30>
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	3b03      	subs	r3, #3
 80069f2:	e000      	b.n	80069f6 <NVIC_EncodePriority+0x32>
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069f8:	f04f 32ff 	mov.w	r2, #4294967295
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006a02:	43da      	mvns	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	401a      	ands	r2, r3
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	fa01 f303 	lsl.w	r3, r1, r3
 8006a16:	43d9      	mvns	r1, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a1c:	4313      	orrs	r3, r2
         );
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3724      	adds	r7, #36	; 0x24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr

08006a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a38:	d301      	bcc.n	8006a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e00f      	b.n	8006a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a3e:	4a0a      	ldr	r2, [pc, #40]	; (8006a68 <SysTick_Config+0x40>)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a46:	210f      	movs	r1, #15
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	f7ff ff90 	bl	8006970 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <SysTick_Config+0x40>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a56:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <SysTick_Config+0x40>)
 8006a58:	2207      	movs	r2, #7
 8006a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	e000e010 	.word	0xe000e010

08006a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff ff17 	bl	80068a8 <NVIC_SetPriorityGrouping>
}
 8006a7a:	bf00      	nop
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	4603      	mov	r3, r0
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	607a      	str	r2, [r7, #4]
 8006a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a94:	f7ff ff2c 	bl	80068f0 <NVIC_GetPriorityGrouping>
 8006a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	6978      	ldr	r0, [r7, #20]
 8006aa0:	f7ff ff90 	bl	80069c4 <NVIC_EncodePriority>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aaa:	4611      	mov	r1, r2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff ff5f 	bl	8006970 <NVIC_SetPriority>
}
 8006ab2:	bf00      	nop
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff ff1f 	bl	800690c <NVIC_EnableIRQ>
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	4603      	mov	r3, r0
 8006ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff ff29 	bl	800693c <NVIC_DisableIRQ>
}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff ff94 	bl	8006a28 <SysTick_Config>
 8006b00:	4603      	mov	r3, r0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e059      	b.n	8006bd6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	4b2d      	ldr	r3, [pc, #180]	; (8006be0 <HAL_DMA_Init+0xd4>)
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d80f      	bhi.n	8006b4e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	4b2b      	ldr	r3, [pc, #172]	; (8006be4 <HAL_DMA_Init+0xd8>)
 8006b36:	4413      	add	r3, r2
 8006b38:	4a2b      	ldr	r2, [pc, #172]	; (8006be8 <HAL_DMA_Init+0xdc>)
 8006b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3e:	091b      	lsrs	r3, r3, #4
 8006b40:	009a      	lsls	r2, r3, #2
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a28      	ldr	r2, [pc, #160]	; (8006bec <HAL_DMA_Init+0xe0>)
 8006b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8006b4c:	e00e      	b.n	8006b6c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	4b26      	ldr	r3, [pc, #152]	; (8006bf0 <HAL_DMA_Init+0xe4>)
 8006b56:	4413      	add	r3, r2
 8006b58:	4a23      	ldr	r2, [pc, #140]	; (8006be8 <HAL_DMA_Init+0xdc>)
 8006b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	009a      	lsls	r2, r3, #2
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <HAL_DMA_Init+0xe8>)
 8006b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006b82:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006b86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ba8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr
 8006be0:	40020407 	.word	0x40020407
 8006be4:	bffdfff8 	.word	0xbffdfff8
 8006be8:	cccccccd 	.word	0xcccccccd
 8006bec:	40020000 	.word	0x40020000
 8006bf0:	bffdfbf8 	.word	0xbffdfbf8
 8006bf4:	40020400 	.word	0x40020400

08006bf8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e05c      	b.n	8006cc4 <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0201 	bic.w	r2, r2, #1
 8006c18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2200      	movs	r2, #0
 8006c28:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2200      	movs	r2, #0
 8006c38:	60da      	str	r2, [r3, #12]

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <HAL_DMA_DeInit+0xd8>)
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d80f      	bhi.n	8006c66 <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	4b21      	ldr	r3, [pc, #132]	; (8006cd4 <HAL_DMA_DeInit+0xdc>)
 8006c4e:	4413      	add	r3, r2
 8006c50:	4a21      	ldr	r2, [pc, #132]	; (8006cd8 <HAL_DMA_DeInit+0xe0>)
 8006c52:	fba2 2303 	umull	r2, r3, r2, r3
 8006c56:	091b      	lsrs	r3, r3, #4
 8006c58:	009a      	lsls	r2, r3, #2
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a1e      	ldr	r2, [pc, #120]	; (8006cdc <HAL_DMA_DeInit+0xe4>)
 8006c62:	63da      	str	r2, [r3, #60]	; 0x3c
 8006c64:	e00e      	b.n	8006c84 <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ce0 <HAL_DMA_DeInit+0xe8>)
 8006c6e:	4413      	add	r3, r2
 8006c70:	4a19      	ldr	r2, [pc, #100]	; (8006cd8 <HAL_DMA_DeInit+0xe0>)
 8006c72:	fba2 2303 	umull	r2, r3, r2, r3
 8006c76:	091b      	lsrs	r3, r3, #4
 8006c78:	009a      	lsls	r2, r3, #2
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a18      	ldr	r2, [pc, #96]	; (8006ce4 <HAL_DMA_DeInit+0xec>)
 8006c82:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8006c92:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40020407 	.word	0x40020407
 8006cd4:	bffdfff8 	.word	0xbffdfff8
 8006cd8:	cccccccd 	.word	0xcccccccd
 8006cdc:	40020000 	.word	0x40020000
 8006ce0:	bffdfbf8 	.word	0xbffdfbf8
 8006ce4:	40020400 	.word	0x40020400

08006ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_DMA_Start_IT+0x20>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e04a      	b.n	8006d9e <HAL_DMA_Start_IT+0xb6>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d13a      	bne.n	8006d90 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fb76 	bl	8007430 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 020e 	orr.w	r2, r2, #14
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	e00f      	b.n	8006d7e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0204 	bic.w	r2, r2, #4
 8006d6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 020a 	orr.w	r2, r2, #10
 8006d7c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0201 	orr.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	e005      	b.n	8006d9c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d005      	beq.n	8006dca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2204      	movs	r2, #4
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
 8006dc8:	e0d6      	b.n	8006f78 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 020e 	bic.w	r2, r2, #14
 8006dd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0201 	bic.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	4b64      	ldr	r3, [pc, #400]	; (8006f84 <HAL_DMA_Abort_IT+0x1dc>)
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d958      	bls.n	8006ea8 <HAL_DMA_Abort_IT+0x100>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a63      	ldr	r2, [pc, #396]	; (8006f88 <HAL_DMA_Abort_IT+0x1e0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d04f      	beq.n	8006ea0 <HAL_DMA_Abort_IT+0xf8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a61      	ldr	r2, [pc, #388]	; (8006f8c <HAL_DMA_Abort_IT+0x1e4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d048      	beq.n	8006e9c <HAL_DMA_Abort_IT+0xf4>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a60      	ldr	r2, [pc, #384]	; (8006f90 <HAL_DMA_Abort_IT+0x1e8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d040      	beq.n	8006e96 <HAL_DMA_Abort_IT+0xee>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a5e      	ldr	r2, [pc, #376]	; (8006f94 <HAL_DMA_Abort_IT+0x1ec>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d038      	beq.n	8006e90 <HAL_DMA_Abort_IT+0xe8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a5d      	ldr	r2, [pc, #372]	; (8006f98 <HAL_DMA_Abort_IT+0x1f0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d030      	beq.n	8006e8a <HAL_DMA_Abort_IT+0xe2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a5b      	ldr	r2, [pc, #364]	; (8006f9c <HAL_DMA_Abort_IT+0x1f4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d028      	beq.n	8006e84 <HAL_DMA_Abort_IT+0xdc>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a53      	ldr	r2, [pc, #332]	; (8006f84 <HAL_DMA_Abort_IT+0x1dc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d020      	beq.n	8006e7e <HAL_DMA_Abort_IT+0xd6>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a57      	ldr	r2, [pc, #348]	; (8006fa0 <HAL_DMA_Abort_IT+0x1f8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d019      	beq.n	8006e7a <HAL_DMA_Abort_IT+0xd2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a56      	ldr	r2, [pc, #344]	; (8006fa4 <HAL_DMA_Abort_IT+0x1fc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d012      	beq.n	8006e76 <HAL_DMA_Abort_IT+0xce>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a54      	ldr	r2, [pc, #336]	; (8006fa8 <HAL_DMA_Abort_IT+0x200>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00a      	beq.n	8006e70 <HAL_DMA_Abort_IT+0xc8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a53      	ldr	r2, [pc, #332]	; (8006fac <HAL_DMA_Abort_IT+0x204>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d102      	bne.n	8006e6a <HAL_DMA_Abort_IT+0xc2>
 8006e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e68:	e01b      	b.n	8006ea2 <HAL_DMA_Abort_IT+0xfa>
 8006e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e6e:	e018      	b.n	8006ea2 <HAL_DMA_Abort_IT+0xfa>
 8006e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e74:	e015      	b.n	8006ea2 <HAL_DMA_Abort_IT+0xfa>
 8006e76:	2310      	movs	r3, #16
 8006e78:	e013      	b.n	8006ea2 <HAL_DMA_Abort_IT+0xfa>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e011      	b.n	8006ea2 <HAL_DMA_Abort_IT+0xfa>
 8006e7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e82:	e00e      	b.n	8006ea2 <HAL_DMA_Abort_IT+0xfa>
 8006e84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e88:	e00b      	b.n	8006ea2 <HAL_DMA_Abort_IT+0xfa>
 8006e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e8e:	e008      	b.n	8006ea2 <HAL_DMA_Abort_IT+0xfa>
 8006e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e94:	e005      	b.n	8006ea2 <HAL_DMA_Abort_IT+0xfa>
 8006e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e9a:	e002      	b.n	8006ea2 <HAL_DMA_Abort_IT+0xfa>
 8006e9c:	2310      	movs	r3, #16
 8006e9e:	e000      	b.n	8006ea2 <HAL_DMA_Abort_IT+0xfa>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	4a43      	ldr	r2, [pc, #268]	; (8006fb0 <HAL_DMA_Abort_IT+0x208>)
 8006ea4:	6053      	str	r3, [r2, #4]
 8006ea6:	e057      	b.n	8006f58 <HAL_DMA_Abort_IT+0x1b0>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a36      	ldr	r2, [pc, #216]	; (8006f88 <HAL_DMA_Abort_IT+0x1e0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d04f      	beq.n	8006f52 <HAL_DMA_Abort_IT+0x1aa>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a35      	ldr	r2, [pc, #212]	; (8006f8c <HAL_DMA_Abort_IT+0x1e4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d048      	beq.n	8006f4e <HAL_DMA_Abort_IT+0x1a6>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a33      	ldr	r2, [pc, #204]	; (8006f90 <HAL_DMA_Abort_IT+0x1e8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d040      	beq.n	8006f48 <HAL_DMA_Abort_IT+0x1a0>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a32      	ldr	r2, [pc, #200]	; (8006f94 <HAL_DMA_Abort_IT+0x1ec>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d038      	beq.n	8006f42 <HAL_DMA_Abort_IT+0x19a>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a30      	ldr	r2, [pc, #192]	; (8006f98 <HAL_DMA_Abort_IT+0x1f0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d030      	beq.n	8006f3c <HAL_DMA_Abort_IT+0x194>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a2f      	ldr	r2, [pc, #188]	; (8006f9c <HAL_DMA_Abort_IT+0x1f4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d028      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x18e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a26      	ldr	r2, [pc, #152]	; (8006f84 <HAL_DMA_Abort_IT+0x1dc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d020      	beq.n	8006f30 <HAL_DMA_Abort_IT+0x188>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a2b      	ldr	r2, [pc, #172]	; (8006fa0 <HAL_DMA_Abort_IT+0x1f8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d019      	beq.n	8006f2c <HAL_DMA_Abort_IT+0x184>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a29      	ldr	r2, [pc, #164]	; (8006fa4 <HAL_DMA_Abort_IT+0x1fc>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d012      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x180>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a28      	ldr	r2, [pc, #160]	; (8006fa8 <HAL_DMA_Abort_IT+0x200>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00a      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x17a>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a26      	ldr	r2, [pc, #152]	; (8006fac <HAL_DMA_Abort_IT+0x204>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d102      	bne.n	8006f1c <HAL_DMA_Abort_IT+0x174>
 8006f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f1a:	e01b      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1ac>
 8006f1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f20:	e018      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1ac>
 8006f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f26:	e015      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1ac>
 8006f28:	2310      	movs	r3, #16
 8006f2a:	e013      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1ac>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e011      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1ac>
 8006f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f34:	e00e      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1ac>
 8006f36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f3a:	e00b      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1ac>
 8006f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f40:	e008      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1ac>
 8006f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f46:	e005      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1ac>
 8006f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f4c:	e002      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1ac>
 8006f4e:	2310      	movs	r3, #16
 8006f50:	e000      	b.n	8006f54 <HAL_DMA_Abort_IT+0x1ac>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4a17      	ldr	r2, [pc, #92]	; (8006fb4 <HAL_DMA_Abort_IT+0x20c>)
 8006f56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
    } 
  }
  return status;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	40020080 	.word	0x40020080
 8006f88:	40020008 	.word	0x40020008
 8006f8c:	4002001c 	.word	0x4002001c
 8006f90:	40020030 	.word	0x40020030
 8006f94:	40020044 	.word	0x40020044
 8006f98:	40020058 	.word	0x40020058
 8006f9c:	4002006c 	.word	0x4002006c
 8006fa0:	40020408 	.word	0x40020408
 8006fa4:	4002041c 	.word	0x4002041c
 8006fa8:	40020430 	.word	0x40020430
 8006fac:	40020444 	.word	0x40020444
 8006fb0:	40020400 	.word	0x40020400
 8006fb4:	40020000 	.word	0x40020000

08006fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	409a      	lsls	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80d6 	beq.w	800718e <HAL_DMA_IRQHandler+0x1d6>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 80d0 	beq.w	800718e <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0320 	and.w	r3, r3, #32
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d107      	bne.n	800700c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0204 	bic.w	r2, r2, #4
 800700a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	4b9b      	ldr	r3, [pc, #620]	; (8007280 <HAL_DMA_IRQHandler+0x2c8>)
 8007014:	429a      	cmp	r2, r3
 8007016:	d958      	bls.n	80070ca <HAL_DMA_IRQHandler+0x112>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a99      	ldr	r2, [pc, #612]	; (8007284 <HAL_DMA_IRQHandler+0x2cc>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d04f      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x10a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a98      	ldr	r2, [pc, #608]	; (8007288 <HAL_DMA_IRQHandler+0x2d0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d048      	beq.n	80070be <HAL_DMA_IRQHandler+0x106>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a96      	ldr	r2, [pc, #600]	; (800728c <HAL_DMA_IRQHandler+0x2d4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d040      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x100>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a95      	ldr	r2, [pc, #596]	; (8007290 <HAL_DMA_IRQHandler+0x2d8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d038      	beq.n	80070b2 <HAL_DMA_IRQHandler+0xfa>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a93      	ldr	r2, [pc, #588]	; (8007294 <HAL_DMA_IRQHandler+0x2dc>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d030      	beq.n	80070ac <HAL_DMA_IRQHandler+0xf4>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a92      	ldr	r2, [pc, #584]	; (8007298 <HAL_DMA_IRQHandler+0x2e0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d028      	beq.n	80070a6 <HAL_DMA_IRQHandler+0xee>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a89      	ldr	r2, [pc, #548]	; (8007280 <HAL_DMA_IRQHandler+0x2c8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d020      	beq.n	80070a0 <HAL_DMA_IRQHandler+0xe8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a8e      	ldr	r2, [pc, #568]	; (800729c <HAL_DMA_IRQHandler+0x2e4>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d019      	beq.n	800709c <HAL_DMA_IRQHandler+0xe4>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a8c      	ldr	r2, [pc, #560]	; (80072a0 <HAL_DMA_IRQHandler+0x2e8>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d012      	beq.n	8007098 <HAL_DMA_IRQHandler+0xe0>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a8b      	ldr	r2, [pc, #556]	; (80072a4 <HAL_DMA_IRQHandler+0x2ec>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00a      	beq.n	8007092 <HAL_DMA_IRQHandler+0xda>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a89      	ldr	r2, [pc, #548]	; (80072a8 <HAL_DMA_IRQHandler+0x2f0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d102      	bne.n	800708c <HAL_DMA_IRQHandler+0xd4>
 8007086:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800708a:	e01b      	b.n	80070c4 <HAL_DMA_IRQHandler+0x10c>
 800708c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007090:	e018      	b.n	80070c4 <HAL_DMA_IRQHandler+0x10c>
 8007092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007096:	e015      	b.n	80070c4 <HAL_DMA_IRQHandler+0x10c>
 8007098:	2340      	movs	r3, #64	; 0x40
 800709a:	e013      	b.n	80070c4 <HAL_DMA_IRQHandler+0x10c>
 800709c:	2304      	movs	r3, #4
 800709e:	e011      	b.n	80070c4 <HAL_DMA_IRQHandler+0x10c>
 80070a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80070a4:	e00e      	b.n	80070c4 <HAL_DMA_IRQHandler+0x10c>
 80070a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80070aa:	e00b      	b.n	80070c4 <HAL_DMA_IRQHandler+0x10c>
 80070ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070b0:	e008      	b.n	80070c4 <HAL_DMA_IRQHandler+0x10c>
 80070b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070b6:	e005      	b.n	80070c4 <HAL_DMA_IRQHandler+0x10c>
 80070b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070bc:	e002      	b.n	80070c4 <HAL_DMA_IRQHandler+0x10c>
 80070be:	2340      	movs	r3, #64	; 0x40
 80070c0:	e000      	b.n	80070c4 <HAL_DMA_IRQHandler+0x10c>
 80070c2:	2304      	movs	r3, #4
 80070c4:	4a79      	ldr	r2, [pc, #484]	; (80072ac <HAL_DMA_IRQHandler+0x2f4>)
 80070c6:	6053      	str	r3, [r2, #4]
 80070c8:	e057      	b.n	800717a <HAL_DMA_IRQHandler+0x1c2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a6d      	ldr	r2, [pc, #436]	; (8007284 <HAL_DMA_IRQHandler+0x2cc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d04f      	beq.n	8007174 <HAL_DMA_IRQHandler+0x1bc>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a6b      	ldr	r2, [pc, #428]	; (8007288 <HAL_DMA_IRQHandler+0x2d0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d048      	beq.n	8007170 <HAL_DMA_IRQHandler+0x1b8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a6a      	ldr	r2, [pc, #424]	; (800728c <HAL_DMA_IRQHandler+0x2d4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d040      	beq.n	800716a <HAL_DMA_IRQHandler+0x1b2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a68      	ldr	r2, [pc, #416]	; (8007290 <HAL_DMA_IRQHandler+0x2d8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d038      	beq.n	8007164 <HAL_DMA_IRQHandler+0x1ac>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a67      	ldr	r2, [pc, #412]	; (8007294 <HAL_DMA_IRQHandler+0x2dc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d030      	beq.n	800715e <HAL_DMA_IRQHandler+0x1a6>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a65      	ldr	r2, [pc, #404]	; (8007298 <HAL_DMA_IRQHandler+0x2e0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d028      	beq.n	8007158 <HAL_DMA_IRQHandler+0x1a0>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a5d      	ldr	r2, [pc, #372]	; (8007280 <HAL_DMA_IRQHandler+0x2c8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d020      	beq.n	8007152 <HAL_DMA_IRQHandler+0x19a>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a61      	ldr	r2, [pc, #388]	; (800729c <HAL_DMA_IRQHandler+0x2e4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d019      	beq.n	800714e <HAL_DMA_IRQHandler+0x196>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a60      	ldr	r2, [pc, #384]	; (80072a0 <HAL_DMA_IRQHandler+0x2e8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d012      	beq.n	800714a <HAL_DMA_IRQHandler+0x192>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a5e      	ldr	r2, [pc, #376]	; (80072a4 <HAL_DMA_IRQHandler+0x2ec>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00a      	beq.n	8007144 <HAL_DMA_IRQHandler+0x18c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a5d      	ldr	r2, [pc, #372]	; (80072a8 <HAL_DMA_IRQHandler+0x2f0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d102      	bne.n	800713e <HAL_DMA_IRQHandler+0x186>
 8007138:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800713c:	e01b      	b.n	8007176 <HAL_DMA_IRQHandler+0x1be>
 800713e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007142:	e018      	b.n	8007176 <HAL_DMA_IRQHandler+0x1be>
 8007144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007148:	e015      	b.n	8007176 <HAL_DMA_IRQHandler+0x1be>
 800714a:	2340      	movs	r3, #64	; 0x40
 800714c:	e013      	b.n	8007176 <HAL_DMA_IRQHandler+0x1be>
 800714e:	2304      	movs	r3, #4
 8007150:	e011      	b.n	8007176 <HAL_DMA_IRQHandler+0x1be>
 8007152:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007156:	e00e      	b.n	8007176 <HAL_DMA_IRQHandler+0x1be>
 8007158:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800715c:	e00b      	b.n	8007176 <HAL_DMA_IRQHandler+0x1be>
 800715e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007162:	e008      	b.n	8007176 <HAL_DMA_IRQHandler+0x1be>
 8007164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007168:	e005      	b.n	8007176 <HAL_DMA_IRQHandler+0x1be>
 800716a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800716e:	e002      	b.n	8007176 <HAL_DMA_IRQHandler+0x1be>
 8007170:	2340      	movs	r3, #64	; 0x40
 8007172:	e000      	b.n	8007176 <HAL_DMA_IRQHandler+0x1be>
 8007174:	2304      	movs	r3, #4
 8007176:	4a4e      	ldr	r2, [pc, #312]	; (80072b0 <HAL_DMA_IRQHandler+0x2f8>)
 8007178:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 8136 	beq.w	80073f0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800718c:	e130      	b.n	80073f0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	2202      	movs	r2, #2
 8007194:	409a      	lsls	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4013      	ands	r3, r2
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80f8 	beq.w	8007390 <HAL_DMA_IRQHandler+0x3d8>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 80f2 	beq.w	8007390 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 020a 	bic.w	r2, r2, #10
 80071c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	4b29      	ldr	r3, [pc, #164]	; (8007280 <HAL_DMA_IRQHandler+0x2c8>)
 80071da:	429a      	cmp	r2, r3
 80071dc:	d973      	bls.n	80072c6 <HAL_DMA_IRQHandler+0x30e>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a28      	ldr	r2, [pc, #160]	; (8007284 <HAL_DMA_IRQHandler+0x2cc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d06a      	beq.n	80072be <HAL_DMA_IRQHandler+0x306>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a26      	ldr	r2, [pc, #152]	; (8007288 <HAL_DMA_IRQHandler+0x2d0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d063      	beq.n	80072ba <HAL_DMA_IRQHandler+0x302>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a25      	ldr	r2, [pc, #148]	; (800728c <HAL_DMA_IRQHandler+0x2d4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d05b      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x2fc>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a23      	ldr	r2, [pc, #140]	; (8007290 <HAL_DMA_IRQHandler+0x2d8>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d038      	beq.n	8007278 <HAL_DMA_IRQHandler+0x2c0>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a22      	ldr	r2, [pc, #136]	; (8007294 <HAL_DMA_IRQHandler+0x2dc>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d030      	beq.n	8007272 <HAL_DMA_IRQHandler+0x2ba>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a20      	ldr	r2, [pc, #128]	; (8007298 <HAL_DMA_IRQHandler+0x2e0>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d028      	beq.n	800726c <HAL_DMA_IRQHandler+0x2b4>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a18      	ldr	r2, [pc, #96]	; (8007280 <HAL_DMA_IRQHandler+0x2c8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d020      	beq.n	8007266 <HAL_DMA_IRQHandler+0x2ae>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1c      	ldr	r2, [pc, #112]	; (800729c <HAL_DMA_IRQHandler+0x2e4>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d019      	beq.n	8007262 <HAL_DMA_IRQHandler+0x2aa>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1b      	ldr	r2, [pc, #108]	; (80072a0 <HAL_DMA_IRQHandler+0x2e8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d012      	beq.n	800725e <HAL_DMA_IRQHandler+0x2a6>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a19      	ldr	r2, [pc, #100]	; (80072a4 <HAL_DMA_IRQHandler+0x2ec>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00a      	beq.n	8007258 <HAL_DMA_IRQHandler+0x2a0>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <HAL_DMA_IRQHandler+0x2f0>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d102      	bne.n	8007252 <HAL_DMA_IRQHandler+0x29a>
 800724c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007250:	e036      	b.n	80072c0 <HAL_DMA_IRQHandler+0x308>
 8007252:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007256:	e033      	b.n	80072c0 <HAL_DMA_IRQHandler+0x308>
 8007258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800725c:	e030      	b.n	80072c0 <HAL_DMA_IRQHandler+0x308>
 800725e:	2320      	movs	r3, #32
 8007260:	e02e      	b.n	80072c0 <HAL_DMA_IRQHandler+0x308>
 8007262:	2302      	movs	r3, #2
 8007264:	e02c      	b.n	80072c0 <HAL_DMA_IRQHandler+0x308>
 8007266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800726a:	e029      	b.n	80072c0 <HAL_DMA_IRQHandler+0x308>
 800726c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007270:	e026      	b.n	80072c0 <HAL_DMA_IRQHandler+0x308>
 8007272:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007276:	e023      	b.n	80072c0 <HAL_DMA_IRQHandler+0x308>
 8007278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800727c:	e020      	b.n	80072c0 <HAL_DMA_IRQHandler+0x308>
 800727e:	bf00      	nop
 8007280:	40020080 	.word	0x40020080
 8007284:	40020008 	.word	0x40020008
 8007288:	4002001c 	.word	0x4002001c
 800728c:	40020030 	.word	0x40020030
 8007290:	40020044 	.word	0x40020044
 8007294:	40020058 	.word	0x40020058
 8007298:	4002006c 	.word	0x4002006c
 800729c:	40020408 	.word	0x40020408
 80072a0:	4002041c 	.word	0x4002041c
 80072a4:	40020430 	.word	0x40020430
 80072a8:	40020444 	.word	0x40020444
 80072ac:	40020400 	.word	0x40020400
 80072b0:	40020000 	.word	0x40020000
 80072b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072b8:	e002      	b.n	80072c0 <HAL_DMA_IRQHandler+0x308>
 80072ba:	2320      	movs	r3, #32
 80072bc:	e000      	b.n	80072c0 <HAL_DMA_IRQHandler+0x308>
 80072be:	2302      	movs	r3, #2
 80072c0:	4a4e      	ldr	r2, [pc, #312]	; (80073fc <HAL_DMA_IRQHandler+0x444>)
 80072c2:	6053      	str	r3, [r2, #4]
 80072c4:	e057      	b.n	8007376 <HAL_DMA_IRQHandler+0x3be>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a4d      	ldr	r2, [pc, #308]	; (8007400 <HAL_DMA_IRQHandler+0x448>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d04f      	beq.n	8007370 <HAL_DMA_IRQHandler+0x3b8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a4b      	ldr	r2, [pc, #300]	; (8007404 <HAL_DMA_IRQHandler+0x44c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d048      	beq.n	800736c <HAL_DMA_IRQHandler+0x3b4>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a4a      	ldr	r2, [pc, #296]	; (8007408 <HAL_DMA_IRQHandler+0x450>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d040      	beq.n	8007366 <HAL_DMA_IRQHandler+0x3ae>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a48      	ldr	r2, [pc, #288]	; (800740c <HAL_DMA_IRQHandler+0x454>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d038      	beq.n	8007360 <HAL_DMA_IRQHandler+0x3a8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a47      	ldr	r2, [pc, #284]	; (8007410 <HAL_DMA_IRQHandler+0x458>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d030      	beq.n	800735a <HAL_DMA_IRQHandler+0x3a2>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a45      	ldr	r2, [pc, #276]	; (8007414 <HAL_DMA_IRQHandler+0x45c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d028      	beq.n	8007354 <HAL_DMA_IRQHandler+0x39c>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a44      	ldr	r2, [pc, #272]	; (8007418 <HAL_DMA_IRQHandler+0x460>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d020      	beq.n	800734e <HAL_DMA_IRQHandler+0x396>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a42      	ldr	r2, [pc, #264]	; (800741c <HAL_DMA_IRQHandler+0x464>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d019      	beq.n	800734a <HAL_DMA_IRQHandler+0x392>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a41      	ldr	r2, [pc, #260]	; (8007420 <HAL_DMA_IRQHandler+0x468>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d012      	beq.n	8007346 <HAL_DMA_IRQHandler+0x38e>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a3f      	ldr	r2, [pc, #252]	; (8007424 <HAL_DMA_IRQHandler+0x46c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00a      	beq.n	8007340 <HAL_DMA_IRQHandler+0x388>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a3e      	ldr	r2, [pc, #248]	; (8007428 <HAL_DMA_IRQHandler+0x470>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d102      	bne.n	800733a <HAL_DMA_IRQHandler+0x382>
 8007334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007338:	e01b      	b.n	8007372 <HAL_DMA_IRQHandler+0x3ba>
 800733a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800733e:	e018      	b.n	8007372 <HAL_DMA_IRQHandler+0x3ba>
 8007340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007344:	e015      	b.n	8007372 <HAL_DMA_IRQHandler+0x3ba>
 8007346:	2320      	movs	r3, #32
 8007348:	e013      	b.n	8007372 <HAL_DMA_IRQHandler+0x3ba>
 800734a:	2302      	movs	r3, #2
 800734c:	e011      	b.n	8007372 <HAL_DMA_IRQHandler+0x3ba>
 800734e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007352:	e00e      	b.n	8007372 <HAL_DMA_IRQHandler+0x3ba>
 8007354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007358:	e00b      	b.n	8007372 <HAL_DMA_IRQHandler+0x3ba>
 800735a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800735e:	e008      	b.n	8007372 <HAL_DMA_IRQHandler+0x3ba>
 8007360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007364:	e005      	b.n	8007372 <HAL_DMA_IRQHandler+0x3ba>
 8007366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800736a:	e002      	b.n	8007372 <HAL_DMA_IRQHandler+0x3ba>
 800736c:	2320      	movs	r3, #32
 800736e:	e000      	b.n	8007372 <HAL_DMA_IRQHandler+0x3ba>
 8007370:	2302      	movs	r3, #2
 8007372:	4a2e      	ldr	r2, [pc, #184]	; (800742c <HAL_DMA_IRQHandler+0x474>)
 8007374:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	d034      	beq.n	80073f0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800738e:	e02f      	b.n	80073f0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	2208      	movs	r2, #8
 8007396:	409a      	lsls	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4013      	ands	r3, r2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d028      	beq.n	80073f2 <HAL_DMA_IRQHandler+0x43a>
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d023      	beq.n	80073f2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 020e 	bic.w	r2, r2, #14
 80073b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c2:	2101      	movs	r1, #1
 80073c4:	fa01 f202 	lsl.w	r2, r1, r2
 80073c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	4798      	blx	r3
    }
  }
  return;
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
}
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	40020400 	.word	0x40020400
 8007400:	40020008 	.word	0x40020008
 8007404:	4002001c 	.word	0x4002001c
 8007408:	40020030 	.word	0x40020030
 800740c:	40020044 	.word	0x40020044
 8007410:	40020058 	.word	0x40020058
 8007414:	4002006c 	.word	0x4002006c
 8007418:	40020080 	.word	0x40020080
 800741c:	40020408 	.word	0x40020408
 8007420:	4002041c 	.word	0x4002041c
 8007424:	40020430 	.word	0x40020430
 8007428:	40020444 	.word	0x40020444
 800742c:	40020000 	.word	0x40020000

08007430 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007446:	2101      	movs	r1, #1
 8007448:	fa01 f202 	lsl.w	r2, r1, r2
 800744c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b10      	cmp	r3, #16
 800745c:	d108      	bne.n	8007470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800746e:	e007      	b.n	8007480 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	60da      	str	r2, [r3, #12]
}
 8007480:	bf00      	nop
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	bc80      	pop	{r7}
 8007488:	4770      	bx	lr
	...

0800748c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800748c:	b480      	push	{r7}
 800748e:	b08b      	sub	sp, #44	; 0x2c
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800749a:	2300      	movs	r3, #0
 800749c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80074aa:	2300      	movs	r3, #0
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24
 80074ae:	e133      	b.n	8007718 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80074b0:	2201      	movs	r2, #1
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	fa02 f303 	lsl.w	r3, r2, r3
 80074b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	4013      	ands	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	f040 8122 	bne.w	8007712 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2b12      	cmp	r3, #18
 80074d4:	d034      	beq.n	8007540 <HAL_GPIO_Init+0xb4>
 80074d6:	2b12      	cmp	r3, #18
 80074d8:	d80d      	bhi.n	80074f6 <HAL_GPIO_Init+0x6a>
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d02b      	beq.n	8007536 <HAL_GPIO_Init+0xaa>
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d804      	bhi.n	80074ec <HAL_GPIO_Init+0x60>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d031      	beq.n	800754a <HAL_GPIO_Init+0xbe>
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d01c      	beq.n	8007524 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80074ea:	e048      	b.n	800757e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d043      	beq.n	8007578 <HAL_GPIO_Init+0xec>
 80074f0:	2b11      	cmp	r3, #17
 80074f2:	d01b      	beq.n	800752c <HAL_GPIO_Init+0xa0>
          break;
 80074f4:	e043      	b.n	800757e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80074f6:	4a8d      	ldr	r2, [pc, #564]	; (800772c <HAL_GPIO_Init+0x2a0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d026      	beq.n	800754a <HAL_GPIO_Init+0xbe>
 80074fc:	4a8b      	ldr	r2, [pc, #556]	; (800772c <HAL_GPIO_Init+0x2a0>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d806      	bhi.n	8007510 <HAL_GPIO_Init+0x84>
 8007502:	4a8b      	ldr	r2, [pc, #556]	; (8007730 <HAL_GPIO_Init+0x2a4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d020      	beq.n	800754a <HAL_GPIO_Init+0xbe>
 8007508:	4a8a      	ldr	r2, [pc, #552]	; (8007734 <HAL_GPIO_Init+0x2a8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d01d      	beq.n	800754a <HAL_GPIO_Init+0xbe>
          break;
 800750e:	e036      	b.n	800757e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8007510:	4a89      	ldr	r2, [pc, #548]	; (8007738 <HAL_GPIO_Init+0x2ac>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d019      	beq.n	800754a <HAL_GPIO_Init+0xbe>
 8007516:	4a89      	ldr	r2, [pc, #548]	; (800773c <HAL_GPIO_Init+0x2b0>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d016      	beq.n	800754a <HAL_GPIO_Init+0xbe>
 800751c:	4a88      	ldr	r2, [pc, #544]	; (8007740 <HAL_GPIO_Init+0x2b4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d013      	beq.n	800754a <HAL_GPIO_Init+0xbe>
          break;
 8007522:	e02c      	b.n	800757e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	623b      	str	r3, [r7, #32]
          break;
 800752a:	e028      	b.n	800757e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	3304      	adds	r3, #4
 8007532:	623b      	str	r3, [r7, #32]
          break;
 8007534:	e023      	b.n	800757e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	3308      	adds	r3, #8
 800753c:	623b      	str	r3, [r7, #32]
          break;
 800753e:	e01e      	b.n	800757e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	330c      	adds	r3, #12
 8007546:	623b      	str	r3, [r7, #32]
          break;
 8007548:	e019      	b.n	800757e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d102      	bne.n	8007558 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007552:	2304      	movs	r3, #4
 8007554:	623b      	str	r3, [r7, #32]
          break;
 8007556:	e012      	b.n	800757e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d105      	bne.n	800756c <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007560:	2308      	movs	r3, #8
 8007562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	611a      	str	r2, [r3, #16]
          break;
 800756a:	e008      	b.n	800757e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800756c:	2308      	movs	r3, #8
 800756e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	615a      	str	r2, [r3, #20]
          break;
 8007576:	e002      	b.n	800757e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007578:	2300      	movs	r3, #0
 800757a:	623b      	str	r3, [r7, #32]
          break;
 800757c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2bff      	cmp	r3, #255	; 0xff
 8007582:	d801      	bhi.n	8007588 <HAL_GPIO_Init+0xfc>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	e001      	b.n	800758c <HAL_GPIO_Init+0x100>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
 800758c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2bff      	cmp	r3, #255	; 0xff
 8007592:	d802      	bhi.n	800759a <HAL_GPIO_Init+0x10e>
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	e002      	b.n	80075a0 <HAL_GPIO_Init+0x114>
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	3b08      	subs	r3, #8
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	210f      	movs	r1, #15
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	fa01 f303 	lsl.w	r3, r1, r3
 80075ae:	43db      	mvns	r3, r3
 80075b0:	401a      	ands	r2, r3
 80075b2:	6a39      	ldr	r1, [r7, #32]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ba:	431a      	orrs	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 80a2 	beq.w	8007712 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80075ce:	4b5d      	ldr	r3, [pc, #372]	; (8007744 <HAL_GPIO_Init+0x2b8>)
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	4a5c      	ldr	r2, [pc, #368]	; (8007744 <HAL_GPIO_Init+0x2b8>)
 80075d4:	f043 0301 	orr.w	r3, r3, #1
 80075d8:	6193      	str	r3, [r2, #24]
 80075da:	4b5a      	ldr	r3, [pc, #360]	; (8007744 <HAL_GPIO_Init+0x2b8>)
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	60bb      	str	r3, [r7, #8]
 80075e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80075e6:	4a58      	ldr	r2, [pc, #352]	; (8007748 <HAL_GPIO_Init+0x2bc>)
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	089b      	lsrs	r3, r3, #2
 80075ec:	3302      	adds	r3, #2
 80075ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075f2:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	f003 0303 	and.w	r3, r3, #3
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	220f      	movs	r2, #15
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	43db      	mvns	r3, r3
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4013      	ands	r3, r2
 8007608:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a4f      	ldr	r2, [pc, #316]	; (800774c <HAL_GPIO_Init+0x2c0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01f      	beq.n	8007652 <HAL_GPIO_Init+0x1c6>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a4e      	ldr	r2, [pc, #312]	; (8007750 <HAL_GPIO_Init+0x2c4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d019      	beq.n	800764e <HAL_GPIO_Init+0x1c2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a4d      	ldr	r2, [pc, #308]	; (8007754 <HAL_GPIO_Init+0x2c8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <HAL_GPIO_Init+0x1be>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a4c      	ldr	r2, [pc, #304]	; (8007758 <HAL_GPIO_Init+0x2cc>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00d      	beq.n	8007646 <HAL_GPIO_Init+0x1ba>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a4b      	ldr	r2, [pc, #300]	; (800775c <HAL_GPIO_Init+0x2d0>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d007      	beq.n	8007642 <HAL_GPIO_Init+0x1b6>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a4a      	ldr	r2, [pc, #296]	; (8007760 <HAL_GPIO_Init+0x2d4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d101      	bne.n	800763e <HAL_GPIO_Init+0x1b2>
 800763a:	2305      	movs	r3, #5
 800763c:	e00a      	b.n	8007654 <HAL_GPIO_Init+0x1c8>
 800763e:	2306      	movs	r3, #6
 8007640:	e008      	b.n	8007654 <HAL_GPIO_Init+0x1c8>
 8007642:	2304      	movs	r3, #4
 8007644:	e006      	b.n	8007654 <HAL_GPIO_Init+0x1c8>
 8007646:	2303      	movs	r3, #3
 8007648:	e004      	b.n	8007654 <HAL_GPIO_Init+0x1c8>
 800764a:	2302      	movs	r3, #2
 800764c:	e002      	b.n	8007654 <HAL_GPIO_Init+0x1c8>
 800764e:	2301      	movs	r3, #1
 8007650:	e000      	b.n	8007654 <HAL_GPIO_Init+0x1c8>
 8007652:	2300      	movs	r3, #0
 8007654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007656:	f002 0203 	and.w	r2, r2, #3
 800765a:	0092      	lsls	r2, r2, #2
 800765c:	4093      	lsls	r3, r2
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	4313      	orrs	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8007664:	4938      	ldr	r1, [pc, #224]	; (8007748 <HAL_GPIO_Init+0x2bc>)
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	089b      	lsrs	r3, r3, #2
 800766a:	3302      	adds	r3, #2
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d006      	beq.n	800768c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800767e:	4b39      	ldr	r3, [pc, #228]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	4938      	ldr	r1, [pc, #224]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	4313      	orrs	r3, r2
 8007688:	600b      	str	r3, [r1, #0]
 800768a:	e006      	b.n	800769a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800768c:	4b35      	ldr	r3, [pc, #212]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	43db      	mvns	r3, r3
 8007694:	4933      	ldr	r1, [pc, #204]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 8007696:	4013      	ands	r3, r2
 8007698:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d006      	beq.n	80076b4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80076a6:	4b2f      	ldr	r3, [pc, #188]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	492e      	ldr	r1, [pc, #184]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	604b      	str	r3, [r1, #4]
 80076b2:	e006      	b.n	80076c2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80076b4:	4b2b      	ldr	r3, [pc, #172]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	43db      	mvns	r3, r3
 80076bc:	4929      	ldr	r1, [pc, #164]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 80076be:	4013      	ands	r3, r2
 80076c0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d006      	beq.n	80076dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80076ce:	4b25      	ldr	r3, [pc, #148]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	4924      	ldr	r1, [pc, #144]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	608b      	str	r3, [r1, #8]
 80076da:	e006      	b.n	80076ea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80076dc:	4b21      	ldr	r3, [pc, #132]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	43db      	mvns	r3, r3
 80076e4:	491f      	ldr	r1, [pc, #124]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 80076e6:	4013      	ands	r3, r2
 80076e8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d006      	beq.n	8007704 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80076f6:	4b1b      	ldr	r3, [pc, #108]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	491a      	ldr	r1, [pc, #104]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60cb      	str	r3, [r1, #12]
 8007702:	e006      	b.n	8007712 <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007704:	4b17      	ldr	r3, [pc, #92]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 8007706:	68da      	ldr	r2, [r3, #12]
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	43db      	mvns	r3, r3
 800770c:	4915      	ldr	r1, [pc, #84]	; (8007764 <HAL_GPIO_Init+0x2d8>)
 800770e:	4013      	ands	r3, r2
 8007710:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	3301      	adds	r3, #1
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	2b0f      	cmp	r3, #15
 800771c:	f67f aec8 	bls.w	80074b0 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8007720:	bf00      	nop
 8007722:	372c      	adds	r7, #44	; 0x2c
 8007724:	46bd      	mov	sp, r7
 8007726:	bc80      	pop	{r7}
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	10210000 	.word	0x10210000
 8007730:	10110000 	.word	0x10110000
 8007734:	10120000 	.word	0x10120000
 8007738:	10310000 	.word	0x10310000
 800773c:	10320000 	.word	0x10320000
 8007740:	10220000 	.word	0x10220000
 8007744:	40021000 	.word	0x40021000
 8007748:	40010000 	.word	0x40010000
 800774c:	40010800 	.word	0x40010800
 8007750:	40010c00 	.word	0x40010c00
 8007754:	40011000 	.word	0x40011000
 8007758:	40011400 	.word	0x40011400
 800775c:	40011800 	.word	0x40011800
 8007760:	40011c00 	.word	0x40011c00
 8007764:	40010400 	.word	0x40010400

08007768 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007768:	b480      	push	{r7}
 800776a:	b089      	sub	sp, #36	; 0x24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8007776:	2300      	movs	r3, #0
 8007778:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0x00U;
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8007782:	e0a6      	b.n	80078d2 <HAL_GPIO_DeInit+0x16a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8007784:	2201      	movs	r2, #1
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	fa02 f303 	lsl.w	r3, r2, r3
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	4013      	ands	r3, r2
 8007790:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8099 	beq.w	80078cc <HAL_GPIO_DeInit+0x164>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2bff      	cmp	r3, #255	; 0xff
 800779e:	d801      	bhi.n	80077a4 <HAL_GPIO_DeInit+0x3c>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	e001      	b.n	80077a8 <HAL_GPIO_DeInit+0x40>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3304      	adds	r3, #4
 80077a8:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	2bff      	cmp	r3, #255	; 0xff
 80077ae:	d802      	bhi.n	80077b6 <HAL_GPIO_DeInit+0x4e>
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	e002      	b.n	80077bc <HAL_GPIO_DeInit+0x54>
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	3b08      	subs	r3, #8
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	613b      	str	r3, [r7, #16]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	210f      	movs	r1, #15
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ca:	43db      	mvns	r3, r3
 80077cc:	401a      	ands	r2, r3
 80077ce:	2104      	movs	r1, #4
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	fa01 f303 	lsl.w	r3, r1, r3
 80077d6:	431a      	orrs	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	43db      	mvns	r3, r3
 80077e4:	401a      	ands	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
 80077ea:	4a40      	ldr	r2, [pc, #256]	; (80078ec <HAL_GPIO_DeInit+0x184>)
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	089b      	lsrs	r3, r3, #2
 80077f0:	3302      	adds	r3, #2
 80077f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	220f      	movs	r2, #15
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	4013      	ands	r3, r2
 800780a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a38      	ldr	r2, [pc, #224]	; (80078f0 <HAL_GPIO_DeInit+0x188>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d01f      	beq.n	8007854 <HAL_GPIO_DeInit+0xec>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a37      	ldr	r2, [pc, #220]	; (80078f4 <HAL_GPIO_DeInit+0x18c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d019      	beq.n	8007850 <HAL_GPIO_DeInit+0xe8>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a36      	ldr	r2, [pc, #216]	; (80078f8 <HAL_GPIO_DeInit+0x190>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d013      	beq.n	800784c <HAL_GPIO_DeInit+0xe4>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a35      	ldr	r2, [pc, #212]	; (80078fc <HAL_GPIO_DeInit+0x194>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00d      	beq.n	8007848 <HAL_GPIO_DeInit+0xe0>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a34      	ldr	r2, [pc, #208]	; (8007900 <HAL_GPIO_DeInit+0x198>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d007      	beq.n	8007844 <HAL_GPIO_DeInit+0xdc>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a33      	ldr	r2, [pc, #204]	; (8007904 <HAL_GPIO_DeInit+0x19c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d101      	bne.n	8007840 <HAL_GPIO_DeInit+0xd8>
 800783c:	2305      	movs	r3, #5
 800783e:	e00a      	b.n	8007856 <HAL_GPIO_DeInit+0xee>
 8007840:	2306      	movs	r3, #6
 8007842:	e008      	b.n	8007856 <HAL_GPIO_DeInit+0xee>
 8007844:	2304      	movs	r3, #4
 8007846:	e006      	b.n	8007856 <HAL_GPIO_DeInit+0xee>
 8007848:	2303      	movs	r3, #3
 800784a:	e004      	b.n	8007856 <HAL_GPIO_DeInit+0xee>
 800784c:	2302      	movs	r3, #2
 800784e:	e002      	b.n	8007856 <HAL_GPIO_DeInit+0xee>
 8007850:	2301      	movs	r3, #1
 8007852:	e000      	b.n	8007856 <HAL_GPIO_DeInit+0xee>
 8007854:	2300      	movs	r3, #0
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	f002 0203 	and.w	r2, r2, #3
 800785c:	0092      	lsls	r2, r2, #2
 800785e:	4093      	lsls	r3, r2
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	429a      	cmp	r2, r3
 8007864:	d132      	bne.n	80078cc <HAL_GPIO_DeInit+0x164>
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f003 0303 	and.w	r3, r3, #3
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	220f      	movs	r2, #15
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8007876:	4a1d      	ldr	r2, [pc, #116]	; (80078ec <HAL_GPIO_DeInit+0x184>)
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	089b      	lsrs	r3, r3, #2
 800787c:	3302      	adds	r3, #2
 800787e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	43da      	mvns	r2, r3
 8007886:	4819      	ldr	r0, [pc, #100]	; (80078ec <HAL_GPIO_DeInit+0x184>)
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	089b      	lsrs	r3, r3, #2
 800788c:	400a      	ands	r2, r1
 800788e:	3302      	adds	r3, #2
 8007890:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007894:	4b1c      	ldr	r3, [pc, #112]	; (8007908 <HAL_GPIO_DeInit+0x1a0>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	43db      	mvns	r3, r3
 800789c:	491a      	ldr	r1, [pc, #104]	; (8007908 <HAL_GPIO_DeInit+0x1a0>)
 800789e:	4013      	ands	r3, r2
 80078a0:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80078a2:	4b19      	ldr	r3, [pc, #100]	; (8007908 <HAL_GPIO_DeInit+0x1a0>)
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	43db      	mvns	r3, r3
 80078aa:	4917      	ldr	r1, [pc, #92]	; (8007908 <HAL_GPIO_DeInit+0x1a0>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80078b0:	4b15      	ldr	r3, [pc, #84]	; (8007908 <HAL_GPIO_DeInit+0x1a0>)
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	43db      	mvns	r3, r3
 80078b8:	4913      	ldr	r1, [pc, #76]	; (8007908 <HAL_GPIO_DeInit+0x1a0>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80078be:	4b12      	ldr	r3, [pc, #72]	; (8007908 <HAL_GPIO_DeInit+0x1a0>)
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	43db      	mvns	r3, r3
 80078c6:	4910      	ldr	r1, [pc, #64]	; (8007908 <HAL_GPIO_DeInit+0x1a0>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	60cb      	str	r3, [r1, #12]
      }
    }

    position++;
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	3301      	adds	r3, #1
 80078d0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	fa22 f303 	lsr.w	r3, r2, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f47f af52 	bne.w	8007784 <HAL_GPIO_DeInit+0x1c>
  }
}
 80078e0:	bf00      	nop
 80078e2:	3724      	adds	r7, #36	; 0x24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc80      	pop	{r7}
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	40010000 	.word	0x40010000
 80078f0:	40010800 	.word	0x40010800
 80078f4:	40010c00 	.word	0x40010c00
 80078f8:	40011000 	.word	0x40011000
 80078fc:	40011400 	.word	0x40011400
 8007900:	40011800 	.word	0x40011800
 8007904:	40011c00 	.word	0x40011c00
 8007908:	40010400 	.word	0x40010400

0800790c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	807b      	strh	r3, [r7, #2]
 8007918:	4613      	mov	r3, r2
 800791a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800791c:	787b      	ldrb	r3, [r7, #1]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007922:	887a      	ldrh	r2, [r7, #2]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007928:	e003      	b.n	8007932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800792a:	887b      	ldrh	r3, [r7, #2]
 800792c:	041a      	lsls	r2, r3, #16
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	611a      	str	r2, [r3, #16]
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	bc80      	pop	{r7}
 800793a:	4770      	bx	lr

0800793c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	887b      	ldrh	r3, [r7, #2]
 800794e:	405a      	eors	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	60da      	str	r2, [r3, #12]
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr

0800795e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800795e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007960:	b08b      	sub	sp, #44	; 0x2c
 8007962:	af06      	add	r7, sp, #24
 8007964:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e0ca      	b.n	8007b0a <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d106      	bne.n	800798e <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f005 f919 	bl	800cbc0 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2203      	movs	r2, #3
 8007992:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4618      	mov	r0, r3
 800799c:	f002 fc2e 	bl	800a1fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	687e      	ldr	r6, [r7, #4]
 80079a8:	466d      	mov	r5, sp
 80079aa:	f106 0410 	add.w	r4, r6, #16
 80079ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	602b      	str	r3, [r5, #0]
 80079b6:	1d33      	adds	r3, r6, #4
 80079b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079ba:	6838      	ldr	r0, [r7, #0]
 80079bc:	f002 fbf4 	bl	800a1a8 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f002 fc34 	bl	800a234 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e037      	b.n	8007a42 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	015b      	lsls	r3, r3, #5
 80079d8:	4413      	add	r3, r2
 80079da:	3329      	adds	r3, #41	; 0x29
 80079dc:	2201      	movs	r2, #1
 80079de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	b2d9      	uxtb	r1, r3
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	015b      	lsls	r3, r3, #5
 80079ea:	4413      	add	r3, r2
 80079ec:	3328      	adds	r3, #40	; 0x28
 80079ee:	460a      	mov	r2, r1
 80079f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	b299      	uxth	r1, r3
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	015b      	lsls	r3, r3, #5
 80079fc:	4413      	add	r3, r2
 80079fe:	3334      	adds	r3, #52	; 0x34
 8007a00:	460a      	mov	r2, r1
 8007a02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	015b      	lsls	r3, r3, #5
 8007a0a:	4413      	add	r3, r2
 8007a0c:	332b      	adds	r3, #43	; 0x2b
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	015b      	lsls	r3, r3, #5
 8007a18:	4413      	add	r3, r2
 8007a1a:	3338      	adds	r3, #56	; 0x38
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	015b      	lsls	r3, r3, #5
 8007a26:	4413      	add	r3, r2
 8007a28:	333c      	adds	r3, #60	; 0x3c
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3302      	adds	r3, #2
 8007a34:	015b      	lsls	r3, r3, #5
 8007a36:	4413      	add	r3, r2
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b0e      	cmp	r3, #14
 8007a46:	d9c4      	bls.n	80079d2 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	e03c      	b.n	8007ac8 <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	015b      	lsls	r3, r3, #5
 8007a54:	4413      	add	r3, r2
 8007a56:	f203 2329 	addw	r3, r3, #553	; 0x229
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	b2d9      	uxtb	r1, r3
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	015b      	lsls	r3, r3, #5
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8007a6e:	460a      	mov	r2, r1
 8007a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	b299      	uxth	r1, r3
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	015b      	lsls	r3, r3, #5
 8007a7c:	4413      	add	r3, r2
 8007a7e:	3334      	adds	r3, #52	; 0x34
 8007a80:	460a      	mov	r2, r1
 8007a82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	015b      	lsls	r3, r3, #5
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8007a90:	2200      	movs	r2, #0
 8007a92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	015b      	lsls	r3, r3, #5
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	015b      	lsls	r3, r3, #5
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3312      	adds	r3, #18
 8007aba:	015b      	lsls	r3, r3, #5
 8007abc:	4413      	add	r3, r2
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b0e      	cmp	r3, #14
 8007acc:	d9bf      	bls.n	8007a4e <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	687e      	ldr	r6, [r7, #4]
 8007ad6:	466d      	mov	r5, sp
 8007ad8:	f106 0410 	add.w	r4, r6, #16
 8007adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	602b      	str	r3, [r5, #0]
 8007ae4:	1d33      	adds	r3, r6, #4
 8007ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ae8:	6838      	ldr	r0, [r7, #0]
 8007aea:	f002 fbaf 	bl	800a24c <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f003 fb99 	bl	800b23a <USB_DevDisconnect>
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b12 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d101      	bne.n	8007b28 <HAL_PCD_Start+0x16>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e016      	b.n	8007b56 <HAL_PCD_Start+0x44>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8007b30:	2101      	movs	r1, #1
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f005 faab 	bl	800d08e <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f003 fb72 	bl	800b226 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f002 fb3e 	bl	800a1c8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f003 fb6f 	bl	800b24e <USB_ReadInterrupts>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b7a:	d102      	bne.n	8007b82 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fad9 	bl	8008134 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f003 fb61 	bl	800b24e <USB_ReadInterrupts>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b96:	d112      	bne.n	8007bbe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007baa:	b292      	uxth	r2, r2
 8007bac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f005 f87a 	bl	800ccaa <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f8d2 	bl	8007d62 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f003 fb43 	bl	800b24e <USB_ReadInterrupts>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd2:	d10b      	bne.n	8007bec <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007be6:	b292      	uxth	r2, r2
 8007be8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f003 fb2c 	bl	800b24e <USB_ReadInterrupts>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c00:	d10b      	bne.n	8007c1a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c14:	b292      	uxth	r2, r2
 8007c16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f003 fb15 	bl	800b24e <USB_ReadInterrupts>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c2e:	d126      	bne.n	8007c7e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0204 	bic.w	r2, r2, #4
 8007c42:	b292      	uxth	r2, r2
 8007c44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 0208 	bic.w	r2, r2, #8
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f005 f85b 	bl	800cd1c <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c78:	b292      	uxth	r2, r2
 8007c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f003 fae3 	bl	800b24e <USB_ReadInterrupts>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c92:	d131      	bne.n	8007cf8 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0208 	orr.w	r2, r2, #8
 8007ca6:	b292      	uxth	r2, r2
 8007ca8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cbe:	b292      	uxth	r2, r2
 8007cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0204 	orr.w	r2, r2, #4
 8007cd6:	b292      	uxth	r2, r2
 8007cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f003 fab4 	bl	800b24e <USB_ReadInterrupts>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf0:	d002      	beq.n	8007cf8 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f004 fff8 	bl	800cce8 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f003 faa6 	bl	800b24e <USB_ReadInterrupts>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d0c:	d10e      	bne.n	8007d2c <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d20:	b292      	uxth	r2, r2
 8007d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f004 ffb1 	bl	800cc8e <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f003 fa8c 	bl	800b24e <USB_ReadInterrupts>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d40:	d10b      	bne.n	8007d5a <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d54:	b292      	uxth	r2, r2
 8007d56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d101      	bne.n	8007d7c <HAL_PCD_SetAddress+0x1a>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e013      	b.n	8007da4 <HAL_PCD_SetAddress+0x42>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	78fa      	ldrb	r2, [r7, #3]
 8007d92:	4611      	mov	r1, r2
 8007d94:	4618      	mov	r0, r3
 8007d96:	f003 fa33 	bl	800b200 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	4608      	mov	r0, r1
 8007db6:	4611      	mov	r1, r2
 8007db8:	461a      	mov	r2, r3
 8007dba:	4603      	mov	r3, r0
 8007dbc:	70fb      	strb	r3, [r7, #3]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	803b      	strh	r3, [r7, #0]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8007dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	da08      	bge.n	8007de8 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ddc:	015b      	lsls	r3, r3, #5
 8007dde:	3328      	adds	r3, #40	; 0x28
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	4413      	add	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	e008      	b.n	8007dfa <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dee:	015b      	lsls	r3, r3, #5
 8007df0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	4413      	add	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8007dfa:	78fb      	ldrb	r3, [r7, #3]
 8007dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8007e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	09db      	lsrs	r3, r3, #7
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	461a      	mov	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8007e16:	883a      	ldrh	r2, [r7, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	78ba      	ldrb	r2, [r7, #2]
 8007e20:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d101      	bne.n	8007e30 <HAL_PCD_EP_Open+0x84>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e00e      	b.n	8007e4e <HAL_PCD_EP_Open+0xa2>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68f9      	ldr	r1, [r7, #12]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f002 fa28 	bl	800a294 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8007e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	da08      	bge.n	8007e80 <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e74:	015b      	lsls	r3, r3, #5
 8007e76:	3328      	adds	r3, #40	; 0x28
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	e008      	b.n	8007e92 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e86:	015b      	lsls	r3, r3, #5
 8007e88:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	4413      	add	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8007e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	09db      	lsrs	r3, r3, #7
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_PCD_EP_Close+0x66>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e00e      	b.n	8007eda <HAL_PCD_EP_Close+0x84>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68f9      	ldr	r1, [r7, #12]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f002 fca4 	bl	800a818 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b086      	sub	sp, #24
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	60f8      	str	r0, [r7, #12]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
 8007ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efc:	015b      	lsls	r3, r3, #5
 8007efe:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2200      	movs	r2, #0
 8007f18:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8007f2c:	7afb      	ldrb	r3, [r7, #11]
 8007f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f002 fdf3 	bl	800ab28 <USB_EPStartXfer>
 8007f42:	e005      	b.n	8007f50 <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6979      	ldr	r1, [r7, #20]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f002 fdec 	bl	800ab28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	f003 030f 	and.w	r3, r3, #15
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	3312      	adds	r3, #18
 8007f70:	015b      	lsls	r3, r3, #5
 8007f72:	4413      	add	r3, r2
 8007f74:	3304      	adds	r3, #4
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	b29b      	uxth	r3, r3
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc80      	pop	{r7}
 8007f82:	4770      	bx	lr

08007f84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	607a      	str	r2, [r7, #4]
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	460b      	mov	r3, r1
 8007f92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8007f98:	7afb      	ldrb	r3, [r7, #11]
 8007f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f9e:	015b      	lsls	r3, r3, #5
 8007fa0:	3328      	adds	r3, #40	; 0x28
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8007fc0:	7afb      	ldrb	r3, [r7, #11]
 8007fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d106      	bne.n	8007fe4 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6979      	ldr	r1, [r7, #20]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f002 fda3 	bl	800ab28 <USB_EPStartXfer>
 8007fe2:	e005      	b.n	8007ff0 <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6979      	ldr	r1, [r7, #20]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f002 fd9c 	bl	800ab28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8008006:	2300      	movs	r3, #0
 8008008:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 800800a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800800e:	2b00      	cmp	r3, #0
 8008010:	da08      	bge.n	8008024 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008018:	015b      	lsls	r3, r3, #5
 800801a:	3328      	adds	r3, #40	; 0x28
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	4413      	add	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	e006      	b.n	8008032 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	015b      	lsls	r3, r3, #5
 8008028:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	4413      	add	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2201      	movs	r2, #1
 8008036:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800803e:	b2da      	uxtb	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8008044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	09db      	lsrs	r3, r3, #7
 800804c:	b2db      	uxtb	r3, r3
 800804e:	461a      	mov	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800805a:	2b01      	cmp	r3, #1
 800805c:	d101      	bne.n	8008062 <HAL_PCD_EP_SetStall+0x68>
 800805e:	2302      	movs	r3, #2
 8008060:	e01c      	b.n	800809c <HAL_PCD_EP_SetStall+0xa2>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	4618      	mov	r0, r3
 8008072:	f002 ffdb 	bl	800b02c <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8008076:	78fb      	ldrb	r3, [r7, #3]
 8008078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807c:	2b00      	cmp	r3, #0
 800807e:	d108      	bne.n	8008092 <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f003 f8ef 	bl	800b270 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 80080b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	da08      	bge.n	80080ce <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c2:	015b      	lsls	r3, r3, #5
 80080c4:	3328      	adds	r3, #40	; 0x28
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	4413      	add	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e006      	b.n	80080dc <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	015b      	lsls	r3, r3, #5
 80080d2:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	4413      	add	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80080e2:	78fb      	ldrb	r3, [r7, #3]
 80080e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80080ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	09db      	lsrs	r3, r3, #7
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	461a      	mov	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8008104:	2b01      	cmp	r3, #1
 8008106:	d101      	bne.n	800810c <HAL_PCD_EP_ClrStall+0x68>
 8008108:	2302      	movs	r3, #2
 800810a:	e00e      	b.n	800812a <HAL_PCD_EP_ClrStall+0x86>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68f9      	ldr	r1, [r7, #12]
 800811a:	4618      	mov	r0, r3
 800811c:	f002 ffe6 	bl	800b0ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008134:	b590      	push	{r4, r7, lr}
 8008136:	b089      	sub	sp, #36	; 0x24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 800813c:	2300      	movs	r3, #0
 800813e:	61fb      	str	r3, [r7, #28]
  uint16_t count = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	837b      	strh	r3, [r7, #26]
  uint8_t epindex = 0;
 8008144:	2300      	movs	r3, #0
 8008146:	767b      	strb	r3, [r7, #25]
  __IO uint16_t wIstr = 0;  
 8008148:	2300      	movs	r3, #0
 800814a:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8008150:	e308      	b.n	8008764 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008152:	89fb      	ldrh	r3, [r7, #14]
 8008154:	b29b      	uxth	r3, r3
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f003 030f 	and.w	r3, r3, #15
 800815c:	767b      	strb	r3, [r7, #25]
    
    if (epindex == 0)
 800815e:	7e7b      	ldrb	r3, [r7, #25]
 8008160:	2b00      	cmp	r3, #0
 8008162:	f040 812a 	bne.w	80083ba <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8008166:	89fb      	ldrh	r3, [r7, #14]
 8008168:	b29b      	uxth	r3, r3
 800816a:	f003 0310 	and.w	r3, r3, #16
 800816e:	2b00      	cmp	r3, #0
 8008170:	d14d      	bne.n	800820e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29b      	uxth	r3, r3
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6812      	ldr	r2, [r2, #0]
 800817e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008186:	b29b      	uxth	r3, r3
 8008188:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3328      	adds	r3, #40	; 0x28
 800818e:	61fb      	str	r3, [r7, #28]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008198:	b29b      	uxth	r3, r3
 800819a:	461a      	mov	r2, r3
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	00db      	lsls	r3, r3, #3
 80081a2:	4413      	add	r3, r2
 80081a4:	3302      	adds	r3, #2
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	6812      	ldr	r2, [r2, #0]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	695a      	ldr	r2, [r3, #20]
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	441a      	add	r2, r3
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80081cc:	2100      	movs	r1, #0
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f004 fd46 	bl	800cc60 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 82c1 	beq.w	8008764 <PCD_EP_ISR_Handler+0x630>
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 82bc 	bne.w	8008764 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	b292      	uxth	r2, r2
 8008200:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800820c:	e2aa      	b.n	8008764 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008214:	61fb      	str	r3, [r7, #28]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29b      	uxth	r3, r3
 800821e:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008220:	89bb      	ldrh	r3, [r7, #12]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008228:	2b00      	cmp	r3, #0
 800822a:	d031      	beq.n	8008290 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008234:	b29b      	uxth	r3, r3
 8008236:	461a      	mov	r2, r3
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	4413      	add	r3, r2
 8008240:	3306      	adds	r3, #6
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6812      	ldr	r2, [r2, #0]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	b29b      	uxth	r3, r3
 8008252:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	889a      	ldrh	r2, [r3, #4]
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	b29b      	uxth	r3, r3
 800826e:	f003 f850 	bl	800b312 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	881b      	ldrh	r3, [r3, #0]
 8008278:	b299      	uxth	r1, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008282:	400b      	ands	r3, r1
 8008284:	b29b      	uxth	r3, r3
 8008286:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f004 fcbf 	bl	800cc0c <HAL_PCD_SetupStageCallback>
 800828e:	e269      	b.n	8008764 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008290:	89bb      	ldrh	r3, [r7, #12]
 8008292:	b29b      	uxth	r3, r3
 8008294:	b21b      	sxth	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	f280 8264 	bge.w	8008764 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b299      	uxth	r1, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80082ac:	400b      	ands	r3, r1
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	461a      	mov	r2, r3
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	4413      	add	r3, r2
 80082c6:	3306      	adds	r3, #6
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	6812      	ldr	r2, [r2, #0]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d011      	beq.n	800830c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6818      	ldr	r0, [r3, #0]
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	6959      	ldr	r1, [r3, #20]
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	889a      	ldrh	r2, [r3, #4]
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f003 f80a 	bl	800b312 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	695a      	ldr	r2, [r3, #20]
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	441a      	add	r2, r3
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800830c:	2100      	movs	r1, #0
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f004 fc8e 	bl	800cc30 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800831c:	b29b      	uxth	r3, r3
 800831e:	3306      	adds	r3, #6
 8008320:	005b      	lsls	r3, r3, #1
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6812      	ldr	r2, [r2, #0]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800832c:	613b      	str	r3, [r7, #16]
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b3e      	cmp	r3, #62	; 0x3e
 8008334:	d918      	bls.n	8008368 <PCD_EP_ISR_Handler+0x234>
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	82fb      	strh	r3, [r7, #22]
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	f003 031f 	and.w	r3, r3, #31
 8008346:	2b00      	cmp	r3, #0
 8008348:	d102      	bne.n	8008350 <PCD_EP_ISR_Handler+0x21c>
 800834a:	8afb      	ldrh	r3, [r7, #22]
 800834c:	3b01      	subs	r3, #1
 800834e:	82fb      	strh	r3, [r7, #22]
 8008350:	8afb      	ldrh	r3, [r7, #22]
 8008352:	029b      	lsls	r3, r3, #10
 8008354:	b29b      	uxth	r3, r3
 8008356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800835a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800835e:	b29b      	uxth	r3, r3
 8008360:	461a      	mov	r2, r3
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e012      	b.n	800838e <PCD_EP_ISR_Handler+0x25a>
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	085b      	lsrs	r3, r3, #1
 800836e:	82fb      	strh	r3, [r7, #22]
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <PCD_EP_ISR_Handler+0x24e>
 800837c:	8afb      	ldrh	r3, [r7, #22]
 800837e:	3301      	adds	r3, #1
 8008380:	82fb      	strh	r3, [r7, #22]
 8008382:	8afb      	ldrh	r3, [r7, #22]
 8008384:	029b      	lsls	r3, r3, #10
 8008386:	b29b      	uxth	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	b29b      	uxth	r3, r3
 8008396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800839a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800839e:	b29c      	uxth	r4, r3
 80083a0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80083a4:	b29c      	uxth	r4, r3
 80083a6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80083aa:	b29c      	uxth	r4, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	4b98      	ldr	r3, [pc, #608]	; (8008614 <PCD_EP_ISR_Handler+0x4e0>)
 80083b2:	4323      	orrs	r3, r4
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	8013      	strh	r3, [r2, #0]
 80083b8:	e1d4      	b.n	8008764 <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	7e7b      	ldrb	r3, [r7, #25]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80083cc:	89bb      	ldrh	r3, [r7, #12]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	b21b      	sxth	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f280 80d0 	bge.w	8008578 <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	7e7b      	ldrb	r3, [r7, #25]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b299      	uxth	r1, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	7e7b      	ldrb	r3, [r7, #25]
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	441a      	add	r2, r3
 80083f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80083f8:	400b      	ands	r3, r1
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 80083fe:	7e7b      	ldrb	r3, [r7, #25]
 8008400:	015b      	lsls	r3, r3, #5
 8008402:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	4413      	add	r3, r2
 800840a:	61fb      	str	r3, [r7, #28]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	7a9b      	ldrb	r3, [r3, #10]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d122      	bne.n	800845a <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800841c:	b29b      	uxth	r3, r3
 800841e:	461a      	mov	r2, r3
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4413      	add	r3, r2
 8008428:	3306      	adds	r3, #6
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800843e:	837b      	strh	r3, [r7, #26]
          if (count != 0U)
 8008440:	8b7b      	ldrh	r3, [r7, #26]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d073      	beq.n	800852e <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	6959      	ldr	r1, [r3, #20]
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	889a      	ldrh	r2, [r3, #4]
 8008452:	8b7b      	ldrh	r3, [r7, #26]
 8008454:	f002 ff5d 	bl	800b312 <USB_ReadPMA>
 8008458:	e069      	b.n	800852e <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d022      	beq.n	80084ba <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800847c:	b29b      	uxth	r3, r3
 800847e:	461a      	mov	r2, r3
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	4413      	add	r3, r2
 8008488:	3302      	adds	r3, #2
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	6812      	ldr	r2, [r2, #0]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800849e:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 80084a0:	8b7b      	ldrh	r3, [r7, #26]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d02b      	beq.n	80084fe <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	6959      	ldr	r1, [r3, #20]
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	88da      	ldrh	r2, [r3, #6]
 80084b2:	8b7b      	ldrh	r3, [r7, #26]
 80084b4:	f002 ff2d 	bl	800b312 <USB_ReadPMA>
 80084b8:	e021      	b.n	80084fe <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	461a      	mov	r2, r3
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	4413      	add	r3, r2
 80084ce:	3306      	adds	r3, #6
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	6812      	ldr	r2, [r2, #0]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084e4:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 80084e6:	8b7b      	ldrh	r3, [r7, #26]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d008      	beq.n	80084fe <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	6959      	ldr	r1, [r3, #20]
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	891a      	ldrh	r2, [r3, #8]
 80084f8:	8b7b      	ldrh	r3, [r7, #26]
 80084fa:	f002 ff0a 	bl	800b312 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	b29a      	uxth	r2, r3
 8008510:	f640 730f 	movw	r3, #3855	; 0xf0f
 8008514:	4013      	ands	r3, r2
 8008516:	b299      	uxth	r1, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	441a      	add	r2, r3
 8008526:	4b3c      	ldr	r3, [pc, #240]	; (8008618 <PCD_EP_ISR_Handler+0x4e4>)
 8008528:	430b      	orrs	r3, r1
 800852a:	b29b      	uxth	r3, r3
 800852c:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	69da      	ldr	r2, [r3, #28]
 8008532:	8b7b      	ldrh	r3, [r7, #26]
 8008534:	441a      	add	r2, r3
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	695a      	ldr	r2, [r3, #20]
 800853e:	8b7b      	ldrh	r3, [r7, #26]
 8008540:	441a      	add	r2, r3
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <PCD_EP_ISR_Handler+0x424>
 800854e:	8b7a      	ldrh	r2, [r7, #26]
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	429a      	cmp	r2, r3
 8008556:	d206      	bcs.n	8008566 <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f004 fb66 	bl	800cc30 <HAL_PCD_DataOutStageCallback>
 8008564:	e008      	b.n	8008578 <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	7819      	ldrb	r1, [r3, #0]
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	695a      	ldr	r2, [r3, #20]
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7ff fcb5 	bl	8007ee2 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008578:	89bb      	ldrh	r3, [r7, #12]
 800857a:	b29b      	uxth	r3, r3
 800857c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 80ef 	beq.w	8008764 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 8008586:	7e7b      	ldrb	r3, [r7, #25]
 8008588:	015b      	lsls	r3, r3, #5
 800858a:	3328      	adds	r3, #40	; 0x28
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4413      	add	r3, r2
 8008590:	61fb      	str	r3, [r7, #28]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	7e7b      	ldrb	r3, [r7, #25]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	6812      	ldr	r2, [r2, #0]
 80085a6:	4611      	mov	r1, r2
 80085a8:	7e7a      	ldrb	r2, [r7, #25]
 80085aa:	0092      	lsls	r2, r2, #2
 80085ac:	440a      	add	r2, r1
 80085ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80085b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	7a9b      	ldrb	r3, [r3, #10]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d12c      	bne.n	800861c <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	461a      	mov	r2, r3
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	4413      	add	r3, r2
 80085d6:	3302      	adds	r3, #2
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	6812      	ldr	r2, [r2, #0]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 8083 	beq.w	8008700 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	6959      	ldr	r1, [r3, #20]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	889a      	ldrh	r2, [r3, #4]
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	b29b      	uxth	r3, r3
 800860c:	f002 fe3b 	bl	800b286 <USB_WritePMA>
 8008610:	e076      	b.n	8008700 <PCD_EP_ISR_Handler+0x5cc>
 8008612:	bf00      	nop
 8008614:	ffff8080 	.word	0xffff8080
 8008618:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	461a      	mov	r2, r3
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	b29b      	uxth	r3, r3
 800862e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	d026      	beq.n	8008684 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863e:	b29b      	uxth	r3, r3
 8008640:	461a      	mov	r2, r3
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	4413      	add	r3, r2
 800864a:	3302      	adds	r3, #2
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	6812      	ldr	r2, [r2, #0]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	b29b      	uxth	r3, r3
 800865c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d031      	beq.n	80086d0 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6818      	ldr	r0, [r3, #0]
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	6959      	ldr	r1, [r3, #20]
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	88da      	ldrh	r2, [r3, #6]
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	b29b      	uxth	r3, r3
 800867e:	f002 fe02 	bl	800b286 <USB_WritePMA>
 8008682:	e025      	b.n	80086d0 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800868c:	b29b      	uxth	r3, r3
 800868e:	461a      	mov	r2, r3
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	4413      	add	r3, r2
 8008698:	3306      	adds	r3, #6
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	6812      	ldr	r2, [r2, #0]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	6959      	ldr	r1, [r3, #20]
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	891a      	ldrh	r2, [r3, #8]
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	f002 fddb 	bl	800b286 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80086e6:	4013      	ands	r3, r2
 80086e8:	b299      	uxth	r1, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	441a      	add	r2, r3
 80086f8:	4b22      	ldr	r3, [pc, #136]	; (8008784 <PCD_EP_ISR_Handler+0x650>)
 80086fa:	430b      	orrs	r3, r1
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008708:	b29b      	uxth	r3, r3
 800870a:	461a      	mov	r2, r3
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	4413      	add	r3, r2
 8008714:	3302      	adds	r3, #2
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	6812      	ldr	r2, [r2, #0]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	b29b      	uxth	r3, r3
 8008726:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	695a      	ldr	r2, [r3, #20]
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	441a      	add	r2, r3
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d106      	bne.n	8008752 <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f004 fa88 	bl	800cc60 <HAL_PCD_DataInStageCallback>
 8008750:	e008      	b.n	8008764 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	7819      	ldrb	r1, [r3, #0]
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	695a      	ldr	r2, [r3, #20]
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff fc10 	bl	8007f84 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800876c:	b29b      	uxth	r3, r3
 800876e:	461a      	mov	r2, r3
 8008770:	81fa      	strh	r2, [r7, #14]
 8008772:	b21b      	sxth	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	f6ff acec 	blt.w	8008152 <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3724      	adds	r7, #36	; 0x24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd90      	pop	{r4, r7, pc}
 8008784:	ffffc080 	.word	0xffffc080

08008788 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8008788:	b480      	push	{r7}
 800878a:	b087      	sub	sp, #28
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	607b      	str	r3, [r7, #4]
 8008792:	460b      	mov	r3, r1
 8008794:	817b      	strh	r3, [r7, #10]
 8008796:	4613      	mov	r3, r2
 8008798:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 800879e:	897b      	ldrh	r3, [r7, #10]
 80087a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d008      	beq.n	80087ba <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80087a8:	897b      	ldrh	r3, [r7, #10]
 80087aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ae:	015b      	lsls	r3, r3, #5
 80087b0:	3328      	adds	r3, #40	; 0x28
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4413      	add	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	e006      	b.n	80087c8 <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80087ba:	897b      	ldrh	r3, [r7, #10]
 80087bc:	015b      	lsls	r3, r3, #5
 80087be:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4413      	add	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80087c8:	893b      	ldrh	r3, [r7, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d107      	bne.n	80087de <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2200      	movs	r2, #0
 80087d2:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	809a      	strh	r2, [r3, #4]
 80087dc:	e00b      	b.n	80087f6 <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2201      	movs	r2, #1
 80087e2:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	0c1b      	lsrs	r3, r3, #16
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bc80      	pop	{r7}
 8008800:	4770      	bx	lr
	...

08008804 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008808:	4b03      	ldr	r3, [pc, #12]	; (8008818 <HAL_PWR_EnableBkUpAccess+0x14>)
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]
}
 800880e:	bf00      	nop
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	420e0020 	.word	0x420e0020

0800881c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8008824:	2300      	movs	r3, #0
 8008826:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 8087 	beq.w	8008944 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008836:	4b92      	ldr	r3, [pc, #584]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f003 030c 	and.w	r3, r3, #12
 800883e:	2b04      	cmp	r3, #4
 8008840:	d00c      	beq.n	800885c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008842:	4b8f      	ldr	r3, [pc, #572]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f003 030c 	and.w	r3, r3, #12
 800884a:	2b08      	cmp	r3, #8
 800884c:	d112      	bne.n	8008874 <HAL_RCC_OscConfig+0x58>
 800884e:	4b8c      	ldr	r3, [pc, #560]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885a:	d10b      	bne.n	8008874 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800885c:	4b88      	ldr	r3, [pc, #544]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d06c      	beq.n	8008942 <HAL_RCC_OscConfig+0x126>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d168      	bne.n	8008942 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e22d      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800887c:	d106      	bne.n	800888c <HAL_RCC_OscConfig+0x70>
 800887e:	4b80      	ldr	r3, [pc, #512]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a7f      	ldr	r2, [pc, #508]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 8008884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	e02e      	b.n	80088ea <HAL_RCC_OscConfig+0xce>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10c      	bne.n	80088ae <HAL_RCC_OscConfig+0x92>
 8008894:	4b7a      	ldr	r3, [pc, #488]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a79      	ldr	r2, [pc, #484]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 800889a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	4b77      	ldr	r3, [pc, #476]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a76      	ldr	r2, [pc, #472]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80088a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	e01d      	b.n	80088ea <HAL_RCC_OscConfig+0xce>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088b6:	d10c      	bne.n	80088d2 <HAL_RCC_OscConfig+0xb6>
 80088b8:	4b71      	ldr	r3, [pc, #452]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a70      	ldr	r2, [pc, #448]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80088be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	4b6e      	ldr	r3, [pc, #440]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a6d      	ldr	r2, [pc, #436]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80088ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	e00b      	b.n	80088ea <HAL_RCC_OscConfig+0xce>
 80088d2:	4b6b      	ldr	r3, [pc, #428]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a6a      	ldr	r2, [pc, #424]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80088d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	4b68      	ldr	r3, [pc, #416]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a67      	ldr	r2, [pc, #412]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80088e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088e8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d013      	beq.n	800891a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088f2:	f7fd ffad 	bl	8006850 <HAL_GetTick>
 80088f6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088f8:	e008      	b.n	800890c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088fa:	f7fd ffa9 	bl	8006850 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	2b64      	cmp	r3, #100	; 0x64
 8008906:	d901      	bls.n	800890c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e1e1      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800890c:	4b5c      	ldr	r3, [pc, #368]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d0f0      	beq.n	80088fa <HAL_RCC_OscConfig+0xde>
 8008918:	e014      	b.n	8008944 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800891a:	f7fd ff99 	bl	8006850 <HAL_GetTick>
 800891e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008920:	e008      	b.n	8008934 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008922:	f7fd ff95 	bl	8006850 <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	2b64      	cmp	r3, #100	; 0x64
 800892e:	d901      	bls.n	8008934 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e1cd      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008934:	4b52      	ldr	r3, [pc, #328]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1f0      	bne.n	8008922 <HAL_RCC_OscConfig+0x106>
 8008940:	e000      	b.n	8008944 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008942:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0302 	and.w	r3, r3, #2
 800894c:	2b00      	cmp	r3, #0
 800894e:	d063      	beq.n	8008a18 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008950:	4b4b      	ldr	r3, [pc, #300]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f003 030c 	and.w	r3, r3, #12
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800895c:	4b48      	ldr	r3, [pc, #288]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f003 030c 	and.w	r3, r3, #12
 8008964:	2b08      	cmp	r3, #8
 8008966:	d11c      	bne.n	80089a2 <HAL_RCC_OscConfig+0x186>
 8008968:	4b45      	ldr	r3, [pc, #276]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d116      	bne.n	80089a2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008974:	4b42      	ldr	r3, [pc, #264]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d005      	beq.n	800898c <HAL_RCC_OscConfig+0x170>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d001      	beq.n	800898c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e1a1      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800898c:	4b3c      	ldr	r3, [pc, #240]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	4939      	ldr	r1, [pc, #228]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 800899c:	4313      	orrs	r3, r2
 800899e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089a0:	e03a      	b.n	8008a18 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d020      	beq.n	80089ec <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089aa:	4b36      	ldr	r3, [pc, #216]	; (8008a84 <HAL_RCC_OscConfig+0x268>)
 80089ac:	2201      	movs	r2, #1
 80089ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089b0:	f7fd ff4e 	bl	8006850 <HAL_GetTick>
 80089b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089b6:	e008      	b.n	80089ca <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089b8:	f7fd ff4a 	bl	8006850 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e182      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089ca:	4b2d      	ldr	r3, [pc, #180]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0f0      	beq.n	80089b8 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089d6:	4b2a      	ldr	r3, [pc, #168]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	4926      	ldr	r1, [pc, #152]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	600b      	str	r3, [r1, #0]
 80089ea:	e015      	b.n	8008a18 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089ec:	4b25      	ldr	r3, [pc, #148]	; (8008a84 <HAL_RCC_OscConfig+0x268>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f2:	f7fd ff2d 	bl	8006850 <HAL_GetTick>
 80089f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089f8:	e008      	b.n	8008a0c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089fa:	f7fd ff29 	bl	8006850 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d901      	bls.n	8008a0c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e161      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a0c:	4b1c      	ldr	r3, [pc, #112]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0302 	and.w	r3, r3, #2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1f0      	bne.n	80089fa <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0308 	and.w	r3, r3, #8
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d039      	beq.n	8008a98 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d019      	beq.n	8008a60 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a2c:	4b16      	ldr	r3, [pc, #88]	; (8008a88 <HAL_RCC_OscConfig+0x26c>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a32:	f7fd ff0d 	bl	8006850 <HAL_GetTick>
 8008a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a38:	e008      	b.n	8008a4c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a3a:	f7fd ff09 	bl	8006850 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d901      	bls.n	8008a4c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e141      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <HAL_RCC_OscConfig+0x264>)
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0f0      	beq.n	8008a3a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8008a58:	2001      	movs	r0, #1
 8008a5a:	f000 fae3 	bl	8009024 <RCC_Delay>
 8008a5e:	e01b      	b.n	8008a98 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a60:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <HAL_RCC_OscConfig+0x26c>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a66:	f7fd fef3 	bl	8006850 <HAL_GetTick>
 8008a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a6c:	e00e      	b.n	8008a8c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a6e:	f7fd feef 	bl	8006850 <HAL_GetTick>
 8008a72:	4602      	mov	r2, r0
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d907      	bls.n	8008a8c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e127      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
 8008a80:	40021000 	.word	0x40021000
 8008a84:	42420000 	.word	0x42420000
 8008a88:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a8c:	4b92      	ldr	r3, [pc, #584]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1ea      	bne.n	8008a6e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 80a6 	beq.w	8008bf2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008aaa:	4b8b      	ldr	r3, [pc, #556]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10d      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ab6:	4b88      	ldr	r3, [pc, #544]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	4a87      	ldr	r2, [pc, #540]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ac0:	61d3      	str	r3, [r2, #28]
 8008ac2:	4b85      	ldr	r3, [pc, #532]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008ac4:	69db      	ldr	r3, [r3, #28]
 8008ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ad2:	4b82      	ldr	r3, [pc, #520]	; (8008cdc <HAL_RCC_OscConfig+0x4c0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d118      	bne.n	8008b10 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ade:	4b7f      	ldr	r3, [pc, #508]	; (8008cdc <HAL_RCC_OscConfig+0x4c0>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a7e      	ldr	r2, [pc, #504]	; (8008cdc <HAL_RCC_OscConfig+0x4c0>)
 8008ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008aea:	f7fd feb1 	bl	8006850 <HAL_GetTick>
 8008aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008af0:	e008      	b.n	8008b04 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008af2:	f7fd fead 	bl	8006850 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b64      	cmp	r3, #100	; 0x64
 8008afe:	d901      	bls.n	8008b04 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e0e5      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b04:	4b75      	ldr	r3, [pc, #468]	; (8008cdc <HAL_RCC_OscConfig+0x4c0>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0f0      	beq.n	8008af2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d106      	bne.n	8008b26 <HAL_RCC_OscConfig+0x30a>
 8008b18:	4b6f      	ldr	r3, [pc, #444]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	4a6e      	ldr	r2, [pc, #440]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	6213      	str	r3, [r2, #32]
 8008b24:	e02d      	b.n	8008b82 <HAL_RCC_OscConfig+0x366>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10c      	bne.n	8008b48 <HAL_RCC_OscConfig+0x32c>
 8008b2e:	4b6a      	ldr	r3, [pc, #424]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	4a69      	ldr	r2, [pc, #420]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b34:	f023 0301 	bic.w	r3, r3, #1
 8008b38:	6213      	str	r3, [r2, #32]
 8008b3a:	4b67      	ldr	r3, [pc, #412]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	4a66      	ldr	r2, [pc, #408]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b40:	f023 0304 	bic.w	r3, r3, #4
 8008b44:	6213      	str	r3, [r2, #32]
 8008b46:	e01c      	b.n	8008b82 <HAL_RCC_OscConfig+0x366>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	2b05      	cmp	r3, #5
 8008b4e:	d10c      	bne.n	8008b6a <HAL_RCC_OscConfig+0x34e>
 8008b50:	4b61      	ldr	r3, [pc, #388]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	4a60      	ldr	r2, [pc, #384]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b56:	f043 0304 	orr.w	r3, r3, #4
 8008b5a:	6213      	str	r3, [r2, #32]
 8008b5c:	4b5e      	ldr	r3, [pc, #376]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	4a5d      	ldr	r2, [pc, #372]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b62:	f043 0301 	orr.w	r3, r3, #1
 8008b66:	6213      	str	r3, [r2, #32]
 8008b68:	e00b      	b.n	8008b82 <HAL_RCC_OscConfig+0x366>
 8008b6a:	4b5b      	ldr	r3, [pc, #364]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	4a5a      	ldr	r2, [pc, #360]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	6213      	str	r3, [r2, #32]
 8008b76:	4b58      	ldr	r3, [pc, #352]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	4a57      	ldr	r2, [pc, #348]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008b7c:	f023 0304 	bic.w	r3, r3, #4
 8008b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d015      	beq.n	8008bb6 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b8a:	f7fd fe61 	bl	8006850 <HAL_GetTick>
 8008b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b90:	e00a      	b.n	8008ba8 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b92:	f7fd fe5d 	bl	8006850 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d901      	bls.n	8008ba8 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e093      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ba8:	4b4b      	ldr	r3, [pc, #300]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0ee      	beq.n	8008b92 <HAL_RCC_OscConfig+0x376>
 8008bb4:	e014      	b.n	8008be0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bb6:	f7fd fe4b 	bl	8006850 <HAL_GetTick>
 8008bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bbc:	e00a      	b.n	8008bd4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bbe:	f7fd fe47 	bl	8006850 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d901      	bls.n	8008bd4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e07d      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bd4:	4b40      	ldr	r3, [pc, #256]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1ee      	bne.n	8008bbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d105      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008be6:	4b3c      	ldr	r3, [pc, #240]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	4a3b      	ldr	r2, [pc, #236]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d069      	beq.n	8008cce <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bfa:	4b37      	ldr	r3, [pc, #220]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f003 030c 	and.w	r3, r3, #12
 8008c02:	2b08      	cmp	r3, #8
 8008c04:	d061      	beq.n	8008cca <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d146      	bne.n	8008c9c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c0e:	4b34      	ldr	r3, [pc, #208]	; (8008ce0 <HAL_RCC_OscConfig+0x4c4>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c14:	f7fd fe1c 	bl	8006850 <HAL_GetTick>
 8008c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c1a:	e008      	b.n	8008c2e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c1c:	f7fd fe18 	bl	8006850 <HAL_GetTick>
 8008c20:	4602      	mov	r2, r0
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d901      	bls.n	8008c2e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e050      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c2e:	4b2a      	ldr	r3, [pc, #168]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1f0      	bne.n	8008c1c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c42:	d108      	bne.n	8008c56 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008c44:	4b24      	ldr	r3, [pc, #144]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	4921      	ldr	r1, [pc, #132]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c56:	4b20      	ldr	r3, [pc, #128]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a19      	ldr	r1, [r3, #32]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	430b      	orrs	r3, r1
 8008c68:	491b      	ldr	r1, [pc, #108]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ce0 <HAL_RCC_OscConfig+0x4c4>)
 8008c70:	2201      	movs	r2, #1
 8008c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c74:	f7fd fdec 	bl	8006850 <HAL_GetTick>
 8008c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c7a:	e008      	b.n	8008c8e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c7c:	f7fd fde8 	bl	8006850 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e020      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c8e:	4b12      	ldr	r3, [pc, #72]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0f0      	beq.n	8008c7c <HAL_RCC_OscConfig+0x460>
 8008c9a:	e018      	b.n	8008cce <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c9c:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <HAL_RCC_OscConfig+0x4c4>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ca2:	f7fd fdd5 	bl	8006850 <HAL_GetTick>
 8008ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ca8:	e008      	b.n	8008cbc <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008caa:	f7fd fdd1 	bl	8006850 <HAL_GetTick>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d901      	bls.n	8008cbc <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e009      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <HAL_RCC_OscConfig+0x4bc>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1f0      	bne.n	8008caa <HAL_RCC_OscConfig+0x48e>
 8008cc8:	e001      	b.n	8008cce <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e000      	b.n	8008cd0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	40021000 	.word	0x40021000
 8008cdc:	40007000 	.word	0x40007000
 8008ce0:	42420060 	.word	0x42420060

08008ce4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008cf2:	4b7e      	ldr	r3, [pc, #504]	; (8008eec <HAL_RCC_ClockConfig+0x208>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d910      	bls.n	8008d22 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d00:	4b7a      	ldr	r3, [pc, #488]	; (8008eec <HAL_RCC_ClockConfig+0x208>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f023 0207 	bic.w	r2, r3, #7
 8008d08:	4978      	ldr	r1, [pc, #480]	; (8008eec <HAL_RCC_ClockConfig+0x208>)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008d10:	4b76      	ldr	r3, [pc, #472]	; (8008eec <HAL_RCC_ClockConfig+0x208>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0307 	and.w	r3, r3, #7
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d001      	beq.n	8008d22 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e0e0      	b.n	8008ee4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d020      	beq.n	8008d70 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d3a:	4b6d      	ldr	r3, [pc, #436]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	4a6c      	ldr	r2, [pc, #432]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008d40:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008d44:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0308 	and.w	r3, r3, #8
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d52:	4b67      	ldr	r3, [pc, #412]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	4a66      	ldr	r2, [pc, #408]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008d58:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008d5c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d5e:	4b64      	ldr	r3, [pc, #400]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	4961      	ldr	r1, [pc, #388]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d06a      	beq.n	8008e52 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d107      	bne.n	8008d94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d84:	4b5a      	ldr	r3, [pc, #360]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d115      	bne.n	8008dbc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e0a7      	b.n	8008ee4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d107      	bne.n	8008dac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d9c:	4b54      	ldr	r3, [pc, #336]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e09b      	b.n	8008ee4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dac:	4b50      	ldr	r3, [pc, #320]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e093      	b.n	8008ee4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dbc:	4b4c      	ldr	r3, [pc, #304]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f023 0203 	bic.w	r2, r3, #3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	4949      	ldr	r1, [pc, #292]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008dce:	f7fd fd3f 	bl	8006850 <HAL_GetTick>
 8008dd2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d112      	bne.n	8008e02 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ddc:	e00a      	b.n	8008df4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dde:	f7fd fd37 	bl	8006850 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e077      	b.n	8008ee4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008df4:	4b3e      	ldr	r3, [pc, #248]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f003 030c 	and.w	r3, r3, #12
 8008dfc:	2b04      	cmp	r3, #4
 8008dfe:	d1ee      	bne.n	8008dde <HAL_RCC_ClockConfig+0xfa>
 8008e00:	e027      	b.n	8008e52 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d11d      	bne.n	8008e46 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e0a:	e00a      	b.n	8008e22 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e0c:	f7fd fd20 	bl	8006850 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e060      	b.n	8008ee4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e22:	4b33      	ldr	r3, [pc, #204]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f003 030c 	and.w	r3, r3, #12
 8008e2a:	2b08      	cmp	r3, #8
 8008e2c:	d1ee      	bne.n	8008e0c <HAL_RCC_ClockConfig+0x128>
 8008e2e:	e010      	b.n	8008e52 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e30:	f7fd fd0e 	bl	8006850 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d901      	bls.n	8008e46 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e04e      	b.n	8008ee4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e46:	4b2a      	ldr	r3, [pc, #168]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f003 030c 	and.w	r3, r3, #12
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1ee      	bne.n	8008e30 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8008e52:	4b26      	ldr	r3, [pc, #152]	; (8008eec <HAL_RCC_ClockConfig+0x208>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0307 	and.w	r3, r3, #7
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d210      	bcs.n	8008e82 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e60:	4b22      	ldr	r3, [pc, #136]	; (8008eec <HAL_RCC_ClockConfig+0x208>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f023 0207 	bic.w	r2, r3, #7
 8008e68:	4920      	ldr	r1, [pc, #128]	; (8008eec <HAL_RCC_ClockConfig+0x208>)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008e70:	4b1e      	ldr	r3, [pc, #120]	; (8008eec <HAL_RCC_ClockConfig+0x208>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d001      	beq.n	8008e82 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e030      	b.n	8008ee4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0304 	and.w	r3, r3, #4
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d008      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e8e:	4b18      	ldr	r3, [pc, #96]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	4915      	ldr	r1, [pc, #84]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0308 	and.w	r3, r3, #8
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d009      	beq.n	8008ec0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008eac:	4b10      	ldr	r3, [pc, #64]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	490d      	ldr	r1, [pc, #52]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008ec0:	f000 f81c 	bl	8008efc <HAL_RCC_GetSysClockFreq>
 8008ec4:	4601      	mov	r1, r0
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <HAL_RCC_ClockConfig+0x20c>)
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	091b      	lsrs	r3, r3, #4
 8008ecc:	f003 030f 	and.w	r3, r3, #15
 8008ed0:	4a08      	ldr	r2, [pc, #32]	; (8008ef4 <HAL_RCC_ClockConfig+0x210>)
 8008ed2:	5cd3      	ldrb	r3, [r2, r3]
 8008ed4:	fa21 f303 	lsr.w	r3, r1, r3
 8008ed8:	4a07      	ldr	r2, [pc, #28]	; (8008ef8 <HAL_RCC_ClockConfig+0x214>)
 8008eda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008edc:	2000      	movs	r0, #0
 8008ede:	f7fd fc75 	bl	80067cc <HAL_InitTick>
  
  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	40022000 	.word	0x40022000
 8008ef0:	40021000 	.word	0x40021000
 8008ef4:	0800db28 	.word	0x0800db28
 8008ef8:	20000000 	.word	0x20000000

08008efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008efc:	b490      	push	{r4, r7}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008f02:	4b2a      	ldr	r3, [pc, #168]	; (8008fac <HAL_RCC_GetSysClockFreq+0xb0>)
 8008f04:	1d3c      	adds	r4, r7, #4
 8008f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008f0c:	4b28      	ldr	r3, [pc, #160]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	61fb      	str	r3, [r7, #28]
 8008f16:	2300      	movs	r3, #0
 8008f18:	61bb      	str	r3, [r7, #24]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f1e:	2300      	movs	r3, #0
 8008f20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008f26:	4b23      	ldr	r3, [pc, #140]	; (8008fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	f003 030c 	and.w	r3, r3, #12
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d002      	beq.n	8008f3c <HAL_RCC_GetSysClockFreq+0x40>
 8008f36:	2b08      	cmp	r3, #8
 8008f38:	d003      	beq.n	8008f42 <HAL_RCC_GetSysClockFreq+0x46>
 8008f3a:	e02d      	b.n	8008f98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008f3c:	4b1e      	ldr	r3, [pc, #120]	; (8008fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f3e:	623b      	str	r3, [r7, #32]
      break;
 8008f40:	e02d      	b.n	8008f9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	0c9b      	lsrs	r3, r3, #18
 8008f46:	f003 030f 	and.w	r3, r3, #15
 8008f4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008f4e:	4413      	add	r3, r2
 8008f50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008f54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d013      	beq.n	8008f88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008f60:	4b14      	ldr	r3, [pc, #80]	; (8008fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	0c5b      	lsrs	r3, r3, #17
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008f6e:	4413      	add	r3, r2
 8008f70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008f74:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	4a0f      	ldr	r2, [pc, #60]	; (8008fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f7a:	fb02 f203 	mul.w	r2, r2, r3
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
 8008f86:	e004      	b.n	8008f92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	4a0c      	ldr	r2, [pc, #48]	; (8008fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008f8c:	fb02 f303 	mul.w	r3, r2, r3
 8008f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	623b      	str	r3, [r7, #32]
      break;
 8008f96:	e002      	b.n	8008f9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008f98:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f9a:	623b      	str	r3, [r7, #32]
      break;
 8008f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3728      	adds	r7, #40	; 0x28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bc90      	pop	{r4, r7}
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	0800dab8 	.word	0x0800dab8
 8008fb0:	0800dac8 	.word	0x0800dac8
 8008fb4:	40021000 	.word	0x40021000
 8008fb8:	007a1200 	.word	0x007a1200
 8008fbc:	003d0900 	.word	0x003d0900

08008fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fc4:	4b02      	ldr	r3, [pc, #8]	; (8008fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bc80      	pop	{r7}
 8008fce:	4770      	bx	lr
 8008fd0:	20000000 	.word	0x20000000

08008fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008fd8:	f7ff fff2 	bl	8008fc0 <HAL_RCC_GetHCLKFreq>
 8008fdc:	4601      	mov	r1, r0
 8008fde:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	0a1b      	lsrs	r3, r3, #8
 8008fe4:	f003 0307 	and.w	r3, r3, #7
 8008fe8:	4a03      	ldr	r2, [pc, #12]	; (8008ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fea:	5cd3      	ldrb	r3, [r2, r3]
 8008fec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	40021000 	.word	0x40021000
 8008ff8:	0800db38 	.word	0x0800db38

08008ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009000:	f7ff ffde 	bl	8008fc0 <HAL_RCC_GetHCLKFreq>
 8009004:	4601      	mov	r1, r0
 8009006:	4b05      	ldr	r3, [pc, #20]	; (800901c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	0adb      	lsrs	r3, r3, #11
 800900c:	f003 0307 	and.w	r3, r3, #7
 8009010:	4a03      	ldr	r2, [pc, #12]	; (8009020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009012:	5cd3      	ldrb	r3, [r2, r3]
 8009014:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009018:	4618      	mov	r0, r3
 800901a:	bd80      	pop	{r7, pc}
 800901c:	40021000 	.word	0x40021000
 8009020:	0800db38 	.word	0x0800db38

08009024 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <RCC_Delay+0x34>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a0a      	ldr	r2, [pc, #40]	; (800905c <RCC_Delay+0x38>)
 8009032:	fba2 2303 	umull	r2, r3, r2, r3
 8009036:	0a5b      	lsrs	r3, r3, #9
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	fb02 f303 	mul.w	r3, r2, r3
 800903e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8009040:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	1e5a      	subs	r2, r3, #1
 8009046:	60fa      	str	r2, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1f9      	bne.n	8009040 <RCC_Delay+0x1c>
}
 800904c:	bf00      	nop
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	bc80      	pop	{r7}
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	20000000 	.word	0x20000000
 800905c:	10624dd3 	.word	0x10624dd3

08009060 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	613b      	str	r3, [r7, #16]
 800906c:	2300      	movs	r3, #0
 800906e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	2b00      	cmp	r3, #0
 800907a:	d07d      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800907c:	2300      	movs	r3, #0
 800907e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009080:	4b4f      	ldr	r3, [pc, #316]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10d      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800908c:	4b4c      	ldr	r3, [pc, #304]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	4a4b      	ldr	r2, [pc, #300]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009096:	61d3      	str	r3, [r2, #28]
 8009098:	4b49      	ldr	r3, [pc, #292]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090a0:	60bb      	str	r3, [r7, #8]
 80090a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090a4:	2301      	movs	r3, #1
 80090a6:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090a8:	4b46      	ldr	r3, [pc, #280]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d118      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090b4:	4b43      	ldr	r3, [pc, #268]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a42      	ldr	r2, [pc, #264]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80090ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090c0:	f7fd fbc6 	bl	8006850 <HAL_GetTick>
 80090c4:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090c6:	e008      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090c8:	f7fd fbc2 	bl	8006850 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b64      	cmp	r3, #100	; 0x64
 80090d4:	d901      	bls.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e06d      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090da:	4b3a      	ldr	r3, [pc, #232]	; (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0f0      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80090e6:	4b36      	ldr	r3, [pc, #216]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ee:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d02e      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	429a      	cmp	r2, r3
 8009102:	d027      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009104:	4b2e      	ldr	r3, [pc, #184]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009106:	6a1b      	ldr	r3, [r3, #32]
 8009108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800910c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800910e:	4b2e      	ldr	r3, [pc, #184]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009110:	2201      	movs	r2, #1
 8009112:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009114:	4b2c      	ldr	r3, [pc, #176]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009116:	2200      	movs	r2, #0
 8009118:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800911a:	4a29      	ldr	r2, [pc, #164]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	2b00      	cmp	r3, #0
 8009128:	d014      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800912a:	f7fd fb91 	bl	8006850 <HAL_GetTick>
 800912e:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009130:	e00a      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009132:	f7fd fb8d 	bl	8006850 <HAL_GetTick>
 8009136:	4602      	mov	r2, r0
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009140:	4293      	cmp	r3, r2
 8009142:	d901      	bls.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e036      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009148:	4b1d      	ldr	r3, [pc, #116]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	f003 0302 	and.w	r3, r3, #2
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0ee      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009154:	4b1a      	ldr	r3, [pc, #104]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	4917      	ldr	r1, [pc, #92]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009162:	4313      	orrs	r3, r2
 8009164:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009166:	7dfb      	ldrb	r3, [r7, #23]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d105      	bne.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800916c:	4b14      	ldr	r3, [pc, #80]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	4a13      	ldr	r2, [pc, #76]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009176:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	2b00      	cmp	r3, #0
 8009182:	d008      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009184:	4b0e      	ldr	r3, [pc, #56]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	490b      	ldr	r1, [pc, #44]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009192:	4313      	orrs	r3, r2
 8009194:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0310 	and.w	r3, r3, #16
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d008      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091a2:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	4904      	ldr	r1, [pc, #16]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	40021000 	.word	0x40021000
 80091c4:	40007000 	.word	0x40007000
 80091c8:	42420440 	.word	0x42420440

080091cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80091cc:	b590      	push	{r4, r7, lr}
 80091ce:	b08d      	sub	sp, #52	; 0x34
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80091d4:	4b6c      	ldr	r3, [pc, #432]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80091d6:	f107 040c 	add.w	r4, r7, #12
 80091da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80091dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80091e0:	4b6a      	ldr	r3, [pc, #424]	; (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	627b      	str	r3, [r7, #36]	; 0x24
 80091ea:	2300      	movs	r3, #0
 80091ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091ee:	2300      	movs	r3, #0
 80091f0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80091f2:	2300      	movs	r3, #0
 80091f4:	61fb      	str	r3, [r7, #28]
 80091f6:	2300      	movs	r3, #0
 80091f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	2b0f      	cmp	r3, #15
 8009200:	f200 80b9 	bhi.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009204:	a201      	add	r2, pc, #4	; (adr r2, 800920c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8009206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920a:	bf00      	nop
 800920c:	080092ef 	.word	0x080092ef
 8009210:	0800935b 	.word	0x0800935b
 8009214:	08009377 	.word	0x08009377
 8009218:	080092df 	.word	0x080092df
 800921c:	08009377 	.word	0x08009377
 8009220:	08009377 	.word	0x08009377
 8009224:	08009377 	.word	0x08009377
 8009228:	080092e7 	.word	0x080092e7
 800922c:	08009377 	.word	0x08009377
 8009230:	08009377 	.word	0x08009377
 8009234:	08009377 	.word	0x08009377
 8009238:	08009377 	.word	0x08009377
 800923c:	08009377 	.word	0x08009377
 8009240:	08009377 	.word	0x08009377
 8009244:	08009377 	.word	0x08009377
 8009248:	0800924d 	.word	0x0800924d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800924c:	4b50      	ldr	r3, [pc, #320]	; (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8009252:	4b4f      	ldr	r3, [pc, #316]	; (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 808d 	beq.w	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	0c9b      	lsrs	r3, r3, #18
 8009264:	f003 030f 	and.w	r3, r3, #15
 8009268:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800926c:	4413      	add	r3, r2
 800926e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009272:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d018      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800927e:	4b44      	ldr	r3, [pc, #272]	; (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	0c5b      	lsrs	r3, r3, #17
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800928c:	4413      	add	r3, r2
 800928e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00d      	beq.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800929e:	4a3d      	ldr	r2, [pc, #244]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	fb02 f303 	mul.w	r3, r2, r3
 80092ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092ae:	e004      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	4a39      	ldr	r2, [pc, #228]	; (8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 80092b4:	fb02 f303 	mul.w	r3, r2, r3
 80092b8:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80092ba:	4b35      	ldr	r3, [pc, #212]	; (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092c6:	d102      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80092cc:	e055      	b.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          frequency = (pllclk * 2) / 3;
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	4a32      	ldr	r2, [pc, #200]	; (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>)
 80092d4:	fba2 2303 	umull	r2, r3, r2, r3
 80092d8:	085b      	lsrs	r3, r3, #1
 80092da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80092dc:	e04d      	b.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80092de:	f7ff fe0d 	bl	8008efc <HAL_RCC_GetSysClockFreq>
 80092e2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80092e4:	e04a      	b.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80092e6:	f7ff fe09 	bl	8008efc <HAL_RCC_GetSysClockFreq>
 80092ea:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80092ec:	e046      	b.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80092ee:	4b28      	ldr	r3, [pc, #160]	; (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092fe:	d108      	bne.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 800930a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800930e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009310:	e022      	b.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800931c:	d109      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800931e:	4b1c      	ldr	r3, [pc, #112]	; (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 800932a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800932e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009330:	e012      	b.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800933c:	d109      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800933e:	4b14      	ldr	r3, [pc, #80]	; (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        frequency = HSE_VALUE / 128U;
 800934a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800934e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009350:	e002      	b.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009356:	e011      	b.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8009358:	e010      	b.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800935a:	f7ff fe4f 	bl	8008ffc <HAL_RCC_GetPCLK2Freq>
 800935e:	4602      	mov	r2, r0
 8009360:	4b0b      	ldr	r3, [pc, #44]	; (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	0b9b      	lsrs	r3, r3, #14
 8009366:	f003 0303 	and.w	r3, r3, #3
 800936a:	3301      	adds	r3, #1
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009372:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8009374:	e002      	b.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  default: 
    {
      break;
 8009376:	bf00      	nop
 8009378:	e000      	b.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      break;
 800937a:	bf00      	nop
    }
  }
  return(frequency);
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800937e:	4618      	mov	r0, r3
 8009380:	3734      	adds	r7, #52	; 0x34
 8009382:	46bd      	mov	sp, r7
 8009384:	bd90      	pop	{r4, r7, pc}
 8009386:	bf00      	nop
 8009388:	0800dacc 	.word	0x0800dacc
 800938c:	0800dadc 	.word	0x0800dadc
 8009390:	40021000 	.word	0x40021000
 8009394:	007a1200 	.word	0x007a1200
 8009398:	003d0900 	.word	0x003d0900
 800939c:	aaaaaaab 	.word	0xaaaaaaab

080093a0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e084      	b.n	80094c0 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	7c5b      	ldrb	r3, [r3, #17]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d105      	bne.n	80093cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7fc ff7a 	bl	80062c0 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2202      	movs	r2, #2
 80093d0:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f87a 	bl	80094cc <HAL_RTC_WaitForSynchro>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d004      	beq.n	80093e8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2204      	movs	r2, #4
 80093e2:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e06b      	b.n	80094c0 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f89c 	bl	8009526 <RTC_EnterInitMode>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d004      	beq.n	80093fe <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2204      	movs	r2, #4
 80093f8:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e060      	b.n	80094c0 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0207 	bic.w	r2, r2, #7
 800940c:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d005      	beq.n	8009422 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8009416:	4b2c      	ldr	r3, [pc, #176]	; (80094c8 <HAL_RTC_Init+0x128>)
 8009418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941a:	4a2b      	ldr	r2, [pc, #172]	; (80094c8 <HAL_RTC_Init+0x128>)
 800941c:	f023 0301 	bic.w	r3, r3, #1
 8009420:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8009422:	4b29      	ldr	r3, [pc, #164]	; (80094c8 <HAL_RTC_Init+0x128>)
 8009424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009426:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	4926      	ldr	r1, [pc, #152]	; (80094c8 <HAL_RTC_Init+0x128>)
 8009430:	4313      	orrs	r3, r2
 8009432:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943c:	d003      	beq.n	8009446 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	e00e      	b.n	8009464 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8009446:	2001      	movs	r0, #1
 8009448:	f7ff fec0 	bl	80091cc <HAL_RCCEx_GetPeriphCLKFreq>
 800944c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2204      	movs	r2, #4
 8009458:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e030      	b.n	80094c0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3b01      	subs	r3, #1
 8009462:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f023 010f 	bic.w	r1, r3, #15
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	0c1a      	lsrs	r2, r3, #16
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	0c1b      	lsrs	r3, r3, #16
 8009482:	041b      	lsls	r3, r3, #16
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	b291      	uxth	r1, r2
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	6812      	ldr	r2, [r2, #0]
 800948c:	430b      	orrs	r3, r1
 800948e:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f870 	bl	8009576 <RTC_ExitInitMode>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d004      	beq.n	80094a6 <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2204      	movs	r2, #4
 80094a0:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e00c      	b.n	80094c0 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 80094be:	2300      	movs	r3, #0
  }
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	40006c00 	.word	0x40006c00

080094cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e01d      	b.n	800951e <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f022 0208 	bic.w	r2, r2, #8
 80094f0:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 80094f2:	f7fd f9ad 	bl	8006850 <HAL_GetTick>
 80094f6:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80094f8:	e009      	b.n	800950e <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 80094fa:	f7fd f9a9 	bl	8006850 <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009508:	d901      	bls.n	800950e <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	e007      	b.n	800951e <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f003 0308 	and.w	r3, r3, #8
 8009518:	2b00      	cmp	r3, #0
 800951a:	d0ee      	beq.n	80094fa <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 8009532:	f7fd f98d 	bl	8006850 <HAL_GetTick>
 8009536:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009538:	e009      	b.n	800954e <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800953a:	f7fd f989 	bl	8006850 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009548:	d901      	bls.n	800954e <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e00f      	b.n	800956e <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b00      	cmp	r3, #0
 800955a:	d0ee      	beq.n	800953a <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f042 0210 	orr.w	r2, r2, #16
 800956a:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0210 	bic.w	r2, r2, #16
 8009590:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8009592:	f7fd f95d 	bl	8006850 <HAL_GetTick>
 8009596:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009598:	e009      	b.n	80095ae <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800959a:	f7fd f959 	bl	8006850 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095a8:	d901      	bls.n	80095ae <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e007      	b.n	80095be <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	f003 0320 	and.w	r3, r3, #32
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0ee      	beq.n	800959a <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80095d4:	2300      	movs	r3, #0
 80095d6:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 80095d8:	4b07      	ldr	r3, [pc, #28]	; (80095f8 <HAL_RTCEx_BKUPWrite+0x30>)
 80095da:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	4413      	add	r3, r2
 80095e4:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	b292      	uxth	r2, r2
 80095ec:	601a      	str	r2, [r3, #0]
}
 80095ee:	bf00      	nop
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bc80      	pop	{r7}
 80095f6:	4770      	bx	lr
 80095f8:	40006c00 	.word	0x40006c00

080095fc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8009606:	2300      	movs	r3, #0
 8009608:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 800960e:	4b08      	ldr	r3, [pc, #32]	; (8009630 <HAL_RTCEx_BKUPRead+0x34>)
 8009610:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	4413      	add	r3, r2
 800961a:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	b29b      	uxth	r3, r3
 8009622:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8009624:	68bb      	ldr	r3, [r7, #8]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	bc80      	pop	{r7}
 800962e:	4770      	bx	lr
 8009630:	40006c00 	.word	0x40006c00

08009634 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e03f      	b.n	80096c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d106      	bne.n	8009660 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7fc ffc4 	bl	80065e8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2224      	movs	r2, #36	; 0x24
 8009664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009676:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fc7d 	bl	8009f78 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	691a      	ldr	r2, [r3, #16]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800968c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	695a      	ldr	r2, [r3, #20]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800969c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68da      	ldr	r2, [r3, #12]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096ac:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2220      	movs	r2, #32
 80096b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2220      	movs	r2, #32
 80096c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <HAL_UART_DeInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e016      	b.n	800970e <HAL_UART_DeInit+0x40>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2224      	movs	r2, #36	; 0x24
 80096e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f7fc fffb 	bl	80066e4 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b088      	sub	sp, #32
 800971a:	af02      	add	r7, sp, #8
 800971c:	60f8      	str	r0, [r7, #12]
 800971e:	60b9      	str	r1, [r7, #8]
 8009720:	603b      	str	r3, [r7, #0]
 8009722:	4613      	mov	r3, r2
 8009724:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b20      	cmp	r3, #32
 8009734:	f040 8083 	bne.w	800983e <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <HAL_UART_Transmit+0x2e>
 800973e:	88fb      	ldrh	r3, [r7, #6]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e07b      	b.n	8009840 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800974e:	2b01      	cmp	r3, #1
 8009750:	d101      	bne.n	8009756 <HAL_UART_Transmit+0x40>
 8009752:	2302      	movs	r3, #2
 8009754:	e074      	b.n	8009840 <HAL_UART_Transmit+0x12a>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2221      	movs	r2, #33	; 0x21
 8009768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800976c:	f7fd f870 	bl	8006850 <HAL_GetTick>
 8009770:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	88fa      	ldrh	r2, [r7, #6]
 8009776:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	88fa      	ldrh	r2, [r7, #6]
 800977c:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800977e:	e042      	b.n	8009806 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009784:	b29b      	uxth	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	b29a      	uxth	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009796:	d122      	bne.n	80097de <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2200      	movs	r2, #0
 80097a0:	2180      	movs	r1, #128	; 0x80
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f000 fa6a 	bl	8009c7c <UART_WaitOnFlagUntilTimeout>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e046      	b.n	8009840 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	881b      	ldrh	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097c4:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d103      	bne.n	80097d6 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	3302      	adds	r3, #2
 80097d2:	60bb      	str	r3, [r7, #8]
 80097d4:	e017      	b.n	8009806 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	3301      	adds	r3, #1
 80097da:	60bb      	str	r3, [r7, #8]
 80097dc:	e013      	b.n	8009806 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2200      	movs	r2, #0
 80097e6:	2180      	movs	r1, #128	; 0x80
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f000 fa47 	bl	8009c7c <UART_WaitOnFlagUntilTimeout>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e023      	b.n	8009840 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	60ba      	str	r2, [r7, #8]
 80097fe:	781a      	ldrb	r2, [r3, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800980a:	b29b      	uxth	r3, r3
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1b7      	bne.n	8009780 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2200      	movs	r2, #0
 8009818:	2140      	movs	r1, #64	; 0x40
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 fa2e 	bl	8009c7c <UART_WaitOnFlagUntilTimeout>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e00a      	b.n	8009840 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2220      	movs	r2, #32
 800982e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	e000      	b.n	8009840 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800983e:	2302      	movs	r3, #2
  }
}
 8009840:	4618      	mov	r0, r3
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b20      	cmp	r3, #32
 8009860:	d166      	bne.n	8009930 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL) || (Size == 0U))
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <HAL_UART_Receive_DMA+0x26>
 8009868:	88fb      	ldrh	r3, [r7, #6]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e05f      	b.n	8009932 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009878:	2b01      	cmp	r3, #1
 800987a:	d101      	bne.n	8009880 <HAL_UART_Receive_DMA+0x38>
 800987c:	2302      	movs	r3, #2
 800987e:	e058      	b.n	8009932 <HAL_UART_Receive_DMA+0xea>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	88fa      	ldrh	r2, [r7, #6]
 8009892:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2222      	movs	r2, #34	; 0x22
 800989e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a6:	4a25      	ldr	r2, [pc, #148]	; (800993c <HAL_UART_Receive_DMA+0xf4>)
 80098a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ae:	4a24      	ldr	r2, [pc, #144]	; (8009940 <HAL_UART_Receive_DMA+0xf8>)
 80098b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b6:	4a23      	ldr	r2, [pc, #140]	; (8009944 <HAL_UART_Receive_DMA+0xfc>)
 80098b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098be:	2200      	movs	r2, #0
 80098c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 80098c2:	f107 0308 	add.w	r3, r7, #8
 80098c6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	3304      	adds	r3, #4
 80098d2:	4619      	mov	r1, r3
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	88fb      	ldrh	r3, [r7, #6]
 80098da:	f7fd fa05 	bl	8006ce8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80098de:	2300      	movs	r3, #0
 80098e0:	613b      	str	r3, [r7, #16]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	613b      	str	r3, [r7, #16]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	613b      	str	r3, [r7, #16]
 80098f2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68da      	ldr	r2, [r3, #12]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800990a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	695a      	ldr	r2, [r3, #20]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0201 	orr.w	r2, r2, #1
 800991a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	695a      	ldr	r2, [r3, #20]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800992a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	e000      	b.n	8009932 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009930:	2302      	movs	r3, #2
  }
}
 8009932:	4618      	mov	r0, r3
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	08009b65 	.word	0x08009b65
 8009940:	08009bcd 	.word	0x08009bcd
 8009944:	08009be9 	.word	0x08009be9

08009948 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8009968:	2300      	movs	r3, #0
 800996a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	f003 030f 	and.w	r3, r3, #15
 8009976:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10d      	bne.n	800999a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	f003 0320 	and.w	r3, r3, #32
 8009984:	2b00      	cmp	r3, #0
 8009986:	d008      	beq.n	800999a <HAL_UART_IRQHandler+0x52>
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa6f 	bl	8009e76 <UART_Receive_IT>
      return;
 8009998:	e0cc      	b.n	8009b34 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 80ab 	beq.w	8009af8 <HAL_UART_IRQHandler+0x1b0>
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d105      	bne.n	80099b8 <HAL_UART_IRQHandler+0x70>
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f000 80a0 	beq.w	8009af8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00a      	beq.n	80099d8 <HAL_UART_IRQHandler+0x90>
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d005      	beq.n	80099d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d0:	f043 0201 	orr.w	r2, r3, #1
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	f003 0304 	and.w	r3, r3, #4
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00a      	beq.n	80099f8 <HAL_UART_IRQHandler+0xb0>
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d005      	beq.n	80099f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099f0:	f043 0202 	orr.w	r2, r3, #2
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	f003 0302 	and.w	r3, r3, #2
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00a      	beq.n	8009a18 <HAL_UART_IRQHandler+0xd0>
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d005      	beq.n	8009a18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a10:	f043 0204 	orr.w	r2, r3, #4
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	f003 0308 	and.w	r3, r3, #8
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00a      	beq.n	8009a38 <HAL_UART_IRQHandler+0xf0>
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d005      	beq.n	8009a38 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a30:	f043 0208 	orr.w	r2, r3, #8
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d078      	beq.n	8009b32 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	f003 0320 	and.w	r3, r3, #32
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d007      	beq.n	8009a5a <HAL_UART_IRQHandler+0x112>
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	f003 0320 	and.w	r3, r3, #32
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fa0e 	bl	8009e76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	bf14      	ite	ne
 8009a68:	2301      	movne	r3, #1
 8009a6a:	2300      	moveq	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a74:	f003 0308 	and.w	r3, r3, #8
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <HAL_UART_IRQHandler+0x13a>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d031      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f959 	bl	8009d3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d023      	beq.n	8009ade <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	695a      	ldr	r2, [r3, #20]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aa4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d013      	beq.n	8009ad6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab2:	4a22      	ldr	r2, [pc, #136]	; (8009b3c <HAL_UART_IRQHandler+0x1f4>)
 8009ab4:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fd f974 	bl	8006da8 <HAL_DMA_Abort_IT>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d016      	beq.n	8009af4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad4:	e00e      	b.n	8009af4 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7fc fd74 	bl	80065c4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009adc:	e00a      	b.n	8009af4 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7fc fd70 	bl	80065c4 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae4:	e006      	b.n	8009af4 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7fc fd6c 	bl	80065c4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009af2:	e01e      	b.n	8009b32 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009af4:	bf00      	nop
    return;
 8009af6:	e01c      	b.n	8009b32 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d008      	beq.n	8009b14 <HAL_UART_IRQHandler+0x1cc>
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f945 	bl	8009d9c <UART_Transmit_IT>
    return;
 8009b12:	e00f      	b.n	8009b34 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00a      	beq.n	8009b34 <HAL_UART_IRQHandler+0x1ec>
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f98c 	bl	8009e46 <UART_EndTransmit_IT>
    return;
 8009b2e:	bf00      	nop
 8009b30:	e000      	b.n	8009b34 <HAL_UART_IRQHandler+0x1ec>
    return;
 8009b32:	bf00      	nop
  }
}
 8009b34:	3720      	adds	r7, #32
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	08009d75 	.word	0x08009d75

08009b40 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bc80      	pop	{r7}
 8009b50:	4770      	bx	lr

08009b52 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009b5a:	bf00      	nop
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bc80      	pop	{r7}
 8009b62:	4770      	bx	lr

08009b64 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0320 	and.w	r3, r3, #32
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d11e      	bne.n	8009bbe <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b94:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	695a      	ldr	r2, [r3, #20]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 0201 	bic.w	r2, r2, #1
 8009ba4:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	695a      	ldr	r2, [r3, #20]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bb4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f7fc fd09 	bl	80065d6 <HAL_UART_RxCpltCallback>
}
 8009bc4:	bf00      	nop
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	60fb      	str	r3, [r7, #12]
  HAL_UART_RxHalfCpltCallback(huart); 
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff ffb9 	bl	8009b52 <HAL_UART_RxHalfCpltCallback>
}
 8009be0:	bf00      	nop
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	bf14      	ite	ne
 8009c08:	2301      	movne	r3, #1
 8009c0a:	2300      	moveq	r3, #0
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b21      	cmp	r3, #33	; 0x21
 8009c1a:	d108      	bne.n	8009c2e <UART_DMAError+0x46>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d005      	beq.n	8009c2e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2200      	movs	r2, #0
 8009c26:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009c28:	68b8      	ldr	r0, [r7, #8]
 8009c2a:	f000 f871 	bl	8009d10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bf14      	ite	ne
 8009c3c:	2301      	movne	r3, #1
 8009c3e:	2300      	moveq	r3, #0
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b22      	cmp	r3, #34	; 0x22
 8009c4e:	d108      	bne.n	8009c62 <UART_DMAError+0x7a>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d005      	beq.n	8009c62 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009c5c:	68b8      	ldr	r0, [r7, #8]
 8009c5e:	f000 f86c 	bl	8009d3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c66:	f043 0210 	orr.w	r2, r3, #16
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8009c6e:	68b8      	ldr	r0, [r7, #8]
 8009c70:	f7fc fca8 	bl	80065c4 <HAL_UART_ErrorCallback>
}
 8009c74:	bf00      	nop
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8009c8c:	e02c      	b.n	8009ce8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c94:	d028      	beq.n	8009ce8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d007      	beq.n	8009cac <UART_WaitOnFlagUntilTimeout+0x30>
 8009c9c:	f7fc fdd8 	bl	8006850 <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d21d      	bcs.n	8009ce8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68da      	ldr	r2, [r3, #12]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009cba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	695a      	ldr	r2, [r3, #20]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f022 0201 	bic.w	r2, r2, #1
 8009cca:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e00f      	b.n	8009d08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	bf0c      	ite	eq
 8009cf8:	2301      	moveq	r3, #1
 8009cfa:	2300      	movne	r3, #0
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	461a      	mov	r2, r3
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d0c3      	beq.n	8009c8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009d26:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bc80      	pop	{r7}
 8009d38:	4770      	bx	lr

08009d3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b083      	sub	sp, #12
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68da      	ldr	r2, [r3, #12]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d50:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	695a      	ldr	r2, [r3, #20]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f022 0201 	bic.w	r2, r2, #1
 8009d60:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2220      	movs	r2, #32
 8009d66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009d6a:	bf00      	nop
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bc80      	pop	{r7}
 8009d72:	4770      	bx	lr

08009d74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f7fc fc18 	bl	80065c4 <HAL_UART_ErrorCallback>
}
 8009d94:	bf00      	nop
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b21      	cmp	r3, #33	; 0x21
 8009dae:	d144      	bne.n	8009e3a <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009db8:	d11a      	bne.n	8009df0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dce:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d105      	bne.n	8009de4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	1c9a      	adds	r2, r3, #2
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	621a      	str	r2, [r3, #32]
 8009de2:	e00e      	b.n	8009e02 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a1b      	ldr	r3, [r3, #32]
 8009de8:	1c5a      	adds	r2, r3, #1
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	621a      	str	r2, [r3, #32]
 8009dee:	e008      	b.n	8009e02 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	1c59      	adds	r1, r3, #1
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	6211      	str	r1, [r2, #32]
 8009dfa:	781a      	ldrb	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10f      	bne.n	8009e36 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68da      	ldr	r2, [r3, #12]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	e000      	b.n	8009e3c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009e3a:	2302      	movs	r3, #2
  }
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bc80      	pop	{r7}
 8009e44:	4770      	bx	lr

08009e46 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b082      	sub	sp, #8
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e5c:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2220      	movs	r2, #32
 8009e62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7ff fe6a 	bl	8009b40 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b22      	cmp	r3, #34	; 0x22
 8009e88:	d171      	bne.n	8009f6e <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e92:	d123      	bne.n	8009edc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e98:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10e      	bne.n	8009ec0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb8:	1c9a      	adds	r2, r3, #2
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	629a      	str	r2, [r3, #40]	; 0x28
 8009ebe:	e029      	b.n	8009f14 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8009eda:	e01b      	b.n	8009f14 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6858      	ldr	r0, [r3, #4]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eee:	1c59      	adds	r1, r3, #1
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	6291      	str	r1, [r2, #40]	; 0x28
 8009ef4:	b2c2      	uxtb	r2, r0
 8009ef6:	701a      	strb	r2, [r3, #0]
 8009ef8:	e00c      	b.n	8009f14 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f06:	1c58      	adds	r0, r3, #1
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	6288      	str	r0, [r1, #40]	; 0x28
 8009f0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	4619      	mov	r1, r3
 8009f22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d120      	bne.n	8009f6a <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68da      	ldr	r2, [r3, #12]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f022 0220 	bic.w	r2, r2, #32
 8009f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68da      	ldr	r2, [r3, #12]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f46:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	695a      	ldr	r2, [r3, #20]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f022 0201 	bic.w	r2, r2, #1
 8009f56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7fc fb38 	bl	80065d6 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	e002      	b.n	8009f70 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e000      	b.n	8009f70 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009f6e:	2302      	movs	r3, #2
  }
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f78:	b5b0      	push	{r4, r5, r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68da      	ldr	r2, [r3, #12]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	689a      	ldr	r2, [r3, #8]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	431a      	orrs	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009fba:	f023 030c 	bic.w	r3, r3, #12
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	6812      	ldr	r2, [r2, #0]
 8009fc2:	68f9      	ldr	r1, [r7, #12]
 8009fc4:	430b      	orrs	r3, r1
 8009fc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	699a      	ldr	r2, [r3, #24]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a6f      	ldr	r2, [pc, #444]	; (800a1a0 <UART_SetConfig+0x228>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d16b      	bne.n	800a0c0 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009fe8:	f7ff f808 	bl	8008ffc <HAL_RCC_GetPCLK2Freq>
 8009fec:	4602      	mov	r2, r0
 8009fee:	4613      	mov	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	009a      	lsls	r2, r3, #2
 8009ff6:	441a      	add	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a002:	4a68      	ldr	r2, [pc, #416]	; (800a1a4 <UART_SetConfig+0x22c>)
 800a004:	fba2 2303 	umull	r2, r3, r2, r3
 800a008:	095b      	lsrs	r3, r3, #5
 800a00a:	011c      	lsls	r4, r3, #4
 800a00c:	f7fe fff6 	bl	8008ffc <HAL_RCC_GetPCLK2Freq>
 800a010:	4602      	mov	r2, r0
 800a012:	4613      	mov	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	009a      	lsls	r2, r3, #2
 800a01a:	441a      	add	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	fbb2 f5f3 	udiv	r5, r2, r3
 800a026:	f7fe ffe9 	bl	8008ffc <HAL_RCC_GetPCLK2Freq>
 800a02a:	4602      	mov	r2, r0
 800a02c:	4613      	mov	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	009a      	lsls	r2, r3, #2
 800a034:	441a      	add	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a040:	4a58      	ldr	r2, [pc, #352]	; (800a1a4 <UART_SetConfig+0x22c>)
 800a042:	fba2 2303 	umull	r2, r3, r2, r3
 800a046:	095b      	lsrs	r3, r3, #5
 800a048:	2264      	movs	r2, #100	; 0x64
 800a04a:	fb02 f303 	mul.w	r3, r2, r3
 800a04e:	1aeb      	subs	r3, r5, r3
 800a050:	011b      	lsls	r3, r3, #4
 800a052:	3332      	adds	r3, #50	; 0x32
 800a054:	4a53      	ldr	r2, [pc, #332]	; (800a1a4 <UART_SetConfig+0x22c>)
 800a056:	fba2 2303 	umull	r2, r3, r2, r3
 800a05a:	095b      	lsrs	r3, r3, #5
 800a05c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a060:	441c      	add	r4, r3
 800a062:	f7fe ffcb 	bl	8008ffc <HAL_RCC_GetPCLK2Freq>
 800a066:	4602      	mov	r2, r0
 800a068:	4613      	mov	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	009a      	lsls	r2, r3, #2
 800a070:	441a      	add	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	fbb2 f5f3 	udiv	r5, r2, r3
 800a07c:	f7fe ffbe 	bl	8008ffc <HAL_RCC_GetPCLK2Freq>
 800a080:	4602      	mov	r2, r0
 800a082:	4613      	mov	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	009a      	lsls	r2, r3, #2
 800a08a:	441a      	add	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	fbb2 f3f3 	udiv	r3, r2, r3
 800a096:	4a43      	ldr	r2, [pc, #268]	; (800a1a4 <UART_SetConfig+0x22c>)
 800a098:	fba2 2303 	umull	r2, r3, r2, r3
 800a09c:	095b      	lsrs	r3, r3, #5
 800a09e:	2264      	movs	r2, #100	; 0x64
 800a0a0:	fb02 f303 	mul.w	r3, r2, r3
 800a0a4:	1aeb      	subs	r3, r5, r3
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	3332      	adds	r3, #50	; 0x32
 800a0aa:	4a3e      	ldr	r2, [pc, #248]	; (800a1a4 <UART_SetConfig+0x22c>)
 800a0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b0:	095b      	lsrs	r3, r3, #5
 800a0b2:	f003 020f 	and.w	r2, r3, #15
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4422      	add	r2, r4
 800a0bc:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800a0be:	e06a      	b.n	800a196 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800a0c0:	f7fe ff88 	bl	8008fd4 <HAL_RCC_GetPCLK1Freq>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	009a      	lsls	r2, r3, #2
 800a0ce:	441a      	add	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0da:	4a32      	ldr	r2, [pc, #200]	; (800a1a4 <UART_SetConfig+0x22c>)
 800a0dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e0:	095b      	lsrs	r3, r3, #5
 800a0e2:	011c      	lsls	r4, r3, #4
 800a0e4:	f7fe ff76 	bl	8008fd4 <HAL_RCC_GetPCLK1Freq>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009a      	lsls	r2, r3, #2
 800a0f2:	441a      	add	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	fbb2 f5f3 	udiv	r5, r2, r3
 800a0fe:	f7fe ff69 	bl	8008fd4 <HAL_RCC_GetPCLK1Freq>
 800a102:	4602      	mov	r2, r0
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	009a      	lsls	r2, r3, #2
 800a10c:	441a      	add	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	fbb2 f3f3 	udiv	r3, r2, r3
 800a118:	4a22      	ldr	r2, [pc, #136]	; (800a1a4 <UART_SetConfig+0x22c>)
 800a11a:	fba2 2303 	umull	r2, r3, r2, r3
 800a11e:	095b      	lsrs	r3, r3, #5
 800a120:	2264      	movs	r2, #100	; 0x64
 800a122:	fb02 f303 	mul.w	r3, r2, r3
 800a126:	1aeb      	subs	r3, r5, r3
 800a128:	011b      	lsls	r3, r3, #4
 800a12a:	3332      	adds	r3, #50	; 0x32
 800a12c:	4a1d      	ldr	r2, [pc, #116]	; (800a1a4 <UART_SetConfig+0x22c>)
 800a12e:	fba2 2303 	umull	r2, r3, r2, r3
 800a132:	095b      	lsrs	r3, r3, #5
 800a134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a138:	441c      	add	r4, r3
 800a13a:	f7fe ff4b 	bl	8008fd4 <HAL_RCC_GetPCLK1Freq>
 800a13e:	4602      	mov	r2, r0
 800a140:	4613      	mov	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	4413      	add	r3, r2
 800a146:	009a      	lsls	r2, r3, #2
 800a148:	441a      	add	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	fbb2 f5f3 	udiv	r5, r2, r3
 800a154:	f7fe ff3e 	bl	8008fd4 <HAL_RCC_GetPCLK1Freq>
 800a158:	4602      	mov	r2, r0
 800a15a:	4613      	mov	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	009a      	lsls	r2, r3, #2
 800a162:	441a      	add	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a16e:	4a0d      	ldr	r2, [pc, #52]	; (800a1a4 <UART_SetConfig+0x22c>)
 800a170:	fba2 2303 	umull	r2, r3, r2, r3
 800a174:	095b      	lsrs	r3, r3, #5
 800a176:	2264      	movs	r2, #100	; 0x64
 800a178:	fb02 f303 	mul.w	r3, r2, r3
 800a17c:	1aeb      	subs	r3, r5, r3
 800a17e:	011b      	lsls	r3, r3, #4
 800a180:	3332      	adds	r3, #50	; 0x32
 800a182:	4a08      	ldr	r2, [pc, #32]	; (800a1a4 <UART_SetConfig+0x22c>)
 800a184:	fba2 2303 	umull	r2, r3, r2, r3
 800a188:	095b      	lsrs	r3, r3, #5
 800a18a:	f003 020f 	and.w	r2, r3, #15
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4422      	add	r2, r4
 800a194:	609a      	str	r2, [r3, #8]
}
 800a196:	bf00      	nop
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bdb0      	pop	{r4, r5, r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	40013800 	.word	0x40013800
 800a1a4:	51eb851f 	.word	0x51eb851f

0800a1a8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	b480      	push	{r7}
 800a1ac:	b083      	sub	sp, #12
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	f107 0014 	add.w	r0, r7, #20
 800a1b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bc80      	pop	{r7}
 800a1c4:	b004      	add	sp, #16
 800a1c6:	4770      	bx	lr

0800a1c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800a1d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a1d8:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bc80      	pop	{r7}
 800a1fa:	4770      	bx	lr

0800a1fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800a208:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 800a20c:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a214:	b29a      	uxth	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	43db      	mvns	r3, r3
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	4013      	ands	r3, r2
 800a220:	b29a      	uxth	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	bc80      	pop	{r7}
 800a232:	4770      	bx	lr

0800a234 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	460b      	mov	r3, r1
 800a23e:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	370c      	adds	r7, #12
 800a246:	46bd      	mov	sp, r7
 800a248:	bc80      	pop	{r7}
 800a24a:	4770      	bx	lr

0800a24c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a24c:	b084      	sub	sp, #16
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	f107 0014 	add.w	r0, r7, #20
 800a25a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f7ff ffa2 	bl	800a1c8 <USB_EnableGlobalInt>
    
  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a290:	b004      	add	sp, #16
 800a292:	4770      	bx	lr

0800a294 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a294:	b490      	push	{r4, r7}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	78db      	ldrb	r3, [r3, #3]
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d85f      	bhi.n	800a366 <USB_ActivateEndpoint+0xd2>
 800a2a6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ac <USB_ActivateEndpoint+0x18>)
 800a2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ac:	0800a2bd 	.word	0x0800a2bd
 800a2b0:	0800a33b 	.word	0x0800a33b
 800a2b4:	0800a2e9 	.word	0x0800a2e9
 800a2b8:	0800a30f 	.word	0x0800a30f
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a2ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	6879      	ldr	r1, [r7, #4]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	440b      	add	r3, r1
 800a2de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2e2:	b292      	uxth	r2, r2
 800a2e4:	801a      	strh	r2, [r3, #0]
    break;
 800a2e6:	e03f      	b.n	800a368 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	7812      	ldrb	r2, [r2, #0]
 800a2fc:	0092      	lsls	r2, r2, #2
 800a2fe:	440a      	add	r2, r1
 800a300:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a308:	b29b      	uxth	r3, r3
 800a30a:	8013      	strh	r3, [r2, #0]
    break;
 800a30c:	e02c      	b.n	800a368 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a324:	b29a      	uxth	r2, r3
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	440b      	add	r3, r1
 800a330:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800a334:	b292      	uxth	r2, r2
 800a336:	801a      	strh	r2, [r3, #0]
    break;
 800a338:	e016      	b.n	800a368 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	4413      	add	r3, r2
 800a344:	881b      	ldrh	r3, [r3, #0]
 800a346:	b29b      	uxth	r3, r3
 800a348:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a34c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a350:	b29a      	uxth	r2, r3
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	440b      	add	r3, r1
 800a35c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a360:	b292      	uxth	r2, r2
 800a362:	801a      	strh	r2, [r3, #0]
    break;
 800a364:	e000      	b.n	800a368 <USB_ActivateEndpoint+0xd4>
  default:
      break;
 800a366:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	b29a      	uxth	r2, r3
 800a376:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a37a:	4013      	ands	r3, r2
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	b29b      	uxth	r3, r3
 800a384:	4313      	orrs	r3, r2
 800a386:	b299      	uxth	r1, r3
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	441a      	add	r2, r3
 800a392:	4b75      	ldr	r3, [pc, #468]	; (800a568 <USB_ActivateEndpoint+0x2d4>)
 800a394:	430b      	orrs	r3, r1
 800a396:	b29b      	uxth	r3, r3
 800a398:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	7a9b      	ldrb	r3, [r3, #10]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f040 80e8 	bne.w	800a574 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	785b      	ldrb	r3, [r3, #1]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d04c      	beq.n	800a446 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	889b      	ldrh	r3, [r3, #4]
 800a3b0:	085b      	lsrs	r3, r3, #1
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	0059      	lsls	r1, r3, #1
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	461a      	mov	r2, r3
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	4413      	add	r3, r2
 800a3c8:	005a      	lsls	r2, r3, #1
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3d2:	460a      	mov	r2, r1
 800a3d4:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	881b      	ldrh	r3, [r3, #0]
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d013      	beq.n	800a414 <USB_ActivateEndpoint+0x180>
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a3fe:	4013      	ands	r3, r2
 800a400:	b299      	uxth	r1, r3
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	441a      	add	r2, r3
 800a40c:	4b57      	ldr	r3, [pc, #348]	; (800a56c <USB_ActivateEndpoint+0x2d8>)
 800a40e:	430b      	orrs	r3, r1
 800a410:	b29b      	uxth	r3, r3
 800a412:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	b29b      	uxth	r3, r3
 800a422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a42a:	b29c      	uxth	r4, r3
 800a42c:	f084 0320 	eor.w	r3, r4, #32
 800a430:	b29c      	uxth	r4, r3
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	441a      	add	r2, r3
 800a43c:	4b4a      	ldr	r3, [pc, #296]	; (800a568 <USB_ActivateEndpoint+0x2d4>)
 800a43e:	4323      	orrs	r3, r4
 800a440:	b29b      	uxth	r3, r3
 800a442:	8013      	strh	r3, [r2, #0]
 800a444:	e1d9      	b.n	800a7fa <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	889b      	ldrh	r3, [r3, #4]
 800a44a:	085b      	lsrs	r3, r3, #1
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	0059      	lsls	r1, r3, #1
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a456:	b29b      	uxth	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	00db      	lsls	r3, r3, #3
 800a460:	4413      	add	r3, r2
 800a462:	3304      	adds	r3, #4
 800a464:	005a      	lsls	r2, r3, #1
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4413      	add	r3, r2
 800a46a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a46e:	460a      	mov	r2, r1
 800a470:	601a      	str	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a478:	b29b      	uxth	r3, r3
 800a47a:	461a      	mov	r2, r3
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	00db      	lsls	r3, r3, #3
 800a482:	4413      	add	r3, r2
 800a484:	3306      	adds	r3, #6
 800a486:	005a      	lsls	r2, r3, #1
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a490:	60bb      	str	r3, [r7, #8]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	2b3e      	cmp	r3, #62	; 0x3e
 800a498:	d918      	bls.n	800a4cc <USB_ActivateEndpoint+0x238>
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	095b      	lsrs	r3, r3, #5
 800a4a0:	81fb      	strh	r3, [r7, #14]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f003 031f 	and.w	r3, r3, #31
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d102      	bne.n	800a4b4 <USB_ActivateEndpoint+0x220>
 800a4ae:	89fb      	ldrh	r3, [r7, #14]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	81fb      	strh	r3, [r7, #14]
 800a4b4:	89fb      	ldrh	r3, [r7, #14]
 800a4b6:	029b      	lsls	r3, r3, #10
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	e012      	b.n	800a4f2 <USB_ActivateEndpoint+0x25e>
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	085b      	lsrs	r3, r3, #1
 800a4d2:	81fb      	strh	r3, [r7, #14]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <USB_ActivateEndpoint+0x252>
 800a4e0:	89fb      	ldrh	r3, [r7, #14]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	81fb      	strh	r3, [r7, #14]
 800a4e6:	89fb      	ldrh	r3, [r7, #14]
 800a4e8:	029b      	lsls	r3, r3, #10
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	881b      	ldrh	r3, [r3, #0]
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d013      	beq.n	800a530 <USB_ActivateEndpoint+0x29c>
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	b29a      	uxth	r2, r3
 800a516:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a51a:	4013      	ands	r3, r2
 800a51c:	b299      	uxth	r1, r3
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	441a      	add	r2, r3
 800a528:	4b11      	ldr	r3, [pc, #68]	; (800a570 <USB_ActivateEndpoint+0x2dc>)
 800a52a:	430b      	orrs	r3, r1
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a546:	b29c      	uxth	r4, r3
 800a548:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a54c:	b29c      	uxth	r4, r3
 800a54e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800a552:	b29c      	uxth	r4, r3
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	441a      	add	r2, r3
 800a55e:	4b02      	ldr	r3, [pc, #8]	; (800a568 <USB_ActivateEndpoint+0x2d4>)
 800a560:	4323      	orrs	r3, r4
 800a562:	b29b      	uxth	r3, r3
 800a564:	8013      	strh	r3, [r2, #0]
 800a566:	e148      	b.n	800a7fa <USB_ActivateEndpoint+0x566>
 800a568:	ffff8080 	.word	0xffff8080
 800a56c:	ffff80c0 	.word	0xffff80c0
 800a570:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	881b      	ldrh	r3, [r3, #0]
 800a580:	b29a      	uxth	r2, r3
 800a582:	f640 630f 	movw	r3, #3599	; 0xe0f
 800a586:	4013      	ands	r3, r2
 800a588:	b299      	uxth	r1, r3
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	441a      	add	r2, r3
 800a594:	4b9c      	ldr	r3, [pc, #624]	; (800a808 <USB_ActivateEndpoint+0x574>)
 800a596:	430b      	orrs	r3, r1
 800a598:	b29b      	uxth	r3, r3
 800a59a:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	88db      	ldrh	r3, [r3, #6]
 800a5a0:	085b      	lsrs	r3, r3, #1
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	0059      	lsls	r1, r3, #1
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	4413      	add	r3, r2
 800a5b8:	005a      	lsls	r2, r3, #1
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4413      	add	r3, r2
 800a5be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5c2:	460a      	mov	r2, r1
 800a5c4:	601a      	str	r2, [r3, #0]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	891b      	ldrh	r3, [r3, #8]
 800a5ca:	085b      	lsrs	r3, r3, #1
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	0059      	lsls	r1, r3, #1
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	461a      	mov	r2, r3
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	00db      	lsls	r3, r3, #3
 800a5e0:	4413      	add	r3, r2
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	005a      	lsls	r2, r3, #1
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5ee:	460a      	mov	r2, r1
 800a5f0:	601a      	str	r2, [r3, #0]
    
    if (ep->is_in==0)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f040 8083 	bne.w	800a702 <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	b29b      	uxth	r3, r3
 800a60a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d013      	beq.n	800a63a <USB_ActivateEndpoint+0x3a6>
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	881b      	ldrh	r3, [r3, #0]
 800a61e:	b29a      	uxth	r2, r3
 800a620:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a624:	4013      	ands	r3, r2
 800a626:	b299      	uxth	r1, r3
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	441a      	add	r2, r3
 800a632:	4b76      	ldr	r3, [pc, #472]	; (800a80c <USB_ActivateEndpoint+0x578>)
 800a634:	430b      	orrs	r3, r1
 800a636:	b29b      	uxth	r3, r3
 800a638:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	b29b      	uxth	r3, r3
 800a648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d013      	beq.n	800a678 <USB_ActivateEndpoint+0x3e4>
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a662:	4013      	ands	r3, r2
 800a664:	b299      	uxth	r1, r3
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	441a      	add	r2, r3
 800a670:	4b67      	ldr	r3, [pc, #412]	; (800a810 <USB_ActivateEndpoint+0x57c>)
 800a672:	430b      	orrs	r3, r1
 800a674:	b29b      	uxth	r3, r3
 800a676:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	881b      	ldrh	r3, [r3, #0]
 800a684:	b29a      	uxth	r2, r3
 800a686:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a68a:	4013      	ands	r3, r2
 800a68c:	b299      	uxth	r1, r3
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	441a      	add	r2, r3
 800a698:	4b5d      	ldr	r3, [pc, #372]	; (800a810 <USB_ActivateEndpoint+0x57c>)
 800a69a:	430b      	orrs	r3, r1
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6b6:	b29c      	uxth	r4, r3
 800a6b8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a6bc:	b29c      	uxth	r4, r3
 800a6be:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800a6c2:	b29c      	uxth	r4, r3
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	441a      	add	r2, r3
 800a6ce:	4b51      	ldr	r3, [pc, #324]	; (800a814 <USB_ActivateEndpoint+0x580>)
 800a6d0:	4323      	orrs	r3, r4
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4413      	add	r3, r2
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6ec:	b29c      	uxth	r4, r3
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	441a      	add	r2, r3
 800a6f8:	4b46      	ldr	r3, [pc, #280]	; (800a814 <USB_ActivateEndpoint+0x580>)
 800a6fa:	4323      	orrs	r3, r4
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	8013      	strh	r3, [r2, #0]
 800a700:	e07b      	b.n	800a7fa <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	b29b      	uxth	r3, r3
 800a710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a714:	2b00      	cmp	r3, #0
 800a716:	d013      	beq.n	800a740 <USB_ActivateEndpoint+0x4ac>
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	b29a      	uxth	r2, r3
 800a726:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a72a:	4013      	ands	r3, r2
 800a72c:	b299      	uxth	r1, r3
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	441a      	add	r2, r3
 800a738:	4b34      	ldr	r3, [pc, #208]	; (800a80c <USB_ActivateEndpoint+0x578>)
 800a73a:	430b      	orrs	r3, r1
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	4413      	add	r3, r2
 800a74a:	881b      	ldrh	r3, [r3, #0]
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	d013      	beq.n	800a77e <USB_ActivateEndpoint+0x4ea>
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4413      	add	r3, r2
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	b29a      	uxth	r2, r3
 800a764:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a768:	4013      	ands	r3, r2
 800a76a:	b299      	uxth	r1, r3
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	441a      	add	r2, r3
 800a776:	4b26      	ldr	r3, [pc, #152]	; (800a810 <USB_ActivateEndpoint+0x57c>)
 800a778:	430b      	orrs	r3, r1
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a790:	4013      	ands	r3, r2
 800a792:	b299      	uxth	r1, r3
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	441a      	add	r2, r3
 800a79e:	4b1b      	ldr	r3, [pc, #108]	; (800a80c <USB_ActivateEndpoint+0x578>)
 800a7a0:	430b      	orrs	r3, r1
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7bc:	b29c      	uxth	r4, r3
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	441a      	add	r2, r3
 800a7c8:	4b12      	ldr	r3, [pc, #72]	; (800a814 <USB_ActivateEndpoint+0x580>)
 800a7ca:	4323      	orrs	r3, r4
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7e6:	b29c      	uxth	r4, r3
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	441a      	add	r2, r3
 800a7f2:	4b08      	ldr	r3, [pc, #32]	; (800a814 <USB_ActivateEndpoint+0x580>)
 800a7f4:	4323      	orrs	r3, r4
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bc90      	pop	{r4, r7}
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	ffff8180 	.word	0xffff8180
 800a80c:	ffffc080 	.word	0xffffc080
 800a810:	ffff80c0 	.word	0xffff80c0
 800a814:	ffff8080 	.word	0xffff8080

0800a818 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a818:	b490      	push	{r4, r7}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	7a9b      	ldrb	r3, [r3, #10]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d16d      	bne.n	800a906 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	785b      	ldrb	r3, [r3, #1]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d034      	beq.n	800a89c <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a844:	2b00      	cmp	r3, #0
 800a846:	d013      	beq.n	800a870 <USB_DeactivateEndpoint+0x58>
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	b29a      	uxth	r2, r3
 800a856:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a85a:	4013      	ands	r3, r2
 800a85c:	b299      	uxth	r1, r3
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	441a      	add	r2, r3
 800a868:	4b68      	ldr	r3, [pc, #416]	; (800aa0c <USB_DeactivateEndpoint+0x1f4>)
 800a86a:	430b      	orrs	r3, r1
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	881b      	ldrh	r3, [r3, #0]
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a886:	b29c      	uxth	r4, r3
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	441a      	add	r2, r3
 800a892:	4b5f      	ldr	r3, [pc, #380]	; (800aa10 <USB_DeactivateEndpoint+0x1f8>)
 800a894:	4323      	orrs	r3, r4
 800a896:	b29b      	uxth	r3, r3
 800a898:	8013      	strh	r3, [r2, #0]
 800a89a:	e139      	b.n	800ab10 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d013      	beq.n	800a8da <USB_DeactivateEndpoint+0xc2>
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	b299      	uxth	r1, r3
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	441a      	add	r2, r3
 800a8d2:	4b50      	ldr	r3, [pc, #320]	; (800aa14 <USB_DeactivateEndpoint+0x1fc>)
 800a8d4:	430b      	orrs	r3, r1
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4413      	add	r3, r2
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f0:	b29c      	uxth	r4, r3
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	441a      	add	r2, r3
 800a8fc:	4b44      	ldr	r3, [pc, #272]	; (800aa10 <USB_DeactivateEndpoint+0x1f8>)
 800a8fe:	4323      	orrs	r3, r4
 800a900:	b29b      	uxth	r3, r3
 800a902:	8013      	strh	r3, [r2, #0]
 800a904:	e104      	b.n	800ab10 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	785b      	ldrb	r3, [r3, #1]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f040 8084 	bne.w	800aa18 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a922:	2b00      	cmp	r3, #0
 800a924:	d013      	beq.n	800a94e <USB_DeactivateEndpoint+0x136>
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	b29a      	uxth	r2, r3
 800a934:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a938:	4013      	ands	r3, r2
 800a93a:	b299      	uxth	r1, r3
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	441a      	add	r2, r3
 800a946:	4b33      	ldr	r3, [pc, #204]	; (800aa14 <USB_DeactivateEndpoint+0x1fc>)
 800a948:	430b      	orrs	r3, r1
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4413      	add	r3, r2
 800a958:	881b      	ldrh	r3, [r3, #0]
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a960:	2b00      	cmp	r3, #0
 800a962:	d013      	beq.n	800a98c <USB_DeactivateEndpoint+0x174>
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	b29a      	uxth	r2, r3
 800a972:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a976:	4013      	ands	r3, r2
 800a978:	b299      	uxth	r1, r3
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	441a      	add	r2, r3
 800a984:	4b21      	ldr	r3, [pc, #132]	; (800aa0c <USB_DeactivateEndpoint+0x1f4>)
 800a986:	430b      	orrs	r3, r1
 800a988:	b29b      	uxth	r3, r3
 800a98a:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	b29a      	uxth	r2, r3
 800a99a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a99e:	4013      	ands	r3, r2
 800a9a0:	b299      	uxth	r1, r3
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	441a      	add	r2, r3
 800a9ac:	4b17      	ldr	r3, [pc, #92]	; (800aa0c <USB_DeactivateEndpoint+0x1f4>)
 800a9ae:	430b      	orrs	r3, r1
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ca:	b29c      	uxth	r4, r3
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	441a      	add	r2, r3
 800a9d6:	4b0e      	ldr	r3, [pc, #56]	; (800aa10 <USB_DeactivateEndpoint+0x1f8>)
 800a9d8:	4323      	orrs	r3, r4
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4413      	add	r3, r2
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9f4:	b29c      	uxth	r4, r3
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	441a      	add	r2, r3
 800aa00:	4b03      	ldr	r3, [pc, #12]	; (800aa10 <USB_DeactivateEndpoint+0x1f8>)
 800aa02:	4323      	orrs	r3, r4
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	8013      	strh	r3, [r2, #0]
 800aa08:	e082      	b.n	800ab10 <USB_DeactivateEndpoint+0x2f8>
 800aa0a:	bf00      	nop
 800aa0c:	ffff80c0 	.word	0xffff80c0
 800aa10:	ffff8080 	.word	0xffff8080
 800aa14:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d013      	beq.n	800aa56 <USB_DeactivateEndpoint+0x23e>
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	f640 730f 	movw	r3, #3855	; 0xf0f
 800aa40:	4013      	ands	r3, r2
 800aa42:	b299      	uxth	r1, r3
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	441a      	add	r2, r3
 800aa4e:	4b33      	ldr	r3, [pc, #204]	; (800ab1c <USB_DeactivateEndpoint+0x304>)
 800aa50:	430b      	orrs	r3, r1
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d013      	beq.n	800aa94 <USB_DeactivateEndpoint+0x27c>
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4413      	add	r3, r2
 800aa76:	881b      	ldrh	r3, [r3, #0]
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800aa7e:	4013      	ands	r3, r2
 800aa80:	b299      	uxth	r1, r3
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	441a      	add	r2, r3
 800aa8c:	4b24      	ldr	r3, [pc, #144]	; (800ab20 <USB_DeactivateEndpoint+0x308>)
 800aa8e:	430b      	orrs	r3, r1
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	f640 730f 	movw	r3, #3855	; 0xf0f
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	b299      	uxth	r1, r3
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	441a      	add	r2, r3
 800aab4:	4b19      	ldr	r3, [pc, #100]	; (800ab1c <USB_DeactivateEndpoint+0x304>)
 800aab6:	430b      	orrs	r3, r1
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aad2:	b29c      	uxth	r4, r3
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	441a      	add	r2, r3
 800aade:	4b11      	ldr	r3, [pc, #68]	; (800ab24 <USB_DeactivateEndpoint+0x30c>)
 800aae0:	4323      	orrs	r3, r4
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aafc:	b29c      	uxth	r4, r3
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	441a      	add	r2, r3
 800ab08:	4b06      	ldr	r3, [pc, #24]	; (800ab24 <USB_DeactivateEndpoint+0x30c>)
 800ab0a:	4323      	orrs	r3, r4
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bc90      	pop	{r4, r7}
 800ab1a:	4770      	bx	lr
 800ab1c:	ffffc080 	.word	0xffffc080
 800ab20:	ffff80c0 	.word	0xffff80c0
 800ab24:	ffff8080 	.word	0xffff8080

0800ab28 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800ab28:	b590      	push	{r4, r7, lr}
 800ab2a:	b08d      	sub	sp, #52	; 0x34
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	785b      	ldrb	r3, [r3, #1]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	f040 8149 	bne.w	800add8 <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	699a      	ldr	r2, [r3, #24]
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d909      	bls.n	800ab66 <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	699a      	ldr	r2, [r3, #24]
 800ab5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5e:	1ad2      	subs	r2, r2, r3
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	619a      	str	r2, [r3, #24]
 800ab64:	e005      	b.n	800ab72 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	7a9b      	ldrb	r3, [r3, #10]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d11b      	bne.n	800abb2 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	6959      	ldr	r1, [r3, #20]
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	889a      	ldrh	r2, [r3, #4]
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fb7d 	bl	800b286 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	461a      	mov	r2, r3
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	4413      	add	r3, r2
 800ab9e:	3302      	adds	r3, #2
 800aba0:	005a      	lsls	r2, r3, #1
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4413      	add	r3, r2
 800aba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abaa:	461a      	mov	r2, r3
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	e0f6      	b.n	800ada0 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d059      	beq.n	800ac7c <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	785b      	ldrb	r3, [r3, #1]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d13b      	bne.n	800ac48 <USB_EPStartXfer+0x120>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	461a      	mov	r2, r3
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	4413      	add	r3, r2
 800abe2:	3306      	adds	r3, #6
 800abe4:	005a      	lsls	r2, r3, #1
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4413      	add	r3, r2
 800abea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abee:	60bb      	str	r3, [r7, #8]
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	2b3e      	cmp	r3, #62	; 0x3e
 800abf4:	d916      	bls.n	800ac24 <USB_EPStartXfer+0xfc>
 800abf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf8:	095b      	lsrs	r3, r3, #5
 800abfa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfe:	f003 031f 	and.w	r3, r3, #31
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d102      	bne.n	800ac0c <USB_EPStartXfer+0xe4>
 800ac06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ac0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac0e:	029b      	lsls	r3, r3, #10
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	601a      	str	r2, [r3, #0]
 800ac22:	e027      	b.n	800ac74 <USB_EPStartXfer+0x14c>
 800ac24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac26:	085b      	lsrs	r3, r3, #1
 800ac28:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <USB_EPStartXfer+0x112>
 800ac34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac36:	3301      	adds	r3, #1
 800ac38:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ac3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac3c:	029b      	lsls	r3, r3, #10
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	461a      	mov	r2, r3
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	e015      	b.n	800ac74 <USB_EPStartXfer+0x14c>
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	785b      	ldrb	r3, [r3, #1]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d111      	bne.n	800ac74 <USB_EPStartXfer+0x14c>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	461a      	mov	r2, r3
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	4413      	add	r3, r2
 800ac62:	3302      	adds	r3, #2
 800ac64:	005a      	lsls	r2, r3, #1
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac6e:	461a      	mov	r2, r3
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	891b      	ldrh	r3, [r3, #8]
 800ac78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ac7a:	e058      	b.n	800ad2e <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	785b      	ldrb	r3, [r3, #1]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d13b      	bne.n	800acfc <USB_EPStartXfer+0x1d4>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	4413      	add	r3, r2
 800ac96:	3302      	adds	r3, #2
 800ac98:	005a      	lsls	r2, r3, #1
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	2b3e      	cmp	r3, #62	; 0x3e
 800aca8:	d916      	bls.n	800acd8 <USB_EPStartXfer+0x1b0>
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	095b      	lsrs	r3, r3, #5
 800acae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	f003 031f 	and.w	r3, r3, #31
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d102      	bne.n	800acc0 <USB_EPStartXfer+0x198>
 800acba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acbc:	3b01      	subs	r3, #1
 800acbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800acc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acc2:	029b      	lsls	r3, r3, #10
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acce:	b29b      	uxth	r3, r3
 800acd0:	461a      	mov	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	601a      	str	r2, [r3, #0]
 800acd6:	e027      	b.n	800ad28 <USB_EPStartXfer+0x200>
 800acd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acda:	085b      	lsrs	r3, r3, #1
 800acdc:	84bb      	strh	r3, [r7, #36]	; 0x24
 800acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace0:	f003 0301 	and.w	r3, r3, #1
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <USB_EPStartXfer+0x1c6>
 800ace8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acea:	3301      	adds	r3, #1
 800acec:	84bb      	strh	r3, [r7, #36]	; 0x24
 800acee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acf0:	029b      	lsls	r3, r3, #10
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	461a      	mov	r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	e015      	b.n	800ad28 <USB_EPStartXfer+0x200>
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	785b      	ldrb	r3, [r3, #1]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d111      	bne.n	800ad28 <USB_EPStartXfer+0x200>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	4413      	add	r3, r2
 800ad16:	3302      	adds	r3, #2
 800ad18:	005a      	lsls	r2, r3, #1
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad22:	461a      	mov	r2, r3
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	88db      	ldrh	r3, [r3, #6]
 800ad2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	6959      	ldr	r1, [r3, #20]
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 faa4 	bl	800b286 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	785b      	ldrb	r3, [r3, #1]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d114      	bne.n	800ad70 <USB_EPStartXfer+0x248>
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4413      	add	r3, r2
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	f640 730f 	movw	r3, #3855	; 0xf0f
 800ad58:	4013      	ands	r3, r2
 800ad5a:	b299      	uxth	r1, r3
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	441a      	add	r2, r3
 800ad66:	4b92      	ldr	r3, [pc, #584]	; (800afb0 <USB_EPStartXfer+0x488>)
 800ad68:	430b      	orrs	r3, r1
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	8013      	strh	r3, [r2, #0]
 800ad6e:	e017      	b.n	800ada0 <USB_EPStartXfer+0x278>
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	785b      	ldrb	r3, [r3, #1]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d113      	bne.n	800ada0 <USB_EPStartXfer+0x278>
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	f640 730f 	movw	r3, #3855	; 0xf0f
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	b299      	uxth	r1, r3
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	441a      	add	r2, r3
 800ad98:	4b86      	ldr	r3, [pc, #536]	; (800afb4 <USB_EPStartXfer+0x48c>)
 800ad9a:	430b      	orrs	r3, r1
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	b29b      	uxth	r3, r3
 800adae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adb6:	b29c      	uxth	r4, r3
 800adb8:	f084 0310 	eor.w	r3, r4, #16
 800adbc:	b29c      	uxth	r4, r3
 800adbe:	f084 0320 	eor.w	r3, r4, #32
 800adc2:	b29c      	uxth	r4, r3
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	441a      	add	r2, r3
 800adce:	4b7a      	ldr	r3, [pc, #488]	; (800afb8 <USB_EPStartXfer+0x490>)
 800add0:	4323      	orrs	r3, r4
 800add2:	b29b      	uxth	r3, r3
 800add4:	8013      	strh	r3, [r2, #0]
 800add6:	e122      	b.n	800b01e <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	699a      	ldr	r2, [r3, #24]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d909      	bls.n	800adf8 <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	699a      	ldr	r2, [r3, #24]
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	1ad2      	subs	r2, r2, r3
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	619a      	str	r2, [r3, #24]
 800adf6:	e005      	b.n	800ae04 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2200      	movs	r2, #0
 800ae02:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	7a9b      	ldrb	r3, [r3, #10]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d13b      	bne.n	800ae84 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	461a      	mov	r2, r3
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	4413      	add	r3, r2
 800ae1e:	3306      	adds	r3, #6
 800ae20:	005a      	lsls	r2, r3, #1
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4413      	add	r3, r2
 800ae26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae2a:	613b      	str	r3, [r7, #16]
 800ae2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2e:	2b3e      	cmp	r3, #62	; 0x3e
 800ae30:	d916      	bls.n	800ae60 <USB_EPStartXfer+0x338>
 800ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae34:	095b      	lsrs	r3, r3, #5
 800ae36:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3a:	f003 031f 	and.w	r3, r3, #31
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d102      	bne.n	800ae48 <USB_EPStartXfer+0x320>
 800ae42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae44:	3b01      	subs	r3, #1
 800ae46:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae4a:	029b      	lsls	r3, r3, #10
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	461a      	mov	r2, r3
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	e0c3      	b.n	800afe8 <USB_EPStartXfer+0x4c0>
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	085b      	lsrs	r3, r3, #1
 800ae64:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <USB_EPStartXfer+0x34e>
 800ae70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae72:	3301      	adds	r3, #1
 800ae74:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae78:	029b      	lsls	r3, r3, #10
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	601a      	str	r2, [r3, #0]
 800ae82:	e0b1      	b.n	800afe8 <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	785b      	ldrb	r3, [r3, #1]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d13b      	bne.n	800af04 <USB_EPStartXfer+0x3dc>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	461a      	mov	r2, r3
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	00db      	lsls	r3, r3, #3
 800ae9c:	4413      	add	r3, r2
 800ae9e:	3302      	adds	r3, #2
 800aea0:	005a      	lsls	r2, r3, #1
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aeaa:	61bb      	str	r3, [r7, #24]
 800aeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeae:	2b3e      	cmp	r3, #62	; 0x3e
 800aeb0:	d916      	bls.n	800aee0 <USB_EPStartXfer+0x3b8>
 800aeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb4:	095b      	lsrs	r3, r3, #5
 800aeb6:	843b      	strh	r3, [r7, #32]
 800aeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeba:	f003 031f 	and.w	r3, r3, #31
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <USB_EPStartXfer+0x3a0>
 800aec2:	8c3b      	ldrh	r3, [r7, #32]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	843b      	strh	r3, [r7, #32]
 800aec8:	8c3b      	ldrh	r3, [r7, #32]
 800aeca:	029b      	lsls	r3, r3, #10
 800aecc:	b29b      	uxth	r3, r3
 800aece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	461a      	mov	r2, r3
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	601a      	str	r2, [r3, #0]
 800aede:	e027      	b.n	800af30 <USB_EPStartXfer+0x408>
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	085b      	lsrs	r3, r3, #1
 800aee4:	843b      	strh	r3, [r7, #32]
 800aee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <USB_EPStartXfer+0x3ce>
 800aef0:	8c3b      	ldrh	r3, [r7, #32]
 800aef2:	3301      	adds	r3, #1
 800aef4:	843b      	strh	r3, [r7, #32]
 800aef6:	8c3b      	ldrh	r3, [r7, #32]
 800aef8:	029b      	lsls	r3, r3, #10
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	461a      	mov	r2, r3
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	601a      	str	r2, [r3, #0]
 800af02:	e015      	b.n	800af30 <USB_EPStartXfer+0x408>
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	785b      	ldrb	r3, [r3, #1]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d111      	bne.n	800af30 <USB_EPStartXfer+0x408>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af12:	b29b      	uxth	r3, r3
 800af14:	461a      	mov	r2, r3
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	4413      	add	r3, r2
 800af1e:	3302      	adds	r3, #2
 800af20:	005a      	lsls	r2, r3, #1
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4413      	add	r3, r2
 800af26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af2a:	461a      	mov	r2, r3
 800af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	785b      	ldrb	r3, [r3, #1]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d141      	bne.n	800afbc <USB_EPStartXfer+0x494>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af3e:	b29b      	uxth	r3, r3
 800af40:	461a      	mov	r2, r3
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	00db      	lsls	r3, r3, #3
 800af48:	4413      	add	r3, r2
 800af4a:	3306      	adds	r3, #6
 800af4c:	005a      	lsls	r2, r3, #1
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4413      	add	r3, r2
 800af52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af56:	617b      	str	r3, [r7, #20]
 800af58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5a:	2b3e      	cmp	r3, #62	; 0x3e
 800af5c:	d916      	bls.n	800af8c <USB_EPStartXfer+0x464>
 800af5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af60:	095b      	lsrs	r3, r3, #5
 800af62:	83fb      	strh	r3, [r7, #30]
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	f003 031f 	and.w	r3, r3, #31
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d102      	bne.n	800af74 <USB_EPStartXfer+0x44c>
 800af6e:	8bfb      	ldrh	r3, [r7, #30]
 800af70:	3b01      	subs	r3, #1
 800af72:	83fb      	strh	r3, [r7, #30]
 800af74:	8bfb      	ldrh	r3, [r7, #30]
 800af76:	029b      	lsls	r3, r3, #10
 800af78:	b29b      	uxth	r3, r3
 800af7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af82:	b29b      	uxth	r3, r3
 800af84:	461a      	mov	r2, r3
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	e02d      	b.n	800afe8 <USB_EPStartXfer+0x4c0>
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	085b      	lsrs	r3, r3, #1
 800af90:	83fb      	strh	r3, [r7, #30]
 800af92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <USB_EPStartXfer+0x47a>
 800af9c:	8bfb      	ldrh	r3, [r7, #30]
 800af9e:	3301      	adds	r3, #1
 800afa0:	83fb      	strh	r3, [r7, #30]
 800afa2:	8bfb      	ldrh	r3, [r7, #30]
 800afa4:	029b      	lsls	r3, r3, #10
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	461a      	mov	r2, r3
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	e01b      	b.n	800afe8 <USB_EPStartXfer+0x4c0>
 800afb0:	ffff80c0 	.word	0xffff80c0
 800afb4:	ffffc080 	.word	0xffffc080
 800afb8:	ffff8080 	.word	0xffff8080
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	785b      	ldrb	r3, [r3, #1]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d111      	bne.n	800afe8 <USB_EPStartXfer+0x4c0>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afca:	b29b      	uxth	r3, r3
 800afcc:	461a      	mov	r2, r3
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	4413      	add	r3, r2
 800afd6:	3302      	adds	r3, #2
 800afd8:	005a      	lsls	r2, r3, #1
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afe2:	461a      	mov	r2, r3
 800afe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe6:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800affa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800affe:	b29c      	uxth	r4, r3
 800b000:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800b004:	b29c      	uxth	r4, r3
 800b006:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800b00a:	b29c      	uxth	r4, r3
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	441a      	add	r2, r3
 800b016:	4b04      	ldr	r3, [pc, #16]	; (800b028 <USB_EPStartXfer+0x500>)
 800b018:	4323      	orrs	r3, r4
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3734      	adds	r7, #52	; 0x34
 800b024:	46bd      	mov	sp, r7
 800b026:	bd90      	pop	{r4, r7, pc}
 800b028:	ffff8080 	.word	0xffff8080

0800b02c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800b02c:	b490      	push	{r4, r7}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d118      	bne.n	800b070 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800b050:	401c      	ands	r4, r3
 800b052:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800b056:	f084 0410 	eor.w	r4, r4, #16
 800b05a:	b2a1      	uxth	r1, r4
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	441a      	add	r2, r3
 800b066:	4b20      	ldr	r3, [pc, #128]	; (800b0e8 <USB_EPSetStall+0xbc>)
 800b068:	430b      	orrs	r3, r1
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	8013      	strh	r3, [r2, #0]
 800b06e:	e034      	b.n	800b0da <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	785b      	ldrb	r3, [r3, #1]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d018      	beq.n	800b0aa <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	881b      	ldrh	r3, [r3, #0]
 800b084:	b29b      	uxth	r3, r3
 800b086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b08a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b08e:	b29c      	uxth	r4, r3
 800b090:	f084 0310 	eor.w	r3, r4, #16
 800b094:	b29c      	uxth	r4, r3
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	441a      	add	r2, r3
 800b0a0:	4b11      	ldr	r3, [pc, #68]	; (800b0e8 <USB_EPSetStall+0xbc>)
 800b0a2:	4323      	orrs	r3, r4
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	8013      	strh	r3, [r2, #0]
 800b0a8:	e017      	b.n	800b0da <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c0:	b29c      	uxth	r4, r3
 800b0c2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800b0c6:	b29c      	uxth	r4, r3
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	441a      	add	r2, r3
 800b0d2:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <USB_EPSetStall+0xbc>)
 800b0d4:	4323      	orrs	r3, r4
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bc90      	pop	{r4, r7}
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	ffff8080 	.word	0xffff8080

0800b0ec <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0ec:	b490      	push	{r4, r7}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	785b      	ldrb	r3, [r3, #1]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d03a      	beq.n	800b174 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b110:	2b00      	cmp	r3, #0
 800b112:	d013      	beq.n	800b13c <USB_EPClearStall+0x50>
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4413      	add	r3, r2
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	b29a      	uxth	r2, r3
 800b122:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b126:	4013      	ands	r3, r2
 800b128:	b299      	uxth	r1, r3
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	441a      	add	r2, r3
 800b134:	4b2f      	ldr	r3, [pc, #188]	; (800b1f4 <USB_EPClearStall+0x108>)
 800b136:	430b      	orrs	r3, r1
 800b138:	b29b      	uxth	r3, r3
 800b13a:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4413      	add	r3, r2
 800b146:	881b      	ldrh	r3, [r3, #0]
 800b148:	b29b      	uxth	r3, r3
 800b14a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b14e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b152:	b29c      	uxth	r4, r3
 800b154:	f084 0310 	eor.w	r3, r4, #16
 800b158:	b29c      	uxth	r4, r3
 800b15a:	f084 0320 	eor.w	r3, r4, #32
 800b15e:	b29c      	uxth	r4, r3
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	441a      	add	r2, r3
 800b16a:	4b23      	ldr	r3, [pc, #140]	; (800b1f8 <USB_EPClearStall+0x10c>)
 800b16c:	4323      	orrs	r3, r4
 800b16e:	b29b      	uxth	r3, r3
 800b170:	8013      	strh	r3, [r2, #0]
 800b172:	e039      	b.n	800b1e8 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	881b      	ldrh	r3, [r3, #0]
 800b180:	b29b      	uxth	r3, r3
 800b182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b186:	2b00      	cmp	r3, #0
 800b188:	d013      	beq.n	800b1b2 <USB_EPClearStall+0xc6>
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	4413      	add	r3, r2
 800b194:	881b      	ldrh	r3, [r3, #0]
 800b196:	b29a      	uxth	r2, r3
 800b198:	f640 730f 	movw	r3, #3855	; 0xf0f
 800b19c:	4013      	ands	r3, r2
 800b19e:	b299      	uxth	r1, r3
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	441a      	add	r2, r3
 800b1aa:	4b14      	ldr	r3, [pc, #80]	; (800b1fc <USB_EPClearStall+0x110>)
 800b1ac:	430b      	orrs	r3, r1
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c8:	b29c      	uxth	r4, r3
 800b1ca:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800b1ce:	b29c      	uxth	r4, r3
 800b1d0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800b1d4:	b29c      	uxth	r4, r3
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	441a      	add	r2, r3
 800b1e0:	4b05      	ldr	r3, [pc, #20]	; (800b1f8 <USB_EPClearStall+0x10c>)
 800b1e2:	4323      	orrs	r3, r4
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bc90      	pop	{r4, r7}
 800b1f2:	4770      	bx	lr
 800b1f4:	ffff80c0 	.word	0xffff80c0
 800b1f8:	ffff8080 	.word	0xffff8080
 800b1fc:	ffffc080 	.word	0xffffc080

0800b200 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 800b20c:	78fb      	ldrb	r3, [r7, #3]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d103      	bne.n	800b21a <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2280      	movs	r2, #128	; 0x80
 800b216:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	bc80      	pop	{r7}
 800b224:	4770      	bx	lr

0800b226 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 800b226:	b480      	push	{r7}
 800b228:	b083      	sub	sp, #12
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	bc80      	pop	{r7}
 800b238:	4770      	bx	lr

0800b23a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 800b23a:	b480      	push	{r7}
 800b23c:	b083      	sub	sp, #12
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	bc80      	pop	{r7}
 800b24c:	4770      	bx	lr

0800b24e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 800b24e:	b480      	push	{r7}
 800b250:	b085      	sub	sp, #20
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b256:	2300      	movs	r3, #0
 800b258:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b260:	b29b      	uxth	r3, r3
 800b262:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b264:	68fb      	ldr	r3, [r7, #12]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bc80      	pop	{r7}
 800b26e:	4770      	bx	lr

0800b270 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	bc80      	pop	{r7}
 800b284:	4770      	bx	lr

0800b286 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b286:	b480      	push	{r7}
 800b288:	b08b      	sub	sp, #44	; 0x2c
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	60f8      	str	r0, [r7, #12]
 800b28e:	60b9      	str	r1, [r7, #8]
 800b290:	4611      	mov	r1, r2
 800b292:	461a      	mov	r2, r3
 800b294:	460b      	mov	r3, r1
 800b296:	80fb      	strh	r3, [r7, #6]
 800b298:	4613      	mov	r3, r2
 800b29a:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800b29c:	88bb      	ldrh	r3, [r7, #4]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	105b      	asrs	r3, r3, #1
 800b2a2:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	627b      	str	r3, [r7, #36]	; 0x24
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	61bb      	str	r3, [r7, #24]
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800b2b4:	88fb      	ldrh	r3, [r7, #6]
 800b2b6:	005b      	lsls	r3, r3, #1
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	4413      	add	r3, r2
 800b2be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2c2:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b2c8:	e01b      	b.n	800b302 <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	021b      	lsls	r3, r3, #8
 800b2dc:	461a      	mov	r2, r3
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 800b2e4:	6a3b      	ldr	r3, [r7, #32]
 800b2e6:	1c9a      	adds	r2, r3, #2
 800b2e8:	623a      	str	r2, [r7, #32]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	b292      	uxth	r2, r2
 800b2ee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	3302      	adds	r3, #2
 800b2f4:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	3b01      	subs	r3, #1
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
 800b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e0      	bne.n	800b2ca <USB_WritePMA+0x44>
  }
}
 800b308:	bf00      	nop
 800b30a:	372c      	adds	r7, #44	; 0x2c
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bc80      	pop	{r7}
 800b310:	4770      	bx	lr

0800b312 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b312:	b480      	push	{r7}
 800b314:	b089      	sub	sp, #36	; 0x24
 800b316:	af00      	add	r7, sp, #0
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	4611      	mov	r1, r2
 800b31e:	461a      	mov	r2, r3
 800b320:	460b      	mov	r3, r1
 800b322:	80fb      	strh	r3, [r7, #6]
 800b324:	4613      	mov	r3, r2
 800b326:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800b328:	88bb      	ldrh	r3, [r7, #4]
 800b32a:	3301      	adds	r3, #1
 800b32c:	105b      	asrs	r3, r3, #1
 800b32e:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 800b334:	2300      	movs	r3, #0
 800b336:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800b338:	88fb      	ldrh	r3, [r7, #6]
 800b33a:	005b      	lsls	r3, r3, #1
 800b33c:	461a      	mov	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	4413      	add	r3, r2
 800b342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b346:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	61fb      	str	r3, [r7, #28]
 800b34c:	e00e      	b.n	800b36c <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	1d1a      	adds	r2, r3, #4
 800b352:	61ba      	str	r2, [r7, #24]
 800b354:	6819      	ldr	r1, [r3, #0]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	60ba      	str	r2, [r7, #8]
 800b35c:	b28a      	uxth	r2, r1
 800b35e:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	3301      	adds	r3, #1
 800b364:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	3b01      	subs	r3, #1
 800b36a:	61fb      	str	r3, [r7, #28]
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1ed      	bne.n	800b34e <USB_ReadPMA+0x3c>
  }
}
 800b372:	bf00      	nop
 800b374:	3724      	adds	r7, #36	; 0x24
 800b376:	46bd      	mov	sp, r7
 800b378:	bc80      	pop	{r7}
 800b37a:	4770      	bx	lr

0800b37c <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800b388:	2300      	movs	r3, #0
 800b38a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	7c1b      	ldrb	r3, [r3, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10e      	bne.n	800b3b2 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800b394:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b398:	2202      	movs	r2, #2
 800b39a:	2181      	movs	r1, #129	; 0x81
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f001 fd40 	bl	800ce22 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800b3a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f001 fd39 	bl	800ce22 <USBD_LL_OpenEP>
 800b3b0:	e00b      	b.n	800b3ca <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800b3b2:	2340      	movs	r3, #64	; 0x40
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	2181      	movs	r1, #129	; 0x81
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f001 fd32 	bl	800ce22 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800b3be:	2340      	movs	r3, #64	; 0x40
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f001 fd2c 	bl	800ce22 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800b3ca:	2308      	movs	r3, #8
 800b3cc:	2203      	movs	r2, #3
 800b3ce:	2182      	movs	r1, #130	; 0x82
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f001 fd26 	bl	800ce22 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b3d6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b3da:	f001 fe43 	bl	800d064 <USBD_static_malloc>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d102      	bne.n	800b3f6 <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	73fb      	strb	r3, [r7, #15]
 800b3f4:	e026      	b.n	800b444 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b3fc:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	2200      	movs	r2, #0
 800b414:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	7c1b      	ldrb	r3, [r3, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d109      	bne.n	800b434 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b42a:	2101      	movs	r1, #1
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f001 fde2 	bl	800cff6 <USBD_LL_PrepareReceive>
 800b432:	e007      	b.n	800b444 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b43a:	2340      	movs	r3, #64	; 0x40
 800b43c:	2101      	movs	r1, #1
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f001 fdd9 	bl	800cff6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	460b      	mov	r3, r1
 800b458:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800b45e:	2181      	movs	r1, #129	; 0x81
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f001 fd04 	bl	800ce6e <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800b466:	2101      	movs	r1, #1
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f001 fd00 	bl	800ce6e <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800b46e:	2182      	movs	r1, #130	; 0x82
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f001 fcfc 	bl	800ce6e <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00e      	beq.n	800b49e <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b490:	4618      	mov	r0, r3
 800b492:	f001 fdf3 	bl	800d07c <USBD_static_free>
    pdev->pClassData = NULL;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b4b8:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d03a      	beq.n	800b53c <USBD_CDC_Setup+0x94>
 800b4c6:	2b20      	cmp	r3, #32
 800b4c8:	d000      	beq.n	800b4cc <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800b4ca:	e043      	b.n	800b554 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	88db      	ldrh	r3, [r3, #6]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d029      	beq.n	800b528 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	b25b      	sxtb	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	da11      	bge.n	800b502 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b4ea:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4ec:	683a      	ldr	r2, [r7, #0]
 800b4ee:	88d2      	ldrh	r2, [r2, #6]
 800b4f0:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 800b4f2:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	88db      	ldrh	r3, [r3, #6]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f001 f80e 	bl	800c51c <USBD_CtlSendData>
    break;
 800b500:	e029      	b.n	800b556 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	785a      	ldrb	r2, [r3, #1]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	88db      	ldrh	r3, [r3, #6]
 800b510:	b2da      	uxtb	r2, r3
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 800b518:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	88db      	ldrh	r3, [r3, #6]
 800b51e:	461a      	mov	r2, r3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f001 f829 	bl	800c578 <USBD_CtlPrepareRx>
    break;
 800b526:	e016      	b.n	800b556 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	7850      	ldrb	r0, [r2, #1]
 800b534:	2200      	movs	r2, #0
 800b536:	6839      	ldr	r1, [r7, #0]
 800b538:	4798      	blx	r3
    break;
 800b53a:	e00c      	b.n	800b556 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	785b      	ldrb	r3, [r3, #1]
 800b540:	2b0a      	cmp	r3, #10
 800b542:	d001      	beq.n	800b548 <USBD_CDC_Setup+0xa0>
 800b544:	2b0b      	cmp	r3, #11
      break;
 800b546:	e005      	b.n	800b554 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 800b548:	2201      	movs	r2, #1
 800b54a:	4905      	ldr	r1, [pc, #20]	; (800b560 <USBD_CDC_Setup+0xb8>)
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 ffe5 	bl	800c51c <USBD_CtlSendData>
      break;
 800b552:	bf00      	nop
    break;
 800b554:	bf00      	nop
  }
  return USBD_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	20000b4c 	.word	0x20000b4c

0800b564 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b576:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d005      	beq.n	800b58e <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	e000      	b.n	800b590 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800b58e:	2302      	movs	r3, #2
  }
}
 800b590:	4618      	mov	r0, r3
 800b592:	3714      	adds	r7, #20
 800b594:	46bd      	mov	sp, r7
 800b596:	bc80      	pop	{r7}
 800b598:	4770      	bx	lr

0800b59a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b5ac:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b5ae:	78fb      	ldrb	r3, [r7, #3]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 fd42 	bl	800d03c <USBD_LL_GetRxDataSize>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00d      	beq.n	800b5e6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b5de:	4611      	mov	r1, r2
 800b5e0:	4798      	blx	r3

    return USBD_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e000      	b.n	800b5e8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b5e6:	2302      	movs	r3, #2
  }
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b5fe:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d015      	beq.n	800b636 <USBD_CDC_EP0_RxReady+0x46>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b610:	2bff      	cmp	r3, #255	; 0xff
 800b612:	d010      	beq.n	800b636 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b622:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b62a:	b292      	uxth	r2, r2
 800b62c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	22ff      	movs	r2, #255	; 0xff
 800b632:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2243      	movs	r2, #67	; 0x43
 800b64c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b64e:	4b03      	ldr	r3, [pc, #12]	; (800b65c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b650:	4618      	mov	r0, r3
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	bc80      	pop	{r7}
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	200000b4 	.word	0x200000b4

0800b660 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2243      	movs	r2, #67	; 0x43
 800b66c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b66e:	4b03      	ldr	r3, [pc, #12]	; (800b67c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	bc80      	pop	{r7}
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	20000070 	.word	0x20000070

0800b680 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2243      	movs	r2, #67	; 0x43
 800b68c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b68e:	4b03      	ldr	r3, [pc, #12]	; (800b69c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	bc80      	pop	{r7}
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	200000f8 	.word	0x200000f8

0800b6a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	220a      	movs	r2, #10
 800b6ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b6ae:	4b03      	ldr	r3, [pc, #12]	; (800b6bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bc80      	pop	{r7}
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	2000002c 	.word	0x2000002c

0800b6c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d005      	beq.n	800b6e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 800b6dc:	2300      	movs	r3, #0
 800b6de:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bc80      	pop	{r7}
 800b6ea:	4770      	bx	lr

0800b6ec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b700:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800b70a:	88fa      	ldrh	r2, [r7, #6]
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	371c      	adds	r7, #28
 800b718:	46bd      	mov	sp, r7
 800b71a:	bc80      	pop	{r7}
 800b71c:	4770      	bx	lr

0800b71e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800b71e:	b480      	push	{r7}
 800b720:	b085      	sub	sp, #20
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b72e:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	bc80      	pop	{r7}
 800b742:	4770      	bx	lr

0800b744 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b752:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d017      	beq.n	800b78e <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b764:	2b00      	cmp	r3, #0
 800b766:	d110      	bne.n	800b78a <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	2181      	movs	r1, #129	; 0x81
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f001 fc15 	bl	800cfb0 <USBD_LL_Transmit>
      
      return USBD_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	e002      	b.n	800b790 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e000      	b.n	800b790 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 800b78e:	2302      	movs	r3, #2
  }
}
 800b790:	4618      	mov	r0, r3
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b7a6:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d017      	beq.n	800b7e2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	7c1b      	ldrb	r3, [r3, #16]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d109      	bne.n	800b7ce <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f001 fc15 	bl	800cff6 <USBD_LL_PrepareReceive>
 800b7cc:	e007      	b.n	800b7de <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7d4:	2340      	movs	r3, #64	; 0x40
 800b7d6:	2101      	movs	r1, #1
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f001 fc0c 	bl	800cff6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e000      	b.n	800b7e4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b7e2:	2302      	movs	r3, #2
  }
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d101      	bne.n	800b804 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800b800:	2302      	movs	r3, #2
 800b802:	e01a      	b.n	800b83a <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d003      	beq.n	800b816 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2200      	movs	r2, #0
 800b812:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	79fa      	ldrb	r2, [r7, #7]
 800b830:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f001 fa80 	bl	800cd38 <USBD_LL_Init>
  
  return USBD_OK; 
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b842:	b480      	push	{r7}
 800b844:	b085      	sub	sp, #20
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d006      	beq.n	800b864 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	683a      	ldr	r2, [r7, #0]
 800b85a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	73fb      	strb	r3, [r7, #15]
 800b862:	e001      	b.n	800b868 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800b864:	2302      	movs	r3, #2
 800b866:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800b868:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	bc80      	pop	{r7}
 800b872:	4770      	bx	lr

0800b874 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f001 fab5 	bl	800cdec <USBD_LL_Start>
  
  return USBD_OK;  
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bc80      	pop	{r7}
 800b89e:	4770      	bx	lr

0800b8a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00c      	beq.n	800b8d4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	78fa      	ldrb	r2, [r7, #3]
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	4798      	blx	r3
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d101      	bne.n	800b8d4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b082      	sub	sp, #8
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	78fa      	ldrb	r2, [r7, #3]
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	4798      	blx	r3
  return USBD_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	4618      	mov	r0, r3
 800b918:	f000 fd59 	bl	800c3ce <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800b92a:	461a      	mov	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800b938:	f003 031f 	and.w	r3, r3, #31
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d00b      	beq.n	800b958 <USBD_LL_SetupStage+0x54>
 800b940:	2b02      	cmp	r3, #2
 800b942:	d011      	beq.n	800b968 <USBD_LL_SetupStage+0x64>
 800b944:	2b00      	cmp	r3, #0
 800b946:	d117      	bne.n	800b978 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f987 	bl	800bc64 <USBD_StdDevReq>
    break;
 800b956:	e01a      	b.n	800b98e <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 f9cf 	bl	800bd04 <USBD_StdItfReq>
    break;
 800b966:	e012      	b.n	800b98e <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b96e:	4619      	mov	r1, r3
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f9fa 	bl	800bd6a <USBD_StdEPReq>
    break;
 800b976:	e00a      	b.n	800b98e <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800b97e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b982:	b2db      	uxtb	r3, r3
 800b984:	4619      	mov	r1, r3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f001 fa90 	bl	800ceac <USBD_LL_StallEP>
    break;
 800b98c:	bf00      	nop
  }  
  return USBD_OK;  
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	607a      	str	r2, [r7, #4]
 800b9a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800b9a6:	7afb      	ldrb	r3, [r7, #11]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d138      	bne.n	800ba1e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800b9b2:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800b9ba:	2b03      	cmp	r3, #3
 800b9bc:	d142      	bne.n	800ba44 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	689a      	ldr	r2, [r3, #8]
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d914      	bls.n	800b9f4 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	689a      	ldr	r2, [r3, #8]
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	1ad2      	subs	r2, r2, r3
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	68da      	ldr	r2, [r3, #12]
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	bf28      	it	cs
 800b9e4:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	6879      	ldr	r1, [r7, #4]
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 fde1 	bl	800c5b4 <USBD_CtlContinueRx>
 800b9f2:	e027      	b.n	800ba44 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00a      	beq.n	800ba16 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ba06:	2b03      	cmp	r3, #3
 800ba08:	d105      	bne.n	800ba16 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f000 fdde 	bl	800c5d8 <USBD_CtlSendStatus>
 800ba1c:	e012      	b.n	800ba44 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00c      	beq.n	800ba44 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d107      	bne.n	800ba44 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba3a:	699b      	ldr	r3, [r3, #24]
 800ba3c:	7afa      	ldrb	r2, [r7, #11]
 800ba3e:	4611      	mov	r1, r2
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	4798      	blx	r3
  }  
  return USBD_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b086      	sub	sp, #24
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	60f8      	str	r0, [r7, #12]
 800ba56:	460b      	mov	r3, r1
 800ba58:	607a      	str	r2, [r7, #4]
 800ba5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800ba5c:	7afb      	ldrb	r3, [r7, #11]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d16c      	bne.n	800bb3c <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3314      	adds	r3, #20
 800ba66:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d157      	bne.n	800bb22 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	689a      	ldr	r2, [r3, #8]
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d915      	bls.n	800baaa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	689a      	ldr	r2, [r3, #8]
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	1ad2      	subs	r2, r2, r3
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	461a      	mov	r2, r3
 800ba94:	6879      	ldr	r1, [r7, #4]
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f000 fd5c 	bl	800c554 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	2200      	movs	r2, #0
 800baa0:	2100      	movs	r1, #0
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f001 faa7 	bl	800cff6 <USBD_LL_PrepareReceive>
 800baa8:	e03b      	b.n	800bb22 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	68d2      	ldr	r2, [r2, #12]
 800bab2:	fbb3 f1f2 	udiv	r1, r3, r2
 800bab6:	fb02 f201 	mul.w	r2, r2, r1
 800baba:	1a9b      	subs	r3, r3, r2
 800babc:	2b00      	cmp	r3, #0
 800babe:	d11c      	bne.n	800bafa <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800bac8:	429a      	cmp	r2, r3
 800baca:	d316      	bcc.n	800bafa <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d20f      	bcs.n	800bafa <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800bada:	2200      	movs	r2, #0
 800badc:	2100      	movs	r1, #0
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f000 fd38 	bl	800c554 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800baec:	2300      	movs	r3, #0
 800baee:	2200      	movs	r2, #0
 800baf0:	2100      	movs	r1, #0
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f001 fa7f 	bl	800cff6 <USBD_LL_PrepareReceive>
 800baf8:	e013      	b.n	800bb22 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00a      	beq.n	800bb1c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800bb0c:	2b03      	cmp	r3, #3
 800bb0e:	d105      	bne.n	800bb1c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f000 fd6e 	bl	800c5fe <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d11a      	bne.n	800bb62 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f7ff fead 	bl	800b88c <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800bb3a:	e012      	b.n	800bb62 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00c      	beq.n	800bb62 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800bb4e:	2b03      	cmp	r3, #3
 800bb50:	d107      	bne.n	800bb62 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	7afa      	ldrb	r2, [r7, #11]
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	4798      	blx	r3
  }  
  return USBD_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3718      	adds	r7, #24
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800bb74:	2340      	movs	r3, #64	; 0x40
 800bb76:	2200      	movs	r2, #0
 800bb78:	2100      	movs	r1, #0
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f001 f951 	bl	800ce22 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2240      	movs	r2, #64	; 0x40
 800bb84:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800bb88:	2340      	movs	r3, #64	; 0x40
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	2180      	movs	r1, #128	; 0x80
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f001 f947 	bl	800ce22 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2240      	movs	r2, #64	; 0x40
 800bb98:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d009      	beq.n	800bbc0 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	6852      	ldr	r2, [r2, #4]
 800bbb8:	b2d2      	uxtb	r2, r2
 800bbba:	4611      	mov	r1, r2
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	4798      	blx	r3
 
  
  return USBD_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b083      	sub	sp, #12
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	78fa      	ldrb	r2, [r7, #3]
 800bbda:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bc80      	pop	{r7}
 800bbe6:	4770      	bx	lr

0800bbe8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2204      	movs	r2, #4
 800bc00:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bc80      	pop	{r7}
 800bc0e:	4770      	bx	lr

0800bc10 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bc80      	pop	{r7}
 800bc2e:	4770      	bx	lr

0800bc30 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	d10b      	bne.n	800bc5a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc48:	69db      	ldr	r3, [r3, #28]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d005      	beq.n	800bc5a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc54:	69db      	ldr	r3, [r3, #28]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	785b      	ldrb	r3, [r3, #1]
 800bc76:	2b09      	cmp	r3, #9
 800bc78:	d839      	bhi.n	800bcee <USBD_StdDevReq+0x8a>
 800bc7a:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <USBD_StdDevReq+0x1c>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bcd1 	.word	0x0800bcd1
 800bc84:	0800bce5 	.word	0x0800bce5
 800bc88:	0800bcef 	.word	0x0800bcef
 800bc8c:	0800bcdb 	.word	0x0800bcdb
 800bc90:	0800bcef 	.word	0x0800bcef
 800bc94:	0800bcb3 	.word	0x0800bcb3
 800bc98:	0800bca9 	.word	0x0800bca9
 800bc9c:	0800bcef 	.word	0x0800bcef
 800bca0:	0800bcc7 	.word	0x0800bcc7
 800bca4:	0800bcbd 	.word	0x0800bcbd
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f936 	bl	800bf1c <USBD_GetDescriptor>
    break;
 800bcb0:	e022      	b.n	800bcf8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fa25 	bl	800c104 <USBD_SetAddress>
    break;
 800bcba:	e01d      	b.n	800bcf8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800bcbc:	6839      	ldr	r1, [r7, #0]
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fa5e 	bl	800c180 <USBD_SetConfig>
    break;
 800bcc4:	e018      	b.n	800bcf8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 fae1 	bl	800c290 <USBD_GetConfig>
    break;
 800bcce:	e013      	b.n	800bcf8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fb0e 	bl	800c2f4 <USBD_GetStatus>
    break;
 800bcd8:	e00e      	b.n	800bcf8 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800bcda:	6839      	ldr	r1, [r7, #0]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fb33 	bl	800c348 <USBD_SetFeature>
    break;
 800bce2:	e009      	b.n	800bcf8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fb49 	bl	800c37e <USBD_ClrFeature>
    break;
 800bcec:	e004      	b.n	800bcf8 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 fba8 	bl	800c446 <USBD_CtlError>
    break;
 800bcf6:	bf00      	nop
  }
  
  return ret;
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop

0800bd04 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800bd0e:	2300      	movs	r3, #0
 800bd10:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800bd18:	2b03      	cmp	r3, #3
 800bd1a:	d11b      	bne.n	800bd54 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	889b      	ldrh	r3, [r3, #4]
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d811      	bhi.n	800bd4a <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	6839      	ldr	r1, [r7, #0]
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	88db      	ldrh	r3, [r3, #6]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d110      	bne.n	800bd5e <USBD_StdItfReq+0x5a>
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10d      	bne.n	800bd5e <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fc48 	bl	800c5d8 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800bd48:	e009      	b.n	800bd5e <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 fb7a 	bl	800c446 <USBD_CtlError>
    break;
 800bd52:	e004      	b.n	800bd5e <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 800bd54:	6839      	ldr	r1, [r7, #0]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fb75 	bl	800c446 <USBD_CtlError>
    break;
 800bd5c:	e000      	b.n	800bd60 <USBD_StdItfReq+0x5c>
    break;
 800bd5e:	bf00      	nop
  }
  return USBD_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800bd74:	2300      	movs	r3, #0
 800bd76:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	889b      	ldrh	r3, [r3, #4]
 800bd7c:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd86:	2b20      	cmp	r3, #32
 800bd88:	d108      	bne.n	800bd9c <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	4798      	blx	r3
    
    return USBD_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	e0ba      	b.n	800bf12 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	785b      	ldrb	r3, [r3, #1]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d039      	beq.n	800be18 <USBD_StdEPReq+0xae>
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d002      	beq.n	800bdae <USBD_StdEPReq+0x44>
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d06b      	beq.n	800be84 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800bdac:	e0b0      	b.n	800bf10 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d002      	beq.n	800bdbe <USBD_StdEPReq+0x54>
 800bdb8:	2b03      	cmp	r3, #3
 800bdba:	d00c      	beq.n	800bdd6 <USBD_StdEPReq+0x6c>
 800bdbc:	e025      	b.n	800be0a <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800bdbe:	7bbb      	ldrb	r3, [r7, #14]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d027      	beq.n	800be14 <USBD_StdEPReq+0xaa>
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	2b80      	cmp	r3, #128	; 0x80
 800bdc8:	d024      	beq.n	800be14 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800bdca:	7bbb      	ldrb	r3, [r7, #14]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f001 f86c 	bl	800ceac <USBD_LL_StallEP>
      break;	
 800bdd4:	e01e      	b.n	800be14 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	885b      	ldrh	r3, [r3, #2]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10a      	bne.n	800bdf4 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800bdde:	7bbb      	ldrb	r3, [r7, #14]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d007      	beq.n	800bdf4 <USBD_StdEPReq+0x8a>
 800bde4:	7bbb      	ldrb	r3, [r7, #14]
 800bde6:	2b80      	cmp	r3, #128	; 0x80
 800bde8:	d004      	beq.n	800bdf4 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800bdea:	7bbb      	ldrb	r3, [r7, #14]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f001 f85c 	bl	800ceac <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fbe8 	bl	800c5d8 <USBD_CtlSendStatus>
      break;
 800be08:	e005      	b.n	800be16 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800be0a:	6839      	ldr	r1, [r7, #0]
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 fb1a 	bl	800c446 <USBD_CtlError>
      break;    
 800be12:	e000      	b.n	800be16 <USBD_StdEPReq+0xac>
      break;	
 800be14:	bf00      	nop
    break;
 800be16:	e07b      	b.n	800bf10 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800be1e:	2b02      	cmp	r3, #2
 800be20:	d002      	beq.n	800be28 <USBD_StdEPReq+0xbe>
 800be22:	2b03      	cmp	r3, #3
 800be24:	d00c      	beq.n	800be40 <USBD_StdEPReq+0xd6>
 800be26:	e024      	b.n	800be72 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800be28:	7bbb      	ldrb	r3, [r7, #14]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d026      	beq.n	800be7c <USBD_StdEPReq+0x112>
 800be2e:	7bbb      	ldrb	r3, [r7, #14]
 800be30:	2b80      	cmp	r3, #128	; 0x80
 800be32:	d023      	beq.n	800be7c <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 800be34:	7bbb      	ldrb	r3, [r7, #14]
 800be36:	4619      	mov	r1, r3
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f001 f837 	bl	800ceac <USBD_LL_StallEP>
      break;	
 800be3e:	e01d      	b.n	800be7c <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	885b      	ldrh	r3, [r3, #2]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d11b      	bne.n	800be80 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800be48:	7bbb      	ldrb	r3, [r7, #14]
 800be4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00b      	beq.n	800be6a <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800be52:	7bbb      	ldrb	r3, [r7, #14]
 800be54:	4619      	mov	r1, r3
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f001 f847 	bl	800ceea <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fbb4 	bl	800c5d8 <USBD_CtlSendStatus>
      break;
 800be70:	e006      	b.n	800be80 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 800be72:	6839      	ldr	r1, [r7, #0]
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fae6 	bl	800c446 <USBD_CtlError>
      break;    
 800be7a:	e002      	b.n	800be82 <USBD_StdEPReq+0x118>
      break;	
 800be7c:	bf00      	nop
 800be7e:	e047      	b.n	800bf10 <USBD_StdEPReq+0x1a6>
      break;
 800be80:	bf00      	nop
    break;
 800be82:	e045      	b.n	800bf10 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d002      	beq.n	800be94 <USBD_StdEPReq+0x12a>
 800be8e:	2b03      	cmp	r3, #3
 800be90:	d00b      	beq.n	800beaa <USBD_StdEPReq+0x140>
 800be92:	e036      	b.n	800bf02 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 800be94:	7bbb      	ldrb	r3, [r7, #14]
 800be96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d036      	beq.n	800bf0c <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800be9e:	7bbb      	ldrb	r3, [r7, #14]
 800bea0:	4619      	mov	r1, r3
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f001 f802 	bl	800ceac <USBD_LL_StallEP>
      break;	
 800bea8:	e030      	b.n	800bf0c <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800beaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	da08      	bge.n	800bec4 <USBD_StdEPReq+0x15a>
 800beb2:	7bbb      	ldrb	r3, [r7, #14]
 800beb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beb8:	3301      	adds	r3, #1
 800beba:	011b      	lsls	r3, r3, #4
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	4413      	add	r3, r2
 800bec0:	3304      	adds	r3, #4
 800bec2:	e007      	b.n	800bed4 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800bec4:	7bbb      	ldrb	r3, [r7, #14]
 800bec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800beca:	3310      	adds	r3, #16
 800becc:	011b      	lsls	r3, r3, #4
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	4413      	add	r3, r2
 800bed2:	3304      	adds	r3, #4
 800bed4:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800bed6:	7bbb      	ldrb	r3, [r7, #14]
 800bed8:	4619      	mov	r1, r3
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f001 f824 	bl	800cf28 <USBD_LL_IsStallEP>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d003      	beq.n	800beee <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2201      	movs	r2, #1
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	e002      	b.n	800bef4 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2200      	movs	r2, #0
 800bef2:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800bef4:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800bef6:	2202      	movs	r2, #2
 800bef8:	4619      	mov	r1, r3
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fb0e 	bl	800c51c <USBD_CtlSendData>
      break;
 800bf00:	e005      	b.n	800bf0e <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800bf02:	6839      	ldr	r1, [r7, #0]
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fa9e 	bl	800c446 <USBD_CtlError>
      break;
 800bf0a:	e000      	b.n	800bf0e <USBD_StdEPReq+0x1a4>
      break;	
 800bf0c:	bf00      	nop
    break;
 800bf0e:	bf00      	nop
  }
  return ret;
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
	...

0800bf1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	885b      	ldrh	r3, [r3, #2]
 800bf2a:	0a1b      	lsrs	r3, r3, #8
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	2b06      	cmp	r3, #6
 800bf32:	f200 80c9 	bhi.w	800c0c8 <USBD_GetDescriptor+0x1ac>
 800bf36:	a201      	add	r2, pc, #4	; (adr r2, 800bf3c <USBD_GetDescriptor+0x20>)
 800bf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf3c:	0800bf59 	.word	0x0800bf59
 800bf40:	0800bf71 	.word	0x0800bf71
 800bf44:	0800bfb1 	.word	0x0800bfb1
 800bf48:	0800c0c9 	.word	0x0800c0c9
 800bf4c:	0800c0c9 	.word	0x0800c0c9
 800bf50:	0800c075 	.word	0x0800c075
 800bf54:	0800c09b 	.word	0x0800c09b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	7c12      	ldrb	r2, [r2, #16]
 800bf64:	f107 010a 	add.w	r1, r7, #10
 800bf68:	4610      	mov	r0, r2
 800bf6a:	4798      	blx	r3
 800bf6c:	60f8      	str	r0, [r7, #12]
    break;
 800bf6e:	e0b0      	b.n	800c0d2 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	7c1b      	ldrb	r3, [r3, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10d      	bne.n	800bf94 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf80:	f107 020a 	add.w	r2, r7, #10
 800bf84:	4610      	mov	r0, r2
 800bf86:	4798      	blx	r3
 800bf88:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	2202      	movs	r2, #2
 800bf90:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800bf92:	e09e      	b.n	800c0d2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9c:	f107 020a 	add.w	r2, r7, #10
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	4798      	blx	r3
 800bfa4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	2202      	movs	r2, #2
 800bfac:	701a      	strb	r2, [r3, #0]
    break;
 800bfae:	e090      	b.n	800c0d2 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	885b      	ldrh	r3, [r3, #2]
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b05      	cmp	r3, #5
 800bfb8:	d856      	bhi.n	800c068 <USBD_GetDescriptor+0x14c>
 800bfba:	a201      	add	r2, pc, #4	; (adr r2, 800bfc0 <USBD_GetDescriptor+0xa4>)
 800bfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc0:	0800bfd9 	.word	0x0800bfd9
 800bfc4:	0800bff1 	.word	0x0800bff1
 800bfc8:	0800c009 	.word	0x0800c009
 800bfcc:	0800c021 	.word	0x0800c021
 800bfd0:	0800c039 	.word	0x0800c039
 800bfd4:	0800c051 	.word	0x0800c051
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	7c12      	ldrb	r2, [r2, #16]
 800bfe4:	f107 010a 	add.w	r1, r7, #10
 800bfe8:	4610      	mov	r0, r2
 800bfea:	4798      	blx	r3
 800bfec:	60f8      	str	r0, [r7, #12]
      break;
 800bfee:	e040      	b.n	800c072 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	7c12      	ldrb	r2, [r2, #16]
 800bffc:	f107 010a 	add.w	r1, r7, #10
 800c000:	4610      	mov	r0, r2
 800c002:	4798      	blx	r3
 800c004:	60f8      	str	r0, [r7, #12]
      break;
 800c006:	e034      	b.n	800c072 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	7c12      	ldrb	r2, [r2, #16]
 800c014:	f107 010a 	add.w	r1, r7, #10
 800c018:	4610      	mov	r0, r2
 800c01a:	4798      	blx	r3
 800c01c:	60f8      	str	r0, [r7, #12]
      break;
 800c01e:	e028      	b.n	800c072 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	7c12      	ldrb	r2, [r2, #16]
 800c02c:	f107 010a 	add.w	r1, r7, #10
 800c030:	4610      	mov	r0, r2
 800c032:	4798      	blx	r3
 800c034:	60f8      	str	r0, [r7, #12]
      break;
 800c036:	e01c      	b.n	800c072 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c03e:	695b      	ldr	r3, [r3, #20]
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	7c12      	ldrb	r2, [r2, #16]
 800c044:	f107 010a 	add.w	r1, r7, #10
 800c048:	4610      	mov	r0, r2
 800c04a:	4798      	blx	r3
 800c04c:	60f8      	str	r0, [r7, #12]
      break;
 800c04e:	e010      	b.n	800c072 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c056:	699b      	ldr	r3, [r3, #24]
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	7c12      	ldrb	r2, [r2, #16]
 800c05c:	f107 010a 	add.w	r1, r7, #10
 800c060:	4610      	mov	r0, r2
 800c062:	4798      	blx	r3
 800c064:	60f8      	str	r0, [r7, #12]
      break;
 800c066:	e004      	b.n	800c072 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f9eb 	bl	800c446 <USBD_CtlError>
      return;
 800c070:	e044      	b.n	800c0fc <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 800c072:	e02e      	b.n	800c0d2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	7c1b      	ldrb	r3, [r3, #16]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d109      	bne.n	800c090 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c084:	f107 020a 	add.w	r2, r7, #10
 800c088:	4610      	mov	r0, r2
 800c08a:	4798      	blx	r3
 800c08c:	60f8      	str	r0, [r7, #12]
      break;
 800c08e:	e020      	b.n	800c0d2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f9d7 	bl	800c446 <USBD_CtlError>
      return;
 800c098:	e030      	b.n	800c0fc <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	7c1b      	ldrb	r3, [r3, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10d      	bne.n	800c0be <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0aa:	f107 020a 	add.w	r2, r7, #10
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	4798      	blx	r3
 800c0b2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	2207      	movs	r2, #7
 800c0ba:	701a      	strb	r2, [r3, #0]
      break; 
 800c0bc:	e009      	b.n	800c0d2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c0be:	6839      	ldr	r1, [r7, #0]
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f9c0 	bl	800c446 <USBD_CtlError>
      return;
 800c0c6:	e019      	b.n	800c0fc <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f9bb 	bl	800c446 <USBD_CtlError>
    return;
 800c0d0:	e014      	b.n	800c0fc <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800c0d2:	897b      	ldrh	r3, [r7, #10]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d011      	beq.n	800c0fc <USBD_GetDescriptor+0x1e0>
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	88db      	ldrh	r3, [r3, #6]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00d      	beq.n	800c0fc <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	88da      	ldrh	r2, [r3, #6]
 800c0e4:	897b      	ldrh	r3, [r7, #10]
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	bf28      	it	cs
 800c0ea:	4613      	movcs	r3, r2
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800c0f0:	897b      	ldrh	r3, [r7, #10]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	68f9      	ldr	r1, [r7, #12]
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fa10 	bl	800c51c <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop

0800c104 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	889b      	ldrh	r3, [r3, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d12c      	bne.n	800c170 <USBD_SetAddress+0x6c>
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	88db      	ldrh	r3, [r3, #6]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d128      	bne.n	800c170 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	885b      	ldrh	r3, [r3, #2]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c128:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c130:	2b03      	cmp	r3, #3
 800c132:	d104      	bne.n	800c13e <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 f985 	bl	800c446 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c13c:	e01c      	b.n	800c178 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	7bfa      	ldrb	r2, [r7, #15]
 800c142:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800c146:	7bfb      	ldrb	r3, [r7, #15]
 800c148:	4619      	mov	r1, r3
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 ff11 	bl	800cf72 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 fa41 	bl	800c5d8 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800c156:	7bfb      	ldrb	r3, [r7, #15]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d004      	beq.n	800c166 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c164:	e008      	b.n	800c178 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c16e:	e003      	b.n	800c178 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f967 	bl	800c446 <USBD_CtlError>
  } 
}
 800c178:	bf00      	nop
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	885b      	ldrh	r3, [r3, #2]
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	4b3e      	ldr	r3, [pc, #248]	; (800c28c <USBD_SetConfig+0x10c>)
 800c192:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800c194:	4b3d      	ldr	r3, [pc, #244]	; (800c28c <USBD_SetConfig+0x10c>)
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d904      	bls.n	800c1a6 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f951 	bl	800c446 <USBD_CtlError>
 800c1a4:	e06f      	b.n	800c286 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d002      	beq.n	800c1b6 <USBD_SetConfig+0x36>
 800c1b0:	2b03      	cmp	r3, #3
 800c1b2:	d023      	beq.n	800c1fc <USBD_SetConfig+0x7c>
 800c1b4:	e062      	b.n	800c27c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800c1b6:	4b35      	ldr	r3, [pc, #212]	; (800c28c <USBD_SetConfig+0x10c>)
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d01a      	beq.n	800c1f4 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800c1be:	4b33      	ldr	r3, [pc, #204]	; (800c28c <USBD_SetConfig+0x10c>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2203      	movs	r2, #3
 800c1cc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800c1d0:	4b2e      	ldr	r3, [pc, #184]	; (800c28c <USBD_SetConfig+0x10c>)
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff fb62 	bl	800b8a0 <USBD_SetClassConfig>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	d104      	bne.n	800c1ec <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 f92e 	bl	800c446 <USBD_CtlError>
          return;
 800c1ea:	e04c      	b.n	800c286 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 f9f3 	bl	800c5d8 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800c1f2:	e048      	b.n	800c286 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f9ef 	bl	800c5d8 <USBD_CtlSendStatus>
      break;
 800c1fa:	e044      	b.n	800c286 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800c1fc:	4b23      	ldr	r3, [pc, #140]	; (800c28c <USBD_SetConfig+0x10c>)
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d112      	bne.n	800c22a <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2202      	movs	r2, #2
 800c208:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800c20c:	4b1f      	ldr	r3, [pc, #124]	; (800c28c <USBD_SetConfig+0x10c>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	461a      	mov	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800c216:	4b1d      	ldr	r3, [pc, #116]	; (800c28c <USBD_SetConfig+0x10c>)
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7ff fb5e 	bl	800b8de <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f9d8 	bl	800c5d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c228:	e02d      	b.n	800c286 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800c22a:	4b18      	ldr	r3, [pc, #96]	; (800c28c <USBD_SetConfig+0x10c>)
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	461a      	mov	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	429a      	cmp	r2, r3
 800c236:	d01d      	beq.n	800c274 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	4619      	mov	r1, r3
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7ff fb4c 	bl	800b8de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c246:	4b11      	ldr	r3, [pc, #68]	; (800c28c <USBD_SetConfig+0x10c>)
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800c250:	4b0e      	ldr	r3, [pc, #56]	; (800c28c <USBD_SetConfig+0x10c>)
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	4619      	mov	r1, r3
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7ff fb22 	bl	800b8a0 <USBD_SetClassConfig>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b02      	cmp	r3, #2
 800c260:	d104      	bne.n	800c26c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f8ee 	bl	800c446 <USBD_CtlError>
          return;
 800c26a:	e00c      	b.n	800c286 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f9b3 	bl	800c5d8 <USBD_CtlSendStatus>
      break;
 800c272:	e008      	b.n	800c286 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f9af 	bl	800c5d8 <USBD_CtlSendStatus>
      break;
 800c27a:	e004      	b.n	800c286 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f8e1 	bl	800c446 <USBD_CtlError>
      break;
 800c284:	bf00      	nop
    }
  }
}
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	20000b4d 	.word	0x20000b4d

0800c290 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	88db      	ldrh	r3, [r3, #6]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d004      	beq.n	800c2ac <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800c2a2:	6839      	ldr	r1, [r7, #0]
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f8ce 	bl	800c446 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800c2aa:	e01f      	b.n	800c2ec <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d002      	beq.n	800c2bc <USBD_GetConfig+0x2c>
 800c2b6:	2b03      	cmp	r3, #3
 800c2b8:	d00b      	beq.n	800c2d2 <USBD_GetConfig+0x42>
 800c2ba:	e012      	b.n	800c2e2 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f926 	bl	800c51c <USBD_CtlSendData>
      break;
 800c2d0:	e00c      	b.n	800c2ec <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4619      	mov	r1, r3
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f91e 	bl	800c51c <USBD_CtlSendData>
      break;
 800c2e0:	e004      	b.n	800c2ec <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f8ae 	bl	800c446 <USBD_CtlError>
      break;
 800c2ea:	bf00      	nop
}
 800c2ec:	bf00      	nop
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c304:	3b02      	subs	r3, #2
 800c306:	2b01      	cmp	r3, #1
 800c308:	d815      	bhi.n	800c336 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2201      	movs	r2, #1
 800c30e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c316:	2b00      	cmp	r3, #0
 800c318:	d005      	beq.n	800c326 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	f043 0202 	orr.w	r2, r3, #2
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800c32a:	2202      	movs	r2, #2
 800c32c:	4619      	mov	r1, r3
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f8f4 	bl	800c51c <USBD_CtlSendData>
                      2);
    break;
 800c334:	e004      	b.n	800c340 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f884 	bl	800c446 <USBD_CtlError>
    break;
 800c33e:	bf00      	nop
  }
}
 800c340:	bf00      	nop
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	885b      	ldrh	r3, [r3, #2]
 800c356:	2b01      	cmp	r3, #1
 800c358:	d10d      	bne.n	800c376 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2201      	movs	r2, #1
 800c35e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f931 	bl	800c5d8 <USBD_CtlSendStatus>
  }

}
 800c376:	bf00      	nop
 800c378:	3708      	adds	r7, #8
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c38e:	3b02      	subs	r3, #2
 800c390:	2b01      	cmp	r3, #1
 800c392:	d812      	bhi.n	800c3ba <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	885b      	ldrh	r3, [r3, #2]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d113      	bne.n	800c3c4 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	6839      	ldr	r1, [r7, #0]
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f910 	bl	800c5d8 <USBD_CtlSendStatus>
    }
    break;
 800c3b8:	e004      	b.n	800c3c4 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800c3ba:	6839      	ldr	r1, [r7, #0]
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f842 	bl	800c446 <USBD_CtlError>
    break;
 800c3c2:	e000      	b.n	800c3c6 <USBD_ClrFeature+0x48>
    break;
 800c3c4:	bf00      	nop
  }
}
 800c3c6:	bf00      	nop
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b083      	sub	sp, #12
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	781a      	ldrb	r2, [r3, #0]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	785a      	ldrb	r2, [r3, #1]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	3302      	adds	r3, #2
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	3303      	adds	r3, #3
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	021b      	lsls	r3, r3, #8
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	4413      	add	r3, r2
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	3304      	adds	r3, #4
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	3305      	adds	r3, #5
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	b29b      	uxth	r3, r3
 800c414:	021b      	lsls	r3, r3, #8
 800c416:	b29b      	uxth	r3, r3
 800c418:	4413      	add	r3, r2
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	3306      	adds	r3, #6
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	b29a      	uxth	r2, r3
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	3307      	adds	r3, #7
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	b29b      	uxth	r3, r3
 800c430:	021b      	lsls	r3, r3, #8
 800c432:	b29b      	uxth	r3, r3
 800c434:	4413      	add	r3, r2
 800c436:	b29a      	uxth	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	80da      	strh	r2, [r3, #6]

}
 800c43c:	bf00      	nop
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	bc80      	pop	{r7}
 800c444:	4770      	bx	lr

0800c446 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b082      	sub	sp, #8
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
 800c44e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800c450:	2180      	movs	r1, #128	; 0x80
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 fd2a 	bl	800ceac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800c458:	2100      	movs	r1, #0
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fd26 	bl	800ceac <USBD_LL_StallEP>
}
 800c460:	bf00      	nop
 800c462:	3708      	adds	r7, #8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b086      	sub	sp, #24
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d033      	beq.n	800c4e6 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 f835 	bl	800c4ee <USBD_GetLen>
 800c484:	4603      	mov	r3, r0
 800c486:	3301      	adds	r3, #1
 800c488:	b29b      	uxth	r3, r3
 800c48a:	005b      	lsls	r3, r3, #1
 800c48c:	b29a      	uxth	r2, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	881a      	ldrh	r2, [r3, #0]
 800c496:	7dfb      	ldrb	r3, [r7, #23]
 800c498:	1c59      	adds	r1, r3, #1
 800c49a:	75f9      	strb	r1, [r7, #23]
 800c49c:	4619      	mov	r1, r3
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	440b      	add	r3, r1
 800c4a2:	b2d2      	uxtb	r2, r2
 800c4a4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	1c5a      	adds	r2, r3, #1
 800c4aa:	75fa      	strb	r2, [r7, #23]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	2203      	movs	r2, #3
 800c4b4:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800c4b6:	e012      	b.n	800c4de <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	1c5a      	adds	r2, r3, #1
 800c4bc:	60fa      	str	r2, [r7, #12]
 800c4be:	7dfa      	ldrb	r2, [r7, #23]
 800c4c0:	1c51      	adds	r1, r2, #1
 800c4c2:	75f9      	strb	r1, [r7, #23]
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	440a      	add	r2, r1
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800c4ce:	7dfb      	ldrb	r3, [r7, #23]
 800c4d0:	1c5a      	adds	r2, r3, #1
 800c4d2:	75fa      	strb	r2, [r7, #23]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	4413      	add	r3, r2
 800c4da:	2200      	movs	r2, #0
 800c4dc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1e8      	bne.n	800c4b8 <USBD_GetString+0x50>
    }
  } 
}
 800c4e6:	bf00      	nop
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b085      	sub	sp, #20
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 800c4fa:	e005      	b.n	800c508 <USBD_GetLen+0x1a>
    {
        len++;
 800c4fc:	7bfb      	ldrb	r3, [r7, #15]
 800c4fe:	3301      	adds	r3, #1
 800c500:	73fb      	strb	r3, [r7, #15]
        buf++;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3301      	adds	r3, #1
 800c506:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1f5      	bne.n	800c4fc <USBD_GetLen+0xe>
    }

    return len;
 800c510:	7bfb      	ldrb	r3, [r7, #15]
}
 800c512:	4618      	mov	r0, r3
 800c514:	3714      	adds	r7, #20
 800c516:	46bd      	mov	sp, r7
 800c518:	bc80      	pop	{r7}
 800c51a:	4770      	bx	lr

0800c51c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	4613      	mov	r3, r2
 800c528:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2202      	movs	r2, #2
 800c52e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800c532:	88fa      	ldrh	r2, [r7, #6]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800c538:	88fa      	ldrh	r2, [r7, #6]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800c53e:	88fb      	ldrh	r3, [r7, #6]
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	2100      	movs	r1, #0
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f000 fd33 	bl	800cfb0 <USBD_LL_Transmit>
  
  return USBD_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	4613      	mov	r3, r2
 800c560:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800c562:	88fb      	ldrh	r3, [r7, #6]
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	2100      	movs	r1, #0
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f000 fd21 	bl	800cfb0 <USBD_LL_Transmit>
  
  return USBD_OK;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	4613      	mov	r3, r2
 800c584:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2203      	movs	r2, #3
 800c58a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800c58e:	88fa      	ldrh	r2, [r7, #6]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800c596:	88fa      	ldrh	r2, [r7, #6]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800c59e:	88fb      	ldrh	r3, [r7, #6]
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 fd26 	bl	800cff6 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 800c5c2:	88fb      	ldrh	r3, [r7, #6]
 800c5c4:	68ba      	ldr	r2, [r7, #8]
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f000 fd14 	bl	800cff6 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2204      	movs	r2, #4
 800c5e4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fcde 	bl	800cfb0 <USBD_LL_Transmit>
  
  return USBD_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2205      	movs	r2, #5
 800c60a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800c60e:	2300      	movs	r3, #0
 800c610:	2200      	movs	r2, #0
 800c612:	2100      	movs	r1, #0
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fcee 	bl	800cff6 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c628:	2200      	movs	r2, #0
 800c62a:	4912      	ldr	r1, [pc, #72]	; (800c674 <MX_USB_DEVICE_Init+0x50>)
 800c62c:	4812      	ldr	r0, [pc, #72]	; (800c678 <MX_USB_DEVICE_Init+0x54>)
 800c62e:	f7ff f8dd 	bl	800b7ec <USBD_Init>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d001      	beq.n	800c63c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c638:	f7f8 ff30 	bl	800549c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c63c:	490f      	ldr	r1, [pc, #60]	; (800c67c <MX_USB_DEVICE_Init+0x58>)
 800c63e:	480e      	ldr	r0, [pc, #56]	; (800c678 <MX_USB_DEVICE_Init+0x54>)
 800c640:	f7ff f8ff 	bl	800b842 <USBD_RegisterClass>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c64a:	f7f8 ff27 	bl	800549c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c64e:	490c      	ldr	r1, [pc, #48]	; (800c680 <MX_USB_DEVICE_Init+0x5c>)
 800c650:	4809      	ldr	r0, [pc, #36]	; (800c678 <MX_USB_DEVICE_Init+0x54>)
 800c652:	f7ff f835 	bl	800b6c0 <USBD_CDC_RegisterInterface>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d001      	beq.n	800c660 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c65c:	f7f8 ff1e 	bl	800549c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c660:	4805      	ldr	r0, [pc, #20]	; (800c678 <MX_USB_DEVICE_Init+0x54>)
 800c662:	f7ff f907 	bl	800b874 <USBD_Start>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d001      	beq.n	800c670 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c66c:	f7f8 ff16 	bl	800549c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c670:	bf00      	nop
 800c672:	bd80      	pop	{r7, pc}
 800c674:	20000150 	.word	0x20000150
 800c678:	20000ee4 	.word	0x20000ee4
 800c67c:	20000038 	.word	0x20000038
 800c680:	20000140 	.word	0x20000140

0800c684 <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];
bool    rx_full = false;

uint32_t cdcAvailable(void)
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 800c68a:	4b09      	ldr	r3, [pc, #36]	; (800c6b0 <cdcAvailable+0x2c>)
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	4b09      	ldr	r3, [pc, #36]	; (800c6b4 <cdcAvailable+0x30>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	4a08      	ldr	r2, [pc, #32]	; (800c6b8 <cdcAvailable+0x34>)
 800c696:	6812      	ldr	r2, [r2, #0]
 800c698:	fbb3 f1f2 	udiv	r1, r3, r2
 800c69c:	fb02 f201 	mul.w	r2, r2, r1
 800c6a0:	1a9b      	subs	r3, r3, r2
 800c6a2:	607b      	str	r3, [r7, #4]

  return ret;
 800c6a4:	687b      	ldr	r3, [r7, #4]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bc80      	pop	{r7}
 800c6ae:	4770      	bx	lr
 800c6b0:	20000b50 	.word	0x20000b50
 800c6b4:	20000b54 	.word	0x20000b54
 800c6b8:	2000013c 	.word	0x2000013c

0800c6bc <cdcRead>:

uint8_t cdcRead(void)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 800c6c2:	4b0e      	ldr	r3, [pc, #56]	; (800c6fc <cdcRead+0x40>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a0e      	ldr	r2, [pc, #56]	; (800c700 <cdcRead+0x44>)
 800c6c8:	5cd3      	ldrb	r3, [r2, r3]
 800c6ca:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 800c6cc:	4b0b      	ldr	r3, [pc, #44]	; (800c6fc <cdcRead+0x40>)
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	4b0c      	ldr	r3, [pc, #48]	; (800c704 <cdcRead+0x48>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d00b      	beq.n	800c6f0 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 800c6d8:	4b08      	ldr	r3, [pc, #32]	; (800c6fc <cdcRead+0x40>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	4a0a      	ldr	r2, [pc, #40]	; (800c708 <cdcRead+0x4c>)
 800c6e0:	6812      	ldr	r2, [r2, #0]
 800c6e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6e6:	fb02 f201 	mul.w	r2, r2, r1
 800c6ea:	1a9b      	subs	r3, r3, r2
 800c6ec:	4a03      	ldr	r2, [pc, #12]	; (800c6fc <cdcRead+0x40>)
 800c6ee:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c6f0:	79fb      	ldrb	r3, [r7, #7]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bc80      	pop	{r7}
 800c6fa:	4770      	bx	lr
 800c6fc:	20000b54 	.word	0x20000b54
 800c700:	200018d8 	.word	0x200018d8
 800c704:	20000b50 	.word	0x20000b50
 800c708:	2000013c 	.word	0x2000013c

0800c70c <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b085      	sub	sp, #20
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;    // overwrite
 800c716:	4b0e      	ldr	r3, [pc, #56]	; (800c750 <cdcDataIn+0x44>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	490e      	ldr	r1, [pc, #56]	; (800c754 <cdcDataIn+0x48>)
 800c71c:	79fa      	ldrb	r2, [r7, #7]
 800c71e:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 800c720:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <cdcDataIn+0x44>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	3301      	adds	r3, #1
 800c726:	4a0c      	ldr	r2, [pc, #48]	; (800c758 <cdcDataIn+0x4c>)
 800c728:	6812      	ldr	r2, [r2, #0]
 800c72a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c72e:	fb02 f201 	mul.w	r2, r2, r1
 800c732:	1a9b      	subs	r3, r3, r2
 800c734:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 800c736:	4b09      	ldr	r3, [pc, #36]	; (800c75c <cdcDataIn+0x50>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d002      	beq.n	800c746 <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 800c740:	4a03      	ldr	r2, [pc, #12]	; (800c750 <cdcDataIn+0x44>)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6013      	str	r3, [r2, #0]
  }
}
 800c746:	bf00      	nop
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bc80      	pop	{r7}
 800c74e:	4770      	bx	lr
 800c750:	20000b50 	.word	0x20000b50
 800c754:	200018d8 	.word	0x200018d8
 800c758:	2000013c 	.word	0x2000013c
 800c75c:	20000b54 	.word	0x20000b54

0800c760 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 800c76a:	f7f8 fdee 	bl	800534a <millis>
 800c76e:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	b29b      	uxth	r3, r3
 800c774:	4619      	mov	r1, r3
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f8ee 	bl	800c958 <CDC_Transmit_FS>
 800c77c:	4603      	mov	r3, r0
 800c77e:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 800c780:	7afb      	ldrb	r3, [r7, #11]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d101      	bne.n	800c78a <cdcWrite+0x2a>
    {
      return length;
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	e00e      	b.n	800c7a8 <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 800c78a:	7afb      	ldrb	r3, [r7, #11]
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	d101      	bne.n	800c794 <cdcWrite+0x34>
    {
      return 0;
 800c790:	2300      	movs	r3, #0
 800c792:	e009      	b.n	800c7a8 <cdcWrite+0x48>
    }

    if(millis() - pre_time >= 100)    // time out handling.
 800c794:	f7f8 fdd9 	bl	800534a <millis>
 800c798:	4602      	mov	r2, r0
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	2b63      	cmp	r3, #99	; 0x63
 800c7a0:	d800      	bhi.n	800c7a4 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 800c7a2:	e7e5      	b.n	800c770 <cdcWrite+0x10>
    {
      break;
 800c7a4:	bf00      	nop
    }
  }
  return 0;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USB_CDC_SOF>:
{
  return LineCoding.bitrate;
}

uint8_t USB_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 800c7b0:	b590      	push	{r4, r7, lr}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]

  if(rx_full == true)
 800c7b8:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <USB_CDC_SOF+0x3c>)
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d010      	beq.n	800c7e2 <USB_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    /* amount of empty space in receive buffer */
    buf_len = (rx_len - cdcAvailable()) - 1;
 800c7c0:	4b0b      	ldr	r3, [pc, #44]	; (800c7f0 <USB_CDC_SOF+0x40>)
 800c7c2:	681c      	ldr	r4, [r3, #0]
 800c7c4:	f7ff ff5e 	bl	800c684 <cdcAvailable>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	1ae3      	subs	r3, r4, r3
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2b3f      	cmp	r3, #63	; 0x3f
 800c7d4:	d905      	bls.n	800c7e2 <USB_CDC_SOF+0x32>
    {
      /* Allow next data transmission */
      USBD_CDC_ReceivePacket(pdev);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f7fe ffde 	bl	800b798 <USBD_CDC_ReceivePacket>
      rx_full = false;
 800c7dc:	4b03      	ldr	r3, [pc, #12]	; (800c7ec <USB_CDC_SOF+0x3c>)
 800c7de:	2200      	movs	r2, #0
 800c7e0:	701a      	strb	r2, [r3, #0]
    }
  }


  return 0;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd90      	pop	{r4, r7, pc}
 800c7ec:	20000b58 	.word	0x20000b58
 800c7f0:	2000013c 	.word	0x2000013c

0800c7f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	4905      	ldr	r1, [pc, #20]	; (800c810 <CDC_Init_FS+0x1c>)
 800c7fc:	4805      	ldr	r0, [pc, #20]	; (800c814 <CDC_Init_FS+0x20>)
 800c7fe:	f7fe ff75 	bl	800b6ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c802:	4905      	ldr	r1, [pc, #20]	; (800c818 <CDC_Init_FS+0x24>)
 800c804:	4803      	ldr	r0, [pc, #12]	; (800c814 <CDC_Init_FS+0x20>)
 800c806:	f7fe ff8a 	bl	800b71e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c80a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	200014f0 	.word	0x200014f0
 800c814:	20000ee4 	.word	0x20000ee4
 800c818:	20001108 	.word	0x20001108

0800c81c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c81c:	b480      	push	{r7}
 800c81e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c820:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c822:	4618      	mov	r0, r3
 800c824:	46bd      	mov	sp, r7
 800c826:	bc80      	pop	{r7}
 800c828:	4770      	bx	lr
	...

0800c82c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	4603      	mov	r3, r0
 800c834:	6039      	str	r1, [r7, #0]
 800c836:	71fb      	strb	r3, [r7, #7]
 800c838:	4613      	mov	r3, r2
 800c83a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c83c:	79fb      	ldrb	r3, [r7, #7]
 800c83e:	2b23      	cmp	r3, #35	; 0x23
 800c840:	d84a      	bhi.n	800c8d8 <CDC_Control_FS+0xac>
 800c842:	a201      	add	r2, pc, #4	; (adr r2, 800c848 <CDC_Control_FS+0x1c>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c8d9 	.word	0x0800c8d9
 800c84c:	0800c8d9 	.word	0x0800c8d9
 800c850:	0800c8d9 	.word	0x0800c8d9
 800c854:	0800c8d9 	.word	0x0800c8d9
 800c858:	0800c8d9 	.word	0x0800c8d9
 800c85c:	0800c8d9 	.word	0x0800c8d9
 800c860:	0800c8d9 	.word	0x0800c8d9
 800c864:	0800c8d9 	.word	0x0800c8d9
 800c868:	0800c8d9 	.word	0x0800c8d9
 800c86c:	0800c8d9 	.word	0x0800c8d9
 800c870:	0800c8d9 	.word	0x0800c8d9
 800c874:	0800c8d9 	.word	0x0800c8d9
 800c878:	0800c8d9 	.word	0x0800c8d9
 800c87c:	0800c8d9 	.word	0x0800c8d9
 800c880:	0800c8d9 	.word	0x0800c8d9
 800c884:	0800c8d9 	.word	0x0800c8d9
 800c888:	0800c8d9 	.word	0x0800c8d9
 800c88c:	0800c8d9 	.word	0x0800c8d9
 800c890:	0800c8d9 	.word	0x0800c8d9
 800c894:	0800c8d9 	.word	0x0800c8d9
 800c898:	0800c8d9 	.word	0x0800c8d9
 800c89c:	0800c8d9 	.word	0x0800c8d9
 800c8a0:	0800c8d9 	.word	0x0800c8d9
 800c8a4:	0800c8d9 	.word	0x0800c8d9
 800c8a8:	0800c8d9 	.word	0x0800c8d9
 800c8ac:	0800c8d9 	.word	0x0800c8d9
 800c8b0:	0800c8d9 	.word	0x0800c8d9
 800c8b4:	0800c8d9 	.word	0x0800c8d9
 800c8b8:	0800c8d9 	.word	0x0800c8d9
 800c8bc:	0800c8d9 	.word	0x0800c8d9
 800c8c0:	0800c8d9 	.word	0x0800c8d9
 800c8c4:	0800c8d9 	.word	0x0800c8d9
 800c8c8:	0800c8d9 	.word	0x0800c8d9
 800c8cc:	0800c8d9 	.word	0x0800c8d9
 800c8d0:	0800c8d9 	.word	0x0800c8d9
 800c8d4:	0800c8d9 	.word	0x0800c8d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c8d8:	bf00      	nop
  }

  return (USBD_OK);
 800c8da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bc80      	pop	{r7}
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop

0800c8e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c8e8:	b590      	push	{r4, r7, lr}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t buf_len;


  for(int i=0; i<*Len; i++)
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	60fb      	str	r3, [r7, #12]
 800c8f6:	e009      	b.n	800c90c <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	4618      	mov	r0, r3
 800c902:	f7ff ff03 	bl	800c70c <cdcDataIn>
  for(int i=0; i<*Len; i++)
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	3301      	adds	r3, #1
 800c90a:	60fb      	str	r3, [r7, #12]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	429a      	cmp	r2, r3
 800c914:	d8f0      	bhi.n	800c8f8 <CDC_Receive_FS+0x10>
  }

  /* amount of empty space in receive buffer */
  buf_len = (rx_len - cdcAvailable()) - 1;
 800c916:	4b0d      	ldr	r3, [pc, #52]	; (800c94c <CDC_Receive_FS+0x64>)
 800c918:	681c      	ldr	r4, [r3, #0]
 800c91a:	f7ff feb3 	bl	800c684 <cdcAvailable>
 800c91e:	4603      	mov	r3, r0
 800c920:	1ae3      	subs	r3, r4, r3
 800c922:	3b01      	subs	r3, #1
 800c924:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2b3f      	cmp	r3, #63	; 0x3f
 800c92a:	d907      	bls.n	800c93c <CDC_Receive_FS+0x54>
  {
    /* Allow next data transmission */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c92c:	6879      	ldr	r1, [r7, #4]
 800c92e:	4808      	ldr	r0, [pc, #32]	; (800c950 <CDC_Receive_FS+0x68>)
 800c930:	f7fe fef5 	bl	800b71e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c934:	4806      	ldr	r0, [pc, #24]	; (800c950 <CDC_Receive_FS+0x68>)
 800c936:	f7fe ff2f 	bl	800b798 <USBD_CDC_ReceivePacket>
 800c93a:	e002      	b.n	800c942 <CDC_Receive_FS+0x5a>
  }
  else
  {
    /* wait as the insufficient buffer capacity */
    rx_full = true;
 800c93c:	4b05      	ldr	r3, [pc, #20]	; (800c954 <CDC_Receive_FS+0x6c>)
 800c93e:	2201      	movs	r2, #1
 800c940:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 800c942:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c944:	4618      	mov	r0, r3
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd90      	pop	{r4, r7, pc}
 800c94c:	2000013c 	.word	0x2000013c
 800c950:	20000ee4 	.word	0x20000ee4
 800c954:	20000b58 	.word	0x20000b58

0800c958 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	460b      	mov	r3, r1
 800c962:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c968:	4b0d      	ldr	r3, [pc, #52]	; (800c9a0 <CDC_Transmit_FS+0x48>)
 800c96a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c96e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c97a:	2301      	movs	r3, #1
 800c97c:	e00b      	b.n	800c996 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c97e:	887b      	ldrh	r3, [r7, #2]
 800c980:	461a      	mov	r2, r3
 800c982:	6879      	ldr	r1, [r7, #4]
 800c984:	4806      	ldr	r0, [pc, #24]	; (800c9a0 <CDC_Transmit_FS+0x48>)
 800c986:	f7fe feb1 	bl	800b6ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c98a:	4805      	ldr	r0, [pc, #20]	; (800c9a0 <CDC_Transmit_FS+0x48>)
 800c98c:	f7fe feda 	bl	800b744 <USBD_CDC_TransmitPacket>
 800c990:	4603      	mov	r3, r0
 800c992:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c994:	7bfb      	ldrb	r3, [r7, #15]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	20000ee4 	.word	0x20000ee4

0800c9a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	6039      	str	r1, [r7, #0]
 800c9ae:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	2212      	movs	r2, #18
 800c9b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c9b6:	4b03      	ldr	r3, [pc, #12]	; (800c9c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bc80      	pop	{r7}
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	2000016c 	.word	0x2000016c

0800c9c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	6039      	str	r1, [r7, #0]
 800c9d2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	2204      	movs	r2, #4
 800c9d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9da:	4b03      	ldr	r3, [pc, #12]	; (800c9e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bc80      	pop	{r7}
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop
 800c9e8:	20000180 	.word	0x20000180

0800c9ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	6039      	str	r1, [r7, #0]
 800c9f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9f8:	79fb      	ldrb	r3, [r7, #7]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d105      	bne.n	800ca0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	4907      	ldr	r1, [pc, #28]	; (800ca20 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca02:	4808      	ldr	r0, [pc, #32]	; (800ca24 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca04:	f7ff fd30 	bl	800c468 <USBD_GetString>
 800ca08:	e004      	b.n	800ca14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca0a:	683a      	ldr	r2, [r7, #0]
 800ca0c:	4904      	ldr	r1, [pc, #16]	; (800ca20 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca0e:	4805      	ldr	r0, [pc, #20]	; (800ca24 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca10:	f7ff fd2a 	bl	800c468 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca14:	4b02      	ldr	r3, [pc, #8]	; (800ca20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20001ad8 	.word	0x20001ad8
 800ca24:	0800dae0 	.word	0x0800dae0

0800ca28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	4603      	mov	r3, r0
 800ca30:	6039      	str	r1, [r7, #0]
 800ca32:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	4904      	ldr	r1, [pc, #16]	; (800ca48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ca38:	4804      	ldr	r0, [pc, #16]	; (800ca4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca3a:	f7ff fd15 	bl	800c468 <USBD_GetString>
  return USBD_StrDesc;
 800ca3e:	4b02      	ldr	r3, [pc, #8]	; (800ca48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	20001ad8 	.word	0x20001ad8
 800ca4c:	0800daf8 	.word	0x0800daf8

0800ca50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	4603      	mov	r3, r0
 800ca58:	6039      	str	r1, [r7, #0]
 800ca5a:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	221a      	movs	r2, #26
 800ca60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca62:	f000 f843 	bl	800caec <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800ca66:	4b02      	ldr	r3, [pc, #8]	; (800ca70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	20000184 	.word	0x20000184

0800ca74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	6039      	str	r1, [r7, #0]
 800ca7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca80:	79fb      	ldrb	r3, [r7, #7]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d105      	bne.n	800ca92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca86:	683a      	ldr	r2, [r7, #0]
 800ca88:	4907      	ldr	r1, [pc, #28]	; (800caa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca8a:	4808      	ldr	r0, [pc, #32]	; (800caac <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca8c:	f7ff fcec 	bl	800c468 <USBD_GetString>
 800ca90:	e004      	b.n	800ca9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca92:	683a      	ldr	r2, [r7, #0]
 800ca94:	4904      	ldr	r1, [pc, #16]	; (800caa8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca96:	4805      	ldr	r0, [pc, #20]	; (800caac <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca98:	f7ff fce6 	bl	800c468 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca9c:	4b02      	ldr	r3, [pc, #8]	; (800caa8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	20001ad8 	.word	0x20001ad8
 800caac:	0800db0c 	.word	0x0800db0c

0800cab0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	4603      	mov	r3, r0
 800cab8:	6039      	str	r1, [r7, #0]
 800caba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cabc:	79fb      	ldrb	r3, [r7, #7]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d105      	bne.n	800cace <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cac2:	683a      	ldr	r2, [r7, #0]
 800cac4:	4907      	ldr	r1, [pc, #28]	; (800cae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cac6:	4808      	ldr	r0, [pc, #32]	; (800cae8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cac8:	f7ff fcce 	bl	800c468 <USBD_GetString>
 800cacc:	e004      	b.n	800cad8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	4904      	ldr	r1, [pc, #16]	; (800cae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cad2:	4805      	ldr	r0, [pc, #20]	; (800cae8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cad4:	f7ff fcc8 	bl	800c468 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cad8:	4b02      	ldr	r3, [pc, #8]	; (800cae4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	20001ad8 	.word	0x20001ad8
 800cae8:	0800db18 	.word	0x0800db18

0800caec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800caf2:	4b0f      	ldr	r3, [pc, #60]	; (800cb30 <Get_SerialNum+0x44>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800caf8:	4b0e      	ldr	r3, [pc, #56]	; (800cb34 <Get_SerialNum+0x48>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cafe:	4b0e      	ldr	r3, [pc, #56]	; (800cb38 <Get_SerialNum+0x4c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4413      	add	r3, r2
 800cb0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d009      	beq.n	800cb26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cb12:	2208      	movs	r2, #8
 800cb14:	4909      	ldr	r1, [pc, #36]	; (800cb3c <Get_SerialNum+0x50>)
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f000 f814 	bl	800cb44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb1c:	2204      	movs	r2, #4
 800cb1e:	4908      	ldr	r1, [pc, #32]	; (800cb40 <Get_SerialNum+0x54>)
 800cb20:	68b8      	ldr	r0, [r7, #8]
 800cb22:	f000 f80f 	bl	800cb44 <IntToUnicode>
  }
}
 800cb26:	bf00      	nop
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	1ffff7e8 	.word	0x1ffff7e8
 800cb34:	1ffff7ec 	.word	0x1ffff7ec
 800cb38:	1ffff7f0 	.word	0x1ffff7f0
 800cb3c:	20000186 	.word	0x20000186
 800cb40:	20000196 	.word	0x20000196

0800cb44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b087      	sub	sp, #28
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb56:	2300      	movs	r3, #0
 800cb58:	75fb      	strb	r3, [r7, #23]
 800cb5a:	e027      	b.n	800cbac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	0f1b      	lsrs	r3, r3, #28
 800cb60:	2b09      	cmp	r3, #9
 800cb62:	d80b      	bhi.n	800cb7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	0f1b      	lsrs	r3, r3, #28
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	7dfb      	ldrb	r3, [r7, #23]
 800cb6c:	005b      	lsls	r3, r3, #1
 800cb6e:	4619      	mov	r1, r3
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	440b      	add	r3, r1
 800cb74:	3230      	adds	r2, #48	; 0x30
 800cb76:	b2d2      	uxtb	r2, r2
 800cb78:	701a      	strb	r2, [r3, #0]
 800cb7a:	e00a      	b.n	800cb92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	0f1b      	lsrs	r3, r3, #28
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	7dfb      	ldrb	r3, [r7, #23]
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	4619      	mov	r1, r3
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	440b      	add	r3, r1
 800cb8c:	3237      	adds	r2, #55	; 0x37
 800cb8e:	b2d2      	uxtb	r2, r2
 800cb90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	011b      	lsls	r3, r3, #4
 800cb96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cb98:	7dfb      	ldrb	r3, [r7, #23]
 800cb9a:	005b      	lsls	r3, r3, #1
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	4413      	add	r3, r2
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cba6:	7dfb      	ldrb	r3, [r7, #23]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	75fb      	strb	r3, [r7, #23]
 800cbac:	7dfa      	ldrb	r2, [r7, #23]
 800cbae:	79fb      	ldrb	r3, [r7, #7]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d3d3      	bcc.n	800cb5c <IntToUnicode+0x18>
  }
}
 800cbb4:	bf00      	nop
 800cbb6:	371c      	adds	r7, #28
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bc80      	pop	{r7}
 800cbbc:	4770      	bx	lr
	...

0800cbc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a0d      	ldr	r2, [pc, #52]	; (800cc04 <HAL_PCD_MspInit+0x44>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d113      	bne.n	800cbfa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cbd2:	4b0d      	ldr	r3, [pc, #52]	; (800cc08 <HAL_PCD_MspInit+0x48>)
 800cbd4:	69db      	ldr	r3, [r3, #28]
 800cbd6:	4a0c      	ldr	r2, [pc, #48]	; (800cc08 <HAL_PCD_MspInit+0x48>)
 800cbd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cbdc:	61d3      	str	r3, [r2, #28]
 800cbde:	4b0a      	ldr	r3, [pc, #40]	; (800cc08 <HAL_PCD_MspInit+0x48>)
 800cbe0:	69db      	ldr	r3, [r3, #28]
 800cbe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cbe6:	60fb      	str	r3, [r7, #12]
 800cbe8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800cbea:	2200      	movs	r2, #0
 800cbec:	2100      	movs	r1, #0
 800cbee:	2014      	movs	r0, #20
 800cbf0:	f7f9 ff47 	bl	8006a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cbf4:	2014      	movs	r0, #20
 800cbf6:	f7f9 ff60 	bl	8006aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cbfa:	bf00      	nop
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	40005c00 	.word	0x40005c00
 800cc08:	40021000 	.word	0x40021000

0800cc0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800cc20:	4619      	mov	r1, r3
 800cc22:	4610      	mov	r0, r2
 800cc24:	f7fe fe6e 	bl	800b904 <USBD_LL_SetupStage>
}
 800cc28:	bf00      	nop
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	460b      	mov	r3, r1
 800cc3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 800cc42:	78fb      	ldrb	r3, [r7, #3]
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	015b      	lsls	r3, r3, #5
 800cc48:	4413      	add	r3, r2
 800cc4a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	78fb      	ldrb	r3, [r7, #3]
 800cc52:	4619      	mov	r1, r3
 800cc54:	f7fe fea0 	bl	800b998 <USBD_LL_DataOutStage>
}
 800cc58:	bf00      	nop
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 800cc72:	78fb      	ldrb	r3, [r7, #3]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	015b      	lsls	r3, r3, #5
 800cc78:	4413      	add	r3, r2
 800cc7a:	333c      	adds	r3, #60	; 0x3c
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	78fb      	ldrb	r3, [r7, #3]
 800cc80:	4619      	mov	r1, r3
 800cc82:	f7fe fee4 	bl	800ba4e <USBD_LL_DataInStage>
}
 800cc86:	bf00      	nop
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b082      	sub	sp, #8
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fe ffc7 	bl	800bc30 <USBD_LL_SOF>
}
 800cca2:	bf00      	nop
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b084      	sub	sp, #16
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d001      	beq.n	800ccc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ccbe:	f7f8 fbed 	bl	800549c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800ccc8:	7bfa      	ldrb	r2, [r7, #15]
 800ccca:	4611      	mov	r1, r2
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fe ff7c 	bl	800bbca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7fe ff47 	bl	800bb6c <USBD_LL_Reset>
}
 800ccde:	bf00      	nop
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
	...

0800cce8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fe ff76 	bl	800bbe8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d005      	beq.n	800cd10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd04:	4b04      	ldr	r3, [pc, #16]	; (800cd18 <HAL_PCD_SuspendCallback+0x30>)
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	4a03      	ldr	r2, [pc, #12]	; (800cd18 <HAL_PCD_SuspendCallback+0x30>)
 800cd0a:	f043 0306 	orr.w	r3, r3, #6
 800cd0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd10:	bf00      	nop
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	e000ed00 	.word	0xe000ed00

0800cd1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fe ff70 	bl	800bc10 <USBD_LL_Resume>
}
 800cd30:	bf00      	nop
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cd40:	4a28      	ldr	r2, [pc, #160]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a26      	ldr	r2, [pc, #152]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd4c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 800cd50:	4b24      	ldr	r3, [pc, #144]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd52:	4a25      	ldr	r2, [pc, #148]	; (800cde8 <USBD_LL_Init+0xb0>)
 800cd54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cd56:	4b23      	ldr	r3, [pc, #140]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd58:	2208      	movs	r2, #8
 800cd5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cd5c:	4b21      	ldr	r3, [pc, #132]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd5e:	2202      	movs	r2, #2
 800cd60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cd62:	4b20      	ldr	r3, [pc, #128]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cd68:	4b1e      	ldr	r3, [pc, #120]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cd6e:	4b1d      	ldr	r3, [pc, #116]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cd74:	481b      	ldr	r0, [pc, #108]	; (800cde4 <USBD_LL_Init+0xac>)
 800cd76:	f7fa fdf2 	bl	800795e <HAL_PCD_Init>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d001      	beq.n	800cd84 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cd80:	f7f8 fb8c 	bl	800549c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800cd8a:	2318      	movs	r3, #24
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	2100      	movs	r1, #0
 800cd90:	f7fb fcfa 	bl	8008788 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800cd9a:	2358      	movs	r3, #88	; 0x58
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	2180      	movs	r1, #128	; 0x80
 800cda0:	f7fb fcf2 	bl	8008788 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800cdaa:	23c0      	movs	r3, #192	; 0xc0
 800cdac:	2200      	movs	r2, #0
 800cdae:	2181      	movs	r1, #129	; 0x81
 800cdb0:	f7fb fcea 	bl	8008788 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800cdba:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	f7fb fce1 	bl	8008788 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800cdcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	2182      	movs	r1, #130	; 0x82
 800cdd4:	f7fb fcd8 	bl	8008788 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	20001cd8 	.word	0x20001cd8
 800cde8:	40005c00 	.word	0x40005c00

0800cdec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fa fe85 	bl	8007b12 <HAL_PCD_Start>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce0c:	7bfb      	ldrb	r3, [r7, #15]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f000 f948 	bl	800d0a4 <USBD_Get_USB_Status>
 800ce14:	4603      	mov	r3, r0
 800ce16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ce18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3710      	adds	r7, #16
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b084      	sub	sp, #16
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	4608      	mov	r0, r1
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4603      	mov	r3, r0
 800ce32:	70fb      	strb	r3, [r7, #3]
 800ce34:	460b      	mov	r3, r1
 800ce36:	70bb      	strb	r3, [r7, #2]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800ce4a:	78bb      	ldrb	r3, [r7, #2]
 800ce4c:	883a      	ldrh	r2, [r7, #0]
 800ce4e:	78f9      	ldrb	r1, [r7, #3]
 800ce50:	f7fa ffac 	bl	8007dac <HAL_PCD_EP_Open>
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f000 f922 	bl	800d0a4 <USBD_Get_USB_Status>
 800ce60:	4603      	mov	r3, r0
 800ce62:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800ce64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b084      	sub	sp, #16
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	460b      	mov	r3, r1
 800ce78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ce88:	78fa      	ldrb	r2, [r7, #3]
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fa ffe2 	bl	8007e56 <HAL_PCD_EP_Close>
 800ce92:	4603      	mov	r3, r0
 800ce94:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce96:	7bfb      	ldrb	r3, [r7, #15]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f000 f903 	bl	800d0a4 <USBD_Get_USB_Status>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800cea2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800cec6:	78fa      	ldrb	r2, [r7, #3]
 800cec8:	4611      	mov	r1, r2
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7fb f895 	bl	8007ffa <HAL_PCD_EP_SetStall>
 800ced0:	4603      	mov	r3, r0
 800ced2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ced4:	7bfb      	ldrb	r3, [r7, #15]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f000 f8e4 	bl	800d0a4 <USBD_Get_USB_Status>
 800cedc:	4603      	mov	r3, r0
 800cede:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800cee0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
 800cef2:	460b      	mov	r3, r1
 800cef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cefa:	2300      	movs	r3, #0
 800cefc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800cf04:	78fa      	ldrb	r2, [r7, #3]
 800cf06:	4611      	mov	r1, r2
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fb f8cb 	bl	80080a4 <HAL_PCD_EP_ClrStall>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 f8c5 	bl	800d0a4 <USBD_Get_USB_Status>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800cf1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3710      	adds	r7, #16
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800cf3a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800cf3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	da08      	bge.n	800cf56 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800cf44:	78fb      	ldrb	r3, [r7, #3]
 800cf46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	015b      	lsls	r3, r3, #5
 800cf4e:	4413      	add	r3, r2
 800cf50:	332a      	adds	r3, #42	; 0x2a
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	e008      	b.n	800cf68 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800cf56:	78fb      	ldrb	r3, [r7, #3]
 800cf58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	015b      	lsls	r3, r3, #5
 800cf60:	4413      	add	r3, r2
 800cf62:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800cf66:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3714      	adds	r7, #20
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bc80      	pop	{r7}
 800cf70:	4770      	bx	lr

0800cf72 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800cf8c:	78fa      	ldrb	r2, [r7, #3]
 800cf8e:	4611      	mov	r1, r2
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7fa fee6 	bl	8007d62 <HAL_PCD_SetAddress>
 800cf96:	4603      	mov	r3, r0
 800cf98:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf9a:	7bfb      	ldrb	r3, [r7, #15]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 f881 	bl	800d0a4 <USBD_Get_USB_Status>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800cfa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	607a      	str	r2, [r7, #4]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	72fb      	strb	r3, [r7, #11]
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800cfd2:	893b      	ldrh	r3, [r7, #8]
 800cfd4:	7af9      	ldrb	r1, [r7, #11]
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	f7fa ffd4 	bl	8007f84 <HAL_PCD_EP_Transmit>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfe0:	7dfb      	ldrb	r3, [r7, #23]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 f85e 	bl	800d0a4 <USBD_Get_USB_Status>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800cfec:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}

0800cff6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cff6:	b580      	push	{r7, lr}
 800cff8:	b086      	sub	sp, #24
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	60f8      	str	r0, [r7, #12]
 800cffe:	607a      	str	r2, [r7, #4]
 800d000:	461a      	mov	r2, r3
 800d002:	460b      	mov	r3, r1
 800d004:	72fb      	strb	r3, [r7, #11]
 800d006:	4613      	mov	r3, r2
 800d008:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d00a:	2300      	movs	r3, #0
 800d00c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d00e:	2300      	movs	r3, #0
 800d010:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800d018:	893b      	ldrh	r3, [r7, #8]
 800d01a:	7af9      	ldrb	r1, [r7, #11]
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	f7fa ff60 	bl	8007ee2 <HAL_PCD_EP_Receive>
 800d022:	4603      	mov	r3, r0
 800d024:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d026:	7dfb      	ldrb	r3, [r7, #23]
 800d028:	4618      	mov	r0, r3
 800d02a:	f000 f83b 	bl	800d0a4 <USBD_Get_USB_Status>
 800d02e:	4603      	mov	r3, r0
 800d030:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800d032:	7dbb      	ldrb	r3, [r7, #22]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	460b      	mov	r3, r1
 800d046:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800d04e:	78fa      	ldrb	r2, [r7, #3]
 800d050:	4611      	mov	r1, r2
 800d052:	4618      	mov	r0, r3
 800d054:	f7fa ff81 	bl	8007f5a <HAL_PCD_EP_GetRxCount>
 800d058:	4603      	mov	r3, r0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
	...

0800d064 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d06c:	4b02      	ldr	r3, [pc, #8]	; (800d078 <USBD_static_malloc+0x14>)
}
 800d06e:	4618      	mov	r0, r3
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	bc80      	pop	{r7}
 800d076:	4770      	bx	lr
 800d078:	20000b5c 	.word	0x20000b5c

0800d07c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]

}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	bc80      	pop	{r7}
 800d08c:	4770      	bx	lr

0800d08e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d08e:	b480      	push	{r7}
 800d090:	b083      	sub	sp, #12
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	460b      	mov	r3, r1
 800d098:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d09a:	bf00      	nop
 800d09c:	370c      	adds	r7, #12
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bc80      	pop	{r7}
 800d0a2:	4770      	bx	lr

0800d0a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0b2:	79fb      	ldrb	r3, [r7, #7]
 800d0b4:	2b03      	cmp	r3, #3
 800d0b6:	d817      	bhi.n	800d0e8 <USBD_Get_USB_Status+0x44>
 800d0b8:	a201      	add	r2, pc, #4	; (adr r2, 800d0c0 <USBD_Get_USB_Status+0x1c>)
 800d0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0be:	bf00      	nop
 800d0c0:	0800d0d1 	.word	0x0800d0d1
 800d0c4:	0800d0d7 	.word	0x0800d0d7
 800d0c8:	0800d0dd 	.word	0x0800d0dd
 800d0cc:	0800d0e3 	.word	0x0800d0e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d0d4:	e00b      	b.n	800d0ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0d6:	2302      	movs	r3, #2
 800d0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800d0da:	e008      	b.n	800d0ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	73fb      	strb	r3, [r7, #15]
    break;
 800d0e0:	e005      	b.n	800d0ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0e2:	2302      	movs	r3, #2
 800d0e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d0e6:	e002      	b.n	800d0ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ec:	bf00      	nop
  }
  return usb_status;
 800d0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3714      	adds	r7, #20
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bc80      	pop	{r7}
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop

0800d0fc <main>:
 */

#include "main.h"

int main(void)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	af00      	add	r7, sp, #0
  hwInit();
 800d100:	f7f9 fb3a 	bl	8006778 <hwInit>
  apInit();
 800d104:	f7f8 f88e 	bl	8005224 <apInit>

  apMain();
 800d108:	f7f8 f8a4 	bl	8005254 <apMain>

  return 0;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	bd80      	pop	{r7, pc}
	...

0800d114 <__errno>:
 800d114:	4b01      	ldr	r3, [pc, #4]	; (800d11c <__errno+0x8>)
 800d116:	6818      	ldr	r0, [r3, #0]
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	200001a0 	.word	0x200001a0

0800d120 <__libc_init_array>:
 800d120:	b570      	push	{r4, r5, r6, lr}
 800d122:	2500      	movs	r5, #0
 800d124:	4e0c      	ldr	r6, [pc, #48]	; (800d158 <__libc_init_array+0x38>)
 800d126:	4c0d      	ldr	r4, [pc, #52]	; (800d15c <__libc_init_array+0x3c>)
 800d128:	1ba4      	subs	r4, r4, r6
 800d12a:	10a4      	asrs	r4, r4, #2
 800d12c:	42a5      	cmp	r5, r4
 800d12e:	d109      	bne.n	800d144 <__libc_init_array+0x24>
 800d130:	f000 fc4e 	bl	800d9d0 <_init>
 800d134:	2500      	movs	r5, #0
 800d136:	4e0a      	ldr	r6, [pc, #40]	; (800d160 <__libc_init_array+0x40>)
 800d138:	4c0a      	ldr	r4, [pc, #40]	; (800d164 <__libc_init_array+0x44>)
 800d13a:	1ba4      	subs	r4, r4, r6
 800d13c:	10a4      	asrs	r4, r4, #2
 800d13e:	42a5      	cmp	r5, r4
 800d140:	d105      	bne.n	800d14e <__libc_init_array+0x2e>
 800d142:	bd70      	pop	{r4, r5, r6, pc}
 800d144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d148:	4798      	blx	r3
 800d14a:	3501      	adds	r5, #1
 800d14c:	e7ee      	b.n	800d12c <__libc_init_array+0xc>
 800d14e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d152:	4798      	blx	r3
 800d154:	3501      	adds	r5, #1
 800d156:	e7f2      	b.n	800d13e <__libc_init_array+0x1e>
 800d158:	0800db74 	.word	0x0800db74
 800d15c:	0800db74 	.word	0x0800db74
 800d160:	0800db74 	.word	0x0800db74
 800d164:	0800db78 	.word	0x0800db78

0800d168 <memset>:
 800d168:	4603      	mov	r3, r0
 800d16a:	4402      	add	r2, r0
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d100      	bne.n	800d172 <memset+0xa>
 800d170:	4770      	bx	lr
 800d172:	f803 1b01 	strb.w	r1, [r3], #1
 800d176:	e7f9      	b.n	800d16c <memset+0x4>

0800d178 <_vsniprintf_r>:
 800d178:	b530      	push	{r4, r5, lr}
 800d17a:	1e14      	subs	r4, r2, #0
 800d17c:	4605      	mov	r5, r0
 800d17e:	b09b      	sub	sp, #108	; 0x6c
 800d180:	4618      	mov	r0, r3
 800d182:	da05      	bge.n	800d190 <_vsniprintf_r+0x18>
 800d184:	238b      	movs	r3, #139	; 0x8b
 800d186:	f04f 30ff 	mov.w	r0, #4294967295
 800d18a:	602b      	str	r3, [r5, #0]
 800d18c:	b01b      	add	sp, #108	; 0x6c
 800d18e:	bd30      	pop	{r4, r5, pc}
 800d190:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d194:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d198:	bf0c      	ite	eq
 800d19a:	4623      	moveq	r3, r4
 800d19c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d1a0:	9302      	str	r3, [sp, #8]
 800d1a2:	9305      	str	r3, [sp, #20]
 800d1a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1a8:	9100      	str	r1, [sp, #0]
 800d1aa:	9104      	str	r1, [sp, #16]
 800d1ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d1b4:	4669      	mov	r1, sp
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	f000 f872 	bl	800d2a0 <_svfiprintf_r>
 800d1bc:	1c43      	adds	r3, r0, #1
 800d1be:	bfbc      	itt	lt
 800d1c0:	238b      	movlt	r3, #139	; 0x8b
 800d1c2:	602b      	strlt	r3, [r5, #0]
 800d1c4:	2c00      	cmp	r4, #0
 800d1c6:	d0e1      	beq.n	800d18c <_vsniprintf_r+0x14>
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	9b00      	ldr	r3, [sp, #0]
 800d1cc:	701a      	strb	r2, [r3, #0]
 800d1ce:	e7dd      	b.n	800d18c <_vsniprintf_r+0x14>

0800d1d0 <vsniprintf>:
 800d1d0:	b507      	push	{r0, r1, r2, lr}
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	460a      	mov	r2, r1
 800d1d8:	4601      	mov	r1, r0
 800d1da:	4803      	ldr	r0, [pc, #12]	; (800d1e8 <vsniprintf+0x18>)
 800d1dc:	6800      	ldr	r0, [r0, #0]
 800d1de:	f7ff ffcb 	bl	800d178 <_vsniprintf_r>
 800d1e2:	b003      	add	sp, #12
 800d1e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1e8:	200001a0 	.word	0x200001a0

0800d1ec <__ssputs_r>:
 800d1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f0:	688e      	ldr	r6, [r1, #8]
 800d1f2:	4682      	mov	sl, r0
 800d1f4:	429e      	cmp	r6, r3
 800d1f6:	460c      	mov	r4, r1
 800d1f8:	4690      	mov	r8, r2
 800d1fa:	4699      	mov	r9, r3
 800d1fc:	d837      	bhi.n	800d26e <__ssputs_r+0x82>
 800d1fe:	898a      	ldrh	r2, [r1, #12]
 800d200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d204:	d031      	beq.n	800d26a <__ssputs_r+0x7e>
 800d206:	2302      	movs	r3, #2
 800d208:	6825      	ldr	r5, [r4, #0]
 800d20a:	6909      	ldr	r1, [r1, #16]
 800d20c:	1a6f      	subs	r7, r5, r1
 800d20e:	6965      	ldr	r5, [r4, #20]
 800d210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d214:	fb95 f5f3 	sdiv	r5, r5, r3
 800d218:	f109 0301 	add.w	r3, r9, #1
 800d21c:	443b      	add	r3, r7
 800d21e:	429d      	cmp	r5, r3
 800d220:	bf38      	it	cc
 800d222:	461d      	movcc	r5, r3
 800d224:	0553      	lsls	r3, r2, #21
 800d226:	d530      	bpl.n	800d28a <__ssputs_r+0x9e>
 800d228:	4629      	mov	r1, r5
 800d22a:	f000 fb37 	bl	800d89c <_malloc_r>
 800d22e:	4606      	mov	r6, r0
 800d230:	b950      	cbnz	r0, 800d248 <__ssputs_r+0x5c>
 800d232:	230c      	movs	r3, #12
 800d234:	f04f 30ff 	mov.w	r0, #4294967295
 800d238:	f8ca 3000 	str.w	r3, [sl]
 800d23c:	89a3      	ldrh	r3, [r4, #12]
 800d23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d242:	81a3      	strh	r3, [r4, #12]
 800d244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d248:	463a      	mov	r2, r7
 800d24a:	6921      	ldr	r1, [r4, #16]
 800d24c:	f000 fab6 	bl	800d7bc <memcpy>
 800d250:	89a3      	ldrh	r3, [r4, #12]
 800d252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d25a:	81a3      	strh	r3, [r4, #12]
 800d25c:	6126      	str	r6, [r4, #16]
 800d25e:	443e      	add	r6, r7
 800d260:	6026      	str	r6, [r4, #0]
 800d262:	464e      	mov	r6, r9
 800d264:	6165      	str	r5, [r4, #20]
 800d266:	1bed      	subs	r5, r5, r7
 800d268:	60a5      	str	r5, [r4, #8]
 800d26a:	454e      	cmp	r6, r9
 800d26c:	d900      	bls.n	800d270 <__ssputs_r+0x84>
 800d26e:	464e      	mov	r6, r9
 800d270:	4632      	mov	r2, r6
 800d272:	4641      	mov	r1, r8
 800d274:	6820      	ldr	r0, [r4, #0]
 800d276:	f000 faac 	bl	800d7d2 <memmove>
 800d27a:	68a3      	ldr	r3, [r4, #8]
 800d27c:	2000      	movs	r0, #0
 800d27e:	1b9b      	subs	r3, r3, r6
 800d280:	60a3      	str	r3, [r4, #8]
 800d282:	6823      	ldr	r3, [r4, #0]
 800d284:	441e      	add	r6, r3
 800d286:	6026      	str	r6, [r4, #0]
 800d288:	e7dc      	b.n	800d244 <__ssputs_r+0x58>
 800d28a:	462a      	mov	r2, r5
 800d28c:	f000 fb60 	bl	800d950 <_realloc_r>
 800d290:	4606      	mov	r6, r0
 800d292:	2800      	cmp	r0, #0
 800d294:	d1e2      	bne.n	800d25c <__ssputs_r+0x70>
 800d296:	6921      	ldr	r1, [r4, #16]
 800d298:	4650      	mov	r0, sl
 800d29a:	f000 fab3 	bl	800d804 <_free_r>
 800d29e:	e7c8      	b.n	800d232 <__ssputs_r+0x46>

0800d2a0 <_svfiprintf_r>:
 800d2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a4:	461d      	mov	r5, r3
 800d2a6:	898b      	ldrh	r3, [r1, #12]
 800d2a8:	b09d      	sub	sp, #116	; 0x74
 800d2aa:	061f      	lsls	r7, r3, #24
 800d2ac:	4680      	mov	r8, r0
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	4616      	mov	r6, r2
 800d2b2:	d50f      	bpl.n	800d2d4 <_svfiprintf_r+0x34>
 800d2b4:	690b      	ldr	r3, [r1, #16]
 800d2b6:	b96b      	cbnz	r3, 800d2d4 <_svfiprintf_r+0x34>
 800d2b8:	2140      	movs	r1, #64	; 0x40
 800d2ba:	f000 faef 	bl	800d89c <_malloc_r>
 800d2be:	6020      	str	r0, [r4, #0]
 800d2c0:	6120      	str	r0, [r4, #16]
 800d2c2:	b928      	cbnz	r0, 800d2d0 <_svfiprintf_r+0x30>
 800d2c4:	230c      	movs	r3, #12
 800d2c6:	f8c8 3000 	str.w	r3, [r8]
 800d2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ce:	e0c8      	b.n	800d462 <_svfiprintf_r+0x1c2>
 800d2d0:	2340      	movs	r3, #64	; 0x40
 800d2d2:	6163      	str	r3, [r4, #20]
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d2d8:	2320      	movs	r3, #32
 800d2da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2de:	2330      	movs	r3, #48	; 0x30
 800d2e0:	f04f 0b01 	mov.w	fp, #1
 800d2e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2e8:	9503      	str	r5, [sp, #12]
 800d2ea:	4637      	mov	r7, r6
 800d2ec:	463d      	mov	r5, r7
 800d2ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d2f2:	b10b      	cbz	r3, 800d2f8 <_svfiprintf_r+0x58>
 800d2f4:	2b25      	cmp	r3, #37	; 0x25
 800d2f6:	d13e      	bne.n	800d376 <_svfiprintf_r+0xd6>
 800d2f8:	ebb7 0a06 	subs.w	sl, r7, r6
 800d2fc:	d00b      	beq.n	800d316 <_svfiprintf_r+0x76>
 800d2fe:	4653      	mov	r3, sl
 800d300:	4632      	mov	r2, r6
 800d302:	4621      	mov	r1, r4
 800d304:	4640      	mov	r0, r8
 800d306:	f7ff ff71 	bl	800d1ec <__ssputs_r>
 800d30a:	3001      	adds	r0, #1
 800d30c:	f000 80a4 	beq.w	800d458 <_svfiprintf_r+0x1b8>
 800d310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d312:	4453      	add	r3, sl
 800d314:	9309      	str	r3, [sp, #36]	; 0x24
 800d316:	783b      	ldrb	r3, [r7, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 809d 	beq.w	800d458 <_svfiprintf_r+0x1b8>
 800d31e:	2300      	movs	r3, #0
 800d320:	f04f 32ff 	mov.w	r2, #4294967295
 800d324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d328:	9304      	str	r3, [sp, #16]
 800d32a:	9307      	str	r3, [sp, #28]
 800d32c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d330:	931a      	str	r3, [sp, #104]	; 0x68
 800d332:	462f      	mov	r7, r5
 800d334:	2205      	movs	r2, #5
 800d336:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d33a:	4850      	ldr	r0, [pc, #320]	; (800d47c <_svfiprintf_r+0x1dc>)
 800d33c:	f000 fa30 	bl	800d7a0 <memchr>
 800d340:	9b04      	ldr	r3, [sp, #16]
 800d342:	b9d0      	cbnz	r0, 800d37a <_svfiprintf_r+0xda>
 800d344:	06d9      	lsls	r1, r3, #27
 800d346:	bf44      	itt	mi
 800d348:	2220      	movmi	r2, #32
 800d34a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d34e:	071a      	lsls	r2, r3, #28
 800d350:	bf44      	itt	mi
 800d352:	222b      	movmi	r2, #43	; 0x2b
 800d354:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d358:	782a      	ldrb	r2, [r5, #0]
 800d35a:	2a2a      	cmp	r2, #42	; 0x2a
 800d35c:	d015      	beq.n	800d38a <_svfiprintf_r+0xea>
 800d35e:	462f      	mov	r7, r5
 800d360:	2000      	movs	r0, #0
 800d362:	250a      	movs	r5, #10
 800d364:	9a07      	ldr	r2, [sp, #28]
 800d366:	4639      	mov	r1, r7
 800d368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d36c:	3b30      	subs	r3, #48	; 0x30
 800d36e:	2b09      	cmp	r3, #9
 800d370:	d94d      	bls.n	800d40e <_svfiprintf_r+0x16e>
 800d372:	b1b8      	cbz	r0, 800d3a4 <_svfiprintf_r+0x104>
 800d374:	e00f      	b.n	800d396 <_svfiprintf_r+0xf6>
 800d376:	462f      	mov	r7, r5
 800d378:	e7b8      	b.n	800d2ec <_svfiprintf_r+0x4c>
 800d37a:	4a40      	ldr	r2, [pc, #256]	; (800d47c <_svfiprintf_r+0x1dc>)
 800d37c:	463d      	mov	r5, r7
 800d37e:	1a80      	subs	r0, r0, r2
 800d380:	fa0b f000 	lsl.w	r0, fp, r0
 800d384:	4318      	orrs	r0, r3
 800d386:	9004      	str	r0, [sp, #16]
 800d388:	e7d3      	b.n	800d332 <_svfiprintf_r+0x92>
 800d38a:	9a03      	ldr	r2, [sp, #12]
 800d38c:	1d11      	adds	r1, r2, #4
 800d38e:	6812      	ldr	r2, [r2, #0]
 800d390:	9103      	str	r1, [sp, #12]
 800d392:	2a00      	cmp	r2, #0
 800d394:	db01      	blt.n	800d39a <_svfiprintf_r+0xfa>
 800d396:	9207      	str	r2, [sp, #28]
 800d398:	e004      	b.n	800d3a4 <_svfiprintf_r+0x104>
 800d39a:	4252      	negs	r2, r2
 800d39c:	f043 0302 	orr.w	r3, r3, #2
 800d3a0:	9207      	str	r2, [sp, #28]
 800d3a2:	9304      	str	r3, [sp, #16]
 800d3a4:	783b      	ldrb	r3, [r7, #0]
 800d3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d3a8:	d10c      	bne.n	800d3c4 <_svfiprintf_r+0x124>
 800d3aa:	787b      	ldrb	r3, [r7, #1]
 800d3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ae:	d133      	bne.n	800d418 <_svfiprintf_r+0x178>
 800d3b0:	9b03      	ldr	r3, [sp, #12]
 800d3b2:	3702      	adds	r7, #2
 800d3b4:	1d1a      	adds	r2, r3, #4
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	9203      	str	r2, [sp, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	bfb8      	it	lt
 800d3be:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3c2:	9305      	str	r3, [sp, #20]
 800d3c4:	4d2e      	ldr	r5, [pc, #184]	; (800d480 <_svfiprintf_r+0x1e0>)
 800d3c6:	2203      	movs	r2, #3
 800d3c8:	7839      	ldrb	r1, [r7, #0]
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	f000 f9e8 	bl	800d7a0 <memchr>
 800d3d0:	b138      	cbz	r0, 800d3e2 <_svfiprintf_r+0x142>
 800d3d2:	2340      	movs	r3, #64	; 0x40
 800d3d4:	1b40      	subs	r0, r0, r5
 800d3d6:	fa03 f000 	lsl.w	r0, r3, r0
 800d3da:	9b04      	ldr	r3, [sp, #16]
 800d3dc:	3701      	adds	r7, #1
 800d3de:	4303      	orrs	r3, r0
 800d3e0:	9304      	str	r3, [sp, #16]
 800d3e2:	7839      	ldrb	r1, [r7, #0]
 800d3e4:	2206      	movs	r2, #6
 800d3e6:	4827      	ldr	r0, [pc, #156]	; (800d484 <_svfiprintf_r+0x1e4>)
 800d3e8:	1c7e      	adds	r6, r7, #1
 800d3ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3ee:	f000 f9d7 	bl	800d7a0 <memchr>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d038      	beq.n	800d468 <_svfiprintf_r+0x1c8>
 800d3f6:	4b24      	ldr	r3, [pc, #144]	; (800d488 <_svfiprintf_r+0x1e8>)
 800d3f8:	bb13      	cbnz	r3, 800d440 <_svfiprintf_r+0x1a0>
 800d3fa:	9b03      	ldr	r3, [sp, #12]
 800d3fc:	3307      	adds	r3, #7
 800d3fe:	f023 0307 	bic.w	r3, r3, #7
 800d402:	3308      	adds	r3, #8
 800d404:	9303      	str	r3, [sp, #12]
 800d406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d408:	444b      	add	r3, r9
 800d40a:	9309      	str	r3, [sp, #36]	; 0x24
 800d40c:	e76d      	b.n	800d2ea <_svfiprintf_r+0x4a>
 800d40e:	fb05 3202 	mla	r2, r5, r2, r3
 800d412:	2001      	movs	r0, #1
 800d414:	460f      	mov	r7, r1
 800d416:	e7a6      	b.n	800d366 <_svfiprintf_r+0xc6>
 800d418:	2300      	movs	r3, #0
 800d41a:	250a      	movs	r5, #10
 800d41c:	4619      	mov	r1, r3
 800d41e:	3701      	adds	r7, #1
 800d420:	9305      	str	r3, [sp, #20]
 800d422:	4638      	mov	r0, r7
 800d424:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d428:	3a30      	subs	r2, #48	; 0x30
 800d42a:	2a09      	cmp	r2, #9
 800d42c:	d903      	bls.n	800d436 <_svfiprintf_r+0x196>
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d0c8      	beq.n	800d3c4 <_svfiprintf_r+0x124>
 800d432:	9105      	str	r1, [sp, #20]
 800d434:	e7c6      	b.n	800d3c4 <_svfiprintf_r+0x124>
 800d436:	fb05 2101 	mla	r1, r5, r1, r2
 800d43a:	2301      	movs	r3, #1
 800d43c:	4607      	mov	r7, r0
 800d43e:	e7f0      	b.n	800d422 <_svfiprintf_r+0x182>
 800d440:	ab03      	add	r3, sp, #12
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	4622      	mov	r2, r4
 800d446:	4b11      	ldr	r3, [pc, #68]	; (800d48c <_svfiprintf_r+0x1ec>)
 800d448:	a904      	add	r1, sp, #16
 800d44a:	4640      	mov	r0, r8
 800d44c:	f3af 8000 	nop.w
 800d450:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d454:	4681      	mov	r9, r0
 800d456:	d1d6      	bne.n	800d406 <_svfiprintf_r+0x166>
 800d458:	89a3      	ldrh	r3, [r4, #12]
 800d45a:	065b      	lsls	r3, r3, #25
 800d45c:	f53f af35 	bmi.w	800d2ca <_svfiprintf_r+0x2a>
 800d460:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d462:	b01d      	add	sp, #116	; 0x74
 800d464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d468:	ab03      	add	r3, sp, #12
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	4622      	mov	r2, r4
 800d46e:	4b07      	ldr	r3, [pc, #28]	; (800d48c <_svfiprintf_r+0x1ec>)
 800d470:	a904      	add	r1, sp, #16
 800d472:	4640      	mov	r0, r8
 800d474:	f000 f882 	bl	800d57c <_printf_i>
 800d478:	e7ea      	b.n	800d450 <_svfiprintf_r+0x1b0>
 800d47a:	bf00      	nop
 800d47c:	0800db40 	.word	0x0800db40
 800d480:	0800db46 	.word	0x0800db46
 800d484:	0800db4a 	.word	0x0800db4a
 800d488:	00000000 	.word	0x00000000
 800d48c:	0800d1ed 	.word	0x0800d1ed

0800d490 <_printf_common>:
 800d490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d494:	4691      	mov	r9, r2
 800d496:	461f      	mov	r7, r3
 800d498:	688a      	ldr	r2, [r1, #8]
 800d49a:	690b      	ldr	r3, [r1, #16]
 800d49c:	4606      	mov	r6, r0
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	bfb8      	it	lt
 800d4a2:	4613      	movlt	r3, r2
 800d4a4:	f8c9 3000 	str.w	r3, [r9]
 800d4a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4ac:	460c      	mov	r4, r1
 800d4ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4b2:	b112      	cbz	r2, 800d4ba <_printf_common+0x2a>
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	f8c9 3000 	str.w	r3, [r9]
 800d4ba:	6823      	ldr	r3, [r4, #0]
 800d4bc:	0699      	lsls	r1, r3, #26
 800d4be:	bf42      	ittt	mi
 800d4c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d4c4:	3302      	addmi	r3, #2
 800d4c6:	f8c9 3000 	strmi.w	r3, [r9]
 800d4ca:	6825      	ldr	r5, [r4, #0]
 800d4cc:	f015 0506 	ands.w	r5, r5, #6
 800d4d0:	d107      	bne.n	800d4e2 <_printf_common+0x52>
 800d4d2:	f104 0a19 	add.w	sl, r4, #25
 800d4d6:	68e3      	ldr	r3, [r4, #12]
 800d4d8:	f8d9 2000 	ldr.w	r2, [r9]
 800d4dc:	1a9b      	subs	r3, r3, r2
 800d4de:	42ab      	cmp	r3, r5
 800d4e0:	dc29      	bgt.n	800d536 <_printf_common+0xa6>
 800d4e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d4e6:	6822      	ldr	r2, [r4, #0]
 800d4e8:	3300      	adds	r3, #0
 800d4ea:	bf18      	it	ne
 800d4ec:	2301      	movne	r3, #1
 800d4ee:	0692      	lsls	r2, r2, #26
 800d4f0:	d42e      	bmi.n	800d550 <_printf_common+0xc0>
 800d4f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4f6:	4639      	mov	r1, r7
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	47c0      	blx	r8
 800d4fc:	3001      	adds	r0, #1
 800d4fe:	d021      	beq.n	800d544 <_printf_common+0xb4>
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	68e5      	ldr	r5, [r4, #12]
 800d504:	f003 0306 	and.w	r3, r3, #6
 800d508:	2b04      	cmp	r3, #4
 800d50a:	bf18      	it	ne
 800d50c:	2500      	movne	r5, #0
 800d50e:	f8d9 2000 	ldr.w	r2, [r9]
 800d512:	f04f 0900 	mov.w	r9, #0
 800d516:	bf08      	it	eq
 800d518:	1aad      	subeq	r5, r5, r2
 800d51a:	68a3      	ldr	r3, [r4, #8]
 800d51c:	6922      	ldr	r2, [r4, #16]
 800d51e:	bf08      	it	eq
 800d520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d524:	4293      	cmp	r3, r2
 800d526:	bfc4      	itt	gt
 800d528:	1a9b      	subgt	r3, r3, r2
 800d52a:	18ed      	addgt	r5, r5, r3
 800d52c:	341a      	adds	r4, #26
 800d52e:	454d      	cmp	r5, r9
 800d530:	d11a      	bne.n	800d568 <_printf_common+0xd8>
 800d532:	2000      	movs	r0, #0
 800d534:	e008      	b.n	800d548 <_printf_common+0xb8>
 800d536:	2301      	movs	r3, #1
 800d538:	4652      	mov	r2, sl
 800d53a:	4639      	mov	r1, r7
 800d53c:	4630      	mov	r0, r6
 800d53e:	47c0      	blx	r8
 800d540:	3001      	adds	r0, #1
 800d542:	d103      	bne.n	800d54c <_printf_common+0xbc>
 800d544:	f04f 30ff 	mov.w	r0, #4294967295
 800d548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d54c:	3501      	adds	r5, #1
 800d54e:	e7c2      	b.n	800d4d6 <_printf_common+0x46>
 800d550:	2030      	movs	r0, #48	; 0x30
 800d552:	18e1      	adds	r1, r4, r3
 800d554:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d558:	1c5a      	adds	r2, r3, #1
 800d55a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d55e:	4422      	add	r2, r4
 800d560:	3302      	adds	r3, #2
 800d562:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d566:	e7c4      	b.n	800d4f2 <_printf_common+0x62>
 800d568:	2301      	movs	r3, #1
 800d56a:	4622      	mov	r2, r4
 800d56c:	4639      	mov	r1, r7
 800d56e:	4630      	mov	r0, r6
 800d570:	47c0      	blx	r8
 800d572:	3001      	adds	r0, #1
 800d574:	d0e6      	beq.n	800d544 <_printf_common+0xb4>
 800d576:	f109 0901 	add.w	r9, r9, #1
 800d57a:	e7d8      	b.n	800d52e <_printf_common+0x9e>

0800d57c <_printf_i>:
 800d57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d580:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d584:	460c      	mov	r4, r1
 800d586:	7e09      	ldrb	r1, [r1, #24]
 800d588:	b085      	sub	sp, #20
 800d58a:	296e      	cmp	r1, #110	; 0x6e
 800d58c:	4617      	mov	r7, r2
 800d58e:	4606      	mov	r6, r0
 800d590:	4698      	mov	r8, r3
 800d592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d594:	f000 80b3 	beq.w	800d6fe <_printf_i+0x182>
 800d598:	d822      	bhi.n	800d5e0 <_printf_i+0x64>
 800d59a:	2963      	cmp	r1, #99	; 0x63
 800d59c:	d036      	beq.n	800d60c <_printf_i+0x90>
 800d59e:	d80a      	bhi.n	800d5b6 <_printf_i+0x3a>
 800d5a0:	2900      	cmp	r1, #0
 800d5a2:	f000 80b9 	beq.w	800d718 <_printf_i+0x19c>
 800d5a6:	2958      	cmp	r1, #88	; 0x58
 800d5a8:	f000 8083 	beq.w	800d6b2 <_printf_i+0x136>
 800d5ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d5b4:	e032      	b.n	800d61c <_printf_i+0xa0>
 800d5b6:	2964      	cmp	r1, #100	; 0x64
 800d5b8:	d001      	beq.n	800d5be <_printf_i+0x42>
 800d5ba:	2969      	cmp	r1, #105	; 0x69
 800d5bc:	d1f6      	bne.n	800d5ac <_printf_i+0x30>
 800d5be:	6820      	ldr	r0, [r4, #0]
 800d5c0:	6813      	ldr	r3, [r2, #0]
 800d5c2:	0605      	lsls	r5, r0, #24
 800d5c4:	f103 0104 	add.w	r1, r3, #4
 800d5c8:	d52a      	bpl.n	800d620 <_printf_i+0xa4>
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6011      	str	r1, [r2, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	da03      	bge.n	800d5da <_printf_i+0x5e>
 800d5d2:	222d      	movs	r2, #45	; 0x2d
 800d5d4:	425b      	negs	r3, r3
 800d5d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d5da:	486f      	ldr	r0, [pc, #444]	; (800d798 <_printf_i+0x21c>)
 800d5dc:	220a      	movs	r2, #10
 800d5de:	e039      	b.n	800d654 <_printf_i+0xd8>
 800d5e0:	2973      	cmp	r1, #115	; 0x73
 800d5e2:	f000 809d 	beq.w	800d720 <_printf_i+0x1a4>
 800d5e6:	d808      	bhi.n	800d5fa <_printf_i+0x7e>
 800d5e8:	296f      	cmp	r1, #111	; 0x6f
 800d5ea:	d020      	beq.n	800d62e <_printf_i+0xb2>
 800d5ec:	2970      	cmp	r1, #112	; 0x70
 800d5ee:	d1dd      	bne.n	800d5ac <_printf_i+0x30>
 800d5f0:	6823      	ldr	r3, [r4, #0]
 800d5f2:	f043 0320 	orr.w	r3, r3, #32
 800d5f6:	6023      	str	r3, [r4, #0]
 800d5f8:	e003      	b.n	800d602 <_printf_i+0x86>
 800d5fa:	2975      	cmp	r1, #117	; 0x75
 800d5fc:	d017      	beq.n	800d62e <_printf_i+0xb2>
 800d5fe:	2978      	cmp	r1, #120	; 0x78
 800d600:	d1d4      	bne.n	800d5ac <_printf_i+0x30>
 800d602:	2378      	movs	r3, #120	; 0x78
 800d604:	4865      	ldr	r0, [pc, #404]	; (800d79c <_printf_i+0x220>)
 800d606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d60a:	e055      	b.n	800d6b8 <_printf_i+0x13c>
 800d60c:	6813      	ldr	r3, [r2, #0]
 800d60e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d612:	1d19      	adds	r1, r3, #4
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6011      	str	r1, [r2, #0]
 800d618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d61c:	2301      	movs	r3, #1
 800d61e:	e08c      	b.n	800d73a <_printf_i+0x1be>
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d626:	6011      	str	r1, [r2, #0]
 800d628:	bf18      	it	ne
 800d62a:	b21b      	sxthne	r3, r3
 800d62c:	e7cf      	b.n	800d5ce <_printf_i+0x52>
 800d62e:	6813      	ldr	r3, [r2, #0]
 800d630:	6825      	ldr	r5, [r4, #0]
 800d632:	1d18      	adds	r0, r3, #4
 800d634:	6010      	str	r0, [r2, #0]
 800d636:	0628      	lsls	r0, r5, #24
 800d638:	d501      	bpl.n	800d63e <_printf_i+0xc2>
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	e002      	b.n	800d644 <_printf_i+0xc8>
 800d63e:	0668      	lsls	r0, r5, #25
 800d640:	d5fb      	bpl.n	800d63a <_printf_i+0xbe>
 800d642:	881b      	ldrh	r3, [r3, #0]
 800d644:	296f      	cmp	r1, #111	; 0x6f
 800d646:	bf14      	ite	ne
 800d648:	220a      	movne	r2, #10
 800d64a:	2208      	moveq	r2, #8
 800d64c:	4852      	ldr	r0, [pc, #328]	; (800d798 <_printf_i+0x21c>)
 800d64e:	2100      	movs	r1, #0
 800d650:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d654:	6865      	ldr	r5, [r4, #4]
 800d656:	2d00      	cmp	r5, #0
 800d658:	60a5      	str	r5, [r4, #8]
 800d65a:	f2c0 8095 	blt.w	800d788 <_printf_i+0x20c>
 800d65e:	6821      	ldr	r1, [r4, #0]
 800d660:	f021 0104 	bic.w	r1, r1, #4
 800d664:	6021      	str	r1, [r4, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d13d      	bne.n	800d6e6 <_printf_i+0x16a>
 800d66a:	2d00      	cmp	r5, #0
 800d66c:	f040 808e 	bne.w	800d78c <_printf_i+0x210>
 800d670:	4665      	mov	r5, ip
 800d672:	2a08      	cmp	r2, #8
 800d674:	d10b      	bne.n	800d68e <_printf_i+0x112>
 800d676:	6823      	ldr	r3, [r4, #0]
 800d678:	07db      	lsls	r3, r3, #31
 800d67a:	d508      	bpl.n	800d68e <_printf_i+0x112>
 800d67c:	6923      	ldr	r3, [r4, #16]
 800d67e:	6862      	ldr	r2, [r4, #4]
 800d680:	429a      	cmp	r2, r3
 800d682:	bfde      	ittt	le
 800d684:	2330      	movle	r3, #48	; 0x30
 800d686:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d68a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d68e:	ebac 0305 	sub.w	r3, ip, r5
 800d692:	6123      	str	r3, [r4, #16]
 800d694:	f8cd 8000 	str.w	r8, [sp]
 800d698:	463b      	mov	r3, r7
 800d69a:	aa03      	add	r2, sp, #12
 800d69c:	4621      	mov	r1, r4
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f7ff fef6 	bl	800d490 <_printf_common>
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	d14d      	bne.n	800d744 <_printf_i+0x1c8>
 800d6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ac:	b005      	add	sp, #20
 800d6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6b2:	4839      	ldr	r0, [pc, #228]	; (800d798 <_printf_i+0x21c>)
 800d6b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d6b8:	6813      	ldr	r3, [r2, #0]
 800d6ba:	6821      	ldr	r1, [r4, #0]
 800d6bc:	1d1d      	adds	r5, r3, #4
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6015      	str	r5, [r2, #0]
 800d6c2:	060a      	lsls	r2, r1, #24
 800d6c4:	d50b      	bpl.n	800d6de <_printf_i+0x162>
 800d6c6:	07ca      	lsls	r2, r1, #31
 800d6c8:	bf44      	itt	mi
 800d6ca:	f041 0120 	orrmi.w	r1, r1, #32
 800d6ce:	6021      	strmi	r1, [r4, #0]
 800d6d0:	b91b      	cbnz	r3, 800d6da <_printf_i+0x15e>
 800d6d2:	6822      	ldr	r2, [r4, #0]
 800d6d4:	f022 0220 	bic.w	r2, r2, #32
 800d6d8:	6022      	str	r2, [r4, #0]
 800d6da:	2210      	movs	r2, #16
 800d6dc:	e7b7      	b.n	800d64e <_printf_i+0xd2>
 800d6de:	064d      	lsls	r5, r1, #25
 800d6e0:	bf48      	it	mi
 800d6e2:	b29b      	uxthmi	r3, r3
 800d6e4:	e7ef      	b.n	800d6c6 <_printf_i+0x14a>
 800d6e6:	4665      	mov	r5, ip
 800d6e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6ec:	fb02 3311 	mls	r3, r2, r1, r3
 800d6f0:	5cc3      	ldrb	r3, [r0, r3]
 800d6f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	2900      	cmp	r1, #0
 800d6fa:	d1f5      	bne.n	800d6e8 <_printf_i+0x16c>
 800d6fc:	e7b9      	b.n	800d672 <_printf_i+0xf6>
 800d6fe:	6813      	ldr	r3, [r2, #0]
 800d700:	6825      	ldr	r5, [r4, #0]
 800d702:	1d18      	adds	r0, r3, #4
 800d704:	6961      	ldr	r1, [r4, #20]
 800d706:	6010      	str	r0, [r2, #0]
 800d708:	0628      	lsls	r0, r5, #24
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	d501      	bpl.n	800d712 <_printf_i+0x196>
 800d70e:	6019      	str	r1, [r3, #0]
 800d710:	e002      	b.n	800d718 <_printf_i+0x19c>
 800d712:	066a      	lsls	r2, r5, #25
 800d714:	d5fb      	bpl.n	800d70e <_printf_i+0x192>
 800d716:	8019      	strh	r1, [r3, #0]
 800d718:	2300      	movs	r3, #0
 800d71a:	4665      	mov	r5, ip
 800d71c:	6123      	str	r3, [r4, #16]
 800d71e:	e7b9      	b.n	800d694 <_printf_i+0x118>
 800d720:	6813      	ldr	r3, [r2, #0]
 800d722:	1d19      	adds	r1, r3, #4
 800d724:	6011      	str	r1, [r2, #0]
 800d726:	681d      	ldr	r5, [r3, #0]
 800d728:	6862      	ldr	r2, [r4, #4]
 800d72a:	2100      	movs	r1, #0
 800d72c:	4628      	mov	r0, r5
 800d72e:	f000 f837 	bl	800d7a0 <memchr>
 800d732:	b108      	cbz	r0, 800d738 <_printf_i+0x1bc>
 800d734:	1b40      	subs	r0, r0, r5
 800d736:	6060      	str	r0, [r4, #4]
 800d738:	6863      	ldr	r3, [r4, #4]
 800d73a:	6123      	str	r3, [r4, #16]
 800d73c:	2300      	movs	r3, #0
 800d73e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d742:	e7a7      	b.n	800d694 <_printf_i+0x118>
 800d744:	6923      	ldr	r3, [r4, #16]
 800d746:	462a      	mov	r2, r5
 800d748:	4639      	mov	r1, r7
 800d74a:	4630      	mov	r0, r6
 800d74c:	47c0      	blx	r8
 800d74e:	3001      	adds	r0, #1
 800d750:	d0aa      	beq.n	800d6a8 <_printf_i+0x12c>
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	079b      	lsls	r3, r3, #30
 800d756:	d413      	bmi.n	800d780 <_printf_i+0x204>
 800d758:	68e0      	ldr	r0, [r4, #12]
 800d75a:	9b03      	ldr	r3, [sp, #12]
 800d75c:	4298      	cmp	r0, r3
 800d75e:	bfb8      	it	lt
 800d760:	4618      	movlt	r0, r3
 800d762:	e7a3      	b.n	800d6ac <_printf_i+0x130>
 800d764:	2301      	movs	r3, #1
 800d766:	464a      	mov	r2, r9
 800d768:	4639      	mov	r1, r7
 800d76a:	4630      	mov	r0, r6
 800d76c:	47c0      	blx	r8
 800d76e:	3001      	adds	r0, #1
 800d770:	d09a      	beq.n	800d6a8 <_printf_i+0x12c>
 800d772:	3501      	adds	r5, #1
 800d774:	68e3      	ldr	r3, [r4, #12]
 800d776:	9a03      	ldr	r2, [sp, #12]
 800d778:	1a9b      	subs	r3, r3, r2
 800d77a:	42ab      	cmp	r3, r5
 800d77c:	dcf2      	bgt.n	800d764 <_printf_i+0x1e8>
 800d77e:	e7eb      	b.n	800d758 <_printf_i+0x1dc>
 800d780:	2500      	movs	r5, #0
 800d782:	f104 0919 	add.w	r9, r4, #25
 800d786:	e7f5      	b.n	800d774 <_printf_i+0x1f8>
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d1ac      	bne.n	800d6e6 <_printf_i+0x16a>
 800d78c:	7803      	ldrb	r3, [r0, #0]
 800d78e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d792:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d796:	e76c      	b.n	800d672 <_printf_i+0xf6>
 800d798:	0800db51 	.word	0x0800db51
 800d79c:	0800db62 	.word	0x0800db62

0800d7a0 <memchr>:
 800d7a0:	b510      	push	{r4, lr}
 800d7a2:	b2c9      	uxtb	r1, r1
 800d7a4:	4402      	add	r2, r0
 800d7a6:	4290      	cmp	r0, r2
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	d101      	bne.n	800d7b0 <memchr+0x10>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e003      	b.n	800d7b8 <memchr+0x18>
 800d7b0:	781c      	ldrb	r4, [r3, #0]
 800d7b2:	3001      	adds	r0, #1
 800d7b4:	428c      	cmp	r4, r1
 800d7b6:	d1f6      	bne.n	800d7a6 <memchr+0x6>
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	bd10      	pop	{r4, pc}

0800d7bc <memcpy>:
 800d7bc:	b510      	push	{r4, lr}
 800d7be:	1e43      	subs	r3, r0, #1
 800d7c0:	440a      	add	r2, r1
 800d7c2:	4291      	cmp	r1, r2
 800d7c4:	d100      	bne.n	800d7c8 <memcpy+0xc>
 800d7c6:	bd10      	pop	{r4, pc}
 800d7c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7d0:	e7f7      	b.n	800d7c2 <memcpy+0x6>

0800d7d2 <memmove>:
 800d7d2:	4288      	cmp	r0, r1
 800d7d4:	b510      	push	{r4, lr}
 800d7d6:	eb01 0302 	add.w	r3, r1, r2
 800d7da:	d807      	bhi.n	800d7ec <memmove+0x1a>
 800d7dc:	1e42      	subs	r2, r0, #1
 800d7de:	4299      	cmp	r1, r3
 800d7e0:	d00a      	beq.n	800d7f8 <memmove+0x26>
 800d7e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d7ea:	e7f8      	b.n	800d7de <memmove+0xc>
 800d7ec:	4283      	cmp	r3, r0
 800d7ee:	d9f5      	bls.n	800d7dc <memmove+0xa>
 800d7f0:	1881      	adds	r1, r0, r2
 800d7f2:	1ad2      	subs	r2, r2, r3
 800d7f4:	42d3      	cmn	r3, r2
 800d7f6:	d100      	bne.n	800d7fa <memmove+0x28>
 800d7f8:	bd10      	pop	{r4, pc}
 800d7fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d802:	e7f7      	b.n	800d7f4 <memmove+0x22>

0800d804 <_free_r>:
 800d804:	b538      	push	{r3, r4, r5, lr}
 800d806:	4605      	mov	r5, r0
 800d808:	2900      	cmp	r1, #0
 800d80a:	d043      	beq.n	800d894 <_free_r+0x90>
 800d80c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d810:	1f0c      	subs	r4, r1, #4
 800d812:	2b00      	cmp	r3, #0
 800d814:	bfb8      	it	lt
 800d816:	18e4      	addlt	r4, r4, r3
 800d818:	f000 f8d0 	bl	800d9bc <__malloc_lock>
 800d81c:	4a1e      	ldr	r2, [pc, #120]	; (800d898 <_free_r+0x94>)
 800d81e:	6813      	ldr	r3, [r2, #0]
 800d820:	4610      	mov	r0, r2
 800d822:	b933      	cbnz	r3, 800d832 <_free_r+0x2e>
 800d824:	6063      	str	r3, [r4, #4]
 800d826:	6014      	str	r4, [r2, #0]
 800d828:	4628      	mov	r0, r5
 800d82a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d82e:	f000 b8c6 	b.w	800d9be <__malloc_unlock>
 800d832:	42a3      	cmp	r3, r4
 800d834:	d90b      	bls.n	800d84e <_free_r+0x4a>
 800d836:	6821      	ldr	r1, [r4, #0]
 800d838:	1862      	adds	r2, r4, r1
 800d83a:	4293      	cmp	r3, r2
 800d83c:	bf01      	itttt	eq
 800d83e:	681a      	ldreq	r2, [r3, #0]
 800d840:	685b      	ldreq	r3, [r3, #4]
 800d842:	1852      	addeq	r2, r2, r1
 800d844:	6022      	streq	r2, [r4, #0]
 800d846:	6063      	str	r3, [r4, #4]
 800d848:	6004      	str	r4, [r0, #0]
 800d84a:	e7ed      	b.n	800d828 <_free_r+0x24>
 800d84c:	4613      	mov	r3, r2
 800d84e:	685a      	ldr	r2, [r3, #4]
 800d850:	b10a      	cbz	r2, 800d856 <_free_r+0x52>
 800d852:	42a2      	cmp	r2, r4
 800d854:	d9fa      	bls.n	800d84c <_free_r+0x48>
 800d856:	6819      	ldr	r1, [r3, #0]
 800d858:	1858      	adds	r0, r3, r1
 800d85a:	42a0      	cmp	r0, r4
 800d85c:	d10b      	bne.n	800d876 <_free_r+0x72>
 800d85e:	6820      	ldr	r0, [r4, #0]
 800d860:	4401      	add	r1, r0
 800d862:	1858      	adds	r0, r3, r1
 800d864:	4282      	cmp	r2, r0
 800d866:	6019      	str	r1, [r3, #0]
 800d868:	d1de      	bne.n	800d828 <_free_r+0x24>
 800d86a:	6810      	ldr	r0, [r2, #0]
 800d86c:	6852      	ldr	r2, [r2, #4]
 800d86e:	4401      	add	r1, r0
 800d870:	6019      	str	r1, [r3, #0]
 800d872:	605a      	str	r2, [r3, #4]
 800d874:	e7d8      	b.n	800d828 <_free_r+0x24>
 800d876:	d902      	bls.n	800d87e <_free_r+0x7a>
 800d878:	230c      	movs	r3, #12
 800d87a:	602b      	str	r3, [r5, #0]
 800d87c:	e7d4      	b.n	800d828 <_free_r+0x24>
 800d87e:	6820      	ldr	r0, [r4, #0]
 800d880:	1821      	adds	r1, r4, r0
 800d882:	428a      	cmp	r2, r1
 800d884:	bf01      	itttt	eq
 800d886:	6811      	ldreq	r1, [r2, #0]
 800d888:	6852      	ldreq	r2, [r2, #4]
 800d88a:	1809      	addeq	r1, r1, r0
 800d88c:	6021      	streq	r1, [r4, #0]
 800d88e:	6062      	str	r2, [r4, #4]
 800d890:	605c      	str	r4, [r3, #4]
 800d892:	e7c9      	b.n	800d828 <_free_r+0x24>
 800d894:	bd38      	pop	{r3, r4, r5, pc}
 800d896:	bf00      	nop
 800d898:	20000d7c 	.word	0x20000d7c

0800d89c <_malloc_r>:
 800d89c:	b570      	push	{r4, r5, r6, lr}
 800d89e:	1ccd      	adds	r5, r1, #3
 800d8a0:	f025 0503 	bic.w	r5, r5, #3
 800d8a4:	3508      	adds	r5, #8
 800d8a6:	2d0c      	cmp	r5, #12
 800d8a8:	bf38      	it	cc
 800d8aa:	250c      	movcc	r5, #12
 800d8ac:	2d00      	cmp	r5, #0
 800d8ae:	4606      	mov	r6, r0
 800d8b0:	db01      	blt.n	800d8b6 <_malloc_r+0x1a>
 800d8b2:	42a9      	cmp	r1, r5
 800d8b4:	d903      	bls.n	800d8be <_malloc_r+0x22>
 800d8b6:	230c      	movs	r3, #12
 800d8b8:	6033      	str	r3, [r6, #0]
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	bd70      	pop	{r4, r5, r6, pc}
 800d8be:	f000 f87d 	bl	800d9bc <__malloc_lock>
 800d8c2:	4a21      	ldr	r2, [pc, #132]	; (800d948 <_malloc_r+0xac>)
 800d8c4:	6814      	ldr	r4, [r2, #0]
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	b991      	cbnz	r1, 800d8f0 <_malloc_r+0x54>
 800d8ca:	4c20      	ldr	r4, [pc, #128]	; (800d94c <_malloc_r+0xb0>)
 800d8cc:	6823      	ldr	r3, [r4, #0]
 800d8ce:	b91b      	cbnz	r3, 800d8d8 <_malloc_r+0x3c>
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	f000 f863 	bl	800d99c <_sbrk_r>
 800d8d6:	6020      	str	r0, [r4, #0]
 800d8d8:	4629      	mov	r1, r5
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f000 f85e 	bl	800d99c <_sbrk_r>
 800d8e0:	1c43      	adds	r3, r0, #1
 800d8e2:	d124      	bne.n	800d92e <_malloc_r+0x92>
 800d8e4:	230c      	movs	r3, #12
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	6033      	str	r3, [r6, #0]
 800d8ea:	f000 f868 	bl	800d9be <__malloc_unlock>
 800d8ee:	e7e4      	b.n	800d8ba <_malloc_r+0x1e>
 800d8f0:	680b      	ldr	r3, [r1, #0]
 800d8f2:	1b5b      	subs	r3, r3, r5
 800d8f4:	d418      	bmi.n	800d928 <_malloc_r+0x8c>
 800d8f6:	2b0b      	cmp	r3, #11
 800d8f8:	d90f      	bls.n	800d91a <_malloc_r+0x7e>
 800d8fa:	600b      	str	r3, [r1, #0]
 800d8fc:	18cc      	adds	r4, r1, r3
 800d8fe:	50cd      	str	r5, [r1, r3]
 800d900:	4630      	mov	r0, r6
 800d902:	f000 f85c 	bl	800d9be <__malloc_unlock>
 800d906:	f104 000b 	add.w	r0, r4, #11
 800d90a:	1d23      	adds	r3, r4, #4
 800d90c:	f020 0007 	bic.w	r0, r0, #7
 800d910:	1ac3      	subs	r3, r0, r3
 800d912:	d0d3      	beq.n	800d8bc <_malloc_r+0x20>
 800d914:	425a      	negs	r2, r3
 800d916:	50e2      	str	r2, [r4, r3]
 800d918:	e7d0      	b.n	800d8bc <_malloc_r+0x20>
 800d91a:	684b      	ldr	r3, [r1, #4]
 800d91c:	428c      	cmp	r4, r1
 800d91e:	bf16      	itet	ne
 800d920:	6063      	strne	r3, [r4, #4]
 800d922:	6013      	streq	r3, [r2, #0]
 800d924:	460c      	movne	r4, r1
 800d926:	e7eb      	b.n	800d900 <_malloc_r+0x64>
 800d928:	460c      	mov	r4, r1
 800d92a:	6849      	ldr	r1, [r1, #4]
 800d92c:	e7cc      	b.n	800d8c8 <_malloc_r+0x2c>
 800d92e:	1cc4      	adds	r4, r0, #3
 800d930:	f024 0403 	bic.w	r4, r4, #3
 800d934:	42a0      	cmp	r0, r4
 800d936:	d005      	beq.n	800d944 <_malloc_r+0xa8>
 800d938:	1a21      	subs	r1, r4, r0
 800d93a:	4630      	mov	r0, r6
 800d93c:	f000 f82e 	bl	800d99c <_sbrk_r>
 800d940:	3001      	adds	r0, #1
 800d942:	d0cf      	beq.n	800d8e4 <_malloc_r+0x48>
 800d944:	6025      	str	r5, [r4, #0]
 800d946:	e7db      	b.n	800d900 <_malloc_r+0x64>
 800d948:	20000d7c 	.word	0x20000d7c
 800d94c:	20000d80 	.word	0x20000d80

0800d950 <_realloc_r>:
 800d950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d952:	4607      	mov	r7, r0
 800d954:	4614      	mov	r4, r2
 800d956:	460e      	mov	r6, r1
 800d958:	b921      	cbnz	r1, 800d964 <_realloc_r+0x14>
 800d95a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d95e:	4611      	mov	r1, r2
 800d960:	f7ff bf9c 	b.w	800d89c <_malloc_r>
 800d964:	b922      	cbnz	r2, 800d970 <_realloc_r+0x20>
 800d966:	f7ff ff4d 	bl	800d804 <_free_r>
 800d96a:	4625      	mov	r5, r4
 800d96c:	4628      	mov	r0, r5
 800d96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d970:	f000 f826 	bl	800d9c0 <_malloc_usable_size_r>
 800d974:	42a0      	cmp	r0, r4
 800d976:	d20f      	bcs.n	800d998 <_realloc_r+0x48>
 800d978:	4621      	mov	r1, r4
 800d97a:	4638      	mov	r0, r7
 800d97c:	f7ff ff8e 	bl	800d89c <_malloc_r>
 800d980:	4605      	mov	r5, r0
 800d982:	2800      	cmp	r0, #0
 800d984:	d0f2      	beq.n	800d96c <_realloc_r+0x1c>
 800d986:	4631      	mov	r1, r6
 800d988:	4622      	mov	r2, r4
 800d98a:	f7ff ff17 	bl	800d7bc <memcpy>
 800d98e:	4631      	mov	r1, r6
 800d990:	4638      	mov	r0, r7
 800d992:	f7ff ff37 	bl	800d804 <_free_r>
 800d996:	e7e9      	b.n	800d96c <_realloc_r+0x1c>
 800d998:	4635      	mov	r5, r6
 800d99a:	e7e7      	b.n	800d96c <_realloc_r+0x1c>

0800d99c <_sbrk_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	2300      	movs	r3, #0
 800d9a0:	4c05      	ldr	r4, [pc, #20]	; (800d9b8 <_sbrk_r+0x1c>)
 800d9a2:	4605      	mov	r5, r0
 800d9a4:	4608      	mov	r0, r1
 800d9a6:	6023      	str	r3, [r4, #0]
 800d9a8:	f7f7 fdf8 	bl	800559c <_sbrk>
 800d9ac:	1c43      	adds	r3, r0, #1
 800d9ae:	d102      	bne.n	800d9b6 <_sbrk_r+0x1a>
 800d9b0:	6823      	ldr	r3, [r4, #0]
 800d9b2:	b103      	cbz	r3, 800d9b6 <_sbrk_r+0x1a>
 800d9b4:	602b      	str	r3, [r5, #0]
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	20002138 	.word	0x20002138

0800d9bc <__malloc_lock>:
 800d9bc:	4770      	bx	lr

0800d9be <__malloc_unlock>:
 800d9be:	4770      	bx	lr

0800d9c0 <_malloc_usable_size_r>:
 800d9c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9c4:	1f18      	subs	r0, r3, #4
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	bfbc      	itt	lt
 800d9ca:	580b      	ldrlt	r3, [r1, r0]
 800d9cc:	18c0      	addlt	r0, r0, r3
 800d9ce:	4770      	bx	lr

0800d9d0 <_init>:
 800d9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d2:	bf00      	nop
 800d9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9d6:	bc08      	pop	{r3}
 800d9d8:	469e      	mov	lr, r3
 800d9da:	4770      	bx	lr

0800d9dc <_fini>:
 800d9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9de:	bf00      	nop
 800d9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9e2:	bc08      	pop	{r3}
 800d9e4:	469e      	mov	lr, r3
 800d9e6:	4770      	bx	lr
