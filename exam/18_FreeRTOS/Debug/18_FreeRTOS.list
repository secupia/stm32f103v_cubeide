
18_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d230  080051f0  080051f0  000051f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08012420  08012420  00012420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129d0  080129d0  00020378  2**0
                  CONTENTS
  4 .ARM          00000000  080129d0  080129d0  00020378  2**0
                  CONTENTS
  5 .preinit_array 00000000  080129d0  080129d0  00020378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129d0  080129d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080129d4  080129d4  000129d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  080129d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b64  20000378  08012d50  00020378  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003edc  08012d50  00023edc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa1b  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006545  00000000  00000000  0004adbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001768  00000000  00000000  00051308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  00052a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fcaa  00000000  00000000  00053f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020507  00000000  00000000  00073bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086978  00000000  00000000  000940d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011aa49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d58  00000000  00000000  0011aac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080051f0 <__do_global_dtors_aux>:
 80051f0:	b510      	push	{r4, lr}
 80051f2:	4c05      	ldr	r4, [pc, #20]	; (8005208 <__do_global_dtors_aux+0x18>)
 80051f4:	7823      	ldrb	r3, [r4, #0]
 80051f6:	b933      	cbnz	r3, 8005206 <__do_global_dtors_aux+0x16>
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <__do_global_dtors_aux+0x1c>)
 80051fa:	b113      	cbz	r3, 8005202 <__do_global_dtors_aux+0x12>
 80051fc:	4804      	ldr	r0, [pc, #16]	; (8005210 <__do_global_dtors_aux+0x20>)
 80051fe:	f3af 8000 	nop.w
 8005202:	2301      	movs	r3, #1
 8005204:	7023      	strb	r3, [r4, #0]
 8005206:	bd10      	pop	{r4, pc}
 8005208:	20000378 	.word	0x20000378
 800520c:	00000000 	.word	0x00000000
 8005210:	08012408 	.word	0x08012408

08005214 <frame_dummy>:
 8005214:	b508      	push	{r3, lr}
 8005216:	4b03      	ldr	r3, [pc, #12]	; (8005224 <frame_dummy+0x10>)
 8005218:	b11b      	cbz	r3, 8005222 <frame_dummy+0xe>
 800521a:	4903      	ldr	r1, [pc, #12]	; (8005228 <frame_dummy+0x14>)
 800521c:	4803      	ldr	r0, [pc, #12]	; (800522c <frame_dummy+0x18>)
 800521e:	f3af 8000 	nop.w
 8005222:	bd08      	pop	{r3, pc}
 8005224:	00000000 	.word	0x00000000
 8005228:	2000037c 	.word	0x2000037c
 800522c:	08012408 	.word	0x08012408

08005230 <strcmp>:
 8005230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005238:	2a01      	cmp	r2, #1
 800523a:	bf28      	it	cs
 800523c:	429a      	cmpcs	r2, r3
 800523e:	d0f7      	beq.n	8005230 <strcmp>
 8005240:	1ad0      	subs	r0, r2, r3
 8005242:	4770      	bx	lr

08005244 <strlen>:
 8005244:	4603      	mov	r3, r0
 8005246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800524a:	2a00      	cmp	r2, #0
 800524c:	d1fb      	bne.n	8005246 <strlen+0x2>
 800524e:	1a18      	subs	r0, r3, r0
 8005250:	3801      	subs	r0, #1
 8005252:	4770      	bx	lr

08005254 <__aeabi_drsub>:
 8005254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005258:	e002      	b.n	8005260 <__adddf3>
 800525a:	bf00      	nop

0800525c <__aeabi_dsub>:
 800525c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005260 <__adddf3>:
 8005260:	b530      	push	{r4, r5, lr}
 8005262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800526a:	ea94 0f05 	teq	r4, r5
 800526e:	bf08      	it	eq
 8005270:	ea90 0f02 	teqeq	r0, r2
 8005274:	bf1f      	itttt	ne
 8005276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800527a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800527e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005286:	f000 80e2 	beq.w	800544e <__adddf3+0x1ee>
 800528a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800528e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005292:	bfb8      	it	lt
 8005294:	426d      	neglt	r5, r5
 8005296:	dd0c      	ble.n	80052b2 <__adddf3+0x52>
 8005298:	442c      	add	r4, r5
 800529a:	ea80 0202 	eor.w	r2, r0, r2
 800529e:	ea81 0303 	eor.w	r3, r1, r3
 80052a2:	ea82 0000 	eor.w	r0, r2, r0
 80052a6:	ea83 0101 	eor.w	r1, r3, r1
 80052aa:	ea80 0202 	eor.w	r2, r0, r2
 80052ae:	ea81 0303 	eor.w	r3, r1, r3
 80052b2:	2d36      	cmp	r5, #54	; 0x36
 80052b4:	bf88      	it	hi
 80052b6:	bd30      	pophi	{r4, r5, pc}
 80052b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80052bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80052c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80052c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80052c8:	d002      	beq.n	80052d0 <__adddf3+0x70>
 80052ca:	4240      	negs	r0, r0
 80052cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80052d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80052d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80052d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80052dc:	d002      	beq.n	80052e4 <__adddf3+0x84>
 80052de:	4252      	negs	r2, r2
 80052e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80052e4:	ea94 0f05 	teq	r4, r5
 80052e8:	f000 80a7 	beq.w	800543a <__adddf3+0x1da>
 80052ec:	f1a4 0401 	sub.w	r4, r4, #1
 80052f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80052f4:	db0d      	blt.n	8005312 <__adddf3+0xb2>
 80052f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80052fa:	fa22 f205 	lsr.w	r2, r2, r5
 80052fe:	1880      	adds	r0, r0, r2
 8005300:	f141 0100 	adc.w	r1, r1, #0
 8005304:	fa03 f20e 	lsl.w	r2, r3, lr
 8005308:	1880      	adds	r0, r0, r2
 800530a:	fa43 f305 	asr.w	r3, r3, r5
 800530e:	4159      	adcs	r1, r3
 8005310:	e00e      	b.n	8005330 <__adddf3+0xd0>
 8005312:	f1a5 0520 	sub.w	r5, r5, #32
 8005316:	f10e 0e20 	add.w	lr, lr, #32
 800531a:	2a01      	cmp	r2, #1
 800531c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005320:	bf28      	it	cs
 8005322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005326:	fa43 f305 	asr.w	r3, r3, r5
 800532a:	18c0      	adds	r0, r0, r3
 800532c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005334:	d507      	bpl.n	8005346 <__adddf3+0xe6>
 8005336:	f04f 0e00 	mov.w	lr, #0
 800533a:	f1dc 0c00 	rsbs	ip, ip, #0
 800533e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005342:	eb6e 0101 	sbc.w	r1, lr, r1
 8005346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800534a:	d31b      	bcc.n	8005384 <__adddf3+0x124>
 800534c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005350:	d30c      	bcc.n	800536c <__adddf3+0x10c>
 8005352:	0849      	lsrs	r1, r1, #1
 8005354:	ea5f 0030 	movs.w	r0, r0, rrx
 8005358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800535c:	f104 0401 	add.w	r4, r4, #1
 8005360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005368:	f080 809a 	bcs.w	80054a0 <__adddf3+0x240>
 800536c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005370:	bf08      	it	eq
 8005372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005376:	f150 0000 	adcs.w	r0, r0, #0
 800537a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800537e:	ea41 0105 	orr.w	r1, r1, r5
 8005382:	bd30      	pop	{r4, r5, pc}
 8005384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005388:	4140      	adcs	r0, r0
 800538a:	eb41 0101 	adc.w	r1, r1, r1
 800538e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005392:	f1a4 0401 	sub.w	r4, r4, #1
 8005396:	d1e9      	bne.n	800536c <__adddf3+0x10c>
 8005398:	f091 0f00 	teq	r1, #0
 800539c:	bf04      	itt	eq
 800539e:	4601      	moveq	r1, r0
 80053a0:	2000      	moveq	r0, #0
 80053a2:	fab1 f381 	clz	r3, r1
 80053a6:	bf08      	it	eq
 80053a8:	3320      	addeq	r3, #32
 80053aa:	f1a3 030b 	sub.w	r3, r3, #11
 80053ae:	f1b3 0220 	subs.w	r2, r3, #32
 80053b2:	da0c      	bge.n	80053ce <__adddf3+0x16e>
 80053b4:	320c      	adds	r2, #12
 80053b6:	dd08      	ble.n	80053ca <__adddf3+0x16a>
 80053b8:	f102 0c14 	add.w	ip, r2, #20
 80053bc:	f1c2 020c 	rsb	r2, r2, #12
 80053c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80053c4:	fa21 f102 	lsr.w	r1, r1, r2
 80053c8:	e00c      	b.n	80053e4 <__adddf3+0x184>
 80053ca:	f102 0214 	add.w	r2, r2, #20
 80053ce:	bfd8      	it	le
 80053d0:	f1c2 0c20 	rsble	ip, r2, #32
 80053d4:	fa01 f102 	lsl.w	r1, r1, r2
 80053d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80053dc:	bfdc      	itt	le
 80053de:	ea41 010c 	orrle.w	r1, r1, ip
 80053e2:	4090      	lslle	r0, r2
 80053e4:	1ae4      	subs	r4, r4, r3
 80053e6:	bfa2      	ittt	ge
 80053e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80053ec:	4329      	orrge	r1, r5
 80053ee:	bd30      	popge	{r4, r5, pc}
 80053f0:	ea6f 0404 	mvn.w	r4, r4
 80053f4:	3c1f      	subs	r4, #31
 80053f6:	da1c      	bge.n	8005432 <__adddf3+0x1d2>
 80053f8:	340c      	adds	r4, #12
 80053fa:	dc0e      	bgt.n	800541a <__adddf3+0x1ba>
 80053fc:	f104 0414 	add.w	r4, r4, #20
 8005400:	f1c4 0220 	rsb	r2, r4, #32
 8005404:	fa20 f004 	lsr.w	r0, r0, r4
 8005408:	fa01 f302 	lsl.w	r3, r1, r2
 800540c:	ea40 0003 	orr.w	r0, r0, r3
 8005410:	fa21 f304 	lsr.w	r3, r1, r4
 8005414:	ea45 0103 	orr.w	r1, r5, r3
 8005418:	bd30      	pop	{r4, r5, pc}
 800541a:	f1c4 040c 	rsb	r4, r4, #12
 800541e:	f1c4 0220 	rsb	r2, r4, #32
 8005422:	fa20 f002 	lsr.w	r0, r0, r2
 8005426:	fa01 f304 	lsl.w	r3, r1, r4
 800542a:	ea40 0003 	orr.w	r0, r0, r3
 800542e:	4629      	mov	r1, r5
 8005430:	bd30      	pop	{r4, r5, pc}
 8005432:	fa21 f004 	lsr.w	r0, r1, r4
 8005436:	4629      	mov	r1, r5
 8005438:	bd30      	pop	{r4, r5, pc}
 800543a:	f094 0f00 	teq	r4, #0
 800543e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005442:	bf06      	itte	eq
 8005444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005448:	3401      	addeq	r4, #1
 800544a:	3d01      	subne	r5, #1
 800544c:	e74e      	b.n	80052ec <__adddf3+0x8c>
 800544e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005452:	bf18      	it	ne
 8005454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005458:	d029      	beq.n	80054ae <__adddf3+0x24e>
 800545a:	ea94 0f05 	teq	r4, r5
 800545e:	bf08      	it	eq
 8005460:	ea90 0f02 	teqeq	r0, r2
 8005464:	d005      	beq.n	8005472 <__adddf3+0x212>
 8005466:	ea54 0c00 	orrs.w	ip, r4, r0
 800546a:	bf04      	itt	eq
 800546c:	4619      	moveq	r1, r3
 800546e:	4610      	moveq	r0, r2
 8005470:	bd30      	pop	{r4, r5, pc}
 8005472:	ea91 0f03 	teq	r1, r3
 8005476:	bf1e      	ittt	ne
 8005478:	2100      	movne	r1, #0
 800547a:	2000      	movne	r0, #0
 800547c:	bd30      	popne	{r4, r5, pc}
 800547e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005482:	d105      	bne.n	8005490 <__adddf3+0x230>
 8005484:	0040      	lsls	r0, r0, #1
 8005486:	4149      	adcs	r1, r1
 8005488:	bf28      	it	cs
 800548a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800548e:	bd30      	pop	{r4, r5, pc}
 8005490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005494:	bf3c      	itt	cc
 8005496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800549a:	bd30      	popcc	{r4, r5, pc}
 800549c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80054a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80054a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80054a8:	f04f 0000 	mov.w	r0, #0
 80054ac:	bd30      	pop	{r4, r5, pc}
 80054ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80054b2:	bf1a      	itte	ne
 80054b4:	4619      	movne	r1, r3
 80054b6:	4610      	movne	r0, r2
 80054b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80054bc:	bf1c      	itt	ne
 80054be:	460b      	movne	r3, r1
 80054c0:	4602      	movne	r2, r0
 80054c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80054c6:	bf06      	itte	eq
 80054c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80054cc:	ea91 0f03 	teqeq	r1, r3
 80054d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80054d4:	bd30      	pop	{r4, r5, pc}
 80054d6:	bf00      	nop

080054d8 <__aeabi_ui2d>:
 80054d8:	f090 0f00 	teq	r0, #0
 80054dc:	bf04      	itt	eq
 80054de:	2100      	moveq	r1, #0
 80054e0:	4770      	bxeq	lr
 80054e2:	b530      	push	{r4, r5, lr}
 80054e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80054e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80054ec:	f04f 0500 	mov.w	r5, #0
 80054f0:	f04f 0100 	mov.w	r1, #0
 80054f4:	e750      	b.n	8005398 <__adddf3+0x138>
 80054f6:	bf00      	nop

080054f8 <__aeabi_i2d>:
 80054f8:	f090 0f00 	teq	r0, #0
 80054fc:	bf04      	itt	eq
 80054fe:	2100      	moveq	r1, #0
 8005500:	4770      	bxeq	lr
 8005502:	b530      	push	{r4, r5, lr}
 8005504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800550c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005510:	bf48      	it	mi
 8005512:	4240      	negmi	r0, r0
 8005514:	f04f 0100 	mov.w	r1, #0
 8005518:	e73e      	b.n	8005398 <__adddf3+0x138>
 800551a:	bf00      	nop

0800551c <__aeabi_f2d>:
 800551c:	0042      	lsls	r2, r0, #1
 800551e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005522:	ea4f 0131 	mov.w	r1, r1, rrx
 8005526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800552a:	bf1f      	itttt	ne
 800552c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005538:	4770      	bxne	lr
 800553a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800553e:	bf08      	it	eq
 8005540:	4770      	bxeq	lr
 8005542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005546:	bf04      	itt	eq
 8005548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800554c:	4770      	bxeq	lr
 800554e:	b530      	push	{r4, r5, lr}
 8005550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800555c:	e71c      	b.n	8005398 <__adddf3+0x138>
 800555e:	bf00      	nop

08005560 <__aeabi_ul2d>:
 8005560:	ea50 0201 	orrs.w	r2, r0, r1
 8005564:	bf08      	it	eq
 8005566:	4770      	bxeq	lr
 8005568:	b530      	push	{r4, r5, lr}
 800556a:	f04f 0500 	mov.w	r5, #0
 800556e:	e00a      	b.n	8005586 <__aeabi_l2d+0x16>

08005570 <__aeabi_l2d>:
 8005570:	ea50 0201 	orrs.w	r2, r0, r1
 8005574:	bf08      	it	eq
 8005576:	4770      	bxeq	lr
 8005578:	b530      	push	{r4, r5, lr}
 800557a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800557e:	d502      	bpl.n	8005586 <__aeabi_l2d+0x16>
 8005580:	4240      	negs	r0, r0
 8005582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800558a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800558e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005592:	f43f aed8 	beq.w	8005346 <__adddf3+0xe6>
 8005596:	f04f 0203 	mov.w	r2, #3
 800559a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800559e:	bf18      	it	ne
 80055a0:	3203      	addne	r2, #3
 80055a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80055a6:	bf18      	it	ne
 80055a8:	3203      	addne	r2, #3
 80055aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80055ae:	f1c2 0320 	rsb	r3, r2, #32
 80055b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80055b6:	fa20 f002 	lsr.w	r0, r0, r2
 80055ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80055be:	ea40 000e 	orr.w	r0, r0, lr
 80055c2:	fa21 f102 	lsr.w	r1, r1, r2
 80055c6:	4414      	add	r4, r2
 80055c8:	e6bd      	b.n	8005346 <__adddf3+0xe6>
 80055ca:	bf00      	nop

080055cc <__aeabi_dmul>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80055d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80055d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80055da:	bf1d      	ittte	ne
 80055dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80055e0:	ea94 0f0c 	teqne	r4, ip
 80055e4:	ea95 0f0c 	teqne	r5, ip
 80055e8:	f000 f8de 	bleq	80057a8 <__aeabi_dmul+0x1dc>
 80055ec:	442c      	add	r4, r5
 80055ee:	ea81 0603 	eor.w	r6, r1, r3
 80055f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80055f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80055fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80055fe:	bf18      	it	ne
 8005600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800560c:	d038      	beq.n	8005680 <__aeabi_dmul+0xb4>
 800560e:	fba0 ce02 	umull	ip, lr, r0, r2
 8005612:	f04f 0500 	mov.w	r5, #0
 8005616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800561a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800561e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005622:	f04f 0600 	mov.w	r6, #0
 8005626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800562a:	f09c 0f00 	teq	ip, #0
 800562e:	bf18      	it	ne
 8005630:	f04e 0e01 	orrne.w	lr, lr, #1
 8005634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800563c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005640:	d204      	bcs.n	800564c <__aeabi_dmul+0x80>
 8005642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005646:	416d      	adcs	r5, r5
 8005648:	eb46 0606 	adc.w	r6, r6, r6
 800564c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800565c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005664:	bf88      	it	hi
 8005666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800566a:	d81e      	bhi.n	80056aa <__aeabi_dmul+0xde>
 800566c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005670:	bf08      	it	eq
 8005672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005676:	f150 0000 	adcs.w	r0, r0, #0
 800567a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005684:	ea46 0101 	orr.w	r1, r6, r1
 8005688:	ea40 0002 	orr.w	r0, r0, r2
 800568c:	ea81 0103 	eor.w	r1, r1, r3
 8005690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005694:	bfc2      	ittt	gt
 8005696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800569a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800569e:	bd70      	popgt	{r4, r5, r6, pc}
 80056a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80056a4:	f04f 0e00 	mov.w	lr, #0
 80056a8:	3c01      	subs	r4, #1
 80056aa:	f300 80ab 	bgt.w	8005804 <__aeabi_dmul+0x238>
 80056ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80056b2:	bfde      	ittt	le
 80056b4:	2000      	movle	r0, #0
 80056b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80056ba:	bd70      	pople	{r4, r5, r6, pc}
 80056bc:	f1c4 0400 	rsb	r4, r4, #0
 80056c0:	3c20      	subs	r4, #32
 80056c2:	da35      	bge.n	8005730 <__aeabi_dmul+0x164>
 80056c4:	340c      	adds	r4, #12
 80056c6:	dc1b      	bgt.n	8005700 <__aeabi_dmul+0x134>
 80056c8:	f104 0414 	add.w	r4, r4, #20
 80056cc:	f1c4 0520 	rsb	r5, r4, #32
 80056d0:	fa00 f305 	lsl.w	r3, r0, r5
 80056d4:	fa20 f004 	lsr.w	r0, r0, r4
 80056d8:	fa01 f205 	lsl.w	r2, r1, r5
 80056dc:	ea40 0002 	orr.w	r0, r0, r2
 80056e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80056e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80056e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80056ec:	fa21 f604 	lsr.w	r6, r1, r4
 80056f0:	eb42 0106 	adc.w	r1, r2, r6
 80056f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80056f8:	bf08      	it	eq
 80056fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	f1c4 040c 	rsb	r4, r4, #12
 8005704:	f1c4 0520 	rsb	r5, r4, #32
 8005708:	fa00 f304 	lsl.w	r3, r0, r4
 800570c:	fa20 f005 	lsr.w	r0, r0, r5
 8005710:	fa01 f204 	lsl.w	r2, r1, r4
 8005714:	ea40 0002 	orr.w	r0, r0, r2
 8005718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800571c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005720:	f141 0100 	adc.w	r1, r1, #0
 8005724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005728:	bf08      	it	eq
 800572a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800572e:	bd70      	pop	{r4, r5, r6, pc}
 8005730:	f1c4 0520 	rsb	r5, r4, #32
 8005734:	fa00 f205 	lsl.w	r2, r0, r5
 8005738:	ea4e 0e02 	orr.w	lr, lr, r2
 800573c:	fa20 f304 	lsr.w	r3, r0, r4
 8005740:	fa01 f205 	lsl.w	r2, r1, r5
 8005744:	ea43 0302 	orr.w	r3, r3, r2
 8005748:	fa21 f004 	lsr.w	r0, r1, r4
 800574c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005750:	fa21 f204 	lsr.w	r2, r1, r4
 8005754:	ea20 0002 	bic.w	r0, r0, r2
 8005758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800575c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005760:	bf08      	it	eq
 8005762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	f094 0f00 	teq	r4, #0
 800576c:	d10f      	bne.n	800578e <__aeabi_dmul+0x1c2>
 800576e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005772:	0040      	lsls	r0, r0, #1
 8005774:	eb41 0101 	adc.w	r1, r1, r1
 8005778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800577c:	bf08      	it	eq
 800577e:	3c01      	subeq	r4, #1
 8005780:	d0f7      	beq.n	8005772 <__aeabi_dmul+0x1a6>
 8005782:	ea41 0106 	orr.w	r1, r1, r6
 8005786:	f095 0f00 	teq	r5, #0
 800578a:	bf18      	it	ne
 800578c:	4770      	bxne	lr
 800578e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005792:	0052      	lsls	r2, r2, #1
 8005794:	eb43 0303 	adc.w	r3, r3, r3
 8005798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800579c:	bf08      	it	eq
 800579e:	3d01      	subeq	r5, #1
 80057a0:	d0f7      	beq.n	8005792 <__aeabi_dmul+0x1c6>
 80057a2:	ea43 0306 	orr.w	r3, r3, r6
 80057a6:	4770      	bx	lr
 80057a8:	ea94 0f0c 	teq	r4, ip
 80057ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80057b0:	bf18      	it	ne
 80057b2:	ea95 0f0c 	teqne	r5, ip
 80057b6:	d00c      	beq.n	80057d2 <__aeabi_dmul+0x206>
 80057b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80057bc:	bf18      	it	ne
 80057be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80057c2:	d1d1      	bne.n	8005768 <__aeabi_dmul+0x19c>
 80057c4:	ea81 0103 	eor.w	r1, r1, r3
 80057c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80057cc:	f04f 0000 	mov.w	r0, #0
 80057d0:	bd70      	pop	{r4, r5, r6, pc}
 80057d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80057d6:	bf06      	itte	eq
 80057d8:	4610      	moveq	r0, r2
 80057da:	4619      	moveq	r1, r3
 80057dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80057e0:	d019      	beq.n	8005816 <__aeabi_dmul+0x24a>
 80057e2:	ea94 0f0c 	teq	r4, ip
 80057e6:	d102      	bne.n	80057ee <__aeabi_dmul+0x222>
 80057e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80057ec:	d113      	bne.n	8005816 <__aeabi_dmul+0x24a>
 80057ee:	ea95 0f0c 	teq	r5, ip
 80057f2:	d105      	bne.n	8005800 <__aeabi_dmul+0x234>
 80057f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80057f8:	bf1c      	itt	ne
 80057fa:	4610      	movne	r0, r2
 80057fc:	4619      	movne	r1, r3
 80057fe:	d10a      	bne.n	8005816 <__aeabi_dmul+0x24a>
 8005800:	ea81 0103 	eor.w	r1, r1, r3
 8005804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800580c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005810:	f04f 0000 	mov.w	r0, #0
 8005814:	bd70      	pop	{r4, r5, r6, pc}
 8005816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800581a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800581e:	bd70      	pop	{r4, r5, r6, pc}

08005820 <__aeabi_ddiv>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800582a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800582e:	bf1d      	ittte	ne
 8005830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005834:	ea94 0f0c 	teqne	r4, ip
 8005838:	ea95 0f0c 	teqne	r5, ip
 800583c:	f000 f8a7 	bleq	800598e <__aeabi_ddiv+0x16e>
 8005840:	eba4 0405 	sub.w	r4, r4, r5
 8005844:	ea81 0e03 	eor.w	lr, r1, r3
 8005848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800584c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005850:	f000 8088 	beq.w	8005964 <__aeabi_ddiv+0x144>
 8005854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800585c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800586c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005878:	429d      	cmp	r5, r3
 800587a:	bf08      	it	eq
 800587c:	4296      	cmpeq	r6, r2
 800587e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005886:	d202      	bcs.n	800588e <__aeabi_ddiv+0x6e>
 8005888:	085b      	lsrs	r3, r3, #1
 800588a:	ea4f 0232 	mov.w	r2, r2, rrx
 800588e:	1ab6      	subs	r6, r6, r2
 8005890:	eb65 0503 	sbc.w	r5, r5, r3
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	ea4f 0232 	mov.w	r2, r2, rrx
 800589a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800589e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80058a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80058a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80058aa:	bf22      	ittt	cs
 80058ac:	1ab6      	subcs	r6, r6, r2
 80058ae:	4675      	movcs	r5, lr
 80058b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80058ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80058be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80058c2:	bf22      	ittt	cs
 80058c4:	1ab6      	subcs	r6, r6, r2
 80058c6:	4675      	movcs	r5, lr
 80058c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80058d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80058d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80058da:	bf22      	ittt	cs
 80058dc:	1ab6      	subcs	r6, r6, r2
 80058de:	4675      	movcs	r5, lr
 80058e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80058ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80058ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80058f2:	bf22      	ittt	cs
 80058f4:	1ab6      	subcs	r6, r6, r2
 80058f6:	4675      	movcs	r5, lr
 80058f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80058fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8005900:	d018      	beq.n	8005934 <__aeabi_ddiv+0x114>
 8005902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800590a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800590e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800591a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800591e:	d1c0      	bne.n	80058a2 <__aeabi_ddiv+0x82>
 8005920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005924:	d10b      	bne.n	800593e <__aeabi_ddiv+0x11e>
 8005926:	ea41 0100 	orr.w	r1, r1, r0
 800592a:	f04f 0000 	mov.w	r0, #0
 800592e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005932:	e7b6      	b.n	80058a2 <__aeabi_ddiv+0x82>
 8005934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005938:	bf04      	itt	eq
 800593a:	4301      	orreq	r1, r0
 800593c:	2000      	moveq	r0, #0
 800593e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005942:	bf88      	it	hi
 8005944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005948:	f63f aeaf 	bhi.w	80056aa <__aeabi_dmul+0xde>
 800594c:	ebb5 0c03 	subs.w	ip, r5, r3
 8005950:	bf04      	itt	eq
 8005952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800595a:	f150 0000 	adcs.w	r0, r0, #0
 800595e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800596c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005970:	bfc2      	ittt	gt
 8005972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800597a:	bd70      	popgt	{r4, r5, r6, pc}
 800597c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005980:	f04f 0e00 	mov.w	lr, #0
 8005984:	3c01      	subs	r4, #1
 8005986:	e690      	b.n	80056aa <__aeabi_dmul+0xde>
 8005988:	ea45 0e06 	orr.w	lr, r5, r6
 800598c:	e68d      	b.n	80056aa <__aeabi_dmul+0xde>
 800598e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005992:	ea94 0f0c 	teq	r4, ip
 8005996:	bf08      	it	eq
 8005998:	ea95 0f0c 	teqeq	r5, ip
 800599c:	f43f af3b 	beq.w	8005816 <__aeabi_dmul+0x24a>
 80059a0:	ea94 0f0c 	teq	r4, ip
 80059a4:	d10a      	bne.n	80059bc <__aeabi_ddiv+0x19c>
 80059a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80059aa:	f47f af34 	bne.w	8005816 <__aeabi_dmul+0x24a>
 80059ae:	ea95 0f0c 	teq	r5, ip
 80059b2:	f47f af25 	bne.w	8005800 <__aeabi_dmul+0x234>
 80059b6:	4610      	mov	r0, r2
 80059b8:	4619      	mov	r1, r3
 80059ba:	e72c      	b.n	8005816 <__aeabi_dmul+0x24a>
 80059bc:	ea95 0f0c 	teq	r5, ip
 80059c0:	d106      	bne.n	80059d0 <__aeabi_ddiv+0x1b0>
 80059c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80059c6:	f43f aefd 	beq.w	80057c4 <__aeabi_dmul+0x1f8>
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	e722      	b.n	8005816 <__aeabi_dmul+0x24a>
 80059d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80059d4:	bf18      	it	ne
 80059d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80059da:	f47f aec5 	bne.w	8005768 <__aeabi_dmul+0x19c>
 80059de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80059e2:	f47f af0d 	bne.w	8005800 <__aeabi_dmul+0x234>
 80059e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80059ea:	f47f aeeb 	bne.w	80057c4 <__aeabi_dmul+0x1f8>
 80059ee:	e712      	b.n	8005816 <__aeabi_dmul+0x24a>

080059f0 <__gedf2>:
 80059f0:	f04f 3cff 	mov.w	ip, #4294967295
 80059f4:	e006      	b.n	8005a04 <__cmpdf2+0x4>
 80059f6:	bf00      	nop

080059f8 <__ledf2>:
 80059f8:	f04f 0c01 	mov.w	ip, #1
 80059fc:	e002      	b.n	8005a04 <__cmpdf2+0x4>
 80059fe:	bf00      	nop

08005a00 <__cmpdf2>:
 8005a00:	f04f 0c01 	mov.w	ip, #1
 8005a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005a14:	bf18      	it	ne
 8005a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005a1a:	d01b      	beq.n	8005a54 <__cmpdf2+0x54>
 8005a1c:	b001      	add	sp, #4
 8005a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005a22:	bf0c      	ite	eq
 8005a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005a28:	ea91 0f03 	teqne	r1, r3
 8005a2c:	bf02      	ittt	eq
 8005a2e:	ea90 0f02 	teqeq	r0, r2
 8005a32:	2000      	moveq	r0, #0
 8005a34:	4770      	bxeq	lr
 8005a36:	f110 0f00 	cmn.w	r0, #0
 8005a3a:	ea91 0f03 	teq	r1, r3
 8005a3e:	bf58      	it	pl
 8005a40:	4299      	cmppl	r1, r3
 8005a42:	bf08      	it	eq
 8005a44:	4290      	cmpeq	r0, r2
 8005a46:	bf2c      	ite	cs
 8005a48:	17d8      	asrcs	r0, r3, #31
 8005a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005a4e:	f040 0001 	orr.w	r0, r0, #1
 8005a52:	4770      	bx	lr
 8005a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a5c:	d102      	bne.n	8005a64 <__cmpdf2+0x64>
 8005a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005a62:	d107      	bne.n	8005a74 <__cmpdf2+0x74>
 8005a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a6c:	d1d6      	bne.n	8005a1c <__cmpdf2+0x1c>
 8005a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005a72:	d0d3      	beq.n	8005a1c <__cmpdf2+0x1c>
 8005a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop

08005a7c <__aeabi_cdrcmple>:
 8005a7c:	4684      	mov	ip, r0
 8005a7e:	4610      	mov	r0, r2
 8005a80:	4662      	mov	r2, ip
 8005a82:	468c      	mov	ip, r1
 8005a84:	4619      	mov	r1, r3
 8005a86:	4663      	mov	r3, ip
 8005a88:	e000      	b.n	8005a8c <__aeabi_cdcmpeq>
 8005a8a:	bf00      	nop

08005a8c <__aeabi_cdcmpeq>:
 8005a8c:	b501      	push	{r0, lr}
 8005a8e:	f7ff ffb7 	bl	8005a00 <__cmpdf2>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	bf48      	it	mi
 8005a96:	f110 0f00 	cmnmi.w	r0, #0
 8005a9a:	bd01      	pop	{r0, pc}

08005a9c <__aeabi_dcmpeq>:
 8005a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005aa0:	f7ff fff4 	bl	8005a8c <__aeabi_cdcmpeq>
 8005aa4:	bf0c      	ite	eq
 8005aa6:	2001      	moveq	r0, #1
 8005aa8:	2000      	movne	r0, #0
 8005aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8005aae:	bf00      	nop

08005ab0 <__aeabi_dcmplt>:
 8005ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ab4:	f7ff ffea 	bl	8005a8c <__aeabi_cdcmpeq>
 8005ab8:	bf34      	ite	cc
 8005aba:	2001      	movcc	r0, #1
 8005abc:	2000      	movcs	r0, #0
 8005abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8005ac2:	bf00      	nop

08005ac4 <__aeabi_dcmple>:
 8005ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ac8:	f7ff ffe0 	bl	8005a8c <__aeabi_cdcmpeq>
 8005acc:	bf94      	ite	ls
 8005ace:	2001      	movls	r0, #1
 8005ad0:	2000      	movhi	r0, #0
 8005ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005ad6:	bf00      	nop

08005ad8 <__aeabi_dcmpge>:
 8005ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005adc:	f7ff ffce 	bl	8005a7c <__aeabi_cdrcmple>
 8005ae0:	bf94      	ite	ls
 8005ae2:	2001      	movls	r0, #1
 8005ae4:	2000      	movhi	r0, #0
 8005ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005aea:	bf00      	nop

08005aec <__aeabi_dcmpgt>:
 8005aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005af0:	f7ff ffc4 	bl	8005a7c <__aeabi_cdrcmple>
 8005af4:	bf34      	ite	cc
 8005af6:	2001      	movcc	r0, #1
 8005af8:	2000      	movcs	r0, #0
 8005afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8005afe:	bf00      	nop

08005b00 <__aeabi_dcmpun>:
 8005b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005b08:	d102      	bne.n	8005b10 <__aeabi_dcmpun+0x10>
 8005b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005b0e:	d10a      	bne.n	8005b26 <__aeabi_dcmpun+0x26>
 8005b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005b18:	d102      	bne.n	8005b20 <__aeabi_dcmpun+0x20>
 8005b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005b1e:	d102      	bne.n	8005b26 <__aeabi_dcmpun+0x26>
 8005b20:	f04f 0000 	mov.w	r0, #0
 8005b24:	4770      	bx	lr
 8005b26:	f04f 0001 	mov.w	r0, #1
 8005b2a:	4770      	bx	lr

08005b2c <__aeabi_d2iz>:
 8005b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005b34:	d215      	bcs.n	8005b62 <__aeabi_d2iz+0x36>
 8005b36:	d511      	bpl.n	8005b5c <__aeabi_d2iz+0x30>
 8005b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005b40:	d912      	bls.n	8005b68 <__aeabi_d2iz+0x3c>
 8005b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005b52:	fa23 f002 	lsr.w	r0, r3, r2
 8005b56:	bf18      	it	ne
 8005b58:	4240      	negne	r0, r0
 8005b5a:	4770      	bx	lr
 8005b5c:	f04f 0000 	mov.w	r0, #0
 8005b60:	4770      	bx	lr
 8005b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005b66:	d105      	bne.n	8005b74 <__aeabi_d2iz+0x48>
 8005b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005b6c:	bf08      	it	eq
 8005b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005b72:	4770      	bx	lr
 8005b74:	f04f 0000 	mov.w	r0, #0
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop

08005b7c <__aeabi_d2uiz>:
 8005b7c:	004a      	lsls	r2, r1, #1
 8005b7e:	d211      	bcs.n	8005ba4 <__aeabi_d2uiz+0x28>
 8005b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005b84:	d211      	bcs.n	8005baa <__aeabi_d2uiz+0x2e>
 8005b86:	d50d      	bpl.n	8005ba4 <__aeabi_d2uiz+0x28>
 8005b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005b90:	d40e      	bmi.n	8005bb0 <__aeabi_d2uiz+0x34>
 8005b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8005ba2:	4770      	bx	lr
 8005ba4:	f04f 0000 	mov.w	r0, #0
 8005ba8:	4770      	bx	lr
 8005baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005bae:	d102      	bne.n	8005bb6 <__aeabi_d2uiz+0x3a>
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb4:	4770      	bx	lr
 8005bb6:	f04f 0000 	mov.w	r0, #0
 8005bba:	4770      	bx	lr

08005bbc <__aeabi_d2f>:
 8005bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005bc4:	bf24      	itt	cs
 8005bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005bce:	d90d      	bls.n	8005bec <__aeabi_d2f+0x30>
 8005bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005be4:	bf08      	it	eq
 8005be6:	f020 0001 	biceq.w	r0, r0, #1
 8005bea:	4770      	bx	lr
 8005bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005bf0:	d121      	bne.n	8005c36 <__aeabi_d2f+0x7a>
 8005bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005bf6:	bfbc      	itt	lt
 8005bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005bfc:	4770      	bxlt	lr
 8005bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005c06:	f1c2 0218 	rsb	r2, r2, #24
 8005c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8005c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8005c12:	fa20 f002 	lsr.w	r0, r0, r2
 8005c16:	bf18      	it	ne
 8005c18:	f040 0001 	orrne.w	r0, r0, #1
 8005c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005c28:	ea40 000c 	orr.w	r0, r0, ip
 8005c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8005c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005c34:	e7cc      	b.n	8005bd0 <__aeabi_d2f+0x14>
 8005c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005c3a:	d107      	bne.n	8005c4c <__aeabi_d2f+0x90>
 8005c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005c40:	bf1e      	ittt	ne
 8005c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005c4a:	4770      	bxne	lr
 8005c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop

08005c5c <__gesf2>:
 8005c5c:	f04f 3cff 	mov.w	ip, #4294967295
 8005c60:	e006      	b.n	8005c70 <__cmpsf2+0x4>
 8005c62:	bf00      	nop

08005c64 <__lesf2>:
 8005c64:	f04f 0c01 	mov.w	ip, #1
 8005c68:	e002      	b.n	8005c70 <__cmpsf2+0x4>
 8005c6a:	bf00      	nop

08005c6c <__cmpsf2>:
 8005c6c:	f04f 0c01 	mov.w	ip, #1
 8005c70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005c74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005c78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005c7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005c80:	bf18      	it	ne
 8005c82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005c86:	d011      	beq.n	8005cac <__cmpsf2+0x40>
 8005c88:	b001      	add	sp, #4
 8005c8a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005c8e:	bf18      	it	ne
 8005c90:	ea90 0f01 	teqne	r0, r1
 8005c94:	bf58      	it	pl
 8005c96:	ebb2 0003 	subspl.w	r0, r2, r3
 8005c9a:	bf88      	it	hi
 8005c9c:	17c8      	asrhi	r0, r1, #31
 8005c9e:	bf38      	it	cc
 8005ca0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005ca4:	bf18      	it	ne
 8005ca6:	f040 0001 	orrne.w	r0, r0, #1
 8005caa:	4770      	bx	lr
 8005cac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005cb0:	d102      	bne.n	8005cb8 <__cmpsf2+0x4c>
 8005cb2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005cb6:	d105      	bne.n	8005cc4 <__cmpsf2+0x58>
 8005cb8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005cbc:	d1e4      	bne.n	8005c88 <__cmpsf2+0x1c>
 8005cbe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005cc2:	d0e1      	beq.n	8005c88 <__cmpsf2+0x1c>
 8005cc4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop

08005ccc <__aeabi_cfrcmple>:
 8005ccc:	4684      	mov	ip, r0
 8005cce:	4608      	mov	r0, r1
 8005cd0:	4661      	mov	r1, ip
 8005cd2:	e7ff      	b.n	8005cd4 <__aeabi_cfcmpeq>

08005cd4 <__aeabi_cfcmpeq>:
 8005cd4:	b50f      	push	{r0, r1, r2, r3, lr}
 8005cd6:	f7ff ffc9 	bl	8005c6c <__cmpsf2>
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	bf48      	it	mi
 8005cde:	f110 0f00 	cmnmi.w	r0, #0
 8005ce2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005ce4 <__aeabi_fcmpeq>:
 8005ce4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ce8:	f7ff fff4 	bl	8005cd4 <__aeabi_cfcmpeq>
 8005cec:	bf0c      	ite	eq
 8005cee:	2001      	moveq	r0, #1
 8005cf0:	2000      	movne	r0, #0
 8005cf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005cf6:	bf00      	nop

08005cf8 <__aeabi_fcmplt>:
 8005cf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005cfc:	f7ff ffea 	bl	8005cd4 <__aeabi_cfcmpeq>
 8005d00:	bf34      	ite	cc
 8005d02:	2001      	movcc	r0, #1
 8005d04:	2000      	movcs	r0, #0
 8005d06:	f85d fb08 	ldr.w	pc, [sp], #8
 8005d0a:	bf00      	nop

08005d0c <__aeabi_fcmple>:
 8005d0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005d10:	f7ff ffe0 	bl	8005cd4 <__aeabi_cfcmpeq>
 8005d14:	bf94      	ite	ls
 8005d16:	2001      	movls	r0, #1
 8005d18:	2000      	movhi	r0, #0
 8005d1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005d1e:	bf00      	nop

08005d20 <__aeabi_fcmpge>:
 8005d20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005d24:	f7ff ffd2 	bl	8005ccc <__aeabi_cfrcmple>
 8005d28:	bf94      	ite	ls
 8005d2a:	2001      	movls	r0, #1
 8005d2c:	2000      	movhi	r0, #0
 8005d2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005d32:	bf00      	nop

08005d34 <__aeabi_fcmpgt>:
 8005d34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005d38:	f7ff ffc8 	bl	8005ccc <__aeabi_cfrcmple>
 8005d3c:	bf34      	ite	cc
 8005d3e:	2001      	movcc	r0, #1
 8005d40:	2000      	movcs	r0, #0
 8005d42:	f85d fb08 	ldr.w	pc, [sp], #8
 8005d46:	bf00      	nop

08005d48 <__aeabi_fcmpun>:
 8005d48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005d54:	d102      	bne.n	8005d5c <__aeabi_fcmpun+0x14>
 8005d56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005d5a:	d108      	bne.n	8005d6e <__aeabi_fcmpun+0x26>
 8005d5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005d60:	d102      	bne.n	8005d68 <__aeabi_fcmpun+0x20>
 8005d62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005d66:	d102      	bne.n	8005d6e <__aeabi_fcmpun+0x26>
 8005d68:	f04f 0000 	mov.w	r0, #0
 8005d6c:	4770      	bx	lr
 8005d6e:	f04f 0001 	mov.w	r0, #1
 8005d72:	4770      	bx	lr

08005d74 <apInit>:


static void threadLed(void const *argument);

void apInit(void)
{
 8005d74:	b5b0      	push	{r4, r5, r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);  // USB
 8005d7a:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005d7e:	2000      	movs	r0, #0
 8005d80:	f001 fc4e 	bl	8007620 <uartOpen>
  uartOpen(_DEF_UART2, 57600);  // UART1
 8005d84:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005d88:	2001      	movs	r0, #1
 8005d8a:	f001 fc49 	bl	8007620 <uartOpen>

  cliOpen(_DEF_UART1, 57600);
 8005d8e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8005d92:	2000      	movs	r0, #0
 8005d94:	f000 fb6a 	bl	800646c <cliOpen>
  //cliOpenLog(_DEF_UART2, 57600);

  osThreadDef(threadLed, threadLed, _HW_DEF_RTOS_THREAD_PRI_LED, 0, _HW_DEF_RTOS_THREAD_MEM_LED);
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <apInit+0x58>)
 8005d9a:	1d3c      	adds	r4, r7, #4
 8005d9c:	461d      	mov	r5, r3
 8005d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005da2:	682b      	ldr	r3, [r5, #0]
 8005da4:	6023      	str	r3, [r4, #0]
  if (osThreadCreate(osThread(threadLed), NULL) != NULL)
 8005da6:	1d3b      	adds	r3, r7, #4
 8005da8:	2100      	movs	r1, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 fe88 	bl	8007ac0 <osThreadCreate>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <apInit+0x4a>
  {
    logPrintf("threadLed \t\t: OK\r\n");
 8005db6:	4806      	ldr	r0, [pc, #24]	; (8005dd0 <apInit+0x5c>)
 8005db8:	f009 fd0a 	bl	800f7d0 <puts>
  else
  {
    logPrintf("threadLed \t\t: Fail\r\n");
    while(1);
  }
}
 8005dbc:	e003      	b.n	8005dc6 <apInit+0x52>
    logPrintf("threadLed \t\t: Fail\r\n");
 8005dbe:	4805      	ldr	r0, [pc, #20]	; (8005dd4 <apInit+0x60>)
 8005dc0:	f009 fd06 	bl	800f7d0 <puts>
    while(1);
 8005dc4:	e7fe      	b.n	8005dc4 <apInit+0x50>
}
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bdb0      	pop	{r4, r5, r7, pc}
 8005dcc:	08012454 	.word	0x08012454
 8005dd0:	08012420 	.word	0x08012420
 8005dd4:	08012434 	.word	0x08012434

08005dd8 <apMain>:

void apMain(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
      rx_data = uartRead(_DEF_UART2);

      uartPrintf(_DEF_UART2, "Rx : 0x%X\n", rx_data);
    }
#endif
    cliMain();
 8005ddc:	f000 fbfe 	bl	80065dc <cliMain>
    delay(1);
 8005de0:	2001      	movs	r0, #1
 8005de2:	f000 f853 	bl	8005e8c <delay>
    cliMain();
 8005de6:	e7f9      	b.n	8005ddc <apMain+0x4>

08005de8 <threadLed>:
  }

}

static void threadLed(void const *argument)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(argument);


  while(1)
  {
    ledToggle(_DEF_LED1);
 8005df0:	2000      	movs	r0, #0
 8005df2:	f001 faef 	bl	80073d4 <ledToggle>
    delay(500);
 8005df6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005dfa:	f000 f847 	bl	8005e8c <delay>
    ledToggle(_DEF_LED1);
 8005dfe:	e7f7      	b.n	8005df0 <threadLed+0x8>

08005e00 <bspInit>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


void bspInit(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
  HAL_Init();
 8005e06:	f002 ff65 	bl	8008cd4 <HAL_Init>
  SystemClock_Config();
 8005e0a:	f000 f869 	bl	8005ee0 <SystemClock_Config>

  MX_GPIO_Init();
 8005e0e:	f000 f8c9 	bl	8005fa4 <MX_GPIO_Init>


  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e12:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <bspInit+0x84>)
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <bspInit+0x84>)
 8005e18:	f043 0320 	orr.w	r3, r3, #32
 8005e1c:	6193      	str	r3, [r2, #24]
 8005e1e:	4b19      	ldr	r3, [pc, #100]	; (8005e84 <bspInit+0x84>)
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e2a:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <bspInit+0x84>)
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <bspInit+0x84>)
 8005e30:	f043 0304 	orr.w	r3, r3, #4
 8005e34:	6193      	str	r3, [r2, #24]
 8005e36:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <bspInit+0x84>)
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e42:	f107 0308 	add.w	r3, r7, #8
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	609a      	str	r2, [r3, #8]
 8005e4e:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005e56:	2311      	movs	r3, #17
 8005e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e62:	f107 0308 	add.w	r3, r7, #8
 8005e66:	4619      	mov	r1, r3
 8005e68:	4807      	ldr	r0, [pc, #28]	; (8005e88 <bspInit+0x88>)
 8005e6a:	f003 fda9 	bl	80099c0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e74:	4804      	ldr	r0, [pc, #16]	; (8005e88 <bspInit+0x88>)
 8005e76:	f003 ffe3 	bl	8009e40 <HAL_GPIO_WritePin>

}
 8005e7a:	bf00      	nop
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40021000 	.word	0x40021000
 8005e88:	40010800 	.word	0x40010800

08005e8c <delay>:

void delay(uint32_t ms)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
#ifdef _USE_HW_RTOS
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005e94:	f002 fb40 	bl	8008518 <xTaskGetSchedulerState>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d003      	beq.n	8005ea6 <delay+0x1a>
  {
    osDelay(ms);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 fe35 	bl	8007b0e <osDelay>
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
#endif
}
 8005ea4:	e002      	b.n	8005eac <delay+0x20>
    HAL_Delay(ms);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f002 ff76 	bl	8008d98 <HAL_Delay>
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <millis>:

uint32_t millis(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005eb8:	f002 ff64 	bl	8008d84 <HAL_GetTick>
 8005ebc:	4603      	mov	r3, r0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <__io_putchar>:

int __io_putchar(int ch)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  // Send character to USB printf
  //uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
  uartWrite(_DEF_UART2, (uint8_t *)&ch, 1);    // to UART
 8005eca:	1d3b      	adds	r3, r7, #4
 8005ecc:	2201      	movs	r2, #1
 8005ece:	4619      	mov	r1, r3
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	f001 fc8f 	bl	80077f4 <uartWrite>

  return 1;
 8005ed6:	2301      	movs	r3, #1
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b096      	sub	sp, #88	; 0x58
 8005ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ee6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005eea:	2228      	movs	r2, #40	; 0x28
 8005eec:	2100      	movs	r1, #0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f009 fc09 	bl	800f706 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ef4:	f107 031c 	add.w	r3, r7, #28
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	609a      	str	r2, [r3, #8]
 8005f00:	60da      	str	r2, [r3, #12]
 8005f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005f04:	1d3b      	adds	r3, r7, #4
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	605a      	str	r2, [r3, #4]
 8005f0c:	609a      	str	r2, [r3, #8]
 8005f0e:	60da      	str	r2, [r3, #12]
 8005f10:	611a      	str	r2, [r3, #16]
 8005f12:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8005f14:	2305      	movs	r3, #5
 8005f16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f1c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005f22:	2301      	movs	r3, #1
 8005f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f26:	2301      	movs	r3, #1
 8005f28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005f34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005f38:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f004 ff06 	bl	800ad50 <HAL_RCC_OscConfig>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8005f4a:	f000 f86b 	bl	8006024 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f4e:	230f      	movs	r3, #15
 8005f50:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f52:	2302      	movs	r3, #2
 8005f54:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f56:	2300      	movs	r3, #0
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f60:	2300      	movs	r3, #0
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005f64:	f107 031c 	add.w	r3, r7, #28
 8005f68:	2102      	movs	r1, #2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f005 f954 	bl	800b218 <HAL_RCC_ClockConfig>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005f76:	f000 f855 	bl	8006024 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8005f7a:	2311      	movs	r3, #17
 8005f7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f82:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f88:	1d3b      	adds	r3, r7, #4
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f005 fb02 	bl	800b594 <HAL_RCCEx_PeriphCLKConfig>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005f96:	f000 f845 	bl	8006024 <Error_Handler>
  }
}
 8005f9a:	bf00      	nop
 8005f9c:	3758      	adds	r7, #88	; 0x58
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005faa:	f107 0308 	add.w	r3, r7, #8
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	605a      	str	r2, [r3, #4]
 8005fb4:	609a      	str	r2, [r3, #8]
 8005fb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fb8:	4b18      	ldr	r3, [pc, #96]	; (800601c <MX_GPIO_Init+0x78>)
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	4a17      	ldr	r2, [pc, #92]	; (800601c <MX_GPIO_Init+0x78>)
 8005fbe:	f043 0308 	orr.w	r3, r3, #8
 8005fc2:	6193      	str	r3, [r2, #24]
 8005fc4:	4b15      	ldr	r3, [pc, #84]	; (800601c <MX_GPIO_Init+0x78>)
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fd0:	4b12      	ldr	r3, [pc, #72]	; (800601c <MX_GPIO_Init+0x78>)
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	4a11      	ldr	r2, [pc, #68]	; (800601c <MX_GPIO_Init+0x78>)
 8005fd6:	f043 0304 	orr.w	r3, r3, #4
 8005fda:	6193      	str	r3, [r2, #24]
 8005fdc:	4b0f      	ldr	r3, [pc, #60]	; (800601c <MX_GPIO_Init+0x78>)
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	603b      	str	r3, [r7, #0]
 8005fe6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005fee:	480c      	ldr	r0, [pc, #48]	; (8006020 <MX_GPIO_Init+0x7c>)
 8005ff0:	f003 ff26 	bl	8009e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8005ff4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005ff8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006002:	2302      	movs	r3, #2
 8006004:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006006:	f107 0308 	add.w	r3, r7, #8
 800600a:	4619      	mov	r1, r3
 800600c:	4804      	ldr	r0, [pc, #16]	; (8006020 <MX_GPIO_Init+0x7c>)
 800600e:	f003 fcd7 	bl	80099c0 <HAL_GPIO_Init>
}
 8006012:	bf00      	nop
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000
 8006020:	40010c00 	.word	0x40010c00

08006024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006028:	bf00      	nop
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr

08006030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006036:	4b15      	ldr	r3, [pc, #84]	; (800608c <HAL_MspInit+0x5c>)
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	4a14      	ldr	r2, [pc, #80]	; (800608c <HAL_MspInit+0x5c>)
 800603c:	f043 0301 	orr.w	r3, r3, #1
 8006040:	6193      	str	r3, [r2, #24]
 8006042:	4b12      	ldr	r3, [pc, #72]	; (800608c <HAL_MspInit+0x5c>)
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800604e:	4b0f      	ldr	r3, [pc, #60]	; (800608c <HAL_MspInit+0x5c>)
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	4a0e      	ldr	r2, [pc, #56]	; (800608c <HAL_MspInit+0x5c>)
 8006054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006058:	61d3      	str	r3, [r2, #28]
 800605a:	4b0c      	ldr	r3, [pc, #48]	; (800608c <HAL_MspInit+0x5c>)
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006066:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <HAL_MspInit+0x60>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	4a04      	ldr	r2, [pc, #16]	; (8006090 <HAL_MspInit+0x60>)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr
 800608c:	40021000 	.word	0x40021000
 8006090:	40010000 	.word	0x40010000

08006094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006098:	bf00      	nop
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr

080060a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060a4:	e7fe      	b.n	80060a4 <HardFault_Handler+0x4>

080060a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060a6:	b480      	push	{r7}
 80060a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060aa:	e7fe      	b.n	80060aa <MemManage_Handler+0x4>

080060ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060b0:	e7fe      	b.n	80060b0 <BusFault_Handler+0x4>

080060b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060b2:	b480      	push	{r7}
 80060b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060b6:	e7fe      	b.n	80060b6 <UsageFault_Handler+0x4>

080060b8 <DebugMon_Handler>:
#endif
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060bc:	bf00      	nop
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <SysTick_Handler>:
#endif
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060c8:	f002 fe4a 	bl	8008d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
 80060cc:	f001 fd33 	bl	8007b36 <osSystickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80060d0:	bf00      	nop
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80060d8:	4802      	ldr	r0, [pc, #8]	; (80060e4 <DMA1_Channel5_IRQHandler+0x10>)
 80060da:	f003 fa07 	bl	80094ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20002bfc 	.word	0x20002bfc

080060e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80060ec:	4802      	ldr	r0, [pc, #8]	; (80060f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80060ee:	f003 ffd0 	bl	800a092 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80060f2:	bf00      	nop
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20003a78 	.word	0x20003a78

080060fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006100:	4802      	ldr	r0, [pc, #8]	; (800610c <USART1_IRQHandler+0x10>)
 8006102:	f005 febb 	bl	800be7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20002c40 	.word	0x20002c40

08006110 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e00a      	b.n	8006138 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006122:	f3af 8000 	nop.w
 8006126:	4601      	mov	r1, r0
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	60ba      	str	r2, [r7, #8]
 800612e:	b2ca      	uxtb	r2, r1
 8006130:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	3301      	adds	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	dbf0      	blt.n	8006122 <_read+0x12>
	}

return len;
 8006140:	687b      	ldr	r3, [r7, #4]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	e009      	b.n	8006170 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	60ba      	str	r2, [r7, #8]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff feac 	bl	8005ec2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	3301      	adds	r3, #1
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	dbf1      	blt.n	800615c <_write+0x12>
	}
	return len;
 8006178:	687b      	ldr	r3, [r7, #4]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <_close>:

int _close(int file)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
	return -1;
 800618a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061a8:	605a      	str	r2, [r3, #4]
	return 0;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr

080061b6 <_isatty>:

int _isatty(int file)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
	return 1;
 80061be:	2301      	movs	r3, #1
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr

080061ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b085      	sub	sp, #20
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	607a      	str	r2, [r7, #4]
	return 0;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr
	...

080061e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80061ec:	4b11      	ldr	r3, [pc, #68]	; (8006234 <_sbrk+0x50>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d102      	bne.n	80061fa <_sbrk+0x16>
		heap_end = &end;
 80061f4:	4b0f      	ldr	r3, [pc, #60]	; (8006234 <_sbrk+0x50>)
 80061f6:	4a10      	ldr	r2, [pc, #64]	; (8006238 <_sbrk+0x54>)
 80061f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80061fa:	4b0e      	ldr	r3, [pc, #56]	; (8006234 <_sbrk+0x50>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <_sbrk+0x50>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4413      	add	r3, r2
 8006208:	466a      	mov	r2, sp
 800620a:	4293      	cmp	r3, r2
 800620c:	d907      	bls.n	800621e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800620e:	f009 fa45 	bl	800f69c <__errno>
 8006212:	4602      	mov	r2, r0
 8006214:	230c      	movs	r3, #12
 8006216:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006218:	f04f 33ff 	mov.w	r3, #4294967295
 800621c:	e006      	b.n	800622c <_sbrk+0x48>
	}

	heap_end += incr;
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <_sbrk+0x50>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4413      	add	r3, r2
 8006226:	4a03      	ldr	r2, [pc, #12]	; (8006234 <_sbrk+0x50>)
 8006228:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800622a:	68fb      	ldr	r3, [r7, #12]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000394 	.word	0x20000394
 8006238:	20003ee0 	.word	0x20003ee0

0800623c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006240:	4b15      	ldr	r3, [pc, #84]	; (8006298 <SystemInit+0x5c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a14      	ldr	r2, [pc, #80]	; (8006298 <SystemInit+0x5c>)
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800624c:	4b12      	ldr	r3, [pc, #72]	; (8006298 <SystemInit+0x5c>)
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	4911      	ldr	r1, [pc, #68]	; (8006298 <SystemInit+0x5c>)
 8006252:	4b12      	ldr	r3, [pc, #72]	; (800629c <SystemInit+0x60>)
 8006254:	4013      	ands	r3, r2
 8006256:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006258:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <SystemInit+0x5c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <SystemInit+0x5c>)
 800625e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006266:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006268:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <SystemInit+0x5c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a0a      	ldr	r2, [pc, #40]	; (8006298 <SystemInit+0x5c>)
 800626e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006272:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006274:	4b08      	ldr	r3, [pc, #32]	; (8006298 <SystemInit+0x5c>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4a07      	ldr	r2, [pc, #28]	; (8006298 <SystemInit+0x5c>)
 800627a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800627e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <SystemInit+0x5c>)
 8006282:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006286:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <SystemInit+0x64>)
 800628a:	4a06      	ldr	r2, [pc, #24]	; (80062a4 <SystemInit+0x68>)
 800628c:	609a      	str	r2, [r3, #8]
#endif 
}
 800628e:	bf00      	nop
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40021000 	.word	0x40021000
 800629c:	f8ff0000 	.word	0xf8ff0000
 80062a0:	e000ed00 	.word	0xe000ed00
 80062a4:	08005000 	.word	0x08005000

080062a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80062a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80062aa:	e003      	b.n	80062b4 <LoopCopyDataInit>

080062ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80062ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80062b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80062b2:	3104      	adds	r1, #4

080062b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80062b4:	480a      	ldr	r0, [pc, #40]	; (80062e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80062b6:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80062b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80062ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80062bc:	d3f6      	bcc.n	80062ac <CopyDataInit>
  ldr r2, =_sbss
 80062be:	4a0a      	ldr	r2, [pc, #40]	; (80062e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80062c0:	e002      	b.n	80062c8 <LoopFillZerobss>

080062c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80062c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80062c4:	f842 3b04 	str.w	r3, [r2], #4

080062c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80062c8:	4b08      	ldr	r3, [pc, #32]	; (80062ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80062ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80062cc:	d3f9      	bcc.n	80062c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80062ce:	f7ff ffb5 	bl	800623c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062d2:	f009 f9e9 	bl	800f6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80062d6:	f009 f9ab 	bl	800f630 <main>
  bx lr
 80062da:	4770      	bx	lr
  ldr r3, =_sidata
 80062dc:	080129d8 	.word	0x080129d8
  ldr r0, =_sdata
 80062e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80062e4:	20000378 	.word	0x20000378
  ldr r2, =_sbss
 80062e8:	20000378 	.word	0x20000378
  ldr r3, = _ebss
 80062ec:	20003edc 	.word	0x20003edc

080062f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80062f0:	e7fe      	b.n	80062f0 <ADC1_2_IRQHandler>

080062f2 <qbufferCreate>:
#include "qbuffer.h"



bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b087      	sub	sp, #28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
  bool ret    = true;
 80062fe:	2301      	movs	r3, #1
 8006300:	75fb      	strb	r3, [r7, #23]

  p_node->in  = 0;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	60da      	str	r2, [r3, #12]
    p_node->len = 0;
    p_node->p_buf = NULL;
    ret = false;
  }
#endif
  return ret;
 800631a:	7dfb      	ldrb	r3, [r7, #23]
}
 800631c:	4618      	mov	r0, r3
 800631e:	371c      	adds	r7, #28
 8006320:	46bd      	mov	sp, r7
 8006322:	bc80      	pop	{r7}
 8006324:	4770      	bx	lr

08006326 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8006326:	b480      	push	{r7}
 8006328:	b087      	sub	sp, #28
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8006332:	2301      	movs	r3, #1
 8006334:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	e026      	b.n	800638a <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	441a      	add	r2, r3
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	440b      	add	r3, r1
 8006354:	7812      	ldrb	r2, [r2, #0]
 8006356:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d00c      	beq.n	800637e <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	3301      	adds	r3, #1
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6892      	ldr	r2, [r2, #8]
 800636e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006372:	fb02 f201 	mul.w	r2, r2, r1
 8006376:	1a9a      	subs	r2, r3, r2
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	605a      	str	r2, [r3, #4]
 800637c:	e002      	b.n	8006384 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 800637e:	2300      	movs	r3, #0
 8006380:	75fb      	strb	r3, [r7, #23]
      break;
 8006382:	e006      	b.n	8006392 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	3301      	adds	r3, #1
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d8d4      	bhi.n	800633c <qbufferRead+0x16>
    }
  }

  return ret;
 8006392:	7dfb      	ldrb	r3, [r7, #23]
}
 8006394:	4618      	mov	r0, r3
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr

0800639e <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;  // + p_node->len **
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	441a      	add	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6892      	ldr	r2, [r2, #8]
 80063ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80063be:	fb02 f201 	mul.w	r2, r2, r1
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  return ret;
 80063c6:	68fb      	ldr	r3, [r7, #12]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr
	...

080063d4 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80063d8:	4b1b      	ldr	r3, [pc, #108]	; (8006448 <cliInit+0x74>)
 80063da:	2200      	movs	r2, #0
 80063dc:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80063de:	4b1a      	ldr	r3, [pc, #104]	; (8006448 <cliInit+0x74>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80063e4:	4b18      	ldr	r3, [pc, #96]	; (8006448 <cliInit+0x74>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80063ea:	4b17      	ldr	r3, [pc, #92]	; (8006448 <cliInit+0x74>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <cliInit+0x74>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80063fa:	4b13      	ldr	r3, [pc, #76]	; (8006448 <cliInit+0x74>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8006402:	4b11      	ldr	r3, [pc, #68]	; (8006448 <cliInit+0x74>)
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800640a:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <cliInit+0x74>)
 800640c:	4a0f      	ldr	r2, [pc, #60]	; (800644c <cliInit+0x78>)
 800640e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8006412:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <cliInit+0x74>)
 8006414:	4a0e      	ldr	r2, [pc, #56]	; (8006450 <cliInit+0x7c>)
 8006416:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800641a:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <cliInit+0x74>)
 800641c:	4a0d      	ldr	r2, [pc, #52]	; (8006454 <cliInit+0x80>)
 800641e:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <cliInit+0x74>)
 8006424:	4a0c      	ldr	r2, [pc, #48]	; (8006458 <cliInit+0x84>)
 8006426:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 800642a:	4807      	ldr	r0, [pc, #28]	; (8006448 <cliInit+0x74>)
 800642c:	f000 fb5c 	bl	8006ae8 <cliLineClean>


  cliAdd("help", cliShowList);
 8006430:	490a      	ldr	r1, [pc, #40]	; (800645c <cliInit+0x88>)
 8006432:	480b      	ldr	r0, [pc, #44]	; (8006460 <cliInit+0x8c>)
 8006434:	f000 fe0c 	bl	8007050 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8006438:	490a      	ldr	r1, [pc, #40]	; (8006464 <cliInit+0x90>)
 800643a:	480b      	ldr	r0, [pc, #44]	; (8006468 <cliInit+0x94>)
 800643c:	f000 fe08 	bl	8007050 <cliAdd>

  return true;
 8006440:	2301      	movs	r3, #1
}
 8006442:	4618      	mov	r0, r3
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20002844 	.word	0x20002844
 800644c:	08006eed 	.word	0x08006eed
 8006450:	08006f3d 	.word	0x08006f3d
 8006454:	08006f8d 	.word	0x08006f8d
 8006458:	08006fd1 	.word	0x08006fd1
 800645c:	080070e5 	.word	0x080070e5
 8006460:	08012468 	.word	0x08012468
 8006464:	08007155 	.word	0x08007155
 8006468:	08012470 	.word	0x08012470

0800646c <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	6039      	str	r1, [r7, #0]
 8006476:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8006478:	4a0a      	ldr	r2, [pc, #40]	; (80064a4 <cliOpen+0x38>)
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800647e:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <cliOpen+0x38>)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f001 f8c9 	bl	8007620 <uartOpen>
 800648e:	4603      	mov	r3, r0
 8006490:	461a      	mov	r2, r3
 8006492:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <cliOpen+0x38>)
 8006494:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8006496:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <cliOpen+0x38>)
 8006498:	7a1b      	ldrb	r3, [r3, #8]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20002844 	.word	0x20002844

080064a8 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 80064b0:	4b34      	ldr	r3, [pc, #208]	; (8006584 <cliShowLog+0xdc>)
 80064b2:	7a5b      	ldrb	r3, [r3, #9]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d061      	beq.n	800657c <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	7a98      	ldrb	r0, [r3, #10]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 80064c2:	461a      	mov	r2, r3
 80064c4:	4930      	ldr	r1, [pc, #192]	; (8006588 <cliShowLog+0xe0>)
 80064c6:	f001 f9c1 	bl	800784c <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	7a98      	ldrb	r0, [r3, #10]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 80064d4:	461a      	mov	r2, r3
 80064d6:	492d      	ldr	r1, [pc, #180]	; (800658c <cliShowLog+0xe4>)
 80064d8:	f001 f9b8 	bl	800784c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	7a98      	ldrb	r0, [r3, #10]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80064e6:	461a      	mov	r2, r3
 80064e8:	4929      	ldr	r1, [pc, #164]	; (8006590 <cliShowLog+0xe8>)
 80064ea:	f001 f9af 	bl	800784c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	7a98      	ldrb	r0, [r3, #10]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80064f8:	461a      	mov	r2, r3
 80064fa:	4926      	ldr	r1, [pc, #152]	; (8006594 <cliShowLog+0xec>)
 80064fc:	f001 f9a6 	bl	800784c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	7a98      	ldrb	r0, [r3, #10]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800650a:	461a      	mov	r2, r3
 800650c:	4922      	ldr	r1, [pc, #136]	; (8006598 <cliShowLog+0xf0>)
 800650e:	f001 f99d 	bl	800784c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	7a98      	ldrb	r0, [r3, #10]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800651c:	461a      	mov	r2, r3
 800651e:	491f      	ldr	r1, [pc, #124]	; (800659c <cliShowLog+0xf4>)
 8006520:	f001 f994 	bl	800784c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	7a98      	ldrb	r0, [r3, #10]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800652e:	461a      	mov	r2, r3
 8006530:	491b      	ldr	r1, [pc, #108]	; (80065a0 <cliShowLog+0xf8>)
 8006532:	f001 f98b 	bl	800784c <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	e012      	b.n	8006562 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	7a98      	ldrb	r0, [r3, #10]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	00da      	lsls	r2, r3, #3
 800654a:	1ad2      	subs	r2, r2, r3
 800654c:	f502 73cc 	add.w	r3, r2, #408	; 0x198
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	4413      	add	r3, r2
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	4913      	ldr	r1, [pc, #76]	; (80065a4 <cliShowLog+0xfc>)
 8006558:	f001 f978 	bl	800784c <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8006568:	461a      	mov	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4293      	cmp	r3, r2
 800656e:	dbe5      	blt.n	800653c <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	7a9b      	ldrb	r3, [r3, #10]
 8006574:	490c      	ldr	r1, [pc, #48]	; (80065a8 <cliShowLog+0x100>)
 8006576:	4618      	mov	r0, r3
 8006578:	f001 f968 	bl	800784c <uartPrintf>
  }
}
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20002844 	.word	0x20002844
 8006588:	08012474 	.word	0x08012474
 800658c:	08012484 	.word	0x08012484
 8006590:	08012494 	.word	0x08012494
 8006594:	080124a4 	.word	0x080124a4
 8006598:	080124b4 	.word	0x080124b4
 800659c:	080124c4 	.word	0x080124c4
 80065a0:	080124d4 	.word	0x080124d4
 80065a4:	080124e4 	.word	0x080124e4
 80065a8:	080124f4 	.word	0x080124f4

080065ac <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	4906      	ldr	r1, [pc, #24]	; (80065d4 <cliShowPrompt+0x28>)
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 f946 	bl	800784c <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	4904      	ldr	r1, [pc, #16]	; (80065d8 <cliShowPrompt+0x2c>)
 80065c6:	4618      	mov	r0, r3
 80065c8:	f001 f940 	bl	800784c <uartPrintf>
}
 80065cc:	bf00      	nop
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	080124f8 	.word	0x080124f8
 80065d8:	080124fc 	.word	0x080124fc

080065dc <cliMain>:

bool cliMain(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 80065e0:	4b0e      	ldr	r3, [pc, #56]	; (800661c <cliMain+0x40>)
 80065e2:	7a1b      	ldrb	r3, [r3, #8]
 80065e4:	f083 0301 	eor.w	r3, r3, #1
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <cliMain+0x16>
  {
    return false;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e012      	b.n	8006618 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <cliMain+0x40>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 f8a8 	bl	800774c <uartAvailable>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d009      	beq.n	8006616 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8006602:	4b06      	ldr	r3, [pc, #24]	; (800661c <cliMain+0x40>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f001 f8d2 	bl	80077b0 <uartRead>
 800660c:	4603      	mov	r3, r0
 800660e:	4619      	mov	r1, r3
 8006610:	4802      	ldr	r0, [pc, #8]	; (800661c <cliMain+0x40>)
 8006612:	f000 f805 	bl	8006620 <cliUpdate>
  }

  return true;
 8006616:	2301      	movs	r3, #1
}
 8006618:	4618      	mov	r0, r3
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20002844 	.word	0x20002844

08006620 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08c      	sub	sp, #48	; 0x30
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 800662c:	2300      	movs	r3, #0
 800662e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006638:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	7c1b      	ldrb	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 8165 	bne.w	800690e <cliUpdate+0x2ee>
  {
    switch(rx_data)
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	2b0d      	cmp	r3, #13
 8006648:	d009      	beq.n	800665e <cliUpdate+0x3e>
 800664a:	2b0d      	cmp	r3, #13
 800664c:	dc02      	bgt.n	8006654 <cliUpdate+0x34>
 800664e:	2b08      	cmp	r3, #8
 8006650:	d065      	beq.n	800671e <cliUpdate+0xfe>
 8006652:	e0d4      	b.n	80067fe <cliUpdate+0x1de>
 8006654:	2b1b      	cmp	r3, #27
 8006656:	d01c      	beq.n	8006692 <cliUpdate+0x72>
 8006658:	2b7f      	cmp	r3, #127	; 0x7f
 800665a:	d01e      	beq.n	800669a <cliUpdate+0x7a>
 800665c:	e0cf      	b.n	80067fe <cliUpdate+0x1de>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <cliUpdate+0x54>
        {
          cliLineAdd(p_cli);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fa56 	bl	8006b1a <cliLineAdd>
          cliRunCmd(p_cli);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fb42 	bl	8006cf8 <cliRunCmd>
        }

        line->count = 0;
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff ff8e 	bl	80065ac <cliShowPrompt>
        break;
 8006690:	e144      	b.n	800691c <cliUpdate+0x2fc>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	741a      	strb	r2, [r3, #16]
        break;
 8006698:	e140      	b.n	800691c <cliUpdate+0x2fc>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80066a6:	429a      	cmp	r2, r3
 80066a8:	f080 8133 	bcs.w	8006912 <cliUpdate+0x2f2>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 80066bc:	2301      	movs	r3, #1
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066c0:	e013      	b.n	80066ea <cliUpdate+0xca>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066c8:	461a      	mov	r2, r3
 80066ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066cc:	441a      	add	r2, r3
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066d4:	4619      	mov	r1, r3
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	440b      	add	r3, r1
 80066da:	3b01      	subs	r3, #1
 80066dc:	69f9      	ldr	r1, [r7, #28]
 80066de:	5c89      	ldrb	r1, [r1, r2]
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	3301      	adds	r3, #1
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ea:	7efb      	ldrb	r3, [r7, #27]
 80066ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ee:	429a      	cmp	r2, r3
 80066f0:	dbe7      	blt.n	80066c2 <cliUpdate+0xa2>
          }

          line->count--;
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006708:	461a      	mov	r2, r3
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	2100      	movs	r1, #0
 800670e:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	498e      	ldr	r1, [pc, #568]	; (8006950 <cliUpdate+0x330>)
 8006716:	4618      	mov	r0, r3
 8006718:	f001 f898 	bl	800784c <uartPrintf>
        }
        break;
 800671c:	e0f9      	b.n	8006912 <cliUpdate+0x2f2>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006724:	2b00      	cmp	r3, #0
 8006726:	d055      	beq.n	80067d4 <cliUpdate+0x1b4>
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800672e:	2b00      	cmp	r3, #0
 8006730:	d050      	beq.n	80067d4 <cliUpdate+0x1b4>
        {
          if (line->cursor == line->count)
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800673e:	429a      	cmp	r2, r3
 8006740:	d10e      	bne.n	8006760 <cliUpdate+0x140>
          {
            line->count--;
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006748:	3b01      	subs	r3, #1
 800674a:	b2da      	uxtb	r2, r3
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006758:	461a      	mov	r2, r3
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	2100      	movs	r1, #0
 800675e:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800676c:	429a      	cmp	r2, r3
 800676e:	d231      	bcs.n	80067d4 <cliUpdate+0x1b4>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8006780:	2300      	movs	r3, #0
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28
 8006784:	e013      	b.n	80067ae <cliUpdate+0x18e>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800678c:	461a      	mov	r2, r3
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	441a      	add	r2, r3
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006798:	4619      	mov	r1, r3
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	440b      	add	r3, r1
 800679e:	3b01      	subs	r3, #1
 80067a0:	69f9      	ldr	r1, [r7, #28]
 80067a2:	5c89      	ldrb	r1, [r1, r2]
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	3301      	adds	r3, #1
 80067ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ae:	7ebb      	ldrb	r3, [r7, #26]
 80067b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b2:	429a      	cmp	r2, r3
 80067b4:	dbe7      	blt.n	8006786 <cliUpdate+0x166>
            }

            line->count--;
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80067bc:	3b01      	subs	r3, #1
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80067cc:	461a      	mov	r2, r3
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	2100      	movs	r1, #0
 80067d2:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 809b 	beq.w	8006916 <cliUpdate+0x2f6>
        {
          line->cursor--;
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	4957      	ldr	r1, [pc, #348]	; (8006954 <cliUpdate+0x334>)
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 f828 	bl	800784c <uartPrintf>
        }
        break;
 80067fc:	e08b      	b.n	8006916 <cliUpdate+0x2f6>


      default:
        if ((line->count + 1) < line->buf_len)
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006804:	3301      	adds	r3, #1
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	f892 2020 	ldrb.w	r2, [r2, #32]
 800680c:	4293      	cmp	r3, r2
 800680e:	f280 8084 	bge.w	800691a <cliUpdate+0x2fa>
        {
          if (line->cursor == line->count)
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800681e:	429a      	cmp	r2, r3
 8006820:	d124      	bne.n	800686c <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	1cf9      	adds	r1, r7, #3
 8006828:	2201      	movs	r2, #1
 800682a:	4618      	mov	r0, r3
 800682c:	f000 ffe2 	bl	80077f4 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006836:	461a      	mov	r2, r3
 8006838:	78f9      	ldrb	r1, [r7, #3]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	5499      	strb	r1, [r3, r2]
            line->count++;
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006844:	3301      	adds	r3, #1
 8006846:	b2da      	uxtb	r2, r3
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006854:	3301      	adds	r3, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006864:	461a      	mov	r2, r3
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2100      	movs	r1, #0
 800686a:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006878:	429a      	cmp	r2, r3
 800687a:	d24e      	bcs.n	800691a <cliUpdate+0x2fa>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 800688c:	2300      	movs	r3, #0
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
 8006890:	e013      	b.n	80068ba <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006898:	461a      	mov	r2, r3
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	1e5a      	subs	r2, r3, #1
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80068a6:	4619      	mov	r1, r3
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	1acb      	subs	r3, r1, r3
 80068ac:	69f9      	ldr	r1, [r7, #28]
 80068ae:	5c89      	ldrb	r1, [r1, r2]
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	3301      	adds	r3, #1
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ba:	7e7b      	ldrb	r3, [r7, #25]
 80068bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068be:	429a      	cmp	r2, r3
 80068c0:	dbe7      	blt.n	8006892 <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80068c8:	461a      	mov	r2, r3
 80068ca:	78f9      	ldrb	r1, [r7, #3]
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	5499      	strb	r1, [r3, r2]
            line->count++;
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80068d6:	3301      	adds	r3, #1
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80068e6:	3301      	adds	r3, #1
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80068f6:	461a      	mov	r2, r3
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	2100      	movs	r1, #0
 80068fc:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	78fa      	ldrb	r2, [r7, #3]
 8006904:	4914      	ldr	r1, [pc, #80]	; (8006958 <cliUpdate+0x338>)
 8006906:	4618      	mov	r0, r3
 8006908:	f000 ffa0 	bl	800784c <uartPrintf>
          }
        }
        break;
 800690c:	e005      	b.n	800691a <cliUpdate+0x2fa>
    }
  }
 800690e:	bf00      	nop
 8006910:	e004      	b.n	800691c <cliUpdate+0x2fc>
        break;
 8006912:	bf00      	nop
 8006914:	e002      	b.n	800691c <cliUpdate+0x2fc>
        break;
 8006916:	bf00      	nop
 8006918:	e000      	b.n	800691c <cliUpdate+0x2fc>
        break;
 800691a:	bf00      	nop

  switch(p_cli->state)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	7c1b      	ldrb	r3, [r3, #16]
 8006920:	3b01      	subs	r3, #1
 8006922:	2b03      	cmp	r3, #3
 8006924:	f200 80d3 	bhi.w	8006ace <cliUpdate+0x4ae>
 8006928:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <cliUpdate+0x310>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	08006941 	.word	0x08006941
 8006934:	08006949 	.word	0x08006949
 8006938:	0800695d 	.word	0x0800695d
 800693c:	08006ac5 	.word	0x08006ac5
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	741a      	strb	r2, [r3, #16]
      break;
 8006946:	e0c2      	b.n	8006ace <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2203      	movs	r2, #3
 800694c:	741a      	strb	r2, [r3, #16]
      break;
 800694e:	e0be      	b.n	8006ace <cliUpdate+0x4ae>
 8006950:	08012504 	.word	0x08012504
 8006954:	0801250c 	.word	0x0801250c
 8006958:	08012514 	.word	0x08012514

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8006962:	78fb      	ldrb	r3, [r7, #3]
 8006964:	2b44      	cmp	r3, #68	; 0x44
 8006966:	d11a      	bne.n	800699e <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800696e:	2b00      	cmp	r3, #0
 8006970:	d015      	beq.n	800699e <cliUpdate+0x37e>
        {
          line->cursor--;
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006978:	3b01      	subs	r3, #1
 800697a:	b2da      	uxtb	r2, r3
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 8006982:	231b      	movs	r3, #27
 8006984:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8006986:	235b      	movs	r3, #91	; 0x5b
 8006988:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	f107 010c 	add.w	r1, r7, #12
 8006996:	2203      	movs	r2, #3
 8006998:	4618      	mov	r0, r3
 800699a:	f000 ff2b 	bl	80077f4 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	2b43      	cmp	r3, #67	; 0x43
 80069a2:	d11d      	bne.n	80069e0 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->buf_len)
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d207      	bcs.n	80069c4 <cliUpdate+0x3a4>
        {
          line->cursor++;
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
        tx_buf[0] = 0x1B;
 80069c4:	231b      	movs	r3, #27
 80069c6:	733b      	strb	r3, [r7, #12]
        tx_buf[1] = 0x5B;
 80069c8:	235b      	movs	r3, #91	; 0x5b
 80069ca:	737b      	strb	r3, [r7, #13]
        tx_buf[2] = rx_data;
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	73bb      	strb	r3, [r7, #14]
        uartWrite(p_cli->ch, tx_buf, 3);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f107 010c 	add.w	r1, r7, #12
 80069d8:	2203      	movs	r2, #3
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 ff0a 	bl	80077f4 <uartWrite>
      }

      if (rx_data == CLI_KEY_UP)
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	2b41      	cmp	r3, #65	; 0x41
 80069e4:	d10c      	bne.n	8006a00 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 80069e6:	2101      	movs	r1, #1
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f8eb 	bl	8006bc4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	781a      	ldrb	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80069f8:	4619      	mov	r1, r3
 80069fa:	4610      	mov	r0, r2
 80069fc:	f000 ff26 	bl	800784c <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	2b42      	cmp	r3, #66	; 0x42
 8006a04:	d10c      	bne.n	8006a20 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8006a06:	2100      	movs	r1, #0
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f8db 	bl	8006bc4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f000 ff16 	bl	800784c <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	2b31      	cmp	r3, #49	; 0x31
 8006a24:	d10f      	bne.n	8006a46 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	7818      	ldrb	r0, [r3, #0]
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a30:	461a      	mov	r2, r3
 8006a32:	492b      	ldr	r1, [pc, #172]	; (8006ae0 <cliUpdate+0x4c0>)
 8006a34:	f000 ff0a 	bl	800784c <uartPrintf>
        line->cursor = 0;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2204      	movs	r2, #4
 8006a44:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	2b34      	cmp	r3, #52	; 0x34
 8006a4a:	d13f      	bne.n	8006acc <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d210      	bcs.n	8006a7e <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	8afa      	ldrh	r2, [r7, #22]
 8006a76:	491b      	ldr	r1, [pc, #108]	; (8006ae4 <cliUpdate+0x4c4>)
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fee7 	bl	800784c <uartPrintf>
        }
        if (line->cursor > line->count)
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d910      	bls.n	8006ab0 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	8afa      	ldrh	r2, [r7, #22]
 8006aa8:	490d      	ldr	r1, [pc, #52]	; (8006ae0 <cliUpdate+0x4c0>)
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fece 	bl	800784c <uartPrintf>
        }
        line->cursor = line->count;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2204      	movs	r2, #4
 8006ac0:	741a      	strb	r2, [r3, #16]
      }
      break;
 8006ac2:	e003      	b.n	8006acc <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	741a      	strb	r2, [r3, #16]
      break;
 8006aca:	e000      	b.n	8006ace <cliUpdate+0x4ae>
      break;
 8006acc:	bf00      	nop
  }



  cliShowLog(p_cli);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff fcea 	bl	80064a8 <cliShowLog>

  return ret;
 8006ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3730      	adds	r7, #48	; 0x30
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	08012520 	.word	0x08012520
 8006ae4:	08012528 	.word	0x08012528

08006ae8 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	221f      	movs	r2, #31
 8006b04:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr

08006b1a <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8006b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	00da      	lsls	r2, r3, #3
 8006b34:	1ad2      	subs	r2, r2, r3
 8006b36:	188b      	adds	r3, r1, r2
 8006b38:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f503 7409 	add.w	r4, r3, #548	; 0x224
 8006b42:	4694      	mov	ip, r2
 8006b44:	f104 0e20 	add.w	lr, r4, #32
 8006b48:	4665      	mov	r5, ip
 8006b4a:	4626      	mov	r6, r4
 8006b4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006b4e:	6028      	str	r0, [r5, #0]
 8006b50:	6069      	str	r1, [r5, #4]
 8006b52:	60aa      	str	r2, [r5, #8]
 8006b54:	60eb      	str	r3, [r5, #12]
 8006b56:	3410      	adds	r4, #16
 8006b58:	f10c 0c10 	add.w	ip, ip, #16
 8006b5c:	4574      	cmp	r4, lr
 8006b5e:	d1f3      	bne.n	8006b48 <cliLineAdd+0x2e>
 8006b60:	4663      	mov	r3, ip
 8006b62:	4622      	mov	r2, r4
 8006b64:	8811      	ldrh	r1, [r2, #0]
 8006b66:	7892      	ldrb	r2, [r2, #2]
 8006b68:	8019      	strh	r1, [r3, #0]
 8006b6a:	709a      	strb	r2, [r3, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d807      	bhi.n	8006b86 <cliLineAdd+0x6c>
  {
    p_cli->hist_line_count++;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8006b8c:	b25a      	sxtb	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	425a      	negs	r2, r3
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	f002 0203 	and.w	r2, r2, #3
 8006ba6:	bf58      	it	pl
 8006ba8:	4253      	negpl	r3, r2
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006bc4 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8006bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 8086 	beq.w	8006ce8 <cliLineChange+0x124>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d008      	beq.n	8006bf8 <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	7818      	ldrb	r0, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	493f      	ldr	r1, [pc, #252]	; (8006cf0 <cliLineChange+0x12c>)
 8006bf4:	f000 fe2a 	bl	800784c <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d008      	beq.n	8006c14 <cliLineChange+0x50>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7818      	ldrb	r0, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	4939      	ldr	r1, [pc, #228]	; (8006cf4 <cliLineChange+0x130>)
 8006c10:	f000 fe1c 	bl	800784c <uartPrintf>
  }


  if (key_up == true)
 8006c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d125      	bne.n	8006c68 <cliLineChange+0xa4>
  {
    if (p_cli->hist_line_new == true)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d006      	beq.n	8006c34 <cliLineChange+0x70>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8006c2c:	b25a      	sxtb	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8006c42:	4413      	add	r3, r2
 8006c44:	3b01      	subs	r3, #1
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8006c4c:	fb93 f1f2 	sdiv	r1, r3, r2
 8006c50:	fb02 f201 	mul.w	r2, r2, r1
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	b25a      	sxtb	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8006c64:	73fb      	strb	r3, [r7, #15]
 8006c66:	e013      	b.n	8006c90 <cliLineChange+0xcc>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8006c6e:	3301      	adds	r3, #1
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8006c76:	fb93 f1f2 	sdiv	r1, r3, r2
 8006c7a:	fb02 f201 	mul.w	r2, r2, r1
 8006c7e:	1a9b      	subs	r3, r3, r2
 8006c80:	b25a      	sxtb	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8006c8e:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8006c90:	7bfa      	ldrb	r2, [r7, #15]
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	00da      	lsls	r2, r3, #3
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	1883      	adds	r3, r0, r2
 8006ca2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8006ca6:	461c      	mov	r4, r3
 8006ca8:	f501 7609 	add.w	r6, r1, #548	; 0x224
 8006cac:	f104 0c20 	add.w	ip, r4, #32
 8006cb0:	4635      	mov	r5, r6
 8006cb2:	4623      	mov	r3, r4
 8006cb4:	6818      	ldr	r0, [r3, #0]
 8006cb6:	6859      	ldr	r1, [r3, #4]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cbe:	3410      	adds	r4, #16
 8006cc0:	3610      	adds	r6, #16
 8006cc2:	4564      	cmp	r4, ip
 8006cc4:	d1f4      	bne.n	8006cb0 <cliLineChange+0xec>
 8006cc6:	4633      	mov	r3, r6
 8006cc8:	4622      	mov	r2, r4
 8006cca:	8811      	ldrh	r1, [r2, #0]
 8006ccc:	7892      	ldrb	r2, [r2, #2]
 8006cce:	8019      	strh	r1, [r3, #0]
 8006cd0:	709a      	strb	r2, [r3, #2]
  p_cli->line.cursor = p_cli->line.count;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

  p_cli->hist_line_new = false;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8006ce6:	e000      	b.n	8006cea <cliLineChange+0x126>
    return;
 8006ce8:	bf00      	nop
}
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf0:	08012520 	.word	0x08012520
 8006cf4:	08012530 	.word	0x08012530

08006cf8 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8006d00:	2300      	movs	r3, #0
 8006d02:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f851 	bl	8006dac <cliParseArgs>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d046      	beq.n	8006d9e <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8006d10:	4825      	ldr	r0, [pc, #148]	; (8006da8 <cliRunCmd+0xb0>)
 8006d12:	f000 f893 	bl	8006e3c <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 f8b1 	bl	8006e84 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	e033      	b.n	8006d90 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	4413      	add	r3, r2
 8006d40:	3304      	adds	r3, #4
 8006d42:	4619      	mov	r1, r3
 8006d44:	f7fe fa74 	bl	8005230 <strcmp>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d11d      	bne.n	8006d8a <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
        break;
 8006d88:	e009      	b.n	8006d9e <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8006d96:	461a      	mov	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	dbc4      	blt.n	8006d28 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	08012538 	.word	0x08012538

08006dac <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8006db4:	2300      	movs	r3, #0
 8006db6:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8006dca:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8006dd2:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8006dd4:	8afb      	ldrh	r3, [r7, #22]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8006de0:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <cliParseArgs+0x8c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f107 0208 	add.w	r2, r7, #8
 8006de8:	4619      	mov	r1, r3
 8006dea:	6938      	ldr	r0, [r7, #16]
 8006dec:	f009 fb9c 	bl	8010528 <strtok_r>
 8006df0:	61b8      	str	r0, [r7, #24]
 8006df2:	e010      	b.n	8006e16 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8006df4:	8afb      	ldrh	r3, [r7, #22]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	82fa      	strh	r2, [r7, #22]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8006e04:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <cliParseArgs+0x8c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f107 0208 	add.w	r2, r7, #8
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	2000      	movs	r0, #0
 8006e10:	f009 fb8a 	bl	8010528 <strtok_r>
 8006e14:	61b8      	str	r0, [r7, #24]
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1eb      	bne.n	8006df4 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8afa      	ldrh	r2, [r7, #22]
 8006e20:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 8006e24:	8afb      	ldrh	r3, [r7, #22]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <cliParseArgs+0x82>
  {
    ret = true;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8006e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3720      	adds	r7, #32
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000004 	.word	0x20000004

08006e3c <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8006e3c:	b40f      	push	{r0, r1, r2, r3}
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8006e44:	f107 031c 	add.w	r3, r7, #28
 8006e48:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <cliPrintf+0x44>)
 8006e4c:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f103 0011 	add.w	r0, r3, #17
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e5c:	f009 fc24 	bl	80106a8 <vsniprintf>
 8006e60:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	7818      	ldrb	r0, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3311      	adds	r3, #17
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f000 fcc1 	bl	80077f4 <uartWrite>
}
 8006e72:	bf00      	nop
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e7c:	b004      	add	sp, #16
 8006e7e:	4770      	bx	lr
 8006e80:	20002844 	.word	0x20002844

08006e84 <cliToUpper>:

void cliToUpper(char *str)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	81fb      	strh	r3, [r7, #14]
 8006e90:	e018      	b.n	8006ec4 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8006e92:	89fb      	ldrh	r3, [r7, #14]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	4413      	add	r3, r2
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8006e9c:	7b7b      	ldrb	r3, [r7, #13]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d014      	beq.n	8006ecc <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8006ea2:	7b7b      	ldrb	r3, [r7, #13]
 8006ea4:	2b60      	cmp	r3, #96	; 0x60
 8006ea6:	d905      	bls.n	8006eb4 <cliToUpper+0x30>
 8006ea8:	7b7b      	ldrb	r3, [r7, #13]
 8006eaa:	2b7a      	cmp	r3, #122	; 0x7a
 8006eac:	d802      	bhi.n	8006eb4 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8006eae:	7b7b      	ldrb	r3, [r7, #13]
 8006eb0:	3b20      	subs	r3, #32
 8006eb2:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8006eb4:	89fb      	ldrh	r3, [r7, #14]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	4413      	add	r3, r2
 8006eba:	7b7a      	ldrb	r2, [r7, #13]
 8006ebc:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8006ebe:	89fb      	ldrh	r3, [r7, #14]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	81fb      	strh	r3, [r7, #14]
 8006ec4:	89fb      	ldrh	r3, [r7, #14]
 8006ec6:	2b0f      	cmp	r3, #15
 8006ec8:	d9e3      	bls.n	8006e92 <cliToUpper+0xe>
 8006eca:	e000      	b.n	8006ece <cliToUpper+0x4a>
      break;
 8006ecc:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8006ece:	89fb      	ldrh	r3, [r7, #14]
 8006ed0:	2b10      	cmp	r3, #16
 8006ed2:	d105      	bne.n	8006ee0 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8006ed4:	89fb      	ldrh	r3, [r7, #14]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	2200      	movs	r2, #0
 8006ede:	701a      	strb	r2, [r3, #0]
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr
	...

08006eec <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8006efa:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <cliArgsGetData+0x4c>)
 8006efc:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d301      	bcc.n	8006f10 <cliArgsGetData+0x24>
  {
    return 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e00e      	b.n	8006f2e <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	2100      	movs	r1, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f009 fb7e 	bl	8010624 <strtoul>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	60fb      	str	r3, [r7, #12]

  return ret;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20002844 	.word	0x20002844

08006f3c <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8006f4c:	4b0e      	ldr	r3, [pc, #56]	; (8006f88 <cliArgsGetFloat+0x4c>)
 8006f4e:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d302      	bcc.n	8006f64 <cliArgsGetFloat+0x28>
  {
    return 0;
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	e00c      	b.n	8006f7e <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f009 fa5f 	bl	8010438 <strtof>
 8006f7a:	60f8      	str	r0, [r7, #12]

  return ret;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20002844 	.word	0x20002844

08006f8c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <cliArgsGetStr+0x40>)
 8006f9c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d301      	bcc.n	8006fb0 <cliArgsGetStr+0x24>
  {
    return 0;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e008      	b.n	8006fc2 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]

  return ret;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr
 8006fcc:	20002844 	.word	0x20002844

08006fd0 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <cliArgsIsStr+0x50>)
 8006fe2:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d301      	bcc.n	8006ff6 <cliArgsIsStr+0x26>
  {
    return 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e010      	b.n	8007018 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4619      	mov	r1, r3
 8007006:	6838      	ldr	r0, [r7, #0]
 8007008:	f7fe f912 	bl	8005230 <strcmp>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <cliArgsIsStr+0x46>
  {
    ret = true;
 8007012:	2301      	movs	r3, #1
 8007014:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007016:	7bfb      	ldrb	r3, [r7, #15]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20002844 	.word	0x20002844

08007024 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800702a:	4b08      	ldr	r3, [pc, #32]	; (800704c <cliKeepLoop+0x28>)
 800702c:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fb8a 	bl	800774c <uartAvailable>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <cliKeepLoop+0x1e>
  {
    return true;
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8007042:	2300      	movs	r3, #0
  }
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20002844 	.word	0x20002844

08007050 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800705a:	2301      	movs	r3, #1
 800705c:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800705e:	4b20      	ldr	r3, [pc, #128]	; (80070e0 <cliAdd+0x90>)
 8007060:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007068:	2b0f      	cmp	r3, #15
 800706a:	d901      	bls.n	8007070 <cliAdd+0x20>
  {
    return false;
 800706c:	2300      	movs	r3, #0
 800706e:	e032      	b.n	80070d6 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007076:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8007078:	89fa      	ldrh	r2, [r7, #14]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4413      	add	r3, r2
 800708a:	3304      	adds	r3, #4
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	4618      	mov	r0, r3
 8007090:	f008 fba6 	bl	800f7e0 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8007094:	89fa      	ldrh	r2, [r7, #14]
 8007096:	6939      	ldr	r1, [r7, #16]
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80070aa:	89fa      	ldrh	r2, [r7, #14]
 80070ac:	4613      	mov	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4413      	add	r3, r2
 80070bc:	3304      	adds	r3, #4
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fee0 	bl	8006e84 <cliToUpper>

  p_cli->cmd_count++;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80070ca:	3301      	adds	r3, #1
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20002844 	.word	0x20002844

080070e4 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80070ec:	4b15      	ldr	r3, [pc, #84]	; (8007144 <cliShowList+0x60>)
 80070ee:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80070f0:	4815      	ldr	r0, [pc, #84]	; (8007148 <cliShowList+0x64>)
 80070f2:	f7ff fea3 	bl	8006e3c <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80070f6:	4815      	ldr	r0, [pc, #84]	; (800714c <cliShowList+0x68>)
 80070f8:	f7ff fea0 	bl	8006e3c <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e012      	b.n	8007128 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	4413      	add	r3, r2
 8007114:	3304      	adds	r3, #4
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff fe90 	bl	8006e3c <cliPrintf>
    cliPrintf("\r\n");
 800711c:	480a      	ldr	r0, [pc, #40]	; (8007148 <cliShowList+0x64>)
 800711e:	f7ff fe8d 	bl	8006e3c <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3301      	adds	r3, #1
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800712e:	461a      	mov	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4293      	cmp	r3, r2
 8007134:	dbe5      	blt.n	8007102 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8007136:	4806      	ldr	r0, [pc, #24]	; (8007150 <cliShowList+0x6c>)
 8007138:	f7ff fe80 	bl	8006e3c <cliPrintf>
}
 800713c:	bf00      	nop
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20002844 	.word	0x20002844
 8007148:	08012538 	.word	0x08012538
 800714c:	0801253c 	.word	0x0801253c
 8007150:	0801255c 	.word	0x0801255c

08007154 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08c      	sub	sp, #48	; 0x30
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 800715c:	2310      	movs	r3, #16
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8007174:	4840      	ldr	r0, [pc, #256]	; (8007278 <cliMemoryDump+0x124>)
 8007176:	f7ff fe61 	bl	8006e3c <cliPrintf>
 800717a:	e07a      	b.n	8007272 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2b01      	cmp	r3, #1
 8007180:	dd09      	ble.n	8007196 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3304      	adds	r3, #4
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2200      	movs	r2, #0
 800718a:	2100      	movs	r1, #0
 800718c:	4618      	mov	r0, r3
 800718e:	f009 fa49 	bl	8010624 <strtoul>
 8007192:	4603      	mov	r3, r0
 8007194:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2200      	movs	r2, #0
 800719c:	2100      	movs	r1, #0
 800719e:	4618      	mov	r0, r3
 80071a0:	f009 fa40 	bl	8010624 <strtoul>
 80071a4:	4603      	mov	r3, r0
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80071ac:	4833      	ldr	r0, [pc, #204]	; (800727c <cliMemoryDump+0x128>)
 80071ae:	f7ff fe45 	bl	8006e3c <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80071b2:	2300      	movs	r3, #0
 80071b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071b6:	e058      	b.n	800726a <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80071b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d104      	bne.n	80071cc <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	4619      	mov	r1, r3
 80071c6:	482e      	ldr	r0, [pc, #184]	; (8007280 <cliMemoryDump+0x12c>)
 80071c8:	f7ff fe38 	bl	8006e3c <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4619      	mov	r1, r3
 80071d2:	482c      	ldr	r0, [pc, #176]	; (8007284 <cliMemoryDump+0x130>)
 80071d4:	f7ff fe32 	bl	8006e3c <cliPrintf>

    if ((idx%4) == 3)
 80071d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071da:	425a      	negs	r2, r3
 80071dc:	f003 0303 	and.w	r3, r3, #3
 80071e0:	f002 0203 	and.w	r2, r2, #3
 80071e4:	bf58      	it	pl
 80071e6:	4253      	negpl	r3, r2
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d138      	bne.n	800725e <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80071ec:	4826      	ldr	r0, [pc, #152]	; (8007288 <cliMemoryDump+0x134>)
 80071ee:	f7ff fe25 	bl	8006e3c <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80071f2:	2300      	movs	r3, #0
 80071f4:	623b      	str	r3, [r7, #32]
 80071f6:	e02c      	b.n	8007252 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	e01d      	b.n	8007240 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8007204:	f107 020c 	add.w	r2, r7, #12
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	4413      	add	r3, r2
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b1f      	cmp	r3, #31
 8007210:	d910      	bls.n	8007234 <cliMemoryDump+0xe0>
 8007212:	f107 020c 	add.w	r2, r7, #12
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	4413      	add	r3, r2
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b7e      	cmp	r3, #126	; 0x7e
 800721e:	d809      	bhi.n	8007234 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8007220:	f107 020c 	add.w	r2, r7, #12
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4413      	add	r3, r2
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	4619      	mov	r1, r3
 800722c:	4817      	ldr	r0, [pc, #92]	; (800728c <cliMemoryDump+0x138>)
 800722e:	f7ff fe05 	bl	8006e3c <cliPrintf>
 8007232:	e002      	b.n	800723a <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8007234:	4816      	ldr	r0, [pc, #88]	; (8007290 <cliMemoryDump+0x13c>)
 8007236:	f7ff fe01 	bl	8006e3c <cliPrintf>
        for (i=0;i<4;i++)
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	3301      	adds	r3, #1
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	2b03      	cmp	r3, #3
 8007244:	ddde      	ble.n	8007204 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	3304      	adds	r3, #4
 800724a:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	3301      	adds	r3, #1
 8007250:	623b      	str	r3, [r7, #32]
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	2b03      	cmp	r3, #3
 8007256:	ddcf      	ble.n	80071f8 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8007258:	480e      	ldr	r0, [pc, #56]	; (8007294 <cliMemoryDump+0x140>)
 800725a:	f7ff fdef 	bl	8006e3c <cliPrintf>
    }
    addr++;
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	3304      	adds	r3, #4
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	3301      	adds	r3, #1
 8007268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800726a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726e:	429a      	cmp	r2, r3
 8007270:	dba2      	blt.n	80071b8 <cliMemoryDump+0x64>
  }
}
 8007272:	3730      	adds	r7, #48	; 0x30
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	0801257c 	.word	0x0801257c
 800727c:	08012590 	.word	0x08012590
 8007280:	08012598 	.word	0x08012598
 8007284:	080125a4 	.word	0x080125a4
 8007288:	080125ac 	.word	0x080125ac
 800728c:	080125b0 	.word	0x080125b0
 8007290:	080125b4 	.word	0x080125b4
 8007294:	080125b8 	.word	0x080125b8

08007298 <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);
#if 1
bool flashInit(void)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 800729e:	2300      	movs	r3, #0
 80072a0:	607b      	str	r3, [r7, #4]
 80072a2:	e012      	b.n	80072ca <flashInit+0x32>
  {
    flash_tbl[i].addr = 0x08000000 + i*FLASH_SECTOR_SIZE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80072aa:	02db      	lsls	r3, r3, #11
 80072ac:	4619      	mov	r1, r3
 80072ae:	4a0b      	ldr	r2, [pc, #44]	; (80072dc <flashInit+0x44>)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    flash_tbl[i].length = FLASH_SECTOR_SIZE;
 80072b6:	4a09      	ldr	r2, [pc, #36]	; (80072dc <flashInit+0x44>)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	4413      	add	r3, r2
 80072be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072c2:	809a      	strh	r2, [r3, #4]
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3301      	adds	r3, #1
 80072c8:	607b      	str	r3, [r7, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2bff      	cmp	r3, #255	; 0xff
 80072ce:	dde9      	ble.n	80072a4 <flashInit+0xc>
  }

  return true;
 80072d0:	2301      	movs	r3, #1
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bc80      	pop	{r7}
 80072da:	4770      	bx	lr
 80072dc:	20000398 	.word	0x20000398

080072e0 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af00      	add	r7, sp, #0
  bool ret = true;
 80072e6:	2301      	movs	r3, #1
 80072e8:	76fb      	strb	r3, [r7, #27]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#endif
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072ea:	f107 0308 	add.w	r3, r7, #8
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	605a      	str	r2, [r3, #4]
 80072f4:	609a      	str	r2, [r3, #8]
 80072f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072f8:	4b22      	ldr	r3, [pc, #136]	; (8007384 <ledInit+0xa4>)
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	4a21      	ldr	r2, [pc, #132]	; (8007384 <ledInit+0xa4>)
 80072fe:	f043 0308 	orr.w	r3, r3, #8
 8007302:	6193      	str	r3, [r2, #24]
 8007304:	4b1f      	ldr	r3, [pc, #124]	; (8007384 <ledInit+0xa4>)
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	607b      	str	r3, [r7, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007310:	4b1c      	ldr	r3, [pc, #112]	; (8007384 <ledInit+0xa4>)
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	4a1b      	ldr	r2, [pc, #108]	; (8007384 <ledInit+0xa4>)
 8007316:	f043 0304 	orr.w	r3, r3, #4
 800731a:	6193      	str	r3, [r2, #24]
 800731c:	4b19      	ldr	r3, [pc, #100]	; (8007384 <ledInit+0xa4>)
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  //GPIO_InitStruct.Pin = LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007328:	2301      	movs	r3, #1
 800732a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732c:	2300      	movs	r3, #0
 800732e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007330:	2302      	movs	r3, #2
 8007332:	617b      	str	r3, [r7, #20]
  //HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
  for( int i=0; i<LED_MAX_CH; i++)
 8007334:	2300      	movs	r3, #0
 8007336:	61fb      	str	r3, [r7, #28]
 8007338:	e017      	b.n	800736a <ledInit+0x8a>
  {
  	GPIO_InitStruct.Pin = led_tbl[i].pin;
 800733a:	4a13      	ldr	r2, [pc, #76]	; (8007388 <ledInit+0xa8>)
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4413      	add	r3, r2
 8007342:	889b      	ldrh	r3, [r3, #4]
 8007344:	60bb      	str	r3, [r7, #8]
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8007346:	4a10      	ldr	r2, [pc, #64]	; (8007388 <ledInit+0xa8>)
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800734e:	f107 0208 	add.w	r2, r7, #8
 8007352:	4611      	mov	r1, r2
 8007354:	4618      	mov	r0, r3
 8007356:	f002 fb33 	bl	80099c0 <HAL_GPIO_Init>

  	ledOff(i);
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	4618      	mov	r0, r3
 8007360:	f000 f818 	bl	8007394 <ledOff>
  for( int i=0; i<LED_MAX_CH; i++)
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	3301      	adds	r3, #1
 8007368:	61fb      	str	r3, [r7, #28]
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	2b03      	cmp	r3, #3
 800736e:	dde4      	ble.n	800733a <ledInit+0x5a>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8007370:	4906      	ldr	r1, [pc, #24]	; (800738c <ledInit+0xac>)
 8007372:	4807      	ldr	r0, [pc, #28]	; (8007390 <ledInit+0xb0>)
 8007374:	f7ff fe6c 	bl	8007050 <cliAdd>
#endif
  return ret;
 8007378:	7efb      	ldrb	r3, [r7, #27]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	40021000 	.word	0x40021000
 8007388:	20000008 	.word	0x20000008
 800738c:	0800740d 	.word	0x0800740d
 8007390:	080125c8 	.word	0x080125c8

08007394 <ledOff>:
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 800739e:	79fb      	ldrb	r3, [r7, #7]
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d811      	bhi.n	80073c8 <ledOff+0x34>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	4a0a      	ldr	r2, [pc, #40]	; (80073d0 <ledOff+0x3c>)
 80073a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	4a08      	ldr	r2, [pc, #32]	; (80073d0 <ledOff+0x3c>)
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4413      	add	r3, r2
 80073b4:	8899      	ldrh	r1, [r3, #4]
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	4a05      	ldr	r2, [pc, #20]	; (80073d0 <ledOff+0x3c>)
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	4413      	add	r3, r2
 80073be:	79db      	ldrb	r3, [r3, #7]
 80073c0:	461a      	mov	r2, r3
 80073c2:	f002 fd3d 	bl	8009e40 <HAL_GPIO_WritePin>
 80073c6:	e000      	b.n	80073ca <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 80073c8:	bf00      	nop
}
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000008 	.word	0x20000008

080073d4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d80c      	bhi.n	80073fe <ledToggle+0x2a>
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	4a08      	ldr	r2, [pc, #32]	; (8007408 <ledToggle+0x34>)
 80073e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	4a06      	ldr	r2, [pc, #24]	; (8007408 <ledToggle+0x34>)
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	4413      	add	r3, r2
 80073f4:	889b      	ldrh	r3, [r3, #4]
 80073f6:	4619      	mov	r1, r3
 80073f8:	f002 fd3a 	bl	8009e70 <HAL_GPIO_TogglePin>
 80073fc:	e000      	b.n	8007400 <ledToggle+0x2c>
	if(ch >= LED_MAX_CH) return;
 80073fe:	bf00      	nop
}
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000008 	.word	0x20000008

0800740c <cliLed>:

#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8007414:	2300      	movs	r3, #0
 8007416:	75fb      	strb	r3, [r7, #23]

  if(args->argc == 3 && args->isStr(0, "toggle") == true)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	2b03      	cmp	r3, #3
 800741e:	d133      	bne.n	8007488 <cliLed+0x7c>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	491f      	ldr	r1, [pc, #124]	; (80074a4 <cliLed+0x98>)
 8007426:	2000      	movs	r0, #0
 8007428:	4798      	blx	r3
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d02b      	beq.n	8007488 <cliLed+0x7c>
  {
    uint8_t led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch = (uint8_t)args->getData(1);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	2001      	movs	r0, #1
 8007436:	4798      	blx	r3
 8007438:	4603      	mov	r3, r0
 800743a:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2002      	movs	r0, #2
 8007442:	4798      	blx	r3
 8007444:	4603      	mov	r3, r0
 8007446:	60fb      	str	r3, [r7, #12]

    if(led_ch > 0)
 8007448:	7dbb      	ldrb	r3, [r7, #22]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <cliLed+0x48>
    {
      led_ch--;
 800744e:	7dbb      	ldrb	r3, [r7, #22]
 8007450:	3b01      	subs	r3, #1
 8007452:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8007454:	f7fe fd2e 	bl	8005eb4 <millis>
 8007458:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800745a:	e00e      	b.n	800747a <cliLed+0x6e>
    {
      if(millis()-pre_time >= toggle_time)
 800745c:	f7fe fd2a 	bl	8005eb4 <millis>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	429a      	cmp	r2, r3
 800746a:	d806      	bhi.n	800747a <cliLed+0x6e>
      {
        pre_time = millis();
 800746c:	f7fe fd22 	bl	8005eb4 <millis>
 8007470:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8007472:	7dbb      	ldrb	r3, [r7, #22]
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff ffad 	bl	80073d4 <ledToggle>
    while(cliKeepLoop())
 800747a:	f7ff fdd3 	bl	8007024 <cliKeepLoop>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1eb      	bne.n	800745c <cliLed+0x50>
      }
    }
    ret = true;
 8007484:	2301      	movs	r3, #1
 8007486:	75fb      	strb	r3, [r7, #23]
  }


  if(ret != true)
 8007488:	7dfb      	ldrb	r3, [r7, #23]
 800748a:	f083 0301 	eor.w	r3, r3, #1
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms \n", LED_MAX_CH);
 8007494:	2104      	movs	r1, #4
 8007496:	4804      	ldr	r0, [pc, #16]	; (80074a8 <cliLed+0x9c>)
 8007498:	f7ff fcd0 	bl	8006e3c <cliPrintf>
  }
}
 800749c:	bf00      	nop
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	080125cc 	.word	0x080125cc
 80074a8:	080125d4 	.word	0x080125d4

080074ac <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
  bool ret = true;
 80074b2:	2301      	movs	r3, #1
 80074b4:	71fb      	strb	r3, [r7, #7]

  /* if reset pin on */
  if(RCC->CSR & (1<<26))
 80074b6:	4b11      	ldr	r3, [pc, #68]	; (80074fc <resetInit+0x50>)
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d012      	beq.n	80074e8 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 80074c2:	2001      	movs	r0, #1
 80074c4:	f000 f84e 	bl	8007564 <rtcBackupRegRead>
 80074c8:	4603      	mov	r3, r0
 80074ca:	3301      	adds	r3, #1
 80074cc:	4619      	mov	r1, r3
 80074ce:	2001      	movs	r0, #1
 80074d0:	f000 f858 	bl	8007584 <rtcBackupRegWrite>
    delay(500);
 80074d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80074d8:	f7fe fcd8 	bl	8005e8c <delay>
    reset_count = rtcBackupRegRead(1);
 80074dc:	2001      	movs	r0, #1
 80074de:	f000 f841 	bl	8007564 <rtcBackupRegRead>
 80074e2:	4602      	mov	r2, r0
 80074e4:	4b06      	ldr	r3, [pc, #24]	; (8007500 <resetInit+0x54>)
 80074e6:	601a      	str	r2, [r3, #0]
  }

  rtcBackupRegWrite(1, 0);
 80074e8:	2100      	movs	r1, #0
 80074ea:	2001      	movs	r0, #1
 80074ec:	f000 f84a 	bl	8007584 <rtcBackupRegWrite>

  return ret;
 80074f0:	79fb      	ldrb	r3, [r7, #7]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	40021000 	.word	0x40021000
 8007500:	20000b98 	.word	0x20000b98

08007504 <rtcInit>:


RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
  bool ret = true;
 800750a:	2301      	movs	r3, #1
 800750c:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800750e:	4b12      	ldr	r3, [pc, #72]	; (8007558 <rtcInit+0x54>)
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	4a11      	ldr	r2, [pc, #68]	; (8007558 <rtcInit+0x54>)
 8007514:	f043 0310 	orr.w	r3, r3, #16
 8007518:	6193      	str	r3, [r2, #24]
 800751a:	4b0f      	ldr	r3, [pc, #60]	; (8007558 <rtcInit+0x54>)
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	f003 0310 	and.w	r3, r3, #16
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	683b      	ldr	r3, [r7, #0]

  /** Initialize RTC Only */
  hrtc.Instance           = RTC;
 8007526:	4b0d      	ldr	r3, [pc, #52]	; (800755c <rtcInit+0x58>)
 8007528:	4a0d      	ldr	r2, [pc, #52]	; (8007560 <rtcInit+0x5c>)
 800752a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 800752c:	4b0b      	ldr	r3, [pc, #44]	; (800755c <rtcInit+0x58>)
 800752e:	f04f 32ff 	mov.w	r2, #4294967295
 8007532:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 8007534:	4b09      	ldr	r3, [pc, #36]	; (800755c <rtcInit+0x58>)
 8007536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800753a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800753c:	4807      	ldr	r0, [pc, #28]	; (800755c <rtcInit+0x58>)
 800753e:	f004 f9c9 	bl	800b8d4 <HAL_RTC_Init>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <rtcInit+0x48>
  {
    Error_Handler();
 8007548:	f7fe fd6c 	bl	8006024 <Error_Handler>
  }

  return ret;
 800754c:	79fb      	ldrb	r3, [r7, #7]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	40021000 	.word	0x40021000
 800755c:	20002be8 	.word	0x20002be8
 8007560:	40002800 	.word	0x40002800

08007564 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	4804      	ldr	r0, [pc, #16]	; (8007580 <rtcBackupRegRead+0x1c>)
 8007570:	f004 fade 	bl	800bb30 <HAL_RTCEx_BKUPRead>
 8007574:	4603      	mov	r3, r0

}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20002be8 	.word	0x20002be8

08007584 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4803      	ldr	r0, [pc, #12]	; (80075a0 <rtcBackupRegWrite+0x1c>)
 8007594:	f004 fab2 	bl	800bafc <HAL_RTCEx_BKUPWrite>
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20002be8 	.word	0x20002be8

080075a4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0b      	ldr	r2, [pc, #44]	; (80075e0 <HAL_RTC_MspInit+0x3c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d110      	bne.n	80075d8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80075b6:	f003 fbbf 	bl	800ad38 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80075ba:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <HAL_RTC_MspInit+0x40>)
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <HAL_RTC_MspInit+0x40>)
 80075c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075c4:	61d3      	str	r3, [r2, #28]
 80075c6:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <HAL_RTC_MspInit+0x40>)
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80075d2:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <HAL_RTC_MspInit+0x44>)
 80075d4:	2201      	movs	r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80075d8:	bf00      	nop
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	40002800 	.word	0x40002800
 80075e4:	40021000 	.word	0x40021000
 80075e8:	4242043c 	.word	0x4242043c

080075ec <uartInit>:
DMA_HandleTypeDef  hdma_usart1_rx;



bool uartInit(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
 80075f6:	e007      	b.n	8007608 <uartInit+0x1c>
  {
    is_open[i] = false;
 80075f8:	4a08      	ldr	r2, [pc, #32]	; (800761c <uartInit+0x30>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4413      	add	r3, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3301      	adds	r3, #1
 8007606:	607b      	str	r3, [r7, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b01      	cmp	r3, #1
 800760c:	ddf4      	ble.n	80075f8 <uartInit+0xc>
  }


  return true;
 800760e:	2301      	movs	r3, #1
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	20000b9c 	.word	0x20000b9c

08007620 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8007630:	79fb      	ldrb	r3, [r7, #7]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <uartOpen+0x1c>
 8007636:	2b01      	cmp	r3, #1
 8007638:	d007      	beq.n	800764a <uartOpen+0x2a>
 800763a:	e074      	b.n	8007726 <uartOpen+0x106>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	4a3c      	ldr	r2, [pc, #240]	; (8007730 <uartOpen+0x110>)
 8007640:	2101      	movs	r1, #1
 8007642:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8007644:	2301      	movs	r3, #1
 8007646:	73fb      	strb	r3, [r7, #15]
      break;
 8007648:	e06d      	b.n	8007726 <uartOpen+0x106>

    case _DEF_UART2:
      huart1.Instance = USART1;
 800764a:	4b3a      	ldr	r3, [pc, #232]	; (8007734 <uartOpen+0x114>)
 800764c:	4a3a      	ldr	r2, [pc, #232]	; (8007738 <uartOpen+0x118>)
 800764e:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8007650:	4a38      	ldr	r2, [pc, #224]	; (8007734 <uartOpen+0x114>)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007656:	4b37      	ldr	r3, [pc, #220]	; (8007734 <uartOpen+0x114>)
 8007658:	2200      	movs	r2, #0
 800765a:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 800765c:	4b35      	ldr	r3, [pc, #212]	; (8007734 <uartOpen+0x114>)
 800765e:	2200      	movs	r2, #0
 8007660:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8007662:	4b34      	ldr	r3, [pc, #208]	; (8007734 <uartOpen+0x114>)
 8007664:	2200      	movs	r2, #0
 8007666:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8007668:	4b32      	ldr	r3, [pc, #200]	; (8007734 <uartOpen+0x114>)
 800766a:	220c      	movs	r2, #12
 800766c:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800766e:	4b31      	ldr	r3, [pc, #196]	; (8007734 <uartOpen+0x114>)
 8007670:	2200      	movs	r2, #0
 8007672:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007674:	4b2f      	ldr	r3, [pc, #188]	; (8007734 <uartOpen+0x114>)
 8007676:	2200      	movs	r2, #0
 8007678:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 800767a:	482e      	ldr	r0, [pc, #184]	; (8007734 <uartOpen+0x114>)
 800767c:	f004 fac1 	bl	800bc02 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	4a2d      	ldr	r2, [pc, #180]	; (800773c <uartOpen+0x11c>)
 8007686:	4413      	add	r3, r2
 8007688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800768c:	492c      	ldr	r1, [pc, #176]	; (8007740 <uartOpen+0x120>)
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fe2f 	bl	80062f2 <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA1_CLK_ENABLE();
 8007694:	4b2b      	ldr	r3, [pc, #172]	; (8007744 <uartOpen+0x124>)
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	4a2a      	ldr	r2, [pc, #168]	; (8007744 <uartOpen+0x124>)
 800769a:	f043 0301 	orr.w	r3, r3, #1
 800769e:	6153      	str	r3, [r2, #20]
 80076a0:	4b28      	ldr	r3, [pc, #160]	; (8007744 <uartOpen+0x124>)
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	60bb      	str	r3, [r7, #8]
 80076aa:	68bb      	ldr	r3, [r7, #8]

      /* DMA interrupt init */
      /* DMA1_Channel5_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80076ac:	2200      	movs	r2, #0
 80076ae:	2100      	movs	r1, #0
 80076b0:	200f      	movs	r0, #15
 80076b2:	f001 fc80 	bl	8008fb6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80076b6:	200f      	movs	r0, #15
 80076b8:	f001 fc99 	bl	8008fee <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart1) != HAL_OK)
 80076bc:	481d      	ldr	r0, [pc, #116]	; (8007734 <uartOpen+0x114>)
 80076be:	f004 fa53 	bl	800bb68 <HAL_UART_Init>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <uartOpen+0xae>
      {
        ret = false;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
      }
      break;
 80076cc:	e02a      	b.n	8007724 <uartOpen+0x104>
        ret = true;
 80076ce:	2301      	movs	r3, #1
 80076d0:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 80076d2:	79fb      	ldrb	r3, [r7, #7]
 80076d4:	4a16      	ldr	r2, [pc, #88]	; (8007730 <uartOpen+0x110>)
 80076d6:	2101      	movs	r1, #1
 80076d8:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80076da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076de:	4918      	ldr	r1, [pc, #96]	; (8007740 <uartOpen+0x120>)
 80076e0:	4814      	ldr	r0, [pc, #80]	; (8007734 <uartOpen+0x114>)
 80076e2:	f004 fb4b 	bl	800bd7c <HAL_UART_Receive_DMA>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <uartOpen+0xd0>
          ret = false;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	4a12      	ldr	r2, [pc, #72]	; (800773c <uartOpen+0x11c>)
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	4413      	add	r3, r2
 80076f8:	3308      	adds	r3, #8
 80076fa:	6819      	ldr	r1, [r3, #0]
 80076fc:	4b12      	ldr	r3, [pc, #72]	; (8007748 <uartOpen+0x128>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	1a8a      	subs	r2, r1, r2
 8007706:	490d      	ldr	r1, [pc, #52]	; (800773c <uartOpen+0x11c>)
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	440b      	add	r3, r1
 800770c:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
 800770e:	79fa      	ldrb	r2, [r7, #7]
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	490a      	ldr	r1, [pc, #40]	; (800773c <uartOpen+0x11c>)
 8007714:	0112      	lsls	r2, r2, #4
 8007716:	440a      	add	r2, r1
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	4908      	ldr	r1, [pc, #32]	; (800773c <uartOpen+0x11c>)
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	440b      	add	r3, r1
 8007720:	3304      	adds	r3, #4
 8007722:	601a      	str	r2, [r3, #0]
      break;
 8007724:	bf00      	nop
  }

  return ret;
 8007726:	7bfb      	ldrb	r3, [r7, #15]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000b9c 	.word	0x20000b9c
 8007734:	20002c40 	.word	0x20002c40
 8007738:	40013800 	.word	0x40013800
 800773c:	20000ba0 	.word	0x20000ba0
 8007740:	20000bc0 	.word	0x20000bc0
 8007744:	40021000 	.word	0x40021000
 8007748:	20002bfc 	.word	0x20002bfc

0800774c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <uartAvailable+0x1a>
 8007760:	2b01      	cmp	r3, #1
 8007762:	d004      	beq.n	800776e <uartAvailable+0x22>
 8007764:	e01b      	b.n	800779e <uartAvailable+0x52>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 8007766:	f007 fa27 	bl	800ebb8 <cdcAvailable>
 800776a:	60f8      	str	r0, [r7, #12]
      break;
 800776c:	e017      	b.n	800779e <uartAvailable+0x52>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	4a0d      	ldr	r2, [pc, #52]	; (80077a8 <uartAvailable+0x5c>)
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	4413      	add	r3, r2
 8007776:	3308      	adds	r3, #8
 8007778:	6819      	ldr	r1, [r3, #0]
 800777a:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <uartAvailable+0x60>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	1a8a      	subs	r2, r1, r2
 8007784:	4908      	ldr	r1, [pc, #32]	; (80077a8 <uartAvailable+0x5c>)
 8007786:	011b      	lsls	r3, r3, #4
 8007788:	440b      	add	r3, r1
 800778a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	4a05      	ldr	r2, [pc, #20]	; (80077a8 <uartAvailable+0x5c>)
 8007792:	4413      	add	r3, r2
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe fe02 	bl	800639e <qbufferAvailable>
 800779a:	60f8      	str	r0, [r7, #12]
      break;
 800779c:	bf00      	nop

  }

  return ret;
 800779e:	68fb      	ldr	r3, [r7, #12]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000ba0 	.word	0x20000ba0
 80077ac:	20002bfc 	.word	0x20002bfc

080077b0 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <uartRead+0x1a>
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d005      	beq.n	80077d4 <uartRead+0x24>
 80077c8:	e00c      	b.n	80077e4 <uartRead+0x34>
  {
    case _DEF_UART1:
      ret = cdcRead();
 80077ca:	f007 fa11 	bl	800ebf0 <cdcRead>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73fb      	strb	r3, [r7, #15]
      break;
 80077d2:	e007      	b.n	80077e4 <uartRead+0x34>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80077d4:	f107 030f 	add.w	r3, r7, #15
 80077d8:	2201      	movs	r2, #1
 80077da:	4619      	mov	r1, r3
 80077dc:	4804      	ldr	r0, [pc, #16]	; (80077f0 <uartRead+0x40>)
 80077de:	f7fe fda2 	bl	8006326 <qbufferRead>
      break;
 80077e2:	bf00      	nop

  }

  return ret;
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000bb0 	.word	0x20000bb0

080077f4 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <uartWrite+0x1e>
 800780c:	2b01      	cmp	r3, #1
 800780e:	d006      	beq.n	800781e <uartWrite+0x2a>
 8007810:	e014      	b.n	800783c <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	68b8      	ldr	r0, [r7, #8]
 8007816:	f007 fa3d 	bl	800ec94 <cdcWrite>
 800781a:	6178      	str	r0, [r7, #20]
      break;
 800781c:	e00e      	b.n	800783c <uartWrite+0x48>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	b29a      	uxth	r2, r3
 8007822:	2364      	movs	r3, #100	; 0x64
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	4808      	ldr	r0, [pc, #32]	; (8007848 <uartWrite+0x54>)
 8007828:	f004 fa0f 	bl	800bc4a <HAL_UART_Transmit>
 800782c:	4603      	mov	r3, r0
 800782e:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8007830:	7cfb      	ldrb	r3, [r7, #19]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <uartWrite+0x46>
      {
        ret = length;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	617b      	str	r3, [r7, #20]
      }
      break;
 800783a:	bf00      	nop

  }

  return ret;
 800783c:	697b      	ldr	r3, [r7, #20]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20002c40 	.word	0x20002c40

0800784c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800784c:	b40e      	push	{r1, r2, r3}
 800784e:	b580      	push	{r7, lr}
 8007850:	b0c7      	sub	sp, #284	; 0x11c
 8007852:	af00      	add	r7, sp, #0
 8007854:	4602      	mov	r2, r0
 8007856:	1dfb      	adds	r3, r7, #7
 8007858:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800785a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800785e:	f107 030c 	add.w	r3, r7, #12
 8007862:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8007864:	f107 030c 	add.w	r3, r7, #12
 8007868:	f107 0010 	add.w	r0, r7, #16
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007876:	f008 ff17 	bl	80106a8 <vsniprintf>
 800787a:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800787e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007882:	f107 0110 	add.w	r1, r7, #16
 8007886:	1dfb      	adds	r3, r7, #7
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff ffb2 	bl	80077f4 <uartWrite>
 8007890:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8007894:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8007898:	4618      	mov	r0, r3
 800789a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800789e:	46bd      	mov	sp, r7
 80078a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078a4:	b003      	add	sp, #12
 80078a6:	4770      	bx	lr

080078a8 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr

080078ba <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr

080078cc <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d4:	f107 0310 	add.w	r3, r7, #16
 80078d8:	2200      	movs	r2, #0
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	605a      	str	r2, [r3, #4]
 80078de:	609a      	str	r2, [r3, #8]
 80078e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a33      	ldr	r2, [pc, #204]	; (80079b4 <HAL_UART_MspInit+0xe8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d15f      	bne.n	80079ac <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80078ec:	4b32      	ldr	r3, [pc, #200]	; (80079b8 <HAL_UART_MspInit+0xec>)
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	4a31      	ldr	r2, [pc, #196]	; (80079b8 <HAL_UART_MspInit+0xec>)
 80078f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078f6:	6193      	str	r3, [r2, #24]
 80078f8:	4b2f      	ldr	r3, [pc, #188]	; (80079b8 <HAL_UART_MspInit+0xec>)
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007904:	4b2c      	ldr	r3, [pc, #176]	; (80079b8 <HAL_UART_MspInit+0xec>)
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	4a2b      	ldr	r2, [pc, #172]	; (80079b8 <HAL_UART_MspInit+0xec>)
 800790a:	f043 0304 	orr.w	r3, r3, #4
 800790e:	6193      	str	r3, [r2, #24]
 8007910:	4b29      	ldr	r3, [pc, #164]	; (80079b8 <HAL_UART_MspInit+0xec>)
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	60bb      	str	r3, [r7, #8]
 800791a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800791c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007920:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007922:	2302      	movs	r3, #2
 8007924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007926:	2303      	movs	r3, #3
 8007928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800792a:	f107 0310 	add.w	r3, r7, #16
 800792e:	4619      	mov	r1, r3
 8007930:	4822      	ldr	r0, [pc, #136]	; (80079bc <HAL_UART_MspInit+0xf0>)
 8007932:	f002 f845 	bl	80099c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800793c:	2300      	movs	r3, #0
 800793e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007940:	2300      	movs	r3, #0
 8007942:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007944:	f107 0310 	add.w	r3, r7, #16
 8007948:	4619      	mov	r1, r3
 800794a:	481c      	ldr	r0, [pc, #112]	; (80079bc <HAL_UART_MspInit+0xf0>)
 800794c:	f002 f838 	bl	80099c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007950:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <HAL_UART_MspInit+0xf4>)
 8007952:	4a1c      	ldr	r2, [pc, #112]	; (80079c4 <HAL_UART_MspInit+0xf8>)
 8007954:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007956:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <HAL_UART_MspInit+0xf4>)
 8007958:	2200      	movs	r2, #0
 800795a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800795c:	4b18      	ldr	r3, [pc, #96]	; (80079c0 <HAL_UART_MspInit+0xf4>)
 800795e:	2200      	movs	r2, #0
 8007960:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007962:	4b17      	ldr	r3, [pc, #92]	; (80079c0 <HAL_UART_MspInit+0xf4>)
 8007964:	2280      	movs	r2, #128	; 0x80
 8007966:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007968:	4b15      	ldr	r3, [pc, #84]	; (80079c0 <HAL_UART_MspInit+0xf4>)
 800796a:	2200      	movs	r2, #0
 800796c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800796e:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <HAL_UART_MspInit+0xf4>)
 8007970:	2200      	movs	r2, #0
 8007972:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8007974:	4b12      	ldr	r3, [pc, #72]	; (80079c0 <HAL_UART_MspInit+0xf4>)
 8007976:	2220      	movs	r2, #32
 8007978:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800797a:	4b11      	ldr	r3, [pc, #68]	; (80079c0 <HAL_UART_MspInit+0xf4>)
 800797c:	2200      	movs	r2, #0
 800797e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007980:	480f      	ldr	r0, [pc, #60]	; (80079c0 <HAL_UART_MspInit+0xf4>)
 8007982:	f001 fb5d 	bl	8009040 <HAL_DMA_Init>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800798c:	f7fe fb4a 	bl	8006024 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a0b      	ldr	r2, [pc, #44]	; (80079c0 <HAL_UART_MspInit+0xf4>)
 8007994:	635a      	str	r2, [r3, #52]	; 0x34
 8007996:	4a0a      	ldr	r2, [pc, #40]	; (80079c0 <HAL_UART_MspInit+0xf4>)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800799c:	2200      	movs	r2, #0
 800799e:	2100      	movs	r1, #0
 80079a0:	2025      	movs	r0, #37	; 0x25
 80079a2:	f001 fb08 	bl	8008fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80079a6:	2025      	movs	r0, #37	; 0x25
 80079a8:	f001 fb21 	bl	8008fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80079ac:	bf00      	nop
 80079ae:	3720      	adds	r7, #32
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40013800 	.word	0x40013800
 80079b8:	40021000 	.word	0x40021000
 80079bc:	40010800 	.word	0x40010800
 80079c0:	20002bfc 	.word	0x20002bfc
 80079c4:	40020058 	.word	0x40020058

080079c8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a0c      	ldr	r2, [pc, #48]	; (8007a08 <HAL_UART_MspDeInit+0x40>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d112      	bne.n	8007a00 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80079da:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <HAL_UART_MspDeInit+0x44>)
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	4a0b      	ldr	r2, [pc, #44]	; (8007a0c <HAL_UART_MspDeInit+0x44>)
 80079e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079e4:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80079e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079ea:	4809      	ldr	r0, [pc, #36]	; (8007a10 <HAL_UART_MspDeInit+0x48>)
 80079ec:	f002 f956 	bl	8009c9c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f4:	4618      	mov	r0, r3
 80079f6:	f001 fb99 	bl	800912c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80079fa:	2025      	movs	r0, #37	; 0x25
 80079fc:	f001 fb05 	bl	800900a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	40013800 	.word	0x40013800
 8007a0c:	40021000 	.word	0x40021000
 8007a10:	40010800 	.word	0x40010800

08007a14 <usbInit>:




bool usbInit(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
  bool ret = true;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	75fb      	strb	r3, [r7, #23]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a1e:	1d3b      	adds	r3, r7, #4
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	605a      	str	r2, [r3, #4]
 8007a26:	609a      	str	r2, [r3, #8]
 8007a28:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
#endif
  delay(200);
 8007a2a:	20c8      	movs	r0, #200	; 0xc8
 8007a2c:	f7fe fa2e 	bl	8005e8c <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8007a30:	2201      	movs	r2, #1
 8007a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a36:	4808      	ldr	r0, [pc, #32]	; (8007a58 <usbInit+0x44>)
 8007a38:	f002 fa02 	bl	8009e40 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a40:	1d3b      	adds	r3, r7, #4
 8007a42:	4619      	mov	r1, r3
 8007a44:	4804      	ldr	r0, [pc, #16]	; (8007a58 <usbInit+0x44>)
 8007a46:	f001 ffbb 	bl	80099c0 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 8007a4a:	f007 f885 	bl	800eb58 <MX_USB_DEVICE_Init>

  return ret;
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	40010800 	.word	0x40010800

08007a5c <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  bspInit();
 8007a60:	f7fe f9ce 	bl	8005e00 <bspInit>
  cliInit();
 8007a64:	f7fe fcb6 	bl	80063d4 <cliInit>

  rtcInit();
 8007a68:	f7ff fd4c 	bl	8007504 <rtcInit>
  resetInit();
 8007a6c:	f7ff fd1e 	bl	80074ac <resetInit>
  ledInit();
 8007a70:	f7ff fc36 	bl	80072e0 <ledInit>
  usbInit();
 8007a74:	f7ff ffce 	bl	8007a14 <usbInit>
  uartInit();
 8007a78:	f7ff fdb8 	bl	80075ec <uartInit>
  flashInit();
 8007a7c:	f7ff fc0c 	bl	8007298 <flashInit>
}
 8007a80:	bf00      	nop
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a96:	2b84      	cmp	r3, #132	; 0x84
 8007a98:	d005      	beq.n	8007aa6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3303      	adds	r3, #3
 8007aa4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr

08007ab2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007ab6:	f000 fa61 	bl	8007f7c <vTaskStartScheduler>
  
  return osOK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685c      	ldr	r4, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ad6:	b29e      	uxth	r6, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff ffd0 	bl	8007a84 <makeFreeRtosPriority>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	f107 030c 	add.w	r3, r7, #12
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	9200      	str	r2, [sp, #0]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	4632      	mov	r2, r6
 8007af2:	4629      	mov	r1, r5
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 f8d8 	bl	8007caa <xTaskCreate>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d001      	beq.n	8007b04 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007b00:	2300      	movs	r3, #0
 8007b02:	e000      	b.n	8007b06 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007b04:	68fb      	ldr	r3, [r7, #12]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <osDelay+0x16>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	e000      	b.n	8007b26 <osDelay+0x18>
 8007b24:	2301      	movs	r3, #1
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f9f4 	bl	8007f14 <vTaskDelay>
  
  return osOK;
 8007b2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8007b3a:	f000 fced 	bl	8008518 <xTaskGetSchedulerState>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d001      	beq.n	8007b48 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8007b44:	f000 feb8 	bl	80088b8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8007b48:	bf00      	nop
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f103 0208 	add.w	r2, r3, #8
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295
 8007b64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f103 0208 	add.w	r2, r3, #8
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f103 0208 	add.w	r2, r3, #8
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr

08007b8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr

08007ba2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	601a      	str	r2, [r3, #0]
}
 8007bde:	bf00      	nop
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bc80      	pop	{r7}
 8007be6:	4770      	bx	lr

08007be8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfe:	d103      	bne.n	8007c08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	e00c      	b.n	8007c22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	e002      	b.n	8007c16 <vListInsert+0x2e>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d2f6      	bcs.n	8007c10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
}
 8007c4e:	bf00      	nop
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr

08007c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	6892      	ldr	r2, [r2, #8]
 8007c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6852      	ldr	r2, [r2, #4]
 8007c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d103      	bne.n	8007c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	1e5a      	subs	r2, r3, #1
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bc80      	pop	{r7}
 8007ca8:	4770      	bx	lr

08007caa <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b08c      	sub	sp, #48	; 0x30
 8007cae:	af04      	add	r7, sp, #16
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	603b      	str	r3, [r7, #0]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cba:	88fb      	ldrh	r3, [r7, #6]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fe34 	bl	800892c <pvPortMalloc>
 8007cc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00e      	beq.n	8007cea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007ccc:	205c      	movs	r0, #92	; 0x5c
 8007cce:	f000 fe2d 	bl	800892c <pvPortMalloc>
 8007cd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	631a      	str	r2, [r3, #48]	; 0x30
 8007ce0:	e005      	b.n	8007cee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ce2:	6978      	ldr	r0, [r7, #20]
 8007ce4:	f000 fee4 	bl	8008ab0 <vPortFree>
 8007ce8:	e001      	b.n	8007cee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cea:	2300      	movs	r3, #0
 8007cec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d013      	beq.n	8007d1c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007cf4:	88fa      	ldrh	r2, [r7, #6]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9303      	str	r3, [sp, #12]
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	9302      	str	r3, [sp, #8]
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	9301      	str	r3, [sp, #4]
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f80e 	bl	8007d2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d10:	69f8      	ldr	r0, [r7, #28]
 8007d12:	f000 f891 	bl	8007e38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d16:	2301      	movs	r3, #1
 8007d18:	61bb      	str	r3, [r7, #24]
 8007d1a:	e002      	b.n	8007d22 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d22:	69bb      	ldr	r3, [r7, #24]
	}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3720      	adds	r7, #32
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	461a      	mov	r2, r3
 8007d44:	21a5      	movs	r1, #165	; 0xa5
 8007d46:	f007 fcde 	bl	800f706 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d54:	3b01      	subs	r3, #1
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	f023 0307 	bic.w	r3, r3, #7
 8007d62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <prvInitialiseNewTask+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	e7fe      	b.n	8007d80 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d82:	2300      	movs	r3, #0
 8007d84:	61fb      	str	r3, [r7, #28]
 8007d86:	e012      	b.n	8007dae <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	7819      	ldrb	r1, [r3, #0]
 8007d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	4413      	add	r3, r2
 8007d96:	3334      	adds	r3, #52	; 0x34
 8007d98:	460a      	mov	r2, r1
 8007d9a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	4413      	add	r3, r2
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d006      	beq.n	8007db6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	3301      	adds	r3, #1
 8007dac:	61fb      	str	r3, [r7, #28]
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	2b0f      	cmp	r3, #15
 8007db2:	d9e9      	bls.n	8007d88 <prvInitialiseNewTask+0x5c>
 8007db4:	e000      	b.n	8007db8 <prvInitialiseNewTask+0x8c>
		{
			break;
 8007db6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	2b06      	cmp	r3, #6
 8007dc4:	d901      	bls.n	8007dca <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007dc6:	2306      	movs	r3, #6
 8007dc8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dd4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	2200      	movs	r2, #0
 8007dda:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	3304      	adds	r3, #4
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fed2 	bl	8007b8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	3318      	adds	r3, #24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7ff fecd 	bl	8007b8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	f1c3 0207 	rsb	r2, r3, #7
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	2200      	movs	r2, #0
 8007e0a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	68f9      	ldr	r1, [r7, #12]
 8007e18:	69b8      	ldr	r0, [r7, #24]
 8007e1a:	f000 fc01 	bl	8008620 <pxPortInitialiseStack>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e30:	bf00      	nop
 8007e32:	3720      	adds	r7, #32
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e40:	f000 fcc0 	bl	80087c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e44:	4b2c      	ldr	r3, [pc, #176]	; (8007ef8 <prvAddNewTaskToReadyList+0xc0>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	4a2b      	ldr	r2, [pc, #172]	; (8007ef8 <prvAddNewTaskToReadyList+0xc0>)
 8007e4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e4e:	4b2b      	ldr	r3, [pc, #172]	; (8007efc <prvAddNewTaskToReadyList+0xc4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e56:	4a29      	ldr	r2, [pc, #164]	; (8007efc <prvAddNewTaskToReadyList+0xc4>)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e5c:	4b26      	ldr	r3, [pc, #152]	; (8007ef8 <prvAddNewTaskToReadyList+0xc0>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d110      	bne.n	8007e86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e64:	f000 faa8 	bl	80083b8 <prvInitialiseTaskLists>
 8007e68:	e00d      	b.n	8007e86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e6a:	4b25      	ldr	r3, [pc, #148]	; (8007f00 <prvAddNewTaskToReadyList+0xc8>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d109      	bne.n	8007e86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e72:	4b22      	ldr	r3, [pc, #136]	; (8007efc <prvAddNewTaskToReadyList+0xc4>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d802      	bhi.n	8007e86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e80:	4a1e      	ldr	r2, [pc, #120]	; (8007efc <prvAddNewTaskToReadyList+0xc4>)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e86:	4b1f      	ldr	r3, [pc, #124]	; (8007f04 <prvAddNewTaskToReadyList+0xcc>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <prvAddNewTaskToReadyList+0xcc>)
 8007e8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e90:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <prvAddNewTaskToReadyList+0xcc>)
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	409a      	lsls	r2, r3
 8007ea0:	4b19      	ldr	r3, [pc, #100]	; (8007f08 <prvAddNewTaskToReadyList+0xd0>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	4a18      	ldr	r2, [pc, #96]	; (8007f08 <prvAddNewTaskToReadyList+0xd0>)
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4a15      	ldr	r2, [pc, #84]	; (8007f0c <prvAddNewTaskToReadyList+0xd4>)
 8007eb8:	441a      	add	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f7ff fe6e 	bl	8007ba2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ec6:	f000 fcab 	bl	8008820 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007eca:	4b0d      	ldr	r3, [pc, #52]	; (8007f00 <prvAddNewTaskToReadyList+0xc8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <prvAddNewTaskToReadyList+0xc4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d207      	bcs.n	8007ef0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <prvAddNewTaskToReadyList+0xd8>)
 8007ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20000dc0 	.word	0x20000dc0
 8007efc:	20000cc0 	.word	0x20000cc0
 8007f00:	20000dcc 	.word	0x20000dcc
 8007f04:	20000ddc 	.word	0x20000ddc
 8007f08:	20000dc8 	.word	0x20000dc8
 8007f0c:	20000cc4 	.word	0x20000cc4
 8007f10:	e000ed04 	.word	0xe000ed04

08007f14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d016      	beq.n	8007f54 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f26:	4b13      	ldr	r3, [pc, #76]	; (8007f74 <vTaskDelay+0x60>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d009      	beq.n	8007f42 <vTaskDelay+0x2e>
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	60bb      	str	r3, [r7, #8]
 8007f40:	e7fe      	b.n	8007f40 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007f42:	f000 f861 	bl	8008008 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f46:	2100      	movs	r1, #0
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fb03 	bl	8008554 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f4e:	f000 f869 	bl	8008024 <xTaskResumeAll>
 8007f52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d107      	bne.n	8007f6a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007f5a:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <vTaskDelay+0x64>)
 8007f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000de8 	.word	0x20000de8
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007f82:	4b1b      	ldr	r3, [pc, #108]	; (8007ff0 <vTaskStartScheduler+0x74>)
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	2300      	movs	r3, #0
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2280      	movs	r2, #128	; 0x80
 8007f8e:	4919      	ldr	r1, [pc, #100]	; (8007ff4 <vTaskStartScheduler+0x78>)
 8007f90:	4819      	ldr	r0, [pc, #100]	; (8007ff8 <vTaskStartScheduler+0x7c>)
 8007f92:	f7ff fe8a 	bl	8007caa <xTaskCreate>
 8007f96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d115      	bne.n	8007fca <vTaskStartScheduler+0x4e>
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fb0:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <vTaskStartScheduler+0x80>)
 8007fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fb8:	4b11      	ldr	r3, [pc, #68]	; (8008000 <vTaskStartScheduler+0x84>)
 8007fba:	2201      	movs	r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007fbe:	4b11      	ldr	r3, [pc, #68]	; (8008004 <vTaskStartScheduler+0x88>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fc4:	f000 fba0 	bl	8008708 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fc8:	e00d      	b.n	8007fe6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd0:	d109      	bne.n	8007fe6 <vTaskStartScheduler+0x6a>
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	607b      	str	r3, [r7, #4]
 8007fe4:	e7fe      	b.n	8007fe4 <vTaskStartScheduler+0x68>
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000de4 	.word	0x20000de4
 8007ff4:	080125f4 	.word	0x080125f4
 8007ff8:	08008389 	.word	0x08008389
 8007ffc:	20000de0 	.word	0x20000de0
 8008000:	20000dcc 	.word	0x20000dcc
 8008004:	20000dc4 	.word	0x20000dc4

08008008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800800c:	4b04      	ldr	r3, [pc, #16]	; (8008020 <vTaskSuspendAll+0x18>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3301      	adds	r3, #1
 8008012:	4a03      	ldr	r2, [pc, #12]	; (8008020 <vTaskSuspendAll+0x18>)
 8008014:	6013      	str	r3, [r2, #0]
}
 8008016:	bf00      	nop
 8008018:	46bd      	mov	sp, r7
 800801a:	bc80      	pop	{r7}
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	20000de8 	.word	0x20000de8

08008024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800802e:	2300      	movs	r3, #0
 8008030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008032:	4b41      	ldr	r3, [pc, #260]	; (8008138 <xTaskResumeAll+0x114>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <xTaskResumeAll+0x2a>
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	e7fe      	b.n	800804c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800804e:	f000 fbb9 	bl	80087c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008052:	4b39      	ldr	r3, [pc, #228]	; (8008138 <xTaskResumeAll+0x114>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3b01      	subs	r3, #1
 8008058:	4a37      	ldr	r2, [pc, #220]	; (8008138 <xTaskResumeAll+0x114>)
 800805a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800805c:	4b36      	ldr	r3, [pc, #216]	; (8008138 <xTaskResumeAll+0x114>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d161      	bne.n	8008128 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008064:	4b35      	ldr	r3, [pc, #212]	; (800813c <xTaskResumeAll+0x118>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d05d      	beq.n	8008128 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800806c:	e02e      	b.n	80080cc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800806e:	4b34      	ldr	r3, [pc, #208]	; (8008140 <xTaskResumeAll+0x11c>)
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3318      	adds	r3, #24
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fdec 	bl	8007c58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3304      	adds	r3, #4
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff fde7 	bl	8007c58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808e:	2201      	movs	r2, #1
 8008090:	409a      	lsls	r2, r3
 8008092:	4b2c      	ldr	r3, [pc, #176]	; (8008144 <xTaskResumeAll+0x120>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4313      	orrs	r3, r2
 8008098:	4a2a      	ldr	r2, [pc, #168]	; (8008144 <xTaskResumeAll+0x120>)
 800809a:	6013      	str	r3, [r2, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a0:	4613      	mov	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4a27      	ldr	r2, [pc, #156]	; (8008148 <xTaskResumeAll+0x124>)
 80080aa:	441a      	add	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4619      	mov	r1, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	f7ff fd75 	bl	8007ba2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080bc:	4b23      	ldr	r3, [pc, #140]	; (800814c <xTaskResumeAll+0x128>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d302      	bcc.n	80080cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80080c6:	4b22      	ldr	r3, [pc, #136]	; (8008150 <xTaskResumeAll+0x12c>)
 80080c8:	2201      	movs	r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080cc:	4b1c      	ldr	r3, [pc, #112]	; (8008140 <xTaskResumeAll+0x11c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1cc      	bne.n	800806e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080da:	f000 f9f9 	bl	80084d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80080de:	4b1d      	ldr	r3, [pc, #116]	; (8008154 <xTaskResumeAll+0x130>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d010      	beq.n	800810c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080ea:	f000 f837 	bl	800815c <xTaskIncrementTick>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80080f4:	4b16      	ldr	r3, [pc, #88]	; (8008150 <xTaskResumeAll+0x12c>)
 80080f6:	2201      	movs	r2, #1
 80080f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1f1      	bne.n	80080ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008106:	4b13      	ldr	r3, [pc, #76]	; (8008154 <xTaskResumeAll+0x130>)
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800810c:	4b10      	ldr	r3, [pc, #64]	; (8008150 <xTaskResumeAll+0x12c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008114:	2301      	movs	r3, #1
 8008116:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008118:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <xTaskResumeAll+0x134>)
 800811a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008128:	f000 fb7a 	bl	8008820 <vPortExitCritical>

	return xAlreadyYielded;
 800812c:	68bb      	ldr	r3, [r7, #8]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000de8 	.word	0x20000de8
 800813c:	20000dc0 	.word	0x20000dc0
 8008140:	20000d80 	.word	0x20000d80
 8008144:	20000dc8 	.word	0x20000dc8
 8008148:	20000cc4 	.word	0x20000cc4
 800814c:	20000cc0 	.word	0x20000cc0
 8008150:	20000dd4 	.word	0x20000dd4
 8008154:	20000dd0 	.word	0x20000dd0
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008166:	4b50      	ldr	r3, [pc, #320]	; (80082a8 <xTaskIncrementTick+0x14c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	f040 808c 	bne.w	8008288 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8008170:	4b4e      	ldr	r3, [pc, #312]	; (80082ac <xTaskIncrementTick+0x150>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008178:	4a4c      	ldr	r2, [pc, #304]	; (80082ac <xTaskIncrementTick+0x150>)
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d11f      	bne.n	80081c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008184:	4b4a      	ldr	r3, [pc, #296]	; (80082b0 <xTaskIncrementTick+0x154>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d009      	beq.n	80081a2 <xTaskIncrementTick+0x46>
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	e7fe      	b.n	80081a0 <xTaskIncrementTick+0x44>
 80081a2:	4b43      	ldr	r3, [pc, #268]	; (80082b0 <xTaskIncrementTick+0x154>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	4b42      	ldr	r3, [pc, #264]	; (80082b4 <xTaskIncrementTick+0x158>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a40      	ldr	r2, [pc, #256]	; (80082b0 <xTaskIncrementTick+0x154>)
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	4a40      	ldr	r2, [pc, #256]	; (80082b4 <xTaskIncrementTick+0x158>)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	4b40      	ldr	r3, [pc, #256]	; (80082b8 <xTaskIncrementTick+0x15c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3301      	adds	r3, #1
 80081bc:	4a3e      	ldr	r2, [pc, #248]	; (80082b8 <xTaskIncrementTick+0x15c>)
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	f000 f986 	bl	80084d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081c4:	4b3d      	ldr	r3, [pc, #244]	; (80082bc <xTaskIncrementTick+0x160>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d34d      	bcc.n	800826a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081ce:	4b38      	ldr	r3, [pc, #224]	; (80082b0 <xTaskIncrementTick+0x154>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <xTaskIncrementTick+0x80>
 80081d8:	2301      	movs	r3, #1
 80081da:	e000      	b.n	80081de <xTaskIncrementTick+0x82>
 80081dc:	2300      	movs	r3, #0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d004      	beq.n	80081ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e2:	4b36      	ldr	r3, [pc, #216]	; (80082bc <xTaskIncrementTick+0x160>)
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295
 80081e8:	601a      	str	r2, [r3, #0]
					break;
 80081ea:	e03e      	b.n	800826a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80081ec:	4b30      	ldr	r3, [pc, #192]	; (80082b0 <xTaskIncrementTick+0x154>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	429a      	cmp	r2, r3
 8008202:	d203      	bcs.n	800820c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008204:	4a2d      	ldr	r2, [pc, #180]	; (80082bc <xTaskIncrementTick+0x160>)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6013      	str	r3, [r2, #0]
						break;
 800820a:	e02e      	b.n	800826a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	3304      	adds	r3, #4
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff fd21 	bl	8007c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821a:	2b00      	cmp	r3, #0
 800821c:	d004      	beq.n	8008228 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	3318      	adds	r3, #24
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff fd18 	bl	8007c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	2201      	movs	r2, #1
 800822e:	409a      	lsls	r2, r3
 8008230:	4b23      	ldr	r3, [pc, #140]	; (80082c0 <xTaskIncrementTick+0x164>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4313      	orrs	r3, r2
 8008236:	4a22      	ldr	r2, [pc, #136]	; (80082c0 <xTaskIncrementTick+0x164>)
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823e:	4613      	mov	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4a1f      	ldr	r2, [pc, #124]	; (80082c4 <xTaskIncrementTick+0x168>)
 8008248:	441a      	add	r2, r3
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	3304      	adds	r3, #4
 800824e:	4619      	mov	r1, r3
 8008250:	4610      	mov	r0, r2
 8008252:	f7ff fca6 	bl	8007ba2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825a:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <xTaskIncrementTick+0x16c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	429a      	cmp	r2, r3
 8008262:	d3b4      	bcc.n	80081ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008264:	2301      	movs	r3, #1
 8008266:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008268:	e7b1      	b.n	80081ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800826a:	4b17      	ldr	r3, [pc, #92]	; (80082c8 <xTaskIncrementTick+0x16c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008270:	4914      	ldr	r1, [pc, #80]	; (80082c4 <xTaskIncrementTick+0x168>)
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	440b      	add	r3, r1
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d907      	bls.n	8008292 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008282:	2301      	movs	r3, #1
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	e004      	b.n	8008292 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008288:	4b10      	ldr	r3, [pc, #64]	; (80082cc <xTaskIncrementTick+0x170>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3301      	adds	r3, #1
 800828e:	4a0f      	ldr	r2, [pc, #60]	; (80082cc <xTaskIncrementTick+0x170>)
 8008290:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008292:	4b0f      	ldr	r3, [pc, #60]	; (80082d0 <xTaskIncrementTick+0x174>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800829a:	2301      	movs	r3, #1
 800829c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800829e:	697b      	ldr	r3, [r7, #20]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20000de8 	.word	0x20000de8
 80082ac:	20000dc4 	.word	0x20000dc4
 80082b0:	20000d78 	.word	0x20000d78
 80082b4:	20000d7c 	.word	0x20000d7c
 80082b8:	20000dd8 	.word	0x20000dd8
 80082bc:	20000de0 	.word	0x20000de0
 80082c0:	20000dc8 	.word	0x20000dc8
 80082c4:	20000cc4 	.word	0x20000cc4
 80082c8:	20000cc0 	.word	0x20000cc0
 80082cc:	20000dd0 	.word	0x20000dd0
 80082d0:	20000dd4 	.word	0x20000dd4

080082d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082da:	4b26      	ldr	r3, [pc, #152]	; (8008374 <vTaskSwitchContext+0xa0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082e2:	4b25      	ldr	r3, [pc, #148]	; (8008378 <vTaskSwitchContext+0xa4>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082e8:	e03e      	b.n	8008368 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80082ea:	4b23      	ldr	r3, [pc, #140]	; (8008378 <vTaskSwitchContext+0xa4>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80082f0:	4b22      	ldr	r3, [pc, #136]	; (800837c <vTaskSwitchContext+0xa8>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	fab3 f383 	clz	r3, r3
 80082fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	f1c3 031f 	rsb	r3, r3, #31
 8008304:	617b      	str	r3, [r7, #20]
 8008306:	491e      	ldr	r1, [pc, #120]	; (8008380 <vTaskSwitchContext+0xac>)
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d109      	bne.n	800832e <vTaskSwitchContext+0x5a>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	607b      	str	r3, [r7, #4]
 800832c:	e7fe      	b.n	800832c <vTaskSwitchContext+0x58>
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4a11      	ldr	r2, [pc, #68]	; (8008380 <vTaskSwitchContext+0xac>)
 800833a:	4413      	add	r3, r2
 800833c:	613b      	str	r3, [r7, #16]
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	605a      	str	r2, [r3, #4]
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	3308      	adds	r3, #8
 8008350:	429a      	cmp	r2, r3
 8008352:	d104      	bne.n	800835e <vTaskSwitchContext+0x8a>
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	605a      	str	r2, [r3, #4]
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	4a07      	ldr	r2, [pc, #28]	; (8008384 <vTaskSwitchContext+0xb0>)
 8008366:	6013      	str	r3, [r2, #0]
}
 8008368:	bf00      	nop
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	bc80      	pop	{r7}
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000de8 	.word	0x20000de8
 8008378:	20000dd4 	.word	0x20000dd4
 800837c:	20000dc8 	.word	0x20000dc8
 8008380:	20000cc4 	.word	0x20000cc4
 8008384:	20000cc0 	.word	0x20000cc0

08008388 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008390:	f000 f852 	bl	8008438 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008394:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <prvIdleTask+0x28>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d9f9      	bls.n	8008390 <prvIdleTask+0x8>
			{
				taskYIELD();
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <prvIdleTask+0x2c>)
 800839e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083ac:	e7f0      	b.n	8008390 <prvIdleTask+0x8>
 80083ae:	bf00      	nop
 80083b0:	20000cc4 	.word	0x20000cc4
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083be:	2300      	movs	r3, #0
 80083c0:	607b      	str	r3, [r7, #4]
 80083c2:	e00c      	b.n	80083de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4a12      	ldr	r2, [pc, #72]	; (8008418 <prvInitialiseTaskLists+0x60>)
 80083d0:	4413      	add	r3, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff fbba 	bl	8007b4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3301      	adds	r3, #1
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b06      	cmp	r3, #6
 80083e2:	d9ef      	bls.n	80083c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083e4:	480d      	ldr	r0, [pc, #52]	; (800841c <prvInitialiseTaskLists+0x64>)
 80083e6:	f7ff fbb1 	bl	8007b4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083ea:	480d      	ldr	r0, [pc, #52]	; (8008420 <prvInitialiseTaskLists+0x68>)
 80083ec:	f7ff fbae 	bl	8007b4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083f0:	480c      	ldr	r0, [pc, #48]	; (8008424 <prvInitialiseTaskLists+0x6c>)
 80083f2:	f7ff fbab 	bl	8007b4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083f6:	480c      	ldr	r0, [pc, #48]	; (8008428 <prvInitialiseTaskLists+0x70>)
 80083f8:	f7ff fba8 	bl	8007b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083fc:	480b      	ldr	r0, [pc, #44]	; (800842c <prvInitialiseTaskLists+0x74>)
 80083fe:	f7ff fba5 	bl	8007b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008402:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <prvInitialiseTaskLists+0x78>)
 8008404:	4a05      	ldr	r2, [pc, #20]	; (800841c <prvInitialiseTaskLists+0x64>)
 8008406:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008408:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <prvInitialiseTaskLists+0x7c>)
 800840a:	4a05      	ldr	r2, [pc, #20]	; (8008420 <prvInitialiseTaskLists+0x68>)
 800840c:	601a      	str	r2, [r3, #0]
}
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000cc4 	.word	0x20000cc4
 800841c:	20000d50 	.word	0x20000d50
 8008420:	20000d64 	.word	0x20000d64
 8008424:	20000d80 	.word	0x20000d80
 8008428:	20000d94 	.word	0x20000d94
 800842c:	20000dac 	.word	0x20000dac
 8008430:	20000d78 	.word	0x20000d78
 8008434:	20000d7c 	.word	0x20000d7c

08008438 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800843e:	e028      	b.n	8008492 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8008440:	f7ff fde2 	bl	8008008 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8008444:	4b17      	ldr	r3, [pc, #92]	; (80084a4 <prvCheckTasksWaitingTermination+0x6c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	bf0c      	ite	eq
 800844c:	2301      	moveq	r3, #1
 800844e:	2300      	movne	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8008454:	f7ff fde6 	bl	8008024 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d119      	bne.n	8008492 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800845e:	f000 f9b1 	bl	80087c4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008462:	4b10      	ldr	r3, [pc, #64]	; (80084a4 <prvCheckTasksWaitingTermination+0x6c>)
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	3304      	adds	r3, #4
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff fbf2 	bl	8007c58 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8008474:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <prvCheckTasksWaitingTermination+0x70>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3b01      	subs	r3, #1
 800847a:	4a0b      	ldr	r2, [pc, #44]	; (80084a8 <prvCheckTasksWaitingTermination+0x70>)
 800847c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800847e:	4b0b      	ldr	r3, [pc, #44]	; (80084ac <prvCheckTasksWaitingTermination+0x74>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3b01      	subs	r3, #1
 8008484:	4a09      	ldr	r2, [pc, #36]	; (80084ac <prvCheckTasksWaitingTermination+0x74>)
 8008486:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8008488:	f000 f9ca 	bl	8008820 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800848c:	6838      	ldr	r0, [r7, #0]
 800848e:	f000 f80f 	bl	80084b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008492:	4b06      	ldr	r3, [pc, #24]	; (80084ac <prvCheckTasksWaitingTermination+0x74>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1d2      	bne.n	8008440 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000d94 	.word	0x20000d94
 80084a8:	20000dc0 	.word	0x20000dc0
 80084ac:	20000da8 	.word	0x20000da8

080084b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 faf7 	bl	8008ab0 <vPortFree>
			vPortFree( pxTCB );
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 faf4 	bl	8008ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084d6:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <prvResetNextTaskUnblockTime+0x40>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <prvResetNextTaskUnblockTime+0x14>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e000      	b.n	80084e6 <prvResetNextTaskUnblockTime+0x16>
 80084e4:	2300      	movs	r3, #0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d004      	beq.n	80084f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084ea:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <prvResetNextTaskUnblockTime+0x44>)
 80084ec:	f04f 32ff 	mov.w	r2, #4294967295
 80084f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084f2:	e008      	b.n	8008506 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084f4:	4b06      	ldr	r3, [pc, #24]	; (8008510 <prvResetNextTaskUnblockTime+0x40>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	4a04      	ldr	r2, [pc, #16]	; (8008514 <prvResetNextTaskUnblockTime+0x44>)
 8008504:	6013      	str	r3, [r2, #0]
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr
 8008510:	20000d78 	.word	0x20000d78
 8008514:	20000de0 	.word	0x20000de0

08008518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800851e:	4b0b      	ldr	r3, [pc, #44]	; (800854c <xTaskGetSchedulerState+0x34>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d102      	bne.n	800852c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008526:	2301      	movs	r3, #1
 8008528:	607b      	str	r3, [r7, #4]
 800852a:	e008      	b.n	800853e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852c:	4b08      	ldr	r3, [pc, #32]	; (8008550 <xTaskGetSchedulerState+0x38>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008534:	2302      	movs	r3, #2
 8008536:	607b      	str	r3, [r7, #4]
 8008538:	e001      	b.n	800853e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800853a:	2300      	movs	r3, #0
 800853c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800853e:	687b      	ldr	r3, [r7, #4]
	}
 8008540:	4618      	mov	r0, r3
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	bc80      	pop	{r7}
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20000dcc 	.word	0x20000dcc
 8008550:	20000de8 	.word	0x20000de8

08008554 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800855e:	4b29      	ldr	r3, [pc, #164]	; (8008604 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008564:	4b28      	ldr	r3, [pc, #160]	; (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3304      	adds	r3, #4
 800856a:	4618      	mov	r0, r3
 800856c:	f7ff fb74 	bl	8007c58 <uxListRemove>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10b      	bne.n	800858e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008576:	4b24      	ldr	r3, [pc, #144]	; (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	2201      	movs	r2, #1
 800857e:	fa02 f303 	lsl.w	r3, r2, r3
 8008582:	43da      	mvns	r2, r3
 8008584:	4b21      	ldr	r3, [pc, #132]	; (800860c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4013      	ands	r3, r2
 800858a:	4a20      	ldr	r2, [pc, #128]	; (800860c <prvAddCurrentTaskToDelayedList+0xb8>)
 800858c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008594:	d10a      	bne.n	80085ac <prvAddCurrentTaskToDelayedList+0x58>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d007      	beq.n	80085ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800859c:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3304      	adds	r3, #4
 80085a2:	4619      	mov	r1, r3
 80085a4:	481a      	ldr	r0, [pc, #104]	; (8008610 <prvAddCurrentTaskToDelayedList+0xbc>)
 80085a6:	f7ff fafc 	bl	8007ba2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085aa:	e026      	b.n	80085fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085b4:	4b14      	ldr	r3, [pc, #80]	; (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d209      	bcs.n	80085d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085c4:	4b13      	ldr	r3, [pc, #76]	; (8008614 <prvAddCurrentTaskToDelayedList+0xc0>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	4b0f      	ldr	r3, [pc, #60]	; (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3304      	adds	r3, #4
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7ff fb09 	bl	8007be8 <vListInsert>
}
 80085d6:	e010      	b.n	80085fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d8:	4b0f      	ldr	r3, [pc, #60]	; (8008618 <prvAddCurrentTaskToDelayedList+0xc4>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	4b0a      	ldr	r3, [pc, #40]	; (8008608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3304      	adds	r3, #4
 80085e2:	4619      	mov	r1, r3
 80085e4:	4610      	mov	r0, r2
 80085e6:	f7ff faff 	bl	8007be8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085ea:	4b0c      	ldr	r3, [pc, #48]	; (800861c <prvAddCurrentTaskToDelayedList+0xc8>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d202      	bcs.n	80085fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80085f4:	4a09      	ldr	r2, [pc, #36]	; (800861c <prvAddCurrentTaskToDelayedList+0xc8>)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6013      	str	r3, [r2, #0]
}
 80085fa:	bf00      	nop
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000dc4 	.word	0x20000dc4
 8008608:	20000cc0 	.word	0x20000cc0
 800860c:	20000dc8 	.word	0x20000dc8
 8008610:	20000dac 	.word	0x20000dac
 8008614:	20000d7c 	.word	0x20000d7c
 8008618:	20000d78 	.word	0x20000d78
 800861c:	20000de0 	.word	0x20000de0

08008620 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3b04      	subs	r3, #4
 8008630:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3b04      	subs	r3, #4
 800863e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f023 0201 	bic.w	r2, r3, #1
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3b04      	subs	r3, #4
 800864e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008650:	4a08      	ldr	r2, [pc, #32]	; (8008674 <pxPortInitialiseStack+0x54>)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3b14      	subs	r3, #20
 800865a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3b20      	subs	r3, #32
 8008666:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008668:	68fb      	ldr	r3, [r7, #12]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	bc80      	pop	{r7}
 8008672:	4770      	bx	lr
 8008674:	08008679 	.word	0x08008679

08008678 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800867e:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <prvTaskExitError+0x38>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008686:	d009      	beq.n	800869c <prvTaskExitError+0x24>
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	607b      	str	r3, [r7, #4]
 800869a:	e7fe      	b.n	800869a <prvTaskExitError+0x22>
 800869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80086ae:	e7fe      	b.n	80086ae <prvTaskExitError+0x36>
 80086b0:	20000028 	.word	0x20000028
	...

080086c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <pxCurrentTCBConst2>)
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	6808      	ldr	r0, [r1, #0]
 80086c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086ca:	f380 8809 	msr	PSP, r0
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f04f 0000 	mov.w	r0, #0
 80086d6:	f380 8811 	msr	BASEPRI, r0
 80086da:	f04e 0e0d 	orr.w	lr, lr, #13
 80086de:	4770      	bx	lr

080086e0 <pxCurrentTCBConst2>:
 80086e0:	20000cc0 	.word	0x20000cc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop

080086e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80086e8:	4806      	ldr	r0, [pc, #24]	; (8008704 <prvPortStartFirstTask+0x1c>)
 80086ea:	6800      	ldr	r0, [r0, #0]
 80086ec:	6800      	ldr	r0, [r0, #0]
 80086ee:	f380 8808 	msr	MSP, r0
 80086f2:	b662      	cpsie	i
 80086f4:	b661      	cpsie	f
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	df00      	svc	0
 8008700:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008702:	bf00      	nop
 8008704:	e000ed08 	.word	0xe000ed08

08008708 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800870e:	4b28      	ldr	r3, [pc, #160]	; (80087b0 <xPortStartScheduler+0xa8>)
 8008710:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	b2db      	uxtb	r3, r3
 8008718:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	22ff      	movs	r2, #255	; 0xff
 800871e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008730:	b2da      	uxtb	r2, r3
 8008732:	4b20      	ldr	r3, [pc, #128]	; (80087b4 <xPortStartScheduler+0xac>)
 8008734:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008736:	4b20      	ldr	r3, [pc, #128]	; (80087b8 <xPortStartScheduler+0xb0>)
 8008738:	2207      	movs	r2, #7
 800873a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800873c:	e009      	b.n	8008752 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800873e:	4b1e      	ldr	r3, [pc, #120]	; (80087b8 <xPortStartScheduler+0xb0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3b01      	subs	r3, #1
 8008744:	4a1c      	ldr	r2, [pc, #112]	; (80087b8 <xPortStartScheduler+0xb0>)
 8008746:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	b2db      	uxtb	r3, r3
 8008750:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008752:	79fb      	ldrb	r3, [r7, #7]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875a:	2b80      	cmp	r3, #128	; 0x80
 800875c:	d0ef      	beq.n	800873e <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800875e:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <xPortStartScheduler+0xb0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	021b      	lsls	r3, r3, #8
 8008764:	4a14      	ldr	r2, [pc, #80]	; (80087b8 <xPortStartScheduler+0xb0>)
 8008766:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008768:	4b13      	ldr	r3, [pc, #76]	; (80087b8 <xPortStartScheduler+0xb0>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008770:	4a11      	ldr	r2, [pc, #68]	; (80087b8 <xPortStartScheduler+0xb0>)
 8008772:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	b2da      	uxtb	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800877c:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <xPortStartScheduler+0xb4>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a0e      	ldr	r2, [pc, #56]	; (80087bc <xPortStartScheduler+0xb4>)
 8008782:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008786:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008788:	4b0c      	ldr	r3, [pc, #48]	; (80087bc <xPortStartScheduler+0xb4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a0b      	ldr	r2, [pc, #44]	; (80087bc <xPortStartScheduler+0xb4>)
 800878e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008792:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008794:	f000 f8b0 	bl	80088f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008798:	4b09      	ldr	r3, [pc, #36]	; (80087c0 <xPortStartScheduler+0xb8>)
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800879e:	f7ff ffa3 	bl	80086e8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80087a2:	f7ff ff69 	bl	8008678 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	e000e400 	.word	0xe000e400
 80087b4:	20000dec 	.word	0x20000dec
 80087b8:	20000df0 	.word	0x20000df0
 80087bc:	e000ed20 	.word	0xe000ed20
 80087c0:	20000028 	.word	0x20000028

080087c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087dc:	4b0e      	ldr	r3, [pc, #56]	; (8008818 <vPortEnterCritical+0x54>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3301      	adds	r3, #1
 80087e2:	4a0d      	ldr	r2, [pc, #52]	; (8008818 <vPortEnterCritical+0x54>)
 80087e4:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087e6:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <vPortEnterCritical+0x54>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d10e      	bne.n	800880c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087ee:	4b0b      	ldr	r3, [pc, #44]	; (800881c <vPortEnterCritical+0x58>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d009      	beq.n	800880c <vPortEnterCritical+0x48>
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	603b      	str	r3, [r7, #0]
 800880a:	e7fe      	b.n	800880a <vPortEnterCritical+0x46>
	}
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	20000028 	.word	0x20000028
 800881c:	e000ed04 	.word	0xe000ed04

08008820 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008826:	4b10      	ldr	r3, [pc, #64]	; (8008868 <vPortExitCritical+0x48>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <vPortExitCritical+0x22>
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	607b      	str	r3, [r7, #4]
 8008840:	e7fe      	b.n	8008840 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008842:	4b09      	ldr	r3, [pc, #36]	; (8008868 <vPortExitCritical+0x48>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3b01      	subs	r3, #1
 8008848:	4a07      	ldr	r2, [pc, #28]	; (8008868 <vPortExitCritical+0x48>)
 800884a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <vPortExitCritical+0x48>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d104      	bne.n	800885e <vPortExitCritical+0x3e>
 8008854:	2300      	movs	r3, #0
 8008856:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	bc80      	pop	{r7}
 8008866:	4770      	bx	lr
 8008868:	20000028 	.word	0x20000028
 800886c:	00000000 	.word	0x00000000

08008870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008870:	f3ef 8009 	mrs	r0, PSP
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	4b0d      	ldr	r3, [pc, #52]	; (80088b0 <pxCurrentTCBConst>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008880:	6010      	str	r0, [r2, #0]
 8008882:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008886:	f04f 0050 	mov.w	r0, #80	; 0x50
 800888a:	f380 8811 	msr	BASEPRI, r0
 800888e:	f7ff fd21 	bl	80082d4 <vTaskSwitchContext>
 8008892:	f04f 0000 	mov.w	r0, #0
 8008896:	f380 8811 	msr	BASEPRI, r0
 800889a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800889e:	6819      	ldr	r1, [r3, #0]
 80088a0:	6808      	ldr	r0, [r1, #0]
 80088a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088a6:	f380 8809 	msr	PSP, r0
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	4770      	bx	lr

080088b0 <pxCurrentTCBConst>:
 80088b0:	20000cc0 	.word	0x20000cc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop

080088b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088d0:	f7ff fc44 	bl	800815c <xTaskIncrementTick>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088da:	4b06      	ldr	r3, [pc, #24]	; (80088f4 <xPortSysTickHandler+0x3c>)
 80088dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	2300      	movs	r3, #0
 80088e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	e000ed04 	.word	0xe000ed04

080088f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088fc:	4b07      	ldr	r3, [pc, #28]	; (800891c <vPortSetupTimerInterrupt+0x24>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a07      	ldr	r2, [pc, #28]	; (8008920 <vPortSetupTimerInterrupt+0x28>)
 8008902:	fba2 2303 	umull	r2, r3, r2, r3
 8008906:	099b      	lsrs	r3, r3, #6
 8008908:	4a06      	ldr	r2, [pc, #24]	; (8008924 <vPortSetupTimerInterrupt+0x2c>)
 800890a:	3b01      	subs	r3, #1
 800890c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800890e:	4b06      	ldr	r3, [pc, #24]	; (8008928 <vPortSetupTimerInterrupt+0x30>)
 8008910:	2207      	movs	r2, #7
 8008912:	601a      	str	r2, [r3, #0]
}
 8008914:	bf00      	nop
 8008916:	46bd      	mov	sp, r7
 8008918:	bc80      	pop	{r7}
 800891a:	4770      	bx	lr
 800891c:	20000000 	.word	0x20000000
 8008920:	10624dd3 	.word	0x10624dd3
 8008924:	e000e014 	.word	0xe000e014
 8008928:	e000e010 	.word	0xe000e010

0800892c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08a      	sub	sp, #40	; 0x28
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008934:	2300      	movs	r3, #0
 8008936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008938:	f7ff fb66 	bl	8008008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800893c:	4b57      	ldr	r3, [pc, #348]	; (8008a9c <pvPortMalloc+0x170>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008944:	f000 f90c 	bl	8008b60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008948:	4b55      	ldr	r3, [pc, #340]	; (8008aa0 <pvPortMalloc+0x174>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4013      	ands	r3, r2
 8008950:	2b00      	cmp	r3, #0
 8008952:	f040 808c 	bne.w	8008a6e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01c      	beq.n	8008996 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800895c:	2208      	movs	r2, #8
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4413      	add	r3, r2
 8008962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	2b00      	cmp	r3, #0
 800896c:	d013      	beq.n	8008996 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f023 0307 	bic.w	r3, r3, #7
 8008974:	3308      	adds	r3, #8
 8008976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f003 0307 	and.w	r3, r3, #7
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <pvPortMalloc+0x6a>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	e7fe      	b.n	8008994 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d068      	beq.n	8008a6e <pvPortMalloc+0x142>
 800899c:	4b41      	ldr	r3, [pc, #260]	; (8008aa4 <pvPortMalloc+0x178>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d863      	bhi.n	8008a6e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089a6:	4b40      	ldr	r3, [pc, #256]	; (8008aa8 <pvPortMalloc+0x17c>)
 80089a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089aa:	4b3f      	ldr	r3, [pc, #252]	; (8008aa8 <pvPortMalloc+0x17c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089b0:	e004      	b.n	80089bc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d903      	bls.n	80089ce <pvPortMalloc+0xa2>
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1f1      	bne.n	80089b2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ce:	4b33      	ldr	r3, [pc, #204]	; (8008a9c <pvPortMalloc+0x170>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d04a      	beq.n	8008a6e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2208      	movs	r2, #8
 80089de:	4413      	add	r3, r2
 80089e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	1ad2      	subs	r2, r2, r3
 80089f2:	2308      	movs	r3, #8
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d91e      	bls.n	8008a38 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4413      	add	r3, r2
 8008a00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	f003 0307 	and.w	r3, r3, #7
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d009      	beq.n	8008a20 <pvPortMalloc+0xf4>
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	613b      	str	r3, [r7, #16]
 8008a1e:	e7fe      	b.n	8008a1e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	1ad2      	subs	r2, r2, r3
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a32:	69b8      	ldr	r0, [r7, #24]
 8008a34:	f000 f8f6 	bl	8008c24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a38:	4b1a      	ldr	r3, [pc, #104]	; (8008aa4 <pvPortMalloc+0x178>)
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	4a18      	ldr	r2, [pc, #96]	; (8008aa4 <pvPortMalloc+0x178>)
 8008a44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a46:	4b17      	ldr	r3, [pc, #92]	; (8008aa4 <pvPortMalloc+0x178>)
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	4b18      	ldr	r3, [pc, #96]	; (8008aac <pvPortMalloc+0x180>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d203      	bcs.n	8008a5a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a52:	4b14      	ldr	r3, [pc, #80]	; (8008aa4 <pvPortMalloc+0x178>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a15      	ldr	r2, [pc, #84]	; (8008aac <pvPortMalloc+0x180>)
 8008a58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	4b10      	ldr	r3, [pc, #64]	; (8008aa0 <pvPortMalloc+0x174>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	431a      	orrs	r2, r3
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a6e:	f7ff fad9 	bl	8008024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	f003 0307 	and.w	r3, r3, #7
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <pvPortMalloc+0x164>
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	e7fe      	b.n	8008a8e <pvPortMalloc+0x162>
	return pvReturn;
 8008a90:	69fb      	ldr	r3, [r7, #28]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3728      	adds	r7, #40	; 0x28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	200025fc 	.word	0x200025fc
 8008aa0:	20002608 	.word	0x20002608
 8008aa4:	20002600 	.word	0x20002600
 8008aa8:	200025f4 	.word	0x200025f4
 8008aac:	20002604 	.word	0x20002604

08008ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d046      	beq.n	8008b50 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ac2:	2308      	movs	r3, #8
 8008ac4:	425b      	negs	r3, r3
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	4413      	add	r3, r2
 8008aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	4b20      	ldr	r3, [pc, #128]	; (8008b58 <vPortFree+0xa8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d109      	bne.n	8008af2 <vPortFree+0x42>
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	e7fe      	b.n	8008af0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <vPortFree+0x5e>
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	60bb      	str	r3, [r7, #8]
 8008b0c:	e7fe      	b.n	8008b0c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	4b11      	ldr	r3, [pc, #68]	; (8008b58 <vPortFree+0xa8>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4013      	ands	r3, r2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d019      	beq.n	8008b50 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d115      	bne.n	8008b50 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <vPortFree+0xa8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	43db      	mvns	r3, r3
 8008b2e:	401a      	ands	r2, r3
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b34:	f7ff fa68 	bl	8008008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	4b07      	ldr	r3, [pc, #28]	; (8008b5c <vPortFree+0xac>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4413      	add	r3, r2
 8008b42:	4a06      	ldr	r2, [pc, #24]	; (8008b5c <vPortFree+0xac>)
 8008b44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b46:	6938      	ldr	r0, [r7, #16]
 8008b48:	f000 f86c 	bl	8008c24 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b4c:	f7ff fa6a 	bl	8008024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b50:	bf00      	nop
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20002608 	.word	0x20002608
 8008b5c:	20002600 	.word	0x20002600

08008b60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b6c:	4b27      	ldr	r3, [pc, #156]	; (8008c0c <prvHeapInit+0xac>)
 8008b6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f003 0307 	and.w	r3, r3, #7
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00c      	beq.n	8008b94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	3307      	adds	r3, #7
 8008b7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f023 0307 	bic.w	r3, r3, #7
 8008b86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	4a1f      	ldr	r2, [pc, #124]	; (8008c0c <prvHeapInit+0xac>)
 8008b90:	4413      	add	r3, r2
 8008b92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b98:	4a1d      	ldr	r2, [pc, #116]	; (8008c10 <prvHeapInit+0xb0>)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b9e:	4b1c      	ldr	r3, [pc, #112]	; (8008c10 <prvHeapInit+0xb0>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	4413      	add	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bac:	2208      	movs	r2, #8
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	1a9b      	subs	r3, r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4a15      	ldr	r2, [pc, #84]	; (8008c14 <prvHeapInit+0xb4>)
 8008bc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bc2:	4b14      	ldr	r3, [pc, #80]	; (8008c14 <prvHeapInit+0xb4>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bca:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <prvHeapInit+0xb4>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	1ad2      	subs	r2, r2, r3
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008be0:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <prvHeapInit+0xb4>)
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	4a0a      	ldr	r2, [pc, #40]	; (8008c18 <prvHeapInit+0xb8>)
 8008bee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	4a09      	ldr	r2, [pc, #36]	; (8008c1c <prvHeapInit+0xbc>)
 8008bf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bf8:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <prvHeapInit+0xc0>)
 8008bfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bfe:	601a      	str	r2, [r3, #0]
}
 8008c00:	bf00      	nop
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bc80      	pop	{r7}
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	20000df4 	.word	0x20000df4
 8008c10:	200025f4 	.word	0x200025f4
 8008c14:	200025fc 	.word	0x200025fc
 8008c18:	20002604 	.word	0x20002604
 8008c1c:	20002600 	.word	0x20002600
 8008c20:	20002608 	.word	0x20002608

08008c24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c2c:	4b27      	ldr	r3, [pc, #156]	; (8008ccc <prvInsertBlockIntoFreeList+0xa8>)
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	e002      	b.n	8008c38 <prvInsertBlockIntoFreeList+0x14>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d8f7      	bhi.n	8008c32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d108      	bne.n	8008c66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	441a      	add	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	441a      	add	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d118      	bne.n	8008cac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	4b14      	ldr	r3, [pc, #80]	; (8008cd0 <prvInsertBlockIntoFreeList+0xac>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d00d      	beq.n	8008ca2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	441a      	add	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	e008      	b.n	8008cb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ca2:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <prvInsertBlockIntoFreeList+0xac>)
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	601a      	str	r2, [r3, #0]
 8008caa:	e003      	b.n	8008cb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d002      	beq.n	8008cc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bc80      	pop	{r7}
 8008cca:	4770      	bx	lr
 8008ccc:	200025f4 	.word	0x200025f4
 8008cd0:	200025fc 	.word	0x200025fc

08008cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008cd8:	4b08      	ldr	r3, [pc, #32]	; (8008cfc <HAL_Init+0x28>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a07      	ldr	r2, [pc, #28]	; (8008cfc <HAL_Init+0x28>)
 8008cde:	f043 0310 	orr.w	r3, r3, #16
 8008ce2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ce4:	2003      	movs	r0, #3
 8008ce6:	f000 f95b 	bl	8008fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008cea:	2000      	movs	r0, #0
 8008cec:	f000 f808 	bl	8008d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008cf0:	f7fd f99e 	bl	8006030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40022000 	.word	0x40022000

08008d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d08:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <HAL_InitTick+0x54>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	4b12      	ldr	r3, [pc, #72]	; (8008d58 <HAL_InitTick+0x58>)
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	4619      	mov	r1, r3
 8008d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f981 	bl	8009026 <HAL_SYSTICK_Config>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e00e      	b.n	8008d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b0f      	cmp	r3, #15
 8008d32:	d80a      	bhi.n	8008d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d34:	2200      	movs	r2, #0
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3c:	f000 f93b 	bl	8008fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d40:	4a06      	ldr	r2, [pc, #24]	; (8008d5c <HAL_InitTick+0x5c>)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	e000      	b.n	8008d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000000 	.word	0x20000000
 8008d58:	20000030 	.word	0x20000030
 8008d5c:	2000002c 	.word	0x2000002c

08008d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008d60:	b480      	push	{r7}
 8008d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <HAL_IncTick+0x1c>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <HAL_IncTick+0x20>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4413      	add	r3, r2
 8008d70:	4a03      	ldr	r2, [pc, #12]	; (8008d80 <HAL_IncTick+0x20>)
 8008d72:	6013      	str	r3, [r2, #0]
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bc80      	pop	{r7}
 8008d7a:	4770      	bx	lr
 8008d7c:	20000030 	.word	0x20000030
 8008d80:	20002c80 	.word	0x20002c80

08008d84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
  return uwTick;
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <HAL_GetTick+0x10>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bc80      	pop	{r7}
 8008d92:	4770      	bx	lr
 8008d94:	20002c80 	.word	0x20002c80

08008d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008da0:	f7ff fff0 	bl	8008d84 <HAL_GetTick>
 8008da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db0:	d005      	beq.n	8008dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <HAL_Delay+0x40>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4413      	add	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008dbe:	bf00      	nop
 8008dc0:	f7ff ffe0 	bl	8008d84 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d8f7      	bhi.n	8008dc0 <HAL_Delay+0x28>
  {
  }
}
 8008dd0:	bf00      	nop
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20000030 	.word	0x20000030

08008ddc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008dec:	4b0c      	ldr	r3, [pc, #48]	; (8008e20 <NVIC_SetPriorityGrouping+0x44>)
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008df8:	4013      	ands	r3, r2
 8008dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e0e:	4a04      	ldr	r2, [pc, #16]	; (8008e20 <NVIC_SetPriorityGrouping+0x44>)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	60d3      	str	r3, [r2, #12]
}
 8008e14:	bf00      	nop
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	e000ed00 	.word	0xe000ed00

08008e24 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8008e24:	b480      	push	{r7}
 8008e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e28:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <NVIC_GetPriorityGrouping+0x18>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	0a1b      	lsrs	r3, r3, #8
 8008e2e:	f003 0307 	and.w	r3, r3, #7
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	e000ed00 	.word	0xe000ed00

08008e40 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	f003 021f 	and.w	r2, r3, #31
 8008e50:	4906      	ldr	r1, [pc, #24]	; (8008e6c <NVIC_EnableIRQ+0x2c>)
 8008e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e56:	095b      	lsrs	r3, r3, #5
 8008e58:	2001      	movs	r0, #1
 8008e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8008e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bc80      	pop	{r7}
 8008e6a:	4770      	bx	lr
 8008e6c:	e000e100 	.word	0xe000e100

08008e70 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008e7a:	79fb      	ldrb	r3, [r7, #7]
 8008e7c:	f003 021f 	and.w	r2, r3, #31
 8008e80:	4907      	ldr	r1, [pc, #28]	; (8008ea0 <NVIC_DisableIRQ+0x30>)
 8008e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e86:	095b      	lsrs	r3, r3, #5
 8008e88:	2001      	movs	r0, #1
 8008e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8008e8e:	3320      	adds	r3, #32
 8008e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bc80      	pop	{r7}
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	e000e100 	.word	0xe000e100

08008ea4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8008eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	da0b      	bge.n	8008ed0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	490c      	ldr	r1, [pc, #48]	; (8008ef0 <NVIC_SetPriority+0x4c>)
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	f003 030f 	and.w	r3, r3, #15
 8008ec4:	3b04      	subs	r3, #4
 8008ec6:	0112      	lsls	r2, r2, #4
 8008ec8:	b2d2      	uxtb	r2, r2
 8008eca:	440b      	add	r3, r1
 8008ecc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ece:	e009      	b.n	8008ee4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	4907      	ldr	r1, [pc, #28]	; (8008ef4 <NVIC_SetPriority+0x50>)
 8008ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eda:	0112      	lsls	r2, r2, #4
 8008edc:	b2d2      	uxtb	r2, r2
 8008ede:	440b      	add	r3, r1
 8008ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	e000ed00 	.word	0xe000ed00
 8008ef4:	e000e100 	.word	0xe000e100

08008ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b089      	sub	sp, #36	; 0x24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f1c3 0307 	rsb	r3, r3, #7
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	bf28      	it	cs
 8008f16:	2304      	movcs	r3, #4
 8008f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	2b06      	cmp	r3, #6
 8008f20:	d902      	bls.n	8008f28 <NVIC_EncodePriority+0x30>
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	3b03      	subs	r3, #3
 8008f26:	e000      	b.n	8008f2a <NVIC_EncodePriority+0x32>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	fa02 f303 	lsl.w	r3, r2, r3
 8008f36:	43da      	mvns	r2, r3
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	401a      	ands	r2, r3
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f40:	f04f 31ff 	mov.w	r1, #4294967295
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4a:	43d9      	mvns	r1, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f50:	4313      	orrs	r3, r2
         );
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3724      	adds	r7, #36	; 0x24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bc80      	pop	{r7}
 8008f5a:	4770      	bx	lr

08008f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f6c:	d301      	bcc.n	8008f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e00f      	b.n	8008f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f72:	4a0a      	ldr	r2, [pc, #40]	; (8008f9c <SysTick_Config+0x40>)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008f7a:	210f      	movs	r1, #15
 8008f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f80:	f7ff ff90 	bl	8008ea4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <SysTick_Config+0x40>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008f8a:	4b04      	ldr	r3, [pc, #16]	; (8008f9c <SysTick_Config+0x40>)
 8008f8c:	2207      	movs	r2, #7
 8008f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	e000e010 	.word	0xe000e010

08008fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff ff17 	bl	8008ddc <NVIC_SetPriorityGrouping>
}
 8008fae:	bf00      	nop
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b086      	sub	sp, #24
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	60b9      	str	r1, [r7, #8]
 8008fc0:	607a      	str	r2, [r7, #4]
 8008fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008fc8:	f7ff ff2c 	bl	8008e24 <NVIC_GetPriorityGrouping>
 8008fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	68b9      	ldr	r1, [r7, #8]
 8008fd2:	6978      	ldr	r0, [r7, #20]
 8008fd4:	f7ff ff90 	bl	8008ef8 <NVIC_EncodePriority>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fde:	4611      	mov	r1, r2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff ff5f 	bl	8008ea4 <NVIC_SetPriority>
}
 8008fe6:	bf00      	nop
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7ff ff1f 	bl	8008e40 <NVIC_EnableIRQ>
}
 8009002:	bf00      	nop
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	4603      	mov	r3, r0
 8009012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff ff29 	bl	8008e70 <NVIC_DisableIRQ>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff ff94 	bl	8008f5c <SysTick_Config>
 8009034:	4603      	mov	r3, r0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e059      	b.n	800910a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	4b2d      	ldr	r3, [pc, #180]	; (8009114 <HAL_DMA_Init+0xd4>)
 800905e:	429a      	cmp	r2, r3
 8009060:	d80f      	bhi.n	8009082 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	4b2b      	ldr	r3, [pc, #172]	; (8009118 <HAL_DMA_Init+0xd8>)
 800906a:	4413      	add	r3, r2
 800906c:	4a2b      	ldr	r2, [pc, #172]	; (800911c <HAL_DMA_Init+0xdc>)
 800906e:	fba2 2303 	umull	r2, r3, r2, r3
 8009072:	091b      	lsrs	r3, r3, #4
 8009074:	009a      	lsls	r2, r3, #2
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a28      	ldr	r2, [pc, #160]	; (8009120 <HAL_DMA_Init+0xe0>)
 800907e:	63da      	str	r2, [r3, #60]	; 0x3c
 8009080:	e00e      	b.n	80090a0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	4b26      	ldr	r3, [pc, #152]	; (8009124 <HAL_DMA_Init+0xe4>)
 800908a:	4413      	add	r3, r2
 800908c:	4a23      	ldr	r2, [pc, #140]	; (800911c <HAL_DMA_Init+0xdc>)
 800908e:	fba2 2303 	umull	r2, r3, r2, r3
 8009092:	091b      	lsrs	r3, r3, #4
 8009094:	009a      	lsls	r2, r3, #2
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a22      	ldr	r2, [pc, #136]	; (8009128 <HAL_DMA_Init+0xe8>)
 800909e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80090b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80090ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80090c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	bc80      	pop	{r7}
 8009112:	4770      	bx	lr
 8009114:	40020407 	.word	0x40020407
 8009118:	bffdfff8 	.word	0xbffdfff8
 800911c:	cccccccd 	.word	0xcccccccd
 8009120:	40020000 	.word	0x40020000
 8009124:	bffdfbf8 	.word	0xbffdfbf8
 8009128:	40020400 	.word	0x40020400

0800912c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e05c      	b.n	80091f8 <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0201 	bic.w	r2, r2, #1
 800914c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2200      	movs	r2, #0
 800915c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2200      	movs	r2, #0
 8009164:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2200      	movs	r2, #0
 800916c:	60da      	str	r2, [r3, #12]

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	4b23      	ldr	r3, [pc, #140]	; (8009204 <HAL_DMA_DeInit+0xd8>)
 8009176:	429a      	cmp	r2, r3
 8009178:	d80f      	bhi.n	800919a <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	4b21      	ldr	r3, [pc, #132]	; (8009208 <HAL_DMA_DeInit+0xdc>)
 8009182:	4413      	add	r3, r2
 8009184:	4a21      	ldr	r2, [pc, #132]	; (800920c <HAL_DMA_DeInit+0xe0>)
 8009186:	fba2 2303 	umull	r2, r3, r2, r3
 800918a:	091b      	lsrs	r3, r3, #4
 800918c:	009a      	lsls	r2, r3, #2
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a1e      	ldr	r2, [pc, #120]	; (8009210 <HAL_DMA_DeInit+0xe4>)
 8009196:	63da      	str	r2, [r3, #60]	; 0x3c
 8009198:	e00e      	b.n	80091b8 <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	4b1c      	ldr	r3, [pc, #112]	; (8009214 <HAL_DMA_DeInit+0xe8>)
 80091a2:	4413      	add	r3, r2
 80091a4:	4a19      	ldr	r2, [pc, #100]	; (800920c <HAL_DMA_DeInit+0xe0>)
 80091a6:	fba2 2303 	umull	r2, r3, r2, r3
 80091aa:	091b      	lsrs	r3, r3, #4
 80091ac:	009a      	lsls	r2, r3, #2
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a18      	ldr	r2, [pc, #96]	; (8009218 <HAL_DMA_DeInit+0xec>)
 80091b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c0:	2101      	movs	r1, #1
 80091c2:	fa01 f202 	lsl.w	r2, r1, r2
 80091c6:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bc80      	pop	{r7}
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40020407 	.word	0x40020407
 8009208:	bffdfff8 	.word	0xbffdfff8
 800920c:	cccccccd 	.word	0xcccccccd
 8009210:	40020000 	.word	0x40020000
 8009214:	bffdfbf8 	.word	0xbffdfbf8
 8009218:	40020400 	.word	0x40020400

0800921c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d101      	bne.n	800923c <HAL_DMA_Start_IT+0x20>
 8009238:	2302      	movs	r3, #2
 800923a:	e04a      	b.n	80092d2 <HAL_DMA_Start_IT+0xb6>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800924a:	2b01      	cmp	r3, #1
 800924c:	d13a      	bne.n	80092c4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2202      	movs	r2, #2
 8009252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 0201 	bic.w	r2, r2, #1
 800926a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	68b9      	ldr	r1, [r7, #8]
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 fb76 	bl	8009964 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	2b00      	cmp	r3, #0
 800927e:	d008      	beq.n	8009292 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 020e 	orr.w	r2, r2, #14
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	e00f      	b.n	80092b2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 0204 	bic.w	r2, r2, #4
 80092a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f042 020a 	orr.w	r2, r2, #10
 80092b0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0201 	orr.w	r2, r2, #1
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	e005      	b.n	80092d0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80092cc:	2302      	movs	r3, #2
 80092ce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
	...

080092dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d005      	beq.n	80092fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2204      	movs	r2, #4
 80092f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	73fb      	strb	r3, [r7, #15]
 80092fc:	e0d6      	b.n	80094ac <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 020e 	bic.w	r2, r2, #14
 800930c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0201 	bic.w	r2, r2, #1
 800931c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	4b64      	ldr	r3, [pc, #400]	; (80094b8 <HAL_DMA_Abort_IT+0x1dc>)
 8009326:	429a      	cmp	r2, r3
 8009328:	d958      	bls.n	80093dc <HAL_DMA_Abort_IT+0x100>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a63      	ldr	r2, [pc, #396]	; (80094bc <HAL_DMA_Abort_IT+0x1e0>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d04f      	beq.n	80093d4 <HAL_DMA_Abort_IT+0xf8>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a61      	ldr	r2, [pc, #388]	; (80094c0 <HAL_DMA_Abort_IT+0x1e4>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d048      	beq.n	80093d0 <HAL_DMA_Abort_IT+0xf4>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a60      	ldr	r2, [pc, #384]	; (80094c4 <HAL_DMA_Abort_IT+0x1e8>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d040      	beq.n	80093ca <HAL_DMA_Abort_IT+0xee>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a5e      	ldr	r2, [pc, #376]	; (80094c8 <HAL_DMA_Abort_IT+0x1ec>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d038      	beq.n	80093c4 <HAL_DMA_Abort_IT+0xe8>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a5d      	ldr	r2, [pc, #372]	; (80094cc <HAL_DMA_Abort_IT+0x1f0>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d030      	beq.n	80093be <HAL_DMA_Abort_IT+0xe2>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a5b      	ldr	r2, [pc, #364]	; (80094d0 <HAL_DMA_Abort_IT+0x1f4>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d028      	beq.n	80093b8 <HAL_DMA_Abort_IT+0xdc>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a53      	ldr	r2, [pc, #332]	; (80094b8 <HAL_DMA_Abort_IT+0x1dc>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d020      	beq.n	80093b2 <HAL_DMA_Abort_IT+0xd6>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a57      	ldr	r2, [pc, #348]	; (80094d4 <HAL_DMA_Abort_IT+0x1f8>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d019      	beq.n	80093ae <HAL_DMA_Abort_IT+0xd2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a56      	ldr	r2, [pc, #344]	; (80094d8 <HAL_DMA_Abort_IT+0x1fc>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d012      	beq.n	80093aa <HAL_DMA_Abort_IT+0xce>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a54      	ldr	r2, [pc, #336]	; (80094dc <HAL_DMA_Abort_IT+0x200>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d00a      	beq.n	80093a4 <HAL_DMA_Abort_IT+0xc8>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a53      	ldr	r2, [pc, #332]	; (80094e0 <HAL_DMA_Abort_IT+0x204>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d102      	bne.n	800939e <HAL_DMA_Abort_IT+0xc2>
 8009398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800939c:	e01b      	b.n	80093d6 <HAL_DMA_Abort_IT+0xfa>
 800939e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093a2:	e018      	b.n	80093d6 <HAL_DMA_Abort_IT+0xfa>
 80093a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093a8:	e015      	b.n	80093d6 <HAL_DMA_Abort_IT+0xfa>
 80093aa:	2310      	movs	r3, #16
 80093ac:	e013      	b.n	80093d6 <HAL_DMA_Abort_IT+0xfa>
 80093ae:	2301      	movs	r3, #1
 80093b0:	e011      	b.n	80093d6 <HAL_DMA_Abort_IT+0xfa>
 80093b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093b6:	e00e      	b.n	80093d6 <HAL_DMA_Abort_IT+0xfa>
 80093b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093bc:	e00b      	b.n	80093d6 <HAL_DMA_Abort_IT+0xfa>
 80093be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093c2:	e008      	b.n	80093d6 <HAL_DMA_Abort_IT+0xfa>
 80093c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093c8:	e005      	b.n	80093d6 <HAL_DMA_Abort_IT+0xfa>
 80093ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093ce:	e002      	b.n	80093d6 <HAL_DMA_Abort_IT+0xfa>
 80093d0:	2310      	movs	r3, #16
 80093d2:	e000      	b.n	80093d6 <HAL_DMA_Abort_IT+0xfa>
 80093d4:	2301      	movs	r3, #1
 80093d6:	4a43      	ldr	r2, [pc, #268]	; (80094e4 <HAL_DMA_Abort_IT+0x208>)
 80093d8:	6053      	str	r3, [r2, #4]
 80093da:	e057      	b.n	800948c <HAL_DMA_Abort_IT+0x1b0>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a36      	ldr	r2, [pc, #216]	; (80094bc <HAL_DMA_Abort_IT+0x1e0>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d04f      	beq.n	8009486 <HAL_DMA_Abort_IT+0x1aa>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a35      	ldr	r2, [pc, #212]	; (80094c0 <HAL_DMA_Abort_IT+0x1e4>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d048      	beq.n	8009482 <HAL_DMA_Abort_IT+0x1a6>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a33      	ldr	r2, [pc, #204]	; (80094c4 <HAL_DMA_Abort_IT+0x1e8>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d040      	beq.n	800947c <HAL_DMA_Abort_IT+0x1a0>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a32      	ldr	r2, [pc, #200]	; (80094c8 <HAL_DMA_Abort_IT+0x1ec>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d038      	beq.n	8009476 <HAL_DMA_Abort_IT+0x19a>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a30      	ldr	r2, [pc, #192]	; (80094cc <HAL_DMA_Abort_IT+0x1f0>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d030      	beq.n	8009470 <HAL_DMA_Abort_IT+0x194>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a2f      	ldr	r2, [pc, #188]	; (80094d0 <HAL_DMA_Abort_IT+0x1f4>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d028      	beq.n	800946a <HAL_DMA_Abort_IT+0x18e>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a26      	ldr	r2, [pc, #152]	; (80094b8 <HAL_DMA_Abort_IT+0x1dc>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d020      	beq.n	8009464 <HAL_DMA_Abort_IT+0x188>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a2b      	ldr	r2, [pc, #172]	; (80094d4 <HAL_DMA_Abort_IT+0x1f8>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d019      	beq.n	8009460 <HAL_DMA_Abort_IT+0x184>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a29      	ldr	r2, [pc, #164]	; (80094d8 <HAL_DMA_Abort_IT+0x1fc>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d012      	beq.n	800945c <HAL_DMA_Abort_IT+0x180>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a28      	ldr	r2, [pc, #160]	; (80094dc <HAL_DMA_Abort_IT+0x200>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d00a      	beq.n	8009456 <HAL_DMA_Abort_IT+0x17a>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a26      	ldr	r2, [pc, #152]	; (80094e0 <HAL_DMA_Abort_IT+0x204>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d102      	bne.n	8009450 <HAL_DMA_Abort_IT+0x174>
 800944a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800944e:	e01b      	b.n	8009488 <HAL_DMA_Abort_IT+0x1ac>
 8009450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009454:	e018      	b.n	8009488 <HAL_DMA_Abort_IT+0x1ac>
 8009456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800945a:	e015      	b.n	8009488 <HAL_DMA_Abort_IT+0x1ac>
 800945c:	2310      	movs	r3, #16
 800945e:	e013      	b.n	8009488 <HAL_DMA_Abort_IT+0x1ac>
 8009460:	2301      	movs	r3, #1
 8009462:	e011      	b.n	8009488 <HAL_DMA_Abort_IT+0x1ac>
 8009464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009468:	e00e      	b.n	8009488 <HAL_DMA_Abort_IT+0x1ac>
 800946a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800946e:	e00b      	b.n	8009488 <HAL_DMA_Abort_IT+0x1ac>
 8009470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009474:	e008      	b.n	8009488 <HAL_DMA_Abort_IT+0x1ac>
 8009476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800947a:	e005      	b.n	8009488 <HAL_DMA_Abort_IT+0x1ac>
 800947c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009480:	e002      	b.n	8009488 <HAL_DMA_Abort_IT+0x1ac>
 8009482:	2310      	movs	r3, #16
 8009484:	e000      	b.n	8009488 <HAL_DMA_Abort_IT+0x1ac>
 8009486:	2301      	movs	r3, #1
 8009488:	4a17      	ldr	r2, [pc, #92]	; (80094e8 <HAL_DMA_Abort_IT+0x20c>)
 800948a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d003      	beq.n	80094ac <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	4798      	blx	r3
    } 
  }
  return status;
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	40020080 	.word	0x40020080
 80094bc:	40020008 	.word	0x40020008
 80094c0:	4002001c 	.word	0x4002001c
 80094c4:	40020030 	.word	0x40020030
 80094c8:	40020044 	.word	0x40020044
 80094cc:	40020058 	.word	0x40020058
 80094d0:	4002006c 	.word	0x4002006c
 80094d4:	40020408 	.word	0x40020408
 80094d8:	4002041c 	.word	0x4002041c
 80094dc:	40020430 	.word	0x40020430
 80094e0:	40020444 	.word	0x40020444
 80094e4:	40020400 	.word	0x40020400
 80094e8:	40020000 	.word	0x40020000

080094ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009508:	2204      	movs	r2, #4
 800950a:	409a      	lsls	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4013      	ands	r3, r2
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 80d6 	beq.w	80096c2 <HAL_DMA_IRQHandler+0x1d6>
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 80d0 	beq.w	80096c2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d107      	bne.n	8009540 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0204 	bic.w	r2, r2, #4
 800953e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	461a      	mov	r2, r3
 8009546:	4b9b      	ldr	r3, [pc, #620]	; (80097b4 <HAL_DMA_IRQHandler+0x2c8>)
 8009548:	429a      	cmp	r2, r3
 800954a:	d958      	bls.n	80095fe <HAL_DMA_IRQHandler+0x112>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a99      	ldr	r2, [pc, #612]	; (80097b8 <HAL_DMA_IRQHandler+0x2cc>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d04f      	beq.n	80095f6 <HAL_DMA_IRQHandler+0x10a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a98      	ldr	r2, [pc, #608]	; (80097bc <HAL_DMA_IRQHandler+0x2d0>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d048      	beq.n	80095f2 <HAL_DMA_IRQHandler+0x106>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a96      	ldr	r2, [pc, #600]	; (80097c0 <HAL_DMA_IRQHandler+0x2d4>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d040      	beq.n	80095ec <HAL_DMA_IRQHandler+0x100>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a95      	ldr	r2, [pc, #596]	; (80097c4 <HAL_DMA_IRQHandler+0x2d8>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d038      	beq.n	80095e6 <HAL_DMA_IRQHandler+0xfa>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a93      	ldr	r2, [pc, #588]	; (80097c8 <HAL_DMA_IRQHandler+0x2dc>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d030      	beq.n	80095e0 <HAL_DMA_IRQHandler+0xf4>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a92      	ldr	r2, [pc, #584]	; (80097cc <HAL_DMA_IRQHandler+0x2e0>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d028      	beq.n	80095da <HAL_DMA_IRQHandler+0xee>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a89      	ldr	r2, [pc, #548]	; (80097b4 <HAL_DMA_IRQHandler+0x2c8>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d020      	beq.n	80095d4 <HAL_DMA_IRQHandler+0xe8>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a8e      	ldr	r2, [pc, #568]	; (80097d0 <HAL_DMA_IRQHandler+0x2e4>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d019      	beq.n	80095d0 <HAL_DMA_IRQHandler+0xe4>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a8c      	ldr	r2, [pc, #560]	; (80097d4 <HAL_DMA_IRQHandler+0x2e8>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d012      	beq.n	80095cc <HAL_DMA_IRQHandler+0xe0>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a8b      	ldr	r2, [pc, #556]	; (80097d8 <HAL_DMA_IRQHandler+0x2ec>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00a      	beq.n	80095c6 <HAL_DMA_IRQHandler+0xda>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a89      	ldr	r2, [pc, #548]	; (80097dc <HAL_DMA_IRQHandler+0x2f0>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d102      	bne.n	80095c0 <HAL_DMA_IRQHandler+0xd4>
 80095ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095be:	e01b      	b.n	80095f8 <HAL_DMA_IRQHandler+0x10c>
 80095c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095c4:	e018      	b.n	80095f8 <HAL_DMA_IRQHandler+0x10c>
 80095c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ca:	e015      	b.n	80095f8 <HAL_DMA_IRQHandler+0x10c>
 80095cc:	2340      	movs	r3, #64	; 0x40
 80095ce:	e013      	b.n	80095f8 <HAL_DMA_IRQHandler+0x10c>
 80095d0:	2304      	movs	r3, #4
 80095d2:	e011      	b.n	80095f8 <HAL_DMA_IRQHandler+0x10c>
 80095d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80095d8:	e00e      	b.n	80095f8 <HAL_DMA_IRQHandler+0x10c>
 80095da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80095de:	e00b      	b.n	80095f8 <HAL_DMA_IRQHandler+0x10c>
 80095e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095e4:	e008      	b.n	80095f8 <HAL_DMA_IRQHandler+0x10c>
 80095e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095ea:	e005      	b.n	80095f8 <HAL_DMA_IRQHandler+0x10c>
 80095ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f0:	e002      	b.n	80095f8 <HAL_DMA_IRQHandler+0x10c>
 80095f2:	2340      	movs	r3, #64	; 0x40
 80095f4:	e000      	b.n	80095f8 <HAL_DMA_IRQHandler+0x10c>
 80095f6:	2304      	movs	r3, #4
 80095f8:	4a79      	ldr	r2, [pc, #484]	; (80097e0 <HAL_DMA_IRQHandler+0x2f4>)
 80095fa:	6053      	str	r3, [r2, #4]
 80095fc:	e057      	b.n	80096ae <HAL_DMA_IRQHandler+0x1c2>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a6d      	ldr	r2, [pc, #436]	; (80097b8 <HAL_DMA_IRQHandler+0x2cc>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d04f      	beq.n	80096a8 <HAL_DMA_IRQHandler+0x1bc>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a6b      	ldr	r2, [pc, #428]	; (80097bc <HAL_DMA_IRQHandler+0x2d0>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d048      	beq.n	80096a4 <HAL_DMA_IRQHandler+0x1b8>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a6a      	ldr	r2, [pc, #424]	; (80097c0 <HAL_DMA_IRQHandler+0x2d4>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d040      	beq.n	800969e <HAL_DMA_IRQHandler+0x1b2>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a68      	ldr	r2, [pc, #416]	; (80097c4 <HAL_DMA_IRQHandler+0x2d8>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d038      	beq.n	8009698 <HAL_DMA_IRQHandler+0x1ac>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a67      	ldr	r2, [pc, #412]	; (80097c8 <HAL_DMA_IRQHandler+0x2dc>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d030      	beq.n	8009692 <HAL_DMA_IRQHandler+0x1a6>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a65      	ldr	r2, [pc, #404]	; (80097cc <HAL_DMA_IRQHandler+0x2e0>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d028      	beq.n	800968c <HAL_DMA_IRQHandler+0x1a0>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a5d      	ldr	r2, [pc, #372]	; (80097b4 <HAL_DMA_IRQHandler+0x2c8>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d020      	beq.n	8009686 <HAL_DMA_IRQHandler+0x19a>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a61      	ldr	r2, [pc, #388]	; (80097d0 <HAL_DMA_IRQHandler+0x2e4>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d019      	beq.n	8009682 <HAL_DMA_IRQHandler+0x196>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a60      	ldr	r2, [pc, #384]	; (80097d4 <HAL_DMA_IRQHandler+0x2e8>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d012      	beq.n	800967e <HAL_DMA_IRQHandler+0x192>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a5e      	ldr	r2, [pc, #376]	; (80097d8 <HAL_DMA_IRQHandler+0x2ec>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d00a      	beq.n	8009678 <HAL_DMA_IRQHandler+0x18c>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a5d      	ldr	r2, [pc, #372]	; (80097dc <HAL_DMA_IRQHandler+0x2f0>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d102      	bne.n	8009672 <HAL_DMA_IRQHandler+0x186>
 800966c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009670:	e01b      	b.n	80096aa <HAL_DMA_IRQHandler+0x1be>
 8009672:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009676:	e018      	b.n	80096aa <HAL_DMA_IRQHandler+0x1be>
 8009678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800967c:	e015      	b.n	80096aa <HAL_DMA_IRQHandler+0x1be>
 800967e:	2340      	movs	r3, #64	; 0x40
 8009680:	e013      	b.n	80096aa <HAL_DMA_IRQHandler+0x1be>
 8009682:	2304      	movs	r3, #4
 8009684:	e011      	b.n	80096aa <HAL_DMA_IRQHandler+0x1be>
 8009686:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800968a:	e00e      	b.n	80096aa <HAL_DMA_IRQHandler+0x1be>
 800968c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009690:	e00b      	b.n	80096aa <HAL_DMA_IRQHandler+0x1be>
 8009692:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009696:	e008      	b.n	80096aa <HAL_DMA_IRQHandler+0x1be>
 8009698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800969c:	e005      	b.n	80096aa <HAL_DMA_IRQHandler+0x1be>
 800969e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096a2:	e002      	b.n	80096aa <HAL_DMA_IRQHandler+0x1be>
 80096a4:	2340      	movs	r3, #64	; 0x40
 80096a6:	e000      	b.n	80096aa <HAL_DMA_IRQHandler+0x1be>
 80096a8:	2304      	movs	r3, #4
 80096aa:	4a4e      	ldr	r2, [pc, #312]	; (80097e4 <HAL_DMA_IRQHandler+0x2f8>)
 80096ac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 8136 	beq.w	8009924 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80096c0:	e130      	b.n	8009924 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c6:	2202      	movs	r2, #2
 80096c8:	409a      	lsls	r2, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4013      	ands	r3, r2
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 80f8 	beq.w	80098c4 <HAL_DMA_IRQHandler+0x3d8>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 80f2 	beq.w	80098c4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10b      	bne.n	8009706 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 020a 	bic.w	r2, r2, #10
 80096fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	4b29      	ldr	r3, [pc, #164]	; (80097b4 <HAL_DMA_IRQHandler+0x2c8>)
 800970e:	429a      	cmp	r2, r3
 8009710:	d973      	bls.n	80097fa <HAL_DMA_IRQHandler+0x30e>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a28      	ldr	r2, [pc, #160]	; (80097b8 <HAL_DMA_IRQHandler+0x2cc>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d06a      	beq.n	80097f2 <HAL_DMA_IRQHandler+0x306>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a26      	ldr	r2, [pc, #152]	; (80097bc <HAL_DMA_IRQHandler+0x2d0>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d063      	beq.n	80097ee <HAL_DMA_IRQHandler+0x302>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a25      	ldr	r2, [pc, #148]	; (80097c0 <HAL_DMA_IRQHandler+0x2d4>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d05b      	beq.n	80097e8 <HAL_DMA_IRQHandler+0x2fc>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a23      	ldr	r2, [pc, #140]	; (80097c4 <HAL_DMA_IRQHandler+0x2d8>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d038      	beq.n	80097ac <HAL_DMA_IRQHandler+0x2c0>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a22      	ldr	r2, [pc, #136]	; (80097c8 <HAL_DMA_IRQHandler+0x2dc>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d030      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x2ba>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a20      	ldr	r2, [pc, #128]	; (80097cc <HAL_DMA_IRQHandler+0x2e0>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d028      	beq.n	80097a0 <HAL_DMA_IRQHandler+0x2b4>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a18      	ldr	r2, [pc, #96]	; (80097b4 <HAL_DMA_IRQHandler+0x2c8>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d020      	beq.n	800979a <HAL_DMA_IRQHandler+0x2ae>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a1c      	ldr	r2, [pc, #112]	; (80097d0 <HAL_DMA_IRQHandler+0x2e4>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d019      	beq.n	8009796 <HAL_DMA_IRQHandler+0x2aa>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a1b      	ldr	r2, [pc, #108]	; (80097d4 <HAL_DMA_IRQHandler+0x2e8>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d012      	beq.n	8009792 <HAL_DMA_IRQHandler+0x2a6>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a19      	ldr	r2, [pc, #100]	; (80097d8 <HAL_DMA_IRQHandler+0x2ec>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00a      	beq.n	800978c <HAL_DMA_IRQHandler+0x2a0>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a18      	ldr	r2, [pc, #96]	; (80097dc <HAL_DMA_IRQHandler+0x2f0>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d102      	bne.n	8009786 <HAL_DMA_IRQHandler+0x29a>
 8009780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009784:	e036      	b.n	80097f4 <HAL_DMA_IRQHandler+0x308>
 8009786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800978a:	e033      	b.n	80097f4 <HAL_DMA_IRQHandler+0x308>
 800978c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009790:	e030      	b.n	80097f4 <HAL_DMA_IRQHandler+0x308>
 8009792:	2320      	movs	r3, #32
 8009794:	e02e      	b.n	80097f4 <HAL_DMA_IRQHandler+0x308>
 8009796:	2302      	movs	r3, #2
 8009798:	e02c      	b.n	80097f4 <HAL_DMA_IRQHandler+0x308>
 800979a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800979e:	e029      	b.n	80097f4 <HAL_DMA_IRQHandler+0x308>
 80097a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80097a4:	e026      	b.n	80097f4 <HAL_DMA_IRQHandler+0x308>
 80097a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097aa:	e023      	b.n	80097f4 <HAL_DMA_IRQHandler+0x308>
 80097ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097b0:	e020      	b.n	80097f4 <HAL_DMA_IRQHandler+0x308>
 80097b2:	bf00      	nop
 80097b4:	40020080 	.word	0x40020080
 80097b8:	40020008 	.word	0x40020008
 80097bc:	4002001c 	.word	0x4002001c
 80097c0:	40020030 	.word	0x40020030
 80097c4:	40020044 	.word	0x40020044
 80097c8:	40020058 	.word	0x40020058
 80097cc:	4002006c 	.word	0x4002006c
 80097d0:	40020408 	.word	0x40020408
 80097d4:	4002041c 	.word	0x4002041c
 80097d8:	40020430 	.word	0x40020430
 80097dc:	40020444 	.word	0x40020444
 80097e0:	40020400 	.word	0x40020400
 80097e4:	40020000 	.word	0x40020000
 80097e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097ec:	e002      	b.n	80097f4 <HAL_DMA_IRQHandler+0x308>
 80097ee:	2320      	movs	r3, #32
 80097f0:	e000      	b.n	80097f4 <HAL_DMA_IRQHandler+0x308>
 80097f2:	2302      	movs	r3, #2
 80097f4:	4a4e      	ldr	r2, [pc, #312]	; (8009930 <HAL_DMA_IRQHandler+0x444>)
 80097f6:	6053      	str	r3, [r2, #4]
 80097f8:	e057      	b.n	80098aa <HAL_DMA_IRQHandler+0x3be>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a4d      	ldr	r2, [pc, #308]	; (8009934 <HAL_DMA_IRQHandler+0x448>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d04f      	beq.n	80098a4 <HAL_DMA_IRQHandler+0x3b8>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a4b      	ldr	r2, [pc, #300]	; (8009938 <HAL_DMA_IRQHandler+0x44c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d048      	beq.n	80098a0 <HAL_DMA_IRQHandler+0x3b4>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a4a      	ldr	r2, [pc, #296]	; (800993c <HAL_DMA_IRQHandler+0x450>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d040      	beq.n	800989a <HAL_DMA_IRQHandler+0x3ae>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a48      	ldr	r2, [pc, #288]	; (8009940 <HAL_DMA_IRQHandler+0x454>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d038      	beq.n	8009894 <HAL_DMA_IRQHandler+0x3a8>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a47      	ldr	r2, [pc, #284]	; (8009944 <HAL_DMA_IRQHandler+0x458>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d030      	beq.n	800988e <HAL_DMA_IRQHandler+0x3a2>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a45      	ldr	r2, [pc, #276]	; (8009948 <HAL_DMA_IRQHandler+0x45c>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d028      	beq.n	8009888 <HAL_DMA_IRQHandler+0x39c>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a44      	ldr	r2, [pc, #272]	; (800994c <HAL_DMA_IRQHandler+0x460>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d020      	beq.n	8009882 <HAL_DMA_IRQHandler+0x396>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a42      	ldr	r2, [pc, #264]	; (8009950 <HAL_DMA_IRQHandler+0x464>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d019      	beq.n	800987e <HAL_DMA_IRQHandler+0x392>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a41      	ldr	r2, [pc, #260]	; (8009954 <HAL_DMA_IRQHandler+0x468>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d012      	beq.n	800987a <HAL_DMA_IRQHandler+0x38e>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a3f      	ldr	r2, [pc, #252]	; (8009958 <HAL_DMA_IRQHandler+0x46c>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d00a      	beq.n	8009874 <HAL_DMA_IRQHandler+0x388>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a3e      	ldr	r2, [pc, #248]	; (800995c <HAL_DMA_IRQHandler+0x470>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d102      	bne.n	800986e <HAL_DMA_IRQHandler+0x382>
 8009868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800986c:	e01b      	b.n	80098a6 <HAL_DMA_IRQHandler+0x3ba>
 800986e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009872:	e018      	b.n	80098a6 <HAL_DMA_IRQHandler+0x3ba>
 8009874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009878:	e015      	b.n	80098a6 <HAL_DMA_IRQHandler+0x3ba>
 800987a:	2320      	movs	r3, #32
 800987c:	e013      	b.n	80098a6 <HAL_DMA_IRQHandler+0x3ba>
 800987e:	2302      	movs	r3, #2
 8009880:	e011      	b.n	80098a6 <HAL_DMA_IRQHandler+0x3ba>
 8009882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009886:	e00e      	b.n	80098a6 <HAL_DMA_IRQHandler+0x3ba>
 8009888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800988c:	e00b      	b.n	80098a6 <HAL_DMA_IRQHandler+0x3ba>
 800988e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009892:	e008      	b.n	80098a6 <HAL_DMA_IRQHandler+0x3ba>
 8009894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009898:	e005      	b.n	80098a6 <HAL_DMA_IRQHandler+0x3ba>
 800989a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800989e:	e002      	b.n	80098a6 <HAL_DMA_IRQHandler+0x3ba>
 80098a0:	2320      	movs	r3, #32
 80098a2:	e000      	b.n	80098a6 <HAL_DMA_IRQHandler+0x3ba>
 80098a4:	2302      	movs	r3, #2
 80098a6:	4a2e      	ldr	r2, [pc, #184]	; (8009960 <HAL_DMA_IRQHandler+0x474>)
 80098a8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d034      	beq.n	8009924 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80098c2:	e02f      	b.n	8009924 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c8:	2208      	movs	r2, #8
 80098ca:	409a      	lsls	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4013      	ands	r3, r2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d028      	beq.n	8009926 <HAL_DMA_IRQHandler+0x43a>
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f003 0308 	and.w	r3, r3, #8
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d023      	beq.n	8009926 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f022 020e 	bic.w	r2, r2, #14
 80098ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f6:	2101      	movs	r1, #1
 80098f8:	fa01 f202 	lsl.w	r2, r1, r2
 80098fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009918:	2b00      	cmp	r3, #0
 800991a:	d004      	beq.n	8009926 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	4798      	blx	r3
    }
  }
  return;
 8009924:	bf00      	nop
 8009926:	bf00      	nop
}
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	40020400 	.word	0x40020400
 8009934:	40020008 	.word	0x40020008
 8009938:	4002001c 	.word	0x4002001c
 800993c:	40020030 	.word	0x40020030
 8009940:	40020044 	.word	0x40020044
 8009944:	40020058 	.word	0x40020058
 8009948:	4002006c 	.word	0x4002006c
 800994c:	40020080 	.word	0x40020080
 8009950:	40020408 	.word	0x40020408
 8009954:	4002041c 	.word	0x4002041c
 8009958:	40020430 	.word	0x40020430
 800995c:	40020444 	.word	0x40020444
 8009960:	40020000 	.word	0x40020000

08009964 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800997a:	2101      	movs	r1, #1
 800997c:	fa01 f202 	lsl.w	r2, r1, r2
 8009980:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	2b10      	cmp	r3, #16
 8009990:	d108      	bne.n	80099a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80099a2:	e007      	b.n	80099b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	60da      	str	r2, [r3, #12]
}
 80099b4:	bf00      	nop
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bc80      	pop	{r7}
 80099bc:	4770      	bx	lr
	...

080099c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b08b      	sub	sp, #44	; 0x2c
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80099d6:	2300      	movs	r3, #0
 80099d8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80099da:	2300      	movs	r3, #0
 80099dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80099de:	2300      	movs	r3, #0
 80099e0:	627b      	str	r3, [r7, #36]	; 0x24
 80099e2:	e133      	b.n	8009c4c <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80099e4:	2201      	movs	r2, #1
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	fa02 f303 	lsl.w	r3, r2, r3
 80099ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	69fa      	ldr	r2, [r7, #28]
 80099f4:	4013      	ands	r3, r2
 80099f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80099f8:	69ba      	ldr	r2, [r7, #24]
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	f040 8122 	bne.w	8009c46 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	2b12      	cmp	r3, #18
 8009a08:	d034      	beq.n	8009a74 <HAL_GPIO_Init+0xb4>
 8009a0a:	2b12      	cmp	r3, #18
 8009a0c:	d80d      	bhi.n	8009a2a <HAL_GPIO_Init+0x6a>
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d02b      	beq.n	8009a6a <HAL_GPIO_Init+0xaa>
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d804      	bhi.n	8009a20 <HAL_GPIO_Init+0x60>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d031      	beq.n	8009a7e <HAL_GPIO_Init+0xbe>
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d01c      	beq.n	8009a58 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009a1e:	e048      	b.n	8009ab2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d043      	beq.n	8009aac <HAL_GPIO_Init+0xec>
 8009a24:	2b11      	cmp	r3, #17
 8009a26:	d01b      	beq.n	8009a60 <HAL_GPIO_Init+0xa0>
          break;
 8009a28:	e043      	b.n	8009ab2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8009a2a:	4a8d      	ldr	r2, [pc, #564]	; (8009c60 <HAL_GPIO_Init+0x2a0>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d026      	beq.n	8009a7e <HAL_GPIO_Init+0xbe>
 8009a30:	4a8b      	ldr	r2, [pc, #556]	; (8009c60 <HAL_GPIO_Init+0x2a0>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d806      	bhi.n	8009a44 <HAL_GPIO_Init+0x84>
 8009a36:	4a8b      	ldr	r2, [pc, #556]	; (8009c64 <HAL_GPIO_Init+0x2a4>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d020      	beq.n	8009a7e <HAL_GPIO_Init+0xbe>
 8009a3c:	4a8a      	ldr	r2, [pc, #552]	; (8009c68 <HAL_GPIO_Init+0x2a8>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d01d      	beq.n	8009a7e <HAL_GPIO_Init+0xbe>
          break;
 8009a42:	e036      	b.n	8009ab2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8009a44:	4a89      	ldr	r2, [pc, #548]	; (8009c6c <HAL_GPIO_Init+0x2ac>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d019      	beq.n	8009a7e <HAL_GPIO_Init+0xbe>
 8009a4a:	4a89      	ldr	r2, [pc, #548]	; (8009c70 <HAL_GPIO_Init+0x2b0>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d016      	beq.n	8009a7e <HAL_GPIO_Init+0xbe>
 8009a50:	4a88      	ldr	r2, [pc, #544]	; (8009c74 <HAL_GPIO_Init+0x2b4>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d013      	beq.n	8009a7e <HAL_GPIO_Init+0xbe>
          break;
 8009a56:	e02c      	b.n	8009ab2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	623b      	str	r3, [r7, #32]
          break;
 8009a5e:	e028      	b.n	8009ab2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	3304      	adds	r3, #4
 8009a66:	623b      	str	r3, [r7, #32]
          break;
 8009a68:	e023      	b.n	8009ab2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	623b      	str	r3, [r7, #32]
          break;
 8009a72:	e01e      	b.n	8009ab2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	330c      	adds	r3, #12
 8009a7a:	623b      	str	r3, [r7, #32]
          break;
 8009a7c:	e019      	b.n	8009ab2 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009a86:	2304      	movs	r3, #4
 8009a88:	623b      	str	r3, [r7, #32]
          break;
 8009a8a:	e012      	b.n	8009ab2 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d105      	bne.n	8009aa0 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a94:	2308      	movs	r3, #8
 8009a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	69fa      	ldr	r2, [r7, #28]
 8009a9c:	611a      	str	r2, [r3, #16]
          break;
 8009a9e:	e008      	b.n	8009ab2 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	69fa      	ldr	r2, [r7, #28]
 8009aa8:	615a      	str	r2, [r3, #20]
          break;
 8009aaa:	e002      	b.n	8009ab2 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009aac:	2300      	movs	r3, #0
 8009aae:	623b      	str	r3, [r7, #32]
          break;
 8009ab0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	2bff      	cmp	r3, #255	; 0xff
 8009ab6:	d801      	bhi.n	8009abc <HAL_GPIO_Init+0xfc>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	e001      	b.n	8009ac0 <HAL_GPIO_Init+0x100>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	2bff      	cmp	r3, #255	; 0xff
 8009ac6:	d802      	bhi.n	8009ace <HAL_GPIO_Init+0x10e>
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	e002      	b.n	8009ad4 <HAL_GPIO_Init+0x114>
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	3b08      	subs	r3, #8
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	210f      	movs	r1, #15
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae2:	43db      	mvns	r3, r3
 8009ae4:	401a      	ands	r2, r3
 8009ae6:	6a39      	ldr	r1, [r7, #32]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	fa01 f303 	lsl.w	r3, r1, r3
 8009aee:	431a      	orrs	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 80a2 	beq.w	8009c46 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009b02:	4b5d      	ldr	r3, [pc, #372]	; (8009c78 <HAL_GPIO_Init+0x2b8>)
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	4a5c      	ldr	r2, [pc, #368]	; (8009c78 <HAL_GPIO_Init+0x2b8>)
 8009b08:	f043 0301 	orr.w	r3, r3, #1
 8009b0c:	6193      	str	r3, [r2, #24]
 8009b0e:	4b5a      	ldr	r3, [pc, #360]	; (8009c78 <HAL_GPIO_Init+0x2b8>)
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	60bb      	str	r3, [r7, #8]
 8009b18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8009b1a:	4a58      	ldr	r2, [pc, #352]	; (8009c7c <HAL_GPIO_Init+0x2bc>)
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	089b      	lsrs	r3, r3, #2
 8009b20:	3302      	adds	r3, #2
 8009b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b26:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	220f      	movs	r2, #15
 8009b32:	fa02 f303 	lsl.w	r3, r2, r3
 8009b36:	43db      	mvns	r3, r3
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a4f      	ldr	r2, [pc, #316]	; (8009c80 <HAL_GPIO_Init+0x2c0>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d01f      	beq.n	8009b86 <HAL_GPIO_Init+0x1c6>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a4e      	ldr	r2, [pc, #312]	; (8009c84 <HAL_GPIO_Init+0x2c4>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d019      	beq.n	8009b82 <HAL_GPIO_Init+0x1c2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a4d      	ldr	r2, [pc, #308]	; (8009c88 <HAL_GPIO_Init+0x2c8>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d013      	beq.n	8009b7e <HAL_GPIO_Init+0x1be>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a4c      	ldr	r2, [pc, #304]	; (8009c8c <HAL_GPIO_Init+0x2cc>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d00d      	beq.n	8009b7a <HAL_GPIO_Init+0x1ba>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a4b      	ldr	r2, [pc, #300]	; (8009c90 <HAL_GPIO_Init+0x2d0>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d007      	beq.n	8009b76 <HAL_GPIO_Init+0x1b6>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a4a      	ldr	r2, [pc, #296]	; (8009c94 <HAL_GPIO_Init+0x2d4>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d101      	bne.n	8009b72 <HAL_GPIO_Init+0x1b2>
 8009b6e:	2305      	movs	r3, #5
 8009b70:	e00a      	b.n	8009b88 <HAL_GPIO_Init+0x1c8>
 8009b72:	2306      	movs	r3, #6
 8009b74:	e008      	b.n	8009b88 <HAL_GPIO_Init+0x1c8>
 8009b76:	2304      	movs	r3, #4
 8009b78:	e006      	b.n	8009b88 <HAL_GPIO_Init+0x1c8>
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e004      	b.n	8009b88 <HAL_GPIO_Init+0x1c8>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e002      	b.n	8009b88 <HAL_GPIO_Init+0x1c8>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <HAL_GPIO_Init+0x1c8>
 8009b86:	2300      	movs	r3, #0
 8009b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b8a:	f002 0203 	and.w	r2, r2, #3
 8009b8e:	0092      	lsls	r2, r2, #2
 8009b90:	4093      	lsls	r3, r2
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8009b98:	4938      	ldr	r1, [pc, #224]	; (8009c7c <HAL_GPIO_Init+0x2bc>)
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	089b      	lsrs	r3, r3, #2
 8009b9e:	3302      	adds	r3, #2
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d006      	beq.n	8009bc0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009bb2:	4b39      	ldr	r3, [pc, #228]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	4938      	ldr	r1, [pc, #224]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	600b      	str	r3, [r1, #0]
 8009bbe:	e006      	b.n	8009bce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009bc0:	4b35      	ldr	r3, [pc, #212]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	43db      	mvns	r3, r3
 8009bc8:	4933      	ldr	r1, [pc, #204]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009bca:	4013      	ands	r3, r2
 8009bcc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d006      	beq.n	8009be8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009bda:	4b2f      	ldr	r3, [pc, #188]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	492e      	ldr	r1, [pc, #184]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	604b      	str	r3, [r1, #4]
 8009be6:	e006      	b.n	8009bf6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009be8:	4b2b      	ldr	r3, [pc, #172]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	43db      	mvns	r3, r3
 8009bf0:	4929      	ldr	r1, [pc, #164]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d006      	beq.n	8009c10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009c02:	4b25      	ldr	r3, [pc, #148]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009c04:	689a      	ldr	r2, [r3, #8]
 8009c06:	4924      	ldr	r1, [pc, #144]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	608b      	str	r3, [r1, #8]
 8009c0e:	e006      	b.n	8009c1e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009c10:	4b21      	ldr	r3, [pc, #132]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009c12:	689a      	ldr	r2, [r3, #8]
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	43db      	mvns	r3, r3
 8009c18:	491f      	ldr	r1, [pc, #124]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d006      	beq.n	8009c38 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009c2a:	4b1b      	ldr	r3, [pc, #108]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	491a      	ldr	r1, [pc, #104]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60cb      	str	r3, [r1, #12]
 8009c36:	e006      	b.n	8009c46 <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009c38:	4b17      	ldr	r3, [pc, #92]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009c3a:	68da      	ldr	r2, [r3, #12]
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	43db      	mvns	r3, r3
 8009c40:	4915      	ldr	r1, [pc, #84]	; (8009c98 <HAL_GPIO_Init+0x2d8>)
 8009c42:	4013      	ands	r3, r2
 8009c44:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	3301      	adds	r3, #1
 8009c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	2b0f      	cmp	r3, #15
 8009c50:	f67f aec8 	bls.w	80099e4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8009c54:	bf00      	nop
 8009c56:	372c      	adds	r7, #44	; 0x2c
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bc80      	pop	{r7}
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	10210000 	.word	0x10210000
 8009c64:	10110000 	.word	0x10110000
 8009c68:	10120000 	.word	0x10120000
 8009c6c:	10310000 	.word	0x10310000
 8009c70:	10320000 	.word	0x10320000
 8009c74:	10220000 	.word	0x10220000
 8009c78:	40021000 	.word	0x40021000
 8009c7c:	40010000 	.word	0x40010000
 8009c80:	40010800 	.word	0x40010800
 8009c84:	40010c00 	.word	0x40010c00
 8009c88:	40011000 	.word	0x40011000
 8009c8c:	40011400 	.word	0x40011400
 8009c90:	40011800 	.word	0x40011800
 8009c94:	40011c00 	.word	0x40011c00
 8009c98:	40010400 	.word	0x40010400

08009c9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b089      	sub	sp, #36	; 0x24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0x00U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	617b      	str	r3, [r7, #20]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8009cb6:	e0a6      	b.n	8009e06 <HAL_GPIO_DeInit+0x16a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8009cb8:	2201      	movs	r2, #1
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 8099 	beq.w	8009e00 <HAL_GPIO_DeInit+0x164>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	2bff      	cmp	r3, #255	; 0xff
 8009cd2:	d801      	bhi.n	8009cd8 <HAL_GPIO_DeInit+0x3c>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	e001      	b.n	8009cdc <HAL_GPIO_DeInit+0x40>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	3304      	adds	r3, #4
 8009cdc:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	2bff      	cmp	r3, #255	; 0xff
 8009ce2:	d802      	bhi.n	8009cea <HAL_GPIO_DeInit+0x4e>
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	e002      	b.n	8009cf0 <HAL_GPIO_DeInit+0x54>
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	3b08      	subs	r3, #8
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	613b      	str	r3, [r7, #16]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	210f      	movs	r1, #15
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8009cfe:	43db      	mvns	r3, r3
 8009d00:	401a      	ands	r2, r3
 8009d02:	2104      	movs	r1, #4
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	fa01 f303 	lsl.w	r3, r1, r3
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	43db      	mvns	r3, r3
 8009d18:	401a      	ands	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
 8009d1e:	4a40      	ldr	r2, [pc, #256]	; (8009e20 <HAL_GPIO_DeInit+0x184>)
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	089b      	lsrs	r3, r3, #2
 8009d24:	3302      	adds	r3, #2
 8009d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d2a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	f003 0303 	and.w	r3, r3, #3
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	220f      	movs	r2, #15
 8009d36:	fa02 f303 	lsl.w	r3, r2, r3
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a38      	ldr	r2, [pc, #224]	; (8009e24 <HAL_GPIO_DeInit+0x188>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d01f      	beq.n	8009d88 <HAL_GPIO_DeInit+0xec>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a37      	ldr	r2, [pc, #220]	; (8009e28 <HAL_GPIO_DeInit+0x18c>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d019      	beq.n	8009d84 <HAL_GPIO_DeInit+0xe8>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a36      	ldr	r2, [pc, #216]	; (8009e2c <HAL_GPIO_DeInit+0x190>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d013      	beq.n	8009d80 <HAL_GPIO_DeInit+0xe4>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a35      	ldr	r2, [pc, #212]	; (8009e30 <HAL_GPIO_DeInit+0x194>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d00d      	beq.n	8009d7c <HAL_GPIO_DeInit+0xe0>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a34      	ldr	r2, [pc, #208]	; (8009e34 <HAL_GPIO_DeInit+0x198>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d007      	beq.n	8009d78 <HAL_GPIO_DeInit+0xdc>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a33      	ldr	r2, [pc, #204]	; (8009e38 <HAL_GPIO_DeInit+0x19c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d101      	bne.n	8009d74 <HAL_GPIO_DeInit+0xd8>
 8009d70:	2305      	movs	r3, #5
 8009d72:	e00a      	b.n	8009d8a <HAL_GPIO_DeInit+0xee>
 8009d74:	2306      	movs	r3, #6
 8009d76:	e008      	b.n	8009d8a <HAL_GPIO_DeInit+0xee>
 8009d78:	2304      	movs	r3, #4
 8009d7a:	e006      	b.n	8009d8a <HAL_GPIO_DeInit+0xee>
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e004      	b.n	8009d8a <HAL_GPIO_DeInit+0xee>
 8009d80:	2302      	movs	r3, #2
 8009d82:	e002      	b.n	8009d8a <HAL_GPIO_DeInit+0xee>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e000      	b.n	8009d8a <HAL_GPIO_DeInit+0xee>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	f002 0203 	and.w	r2, r2, #3
 8009d90:	0092      	lsls	r2, r2, #2
 8009d92:	4093      	lsls	r3, r2
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d132      	bne.n	8009e00 <HAL_GPIO_DeInit+0x164>
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	f003 0303 	and.w	r3, r3, #3
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	220f      	movs	r2, #15
 8009da4:	fa02 f303 	lsl.w	r3, r2, r3
 8009da8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8009daa:	4a1d      	ldr	r2, [pc, #116]	; (8009e20 <HAL_GPIO_DeInit+0x184>)
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	089b      	lsrs	r3, r3, #2
 8009db0:	3302      	adds	r3, #2
 8009db2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	43da      	mvns	r2, r3
 8009dba:	4819      	ldr	r0, [pc, #100]	; (8009e20 <HAL_GPIO_DeInit+0x184>)
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	089b      	lsrs	r3, r3, #2
 8009dc0:	400a      	ands	r2, r1
 8009dc2:	3302      	adds	r3, #2
 8009dc4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009dc8:	4b1c      	ldr	r3, [pc, #112]	; (8009e3c <HAL_GPIO_DeInit+0x1a0>)
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	43db      	mvns	r3, r3
 8009dd0:	491a      	ldr	r1, [pc, #104]	; (8009e3c <HAL_GPIO_DeInit+0x1a0>)
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009dd6:	4b19      	ldr	r3, [pc, #100]	; (8009e3c <HAL_GPIO_DeInit+0x1a0>)
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	43db      	mvns	r3, r3
 8009dde:	4917      	ldr	r1, [pc, #92]	; (8009e3c <HAL_GPIO_DeInit+0x1a0>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009de4:	4b15      	ldr	r3, [pc, #84]	; (8009e3c <HAL_GPIO_DeInit+0x1a0>)
 8009de6:	689a      	ldr	r2, [r3, #8]
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	43db      	mvns	r3, r3
 8009dec:	4913      	ldr	r1, [pc, #76]	; (8009e3c <HAL_GPIO_DeInit+0x1a0>)
 8009dee:	4013      	ands	r3, r2
 8009df0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009df2:	4b12      	ldr	r3, [pc, #72]	; (8009e3c <HAL_GPIO_DeInit+0x1a0>)
 8009df4:	68da      	ldr	r2, [r3, #12]
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	43db      	mvns	r3, r3
 8009dfa:	4910      	ldr	r1, [pc, #64]	; (8009e3c <HAL_GPIO_DeInit+0x1a0>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	60cb      	str	r3, [r1, #12]
      }
    }

    position++;
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	3301      	adds	r3, #1
 8009e04:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f47f af52 	bne.w	8009cb8 <HAL_GPIO_DeInit+0x1c>
  }
}
 8009e14:	bf00      	nop
 8009e16:	3724      	adds	r7, #36	; 0x24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bc80      	pop	{r7}
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	40010000 	.word	0x40010000
 8009e24:	40010800 	.word	0x40010800
 8009e28:	40010c00 	.word	0x40010c00
 8009e2c:	40011000 	.word	0x40011000
 8009e30:	40011400 	.word	0x40011400
 8009e34:	40011800 	.word	0x40011800
 8009e38:	40011c00 	.word	0x40011c00
 8009e3c:	40010400 	.word	0x40010400

08009e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	807b      	strh	r3, [r7, #2]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e50:	787b      	ldrb	r3, [r7, #1]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e56:	887a      	ldrh	r2, [r7, #2]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009e5c:	e003      	b.n	8009e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009e5e:	887b      	ldrh	r3, [r7, #2]
 8009e60:	041a      	lsls	r2, r3, #16
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	611a      	str	r2, [r3, #16]
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bc80      	pop	{r7}
 8009e6e:	4770      	bx	lr

08009e70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68da      	ldr	r2, [r3, #12]
 8009e80:	887b      	ldrh	r3, [r7, #2]
 8009e82:	405a      	eors	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	60da      	str	r2, [r3, #12]
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bc80      	pop	{r7}
 8009e90:	4770      	bx	lr

08009e92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e94:	b08b      	sub	sp, #44	; 0x2c
 8009e96:	af06      	add	r7, sp, #24
 8009e98:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d101      	bne.n	8009ea8 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e0ca      	b.n	800a03e <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d106      	bne.n	8009ec2 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f005 f919 	bl	800f0f4 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f002 fc2e 	bl	800c730 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	603b      	str	r3, [r7, #0]
 8009eda:	687e      	ldr	r6, [r7, #4]
 8009edc:	466d      	mov	r5, sp
 8009ede:	f106 0410 	add.w	r4, r6, #16
 8009ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	1d33      	adds	r3, r6, #4
 8009eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009eee:	6838      	ldr	r0, [r7, #0]
 8009ef0:	f002 fbf4 	bl	800c6dc <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2100      	movs	r1, #0
 8009efa:	4618      	mov	r0, r3
 8009efc:	f002 fc34 	bl	800c768 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8009f00:	2300      	movs	r3, #0
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	e037      	b.n	8009f76 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	015b      	lsls	r3, r3, #5
 8009f0c:	4413      	add	r3, r2
 8009f0e:	3329      	adds	r3, #41	; 0x29
 8009f10:	2201      	movs	r2, #1
 8009f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	b2d9      	uxtb	r1, r3
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	015b      	lsls	r3, r3, #5
 8009f1e:	4413      	add	r3, r2
 8009f20:	3328      	adds	r3, #40	; 0x28
 8009f22:	460a      	mov	r2, r1
 8009f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	b299      	uxth	r1, r3
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	015b      	lsls	r3, r3, #5
 8009f30:	4413      	add	r3, r2
 8009f32:	3334      	adds	r3, #52	; 0x34
 8009f34:	460a      	mov	r2, r1
 8009f36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	015b      	lsls	r3, r3, #5
 8009f3e:	4413      	add	r3, r2
 8009f40:	332b      	adds	r3, #43	; 0x2b
 8009f42:	2200      	movs	r2, #0
 8009f44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	015b      	lsls	r3, r3, #5
 8009f4c:	4413      	add	r3, r2
 8009f4e:	3338      	adds	r3, #56	; 0x38
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	015b      	lsls	r3, r3, #5
 8009f5a:	4413      	add	r3, r2
 8009f5c:	333c      	adds	r3, #60	; 0x3c
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	3302      	adds	r3, #2
 8009f68:	015b      	lsls	r3, r3, #5
 8009f6a:	4413      	add	r3, r2
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3301      	adds	r3, #1
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b0e      	cmp	r3, #14
 8009f7a:	d9c4      	bls.n	8009f06 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	e03c      	b.n	8009ffc <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	015b      	lsls	r3, r3, #5
 8009f88:	4413      	add	r3, r2
 8009f8a:	f203 2329 	addw	r3, r3, #553	; 0x229
 8009f8e:	2200      	movs	r2, #0
 8009f90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	b2d9      	uxtb	r1, r3
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	015b      	lsls	r3, r3, #5
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8009fa2:	460a      	mov	r2, r1
 8009fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	b299      	uxth	r1, r3
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	015b      	lsls	r3, r3, #5
 8009fb0:	4413      	add	r3, r2
 8009fb2:	3334      	adds	r3, #52	; 0x34
 8009fb4:	460a      	mov	r2, r1
 8009fb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	015b      	lsls	r3, r3, #5
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	015b      	lsls	r3, r3, #5
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	015b      	lsls	r3, r3, #5
 8009fde:	4413      	add	r3, r2
 8009fe0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3312      	adds	r3, #18
 8009fee:	015b      	lsls	r3, r3, #5
 8009ff0:	4413      	add	r3, r2
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b0e      	cmp	r3, #14
 800a000:	d9bf      	bls.n	8009f82 <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	603b      	str	r3, [r7, #0]
 800a008:	687e      	ldr	r6, [r7, #4]
 800a00a:	466d      	mov	r5, sp
 800a00c:	f106 0410 	add.w	r4, r6, #16
 800a010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	602b      	str	r3, [r5, #0]
 800a018:	1d33      	adds	r3, r6, #4
 800a01a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a01c:	6838      	ldr	r0, [r7, #0]
 800a01e:	f002 fbaf 	bl	800c780 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4618      	mov	r0, r3
 800a038:	f003 fb99 	bl	800d76e <USB_DevDisconnect>
  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a046 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800a054:	2b01      	cmp	r3, #1
 800a056:	d101      	bne.n	800a05c <HAL_PCD_Start+0x16>
 800a058:	2302      	movs	r3, #2
 800a05a:	e016      	b.n	800a08a <HAL_PCD_Start+0x44>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800a064:	2101      	movs	r1, #1
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f005 faab 	bl	800f5c2 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4618      	mov	r0, r3
 800a072:	f003 fb72 	bl	800d75a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f002 fb3e 	bl	800c6fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f003 fb6f 	bl	800d782 <USB_ReadInterrupts>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0ae:	d102      	bne.n	800a0b6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fad9 	bl	800a668 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f003 fb61 	bl	800d782 <USB_ReadInterrupts>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ca:	d112      	bne.n	800a0f2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0de:	b292      	uxth	r2, r2
 800a0e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f005 f87a 	bl	800f1de <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f8d2 	bl	800a296 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f003 fb43 	bl	800d782 <USB_ReadInterrupts>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a106:	d10b      	bne.n	800a120 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a110:	b29a      	uxth	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a11a:	b292      	uxth	r2, r2
 800a11c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4618      	mov	r0, r3
 800a126:	f003 fb2c 	bl	800d782 <USB_ReadInterrupts>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a134:	d10b      	bne.n	800a14e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a13e:	b29a      	uxth	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a148:	b292      	uxth	r2, r2
 800a14a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4618      	mov	r0, r3
 800a154:	f003 fb15 	bl	800d782 <USB_ReadInterrupts>
 800a158:	4603      	mov	r3, r0
 800a15a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a15e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a162:	d126      	bne.n	800a1b2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0204 	bic.w	r2, r2, #4
 800a176:	b292      	uxth	r2, r2
 800a178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a184:	b29a      	uxth	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f022 0208 	bic.w	r2, r2, #8
 800a18e:	b292      	uxth	r2, r2
 800a190:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f005 f85b 	bl	800f250 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a1ac:	b292      	uxth	r2, r2
 800a1ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f003 fae3 	bl	800d782 <USB_ReadInterrupts>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1c6:	d131      	bne.n	800a22c <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f042 0208 	orr.w	r2, r2, #8
 800a1da:	b292      	uxth	r2, r2
 800a1dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1f2:	b292      	uxth	r2, r2
 800a1f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a200:	b29a      	uxth	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f042 0204 	orr.w	r2, r2, #4
 800a20a:	b292      	uxth	r2, r2
 800a20c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4618      	mov	r0, r3
 800a216:	f003 fab4 	bl	800d782 <USB_ReadInterrupts>
 800a21a:	4603      	mov	r3, r0
 800a21c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a224:	d002      	beq.n	800a22c <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f004 fff8 	bl	800f21c <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4618      	mov	r0, r3
 800a232:	f003 faa6 	bl	800d782 <USB_ReadInterrupts>
 800a236:	4603      	mov	r3, r0
 800a238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a23c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a240:	d10e      	bne.n	800a260 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a254:	b292      	uxth	r2, r2
 800a256:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f004 ffb1 	bl	800f1c2 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4618      	mov	r0, r3
 800a266:	f003 fa8c 	bl	800d782 <USB_ReadInterrupts>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a274:	d10b      	bne.n	800a28e <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a27e:	b29a      	uxth	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a288:	b292      	uxth	r2, r2
 800a28a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800a28e:	bf00      	nop
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d101      	bne.n	800a2b0 <HAL_PCD_SetAddress+0x1a>
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e013      	b.n	800a2d8 <HAL_PCD_SetAddress+0x42>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	78fa      	ldrb	r2, [r7, #3]
 800a2bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	78fa      	ldrb	r2, [r7, #3]
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f003 fa33 	bl	800d734 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	4608      	mov	r0, r1
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	70fb      	strb	r3, [r7, #3]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	803b      	strh	r3, [r7, #0]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 800a302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a306:	2b00      	cmp	r3, #0
 800a308:	da08      	bge.n	800a31c <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800a30a:	78fb      	ldrb	r3, [r7, #3]
 800a30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a310:	015b      	lsls	r3, r3, #5
 800a312:	3328      	adds	r3, #40	; 0x28
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	4413      	add	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	e008      	b.n	800a32e <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a322:	015b      	lsls	r3, r3, #5
 800a324:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	4413      	add	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 800a32e:	78fb      	ldrb	r3, [r7, #3]
 800a330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a334:	b2da      	uxtb	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800a33a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	09db      	lsrs	r3, r3, #7
 800a342:	b2db      	uxtb	r3, r3
 800a344:	461a      	mov	r2, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800a34a:	883a      	ldrh	r2, [r7, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	78ba      	ldrb	r2, [r7, #2]
 800a354:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d101      	bne.n	800a364 <HAL_PCD_EP_Open+0x84>
 800a360:	2302      	movs	r3, #2
 800a362:	e00e      	b.n	800a382 <HAL_PCD_EP_Open+0xa2>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68f9      	ldr	r1, [r7, #12]
 800a372:	4618      	mov	r0, r3
 800a374:	f002 fa28 	bl	800c7c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 800a380:	7afb      	ldrb	r3, [r7, #11]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	460b      	mov	r3, r1
 800a394:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800a396:	2300      	movs	r3, #0
 800a398:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 800a39a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	da08      	bge.n	800a3b4 <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800a3a2:	78fb      	ldrb	r3, [r7, #3]
 800a3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a8:	015b      	lsls	r3, r3, #5
 800a3aa:	3328      	adds	r3, #40	; 0x28
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	e008      	b.n	800a3c6 <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ba:	015b      	lsls	r3, r3, #5
 800a3bc:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 800a3c6:	78fb      	ldrb	r3, [r7, #3]
 800a3c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3cc:	b2da      	uxtb	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800a3d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	09db      	lsrs	r3, r3, #7
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	461a      	mov	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d101      	bne.n	800a3f0 <HAL_PCD_EP_Close+0x66>
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	e00e      	b.n	800a40e <HAL_PCD_EP_Close+0x84>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68f9      	ldr	r1, [r7, #12]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f002 fca4 	bl	800cd4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b086      	sub	sp, #24
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	60f8      	str	r0, [r7, #12]
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	603b      	str	r3, [r7, #0]
 800a422:	460b      	mov	r3, r1
 800a424:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800a42a:	7afb      	ldrb	r3, [r7, #11]
 800a42c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a430:	015b      	lsls	r3, r3, #5
 800a432:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4413      	add	r3, r2
 800a43a:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2200      	movs	r2, #0
 800a44c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	2200      	movs	r2, #0
 800a452:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800a454:	7afb      	ldrb	r3, [r7, #11]
 800a456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 800a460:	7afb      	ldrb	r3, [r7, #11]
 800a462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a466:	2b00      	cmp	r3, #0
 800a468:	d106      	bne.n	800a478 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6979      	ldr	r1, [r7, #20]
 800a470:	4618      	mov	r0, r3
 800a472:	f002 fdf3 	bl	800d05c <USB_EPStartXfer>
 800a476:	e005      	b.n	800a484 <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6979      	ldr	r1, [r7, #20]
 800a47e:	4618      	mov	r0, r3
 800a480:	f002 fdec 	bl	800d05c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	460b      	mov	r3, r1
 800a498:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800a49a:	78fb      	ldrb	r3, [r7, #3]
 800a49c:	f003 030f 	and.w	r3, r3, #15
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	3312      	adds	r3, #18
 800a4a4:	015b      	lsls	r3, r3, #5
 800a4a6:	4413      	add	r3, r2
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	b29b      	uxth	r3, r3
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bc80      	pop	{r7}
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	607a      	str	r2, [r7, #4]
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800a4cc:	7afb      	ldrb	r3, [r7, #11]
 800a4ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4d2:	015b      	lsls	r3, r3, #5
 800a4d4:	3328      	adds	r3, #40	; 0x28
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4413      	add	r3, r2
 800a4da:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800a4f4:	7afb      	ldrb	r3, [r7, #11]
 800a4f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 800a500:	7afb      	ldrb	r3, [r7, #11]
 800a502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a506:	2b00      	cmp	r3, #0
 800a508:	d106      	bne.n	800a518 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6979      	ldr	r1, [r7, #20]
 800a510:	4618      	mov	r0, r3
 800a512:	f002 fda3 	bl	800d05c <USB_EPStartXfer>
 800a516:	e005      	b.n	800a524 <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6979      	ldr	r1, [r7, #20]
 800a51e:	4618      	mov	r0, r3
 800a520:	f002 fd9c 	bl	800d05c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 800a53e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a542:	2b00      	cmp	r3, #0
 800a544:	da08      	bge.n	800a558 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a54c:	015b      	lsls	r3, r3, #5
 800a54e:	3328      	adds	r3, #40	; 0x28
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	4413      	add	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	e006      	b.n	800a566 <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	015b      	lsls	r3, r3, #5
 800a55c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	4413      	add	r3, r2
 800a564:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2201      	movs	r2, #1
 800a56a:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800a56c:	78fb      	ldrb	r3, [r7, #3]
 800a56e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a572:	b2da      	uxtb	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800a578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	09db      	lsrs	r3, r3, #7
 800a580:	b2db      	uxtb	r3, r3
 800a582:	461a      	mov	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d101      	bne.n	800a596 <HAL_PCD_EP_SetStall+0x68>
 800a592:	2302      	movs	r3, #2
 800a594:	e01c      	b.n	800a5d0 <HAL_PCD_EP_SetStall+0xa2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68f9      	ldr	r1, [r7, #12]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f002 ffdb 	bl	800d560 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 800a5aa:	78fb      	ldrb	r3, [r7, #3]
 800a5ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d108      	bne.n	800a5c6 <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	f003 f8ef 	bl	800d7a4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 800a5e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	da08      	bge.n	800a602 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800a5f0:	78fb      	ldrb	r3, [r7, #3]
 800a5f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f6:	015b      	lsls	r3, r3, #5
 800a5f8:	3328      	adds	r3, #40	; 0x28
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
 800a600:	e006      	b.n	800a610 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a602:	78fb      	ldrb	r3, [r7, #3]
 800a604:	015b      	lsls	r3, r3, #5
 800a606:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	4413      	add	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800a616:	78fb      	ldrb	r3, [r7, #3]
 800a618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800a622:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	09db      	lsrs	r3, r3, #7
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	461a      	mov	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d101      	bne.n	800a640 <HAL_PCD_EP_ClrStall+0x68>
 800a63c:	2302      	movs	r3, #2
 800a63e:	e00e      	b.n	800a65e <HAL_PCD_EP_ClrStall+0x86>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68f9      	ldr	r1, [r7, #12]
 800a64e:	4618      	mov	r0, r3
 800a650:	f002 ffe6 	bl	800d620 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a668:	b590      	push	{r4, r7, lr}
 800a66a:	b089      	sub	sp, #36	; 0x24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 800a670:	2300      	movs	r3, #0
 800a672:	61fb      	str	r3, [r7, #28]
  uint16_t count = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	837b      	strh	r3, [r7, #26]
  uint8_t epindex = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	767b      	strb	r3, [r7, #25]
  __IO uint16_t wIstr = 0;  
 800a67c:	2300      	movs	r3, #0
 800a67e:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800a684:	e308      	b.n	800ac98 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a686:	89fb      	ldrh	r3, [r7, #14]
 800a688:	b29b      	uxth	r3, r3
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	767b      	strb	r3, [r7, #25]
    
    if (epindex == 0)
 800a692:	7e7b      	ldrb	r3, [r7, #25]
 800a694:	2b00      	cmp	r3, #0
 800a696:	f040 812a 	bne.w	800a8ee <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800a69a:	89fb      	ldrh	r3, [r7, #14]
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	f003 0310 	and.w	r3, r3, #16
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d14d      	bne.n	800a742 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	6812      	ldr	r2, [r2, #0]
 800a6b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	3328      	adds	r3, #40	; 0x28
 800a6c2:	61fb      	str	r3, [r7, #28]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	00db      	lsls	r3, r3, #3
 800a6d6:	4413      	add	r3, r2
 800a6d8:	3302      	adds	r3, #2
 800a6da:	005b      	lsls	r3, r3, #1
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	6812      	ldr	r2, [r2, #0]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	695a      	ldr	r2, [r3, #20]
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	441a      	add	r2, r3
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a700:	2100      	movs	r1, #0
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f004 fd46 	bl	800f194 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 82c1 	beq.w	800ac98 <PCD_EP_ISR_Handler+0x630>
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f040 82bc 	bne.w	800ac98 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a726:	b2db      	uxtb	r3, r3
 800a728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a72c:	b2da      	uxtb	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	b292      	uxth	r2, r2
 800a734:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a740:	e2aa      	b.n	800ac98 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800a748:	61fb      	str	r3, [r7, #28]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29b      	uxth	r3, r3
 800a752:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a754:	89bb      	ldrh	r3, [r7, #12]
 800a756:	b29b      	uxth	r3, r3
 800a758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d031      	beq.n	800a7c4 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a768:	b29b      	uxth	r3, r3
 800a76a:	461a      	mov	r2, r3
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	00db      	lsls	r3, r3, #3
 800a772:	4413      	add	r3, r2
 800a774:	3306      	adds	r3, #6
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	6812      	ldr	r2, [r2, #0]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	b29b      	uxth	r3, r3
 800a786:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	889a      	ldrh	r2, [r3, #4]
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	69db      	ldr	r3, [r3, #28]
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	f003 f850 	bl	800d846 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	881b      	ldrh	r3, [r3, #0]
 800a7ac:	b299      	uxth	r1, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a7b6:	400b      	ands	r3, r1
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f004 fcbf 	bl	800f140 <HAL_PCD_SetupStageCallback>
 800a7c2:	e269      	b.n	800ac98 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a7c4:	89bb      	ldrh	r3, [r7, #12]
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	b21b      	sxth	r3, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f280 8264 	bge.w	800ac98 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	881b      	ldrh	r3, [r3, #0]
 800a7d6:	b299      	uxth	r1, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a7e0:	400b      	ands	r3, r1
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	00db      	lsls	r3, r3, #3
 800a7f8:	4413      	add	r3, r2
 800a7fa:	3306      	adds	r3, #6
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	6812      	ldr	r2, [r2, #0]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	69db      	ldr	r3, [r3, #28]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d011      	beq.n	800a840 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6818      	ldr	r0, [r3, #0]
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	6959      	ldr	r1, [r3, #20]
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	889a      	ldrh	r2, [r3, #4]
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	69db      	ldr	r3, [r3, #28]
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	f003 f80a 	bl	800d846 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	695a      	ldr	r2, [r3, #20]
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	69db      	ldr	r3, [r3, #28]
 800a83a:	441a      	add	r2, r3
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a840:	2100      	movs	r1, #0
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f004 fc8e 	bl	800f164 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a850:	b29b      	uxth	r3, r3
 800a852:	3306      	adds	r3, #6
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	6812      	ldr	r2, [r2, #0]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	2b3e      	cmp	r3, #62	; 0x3e
 800a868:	d918      	bls.n	800a89c <PCD_EP_ISR_Handler+0x234>
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	095b      	lsrs	r3, r3, #5
 800a870:	82fb      	strh	r3, [r7, #22]
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	f003 031f 	and.w	r3, r3, #31
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d102      	bne.n	800a884 <PCD_EP_ISR_Handler+0x21c>
 800a87e:	8afb      	ldrh	r3, [r7, #22]
 800a880:	3b01      	subs	r3, #1
 800a882:	82fb      	strh	r3, [r7, #22]
 800a884:	8afb      	ldrh	r3, [r7, #22]
 800a886:	029b      	lsls	r3, r3, #10
 800a888:	b29b      	uxth	r3, r3
 800a88a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a88e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a892:	b29b      	uxth	r3, r3
 800a894:	461a      	mov	r2, r3
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	e012      	b.n	800a8c2 <PCD_EP_ISR_Handler+0x25a>
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	085b      	lsrs	r3, r3, #1
 800a8a2:	82fb      	strh	r3, [r7, #22]
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <PCD_EP_ISR_Handler+0x24e>
 800a8b0:	8afb      	ldrh	r3, [r7, #22]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	82fb      	strh	r3, [r7, #22]
 800a8b6:	8afb      	ldrh	r3, [r7, #22]
 800a8b8:	029b      	lsls	r3, r3, #10
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	461a      	mov	r2, r3
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d2:	b29c      	uxth	r4, r3
 800a8d4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a8d8:	b29c      	uxth	r4, r3
 800a8da:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800a8de:	b29c      	uxth	r4, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	4b98      	ldr	r3, [pc, #608]	; (800ab48 <PCD_EP_ISR_Handler+0x4e0>)
 800a8e6:	4323      	orrs	r3, r4
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	8013      	strh	r3, [r2, #0]
 800a8ec:	e1d4      	b.n	800ac98 <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	7e7b      	ldrb	r3, [r7, #25]
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a900:	89bb      	ldrh	r3, [r7, #12]
 800a902:	b29b      	uxth	r3, r3
 800a904:	b21b      	sxth	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	f280 80d0 	bge.w	800aaac <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	461a      	mov	r2, r3
 800a912:	7e7b      	ldrb	r3, [r7, #25]
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	b299      	uxth	r1, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	461a      	mov	r2, r3
 800a922:	7e7b      	ldrb	r3, [r7, #25]
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	441a      	add	r2, r3
 800a928:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a92c:	400b      	ands	r3, r1
 800a92e:	b29b      	uxth	r3, r3
 800a930:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a932:	7e7b      	ldrb	r3, [r7, #25]
 800a934:	015b      	lsls	r3, r3, #5
 800a936:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	4413      	add	r3, r2
 800a93e:	61fb      	str	r3, [r7, #28]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	7a9b      	ldrb	r3, [r3, #10]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d122      	bne.n	800a98e <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a950:	b29b      	uxth	r3, r3
 800a952:	461a      	mov	r2, r3
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	00db      	lsls	r3, r3, #3
 800a95a:	4413      	add	r3, r2
 800a95c:	3306      	adds	r3, #6
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	4413      	add	r3, r2
 800a966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a972:	837b      	strh	r3, [r7, #26]
          if (count != 0U)
 800a974:	8b7b      	ldrh	r3, [r7, #26]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d073      	beq.n	800aa62 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6818      	ldr	r0, [r3, #0]
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	6959      	ldr	r1, [r3, #20]
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	889a      	ldrh	r2, [r3, #4]
 800a986:	8b7b      	ldrh	r3, [r7, #26]
 800a988:	f002 ff5d 	bl	800d846 <USB_ReadPMA>
 800a98c:	e069      	b.n	800aa62 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d022      	beq.n	800a9ee <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	00db      	lsls	r3, r3, #3
 800a9ba:	4413      	add	r3, r2
 800a9bc:	3302      	adds	r3, #2
 800a9be:	005b      	lsls	r3, r3, #1
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	6812      	ldr	r2, [r2, #0]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9d2:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 800a9d4:	8b7b      	ldrh	r3, [r7, #26]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d02b      	beq.n	800aa32 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6818      	ldr	r0, [r3, #0]
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	6959      	ldr	r1, [r3, #20]
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	88da      	ldrh	r2, [r3, #6]
 800a9e6:	8b7b      	ldrh	r3, [r7, #26]
 800a9e8:	f002 ff2d 	bl	800d846 <USB_ReadPMA>
 800a9ec:	e021      	b.n	800aa32 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	00db      	lsls	r3, r3, #3
 800aa00:	4413      	add	r3, r2
 800aa02:	3306      	adds	r3, #6
 800aa04:	005b      	lsls	r3, r3, #1
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	6812      	ldr	r2, [r2, #0]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa18:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 800aa1a:	8b7b      	ldrh	r3, [r7, #26]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d008      	beq.n	800aa32 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6818      	ldr	r0, [r3, #0]
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	6959      	ldr	r1, [r3, #20]
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	891a      	ldrh	r2, [r3, #8]
 800aa2c:	8b7b      	ldrh	r3, [r7, #26]
 800aa2e:	f002 ff0a 	bl	800d846 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	f640 730f 	movw	r3, #3855	; 0xf0f
 800aa48:	4013      	ands	r3, r2
 800aa4a:	b299      	uxth	r1, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	461a      	mov	r2, r3
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	441a      	add	r2, r3
 800aa5a:	4b3c      	ldr	r3, [pc, #240]	; (800ab4c <PCD_EP_ISR_Handler+0x4e4>)
 800aa5c:	430b      	orrs	r3, r1
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	69da      	ldr	r2, [r3, #28]
 800aa66:	8b7b      	ldrh	r3, [r7, #26]
 800aa68:	441a      	add	r2, r3
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	695a      	ldr	r2, [r3, #20]
 800aa72:	8b7b      	ldrh	r3, [r7, #26]
 800aa74:	441a      	add	r2, r3
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d004      	beq.n	800aa8c <PCD_EP_ISR_Handler+0x424>
 800aa82:	8b7a      	ldrh	r2, [r7, #26]
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d206      	bcs.n	800aa9a <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	4619      	mov	r1, r3
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f004 fb66 	bl	800f164 <HAL_PCD_DataOutStageCallback>
 800aa98:	e008      	b.n	800aaac <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	7819      	ldrb	r1, [r3, #0]
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	695a      	ldr	r2, [r3, #20]
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7ff fcb5 	bl	800a416 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800aaac:	89bb      	ldrh	r3, [r7, #12]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 80ef 	beq.w	800ac98 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 800aaba:	7e7b      	ldrb	r3, [r7, #25]
 800aabc:	015b      	lsls	r3, r3, #5
 800aabe:	3328      	adds	r3, #40	; 0x28
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	4413      	add	r3, r2
 800aac4:	61fb      	str	r3, [r7, #28]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	7e7b      	ldrb	r3, [r7, #25]
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	4413      	add	r3, r2
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	6812      	ldr	r2, [r2, #0]
 800aada:	4611      	mov	r1, r2
 800aadc:	7e7a      	ldrb	r2, [r7, #25]
 800aade:	0092      	lsls	r2, r2, #2
 800aae0:	440a      	add	r2, r1
 800aae2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800aae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	7a9b      	ldrb	r3, [r3, #10]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d12c      	bne.n	800ab50 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	461a      	mov	r2, r3
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	4413      	add	r3, r2
 800ab0a:	3302      	adds	r3, #2
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	6812      	ldr	r2, [r2, #0]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 8083 	beq.w	800ac34 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6818      	ldr	r0, [r3, #0]
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	6959      	ldr	r1, [r3, #20]
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	889a      	ldrh	r2, [r3, #4]
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	f002 fe3b 	bl	800d7ba <USB_WritePMA>
 800ab44:	e076      	b.n	800ac34 <PCD_EP_ISR_Handler+0x5cc>
 800ab46:	bf00      	nop
 800ab48:	ffff8080 	.word	0xffff8080
 800ab4c:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	461a      	mov	r2, r3
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	881b      	ldrh	r3, [r3, #0]
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d026      	beq.n	800abb8 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	461a      	mov	r2, r3
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	00db      	lsls	r3, r3, #3
 800ab7c:	4413      	add	r3, r2
 800ab7e:	3302      	adds	r3, #2
 800ab80:	005b      	lsls	r3, r3, #1
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	6812      	ldr	r2, [r2, #0]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d031      	beq.n	800ac04 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	6959      	ldr	r1, [r3, #20]
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	88da      	ldrh	r2, [r3, #6]
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	f002 fe02 	bl	800d7ba <USB_WritePMA>
 800abb6:	e025      	b.n	800ac04 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	461a      	mov	r2, r3
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	00db      	lsls	r3, r3, #3
 800abca:	4413      	add	r3, r2
 800abcc:	3306      	adds	r3, #6
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	6812      	ldr	r2, [r2, #0]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	b29b      	uxth	r3, r3
 800abde:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	69db      	ldr	r3, [r3, #28]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00a      	beq.n	800ac04 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6818      	ldr	r0, [r3, #0]
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	6959      	ldr	r1, [r3, #20]
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	891a      	ldrh	r2, [r3, #8]
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	f002 fddb 	bl	800d7ba <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	881b      	ldrh	r3, [r3, #0]
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	f640 730f 	movw	r3, #3855	; 0xf0f
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	b299      	uxth	r1, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	441a      	add	r2, r3
 800ac2c:	4b22      	ldr	r3, [pc, #136]	; (800acb8 <PCD_EP_ISR_Handler+0x650>)
 800ac2e:	430b      	orrs	r3, r1
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	461a      	mov	r2, r3
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	00db      	lsls	r3, r3, #3
 800ac46:	4413      	add	r3, r2
 800ac48:	3302      	adds	r3, #2
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	6812      	ldr	r2, [r2, #0]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	695a      	ldr	r2, [r3, #20]
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	69db      	ldr	r3, [r3, #28]
 800ac6a:	441a      	add	r2, r3
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d106      	bne.n	800ac86 <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f004 fa88 	bl	800f194 <HAL_PCD_DataInStageCallback>
 800ac84:	e008      	b.n	800ac98 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	7819      	ldrb	r1, [r3, #0]
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	695a      	ldr	r2, [r3, #20]
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff fc10 	bl	800a4b8 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	461a      	mov	r2, r3
 800aca4:	81fa      	strh	r2, [r7, #14]
 800aca6:	b21b      	sxth	r3, r3
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f6ff acec 	blt.w	800a686 <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3724      	adds	r7, #36	; 0x24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd90      	pop	{r4, r7, pc}
 800acb8:	ffffc080 	.word	0xffffc080

0800acbc <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 800acbc:	b480      	push	{r7}
 800acbe:	b087      	sub	sp, #28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	607b      	str	r3, [r7, #4]
 800acc6:	460b      	mov	r3, r1
 800acc8:	817b      	strh	r3, [r7, #10]
 800acca:	4613      	mov	r3, r2
 800accc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 800acce:	2300      	movs	r3, #0
 800acd0:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 800acd2:	897b      	ldrh	r3, [r7, #10]
 800acd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d008      	beq.n	800acee <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800acdc:	897b      	ldrh	r3, [r7, #10]
 800acde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace2:	015b      	lsls	r3, r3, #5
 800ace4:	3328      	adds	r3, #40	; 0x28
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	4413      	add	r3, r2
 800acea:	617b      	str	r3, [r7, #20]
 800acec:	e006      	b.n	800acfc <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800acee:	897b      	ldrh	r3, [r7, #10]
 800acf0:	015b      	lsls	r3, r3, #5
 800acf2:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	4413      	add	r3, r2
 800acfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800acfc:	893b      	ldrh	r3, [r7, #8]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d107      	bne.n	800ad12 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2200      	movs	r2, #0
 800ad06:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	809a      	strh	r2, [r3, #4]
 800ad10:	e00b      	b.n	800ad2a <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	2201      	movs	r2, #1
 800ad16:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	0c1b      	lsrs	r3, r3, #16
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	371c      	adds	r7, #28
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bc80      	pop	{r7}
 800ad34:	4770      	bx	lr
	...

0800ad38 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800ad3c:	4b03      	ldr	r3, [pc, #12]	; (800ad4c <HAL_PWR_EnableBkUpAccess+0x14>)
 800ad3e:	2201      	movs	r2, #1
 800ad40:	601a      	str	r2, [r3, #0]
}
 800ad42:	bf00      	nop
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bc80      	pop	{r7}
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	420e0020 	.word	0x420e0020

0800ad50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 0301 	and.w	r3, r3, #1
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 8087 	beq.w	800ae78 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800ad6a:	4b92      	ldr	r3, [pc, #584]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f003 030c 	and.w	r3, r3, #12
 800ad72:	2b04      	cmp	r3, #4
 800ad74:	d00c      	beq.n	800ad90 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ad76:	4b8f      	ldr	r3, [pc, #572]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	f003 030c 	and.w	r3, r3, #12
 800ad7e:	2b08      	cmp	r3, #8
 800ad80:	d112      	bne.n	800ada8 <HAL_RCC_OscConfig+0x58>
 800ad82:	4b8c      	ldr	r3, [pc, #560]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad8e:	d10b      	bne.n	800ada8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad90:	4b88      	ldr	r3, [pc, #544]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d06c      	beq.n	800ae76 <HAL_RCC_OscConfig+0x126>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d168      	bne.n	800ae76 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e22d      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb0:	d106      	bne.n	800adc0 <HAL_RCC_OscConfig+0x70>
 800adb2:	4b80      	ldr	r3, [pc, #512]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a7f      	ldr	r2, [pc, #508]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800adb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	e02e      	b.n	800ae1e <HAL_RCC_OscConfig+0xce>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10c      	bne.n	800ade2 <HAL_RCC_OscConfig+0x92>
 800adc8:	4b7a      	ldr	r3, [pc, #488]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a79      	ldr	r2, [pc, #484]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800adce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800add2:	6013      	str	r3, [r2, #0]
 800add4:	4b77      	ldr	r3, [pc, #476]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a76      	ldr	r2, [pc, #472]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800adda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800adde:	6013      	str	r3, [r2, #0]
 800ade0:	e01d      	b.n	800ae1e <HAL_RCC_OscConfig+0xce>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800adea:	d10c      	bne.n	800ae06 <HAL_RCC_OscConfig+0xb6>
 800adec:	4b71      	ldr	r3, [pc, #452]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a70      	ldr	r2, [pc, #448]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800adf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	4b6e      	ldr	r3, [pc, #440]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a6d      	ldr	r2, [pc, #436]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800adfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae02:	6013      	str	r3, [r2, #0]
 800ae04:	e00b      	b.n	800ae1e <HAL_RCC_OscConfig+0xce>
 800ae06:	4b6b      	ldr	r3, [pc, #428]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a6a      	ldr	r2, [pc, #424]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ae0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae10:	6013      	str	r3, [r2, #0]
 800ae12:	4b68      	ldr	r3, [pc, #416]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a67      	ldr	r2, [pc, #412]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ae18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae1c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d013      	beq.n	800ae4e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae26:	f7fd ffad 	bl	8008d84 <HAL_GetTick>
 800ae2a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae2c:	e008      	b.n	800ae40 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae2e:	f7fd ffa9 	bl	8008d84 <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	2b64      	cmp	r3, #100	; 0x64
 800ae3a:	d901      	bls.n	800ae40 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e1e1      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae40:	4b5c      	ldr	r3, [pc, #368]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d0f0      	beq.n	800ae2e <HAL_RCC_OscConfig+0xde>
 800ae4c:	e014      	b.n	800ae78 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae4e:	f7fd ff99 	bl	8008d84 <HAL_GetTick>
 800ae52:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae54:	e008      	b.n	800ae68 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae56:	f7fd ff95 	bl	8008d84 <HAL_GetTick>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	2b64      	cmp	r3, #100	; 0x64
 800ae62:	d901      	bls.n	800ae68 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e1cd      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae68:	4b52      	ldr	r3, [pc, #328]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1f0      	bne.n	800ae56 <HAL_RCC_OscConfig+0x106>
 800ae74:	e000      	b.n	800ae78 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae76:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 0302 	and.w	r3, r3, #2
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d063      	beq.n	800af4c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800ae84:	4b4b      	ldr	r3, [pc, #300]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	f003 030c 	and.w	r3, r3, #12
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00b      	beq.n	800aea8 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ae90:	4b48      	ldr	r3, [pc, #288]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	f003 030c 	and.w	r3, r3, #12
 800ae98:	2b08      	cmp	r3, #8
 800ae9a:	d11c      	bne.n	800aed6 <HAL_RCC_OscConfig+0x186>
 800ae9c:	4b45      	ldr	r3, [pc, #276]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d116      	bne.n	800aed6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aea8:	4b42      	ldr	r3, [pc, #264]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0302 	and.w	r3, r3, #2
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d005      	beq.n	800aec0 <HAL_RCC_OscConfig+0x170>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d001      	beq.n	800aec0 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e1a1      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aec0:	4b3c      	ldr	r3, [pc, #240]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	4939      	ldr	r1, [pc, #228]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800aed0:	4313      	orrs	r3, r2
 800aed2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aed4:	e03a      	b.n	800af4c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d020      	beq.n	800af20 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aede:	4b36      	ldr	r3, [pc, #216]	; (800afb8 <HAL_RCC_OscConfig+0x268>)
 800aee0:	2201      	movs	r2, #1
 800aee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aee4:	f7fd ff4e 	bl	8008d84 <HAL_GetTick>
 800aee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aeea:	e008      	b.n	800aefe <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aeec:	f7fd ff4a 	bl	8008d84 <HAL_GetTick>
 800aef0:	4602      	mov	r2, r0
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d901      	bls.n	800aefe <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e182      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aefe:	4b2d      	ldr	r3, [pc, #180]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0302 	and.w	r3, r3, #2
 800af06:	2b00      	cmp	r3, #0
 800af08:	d0f0      	beq.n	800aeec <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af0a:	4b2a      	ldr	r3, [pc, #168]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	00db      	lsls	r3, r3, #3
 800af18:	4926      	ldr	r1, [pc, #152]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	600b      	str	r3, [r1, #0]
 800af1e:	e015      	b.n	800af4c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800af20:	4b25      	ldr	r3, [pc, #148]	; (800afb8 <HAL_RCC_OscConfig+0x268>)
 800af22:	2200      	movs	r2, #0
 800af24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af26:	f7fd ff2d 	bl	8008d84 <HAL_GetTick>
 800af2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af2c:	e008      	b.n	800af40 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af2e:	f7fd ff29 	bl	8008d84 <HAL_GetTick>
 800af32:	4602      	mov	r2, r0
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d901      	bls.n	800af40 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e161      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af40:	4b1c      	ldr	r3, [pc, #112]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 0302 	and.w	r3, r3, #2
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1f0      	bne.n	800af2e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 0308 	and.w	r3, r3, #8
 800af54:	2b00      	cmp	r3, #0
 800af56:	d039      	beq.n	800afcc <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d019      	beq.n	800af94 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af60:	4b16      	ldr	r3, [pc, #88]	; (800afbc <HAL_RCC_OscConfig+0x26c>)
 800af62:	2201      	movs	r2, #1
 800af64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af66:	f7fd ff0d 	bl	8008d84 <HAL_GetTick>
 800af6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af6c:	e008      	b.n	800af80 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800af6e:	f7fd ff09 	bl	8008d84 <HAL_GetTick>
 800af72:	4602      	mov	r2, r0
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d901      	bls.n	800af80 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800af7c:	2303      	movs	r3, #3
 800af7e:	e141      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af80:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <HAL_RCC_OscConfig+0x264>)
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	f003 0302 	and.w	r3, r3, #2
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d0f0      	beq.n	800af6e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800af8c:	2001      	movs	r0, #1
 800af8e:	f000 fae3 	bl	800b558 <RCC_Delay>
 800af92:	e01b      	b.n	800afcc <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af94:	4b09      	ldr	r3, [pc, #36]	; (800afbc <HAL_RCC_OscConfig+0x26c>)
 800af96:	2200      	movs	r2, #0
 800af98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af9a:	f7fd fef3 	bl	8008d84 <HAL_GetTick>
 800af9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800afa0:	e00e      	b.n	800afc0 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800afa2:	f7fd feef 	bl	8008d84 <HAL_GetTick>
 800afa6:	4602      	mov	r2, r0
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	2b02      	cmp	r3, #2
 800afae:	d907      	bls.n	800afc0 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e127      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
 800afb4:	40021000 	.word	0x40021000
 800afb8:	42420000 	.word	0x42420000
 800afbc:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800afc0:	4b92      	ldr	r3, [pc, #584]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800afc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc4:	f003 0302 	and.w	r3, r3, #2
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1ea      	bne.n	800afa2 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 0304 	and.w	r3, r3, #4
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f000 80a6 	beq.w	800b126 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afda:	2300      	movs	r3, #0
 800afdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afde:	4b8b      	ldr	r3, [pc, #556]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800afe0:	69db      	ldr	r3, [r3, #28]
 800afe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10d      	bne.n	800b006 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afea:	4b88      	ldr	r3, [pc, #544]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800afec:	69db      	ldr	r3, [r3, #28]
 800afee:	4a87      	ldr	r2, [pc, #540]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800aff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aff4:	61d3      	str	r3, [r2, #28]
 800aff6:	4b85      	ldr	r3, [pc, #532]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800aff8:	69db      	ldr	r3, [r3, #28]
 800affa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800affe:	60fb      	str	r3, [r7, #12]
 800b000:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b002:	2301      	movs	r3, #1
 800b004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b006:	4b82      	ldr	r3, [pc, #520]	; (800b210 <HAL_RCC_OscConfig+0x4c0>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d118      	bne.n	800b044 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b012:	4b7f      	ldr	r3, [pc, #508]	; (800b210 <HAL_RCC_OscConfig+0x4c0>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a7e      	ldr	r2, [pc, #504]	; (800b210 <HAL_RCC_OscConfig+0x4c0>)
 800b018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b01c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b01e:	f7fd feb1 	bl	8008d84 <HAL_GetTick>
 800b022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b024:	e008      	b.n	800b038 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b026:	f7fd fead 	bl	8008d84 <HAL_GetTick>
 800b02a:	4602      	mov	r2, r0
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	1ad3      	subs	r3, r2, r3
 800b030:	2b64      	cmp	r3, #100	; 0x64
 800b032:	d901      	bls.n	800b038 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800b034:	2303      	movs	r3, #3
 800b036:	e0e5      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b038:	4b75      	ldr	r3, [pc, #468]	; (800b210 <HAL_RCC_OscConfig+0x4c0>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b040:	2b00      	cmp	r3, #0
 800b042:	d0f0      	beq.n	800b026 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d106      	bne.n	800b05a <HAL_RCC_OscConfig+0x30a>
 800b04c:	4b6f      	ldr	r3, [pc, #444]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b04e:	6a1b      	ldr	r3, [r3, #32]
 800b050:	4a6e      	ldr	r2, [pc, #440]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b052:	f043 0301 	orr.w	r3, r3, #1
 800b056:	6213      	str	r3, [r2, #32]
 800b058:	e02d      	b.n	800b0b6 <HAL_RCC_OscConfig+0x366>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10c      	bne.n	800b07c <HAL_RCC_OscConfig+0x32c>
 800b062:	4b6a      	ldr	r3, [pc, #424]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	4a69      	ldr	r2, [pc, #420]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b068:	f023 0301 	bic.w	r3, r3, #1
 800b06c:	6213      	str	r3, [r2, #32]
 800b06e:	4b67      	ldr	r3, [pc, #412]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	4a66      	ldr	r2, [pc, #408]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b074:	f023 0304 	bic.w	r3, r3, #4
 800b078:	6213      	str	r3, [r2, #32]
 800b07a:	e01c      	b.n	800b0b6 <HAL_RCC_OscConfig+0x366>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	2b05      	cmp	r3, #5
 800b082:	d10c      	bne.n	800b09e <HAL_RCC_OscConfig+0x34e>
 800b084:	4b61      	ldr	r3, [pc, #388]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b086:	6a1b      	ldr	r3, [r3, #32]
 800b088:	4a60      	ldr	r2, [pc, #384]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b08a:	f043 0304 	orr.w	r3, r3, #4
 800b08e:	6213      	str	r3, [r2, #32]
 800b090:	4b5e      	ldr	r3, [pc, #376]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b092:	6a1b      	ldr	r3, [r3, #32]
 800b094:	4a5d      	ldr	r2, [pc, #372]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b096:	f043 0301 	orr.w	r3, r3, #1
 800b09a:	6213      	str	r3, [r2, #32]
 800b09c:	e00b      	b.n	800b0b6 <HAL_RCC_OscConfig+0x366>
 800b09e:	4b5b      	ldr	r3, [pc, #364]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	4a5a      	ldr	r2, [pc, #360]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b0a4:	f023 0301 	bic.w	r3, r3, #1
 800b0a8:	6213      	str	r3, [r2, #32]
 800b0aa:	4b58      	ldr	r3, [pc, #352]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	4a57      	ldr	r2, [pc, #348]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b0b0:	f023 0304 	bic.w	r3, r3, #4
 800b0b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d015      	beq.n	800b0ea <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0be:	f7fd fe61 	bl	8008d84 <HAL_GetTick>
 800b0c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0c4:	e00a      	b.n	800b0dc <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0c6:	f7fd fe5d 	bl	8008d84 <HAL_GetTick>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d901      	bls.n	800b0dc <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	e093      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0dc:	4b4b      	ldr	r3, [pc, #300]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b0de:	6a1b      	ldr	r3, [r3, #32]
 800b0e0:	f003 0302 	and.w	r3, r3, #2
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d0ee      	beq.n	800b0c6 <HAL_RCC_OscConfig+0x376>
 800b0e8:	e014      	b.n	800b114 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0ea:	f7fd fe4b 	bl	8008d84 <HAL_GetTick>
 800b0ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0f0:	e00a      	b.n	800b108 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0f2:	f7fd fe47 	bl	8008d84 <HAL_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b100:	4293      	cmp	r3, r2
 800b102:	d901      	bls.n	800b108 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e07d      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b108:	4b40      	ldr	r3, [pc, #256]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	f003 0302 	and.w	r3, r3, #2
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1ee      	bne.n	800b0f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d105      	bne.n	800b126 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b11a:	4b3c      	ldr	r3, [pc, #240]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	4a3b      	ldr	r2, [pc, #236]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b124:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	69db      	ldr	r3, [r3, #28]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d069      	beq.n	800b202 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b12e:	4b37      	ldr	r3, [pc, #220]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f003 030c 	and.w	r3, r3, #12
 800b136:	2b08      	cmp	r3, #8
 800b138:	d061      	beq.n	800b1fe <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	69db      	ldr	r3, [r3, #28]
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d146      	bne.n	800b1d0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b142:	4b34      	ldr	r3, [pc, #208]	; (800b214 <HAL_RCC_OscConfig+0x4c4>)
 800b144:	2200      	movs	r2, #0
 800b146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b148:	f7fd fe1c 	bl	8008d84 <HAL_GetTick>
 800b14c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b14e:	e008      	b.n	800b162 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b150:	f7fd fe18 	bl	8008d84 <HAL_GetTick>
 800b154:	4602      	mov	r2, r0
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d901      	bls.n	800b162 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800b15e:	2303      	movs	r3, #3
 800b160:	e050      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b162:	4b2a      	ldr	r3, [pc, #168]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1f0      	bne.n	800b150 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b176:	d108      	bne.n	800b18a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b178:	4b24      	ldr	r3, [pc, #144]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	4921      	ldr	r1, [pc, #132]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b186:	4313      	orrs	r3, r2
 800b188:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b18a:	4b20      	ldr	r3, [pc, #128]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a19      	ldr	r1, [r3, #32]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	430b      	orrs	r3, r1
 800b19c:	491b      	ldr	r1, [pc, #108]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b1a2:	4b1c      	ldr	r3, [pc, #112]	; (800b214 <HAL_RCC_OscConfig+0x4c4>)
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1a8:	f7fd fdec 	bl	8008d84 <HAL_GetTick>
 800b1ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b1ae:	e008      	b.n	800b1c2 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1b0:	f7fd fde8 	bl	8008d84 <HAL_GetTick>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d901      	bls.n	800b1c2 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e020      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b1c2:	4b12      	ldr	r3, [pc, #72]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d0f0      	beq.n	800b1b0 <HAL_RCC_OscConfig+0x460>
 800b1ce:	e018      	b.n	800b202 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1d0:	4b10      	ldr	r3, [pc, #64]	; (800b214 <HAL_RCC_OscConfig+0x4c4>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1d6:	f7fd fdd5 	bl	8008d84 <HAL_GetTick>
 800b1da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b1dc:	e008      	b.n	800b1f0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1de:	f7fd fdd1 	bl	8008d84 <HAL_GetTick>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d901      	bls.n	800b1f0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e009      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b1f0:	4b06      	ldr	r3, [pc, #24]	; (800b20c <HAL_RCC_OscConfig+0x4bc>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1f0      	bne.n	800b1de <HAL_RCC_OscConfig+0x48e>
 800b1fc:	e001      	b.n	800b202 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e000      	b.n	800b204 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	40021000 	.word	0x40021000
 800b210:	40007000 	.word	0x40007000
 800b214:	42420060 	.word	0x42420060

0800b218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800b226:	4b7e      	ldr	r3, [pc, #504]	; (800b420 <HAL_RCC_ClockConfig+0x208>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 0307 	and.w	r3, r3, #7
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	429a      	cmp	r2, r3
 800b232:	d910      	bls.n	800b256 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b234:	4b7a      	ldr	r3, [pc, #488]	; (800b420 <HAL_RCC_ClockConfig+0x208>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f023 0207 	bic.w	r2, r3, #7
 800b23c:	4978      	ldr	r1, [pc, #480]	; (800b420 <HAL_RCC_ClockConfig+0x208>)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	4313      	orrs	r3, r2
 800b242:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b244:	4b76      	ldr	r3, [pc, #472]	; (800b420 <HAL_RCC_ClockConfig+0x208>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 0307 	and.w	r3, r3, #7
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d001      	beq.n	800b256 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	e0e0      	b.n	800b418 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 0302 	and.w	r3, r3, #2
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d020      	beq.n	800b2a4 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0304 	and.w	r3, r3, #4
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d005      	beq.n	800b27a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b26e:	4b6d      	ldr	r3, [pc, #436]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	4a6c      	ldr	r2, [pc, #432]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b274:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b278:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 0308 	and.w	r3, r3, #8
 800b282:	2b00      	cmp	r3, #0
 800b284:	d005      	beq.n	800b292 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b286:	4b67      	ldr	r3, [pc, #412]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	4a66      	ldr	r2, [pc, #408]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b28c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b290:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b292:	4b64      	ldr	r3, [pc, #400]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	4961      	ldr	r1, [pc, #388]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d06a      	beq.n	800b386 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d107      	bne.n	800b2c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2b8:	4b5a      	ldr	r3, [pc, #360]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d115      	bne.n	800b2f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e0a7      	b.n	800b418 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d107      	bne.n	800b2e0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2d0:	4b54      	ldr	r3, [pc, #336]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d109      	bne.n	800b2f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e09b      	b.n	800b418 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2e0:	4b50      	ldr	r3, [pc, #320]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f003 0302 	and.w	r3, r3, #2
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d101      	bne.n	800b2f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e093      	b.n	800b418 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b2f0:	4b4c      	ldr	r3, [pc, #304]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	f023 0203 	bic.w	r2, r3, #3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	4949      	ldr	r1, [pc, #292]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b2fe:	4313      	orrs	r3, r2
 800b300:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b302:	f7fd fd3f 	bl	8008d84 <HAL_GetTick>
 800b306:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d112      	bne.n	800b336 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b310:	e00a      	b.n	800b328 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b312:	f7fd fd37 	bl	8008d84 <HAL_GetTick>
 800b316:	4602      	mov	r2, r0
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b320:	4293      	cmp	r3, r2
 800b322:	d901      	bls.n	800b328 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e077      	b.n	800b418 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b328:	4b3e      	ldr	r3, [pc, #248]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	f003 030c 	and.w	r3, r3, #12
 800b330:	2b04      	cmp	r3, #4
 800b332:	d1ee      	bne.n	800b312 <HAL_RCC_ClockConfig+0xfa>
 800b334:	e027      	b.n	800b386 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d11d      	bne.n	800b37a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b33e:	e00a      	b.n	800b356 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b340:	f7fd fd20 	bl	8008d84 <HAL_GetTick>
 800b344:	4602      	mov	r2, r0
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b34e:	4293      	cmp	r3, r2
 800b350:	d901      	bls.n	800b356 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800b352:	2303      	movs	r3, #3
 800b354:	e060      	b.n	800b418 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b356:	4b33      	ldr	r3, [pc, #204]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f003 030c 	and.w	r3, r3, #12
 800b35e:	2b08      	cmp	r3, #8
 800b360:	d1ee      	bne.n	800b340 <HAL_RCC_ClockConfig+0x128>
 800b362:	e010      	b.n	800b386 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b364:	f7fd fd0e 	bl	8008d84 <HAL_GetTick>
 800b368:	4602      	mov	r2, r0
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b372:	4293      	cmp	r3, r2
 800b374:	d901      	bls.n	800b37a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800b376:	2303      	movs	r3, #3
 800b378:	e04e      	b.n	800b418 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b37a:	4b2a      	ldr	r3, [pc, #168]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	f003 030c 	and.w	r3, r3, #12
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1ee      	bne.n	800b364 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800b386:	4b26      	ldr	r3, [pc, #152]	; (800b420 <HAL_RCC_ClockConfig+0x208>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0307 	and.w	r3, r3, #7
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	429a      	cmp	r2, r3
 800b392:	d210      	bcs.n	800b3b6 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b394:	4b22      	ldr	r3, [pc, #136]	; (800b420 <HAL_RCC_ClockConfig+0x208>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f023 0207 	bic.w	r2, r3, #7
 800b39c:	4920      	ldr	r1, [pc, #128]	; (800b420 <HAL_RCC_ClockConfig+0x208>)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b3a4:	4b1e      	ldr	r3, [pc, #120]	; (800b420 <HAL_RCC_ClockConfig+0x208>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 0307 	and.w	r3, r3, #7
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d001      	beq.n	800b3b6 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e030      	b.n	800b418 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 0304 	and.w	r3, r3, #4
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d008      	beq.n	800b3d4 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b3c2:	4b18      	ldr	r3, [pc, #96]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	4915      	ldr	r1, [pc, #84]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 0308 	and.w	r3, r3, #8
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d009      	beq.n	800b3f4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b3e0:	4b10      	ldr	r3, [pc, #64]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	00db      	lsls	r3, r3, #3
 800b3ee:	490d      	ldr	r1, [pc, #52]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b3f4:	f000 f81c 	bl	800b430 <HAL_RCC_GetSysClockFreq>
 800b3f8:	4601      	mov	r1, r0
 800b3fa:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <HAL_RCC_ClockConfig+0x20c>)
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	091b      	lsrs	r3, r3, #4
 800b400:	f003 030f 	and.w	r3, r3, #15
 800b404:	4a08      	ldr	r2, [pc, #32]	; (800b428 <HAL_RCC_ClockConfig+0x210>)
 800b406:	5cd3      	ldrb	r3, [r2, r3]
 800b408:	fa21 f303 	lsr.w	r3, r1, r3
 800b40c:	4a07      	ldr	r2, [pc, #28]	; (800b42c <HAL_RCC_ClockConfig+0x214>)
 800b40e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800b410:	2000      	movs	r0, #0
 800b412:	f7fd fc75 	bl	8008d00 <HAL_InitTick>
  
  return HAL_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	40022000 	.word	0x40022000
 800b424:	40021000 	.word	0x40021000
 800b428:	080126b8 	.word	0x080126b8
 800b42c:	20000000 	.word	0x20000000

0800b430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b430:	b490      	push	{r4, r7}
 800b432:	b08a      	sub	sp, #40	; 0x28
 800b434:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800b436:	4b2a      	ldr	r3, [pc, #168]	; (800b4e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800b438:	1d3c      	adds	r4, r7, #4
 800b43a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b43c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800b440:	4b28      	ldr	r3, [pc, #160]	; (800b4e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	61fb      	str	r3, [r7, #28]
 800b44a:	2300      	movs	r3, #0
 800b44c:	61bb      	str	r3, [r7, #24]
 800b44e:	2300      	movs	r3, #0
 800b450:	627b      	str	r3, [r7, #36]	; 0x24
 800b452:	2300      	movs	r3, #0
 800b454:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800b456:	2300      	movs	r3, #0
 800b458:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b45a:	4b23      	ldr	r3, [pc, #140]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	f003 030c 	and.w	r3, r3, #12
 800b466:	2b04      	cmp	r3, #4
 800b468:	d002      	beq.n	800b470 <HAL_RCC_GetSysClockFreq+0x40>
 800b46a:	2b08      	cmp	r3, #8
 800b46c:	d003      	beq.n	800b476 <HAL_RCC_GetSysClockFreq+0x46>
 800b46e:	e02d      	b.n	800b4cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b470:	4b1e      	ldr	r3, [pc, #120]	; (800b4ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800b472:	623b      	str	r3, [r7, #32]
      break;
 800b474:	e02d      	b.n	800b4d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	0c9b      	lsrs	r3, r3, #18
 800b47a:	f003 030f 	and.w	r3, r3, #15
 800b47e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b482:	4413      	add	r3, r2
 800b484:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800b488:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d013      	beq.n	800b4bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b494:	4b14      	ldr	r3, [pc, #80]	; (800b4e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	0c5b      	lsrs	r3, r3, #17
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b4a2:	4413      	add	r3, r2
 800b4a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b4a8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	4a0f      	ldr	r2, [pc, #60]	; (800b4ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800b4ae:	fb02 f203 	mul.w	r2, r2, r3
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ba:	e004      	b.n	800b4c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	4a0c      	ldr	r2, [pc, #48]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b4c0:	fb02 f303 	mul.w	r3, r2, r3
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	623b      	str	r3, [r7, #32]
      break;
 800b4ca:	e002      	b.n	800b4d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b4cc:	4b07      	ldr	r3, [pc, #28]	; (800b4ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800b4ce:	623b      	str	r3, [r7, #32]
      break;
 800b4d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3728      	adds	r7, #40	; 0x28
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bc90      	pop	{r4, r7}
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	080125fc 	.word	0x080125fc
 800b4e4:	0801260c 	.word	0x0801260c
 800b4e8:	40021000 	.word	0x40021000
 800b4ec:	007a1200 	.word	0x007a1200
 800b4f0:	003d0900 	.word	0x003d0900

0800b4f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4f8:	4b02      	ldr	r3, [pc, #8]	; (800b504 <HAL_RCC_GetHCLKFreq+0x10>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bc80      	pop	{r7}
 800b502:	4770      	bx	lr
 800b504:	20000000 	.word	0x20000000

0800b508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b50c:	f7ff fff2 	bl	800b4f4 <HAL_RCC_GetHCLKFreq>
 800b510:	4601      	mov	r1, r0
 800b512:	4b05      	ldr	r3, [pc, #20]	; (800b528 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	0a1b      	lsrs	r3, r3, #8
 800b518:	f003 0307 	and.w	r3, r3, #7
 800b51c:	4a03      	ldr	r2, [pc, #12]	; (800b52c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b51e:	5cd3      	ldrb	r3, [r2, r3]
 800b520:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800b524:	4618      	mov	r0, r3
 800b526:	bd80      	pop	{r7, pc}
 800b528:	40021000 	.word	0x40021000
 800b52c:	080126c8 	.word	0x080126c8

0800b530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b534:	f7ff ffde 	bl	800b4f4 <HAL_RCC_GetHCLKFreq>
 800b538:	4601      	mov	r1, r0
 800b53a:	4b05      	ldr	r3, [pc, #20]	; (800b550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	0adb      	lsrs	r3, r3, #11
 800b540:	f003 0307 	and.w	r3, r3, #7
 800b544:	4a03      	ldr	r2, [pc, #12]	; (800b554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b546:	5cd3      	ldrb	r3, [r2, r3]
 800b548:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800b54c:	4618      	mov	r0, r3
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	40021000 	.word	0x40021000
 800b554:	080126c8 	.word	0x080126c8

0800b558 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b560:	4b0a      	ldr	r3, [pc, #40]	; (800b58c <RCC_Delay+0x34>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a0a      	ldr	r2, [pc, #40]	; (800b590 <RCC_Delay+0x38>)
 800b566:	fba2 2303 	umull	r2, r3, r2, r3
 800b56a:	0a5b      	lsrs	r3, r3, #9
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	fb02 f303 	mul.w	r3, r2, r3
 800b572:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800b574:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	1e5a      	subs	r2, r3, #1
 800b57a:	60fa      	str	r2, [r7, #12]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1f9      	bne.n	800b574 <RCC_Delay+0x1c>
}
 800b580:	bf00      	nop
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	bc80      	pop	{r7}
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	20000000 	.word	0x20000000
 800b590:	10624dd3 	.word	0x10624dd3

0800b594 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	613b      	str	r3, [r7, #16]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 0301 	and.w	r3, r3, #1
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d07d      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5b4:	4b4f      	ldr	r3, [pc, #316]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b5b6:	69db      	ldr	r3, [r3, #28]
 800b5b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10d      	bne.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b5c0:	4b4c      	ldr	r3, [pc, #304]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b5c2:	69db      	ldr	r3, [r3, #28]
 800b5c4:	4a4b      	ldr	r2, [pc, #300]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b5c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5ca:	61d3      	str	r3, [r2, #28]
 800b5cc:	4b49      	ldr	r3, [pc, #292]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b5ce:	69db      	ldr	r3, [r3, #28]
 800b5d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5d4:	60bb      	str	r3, [r7, #8]
 800b5d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5dc:	4b46      	ldr	r3, [pc, #280]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d118      	bne.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b5e8:	4b43      	ldr	r3, [pc, #268]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a42      	ldr	r2, [pc, #264]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b5ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b5f4:	f7fd fbc6 	bl	8008d84 <HAL_GetTick>
 800b5f8:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5fa:	e008      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5fc:	f7fd fbc2 	bl	8008d84 <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	2b64      	cmp	r3, #100	; 0x64
 800b608:	d901      	bls.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	e06d      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b60e:	4b3a      	ldr	r3, [pc, #232]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b616:	2b00      	cmp	r3, #0
 800b618:	d0f0      	beq.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b61a:	4b36      	ldr	r3, [pc, #216]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b622:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d02e      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	429a      	cmp	r2, r3
 800b636:	d027      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b638:	4b2e      	ldr	r3, [pc, #184]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b640:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b642:	4b2e      	ldr	r3, [pc, #184]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b644:	2201      	movs	r2, #1
 800b646:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b648:	4b2c      	ldr	r3, [pc, #176]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b64e:	4a29      	ldr	r2, [pc, #164]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f003 0301 	and.w	r3, r3, #1
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d014      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b65e:	f7fd fb91 	bl	8008d84 <HAL_GetTick>
 800b662:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b664:	e00a      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b666:	f7fd fb8d 	bl	8008d84 <HAL_GetTick>
 800b66a:	4602      	mov	r2, r0
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	f241 3288 	movw	r2, #5000	; 0x1388
 800b674:	4293      	cmp	r3, r2
 800b676:	d901      	bls.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b678:	2303      	movs	r3, #3
 800b67a:	e036      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b67c:	4b1d      	ldr	r3, [pc, #116]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	f003 0302 	and.w	r3, r3, #2
 800b684:	2b00      	cmp	r3, #0
 800b686:	d0ee      	beq.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800b688:	4b1a      	ldr	r3, [pc, #104]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b68a:	6a1b      	ldr	r3, [r3, #32]
 800b68c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	4917      	ldr	r1, [pc, #92]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b696:	4313      	orrs	r3, r2
 800b698:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d105      	bne.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6a0:	4b14      	ldr	r3, [pc, #80]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6a2:	69db      	ldr	r3, [r3, #28]
 800b6a4:	4a13      	ldr	r2, [pc, #76]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 0302 	and.w	r3, r3, #2
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d008      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b6b8:	4b0e      	ldr	r3, [pc, #56]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	490b      	ldr	r1, [pc, #44]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f003 0310 	and.w	r3, r3, #16
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d008      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6d6:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	4904      	ldr	r1, [pc, #16]	; (800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3718      	adds	r7, #24
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	40021000 	.word	0x40021000
 800b6f8:	40007000 	.word	0x40007000
 800b6fc:	42420440 	.word	0x42420440

0800b700 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b700:	b590      	push	{r4, r7, lr}
 800b702:	b08d      	sub	sp, #52	; 0x34
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800b708:	4b6c      	ldr	r3, [pc, #432]	; (800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800b70a:	f107 040c 	add.w	r4, r7, #12
 800b70e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800b714:	4b6a      	ldr	r3, [pc, #424]	; (800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800b71a:	2300      	movs	r3, #0
 800b71c:	627b      	str	r3, [r7, #36]	; 0x24
 800b71e:	2300      	movs	r3, #0
 800b720:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b722:	2300      	movs	r3, #0
 800b724:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800b726:	2300      	movs	r3, #0
 800b728:	61fb      	str	r3, [r7, #28]
 800b72a:	2300      	movs	r3, #0
 800b72c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	3b01      	subs	r3, #1
 800b732:	2b0f      	cmp	r3, #15
 800b734:	f200 80b9 	bhi.w	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800b738:	a201      	add	r2, pc, #4	; (adr r2, 800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800b73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73e:	bf00      	nop
 800b740:	0800b823 	.word	0x0800b823
 800b744:	0800b88f 	.word	0x0800b88f
 800b748:	0800b8ab 	.word	0x0800b8ab
 800b74c:	0800b813 	.word	0x0800b813
 800b750:	0800b8ab 	.word	0x0800b8ab
 800b754:	0800b8ab 	.word	0x0800b8ab
 800b758:	0800b8ab 	.word	0x0800b8ab
 800b75c:	0800b81b 	.word	0x0800b81b
 800b760:	0800b8ab 	.word	0x0800b8ab
 800b764:	0800b8ab 	.word	0x0800b8ab
 800b768:	0800b8ab 	.word	0x0800b8ab
 800b76c:	0800b8ab 	.word	0x0800b8ab
 800b770:	0800b8ab 	.word	0x0800b8ab
 800b774:	0800b8ab 	.word	0x0800b8ab
 800b778:	0800b8ab 	.word	0x0800b8ab
 800b77c:	0800b781 	.word	0x0800b781
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800b780:	4b50      	ldr	r3, [pc, #320]	; (800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800b786:	4b4f      	ldr	r3, [pc, #316]	; (800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f000 808d 	beq.w	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	0c9b      	lsrs	r3, r3, #18
 800b798:	f003 030f 	and.w	r3, r3, #15
 800b79c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800b7a6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d018      	beq.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b7b2:	4b44      	ldr	r3, [pc, #272]	; (800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	0c5b      	lsrs	r3, r3, #17
 800b7b8:	f003 0301 	and.w	r3, r3, #1
 800b7bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b7c6:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00d      	beq.n	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800b7d2:	4a3d      	ldr	r2, [pc, #244]	; (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	fbb2 f2f3 	udiv	r2, r2, r3
 800b7da:	6a3b      	ldr	r3, [r7, #32]
 800b7dc:	fb02 f303 	mul.w	r3, r2, r3
 800b7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7e2:	e004      	b.n	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	4a39      	ldr	r2, [pc, #228]	; (800b8cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 800b7e8:	fb02 f303 	mul.w	r3, r2, r3
 800b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800b7ee:	4b35      	ldr	r3, [pc, #212]	; (800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7fa:	d102      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800b7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fe:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800b800:	e055      	b.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          frequency = (pllclk * 2) / 3;
 800b802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b804:	005b      	lsls	r3, r3, #1
 800b806:	4a32      	ldr	r2, [pc, #200]	; (800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>)
 800b808:	fba2 2303 	umull	r2, r3, r2, r3
 800b80c:	085b      	lsrs	r3, r3, #1
 800b80e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800b810:	e04d      	b.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800b812:	f7ff fe0d 	bl	800b430 <HAL_RCC_GetSysClockFreq>
 800b816:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800b818:	e04a      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800b81a:	f7ff fe09 	bl	800b430 <HAL_RCC_GetSysClockFreq>
 800b81e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800b820:	e046      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800b822:	4b28      	ldr	r3, [pc, #160]	; (800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b832:	d108      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 800b83e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b842:	62bb      	str	r3, [r7, #40]	; 0x28
 800b844:	e022      	b.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b84c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b850:	d109      	bne.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800b852:	4b1c      	ldr	r3, [pc, #112]	; (800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800b854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b856:	f003 0302 	and.w	r3, r3, #2
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d003      	beq.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 800b85e:	f649 4340 	movw	r3, #40000	; 0x9c40
 800b862:	62bb      	str	r3, [r7, #40]	; 0x28
 800b864:	e012      	b.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b86c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b870:	d109      	bne.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800b872:	4b14      	ldr	r3, [pc, #80]	; (800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d003      	beq.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        frequency = HSE_VALUE / 128U;
 800b87e:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b882:	62bb      	str	r3, [r7, #40]	; 0x28
 800b884:	e002      	b.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 800b886:	2300      	movs	r3, #0
 800b888:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800b88a:	e011      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800b88c:	e010      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800b88e:	f7ff fe4f 	bl	800b530 <HAL_RCC_GetPCLK2Freq>
 800b892:	4602      	mov	r2, r0
 800b894:	4b0b      	ldr	r3, [pc, #44]	; (800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	0b9b      	lsrs	r3, r3, #14
 800b89a:	f003 0303 	and.w	r3, r3, #3
 800b89e:	3301      	adds	r3, #1
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800b8a8:	e002      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  default: 
    {
      break;
 800b8aa:	bf00      	nop
 800b8ac:	e000      	b.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      break;
 800b8ae:	bf00      	nop
    }
  }
  return(frequency);
 800b8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3734      	adds	r7, #52	; 0x34
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd90      	pop	{r4, r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	08012610 	.word	0x08012610
 800b8c0:	08012620 	.word	0x08012620
 800b8c4:	40021000 	.word	0x40021000
 800b8c8:	007a1200 	.word	0x007a1200
 800b8cc:	003d0900 	.word	0x003d0900
 800b8d0:	aaaaaaab 	.word	0xaaaaaaab

0800b8d4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e084      	b.n	800b9f4 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	7c5b      	ldrb	r3, [r3, #17]
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d105      	bne.n	800b900 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7fb fe52 	bl	80075a4 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2202      	movs	r2, #2
 800b904:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f87a 	bl	800ba00 <HAL_RTC_WaitForSynchro>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d004      	beq.n	800b91c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2204      	movs	r2, #4
 800b916:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	e06b      	b.n	800b9f4 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 f89c 	bl	800ba5a <RTC_EnterInitMode>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d004      	beq.n	800b932 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2204      	movs	r2, #4
 800b92c:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e060      	b.n	800b9f4 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f022 0207 	bic.w	r2, r2, #7
 800b940:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d005      	beq.n	800b956 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800b94a:	4b2c      	ldr	r3, [pc, #176]	; (800b9fc <HAL_RTC_Init+0x128>)
 800b94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b94e:	4a2b      	ldr	r2, [pc, #172]	; (800b9fc <HAL_RTC_Init+0x128>)
 800b950:	f023 0301 	bic.w	r3, r3, #1
 800b954:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800b956:	4b29      	ldr	r3, [pc, #164]	; (800b9fc <HAL_RTC_Init+0x128>)
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	4926      	ldr	r1, [pc, #152]	; (800b9fc <HAL_RTC_Init+0x128>)
 800b964:	4313      	orrs	r3, r2
 800b966:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b970:	d003      	beq.n	800b97a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	60fb      	str	r3, [r7, #12]
 800b978:	e00e      	b.n	800b998 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800b97a:	2001      	movs	r0, #1
 800b97c:	f7ff fec0 	bl	800b700 <HAL_RCCEx_GetPeriphCLKFreq>
 800b980:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d104      	bne.n	800b992 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2204      	movs	r2, #4
 800b98c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e030      	b.n	800b9f4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	3b01      	subs	r3, #1
 800b996:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	f023 010f 	bic.w	r1, r3, #15
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	0c1a      	lsrs	r2, r3, #16
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	430a      	orrs	r2, r1
 800b9ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	0c1b      	lsrs	r3, r3, #16
 800b9b6:	041b      	lsls	r3, r3, #16
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	b291      	uxth	r1, r2
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	6812      	ldr	r2, [r2, #0]
 800b9c0:	430b      	orrs	r3, r1
 800b9c2:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f870 	bl	800baaa <RTC_ExitInitMode>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d004      	beq.n	800b9da <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2204      	movs	r2, #4
 800b9d4:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e00c      	b.n	800b9f4 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 800b9f2:	2300      	movs	r3, #0
  }
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	40006c00 	.word	0x40006c00

0800ba00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d101      	bne.n	800ba16 <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e01d      	b.n	800ba52 <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f022 0208 	bic.w	r2, r2, #8
 800ba24:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 800ba26:	f7fd f9ad 	bl	8008d84 <HAL_GetTick>
 800ba2a:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800ba2c:	e009      	b.n	800ba42 <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800ba2e:	f7fd f9a9 	bl	8008d84 <HAL_GetTick>
 800ba32:	4602      	mov	r2, r0
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba3c:	d901      	bls.n	800ba42 <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	e007      	b.n	800ba52 <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	f003 0308 	and.w	r3, r3, #8
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d0ee      	beq.n	800ba2e <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 800ba66:	f7fd f98d 	bl	8008d84 <HAL_GetTick>
 800ba6a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800ba6c:	e009      	b.n	800ba82 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800ba6e:	f7fd f989 	bl	8008d84 <HAL_GetTick>
 800ba72:	4602      	mov	r2, r0
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba7c:	d901      	bls.n	800ba82 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	e00f      	b.n	800baa2 <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	f003 0320 	and.w	r3, r3, #32
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d0ee      	beq.n	800ba6e <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f042 0210 	orr.w	r2, r2, #16
 800ba9e:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bab2:	2300      	movs	r3, #0
 800bab4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f022 0210 	bic.w	r2, r2, #16
 800bac4:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 800bac6:	f7fd f95d 	bl	8008d84 <HAL_GetTick>
 800baca:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800bacc:	e009      	b.n	800bae2 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800bace:	f7fd f959 	bl	8008d84 <HAL_GetTick>
 800bad2:	4602      	mov	r2, r0
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800badc:	d901      	bls.n	800bae2 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 800bade:	2303      	movs	r3, #3
 800bae0:	e007      	b.n	800baf2 <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	f003 0320 	and.w	r3, r3, #32
 800baec:	2b00      	cmp	r3, #0
 800baee:	d0ee      	beq.n	800bace <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b087      	sub	sp, #28
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 800bb0c:	4b07      	ldr	r3, [pc, #28]	; (800bb2c <HAL_RTCEx_BKUPWrite+0x30>)
 800bb0e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	4413      	add	r3, r2
 800bb18:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	b292      	uxth	r2, r2
 800bb20:	601a      	str	r2, [r3, #0]
}
 800bb22:	bf00      	nop
 800bb24:	371c      	adds	r7, #28
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bc80      	pop	{r7}
 800bb2a:	4770      	bx	lr
 800bb2c:	40006c00 	.word	0x40006c00

0800bb30 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 800bb42:	4b08      	ldr	r3, [pc, #32]	; (800bb64 <HAL_RTCEx_BKUPRead+0x34>)
 800bb44:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 800bb58:	68bb      	ldr	r3, [r7, #8]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bc80      	pop	{r7}
 800bb62:	4770      	bx	lr
 800bb64:	40006c00 	.word	0x40006c00

0800bb68 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d101      	bne.n	800bb7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e03f      	b.n	800bbfa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d106      	bne.n	800bb94 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7fb fe9c 	bl	80078cc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2224      	movs	r2, #36	; 0x24
 800bb98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	68da      	ldr	r2, [r3, #12]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bbaa:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 fc7d 	bl	800c4ac <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	691a      	ldr	r2, [r3, #16]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	695a      	ldr	r2, [r3, #20]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbd0:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68da      	ldr	r2, [r3, #12]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbe0:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2220      	movs	r2, #32
 800bbec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2220      	movs	r2, #32
 800bbf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <HAL_UART_DeInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b082      	sub	sp, #8
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d101      	bne.n	800bc14 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	e016      	b.n	800bc42 <HAL_UART_DeInit+0x40>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2224      	movs	r2, #36	; 0x24
 800bc18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7fb fed3 	bl	80079c8 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b088      	sub	sp, #32
 800bc4e:	af02      	add	r7, sp, #8
 800bc50:	60f8      	str	r0, [r7, #12]
 800bc52:	60b9      	str	r1, [r7, #8]
 800bc54:	603b      	str	r3, [r7, #0]
 800bc56:	4613      	mov	r3, r2
 800bc58:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b20      	cmp	r3, #32
 800bc68:	f040 8083 	bne.w	800bd72 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d002      	beq.n	800bc78 <HAL_UART_Transmit+0x2e>
 800bc72:	88fb      	ldrh	r3, [r7, #6]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d101      	bne.n	800bc7c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e07b      	b.n	800bd74 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d101      	bne.n	800bc8a <HAL_UART_Transmit+0x40>
 800bc86:	2302      	movs	r3, #2
 800bc88:	e074      	b.n	800bd74 <HAL_UART_Transmit+0x12a>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2221      	movs	r2, #33	; 0x21
 800bc9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800bca0:	f7fd f870 	bl	8008d84 <HAL_GetTick>
 800bca4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	88fa      	ldrh	r2, [r7, #6]
 800bcaa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	88fa      	ldrh	r2, [r7, #6]
 800bcb0:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800bcb2:	e042      	b.n	800bd3a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcca:	d122      	bne.n	800bd12 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2180      	movs	r1, #128	; 0x80
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 fa6a 	bl	800c1b0 <UART_WaitOnFlagUntilTimeout>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800bce2:	2303      	movs	r3, #3
 800bce4:	e046      	b.n	800bd74 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcf8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	691b      	ldr	r3, [r3, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d103      	bne.n	800bd0a <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	3302      	adds	r3, #2
 800bd06:	60bb      	str	r3, [r7, #8]
 800bd08:	e017      	b.n	800bd3a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	60bb      	str	r3, [r7, #8]
 800bd10:	e013      	b.n	800bd3a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	2180      	movs	r1, #128	; 0x80
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f000 fa47 	bl	800c1b0 <UART_WaitOnFlagUntilTimeout>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	e023      	b.n	800bd74 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	60ba      	str	r2, [r7, #8]
 800bd32:	781a      	ldrb	r2, [r3, #0]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1b7      	bne.n	800bcb4 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	2140      	movs	r1, #64	; 0x40
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f000 fa2e 	bl	800c1b0 <UART_WaitOnFlagUntilTimeout>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d001      	beq.n	800bd5e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	e00a      	b.n	800bd74 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2220      	movs	r2, #32
 800bd62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	e000      	b.n	800bd74 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800bd72:	2302      	movs	r3, #2
  }
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3718      	adds	r7, #24
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	4613      	mov	r3, r2
 800bd88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	2b20      	cmp	r3, #32
 800bd94:	d166      	bne.n	800be64 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL) || (Size == 0U))
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <HAL_UART_Receive_DMA+0x26>
 800bd9c:	88fb      	ldrh	r3, [r7, #6]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d101      	bne.n	800bda6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e05f      	b.n	800be66 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d101      	bne.n	800bdb4 <HAL_UART_Receive_DMA+0x38>
 800bdb0:	2302      	movs	r3, #2
 800bdb2:	e058      	b.n	800be66 <HAL_UART_Receive_DMA+0xea>
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	88fa      	ldrh	r2, [r7, #6]
 800bdc6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2222      	movs	r2, #34	; 0x22
 800bdd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdda:	4a25      	ldr	r2, [pc, #148]	; (800be70 <HAL_UART_Receive_DMA+0xf4>)
 800bddc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde2:	4a24      	ldr	r2, [pc, #144]	; (800be74 <HAL_UART_Receive_DMA+0xf8>)
 800bde4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdea:	4a23      	ldr	r2, [pc, #140]	; (800be78 <HAL_UART_Receive_DMA+0xfc>)
 800bdec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 800bdf6:	f107 0308 	add.w	r3, r7, #8
 800bdfa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3304      	adds	r3, #4
 800be06:	4619      	mov	r1, r3
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	88fb      	ldrh	r3, [r7, #6]
 800be0e:	f7fd fa05 	bl	800921c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800be12:	2300      	movs	r3, #0
 800be14:	613b      	str	r3, [r7, #16]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	613b      	str	r3, [r7, #16]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	613b      	str	r3, [r7, #16]
 800be26:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68da      	ldr	r2, [r3, #12]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be3e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	695a      	ldr	r2, [r3, #20]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f042 0201 	orr.w	r2, r2, #1
 800be4e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	695a      	ldr	r2, [r3, #20]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be5e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800be60:	2300      	movs	r3, #0
 800be62:	e000      	b.n	800be66 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800be64:	2302      	movs	r3, #2
  }
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	0800c099 	.word	0x0800c099
 800be74:	0800c101 	.word	0x0800c101
 800be78:	0800c11d 	.word	0x0800c11d

0800be7c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b088      	sub	sp, #32
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	695b      	ldr	r3, [r3, #20]
 800be9a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800be9c:	2300      	movs	r3, #0
 800be9e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	f003 030f 	and.w	r3, r3, #15
 800beaa:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10d      	bne.n	800bece <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	f003 0320 	and.w	r3, r3, #32
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d008      	beq.n	800bece <HAL_UART_IRQHandler+0x52>
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	f003 0320 	and.w	r3, r3, #32
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fa6f 	bl	800c3aa <UART_Receive_IT>
      return;
 800becc:	e0cc      	b.n	800c068 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 80ab 	beq.w	800c02c <HAL_UART_IRQHandler+0x1b0>
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <HAL_UART_IRQHandler+0x70>
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f000 80a0 	beq.w	800c02c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	f003 0301 	and.w	r3, r3, #1
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00a      	beq.n	800bf0c <HAL_UART_IRQHandler+0x90>
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800befc:	2b00      	cmp	r3, #0
 800befe:	d005      	beq.n	800bf0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf04:	f043 0201 	orr.w	r2, r3, #1
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	f003 0304 	and.w	r3, r3, #4
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00a      	beq.n	800bf2c <HAL_UART_IRQHandler+0xb0>
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d005      	beq.n	800bf2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf24:	f043 0202 	orr.w	r2, r3, #2
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	f003 0302 	and.w	r3, r3, #2
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00a      	beq.n	800bf4c <HAL_UART_IRQHandler+0xd0>
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d005      	beq.n	800bf4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf44:	f043 0204 	orr.w	r2, r3, #4
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	f003 0308 	and.w	r3, r3, #8
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00a      	beq.n	800bf6c <HAL_UART_IRQHandler+0xf0>
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d005      	beq.n	800bf6c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf64:	f043 0208 	orr.w	r2, r3, #8
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d078      	beq.n	800c066 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	f003 0320 	and.w	r3, r3, #32
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d007      	beq.n	800bf8e <HAL_UART_IRQHandler+0x112>
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	f003 0320 	and.w	r3, r3, #32
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 fa0e 	bl	800c3aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	bf14      	ite	ne
 800bf9c:	2301      	movne	r3, #1
 800bf9e:	2300      	moveq	r3, #0
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfa8:	f003 0308 	and.w	r3, r3, #8
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d102      	bne.n	800bfb6 <HAL_UART_IRQHandler+0x13a>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d031      	beq.n	800c01a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f959 	bl	800c26e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	695b      	ldr	r3, [r3, #20]
 800bfc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d023      	beq.n	800c012 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	695a      	ldr	r2, [r3, #20]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfd8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d013      	beq.n	800c00a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe6:	4a22      	ldr	r2, [pc, #136]	; (800c070 <HAL_UART_IRQHandler+0x1f4>)
 800bfe8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fd f974 	bl	80092dc <HAL_DMA_Abort_IT>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d016      	beq.n	800c028 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c004:	4610      	mov	r0, r2
 800c006:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c008:	e00e      	b.n	800c028 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7fb fc4c 	bl	80078a8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c010:	e00a      	b.n	800c028 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7fb fc48 	bl	80078a8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c018:	e006      	b.n	800c028 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7fb fc44 	bl	80078a8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800c026:	e01e      	b.n	800c066 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c028:	bf00      	nop
    return;
 800c02a:	e01c      	b.n	800c066 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c032:	2b00      	cmp	r3, #0
 800c034:	d008      	beq.n	800c048 <HAL_UART_IRQHandler+0x1cc>
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d003      	beq.n	800c048 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f945 	bl	800c2d0 <UART_Transmit_IT>
    return;
 800c046:	e00f      	b.n	800c068 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00a      	beq.n	800c068 <HAL_UART_IRQHandler+0x1ec>
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d005      	beq.n	800c068 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f98c 	bl	800c37a <UART_EndTransmit_IT>
    return;
 800c062:	bf00      	nop
 800c064:	e000      	b.n	800c068 <HAL_UART_IRQHandler+0x1ec>
    return;
 800c066:	bf00      	nop
  }
}
 800c068:	3720      	adds	r7, #32
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	0800c2a9 	.word	0x0800c2a9

0800c074 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800c07c:	bf00      	nop
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	bc80      	pop	{r7}
 800c084:	4770      	bx	lr

0800c086 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c086:	b480      	push	{r7}
 800c088:	b083      	sub	sp, #12
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c08e:	bf00      	nop
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	bc80      	pop	{r7}
 800c096:	4770      	bx	lr

0800c098 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 0320 	and.w	r3, r3, #32
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d11e      	bne.n	800c0f2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68da      	ldr	r2, [r3, #12]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0c8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	695a      	ldr	r2, [r3, #20]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f022 0201 	bic.w	r2, r2, #1
 800c0d8:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	695a      	ldr	r2, [r3, #20]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0e8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f7fb fbe1 	bl	80078ba <HAL_UART_RxCpltCallback>
}
 800c0f8:	bf00      	nop
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10c:	60fb      	str	r3, [r7, #12]
  HAL_UART_RxHalfCpltCallback(huart); 
 800c10e:	68f8      	ldr	r0, [r7, #12]
 800c110:	f7ff ffb9 	bl	800c086 <HAL_UART_RxHalfCpltCallback>
}
 800c114:	bf00      	nop
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c124:	2300      	movs	r3, #0
 800c126:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c138:	2b00      	cmp	r3, #0
 800c13a:	bf14      	ite	ne
 800c13c:	2301      	movne	r3, #1
 800c13e:	2300      	moveq	r3, #0
 800c140:	b2db      	uxtb	r3, r3
 800c142:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b21      	cmp	r3, #33	; 0x21
 800c14e:	d108      	bne.n	800c162 <UART_DMAError+0x46>
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d005      	beq.n	800c162 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2200      	movs	r2, #0
 800c15a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c15c:	68b8      	ldr	r0, [r7, #8]
 800c15e:	f000 f871 	bl	800c244 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	695b      	ldr	r3, [r3, #20]
 800c168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	bf14      	ite	ne
 800c170:	2301      	movne	r3, #1
 800c172:	2300      	moveq	r3, #0
 800c174:	b2db      	uxtb	r3, r3
 800c176:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b22      	cmp	r3, #34	; 0x22
 800c182:	d108      	bne.n	800c196 <UART_DMAError+0x7a>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d005      	beq.n	800c196 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2200      	movs	r2, #0
 800c18e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c190:	68b8      	ldr	r0, [r7, #8]
 800c192:	f000 f86c 	bl	800c26e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c19a:	f043 0210 	orr.w	r2, r3, #16
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800c1a2:	68b8      	ldr	r0, [r7, #8]
 800c1a4:	f7fb fb80 	bl	80078a8 <HAL_UART_ErrorCallback>
}
 800c1a8:	bf00      	nop
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	603b      	str	r3, [r7, #0]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800c1c0:	e02c      	b.n	800c21c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c8:	d028      	beq.n	800c21c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d007      	beq.n	800c1e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1d0:	f7fc fdd8 	bl	8008d84 <HAL_GetTick>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	69ba      	ldr	r2, [r7, #24]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d21d      	bcs.n	800c21c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68da      	ldr	r2, [r3, #12]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c1ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	695a      	ldr	r2, [r3, #20]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f022 0201 	bic.w	r2, r2, #1
 800c1fe:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2220      	movs	r2, #32
 800c204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2220      	movs	r2, #32
 800c20c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2200      	movs	r2, #0
 800c214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800c218:	2303      	movs	r3, #3
 800c21a:	e00f      	b.n	800c23c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	4013      	ands	r3, r2
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	429a      	cmp	r2, r3
 800c22a:	bf0c      	ite	eq
 800c22c:	2301      	moveq	r3, #1
 800c22e:	2300      	movne	r3, #0
 800c230:	b2db      	uxtb	r3, r3
 800c232:	461a      	mov	r2, r3
 800c234:	79fb      	ldrb	r3, [r7, #7]
 800c236:	429a      	cmp	r2, r3
 800c238:	d0c3      	beq.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68da      	ldr	r2, [r3, #12]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c25a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2220      	movs	r2, #32
 800c260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	bc80      	pop	{r7}
 800c26c:	4770      	bx	lr

0800c26e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c26e:	b480      	push	{r7}
 800c270:	b083      	sub	sp, #12
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68da      	ldr	r2, [r3, #12]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c284:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	695a      	ldr	r2, [r3, #20]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f022 0201 	bic.w	r2, r2, #1
 800c294:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2220      	movs	r2, #32
 800c29a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c29e:	bf00      	nop
 800c2a0:	370c      	adds	r7, #12
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bc80      	pop	{r7}
 800c2a6:	4770      	bx	lr

0800c2a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7fb faf0 	bl	80078a8 <HAL_UART_ErrorCallback>
}
 800c2c8:	bf00      	nop
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	2b21      	cmp	r3, #33	; 0x21
 800c2e2:	d144      	bne.n	800c36e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2ec:	d11a      	bne.n	800c324 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a1b      	ldr	r3, [r3, #32]
 800c2f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c302:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	691b      	ldr	r3, [r3, #16]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d105      	bne.n	800c318 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a1b      	ldr	r3, [r3, #32]
 800c310:	1c9a      	adds	r2, r3, #2
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	621a      	str	r2, [r3, #32]
 800c316:	e00e      	b.n	800c336 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a1b      	ldr	r3, [r3, #32]
 800c31c:	1c5a      	adds	r2, r3, #1
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	621a      	str	r2, [r3, #32]
 800c322:	e008      	b.n	800c336 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a1b      	ldr	r3, [r3, #32]
 800c328:	1c59      	adds	r1, r3, #1
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	6211      	str	r1, [r2, #32]
 800c32e:	781a      	ldrb	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	3b01      	subs	r3, #1
 800c33e:	b29b      	uxth	r3, r3
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	4619      	mov	r1, r3
 800c344:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10f      	bne.n	800c36a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	68da      	ldr	r2, [r3, #12]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c358:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68da      	ldr	r2, [r3, #12]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c368:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	e000      	b.n	800c370 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c36e:	2302      	movs	r3, #2
  }
}
 800c370:	4618      	mov	r0, r3
 800c372:	3714      	adds	r7, #20
 800c374:	46bd      	mov	sp, r7
 800c376:	bc80      	pop	{r7}
 800c378:	4770      	bx	lr

0800c37a <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b082      	sub	sp, #8
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68da      	ldr	r2, [r3, #12]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c390:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2220      	movs	r2, #32
 800c396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff fe6a 	bl	800c074 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3708      	adds	r7, #8
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b22      	cmp	r3, #34	; 0x22
 800c3bc:	d171      	bne.n	800c4a2 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3c6:	d123      	bne.n	800c410 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3cc:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10e      	bne.n	800c3f4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ec:	1c9a      	adds	r2, r3, #2
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	629a      	str	r2, [r3, #40]	; 0x28
 800c3f2:	e029      	b.n	800c448 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c408:	1c5a      	adds	r2, r3, #1
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	629a      	str	r2, [r3, #40]	; 0x28
 800c40e:	e01b      	b.n	800c448 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10a      	bne.n	800c42e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	6858      	ldr	r0, [r3, #4]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c422:	1c59      	adds	r1, r3, #1
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	6291      	str	r1, [r2, #40]	; 0x28
 800c428:	b2c2      	uxtb	r2, r0
 800c42a:	701a      	strb	r2, [r3, #0]
 800c42c:	e00c      	b.n	800c448 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	b2da      	uxtb	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c43a:	1c58      	adds	r0, r3, #1
 800c43c:	6879      	ldr	r1, [r7, #4]
 800c43e:	6288      	str	r0, [r1, #40]	; 0x28
 800c440:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c444:	b2d2      	uxtb	r2, r2
 800c446:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	3b01      	subs	r3, #1
 800c450:	b29b      	uxth	r3, r3
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	4619      	mov	r1, r3
 800c456:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d120      	bne.n	800c49e <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68da      	ldr	r2, [r3, #12]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f022 0220 	bic.w	r2, r2, #32
 800c46a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68da      	ldr	r2, [r3, #12]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c47a:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	695a      	ldr	r2, [r3, #20]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f022 0201 	bic.w	r2, r2, #1
 800c48a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2220      	movs	r2, #32
 800c490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7fb fa10 	bl	80078ba <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	e002      	b.n	800c4a4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	e000      	b.n	800c4a4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c4a2:	2302      	movs	r3, #2
  }
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c4ac:	b5b0      	push	{r4, r5, r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	68da      	ldr	r2, [r3, #12]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	430a      	orrs	r2, r1
 800c4cc:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	689a      	ldr	r2, [r3, #8]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	431a      	orrs	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	695b      	ldr	r3, [r3, #20]
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c4ee:	f023 030c 	bic.w	r3, r3, #12
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	6812      	ldr	r2, [r2, #0]
 800c4f6:	68f9      	ldr	r1, [r7, #12]
 800c4f8:	430b      	orrs	r3, r1
 800c4fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	695b      	ldr	r3, [r3, #20]
 800c502:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	699a      	ldr	r2, [r3, #24]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	430a      	orrs	r2, r1
 800c510:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a6f      	ldr	r2, [pc, #444]	; (800c6d4 <UART_SetConfig+0x228>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d16b      	bne.n	800c5f4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800c51c:	f7ff f808 	bl	800b530 <HAL_RCC_GetPCLK2Freq>
 800c520:	4602      	mov	r2, r0
 800c522:	4613      	mov	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4413      	add	r3, r2
 800c528:	009a      	lsls	r2, r3, #2
 800c52a:	441a      	add	r2, r3
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	fbb2 f3f3 	udiv	r3, r2, r3
 800c536:	4a68      	ldr	r2, [pc, #416]	; (800c6d8 <UART_SetConfig+0x22c>)
 800c538:	fba2 2303 	umull	r2, r3, r2, r3
 800c53c:	095b      	lsrs	r3, r3, #5
 800c53e:	011c      	lsls	r4, r3, #4
 800c540:	f7fe fff6 	bl	800b530 <HAL_RCC_GetPCLK2Freq>
 800c544:	4602      	mov	r2, r0
 800c546:	4613      	mov	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	4413      	add	r3, r2
 800c54c:	009a      	lsls	r2, r3, #2
 800c54e:	441a      	add	r2, r3
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	fbb2 f5f3 	udiv	r5, r2, r3
 800c55a:	f7fe ffe9 	bl	800b530 <HAL_RCC_GetPCLK2Freq>
 800c55e:	4602      	mov	r2, r0
 800c560:	4613      	mov	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	009a      	lsls	r2, r3, #2
 800c568:	441a      	add	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	fbb2 f3f3 	udiv	r3, r2, r3
 800c574:	4a58      	ldr	r2, [pc, #352]	; (800c6d8 <UART_SetConfig+0x22c>)
 800c576:	fba2 2303 	umull	r2, r3, r2, r3
 800c57a:	095b      	lsrs	r3, r3, #5
 800c57c:	2264      	movs	r2, #100	; 0x64
 800c57e:	fb02 f303 	mul.w	r3, r2, r3
 800c582:	1aeb      	subs	r3, r5, r3
 800c584:	011b      	lsls	r3, r3, #4
 800c586:	3332      	adds	r3, #50	; 0x32
 800c588:	4a53      	ldr	r2, [pc, #332]	; (800c6d8 <UART_SetConfig+0x22c>)
 800c58a:	fba2 2303 	umull	r2, r3, r2, r3
 800c58e:	095b      	lsrs	r3, r3, #5
 800c590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c594:	441c      	add	r4, r3
 800c596:	f7fe ffcb 	bl	800b530 <HAL_RCC_GetPCLK2Freq>
 800c59a:	4602      	mov	r2, r0
 800c59c:	4613      	mov	r3, r2
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	4413      	add	r3, r2
 800c5a2:	009a      	lsls	r2, r3, #2
 800c5a4:	441a      	add	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	009b      	lsls	r3, r3, #2
 800c5ac:	fbb2 f5f3 	udiv	r5, r2, r3
 800c5b0:	f7fe ffbe 	bl	800b530 <HAL_RCC_GetPCLK2Freq>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	009a      	lsls	r2, r3, #2
 800c5be:	441a      	add	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5ca:	4a43      	ldr	r2, [pc, #268]	; (800c6d8 <UART_SetConfig+0x22c>)
 800c5cc:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d0:	095b      	lsrs	r3, r3, #5
 800c5d2:	2264      	movs	r2, #100	; 0x64
 800c5d4:	fb02 f303 	mul.w	r3, r2, r3
 800c5d8:	1aeb      	subs	r3, r5, r3
 800c5da:	011b      	lsls	r3, r3, #4
 800c5dc:	3332      	adds	r3, #50	; 0x32
 800c5de:	4a3e      	ldr	r2, [pc, #248]	; (800c6d8 <UART_SetConfig+0x22c>)
 800c5e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e4:	095b      	lsrs	r3, r3, #5
 800c5e6:	f003 020f 	and.w	r2, r3, #15
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4422      	add	r2, r4
 800c5f0:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800c5f2:	e06a      	b.n	800c6ca <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800c5f4:	f7fe ff88 	bl	800b508 <HAL_RCC_GetPCLK1Freq>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	4413      	add	r3, r2
 800c600:	009a      	lsls	r2, r3, #2
 800c602:	441a      	add	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c60e:	4a32      	ldr	r2, [pc, #200]	; (800c6d8 <UART_SetConfig+0x22c>)
 800c610:	fba2 2303 	umull	r2, r3, r2, r3
 800c614:	095b      	lsrs	r3, r3, #5
 800c616:	011c      	lsls	r4, r3, #4
 800c618:	f7fe ff76 	bl	800b508 <HAL_RCC_GetPCLK1Freq>
 800c61c:	4602      	mov	r2, r0
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	009a      	lsls	r2, r3, #2
 800c626:	441a      	add	r2, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	fbb2 f5f3 	udiv	r5, r2, r3
 800c632:	f7fe ff69 	bl	800b508 <HAL_RCC_GetPCLK1Freq>
 800c636:	4602      	mov	r2, r0
 800c638:	4613      	mov	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	009a      	lsls	r2, r3, #2
 800c640:	441a      	add	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	fbb2 f3f3 	udiv	r3, r2, r3
 800c64c:	4a22      	ldr	r2, [pc, #136]	; (800c6d8 <UART_SetConfig+0x22c>)
 800c64e:	fba2 2303 	umull	r2, r3, r2, r3
 800c652:	095b      	lsrs	r3, r3, #5
 800c654:	2264      	movs	r2, #100	; 0x64
 800c656:	fb02 f303 	mul.w	r3, r2, r3
 800c65a:	1aeb      	subs	r3, r5, r3
 800c65c:	011b      	lsls	r3, r3, #4
 800c65e:	3332      	adds	r3, #50	; 0x32
 800c660:	4a1d      	ldr	r2, [pc, #116]	; (800c6d8 <UART_SetConfig+0x22c>)
 800c662:	fba2 2303 	umull	r2, r3, r2, r3
 800c666:	095b      	lsrs	r3, r3, #5
 800c668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c66c:	441c      	add	r4, r3
 800c66e:	f7fe ff4b 	bl	800b508 <HAL_RCC_GetPCLK1Freq>
 800c672:	4602      	mov	r2, r0
 800c674:	4613      	mov	r3, r2
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	4413      	add	r3, r2
 800c67a:	009a      	lsls	r2, r3, #2
 800c67c:	441a      	add	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	fbb2 f5f3 	udiv	r5, r2, r3
 800c688:	f7fe ff3e 	bl	800b508 <HAL_RCC_GetPCLK1Freq>
 800c68c:	4602      	mov	r2, r0
 800c68e:	4613      	mov	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	009a      	lsls	r2, r3, #2
 800c696:	441a      	add	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6a2:	4a0d      	ldr	r2, [pc, #52]	; (800c6d8 <UART_SetConfig+0x22c>)
 800c6a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c6a8:	095b      	lsrs	r3, r3, #5
 800c6aa:	2264      	movs	r2, #100	; 0x64
 800c6ac:	fb02 f303 	mul.w	r3, r2, r3
 800c6b0:	1aeb      	subs	r3, r5, r3
 800c6b2:	011b      	lsls	r3, r3, #4
 800c6b4:	3332      	adds	r3, #50	; 0x32
 800c6b6:	4a08      	ldr	r2, [pc, #32]	; (800c6d8 <UART_SetConfig+0x22c>)
 800c6b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c6bc:	095b      	lsrs	r3, r3, #5
 800c6be:	f003 020f 	and.w	r2, r3, #15
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4422      	add	r2, r4
 800c6c8:	609a      	str	r2, [r3, #8]
}
 800c6ca:	bf00      	nop
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bdb0      	pop	{r4, r5, r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	40013800 	.word	0x40013800
 800c6d8:	51eb851f 	.word	0x51eb851f

0800c6dc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c6dc:	b084      	sub	sp, #16
 800c6de:	b480      	push	{r7}
 800c6e0:	b083      	sub	sp, #12
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	f107 0014 	add.w	r0, r7, #20
 800c6ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bc80      	pop	{r7}
 800c6f8:	b004      	add	sp, #16
 800c6fa:	4770      	bx	lr

0800c6fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800c708:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c70c:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c714:	b29a      	uxth	r2, r3
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	4313      	orrs	r3, r2
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bc80      	pop	{r7}
 800c72e:	4770      	bx	lr

0800c730 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 800c738:	2300      	movs	r3, #0
 800c73a:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 800c73c:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 800c740:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c748:	b29a      	uxth	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	43db      	mvns	r3, r3
 800c750:	b29b      	uxth	r3, r3
 800c752:	4013      	ands	r3, r2
 800c754:	b29a      	uxth	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	bc80      	pop	{r7}
 800c766:	4770      	bx	lr

0800c768 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	460b      	mov	r3, r1
 800c772:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bc80      	pop	{r7}
 800c77e:	4770      	bx	lr

0800c780 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c780:	b084      	sub	sp, #16
 800c782:	b580      	push	{r7, lr}
 800c784:	b082      	sub	sp, #8
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
 800c78a:	f107 0014 	add.w	r0, r7, #20
 800c78e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2201      	movs	r2, #1
 800c796:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f7ff ffa2 	bl	800c6fc <USB_EnableGlobalInt>
    
  return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7c4:	b004      	add	sp, #16
 800c7c6:	4770      	bx	lr

0800c7c8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c7c8:	b490      	push	{r4, r7}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	78db      	ldrb	r3, [r3, #3]
 800c7d6:	2b03      	cmp	r3, #3
 800c7d8:	d85f      	bhi.n	800c89a <USB_ActivateEndpoint+0xd2>
 800c7da:	a201      	add	r2, pc, #4	; (adr r2, 800c7e0 <USB_ActivateEndpoint+0x18>)
 800c7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e0:	0800c7f1 	.word	0x0800c7f1
 800c7e4:	0800c86f 	.word	0x0800c86f
 800c7e8:	0800c81d 	.word	0x0800c81d
 800c7ec:	0800c843 	.word	0x0800c843
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4413      	add	r3, r2
 800c7fa:	881b      	ldrh	r3, [r3, #0]
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c806:	b29a      	uxth	r2, r3
 800c808:	6879      	ldr	r1, [r7, #4]
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	440b      	add	r3, r1
 800c812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c816:	b292      	uxth	r2, r2
 800c818:	801a      	strh	r2, [r3, #0]
    break;
 800c81a:	e03f      	b.n	800c89c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	4413      	add	r3, r2
 800c826:	881b      	ldrh	r3, [r3, #0]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	7812      	ldrb	r2, [r2, #0]
 800c830:	0092      	lsls	r2, r2, #2
 800c832:	440a      	add	r2, r1
 800c834:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	8013      	strh	r3, [r2, #0]
    break;
 800c840:	e02c      	b.n	800c89c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4413      	add	r3, r2
 800c84c:	881b      	ldrh	r3, [r3, #0]
 800c84e:	b29b      	uxth	r3, r3
 800c850:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c858:	b29a      	uxth	r2, r3
 800c85a:	6879      	ldr	r1, [r7, #4]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	440b      	add	r3, r1
 800c864:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800c868:	b292      	uxth	r2, r2
 800c86a:	801a      	strh	r2, [r3, #0]
    break;
 800c86c:	e016      	b.n	800c89c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c884:	b29a      	uxth	r2, r3
 800c886:	6879      	ldr	r1, [r7, #4]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	440b      	add	r3, r1
 800c890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c894:	b292      	uxth	r2, r2
 800c896:	801a      	strh	r2, [r3, #0]
    break;
 800c898:	e000      	b.n	800c89c <USB_ActivateEndpoint+0xd4>
  default:
      break;
 800c89a:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	4413      	add	r3, r2
 800c8a6:	881b      	ldrh	r3, [r3, #0]
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	b299      	uxth	r1, r3
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	441a      	add	r2, r3
 800c8c6:	4b75      	ldr	r3, [pc, #468]	; (800ca9c <USB_ActivateEndpoint+0x2d4>)
 800c8c8:	430b      	orrs	r3, r1
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	7a9b      	ldrb	r3, [r3, #10]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f040 80e8 	bne.w	800caa8 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	785b      	ldrb	r3, [r3, #1]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d04c      	beq.n	800c97a <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	889b      	ldrh	r3, [r3, #4]
 800c8e4:	085b      	lsrs	r3, r3, #1
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	0059      	lsls	r1, r3, #1
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	00db      	lsls	r3, r3, #3
 800c8fa:	4413      	add	r3, r2
 800c8fc:	005a      	lsls	r2, r3, #1
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4413      	add	r3, r2
 800c902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c906:	460a      	mov	r2, r1
 800c908:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	4413      	add	r3, r2
 800c914:	881b      	ldrh	r3, [r3, #0]
 800c916:	b29b      	uxth	r3, r3
 800c918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d013      	beq.n	800c948 <USB_ActivateEndpoint+0x180>
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	4413      	add	r3, r2
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c932:	4013      	ands	r3, r2
 800c934:	b299      	uxth	r1, r3
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	441a      	add	r2, r3
 800c940:	4b57      	ldr	r3, [pc, #348]	; (800caa0 <USB_ActivateEndpoint+0x2d8>)
 800c942:	430b      	orrs	r3, r1
 800c944:	b29b      	uxth	r3, r3
 800c946:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	4413      	add	r3, r2
 800c952:	881b      	ldrh	r3, [r3, #0]
 800c954:	b29b      	uxth	r3, r3
 800c956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c95a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c95e:	b29c      	uxth	r4, r3
 800c960:	f084 0320 	eor.w	r3, r4, #32
 800c964:	b29c      	uxth	r4, r3
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	441a      	add	r2, r3
 800c970:	4b4a      	ldr	r3, [pc, #296]	; (800ca9c <USB_ActivateEndpoint+0x2d4>)
 800c972:	4323      	orrs	r3, r4
 800c974:	b29b      	uxth	r3, r3
 800c976:	8013      	strh	r3, [r2, #0]
 800c978:	e1d9      	b.n	800cd2e <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	889b      	ldrh	r3, [r3, #4]
 800c97e:	085b      	lsrs	r3, r3, #1
 800c980:	b29b      	uxth	r3, r3
 800c982:	0059      	lsls	r1, r3, #1
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	461a      	mov	r2, r3
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	4413      	add	r3, r2
 800c996:	3304      	adds	r3, #4
 800c998:	005a      	lsls	r2, r3, #1
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4413      	add	r3, r2
 800c99e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9a2:	460a      	mov	r2, r1
 800c9a4:	601a      	str	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	00db      	lsls	r3, r3, #3
 800c9b6:	4413      	add	r3, r2
 800c9b8:	3306      	adds	r3, #6
 800c9ba:	005a      	lsls	r2, r3, #1
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9c4:	60bb      	str	r3, [r7, #8]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	2b3e      	cmp	r3, #62	; 0x3e
 800c9cc:	d918      	bls.n	800ca00 <USB_ActivateEndpoint+0x238>
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	095b      	lsrs	r3, r3, #5
 800c9d4:	81fb      	strh	r3, [r7, #14]
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	f003 031f 	and.w	r3, r3, #31
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d102      	bne.n	800c9e8 <USB_ActivateEndpoint+0x220>
 800c9e2:	89fb      	ldrh	r3, [r7, #14]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	81fb      	strh	r3, [r7, #14]
 800c9e8:	89fb      	ldrh	r3, [r7, #14]
 800c9ea:	029b      	lsls	r3, r3, #10
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	601a      	str	r2, [r3, #0]
 800c9fe:	e012      	b.n	800ca26 <USB_ActivateEndpoint+0x25e>
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	085b      	lsrs	r3, r3, #1
 800ca06:	81fb      	strh	r3, [r7, #14]
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	691b      	ldr	r3, [r3, #16]
 800ca0c:	f003 0301 	and.w	r3, r3, #1
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <USB_ActivateEndpoint+0x252>
 800ca14:	89fb      	ldrh	r3, [r7, #14]
 800ca16:	3301      	adds	r3, #1
 800ca18:	81fb      	strh	r3, [r7, #14]
 800ca1a:	89fb      	ldrh	r3, [r7, #14]
 800ca1c:	029b      	lsls	r3, r3, #10
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	461a      	mov	r2, r3
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4413      	add	r3, r2
 800ca30:	881b      	ldrh	r3, [r3, #0]
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d013      	beq.n	800ca64 <USB_ActivateEndpoint+0x29c>
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4413      	add	r3, r2
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800ca4e:	4013      	ands	r3, r2
 800ca50:	b299      	uxth	r1, r3
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	441a      	add	r2, r3
 800ca5c:	4b11      	ldr	r3, [pc, #68]	; (800caa4 <USB_ActivateEndpoint+0x2dc>)
 800ca5e:	430b      	orrs	r3, r1
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	4413      	add	r3, r2
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca7a:	b29c      	uxth	r4, r3
 800ca7c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800ca80:	b29c      	uxth	r4, r3
 800ca82:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800ca86:	b29c      	uxth	r4, r3
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	441a      	add	r2, r3
 800ca92:	4b02      	ldr	r3, [pc, #8]	; (800ca9c <USB_ActivateEndpoint+0x2d4>)
 800ca94:	4323      	orrs	r3, r4
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	8013      	strh	r3, [r2, #0]
 800ca9a:	e148      	b.n	800cd2e <USB_ActivateEndpoint+0x566>
 800ca9c:	ffff8080 	.word	0xffff8080
 800caa0:	ffff80c0 	.word	0xffff80c0
 800caa4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	881b      	ldrh	r3, [r3, #0]
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	f640 630f 	movw	r3, #3599	; 0xe0f
 800caba:	4013      	ands	r3, r2
 800cabc:	b299      	uxth	r1, r3
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	441a      	add	r2, r3
 800cac8:	4b9c      	ldr	r3, [pc, #624]	; (800cd3c <USB_ActivateEndpoint+0x574>)
 800caca:	430b      	orrs	r3, r1
 800cacc:	b29b      	uxth	r3, r3
 800cace:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	88db      	ldrh	r3, [r3, #6]
 800cad4:	085b      	lsrs	r3, r3, #1
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	0059      	lsls	r1, r3, #1
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	461a      	mov	r2, r3
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	00db      	lsls	r3, r3, #3
 800caea:	4413      	add	r3, r2
 800caec:	005a      	lsls	r2, r3, #1
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4413      	add	r3, r2
 800caf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800caf6:	460a      	mov	r2, r1
 800caf8:	601a      	str	r2, [r3, #0]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	891b      	ldrh	r3, [r3, #8]
 800cafe:	085b      	lsrs	r3, r3, #1
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	0059      	lsls	r1, r3, #1
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	00db      	lsls	r3, r3, #3
 800cb14:	4413      	add	r3, r2
 800cb16:	3304      	adds	r3, #4
 800cb18:	005a      	lsls	r2, r3, #1
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb22:	460a      	mov	r2, r1
 800cb24:	601a      	str	r2, [r3, #0]
    
    if (ep->is_in==0)
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	785b      	ldrb	r3, [r3, #1]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f040 8083 	bne.w	800cc36 <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4413      	add	r3, r2
 800cb3a:	881b      	ldrh	r3, [r3, #0]
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d013      	beq.n	800cb6e <USB_ActivateEndpoint+0x3a6>
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4413      	add	r3, r2
 800cb50:	881b      	ldrh	r3, [r3, #0]
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	f640 730f 	movw	r3, #3855	; 0xf0f
 800cb58:	4013      	ands	r3, r2
 800cb5a:	b299      	uxth	r1, r3
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	441a      	add	r2, r3
 800cb66:	4b76      	ldr	r3, [pc, #472]	; (800cd40 <USB_ActivateEndpoint+0x578>)
 800cb68:	430b      	orrs	r3, r1
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	881b      	ldrh	r3, [r3, #0]
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d013      	beq.n	800cbac <USB_ActivateEndpoint+0x3e4>
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4413      	add	r3, r2
 800cb8e:	881b      	ldrh	r3, [r3, #0]
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	f640 730f 	movw	r3, #3855	; 0xf0f
 800cb96:	4013      	ands	r3, r2
 800cb98:	b299      	uxth	r1, r3
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	441a      	add	r2, r3
 800cba4:	4b67      	ldr	r3, [pc, #412]	; (800cd44 <USB_ActivateEndpoint+0x57c>)
 800cba6:	430b      	orrs	r3, r1
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	881b      	ldrh	r3, [r3, #0]
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	f640 730f 	movw	r3, #3855	; 0xf0f
 800cbbe:	4013      	ands	r3, r2
 800cbc0:	b299      	uxth	r1, r3
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	441a      	add	r2, r3
 800cbcc:	4b5d      	ldr	r3, [pc, #372]	; (800cd44 <USB_ActivateEndpoint+0x57c>)
 800cbce:	430b      	orrs	r3, r1
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4413      	add	r3, r2
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cbe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbea:	b29c      	uxth	r4, r3
 800cbec:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800cbf0:	b29c      	uxth	r4, r3
 800cbf2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800cbf6:	b29c      	uxth	r4, r3
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	441a      	add	r2, r3
 800cc02:	4b51      	ldr	r3, [pc, #324]	; (800cd48 <USB_ActivateEndpoint+0x580>)
 800cc04:	4323      	orrs	r3, r4
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	4413      	add	r3, r2
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc20:	b29c      	uxth	r4, r3
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	441a      	add	r2, r3
 800cc2c:	4b46      	ldr	r3, [pc, #280]	; (800cd48 <USB_ActivateEndpoint+0x580>)
 800cc2e:	4323      	orrs	r3, r4
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	8013      	strh	r3, [r2, #0]
 800cc34:	e07b      	b.n	800cd2e <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	4413      	add	r3, r2
 800cc40:	881b      	ldrh	r3, [r3, #0]
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d013      	beq.n	800cc74 <USB_ActivateEndpoint+0x4ac>
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	881b      	ldrh	r3, [r3, #0]
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800cc5e:	4013      	ands	r3, r2
 800cc60:	b299      	uxth	r1, r3
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	441a      	add	r2, r3
 800cc6c:	4b34      	ldr	r3, [pc, #208]	; (800cd40 <USB_ActivateEndpoint+0x578>)
 800cc6e:	430b      	orrs	r3, r1
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	4413      	add	r3, r2
 800cc7e:	881b      	ldrh	r3, [r3, #0]
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d013      	beq.n	800ccb2 <USB_ActivateEndpoint+0x4ea>
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4413      	add	r3, r2
 800cc94:	881b      	ldrh	r3, [r3, #0]
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	f640 730f 	movw	r3, #3855	; 0xf0f
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	b299      	uxth	r1, r3
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	441a      	add	r2, r3
 800ccaa:	4b26      	ldr	r3, [pc, #152]	; (800cd44 <USB_ActivateEndpoint+0x57c>)
 800ccac:	430b      	orrs	r3, r1
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4413      	add	r3, r2
 800ccbc:	881b      	ldrh	r3, [r3, #0]
 800ccbe:	b29a      	uxth	r2, r3
 800ccc0:	f640 730f 	movw	r3, #3855	; 0xf0f
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	b299      	uxth	r1, r3
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	441a      	add	r2, r3
 800ccd2:	4b1b      	ldr	r3, [pc, #108]	; (800cd40 <USB_ActivateEndpoint+0x578>)
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccf0:	b29c      	uxth	r4, r3
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	441a      	add	r2, r3
 800ccfc:	4b12      	ldr	r3, [pc, #72]	; (800cd48 <USB_ActivateEndpoint+0x580>)
 800ccfe:	4323      	orrs	r3, r4
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4413      	add	r3, r2
 800cd0e:	881b      	ldrh	r3, [r3, #0]
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd1a:	b29c      	uxth	r4, r3
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	441a      	add	r2, r3
 800cd26:	4b08      	ldr	r3, [pc, #32]	; (800cd48 <USB_ActivateEndpoint+0x580>)
 800cd28:	4323      	orrs	r3, r4
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bc90      	pop	{r4, r7}
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	ffff8180 	.word	0xffff8180
 800cd40:	ffffc080 	.word	0xffffc080
 800cd44:	ffff80c0 	.word	0xffff80c0
 800cd48:	ffff8080 	.word	0xffff8080

0800cd4c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd4c:	b490      	push	{r4, r7}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	7a9b      	ldrb	r3, [r3, #10]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d16d      	bne.n	800ce3a <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	785b      	ldrb	r3, [r3, #1]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d034      	beq.n	800cdd0 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	881b      	ldrh	r3, [r3, #0]
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d013      	beq.n	800cda4 <USB_DeactivateEndpoint+0x58>
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	4413      	add	r3, r2
 800cd86:	881b      	ldrh	r3, [r3, #0]
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800cd8e:	4013      	ands	r3, r2
 800cd90:	b299      	uxth	r1, r3
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	441a      	add	r2, r3
 800cd9c:	4b68      	ldr	r3, [pc, #416]	; (800cf40 <USB_DeactivateEndpoint+0x1f4>)
 800cd9e:	430b      	orrs	r3, r1
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4413      	add	r3, r2
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdba:	b29c      	uxth	r4, r3
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	441a      	add	r2, r3
 800cdc6:	4b5f      	ldr	r3, [pc, #380]	; (800cf44 <USB_DeactivateEndpoint+0x1f8>)
 800cdc8:	4323      	orrs	r3, r4
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	8013      	strh	r3, [r2, #0]
 800cdce:	e139      	b.n	800d044 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4413      	add	r3, r2
 800cdda:	881b      	ldrh	r3, [r3, #0]
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d013      	beq.n	800ce0e <USB_DeactivateEndpoint+0xc2>
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	4413      	add	r3, r2
 800cdf0:	881b      	ldrh	r3, [r3, #0]
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	f640 730f 	movw	r3, #3855	; 0xf0f
 800cdf8:	4013      	ands	r3, r2
 800cdfa:	b299      	uxth	r1, r3
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	441a      	add	r2, r3
 800ce06:	4b50      	ldr	r3, [pc, #320]	; (800cf48 <USB_DeactivateEndpoint+0x1fc>)
 800ce08:	430b      	orrs	r3, r1
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4413      	add	r3, r2
 800ce18:	881b      	ldrh	r3, [r3, #0]
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce24:	b29c      	uxth	r4, r3
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	441a      	add	r2, r3
 800ce30:	4b44      	ldr	r3, [pc, #272]	; (800cf44 <USB_DeactivateEndpoint+0x1f8>)
 800ce32:	4323      	orrs	r3, r4
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	8013      	strh	r3, [r2, #0]
 800ce38:	e104      	b.n	800d044 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	785b      	ldrb	r3, [r3, #1]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f040 8084 	bne.w	800cf4c <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4413      	add	r3, r2
 800ce4e:	881b      	ldrh	r3, [r3, #0]
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d013      	beq.n	800ce82 <USB_DeactivateEndpoint+0x136>
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4413      	add	r3, r2
 800ce64:	881b      	ldrh	r3, [r3, #0]
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	f640 730f 	movw	r3, #3855	; 0xf0f
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	b299      	uxth	r1, r3
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	441a      	add	r2, r3
 800ce7a:	4b33      	ldr	r3, [pc, #204]	; (800cf48 <USB_DeactivateEndpoint+0x1fc>)
 800ce7c:	430b      	orrs	r3, r1
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4413      	add	r3, r2
 800ce8c:	881b      	ldrh	r3, [r3, #0]
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d013      	beq.n	800cec0 <USB_DeactivateEndpoint+0x174>
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	4413      	add	r3, r2
 800cea2:	881b      	ldrh	r3, [r3, #0]
 800cea4:	b29a      	uxth	r2, r3
 800cea6:	f640 730f 	movw	r3, #3855	; 0xf0f
 800ceaa:	4013      	ands	r3, r2
 800ceac:	b299      	uxth	r1, r3
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	441a      	add	r2, r3
 800ceb8:	4b21      	ldr	r3, [pc, #132]	; (800cf40 <USB_DeactivateEndpoint+0x1f4>)
 800ceba:	430b      	orrs	r3, r1
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	881b      	ldrh	r3, [r3, #0]
 800cecc:	b29a      	uxth	r2, r3
 800cece:	f640 730f 	movw	r3, #3855	; 0xf0f
 800ced2:	4013      	ands	r3, r2
 800ced4:	b299      	uxth	r1, r3
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	441a      	add	r2, r3
 800cee0:	4b17      	ldr	r3, [pc, #92]	; (800cf40 <USB_DeactivateEndpoint+0x1f4>)
 800cee2:	430b      	orrs	r3, r1
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	4413      	add	r3, r2
 800cef2:	881b      	ldrh	r3, [r3, #0]
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cefa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cefe:	b29c      	uxth	r4, r3
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	441a      	add	r2, r3
 800cf0a:	4b0e      	ldr	r3, [pc, #56]	; (800cf44 <USB_DeactivateEndpoint+0x1f8>)
 800cf0c:	4323      	orrs	r3, r4
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	4413      	add	r3, r2
 800cf1c:	881b      	ldrh	r3, [r3, #0]
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf28:	b29c      	uxth	r4, r3
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	441a      	add	r2, r3
 800cf34:	4b03      	ldr	r3, [pc, #12]	; (800cf44 <USB_DeactivateEndpoint+0x1f8>)
 800cf36:	4323      	orrs	r3, r4
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	8013      	strh	r3, [r2, #0]
 800cf3c:	e082      	b.n	800d044 <USB_DeactivateEndpoint+0x2f8>
 800cf3e:	bf00      	nop
 800cf40:	ffff80c0 	.word	0xffff80c0
 800cf44:	ffff8080 	.word	0xffff8080
 800cf48:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	881b      	ldrh	r3, [r3, #0]
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d013      	beq.n	800cf8a <USB_DeactivateEndpoint+0x23e>
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4413      	add	r3, r2
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	f640 730f 	movw	r3, #3855	; 0xf0f
 800cf74:	4013      	ands	r3, r2
 800cf76:	b299      	uxth	r1, r3
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	441a      	add	r2, r3
 800cf82:	4b33      	ldr	r3, [pc, #204]	; (800d050 <USB_DeactivateEndpoint+0x304>)
 800cf84:	430b      	orrs	r3, r1
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	4413      	add	r3, r2
 800cf94:	881b      	ldrh	r3, [r3, #0]
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d013      	beq.n	800cfc8 <USB_DeactivateEndpoint+0x27c>
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	881b      	ldrh	r3, [r3, #0]
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	f640 730f 	movw	r3, #3855	; 0xf0f
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	b299      	uxth	r1, r3
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	441a      	add	r2, r3
 800cfc0:	4b24      	ldr	r3, [pc, #144]	; (800d054 <USB_DeactivateEndpoint+0x308>)
 800cfc2:	430b      	orrs	r3, r1
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	4413      	add	r3, r2
 800cfd2:	881b      	ldrh	r3, [r3, #0]
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	f640 730f 	movw	r3, #3855	; 0xf0f
 800cfda:	4013      	ands	r3, r2
 800cfdc:	b299      	uxth	r1, r3
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	441a      	add	r2, r3
 800cfe8:	4b19      	ldr	r3, [pc, #100]	; (800d050 <USB_DeactivateEndpoint+0x304>)
 800cfea:	430b      	orrs	r3, r1
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4413      	add	r3, r2
 800cffa:	881b      	ldrh	r3, [r3, #0]
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d006:	b29c      	uxth	r4, r3
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	441a      	add	r2, r3
 800d012:	4b11      	ldr	r3, [pc, #68]	; (800d058 <USB_DeactivateEndpoint+0x30c>)
 800d014:	4323      	orrs	r3, r4
 800d016:	b29b      	uxth	r3, r3
 800d018:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4413      	add	r3, r2
 800d024:	881b      	ldrh	r3, [r3, #0]
 800d026:	b29b      	uxth	r3, r3
 800d028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d02c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d030:	b29c      	uxth	r4, r3
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	441a      	add	r2, r3
 800d03c:	4b06      	ldr	r3, [pc, #24]	; (800d058 <USB_DeactivateEndpoint+0x30c>)
 800d03e:	4323      	orrs	r3, r4
 800d040:	b29b      	uxth	r3, r3
 800d042:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800d044:	2300      	movs	r3, #0
}
 800d046:	4618      	mov	r0, r3
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bc90      	pop	{r4, r7}
 800d04e:	4770      	bx	lr
 800d050:	ffffc080 	.word	0xffffc080
 800d054:	ffff80c0 	.word	0xffff80c0
 800d058:	ffff8080 	.word	0xffff8080

0800d05c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800d05c:	b590      	push	{r4, r7, lr}
 800d05e:	b08d      	sub	sp, #52	; 0x34
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	785b      	ldrb	r3, [r3, #1]
 800d074:	2b01      	cmp	r3, #1
 800d076:	f040 8149 	bne.w	800d30c <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	699a      	ldr	r2, [r3, #24]
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	691b      	ldr	r3, [r3, #16]
 800d082:	429a      	cmp	r2, r3
 800d084:	d909      	bls.n	800d09a <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	699a      	ldr	r2, [r3, #24]
 800d090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d092:	1ad2      	subs	r2, r2, r3
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	619a      	str	r2, [r3, #24]
 800d098:	e005      	b.n	800d0a6 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	699b      	ldr	r3, [r3, #24]
 800d09e:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	7a9b      	ldrb	r3, [r3, #10]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d11b      	bne.n	800d0e6 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	6959      	ldr	r1, [r3, #20]
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	889a      	ldrh	r2, [r3, #4]
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 fb7d 	bl	800d7ba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	4413      	add	r3, r2
 800d0d2:	3302      	adds	r3, #2
 800d0d4:	005a      	lsls	r2, r3, #1
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4413      	add	r3, r2
 800d0da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0de:	461a      	mov	r2, r3
 800d0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e2:	6013      	str	r3, [r2, #0]
 800d0e4:	e0f6      	b.n	800d2d4 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	881b      	ldrh	r3, [r3, #0]
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d059      	beq.n	800d1b0 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	785b      	ldrb	r3, [r3, #1]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d13b      	bne.n	800d17c <USB_EPStartXfer+0x120>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	461a      	mov	r2, r3
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	4413      	add	r3, r2
 800d116:	3306      	adds	r3, #6
 800d118:	005a      	lsls	r2, r3, #1
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4413      	add	r3, r2
 800d11e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d122:	60bb      	str	r3, [r7, #8]
 800d124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d126:	2b3e      	cmp	r3, #62	; 0x3e
 800d128:	d916      	bls.n	800d158 <USB_EPStartXfer+0xfc>
 800d12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12c:	095b      	lsrs	r3, r3, #5
 800d12e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d132:	f003 031f 	and.w	r3, r3, #31
 800d136:	2b00      	cmp	r3, #0
 800d138:	d102      	bne.n	800d140 <USB_EPStartXfer+0xe4>
 800d13a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d13c:	3b01      	subs	r3, #1
 800d13e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d140:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d142:	029b      	lsls	r3, r3, #10
 800d144:	b29b      	uxth	r3, r3
 800d146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d14a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d14e:	b29b      	uxth	r3, r3
 800d150:	461a      	mov	r2, r3
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	e027      	b.n	800d1a8 <USB_EPStartXfer+0x14c>
 800d158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15a:	085b      	lsrs	r3, r3, #1
 800d15c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d160:	f003 0301 	and.w	r3, r3, #1
 800d164:	2b00      	cmp	r3, #0
 800d166:	d002      	beq.n	800d16e <USB_EPStartXfer+0x112>
 800d168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d16a:	3301      	adds	r3, #1
 800d16c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d16e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d170:	029b      	lsls	r3, r3, #10
 800d172:	b29b      	uxth	r3, r3
 800d174:	461a      	mov	r2, r3
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	601a      	str	r2, [r3, #0]
 800d17a:	e015      	b.n	800d1a8 <USB_EPStartXfer+0x14c>
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	785b      	ldrb	r3, [r3, #1]
 800d180:	2b01      	cmp	r3, #1
 800d182:	d111      	bne.n	800d1a8 <USB_EPStartXfer+0x14c>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	461a      	mov	r2, r3
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	00db      	lsls	r3, r3, #3
 800d194:	4413      	add	r3, r2
 800d196:	3302      	adds	r3, #2
 800d198:	005a      	lsls	r2, r3, #1
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	4413      	add	r3, r2
 800d19e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a6:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	891b      	ldrh	r3, [r3, #8]
 800d1ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d1ae:	e058      	b.n	800d262 <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	785b      	ldrb	r3, [r3, #1]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d13b      	bne.n	800d230 <USB_EPStartXfer+0x1d4>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	00db      	lsls	r3, r3, #3
 800d1c8:	4413      	add	r3, r2
 800d1ca:	3302      	adds	r3, #2
 800d1cc:	005a      	lsls	r2, r3, #1
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1d6:	60fb      	str	r3, [r7, #12]
 800d1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1da:	2b3e      	cmp	r3, #62	; 0x3e
 800d1dc:	d916      	bls.n	800d20c <USB_EPStartXfer+0x1b0>
 800d1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e0:	095b      	lsrs	r3, r3, #5
 800d1e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e6:	f003 031f 	and.w	r3, r3, #31
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d102      	bne.n	800d1f4 <USB_EPStartXfer+0x198>
 800d1ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d1f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1f6:	029b      	lsls	r3, r3, #10
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d202:	b29b      	uxth	r3, r3
 800d204:	461a      	mov	r2, r3
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	601a      	str	r2, [r3, #0]
 800d20a:	e027      	b.n	800d25c <USB_EPStartXfer+0x200>
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	085b      	lsrs	r3, r3, #1
 800d210:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d214:	f003 0301 	and.w	r3, r3, #1
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <USB_EPStartXfer+0x1c6>
 800d21c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d21e:	3301      	adds	r3, #1
 800d220:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d224:	029b      	lsls	r3, r3, #10
 800d226:	b29b      	uxth	r3, r3
 800d228:	461a      	mov	r2, r3
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	601a      	str	r2, [r3, #0]
 800d22e:	e015      	b.n	800d25c <USB_EPStartXfer+0x200>
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	785b      	ldrb	r3, [r3, #1]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d111      	bne.n	800d25c <USB_EPStartXfer+0x200>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d23e:	b29b      	uxth	r3, r3
 800d240:	461a      	mov	r2, r3
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	00db      	lsls	r3, r3, #3
 800d248:	4413      	add	r3, r2
 800d24a:	3302      	adds	r3, #2
 800d24c:	005a      	lsls	r2, r3, #1
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4413      	add	r3, r2
 800d252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d256:	461a      	mov	r2, r3
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	88db      	ldrh	r3, [r3, #6]
 800d260:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	6959      	ldr	r1, [r3, #20]
 800d266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d268:	b29b      	uxth	r3, r3
 800d26a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 faa4 	bl	800d7ba <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	785b      	ldrb	r3, [r3, #1]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d114      	bne.n	800d2a4 <USB_EPStartXfer+0x248>
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	4413      	add	r3, r2
 800d284:	881b      	ldrh	r3, [r3, #0]
 800d286:	b29a      	uxth	r2, r3
 800d288:	f640 730f 	movw	r3, #3855	; 0xf0f
 800d28c:	4013      	ands	r3, r2
 800d28e:	b299      	uxth	r1, r3
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	441a      	add	r2, r3
 800d29a:	4b92      	ldr	r3, [pc, #584]	; (800d4e4 <USB_EPStartXfer+0x488>)
 800d29c:	430b      	orrs	r3, r1
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	8013      	strh	r3, [r2, #0]
 800d2a2:	e017      	b.n	800d2d4 <USB_EPStartXfer+0x278>
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	785b      	ldrb	r3, [r3, #1]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d113      	bne.n	800d2d4 <USB_EPStartXfer+0x278>
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	4413      	add	r3, r2
 800d2b6:	881b      	ldrh	r3, [r3, #0]
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	f640 730f 	movw	r3, #3855	; 0xf0f
 800d2be:	4013      	ands	r3, r2
 800d2c0:	b299      	uxth	r1, r3
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	441a      	add	r2, r3
 800d2cc:	4b86      	ldr	r3, [pc, #536]	; (800d4e8 <USB_EPStartXfer+0x48c>)
 800d2ce:	430b      	orrs	r3, r1
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	4413      	add	r3, r2
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2ea:	b29c      	uxth	r4, r3
 800d2ec:	f084 0310 	eor.w	r3, r4, #16
 800d2f0:	b29c      	uxth	r4, r3
 800d2f2:	f084 0320 	eor.w	r3, r4, #32
 800d2f6:	b29c      	uxth	r4, r3
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	441a      	add	r2, r3
 800d302:	4b7a      	ldr	r3, [pc, #488]	; (800d4ec <USB_EPStartXfer+0x490>)
 800d304:	4323      	orrs	r3, r4
 800d306:	b29b      	uxth	r3, r3
 800d308:	8013      	strh	r3, [r2, #0]
 800d30a:	e122      	b.n	800d552 <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	699a      	ldr	r2, [r3, #24]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	691b      	ldr	r3, [r3, #16]
 800d314:	429a      	cmp	r2, r3
 800d316:	d909      	bls.n	800d32c <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	691b      	ldr	r3, [r3, #16]
 800d31c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	699a      	ldr	r2, [r3, #24]
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	1ad2      	subs	r2, r2, r3
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	619a      	str	r2, [r3, #24]
 800d32a:	e005      	b.n	800d338 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	699b      	ldr	r3, [r3, #24]
 800d330:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	2200      	movs	r2, #0
 800d336:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	7a9b      	ldrb	r3, [r3, #10]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d13b      	bne.n	800d3b8 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d346:	b29b      	uxth	r3, r3
 800d348:	461a      	mov	r2, r3
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	00db      	lsls	r3, r3, #3
 800d350:	4413      	add	r3, r2
 800d352:	3306      	adds	r3, #6
 800d354:	005a      	lsls	r2, r3, #1
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4413      	add	r3, r2
 800d35a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d35e:	613b      	str	r3, [r7, #16]
 800d360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d362:	2b3e      	cmp	r3, #62	; 0x3e
 800d364:	d916      	bls.n	800d394 <USB_EPStartXfer+0x338>
 800d366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d368:	095b      	lsrs	r3, r3, #5
 800d36a:	847b      	strh	r3, [r7, #34]	; 0x22
 800d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36e:	f003 031f 	and.w	r3, r3, #31
 800d372:	2b00      	cmp	r3, #0
 800d374:	d102      	bne.n	800d37c <USB_EPStartXfer+0x320>
 800d376:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d378:	3b01      	subs	r3, #1
 800d37a:	847b      	strh	r3, [r7, #34]	; 0x22
 800d37c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d37e:	029b      	lsls	r3, r3, #10
 800d380:	b29b      	uxth	r3, r3
 800d382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	461a      	mov	r2, r3
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	601a      	str	r2, [r3, #0]
 800d392:	e0c3      	b.n	800d51c <USB_EPStartXfer+0x4c0>
 800d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d396:	085b      	lsrs	r3, r3, #1
 800d398:	847b      	strh	r3, [r7, #34]	; 0x22
 800d39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39c:	f003 0301 	and.w	r3, r3, #1
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d002      	beq.n	800d3aa <USB_EPStartXfer+0x34e>
 800d3a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	847b      	strh	r3, [r7, #34]	; 0x22
 800d3aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3ac:	029b      	lsls	r3, r3, #10
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	601a      	str	r2, [r3, #0]
 800d3b6:	e0b1      	b.n	800d51c <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	785b      	ldrb	r3, [r3, #1]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d13b      	bne.n	800d438 <USB_EPStartXfer+0x3dc>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	00db      	lsls	r3, r3, #3
 800d3d0:	4413      	add	r3, r2
 800d3d2:	3302      	adds	r3, #2
 800d3d4:	005a      	lsls	r2, r3, #1
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	4413      	add	r3, r2
 800d3da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3de:	61bb      	str	r3, [r7, #24]
 800d3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e2:	2b3e      	cmp	r3, #62	; 0x3e
 800d3e4:	d916      	bls.n	800d414 <USB_EPStartXfer+0x3b8>
 800d3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e8:	095b      	lsrs	r3, r3, #5
 800d3ea:	843b      	strh	r3, [r7, #32]
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	f003 031f 	and.w	r3, r3, #31
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d102      	bne.n	800d3fc <USB_EPStartXfer+0x3a0>
 800d3f6:	8c3b      	ldrh	r3, [r7, #32]
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	843b      	strh	r3, [r7, #32]
 800d3fc:	8c3b      	ldrh	r3, [r7, #32]
 800d3fe:	029b      	lsls	r3, r3, #10
 800d400:	b29b      	uxth	r3, r3
 800d402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	461a      	mov	r2, r3
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	601a      	str	r2, [r3, #0]
 800d412:	e027      	b.n	800d464 <USB_EPStartXfer+0x408>
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	085b      	lsrs	r3, r3, #1
 800d418:	843b      	strh	r3, [r7, #32]
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <USB_EPStartXfer+0x3ce>
 800d424:	8c3b      	ldrh	r3, [r7, #32]
 800d426:	3301      	adds	r3, #1
 800d428:	843b      	strh	r3, [r7, #32]
 800d42a:	8c3b      	ldrh	r3, [r7, #32]
 800d42c:	029b      	lsls	r3, r3, #10
 800d42e:	b29b      	uxth	r3, r3
 800d430:	461a      	mov	r2, r3
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	601a      	str	r2, [r3, #0]
 800d436:	e015      	b.n	800d464 <USB_EPStartXfer+0x408>
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	785b      	ldrb	r3, [r3, #1]
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d111      	bne.n	800d464 <USB_EPStartXfer+0x408>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d446:	b29b      	uxth	r3, r3
 800d448:	461a      	mov	r2, r3
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	00db      	lsls	r3, r3, #3
 800d450:	4413      	add	r3, r2
 800d452:	3302      	adds	r3, #2
 800d454:	005a      	lsls	r2, r3, #1
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4413      	add	r3, r2
 800d45a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d45e:	461a      	mov	r2, r3
 800d460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d462:	6013      	str	r3, [r2, #0]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	785b      	ldrb	r3, [r3, #1]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d141      	bne.n	800d4f0 <USB_EPStartXfer+0x494>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d472:	b29b      	uxth	r3, r3
 800d474:	461a      	mov	r2, r3
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	00db      	lsls	r3, r3, #3
 800d47c:	4413      	add	r3, r2
 800d47e:	3306      	adds	r3, #6
 800d480:	005a      	lsls	r2, r3, #1
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4413      	add	r3, r2
 800d486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d48a:	617b      	str	r3, [r7, #20]
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	2b3e      	cmp	r3, #62	; 0x3e
 800d490:	d916      	bls.n	800d4c0 <USB_EPStartXfer+0x464>
 800d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d494:	095b      	lsrs	r3, r3, #5
 800d496:	83fb      	strh	r3, [r7, #30]
 800d498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49a:	f003 031f 	and.w	r3, r3, #31
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d102      	bne.n	800d4a8 <USB_EPStartXfer+0x44c>
 800d4a2:	8bfb      	ldrh	r3, [r7, #30]
 800d4a4:	3b01      	subs	r3, #1
 800d4a6:	83fb      	strh	r3, [r7, #30]
 800d4a8:	8bfb      	ldrh	r3, [r7, #30]
 800d4aa:	029b      	lsls	r3, r3, #10
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	e02d      	b.n	800d51c <USB_EPStartXfer+0x4c0>
 800d4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c2:	085b      	lsrs	r3, r3, #1
 800d4c4:	83fb      	strh	r3, [r7, #30]
 800d4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c8:	f003 0301 	and.w	r3, r3, #1
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d002      	beq.n	800d4d6 <USB_EPStartXfer+0x47a>
 800d4d0:	8bfb      	ldrh	r3, [r7, #30]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	83fb      	strh	r3, [r7, #30]
 800d4d6:	8bfb      	ldrh	r3, [r7, #30]
 800d4d8:	029b      	lsls	r3, r3, #10
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	461a      	mov	r2, r3
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	e01b      	b.n	800d51c <USB_EPStartXfer+0x4c0>
 800d4e4:	ffff80c0 	.word	0xffff80c0
 800d4e8:	ffffc080 	.word	0xffffc080
 800d4ec:	ffff8080 	.word	0xffff8080
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	785b      	ldrb	r3, [r3, #1]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d111      	bne.n	800d51c <USB_EPStartXfer+0x4c0>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	461a      	mov	r2, r3
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	4413      	add	r3, r2
 800d50a:	3302      	adds	r3, #2
 800d50c:	005a      	lsls	r2, r3, #1
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4413      	add	r3, r2
 800d512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d516:	461a      	mov	r2, r3
 800d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51a:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	009b      	lsls	r3, r3, #2
 800d524:	4413      	add	r3, r2
 800d526:	881b      	ldrh	r3, [r3, #0]
 800d528:	b29b      	uxth	r3, r3
 800d52a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d52e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d532:	b29c      	uxth	r4, r3
 800d534:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800d538:	b29c      	uxth	r4, r3
 800d53a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800d53e:	b29c      	uxth	r4, r3
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	441a      	add	r2, r3
 800d54a:	4b04      	ldr	r3, [pc, #16]	; (800d55c <USB_EPStartXfer+0x500>)
 800d54c:	4323      	orrs	r3, r4
 800d54e:	b29b      	uxth	r3, r3
 800d550:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 800d552:	2300      	movs	r3, #0
}
 800d554:	4618      	mov	r0, r3
 800d556:	3734      	adds	r7, #52	; 0x34
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd90      	pop	{r4, r7, pc}
 800d55c:	ffff8080 	.word	0xffff8080

0800d560 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800d560:	b490      	push	{r4, r7}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d118      	bne.n	800d5a4 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	b29b      	uxth	r3, r3
 800d580:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800d584:	401c      	ands	r4, r3
 800d586:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800d58a:	f084 0410 	eor.w	r4, r4, #16
 800d58e:	b2a1      	uxth	r1, r4
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	441a      	add	r2, r3
 800d59a:	4b20      	ldr	r3, [pc, #128]	; (800d61c <USB_EPSetStall+0xbc>)
 800d59c:	430b      	orrs	r3, r1
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	8013      	strh	r3, [r2, #0]
 800d5a2:	e034      	b.n	800d60e <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	785b      	ldrb	r3, [r3, #1]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d018      	beq.n	800d5de <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	4413      	add	r3, r2
 800d5b6:	881b      	ldrh	r3, [r3, #0]
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5c2:	b29c      	uxth	r4, r3
 800d5c4:	f084 0310 	eor.w	r3, r4, #16
 800d5c8:	b29c      	uxth	r4, r3
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	441a      	add	r2, r3
 800d5d4:	4b11      	ldr	r3, [pc, #68]	; (800d61c <USB_EPSetStall+0xbc>)
 800d5d6:	4323      	orrs	r3, r4
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	8013      	strh	r3, [r2, #0]
 800d5dc:	e017      	b.n	800d60e <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	4413      	add	r3, r2
 800d5e8:	881b      	ldrh	r3, [r3, #0]
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5f4:	b29c      	uxth	r4, r3
 800d5f6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800d5fa:	b29c      	uxth	r4, r3
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	441a      	add	r2, r3
 800d606:	4b05      	ldr	r3, [pc, #20]	; (800d61c <USB_EPSetStall+0xbc>)
 800d608:	4323      	orrs	r3, r4
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d60e:	2300      	movs	r3, #0
}
 800d610:	4618      	mov	r0, r3
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bc90      	pop	{r4, r7}
 800d618:	4770      	bx	lr
 800d61a:	bf00      	nop
 800d61c:	ffff8080 	.word	0xffff8080

0800d620 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d620:	b490      	push	{r4, r7}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	785b      	ldrb	r3, [r3, #1]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d03a      	beq.n	800d6a8 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	4413      	add	r3, r2
 800d63c:	881b      	ldrh	r3, [r3, #0]
 800d63e:	b29b      	uxth	r3, r3
 800d640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d644:	2b00      	cmp	r3, #0
 800d646:	d013      	beq.n	800d670 <USB_EPClearStall+0x50>
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	4413      	add	r3, r2
 800d652:	881b      	ldrh	r3, [r3, #0]
 800d654:	b29a      	uxth	r2, r3
 800d656:	f640 730f 	movw	r3, #3855	; 0xf0f
 800d65a:	4013      	ands	r3, r2
 800d65c:	b299      	uxth	r1, r3
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	441a      	add	r2, r3
 800d668:	4b2f      	ldr	r3, [pc, #188]	; (800d728 <USB_EPClearStall+0x108>)
 800d66a:	430b      	orrs	r3, r1
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	4413      	add	r3, r2
 800d67a:	881b      	ldrh	r3, [r3, #0]
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d686:	b29c      	uxth	r4, r3
 800d688:	f084 0310 	eor.w	r3, r4, #16
 800d68c:	b29c      	uxth	r4, r3
 800d68e:	f084 0320 	eor.w	r3, r4, #32
 800d692:	b29c      	uxth	r4, r3
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	441a      	add	r2, r3
 800d69e:	4b23      	ldr	r3, [pc, #140]	; (800d72c <USB_EPClearStall+0x10c>)
 800d6a0:	4323      	orrs	r3, r4
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	8013      	strh	r3, [r2, #0]
 800d6a6:	e039      	b.n	800d71c <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	4413      	add	r3, r2
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d013      	beq.n	800d6e6 <USB_EPClearStall+0xc6>
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	881b      	ldrh	r3, [r3, #0]
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	f640 730f 	movw	r3, #3855	; 0xf0f
 800d6d0:	4013      	ands	r3, r2
 800d6d2:	b299      	uxth	r1, r3
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	441a      	add	r2, r3
 800d6de:	4b14      	ldr	r3, [pc, #80]	; (800d730 <USB_EPClearStall+0x110>)
 800d6e0:	430b      	orrs	r3, r1
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	4413      	add	r3, r2
 800d6f0:	881b      	ldrh	r3, [r3, #0]
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6fc:	b29c      	uxth	r4, r3
 800d6fe:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800d702:	b29c      	uxth	r4, r3
 800d704:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800d708:	b29c      	uxth	r4, r3
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	441a      	add	r2, r3
 800d714:	4b05      	ldr	r3, [pc, #20]	; (800d72c <USB_EPClearStall+0x10c>)
 800d716:	4323      	orrs	r3, r4
 800d718:	b29b      	uxth	r3, r3
 800d71a:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bc90      	pop	{r4, r7}
 800d726:	4770      	bx	lr
 800d728:	ffff80c0 	.word	0xffff80c0
 800d72c:	ffff8080 	.word	0xffff8080
 800d730:	ffffc080 	.word	0xffffc080

0800d734 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 800d740:	78fb      	ldrb	r3, [r7, #3]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d103      	bne.n	800d74e <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2280      	movs	r2, #128	; 0x80
 800d74a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 800d74e:	2300      	movs	r3, #0
}
 800d750:	4618      	mov	r0, r3
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	bc80      	pop	{r7}
 800d758:	4770      	bx	lr

0800d75a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 800d75a:	b480      	push	{r7}
 800d75c:	b083      	sub	sp, #12
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	bc80      	pop	{r7}
 800d76c:	4770      	bx	lr

0800d76e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 800d76e:	b480      	push	{r7}
 800d770:	b083      	sub	sp, #12
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bc80      	pop	{r7}
 800d780:	4770      	bx	lr

0800d782 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 800d782:	b480      	push	{r7}
 800d784:	b085      	sub	sp, #20
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d78a:	2300      	movs	r3, #0
 800d78c:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d794:	b29b      	uxth	r3, r3
 800d796:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d798:	68fb      	ldr	r3, [r7, #12]
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3714      	adds	r7, #20
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bc80      	pop	{r7}
 800d7a2:	4770      	bx	lr

0800d7a4 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bc80      	pop	{r7}
 800d7b8:	4770      	bx	lr

0800d7ba <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d7ba:	b480      	push	{r7}
 800d7bc:	b08b      	sub	sp, #44	; 0x2c
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	4611      	mov	r1, r2
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	80fb      	strh	r3, [r7, #6]
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800d7d0:	88bb      	ldrh	r3, [r7, #4]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	105b      	asrs	r3, r3, #1
 800d7d6:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	627b      	str	r3, [r7, #36]	; 0x24
 800d7dc:	2300      	movs	r3, #0
 800d7de:	61bb      	str	r3, [r7, #24]
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800d7e8:	88fb      	ldrh	r3, [r7, #6]
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7f6:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	627b      	str	r3, [r7, #36]	; 0x24
 800d7fc:	e01b      	b.n	800d836 <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	3301      	adds	r3, #1
 800d808:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	021b      	lsls	r3, r3, #8
 800d810:	461a      	mov	r2, r3
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	4313      	orrs	r3, r2
 800d816:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 800d818:	6a3b      	ldr	r3, [r7, #32]
 800d81a:	1c9a      	adds	r2, r3, #2
 800d81c:	623a      	str	r2, [r7, #32]
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	b292      	uxth	r2, r2
 800d822:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	3302      	adds	r3, #2
 800d828:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	3301      	adds	r3, #1
 800d82e:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 800d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d832:	3b01      	subs	r3, #1
 800d834:	627b      	str	r3, [r7, #36]	; 0x24
 800d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d1e0      	bne.n	800d7fe <USB_WritePMA+0x44>
  }
}
 800d83c:	bf00      	nop
 800d83e:	372c      	adds	r7, #44	; 0x2c
 800d840:	46bd      	mov	sp, r7
 800d842:	bc80      	pop	{r7}
 800d844:	4770      	bx	lr

0800d846 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d846:	b480      	push	{r7}
 800d848:	b089      	sub	sp, #36	; 0x24
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	60f8      	str	r0, [r7, #12]
 800d84e:	60b9      	str	r1, [r7, #8]
 800d850:	4611      	mov	r1, r2
 800d852:	461a      	mov	r2, r3
 800d854:	460b      	mov	r3, r1
 800d856:	80fb      	strh	r3, [r7, #6]
 800d858:	4613      	mov	r3, r2
 800d85a:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800d85c:	88bb      	ldrh	r3, [r7, #4]
 800d85e:	3301      	adds	r3, #1
 800d860:	105b      	asrs	r3, r3, #1
 800d862:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 800d864:	2300      	movs	r3, #0
 800d866:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 800d868:	2300      	movs	r3, #0
 800d86a:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800d86c:	88fb      	ldrh	r3, [r7, #6]
 800d86e:	005b      	lsls	r3, r3, #1
 800d870:	461a      	mov	r2, r3
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	4413      	add	r3, r2
 800d876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d87a:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	61fb      	str	r3, [r7, #28]
 800d880:	e00e      	b.n	800d8a0 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	1d1a      	adds	r2, r3, #4
 800d886:	61ba      	str	r2, [r7, #24]
 800d888:	6819      	ldr	r1, [r3, #0]
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	1c5a      	adds	r2, r3, #1
 800d88e:	60ba      	str	r2, [r7, #8]
 800d890:	b28a      	uxth	r2, r1
 800d892:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	3301      	adds	r3, #1
 800d898:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	3b01      	subs	r3, #1
 800d89e:	61fb      	str	r3, [r7, #28]
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d1ed      	bne.n	800d882 <USB_ReadPMA+0x3c>
  }
}
 800d8a6:	bf00      	nop
 800d8a8:	3724      	adds	r7, #36	; 0x24
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bc80      	pop	{r7}
 800d8ae:	4770      	bx	lr

0800d8b0 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7c1b      	ldrb	r3, [r3, #16]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10e      	bne.n	800d8e6 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800d8c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8cc:	2202      	movs	r2, #2
 800d8ce:	2181      	movs	r1, #129	; 0x81
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f001 fd40 	bl	800f356 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800d8d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8da:	2202      	movs	r2, #2
 800d8dc:	2101      	movs	r1, #1
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f001 fd39 	bl	800f356 <USBD_LL_OpenEP>
 800d8e4:	e00b      	b.n	800d8fe <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800d8e6:	2340      	movs	r3, #64	; 0x40
 800d8e8:	2202      	movs	r2, #2
 800d8ea:	2181      	movs	r1, #129	; 0x81
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f001 fd32 	bl	800f356 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800d8f2:	2340      	movs	r3, #64	; 0x40
 800d8f4:	2202      	movs	r2, #2
 800d8f6:	2101      	movs	r1, #1
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f001 fd2c 	bl	800f356 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800d8fe:	2308      	movs	r3, #8
 800d900:	2203      	movs	r2, #3
 800d902:	2182      	movs	r1, #130	; 0x82
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f001 fd26 	bl	800f356 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800d90a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d90e:	f001 fe43 	bl	800f598 <USBD_static_malloc>
 800d912:	4602      	mov	r2, r0
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d920:	2b00      	cmp	r3, #0
 800d922:	d102      	bne.n	800d92a <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 800d924:	2301      	movs	r3, #1
 800d926:	73fb      	strb	r3, [r7, #15]
 800d928:	e026      	b.n	800d978 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d930:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	2200      	movs	r2, #0
 800d940:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	2200      	movs	r2, #0
 800d948:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	7c1b      	ldrb	r3, [r3, #16]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d109      	bne.n	800d968 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d95a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d95e:	2101      	movs	r1, #1
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f001 fde2 	bl	800f52a <USBD_LL_PrepareReceive>
 800d966:	e007      	b.n	800d978 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d96e:	2340      	movs	r3, #64	; 0x40
 800d970:	2101      	movs	r1, #1
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f001 fdd9 	bl	800f52a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 800d978:	7bfb      	ldrb	r3, [r7, #15]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b084      	sub	sp, #16
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	460b      	mov	r3, r1
 800d98c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800d98e:	2300      	movs	r3, #0
 800d990:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800d992:	2181      	movs	r1, #129	; 0x81
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f001 fd04 	bl	800f3a2 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800d99a:	2101      	movs	r1, #1
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f001 fd00 	bl	800f3a2 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800d9a2:	2182      	movs	r1, #130	; 0x82
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f001 fcfc 	bl	800f3a2 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00e      	beq.n	800d9d2 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f001 fdf3 	bl	800f5b0 <USBD_static_free>
    pdev->pClassData = NULL;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800d9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d9ec:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d03a      	beq.n	800da70 <USBD_CDC_Setup+0x94>
 800d9fa:	2b20      	cmp	r3, #32
 800d9fc:	d000      	beq.n	800da00 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800d9fe:	e043      	b.n	800da88 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	88db      	ldrh	r3, [r3, #6]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d029      	beq.n	800da5c <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	b25b      	sxtb	r3, r3
 800da0e:	2b00      	cmp	r3, #0
 800da10:	da11      	bge.n	800da36 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800da1e:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da20:	683a      	ldr	r2, [r7, #0]
 800da22:	88d2      	ldrh	r2, [r2, #6]
 800da24:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 800da26:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	88db      	ldrh	r3, [r3, #6]
 800da2c:	461a      	mov	r2, r3
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f001 f80e 	bl	800ea50 <USBD_CtlSendData>
    break;
 800da34:	e029      	b.n	800da8a <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	785a      	ldrb	r2, [r3, #1]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	88db      	ldrh	r3, [r3, #6]
 800da44:	b2da      	uxtb	r2, r3
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 800da4c:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	88db      	ldrh	r3, [r3, #6]
 800da52:	461a      	mov	r2, r3
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f001 f829 	bl	800eaac <USBD_CtlPrepareRx>
    break;
 800da5a:	e016      	b.n	800da8a <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	683a      	ldr	r2, [r7, #0]
 800da66:	7850      	ldrb	r0, [r2, #1]
 800da68:	2200      	movs	r2, #0
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	4798      	blx	r3
    break;
 800da6e:	e00c      	b.n	800da8a <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	785b      	ldrb	r3, [r3, #1]
 800da74:	2b0a      	cmp	r3, #10
 800da76:	d001      	beq.n	800da7c <USBD_CDC_Setup+0xa0>
 800da78:	2b0b      	cmp	r3, #11
      break;
 800da7a:	e005      	b.n	800da88 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 800da7c:	2201      	movs	r2, #1
 800da7e:	4905      	ldr	r1, [pc, #20]	; (800da94 <USBD_CDC_Setup+0xb8>)
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 ffe5 	bl	800ea50 <USBD_CtlSendData>
      break;
 800da86:	bf00      	nop
    break;
 800da88:	bf00      	nop
  }
  return USBD_OK;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	2000260c 	.word	0x2000260c

0800da98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	460b      	mov	r3, r1
 800daa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800daaa:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d005      	beq.n	800dac2 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	e000      	b.n	800dac4 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800dac2:	2302      	movs	r3, #2
  }
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3714      	adds	r7, #20
 800dac8:	46bd      	mov	sp, r7
 800daca:	bc80      	pop	{r7}
 800dacc:	4770      	bx	lr

0800dace <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800dace:	b580      	push	{r7, lr}
 800dad0:	b084      	sub	sp, #16
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
 800dad6:	460b      	mov	r3, r1
 800dad8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dae0:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800dae2:	78fb      	ldrb	r3, [r7, #3]
 800dae4:	4619      	mov	r1, r3
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f001 fd42 	bl	800f570 <USBD_LL_GetRxDataSize>
 800daec:	4602      	mov	r2, r0
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00d      	beq.n	800db1a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	68fa      	ldr	r2, [r7, #12]
 800db08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800db12:	4611      	mov	r1, r2
 800db14:	4798      	blx	r3

    return USBD_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	e000      	b.n	800db1c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800db1a:	2302      	movs	r3, #2
  }
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3710      	adds	r7, #16
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800db32:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d015      	beq.n	800db6a <USBD_CDC_EP0_RxReady+0x46>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800db44:	2bff      	cmp	r3, #255	; 0xff
 800db46:	d010      	beq.n	800db6a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800db56:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800db5e:	b292      	uxth	r2, r2
 800db60:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	22ff      	movs	r2, #255	; 0xff
 800db66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 800db6a:	2300      	movs	r3, #0
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3710      	adds	r7, #16
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2243      	movs	r2, #67	; 0x43
 800db80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800db82:	4b03      	ldr	r3, [pc, #12]	; (800db90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800db84:	4618      	mov	r0, r3
 800db86:	370c      	adds	r7, #12
 800db88:	46bd      	mov	sp, r7
 800db8a:	bc80      	pop	{r7}
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	200000bc 	.word	0x200000bc

0800db94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2243      	movs	r2, #67	; 0x43
 800dba0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800dba2:	4b03      	ldr	r3, [pc, #12]	; (800dbb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bc80      	pop	{r7}
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	20000078 	.word	0x20000078

0800dbb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2243      	movs	r2, #67	; 0x43
 800dbc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800dbc2:	4b03      	ldr	r3, [pc, #12]	; (800dbd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bc80      	pop	{r7}
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop
 800dbd0:	20000100 	.word	0x20000100

0800dbd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	220a      	movs	r2, #10
 800dbe0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800dbe2:	4b03      	ldr	r3, [pc, #12]	; (800dbf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	370c      	adds	r7, #12
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bc80      	pop	{r7}
 800dbec:	4770      	bx	lr
 800dbee:	bf00      	nop
 800dbf0:	20000034 	.word	0x20000034

0800dbf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b085      	sub	sp, #20
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800dbfe:	2302      	movs	r3, #2
 800dc00:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d005      	beq.n	800dc14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	683a      	ldr	r2, [r7, #0]
 800dc0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 800dc10:	2300      	movs	r3, #0
 800dc12:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800dc14:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3714      	adds	r7, #20
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bc80      	pop	{r7}
 800dc1e:	4770      	bx	lr

0800dc20 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b087      	sub	sp, #28
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dc34:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800dc3e:	88fa      	ldrh	r2, [r7, #6]
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800dc46:	2300      	movs	r3, #0
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	371c      	adds	r7, #28
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bc80      	pop	{r7}
 800dc50:	4770      	bx	lr

0800dc52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800dc52:	b480      	push	{r7}
 800dc54:	b085      	sub	sp, #20
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dc62:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	683a      	ldr	r2, [r7, #0]
 800dc68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 800dc6c:	2300      	movs	r3, #0
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bc80      	pop	{r7}
 800dc76:	4770      	bx	lr

0800dc78 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dc86:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d017      	beq.n	800dcc2 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d110      	bne.n	800dcbe <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	2181      	movs	r1, #129	; 0x81
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f001 fc15 	bl	800f4e4 <USBD_LL_Transmit>
      
      return USBD_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	e002      	b.n	800dcc4 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e000      	b.n	800dcc4 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 800dcc2:	2302      	movs	r3, #2
  }
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dcda:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d017      	beq.n	800dd16 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	7c1b      	ldrb	r3, [r3, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d109      	bne.n	800dd02 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dcf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f001 fc15 	bl	800f52a <USBD_LL_PrepareReceive>
 800dd00:	e007      	b.n	800dd12 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dd08:	2340      	movs	r3, #64	; 0x40
 800dd0a:	2101      	movs	r1, #1
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f001 fc0c 	bl	800f52a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800dd12:	2300      	movs	r3, #0
 800dd14:	e000      	b.n	800dd18 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800dd16:	2302      	movs	r3, #2
  }
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800dd34:	2302      	movs	r3, #2
 800dd36:	e01a      	b.n	800dd6e <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d003      	beq.n	800dd4a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d003      	beq.n	800dd58 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	68ba      	ldr	r2, [r7, #8]
 800dd54:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	79fa      	ldrb	r2, [r7, #7]
 800dd64:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f001 fa80 	bl	800f26c <USBD_LL_Init>
  
  return USBD_OK; 
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dd76:	b480      	push	{r7}
 800dd78:	b085      	sub	sp, #20
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800dd80:	2300      	movs	r3, #0
 800dd82:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d006      	beq.n	800dd98 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	683a      	ldr	r2, [r7, #0]
 800dd8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	73fb      	strb	r3, [r7, #15]
 800dd96:	e001      	b.n	800dd9c <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800dd98:	2302      	movs	r3, #2
 800dd9a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bc80      	pop	{r7}
 800dda6:	4770      	bx	lr

0800dda8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f001 fab5 	bl	800f320 <USBD_LL_Start>
  
  return USBD_OK;  
 800ddb6:	2300      	movs	r3, #0
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	370c      	adds	r7, #12
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bc80      	pop	{r7}
 800ddd2:	4770      	bx	lr

0800ddd4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	460b      	mov	r3, r1
 800ddde:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800dde0:	2302      	movs	r3, #2
 800dde2:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00c      	beq.n	800de08 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	78fa      	ldrb	r2, [r7, #3]
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	4798      	blx	r3
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d101      	bne.n	800de08 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800de04:	2300      	movs	r3, #0
 800de06:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 800de08:	7bfb      	ldrb	r3, [r7, #15]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b082      	sub	sp, #8
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	460b      	mov	r3, r1
 800de1c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	78fa      	ldrb	r2, [r7, #3]
 800de28:	4611      	mov	r1, r2
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	4798      	blx	r3
  return USBD_OK;
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f000 fd59 	bl	800e902 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800de5e:	461a      	mov	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800de6c:	f003 031f 	and.w	r3, r3, #31
 800de70:	2b01      	cmp	r3, #1
 800de72:	d00b      	beq.n	800de8c <USBD_LL_SetupStage+0x54>
 800de74:	2b02      	cmp	r3, #2
 800de76:	d011      	beq.n	800de9c <USBD_LL_SetupStage+0x64>
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d117      	bne.n	800deac <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800de82:	4619      	mov	r1, r3
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 f987 	bl	800e198 <USBD_StdDevReq>
    break;
 800de8a:	e01a      	b.n	800dec2 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800de92:	4619      	mov	r1, r3
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f9cf 	bl	800e238 <USBD_StdItfReq>
    break;
 800de9a:	e012      	b.n	800dec2 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dea2:	4619      	mov	r1, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 f9fa 	bl	800e29e <USBD_StdEPReq>
    break;
 800deaa:	e00a      	b.n	800dec2 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800deb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	4619      	mov	r1, r3
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f001 fa90 	bl	800f3e0 <USBD_LL_StallEP>
    break;
 800dec0:	bf00      	nop
  }  
  return USBD_OK;  
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	460b      	mov	r3, r1
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800deda:	7afb      	ldrb	r3, [r7, #11]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d138      	bne.n	800df52 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800dee6:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800deee:	2b03      	cmp	r3, #3
 800def0:	d142      	bne.n	800df78 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	689a      	ldr	r2, [r3, #8]
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	429a      	cmp	r2, r3
 800defc:	d914      	bls.n	800df28 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	689a      	ldr	r2, [r3, #8]
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	1ad2      	subs	r2, r2, r3
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	68da      	ldr	r2, [r3, #12]
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	4293      	cmp	r3, r2
 800df16:	bf28      	it	cs
 800df18:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	461a      	mov	r2, r3
 800df1e:	6879      	ldr	r1, [r7, #4]
 800df20:	68f8      	ldr	r0, [r7, #12]
 800df22:	f000 fde1 	bl	800eae8 <USBD_CtlContinueRx>
 800df26:	e027      	b.n	800df78 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00a      	beq.n	800df4a <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800df3a:	2b03      	cmp	r3, #3
 800df3c:	d105      	bne.n	800df4a <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df44:	691b      	ldr	r3, [r3, #16]
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800df4a:	68f8      	ldr	r0, [r7, #12]
 800df4c:	f000 fdde 	bl	800eb0c <USBD_CtlSendStatus>
 800df50:	e012      	b.n	800df78 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df58:	699b      	ldr	r3, [r3, #24]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00c      	beq.n	800df78 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800df64:	2b03      	cmp	r3, #3
 800df66:	d107      	bne.n	800df78 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df6e:	699b      	ldr	r3, [r3, #24]
 800df70:	7afa      	ldrb	r2, [r7, #11]
 800df72:	4611      	mov	r1, r2
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	4798      	blx	r3
  }  
  return USBD_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3718      	adds	r7, #24
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b086      	sub	sp, #24
 800df86:	af00      	add	r7, sp, #0
 800df88:	60f8      	str	r0, [r7, #12]
 800df8a:	460b      	mov	r3, r1
 800df8c:	607a      	str	r2, [r7, #4]
 800df8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800df90:	7afb      	ldrb	r3, [r7, #11]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d16c      	bne.n	800e070 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	3314      	adds	r3, #20
 800df9a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800dfa2:	2b02      	cmp	r3, #2
 800dfa4:	d157      	bne.n	800e056 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	689a      	ldr	r2, [r3, #8]
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d915      	bls.n	800dfde <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	689a      	ldr	r2, [r3, #8]
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	1ad2      	subs	r2, r2, r3
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	6879      	ldr	r1, [r7, #4]
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f000 fd5c 	bl	800ea88 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	68f8      	ldr	r0, [r7, #12]
 800dfd8:	f001 faa7 	bl	800f52a <USBD_LL_PrepareReceive>
 800dfdc:	e03b      	b.n	800e056 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	697a      	ldr	r2, [r7, #20]
 800dfe4:	68d2      	ldr	r2, [r2, #12]
 800dfe6:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfea:	fb02 f201 	mul.w	r2, r2, r1
 800dfee:	1a9b      	subs	r3, r3, r2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d11c      	bne.n	800e02e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d316      	bcc.n	800e02e <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	685a      	ldr	r2, [r3, #4]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d20f      	bcs.n	800e02e <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800e00e:	2200      	movs	r2, #0
 800e010:	2100      	movs	r1, #0
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f000 fd38 	bl	800ea88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800e020:	2300      	movs	r3, #0
 800e022:	2200      	movs	r2, #0
 800e024:	2100      	movs	r1, #0
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f001 fa7f 	bl	800f52a <USBD_LL_PrepareReceive>
 800e02c:	e013      	b.n	800e056 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e034:	68db      	ldr	r3, [r3, #12]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00a      	beq.n	800e050 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800e040:	2b03      	cmp	r3, #3
 800e042:	d105      	bne.n	800e050 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f000 fd6e 	bl	800eb32 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d11a      	bne.n	800e096 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f7ff fead 	bl	800ddc0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2200      	movs	r2, #0
 800e06a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800e06e:	e012      	b.n	800e096 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e076:	695b      	ldr	r3, [r3, #20]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00c      	beq.n	800e096 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800e082:	2b03      	cmp	r3, #3
 800e084:	d107      	bne.n	800e096 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e08c:	695b      	ldr	r3, [r3, #20]
 800e08e:	7afa      	ldrb	r2, [r7, #11]
 800e090:	4611      	mov	r1, r2
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	4798      	blx	r3
  }  
  return USBD_OK;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3718      	adds	r7, #24
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800e0a8:	2340      	movs	r3, #64	; 0x40
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f001 f951 	bl	800f356 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2240      	movs	r2, #64	; 0x40
 800e0b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800e0bc:	2340      	movs	r3, #64	; 0x40
 800e0be:	2200      	movs	r2, #0
 800e0c0:	2180      	movs	r1, #128	; 0x80
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f001 f947 	bl	800f356 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2240      	movs	r2, #64	; 0x40
 800e0cc:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d009      	beq.n	800e0f4 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	6852      	ldr	r2, [r2, #4]
 800e0ec:	b2d2      	uxtb	r2, r2
 800e0ee:	4611      	mov	r1, r2
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	4798      	blx	r3
 
  
  return USBD_OK;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3708      	adds	r7, #8
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800e0fe:	b480      	push	{r7}
 800e100:	b083      	sub	sp, #12
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	460b      	mov	r3, r1
 800e108:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	78fa      	ldrb	r2, [r7, #3]
 800e10e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	370c      	adds	r7, #12
 800e116:	46bd      	mov	sp, r7
 800e118:	bc80      	pop	{r7}
 800e11a:	4770      	bx	lr

0800e11c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b083      	sub	sp, #12
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2204      	movs	r2, #4
 800e134:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800e138:	2300      	movs	r3, #0
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	370c      	adds	r7, #12
 800e13e:	46bd      	mov	sp, r7
 800e140:	bc80      	pop	{r7}
 800e142:	4770      	bx	lr

0800e144 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800e158:	2300      	movs	r3, #0
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	370c      	adds	r7, #12
 800e15e:	46bd      	mov	sp, r7
 800e160:	bc80      	pop	{r7}
 800e162:	4770      	bx	lr

0800e164 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800e172:	2b03      	cmp	r3, #3
 800e174:	d10b      	bne.n	800e18e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e17c:	69db      	ldr	r3, [r3, #28]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d005      	beq.n	800e18e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e188:	69db      	ldr	r3, [r3, #28]
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800e18e:	2300      	movs	r3, #0
}
 800e190:	4618      	mov	r0, r3
 800e192:	3708      	adds	r7, #8
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	785b      	ldrb	r3, [r3, #1]
 800e1aa:	2b09      	cmp	r3, #9
 800e1ac:	d839      	bhi.n	800e222 <USBD_StdDevReq+0x8a>
 800e1ae:	a201      	add	r2, pc, #4	; (adr r2, 800e1b4 <USBD_StdDevReq+0x1c>)
 800e1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b4:	0800e205 	.word	0x0800e205
 800e1b8:	0800e219 	.word	0x0800e219
 800e1bc:	0800e223 	.word	0x0800e223
 800e1c0:	0800e20f 	.word	0x0800e20f
 800e1c4:	0800e223 	.word	0x0800e223
 800e1c8:	0800e1e7 	.word	0x0800e1e7
 800e1cc:	0800e1dd 	.word	0x0800e1dd
 800e1d0:	0800e223 	.word	0x0800e223
 800e1d4:	0800e1fb 	.word	0x0800e1fb
 800e1d8:	0800e1f1 	.word	0x0800e1f1
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800e1dc:	6839      	ldr	r1, [r7, #0]
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 f936 	bl	800e450 <USBD_GetDescriptor>
    break;
 800e1e4:	e022      	b.n	800e22c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f000 fa25 	bl	800e638 <USBD_SetAddress>
    break;
 800e1ee:	e01d      	b.n	800e22c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 fa5e 	bl	800e6b4 <USBD_SetConfig>
    break;
 800e1f8:	e018      	b.n	800e22c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 fae1 	bl	800e7c4 <USBD_GetConfig>
    break;
 800e202:	e013      	b.n	800e22c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800e204:	6839      	ldr	r1, [r7, #0]
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 fb0e 	bl	800e828 <USBD_GetStatus>
    break;
 800e20c:	e00e      	b.n	800e22c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800e20e:	6839      	ldr	r1, [r7, #0]
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fb33 	bl	800e87c <USBD_SetFeature>
    break;
 800e216:	e009      	b.n	800e22c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800e218:	6839      	ldr	r1, [r7, #0]
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fb49 	bl	800e8b2 <USBD_ClrFeature>
    break;
 800e220:	e004      	b.n	800e22c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800e222:	6839      	ldr	r1, [r7, #0]
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 fba8 	bl	800e97a <USBD_CtlError>
    break;
 800e22a:	bf00      	nop
  }
  
  return ret;
 800e22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop

0800e238 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800e242:	2300      	movs	r3, #0
 800e244:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800e24c:	2b03      	cmp	r3, #3
 800e24e:	d11b      	bne.n	800e288 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	889b      	ldrh	r3, [r3, #4]
 800e254:	b2db      	uxtb	r3, r3
 800e256:	2b01      	cmp	r3, #1
 800e258:	d811      	bhi.n	800e27e <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	6839      	ldr	r1, [r7, #0]
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	88db      	ldrh	r3, [r3, #6]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d110      	bne.n	800e292 <USBD_StdItfReq+0x5a>
 800e270:	7bfb      	ldrb	r3, [r7, #15]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10d      	bne.n	800e292 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fc48 	bl	800eb0c <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800e27c:	e009      	b.n	800e292 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800e27e:	6839      	ldr	r1, [r7, #0]
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 fb7a 	bl	800e97a <USBD_CtlError>
    break;
 800e286:	e004      	b.n	800e292 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 800e288:	6839      	ldr	r1, [r7, #0]
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 fb75 	bl	800e97a <USBD_CtlError>
    break;
 800e290:	e000      	b.n	800e294 <USBD_StdItfReq+0x5c>
    break;
 800e292:	bf00      	nop
  }
  return USBD_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b084      	sub	sp, #16
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	889b      	ldrh	r3, [r3, #4]
 800e2b0:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2ba:	2b20      	cmp	r3, #32
 800e2bc:	d108      	bne.n	800e2d0 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	6839      	ldr	r1, [r7, #0]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	4798      	blx	r3
    
    return USBD_OK;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	e0ba      	b.n	800e446 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	785b      	ldrb	r3, [r3, #1]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d039      	beq.n	800e34c <USBD_StdEPReq+0xae>
 800e2d8:	2b03      	cmp	r3, #3
 800e2da:	d002      	beq.n	800e2e2 <USBD_StdEPReq+0x44>
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d06b      	beq.n	800e3b8 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800e2e0:	e0b0      	b.n	800e444 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800e2e8:	2b02      	cmp	r3, #2
 800e2ea:	d002      	beq.n	800e2f2 <USBD_StdEPReq+0x54>
 800e2ec:	2b03      	cmp	r3, #3
 800e2ee:	d00c      	beq.n	800e30a <USBD_StdEPReq+0x6c>
 800e2f0:	e025      	b.n	800e33e <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800e2f2:	7bbb      	ldrb	r3, [r7, #14]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d027      	beq.n	800e348 <USBD_StdEPReq+0xaa>
 800e2f8:	7bbb      	ldrb	r3, [r7, #14]
 800e2fa:	2b80      	cmp	r3, #128	; 0x80
 800e2fc:	d024      	beq.n	800e348 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800e2fe:	7bbb      	ldrb	r3, [r7, #14]
 800e300:	4619      	mov	r1, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f001 f86c 	bl	800f3e0 <USBD_LL_StallEP>
      break;	
 800e308:	e01e      	b.n	800e348 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	885b      	ldrh	r3, [r3, #2]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10a      	bne.n	800e328 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800e312:	7bbb      	ldrb	r3, [r7, #14]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d007      	beq.n	800e328 <USBD_StdEPReq+0x8a>
 800e318:	7bbb      	ldrb	r3, [r7, #14]
 800e31a:	2b80      	cmp	r3, #128	; 0x80
 800e31c:	d004      	beq.n	800e328 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800e31e:	7bbb      	ldrb	r3, [r7, #14]
 800e320:	4619      	mov	r1, r3
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f001 f85c 	bl	800f3e0 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fbe8 	bl	800eb0c <USBD_CtlSendStatus>
      break;
 800e33c:	e005      	b.n	800e34a <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800e33e:	6839      	ldr	r1, [r7, #0]
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 fb1a 	bl	800e97a <USBD_CtlError>
      break;    
 800e346:	e000      	b.n	800e34a <USBD_StdEPReq+0xac>
      break;	
 800e348:	bf00      	nop
    break;
 800e34a:	e07b      	b.n	800e444 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800e352:	2b02      	cmp	r3, #2
 800e354:	d002      	beq.n	800e35c <USBD_StdEPReq+0xbe>
 800e356:	2b03      	cmp	r3, #3
 800e358:	d00c      	beq.n	800e374 <USBD_StdEPReq+0xd6>
 800e35a:	e024      	b.n	800e3a6 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800e35c:	7bbb      	ldrb	r3, [r7, #14]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d026      	beq.n	800e3b0 <USBD_StdEPReq+0x112>
 800e362:	7bbb      	ldrb	r3, [r7, #14]
 800e364:	2b80      	cmp	r3, #128	; 0x80
 800e366:	d023      	beq.n	800e3b0 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 800e368:	7bbb      	ldrb	r3, [r7, #14]
 800e36a:	4619      	mov	r1, r3
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f001 f837 	bl	800f3e0 <USBD_LL_StallEP>
      break;	
 800e372:	e01d      	b.n	800e3b0 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	885b      	ldrh	r3, [r3, #2]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d11b      	bne.n	800e3b4 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800e37c:	7bbb      	ldrb	r3, [r7, #14]
 800e37e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00b      	beq.n	800e39e <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800e386:	7bbb      	ldrb	r3, [r7, #14]
 800e388:	4619      	mov	r1, r3
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f001 f847 	bl	800f41e <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	6839      	ldr	r1, [r7, #0]
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 fbb4 	bl	800eb0c <USBD_CtlSendStatus>
      break;
 800e3a4:	e006      	b.n	800e3b4 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 800e3a6:	6839      	ldr	r1, [r7, #0]
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fae6 	bl	800e97a <USBD_CtlError>
      break;    
 800e3ae:	e002      	b.n	800e3b6 <USBD_StdEPReq+0x118>
      break;	
 800e3b0:	bf00      	nop
 800e3b2:	e047      	b.n	800e444 <USBD_StdEPReq+0x1a6>
      break;
 800e3b4:	bf00      	nop
    break;
 800e3b6:	e045      	b.n	800e444 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800e3be:	2b02      	cmp	r3, #2
 800e3c0:	d002      	beq.n	800e3c8 <USBD_StdEPReq+0x12a>
 800e3c2:	2b03      	cmp	r3, #3
 800e3c4:	d00b      	beq.n	800e3de <USBD_StdEPReq+0x140>
 800e3c6:	e036      	b.n	800e436 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 800e3c8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d036      	beq.n	800e440 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800e3d2:	7bbb      	ldrb	r3, [r7, #14]
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f001 f802 	bl	800f3e0 <USBD_LL_StallEP>
      break;	
 800e3dc:	e030      	b.n	800e440 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800e3de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	da08      	bge.n	800e3f8 <USBD_StdEPReq+0x15a>
 800e3e6:	7bbb      	ldrb	r3, [r7, #14]
 800e3e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	011b      	lsls	r3, r3, #4
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	3304      	adds	r3, #4
 800e3f6:	e007      	b.n	800e408 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800e3f8:	7bbb      	ldrb	r3, [r7, #14]
 800e3fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800e3fe:	3310      	adds	r3, #16
 800e400:	011b      	lsls	r3, r3, #4
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	4413      	add	r3, r2
 800e406:	3304      	adds	r3, #4
 800e408:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800e40a:	7bbb      	ldrb	r3, [r7, #14]
 800e40c:	4619      	mov	r1, r3
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f001 f824 	bl	800f45c <USBD_LL_IsStallEP>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d003      	beq.n	800e422 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	2201      	movs	r2, #1
 800e41e:	601a      	str	r2, [r3, #0]
 800e420:	e002      	b.n	800e428 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	2200      	movs	r2, #0
 800e426:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800e428:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800e42a:	2202      	movs	r2, #2
 800e42c:	4619      	mov	r1, r3
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 fb0e 	bl	800ea50 <USBD_CtlSendData>
      break;
 800e434:	e005      	b.n	800e442 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800e436:	6839      	ldr	r1, [r7, #0]
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 fa9e 	bl	800e97a <USBD_CtlError>
      break;
 800e43e:	e000      	b.n	800e442 <USBD_StdEPReq+0x1a4>
      break;	
 800e440:	bf00      	nop
    break;
 800e442:	bf00      	nop
  }
  return ret;
 800e444:	7bfb      	ldrb	r3, [r7, #15]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
	...

0800e450 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	885b      	ldrh	r3, [r3, #2]
 800e45e:	0a1b      	lsrs	r3, r3, #8
 800e460:	b29b      	uxth	r3, r3
 800e462:	3b01      	subs	r3, #1
 800e464:	2b06      	cmp	r3, #6
 800e466:	f200 80c9 	bhi.w	800e5fc <USBD_GetDescriptor+0x1ac>
 800e46a:	a201      	add	r2, pc, #4	; (adr r2, 800e470 <USBD_GetDescriptor+0x20>)
 800e46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e470:	0800e48d 	.word	0x0800e48d
 800e474:	0800e4a5 	.word	0x0800e4a5
 800e478:	0800e4e5 	.word	0x0800e4e5
 800e47c:	0800e5fd 	.word	0x0800e5fd
 800e480:	0800e5fd 	.word	0x0800e5fd
 800e484:	0800e5a9 	.word	0x0800e5a9
 800e488:	0800e5cf 	.word	0x0800e5cf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	7c12      	ldrb	r2, [r2, #16]
 800e498:	f107 010a 	add.w	r1, r7, #10
 800e49c:	4610      	mov	r0, r2
 800e49e:	4798      	blx	r3
 800e4a0:	60f8      	str	r0, [r7, #12]
    break;
 800e4a2:	e0b0      	b.n	800e606 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	7c1b      	ldrb	r3, [r3, #16]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10d      	bne.n	800e4c8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b4:	f107 020a 	add.w	r2, r7, #10
 800e4b8:	4610      	mov	r0, r2
 800e4ba:	4798      	blx	r3
 800e4bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	2202      	movs	r2, #2
 800e4c4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e4c6:	e09e      	b.n	800e606 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d0:	f107 020a 	add.w	r2, r7, #10
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	4798      	blx	r3
 800e4d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	2202      	movs	r2, #2
 800e4e0:	701a      	strb	r2, [r3, #0]
    break;
 800e4e2:	e090      	b.n	800e606 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	885b      	ldrh	r3, [r3, #2]
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	2b05      	cmp	r3, #5
 800e4ec:	d856      	bhi.n	800e59c <USBD_GetDescriptor+0x14c>
 800e4ee:	a201      	add	r2, pc, #4	; (adr r2, 800e4f4 <USBD_GetDescriptor+0xa4>)
 800e4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f4:	0800e50d 	.word	0x0800e50d
 800e4f8:	0800e525 	.word	0x0800e525
 800e4fc:	0800e53d 	.word	0x0800e53d
 800e500:	0800e555 	.word	0x0800e555
 800e504:	0800e56d 	.word	0x0800e56d
 800e508:	0800e585 	.word	0x0800e585
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	7c12      	ldrb	r2, [r2, #16]
 800e518:	f107 010a 	add.w	r1, r7, #10
 800e51c:	4610      	mov	r0, r2
 800e51e:	4798      	blx	r3
 800e520:	60f8      	str	r0, [r7, #12]
      break;
 800e522:	e040      	b.n	800e5a6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e52a:	689b      	ldr	r3, [r3, #8]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	7c12      	ldrb	r2, [r2, #16]
 800e530:	f107 010a 	add.w	r1, r7, #10
 800e534:	4610      	mov	r0, r2
 800e536:	4798      	blx	r3
 800e538:	60f8      	str	r0, [r7, #12]
      break;
 800e53a:	e034      	b.n	800e5a6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	7c12      	ldrb	r2, [r2, #16]
 800e548:	f107 010a 	add.w	r1, r7, #10
 800e54c:	4610      	mov	r0, r2
 800e54e:	4798      	blx	r3
 800e550:	60f8      	str	r0, [r7, #12]
      break;
 800e552:	e028      	b.n	800e5a6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e55a:	691b      	ldr	r3, [r3, #16]
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	7c12      	ldrb	r2, [r2, #16]
 800e560:	f107 010a 	add.w	r1, r7, #10
 800e564:	4610      	mov	r0, r2
 800e566:	4798      	blx	r3
 800e568:	60f8      	str	r0, [r7, #12]
      break;
 800e56a:	e01c      	b.n	800e5a6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e572:	695b      	ldr	r3, [r3, #20]
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	7c12      	ldrb	r2, [r2, #16]
 800e578:	f107 010a 	add.w	r1, r7, #10
 800e57c:	4610      	mov	r0, r2
 800e57e:	4798      	blx	r3
 800e580:	60f8      	str	r0, [r7, #12]
      break;
 800e582:	e010      	b.n	800e5a6 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e58a:	699b      	ldr	r3, [r3, #24]
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	7c12      	ldrb	r2, [r2, #16]
 800e590:	f107 010a 	add.w	r1, r7, #10
 800e594:	4610      	mov	r0, r2
 800e596:	4798      	blx	r3
 800e598:	60f8      	str	r0, [r7, #12]
      break;
 800e59a:	e004      	b.n	800e5a6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 f9eb 	bl	800e97a <USBD_CtlError>
      return;
 800e5a4:	e044      	b.n	800e630 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 800e5a6:	e02e      	b.n	800e606 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	7c1b      	ldrb	r3, [r3, #16]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d109      	bne.n	800e5c4 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b8:	f107 020a 	add.w	r2, r7, #10
 800e5bc:	4610      	mov	r0, r2
 800e5be:	4798      	blx	r3
 800e5c0:	60f8      	str	r0, [r7, #12]
      break;
 800e5c2:	e020      	b.n	800e606 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e5c4:	6839      	ldr	r1, [r7, #0]
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 f9d7 	bl	800e97a <USBD_CtlError>
      return;
 800e5cc:	e030      	b.n	800e630 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	7c1b      	ldrb	r3, [r3, #16]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d10d      	bne.n	800e5f2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5de:	f107 020a 	add.w	r2, r7, #10
 800e5e2:	4610      	mov	r0, r2
 800e5e4:	4798      	blx	r3
 800e5e6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	2207      	movs	r2, #7
 800e5ee:	701a      	strb	r2, [r3, #0]
      break; 
 800e5f0:	e009      	b.n	800e606 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 f9c0 	bl	800e97a <USBD_CtlError>
      return;
 800e5fa:	e019      	b.n	800e630 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 800e5fc:	6839      	ldr	r1, [r7, #0]
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f000 f9bb 	bl	800e97a <USBD_CtlError>
    return;
 800e604:	e014      	b.n	800e630 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800e606:	897b      	ldrh	r3, [r7, #10]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d011      	beq.n	800e630 <USBD_GetDescriptor+0x1e0>
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	88db      	ldrh	r3, [r3, #6]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00d      	beq.n	800e630 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	88da      	ldrh	r2, [r3, #6]
 800e618:	897b      	ldrh	r3, [r7, #10]
 800e61a:	4293      	cmp	r3, r2
 800e61c:	bf28      	it	cs
 800e61e:	4613      	movcs	r3, r2
 800e620:	b29b      	uxth	r3, r3
 800e622:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800e624:	897b      	ldrh	r3, [r7, #10]
 800e626:	461a      	mov	r2, r3
 800e628:	68f9      	ldr	r1, [r7, #12]
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 fa10 	bl	800ea50 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop

0800e638 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	889b      	ldrh	r3, [r3, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d12c      	bne.n	800e6a4 <USBD_SetAddress+0x6c>
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	88db      	ldrh	r3, [r3, #6]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d128      	bne.n	800e6a4 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	885b      	ldrh	r3, [r3, #2]
 800e656:	b2db      	uxtb	r3, r3
 800e658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e65c:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800e664:	2b03      	cmp	r3, #3
 800e666:	d104      	bne.n	800e672 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800e668:	6839      	ldr	r1, [r7, #0]
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 f985 	bl	800e97a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800e670:	e01c      	b.n	800e6ac <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	7bfa      	ldrb	r2, [r7, #15]
 800e676:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800e67a:	7bfb      	ldrb	r3, [r7, #15]
 800e67c:	4619      	mov	r1, r3
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 ff11 	bl	800f4a6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 fa41 	bl	800eb0c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800e68a:	7bfb      	ldrb	r3, [r7, #15]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d004      	beq.n	800e69a <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2202      	movs	r2, #2
 800e694:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800e698:	e008      	b.n	800e6ac <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2201      	movs	r2, #1
 800e69e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800e6a2:	e003      	b.n	800e6ac <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800e6a4:	6839      	ldr	r1, [r7, #0]
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 f967 	bl	800e97a <USBD_CtlError>
  } 
}
 800e6ac:	bf00      	nop
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	885b      	ldrh	r3, [r3, #2]
 800e6c2:	b2da      	uxtb	r2, r3
 800e6c4:	4b3e      	ldr	r3, [pc, #248]	; (800e7c0 <USBD_SetConfig+0x10c>)
 800e6c6:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800e6c8:	4b3d      	ldr	r3, [pc, #244]	; (800e7c0 <USBD_SetConfig+0x10c>)
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d904      	bls.n	800e6da <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 f951 	bl	800e97a <USBD_CtlError>
 800e6d8:	e06f      	b.n	800e7ba <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800e6e0:	2b02      	cmp	r3, #2
 800e6e2:	d002      	beq.n	800e6ea <USBD_SetConfig+0x36>
 800e6e4:	2b03      	cmp	r3, #3
 800e6e6:	d023      	beq.n	800e730 <USBD_SetConfig+0x7c>
 800e6e8:	e062      	b.n	800e7b0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800e6ea:	4b35      	ldr	r3, [pc, #212]	; (800e7c0 <USBD_SetConfig+0x10c>)
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d01a      	beq.n	800e728 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800e6f2:	4b33      	ldr	r3, [pc, #204]	; (800e7c0 <USBD_SetConfig+0x10c>)
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2203      	movs	r2, #3
 800e700:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800e704:	4b2e      	ldr	r3, [pc, #184]	; (800e7c0 <USBD_SetConfig+0x10c>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	4619      	mov	r1, r3
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7ff fb62 	bl	800ddd4 <USBD_SetClassConfig>
 800e710:	4603      	mov	r3, r0
 800e712:	2b02      	cmp	r3, #2
 800e714:	d104      	bne.n	800e720 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800e716:	6839      	ldr	r1, [r7, #0]
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f000 f92e 	bl	800e97a <USBD_CtlError>
          return;
 800e71e:	e04c      	b.n	800e7ba <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 f9f3 	bl	800eb0c <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800e726:	e048      	b.n	800e7ba <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 f9ef 	bl	800eb0c <USBD_CtlSendStatus>
      break;
 800e72e:	e044      	b.n	800e7ba <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800e730:	4b23      	ldr	r3, [pc, #140]	; (800e7c0 <USBD_SetConfig+0x10c>)
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d112      	bne.n	800e75e <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2202      	movs	r2, #2
 800e73c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800e740:	4b1f      	ldr	r3, [pc, #124]	; (800e7c0 <USBD_SetConfig+0x10c>)
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	461a      	mov	r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800e74a:	4b1d      	ldr	r3, [pc, #116]	; (800e7c0 <USBD_SetConfig+0x10c>)
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	4619      	mov	r1, r3
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7ff fb5e 	bl	800de12 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 f9d8 	bl	800eb0c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e75c:	e02d      	b.n	800e7ba <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800e75e:	4b18      	ldr	r3, [pc, #96]	; (800e7c0 <USBD_SetConfig+0x10c>)
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d01d      	beq.n	800e7a8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	b2db      	uxtb	r3, r3
 800e772:	4619      	mov	r1, r3
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f7ff fb4c 	bl	800de12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e77a:	4b11      	ldr	r3, [pc, #68]	; (800e7c0 <USBD_SetConfig+0x10c>)
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	461a      	mov	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800e784:	4b0e      	ldr	r3, [pc, #56]	; (800e7c0 <USBD_SetConfig+0x10c>)
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	4619      	mov	r1, r3
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7ff fb22 	bl	800ddd4 <USBD_SetClassConfig>
 800e790:	4603      	mov	r3, r0
 800e792:	2b02      	cmp	r3, #2
 800e794:	d104      	bne.n	800e7a0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800e796:	6839      	ldr	r1, [r7, #0]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 f8ee 	bl	800e97a <USBD_CtlError>
          return;
 800e79e:	e00c      	b.n	800e7ba <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 f9b3 	bl	800eb0c <USBD_CtlSendStatus>
      break;
 800e7a6:	e008      	b.n	800e7ba <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 f9af 	bl	800eb0c <USBD_CtlSendStatus>
      break;
 800e7ae:	e004      	b.n	800e7ba <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800e7b0:	6839      	ldr	r1, [r7, #0]
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 f8e1 	bl	800e97a <USBD_CtlError>
      break;
 800e7b8:	bf00      	nop
    }
  }
}
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	2000260d 	.word	0x2000260d

0800e7c4 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	88db      	ldrh	r3, [r3, #6]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d004      	beq.n	800e7e0 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800e7d6:	6839      	ldr	r1, [r7, #0]
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 f8ce 	bl	800e97a <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800e7de:	e01f      	b.n	800e820 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	d002      	beq.n	800e7f0 <USBD_GetConfig+0x2c>
 800e7ea:	2b03      	cmp	r3, #3
 800e7ec:	d00b      	beq.n	800e806 <USBD_GetConfig+0x42>
 800e7ee:	e012      	b.n	800e816 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 f926 	bl	800ea50 <USBD_CtlSendData>
      break;
 800e804:	e00c      	b.n	800e820 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800e80a:	2201      	movs	r2, #1
 800e80c:	4619      	mov	r1, r3
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 f91e 	bl	800ea50 <USBD_CtlSendData>
      break;
 800e814:	e004      	b.n	800e820 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800e816:	6839      	ldr	r1, [r7, #0]
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 f8ae 	bl	800e97a <USBD_CtlError>
      break;
 800e81e:	bf00      	nop
}
 800e820:	bf00      	nop
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800e838:	3b02      	subs	r3, #2
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d815      	bhi.n	800e86a <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2201      	movs	r2, #1
 800e842:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d005      	beq.n	800e85a <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	f043 0202 	orr.w	r2, r3, #2
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800e85e:	2202      	movs	r2, #2
 800e860:	4619      	mov	r1, r3
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 f8f4 	bl	800ea50 <USBD_CtlSendData>
                      2);
    break;
 800e868:	e004      	b.n	800e874 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800e86a:	6839      	ldr	r1, [r7, #0]
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 f884 	bl	800e97a <USBD_CtlError>
    break;
 800e872:	bf00      	nop
  }
}
 800e874:	bf00      	nop
 800e876:	3708      	adds	r7, #8
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	885b      	ldrh	r3, [r3, #2]
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d10d      	bne.n	800e8aa <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2201      	movs	r2, #1
 800e892:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	6839      	ldr	r1, [r7, #0]
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f000 f931 	bl	800eb0c <USBD_CtlSendStatus>
  }

}
 800e8aa:	bf00      	nop
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800e8c2:	3b02      	subs	r3, #2
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d812      	bhi.n	800e8ee <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	885b      	ldrh	r3, [r3, #2]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d113      	bne.n	800e8f8 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e8de:	689b      	ldr	r3, [r3, #8]
 800e8e0:	6839      	ldr	r1, [r7, #0]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 f910 	bl	800eb0c <USBD_CtlSendStatus>
    }
    break;
 800e8ec:	e004      	b.n	800e8f8 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800e8ee:	6839      	ldr	r1, [r7, #0]
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f000 f842 	bl	800e97a <USBD_CtlError>
    break;
 800e8f6:	e000      	b.n	800e8fa <USBD_ClrFeature+0x48>
    break;
 800e8f8:	bf00      	nop
  }
}
 800e8fa:	bf00      	nop
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e902:	b480      	push	{r7}
 800e904:	b083      	sub	sp, #12
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	781a      	ldrb	r2, [r3, #0]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	785a      	ldrb	r2, [r3, #1]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	3302      	adds	r3, #2
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	b29a      	uxth	r2, r3
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	3303      	adds	r3, #3
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	021b      	lsls	r3, r3, #8
 800e92e:	b29b      	uxth	r3, r3
 800e930:	4413      	add	r3, r2
 800e932:	b29a      	uxth	r2, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	3304      	adds	r3, #4
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	b29a      	uxth	r2, r3
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	3305      	adds	r3, #5
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	b29b      	uxth	r3, r3
 800e948:	021b      	lsls	r3, r3, #8
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	4413      	add	r3, r2
 800e94e:	b29a      	uxth	r2, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	3306      	adds	r3, #6
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	3307      	adds	r3, #7
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	b29b      	uxth	r3, r3
 800e964:	021b      	lsls	r3, r3, #8
 800e966:	b29b      	uxth	r3, r3
 800e968:	4413      	add	r3, r2
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	80da      	strh	r2, [r3, #6]

}
 800e970:	bf00      	nop
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	bc80      	pop	{r7}
 800e978:	4770      	bx	lr

0800e97a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b082      	sub	sp, #8
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
 800e982:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800e984:	2180      	movs	r1, #128	; 0x80
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f000 fd2a 	bl	800f3e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800e98c:	2100      	movs	r1, #0
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 fd26 	bl	800f3e0 <USBD_LL_StallEP>
}
 800e994:	bf00      	nop
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b086      	sub	sp, #24
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d033      	beq.n	800ea1a <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800e9b2:	68f8      	ldr	r0, [r7, #12]
 800e9b4:	f000 f835 	bl	800ea22 <USBD_GetLen>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	005b      	lsls	r3, r3, #1
 800e9c0:	b29a      	uxth	r2, r3
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	881a      	ldrh	r2, [r3, #0]
 800e9ca:	7dfb      	ldrb	r3, [r7, #23]
 800e9cc:	1c59      	adds	r1, r3, #1
 800e9ce:	75f9      	strb	r1, [r7, #23]
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	440b      	add	r3, r1
 800e9d6:	b2d2      	uxtb	r2, r2
 800e9d8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800e9da:	7dfb      	ldrb	r3, [r7, #23]
 800e9dc:	1c5a      	adds	r2, r3, #1
 800e9de:	75fa      	strb	r2, [r7, #23]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	2203      	movs	r2, #3
 800e9e8:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800e9ea:	e012      	b.n	800ea12 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	1c5a      	adds	r2, r3, #1
 800e9f0:	60fa      	str	r2, [r7, #12]
 800e9f2:	7dfa      	ldrb	r2, [r7, #23]
 800e9f4:	1c51      	adds	r1, r2, #1
 800e9f6:	75f9      	strb	r1, [r7, #23]
 800e9f8:	4611      	mov	r1, r2
 800e9fa:	68ba      	ldr	r2, [r7, #8]
 800e9fc:	440a      	add	r2, r1
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800ea02:	7dfb      	ldrb	r3, [r7, #23]
 800ea04:	1c5a      	adds	r2, r3, #1
 800ea06:	75fa      	strb	r2, [r7, #23]
 800ea08:	461a      	mov	r2, r3
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	2200      	movs	r2, #0
 800ea10:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d1e8      	bne.n	800e9ec <USBD_GetString+0x50>
    }
  } 
}
 800ea1a:	bf00      	nop
 800ea1c:	3718      	adds	r7, #24
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}

0800ea22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ea22:	b480      	push	{r7}
 800ea24:	b085      	sub	sp, #20
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 800ea2e:	e005      	b.n	800ea3c <USBD_GetLen+0x1a>
    {
        len++;
 800ea30:	7bfb      	ldrb	r3, [r7, #15]
 800ea32:	3301      	adds	r3, #1
 800ea34:	73fb      	strb	r3, [r7, #15]
        buf++;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d1f5      	bne.n	800ea30 <USBD_GetLen+0xe>
    }

    return len;
 800ea44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bc80      	pop	{r7}
 800ea4e:	4770      	bx	lr

0800ea50 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2202      	movs	r2, #2
 800ea62:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800ea66:	88fa      	ldrh	r2, [r7, #6]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800ea6c:	88fa      	ldrh	r2, [r7, #6]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800ea72:	88fb      	ldrh	r3, [r7, #6]
 800ea74:	68ba      	ldr	r2, [r7, #8]
 800ea76:	2100      	movs	r1, #0
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	f000 fd33 	bl	800f4e4 <USBD_LL_Transmit>
  
  return USBD_OK;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3710      	adds	r7, #16
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	4613      	mov	r3, r2
 800ea94:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800ea96:	88fb      	ldrh	r3, [r7, #6]
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f000 fd21 	bl	800f4e4 <USBD_LL_Transmit>
  
  return USBD_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	4613      	mov	r3, r2
 800eab8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2203      	movs	r2, #3
 800eabe:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800eac2:	88fa      	ldrh	r2, [r7, #6]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800eaca:	88fa      	ldrh	r2, [r7, #6]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800ead2:	88fb      	ldrh	r3, [r7, #6]
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	2100      	movs	r1, #0
 800ead8:	68f8      	ldr	r0, [r7, #12]
 800eada:	f000 fd26 	bl	800f52a <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800eade:	2300      	movs	r3, #0
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3710      	adds	r7, #16
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 800eaf6:	88fb      	ldrh	r3, [r7, #6]
 800eaf8:	68ba      	ldr	r2, [r7, #8]
 800eafa:	2100      	movs	r1, #0
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f000 fd14 	bl	800f52a <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800eb02:	2300      	movs	r3, #0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2204      	movs	r2, #4
 800eb18:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	2200      	movs	r2, #0
 800eb20:	2100      	movs	r1, #0
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f000 fcde 	bl	800f4e4 <USBD_LL_Transmit>
  
  return USBD_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3708      	adds	r7, #8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b082      	sub	sp, #8
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2205      	movs	r2, #5
 800eb3e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800eb42:	2300      	movs	r3, #0
 800eb44:	2200      	movs	r2, #0
 800eb46:	2100      	movs	r1, #0
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f000 fcee 	bl	800f52a <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	4912      	ldr	r1, [pc, #72]	; (800eba8 <MX_USB_DEVICE_Init+0x50>)
 800eb60:	4812      	ldr	r0, [pc, #72]	; (800ebac <MX_USB_DEVICE_Init+0x54>)
 800eb62:	f7ff f8dd 	bl	800dd20 <USBD_Init>
 800eb66:	4603      	mov	r3, r0
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d001      	beq.n	800eb70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eb6c:	f7f7 fa5a 	bl	8006024 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eb70:	490f      	ldr	r1, [pc, #60]	; (800ebb0 <MX_USB_DEVICE_Init+0x58>)
 800eb72:	480e      	ldr	r0, [pc, #56]	; (800ebac <MX_USB_DEVICE_Init+0x54>)
 800eb74:	f7ff f8ff 	bl	800dd76 <USBD_RegisterClass>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800eb7e:	f7f7 fa51 	bl	8006024 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800eb82:	490c      	ldr	r1, [pc, #48]	; (800ebb4 <MX_USB_DEVICE_Init+0x5c>)
 800eb84:	4809      	ldr	r0, [pc, #36]	; (800ebac <MX_USB_DEVICE_Init+0x54>)
 800eb86:	f7ff f835 	bl	800dbf4 <USBD_CDC_RegisterInterface>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d001      	beq.n	800eb94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800eb90:	f7f7 fa48 	bl	8006024 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800eb94:	4805      	ldr	r0, [pc, #20]	; (800ebac <MX_USB_DEVICE_Init+0x54>)
 800eb96:	f7ff f907 	bl	800dda8 <USBD_Start>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d001      	beq.n	800eba4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800eba0:	f7f7 fa40 	bl	8006024 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eba4:	bf00      	nop
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	20000158 	.word	0x20000158
 800ebac:	20002c84 	.word	0x20002c84
 800ebb0:	20000040 	.word	0x20000040
 800ebb4:	20000148 	.word	0x20000148

0800ebb8 <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];
bool    rx_full = false;

uint32_t cdcAvailable(void)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 800ebbe:	4b09      	ldr	r3, [pc, #36]	; (800ebe4 <cdcAvailable+0x2c>)
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	4b09      	ldr	r3, [pc, #36]	; (800ebe8 <cdcAvailable+0x30>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	1ad3      	subs	r3, r2, r3
 800ebc8:	4a08      	ldr	r2, [pc, #32]	; (800ebec <cdcAvailable+0x34>)
 800ebca:	6812      	ldr	r2, [r2, #0]
 800ebcc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebd0:	fb02 f201 	mul.w	r2, r2, r1
 800ebd4:	1a9b      	subs	r3, r3, r2
 800ebd6:	607b      	str	r3, [r7, #4]

  return ret;
 800ebd8:	687b      	ldr	r3, [r7, #4]
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	370c      	adds	r7, #12
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bc80      	pop	{r7}
 800ebe2:	4770      	bx	lr
 800ebe4:	20002610 	.word	0x20002610
 800ebe8:	20002614 	.word	0x20002614
 800ebec:	20000144 	.word	0x20000144

0800ebf0 <cdcRead>:

uint8_t cdcRead(void)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 800ebf6:	4b0e      	ldr	r3, [pc, #56]	; (800ec30 <cdcRead+0x40>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4a0e      	ldr	r2, [pc, #56]	; (800ec34 <cdcRead+0x44>)
 800ebfc:	5cd3      	ldrb	r3, [r2, r3]
 800ebfe:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 800ec00:	4b0b      	ldr	r3, [pc, #44]	; (800ec30 <cdcRead+0x40>)
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	4b0c      	ldr	r3, [pc, #48]	; (800ec38 <cdcRead+0x48>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d00b      	beq.n	800ec24 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 800ec0c:	4b08      	ldr	r3, [pc, #32]	; (800ec30 <cdcRead+0x40>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	3301      	adds	r3, #1
 800ec12:	4a0a      	ldr	r2, [pc, #40]	; (800ec3c <cdcRead+0x4c>)
 800ec14:	6812      	ldr	r2, [r2, #0]
 800ec16:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec1a:	fb02 f201 	mul.w	r2, r2, r1
 800ec1e:	1a9b      	subs	r3, r3, r2
 800ec20:	4a03      	ldr	r2, [pc, #12]	; (800ec30 <cdcRead+0x40>)
 800ec22:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ec24:	79fb      	ldrb	r3, [r7, #7]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	370c      	adds	r7, #12
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bc80      	pop	{r7}
 800ec2e:	4770      	bx	lr
 800ec30:	20002614 	.word	0x20002614
 800ec34:	20003678 	.word	0x20003678
 800ec38:	20002610 	.word	0x20002610
 800ec3c:	20000144 	.word	0x20000144

0800ec40 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;    // overwrite
 800ec4a:	4b0e      	ldr	r3, [pc, #56]	; (800ec84 <cdcDataIn+0x44>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	490e      	ldr	r1, [pc, #56]	; (800ec88 <cdcDataIn+0x48>)
 800ec50:	79fa      	ldrb	r2, [r7, #7]
 800ec52:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 800ec54:	4b0b      	ldr	r3, [pc, #44]	; (800ec84 <cdcDataIn+0x44>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	4a0c      	ldr	r2, [pc, #48]	; (800ec8c <cdcDataIn+0x4c>)
 800ec5c:	6812      	ldr	r2, [r2, #0]
 800ec5e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec62:	fb02 f201 	mul.w	r2, r2, r1
 800ec66:	1a9b      	subs	r3, r3, r2
 800ec68:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 800ec6a:	4b09      	ldr	r3, [pc, #36]	; (800ec90 <cdcDataIn+0x50>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d002      	beq.n	800ec7a <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 800ec74:	4a03      	ldr	r2, [pc, #12]	; (800ec84 <cdcDataIn+0x44>)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6013      	str	r3, [r2, #0]
  }
}
 800ec7a:	bf00      	nop
 800ec7c:	3714      	adds	r7, #20
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bc80      	pop	{r7}
 800ec82:	4770      	bx	lr
 800ec84:	20002610 	.word	0x20002610
 800ec88:	20003678 	.word	0x20003678
 800ec8c:	20000144 	.word	0x20000144
 800ec90:	20002614 	.word	0x20002614

0800ec94 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 800ec9e:	f7f7 f909 	bl	8005eb4 <millis>
 800eca2:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	4619      	mov	r1, r3
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 f8ee 	bl	800ee8c <CDC_Transmit_FS>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 800ecb4:	7afb      	ldrb	r3, [r7, #11]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d101      	bne.n	800ecbe <cdcWrite+0x2a>
    {
      return length;
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	e00e      	b.n	800ecdc <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 800ecbe:	7afb      	ldrb	r3, [r7, #11]
 800ecc0:	2b02      	cmp	r3, #2
 800ecc2:	d101      	bne.n	800ecc8 <cdcWrite+0x34>
    {
      return 0;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	e009      	b.n	800ecdc <cdcWrite+0x48>
    }

    if(millis() - pre_time >= 100)    // time out handling.
 800ecc8:	f7f7 f8f4 	bl	8005eb4 <millis>
 800eccc:	4602      	mov	r2, r0
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	2b63      	cmp	r3, #99	; 0x63
 800ecd4:	d800      	bhi.n	800ecd8 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 800ecd6:	e7e5      	b.n	800eca4 <cdcWrite+0x10>
    {
      break;
 800ecd8:	bf00      	nop
    }
  }
  return 0;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <USB_CDC_SOF>:
{
  return LineCoding.bitrate;
}

uint8_t USB_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 800ece4:	b590      	push	{r4, r7, lr}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]

  if(rx_full == true)
 800ecec:	4b0c      	ldr	r3, [pc, #48]	; (800ed20 <USB_CDC_SOF+0x3c>)
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d010      	beq.n	800ed16 <USB_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    /* amount of empty space in receive buffer */
    buf_len = (rx_len - cdcAvailable()) - 1;
 800ecf4:	4b0b      	ldr	r3, [pc, #44]	; (800ed24 <USB_CDC_SOF+0x40>)
 800ecf6:	681c      	ldr	r4, [r3, #0]
 800ecf8:	f7ff ff5e 	bl	800ebb8 <cdcAvailable>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	1ae3      	subs	r3, r4, r3
 800ed00:	3b01      	subs	r3, #1
 800ed02:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2b3f      	cmp	r3, #63	; 0x3f
 800ed08:	d905      	bls.n	800ed16 <USB_CDC_SOF+0x32>
    {
      /* Allow next data transmission */
      USBD_CDC_ReceivePacket(pdev);
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f7fe ffde 	bl	800dccc <USBD_CDC_ReceivePacket>
      rx_full = false;
 800ed10:	4b03      	ldr	r3, [pc, #12]	; (800ed20 <USB_CDC_SOF+0x3c>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	701a      	strb	r2, [r3, #0]
    }
  }


  return 0;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3714      	adds	r7, #20
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd90      	pop	{r4, r7, pc}
 800ed20:	20002618 	.word	0x20002618
 800ed24:	20000144 	.word	0x20000144

0800ed28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	4905      	ldr	r1, [pc, #20]	; (800ed44 <CDC_Init_FS+0x1c>)
 800ed30:	4805      	ldr	r0, [pc, #20]	; (800ed48 <CDC_Init_FS+0x20>)
 800ed32:	f7fe ff75 	bl	800dc20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ed36:	4905      	ldr	r1, [pc, #20]	; (800ed4c <CDC_Init_FS+0x24>)
 800ed38:	4803      	ldr	r0, [pc, #12]	; (800ed48 <CDC_Init_FS+0x20>)
 800ed3a:	f7fe ff8a 	bl	800dc52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ed3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	20003290 	.word	0x20003290
 800ed48:	20002c84 	.word	0x20002c84
 800ed4c:	20002ea8 	.word	0x20002ea8

0800ed50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ed50:	b480      	push	{r7}
 800ed52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ed54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bc80      	pop	{r7}
 800ed5c:	4770      	bx	lr
	...

0800ed60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	4603      	mov	r3, r0
 800ed68:	6039      	str	r1, [r7, #0]
 800ed6a:	71fb      	strb	r3, [r7, #7]
 800ed6c:	4613      	mov	r3, r2
 800ed6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ed70:	79fb      	ldrb	r3, [r7, #7]
 800ed72:	2b23      	cmp	r3, #35	; 0x23
 800ed74:	d84a      	bhi.n	800ee0c <CDC_Control_FS+0xac>
 800ed76:	a201      	add	r2, pc, #4	; (adr r2, 800ed7c <CDC_Control_FS+0x1c>)
 800ed78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7c:	0800ee0d 	.word	0x0800ee0d
 800ed80:	0800ee0d 	.word	0x0800ee0d
 800ed84:	0800ee0d 	.word	0x0800ee0d
 800ed88:	0800ee0d 	.word	0x0800ee0d
 800ed8c:	0800ee0d 	.word	0x0800ee0d
 800ed90:	0800ee0d 	.word	0x0800ee0d
 800ed94:	0800ee0d 	.word	0x0800ee0d
 800ed98:	0800ee0d 	.word	0x0800ee0d
 800ed9c:	0800ee0d 	.word	0x0800ee0d
 800eda0:	0800ee0d 	.word	0x0800ee0d
 800eda4:	0800ee0d 	.word	0x0800ee0d
 800eda8:	0800ee0d 	.word	0x0800ee0d
 800edac:	0800ee0d 	.word	0x0800ee0d
 800edb0:	0800ee0d 	.word	0x0800ee0d
 800edb4:	0800ee0d 	.word	0x0800ee0d
 800edb8:	0800ee0d 	.word	0x0800ee0d
 800edbc:	0800ee0d 	.word	0x0800ee0d
 800edc0:	0800ee0d 	.word	0x0800ee0d
 800edc4:	0800ee0d 	.word	0x0800ee0d
 800edc8:	0800ee0d 	.word	0x0800ee0d
 800edcc:	0800ee0d 	.word	0x0800ee0d
 800edd0:	0800ee0d 	.word	0x0800ee0d
 800edd4:	0800ee0d 	.word	0x0800ee0d
 800edd8:	0800ee0d 	.word	0x0800ee0d
 800eddc:	0800ee0d 	.word	0x0800ee0d
 800ede0:	0800ee0d 	.word	0x0800ee0d
 800ede4:	0800ee0d 	.word	0x0800ee0d
 800ede8:	0800ee0d 	.word	0x0800ee0d
 800edec:	0800ee0d 	.word	0x0800ee0d
 800edf0:	0800ee0d 	.word	0x0800ee0d
 800edf4:	0800ee0d 	.word	0x0800ee0d
 800edf8:	0800ee0d 	.word	0x0800ee0d
 800edfc:	0800ee0d 	.word	0x0800ee0d
 800ee00:	0800ee0d 	.word	0x0800ee0d
 800ee04:	0800ee0d 	.word	0x0800ee0d
 800ee08:	0800ee0d 	.word	0x0800ee0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ee0c:	bf00      	nop
  }

  return (USBD_OK);
 800ee0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bc80      	pop	{r7}
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop

0800ee1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ee1c:	b590      	push	{r4, r7, lr}
 800ee1e:	b085      	sub	sp, #20
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t buf_len;


  for(int i=0; i<*Len; i++)
 800ee26:	2300      	movs	r3, #0
 800ee28:	60fb      	str	r3, [r7, #12]
 800ee2a:	e009      	b.n	800ee40 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	4413      	add	r3, r2
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7ff ff03 	bl	800ec40 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	60fb      	str	r3, [r7, #12]
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d8f0      	bhi.n	800ee2c <CDC_Receive_FS+0x10>
  }

  /* amount of empty space in receive buffer */
  buf_len = (rx_len - cdcAvailable()) - 1;
 800ee4a:	4b0d      	ldr	r3, [pc, #52]	; (800ee80 <CDC_Receive_FS+0x64>)
 800ee4c:	681c      	ldr	r4, [r3, #0]
 800ee4e:	f7ff feb3 	bl	800ebb8 <cdcAvailable>
 800ee52:	4603      	mov	r3, r0
 800ee54:	1ae3      	subs	r3, r4, r3
 800ee56:	3b01      	subs	r3, #1
 800ee58:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	2b3f      	cmp	r3, #63	; 0x3f
 800ee5e:	d907      	bls.n	800ee70 <CDC_Receive_FS+0x54>
  {
    /* Allow next data transmission */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ee60:	6879      	ldr	r1, [r7, #4]
 800ee62:	4808      	ldr	r0, [pc, #32]	; (800ee84 <CDC_Receive_FS+0x68>)
 800ee64:	f7fe fef5 	bl	800dc52 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ee68:	4806      	ldr	r0, [pc, #24]	; (800ee84 <CDC_Receive_FS+0x68>)
 800ee6a:	f7fe ff2f 	bl	800dccc <USBD_CDC_ReceivePacket>
 800ee6e:	e002      	b.n	800ee76 <CDC_Receive_FS+0x5a>
  }
  else
  {
    /* wait as the insufficient buffer capacity */
    rx_full = true;
 800ee70:	4b05      	ldr	r3, [pc, #20]	; (800ee88 <CDC_Receive_FS+0x6c>)
 800ee72:	2201      	movs	r2, #1
 800ee74:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 800ee76:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3714      	adds	r7, #20
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd90      	pop	{r4, r7, pc}
 800ee80:	20000144 	.word	0x20000144
 800ee84:	20002c84 	.word	0x20002c84
 800ee88:	20002618 	.word	0x20002618

0800ee8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	460b      	mov	r3, r1
 800ee96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ee9c:	4b0d      	ldr	r3, [pc, #52]	; (800eed4 <CDC_Transmit_FS+0x48>)
 800ee9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eea2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d001      	beq.n	800eeb2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e00b      	b.n	800eeca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800eeb2:	887b      	ldrh	r3, [r7, #2]
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	6879      	ldr	r1, [r7, #4]
 800eeb8:	4806      	ldr	r0, [pc, #24]	; (800eed4 <CDC_Transmit_FS+0x48>)
 800eeba:	f7fe feb1 	bl	800dc20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800eebe:	4805      	ldr	r0, [pc, #20]	; (800eed4 <CDC_Transmit_FS+0x48>)
 800eec0:	f7fe feda 	bl	800dc78 <USBD_CDC_TransmitPacket>
 800eec4:	4603      	mov	r3, r0
 800eec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	20002c84 	.word	0x20002c84

0800eed8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	6039      	str	r1, [r7, #0]
 800eee2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	2212      	movs	r2, #18
 800eee8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eeea:	4b03      	ldr	r3, [pc, #12]	; (800eef8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bc80      	pop	{r7}
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	20000174 	.word	0x20000174

0800eefc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	4603      	mov	r3, r0
 800ef04:	6039      	str	r1, [r7, #0]
 800ef06:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	2204      	movs	r2, #4
 800ef0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef0e:	4b03      	ldr	r3, [pc, #12]	; (800ef1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bc80      	pop	{r7}
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	20000188 	.word	0x20000188

0800ef20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	4603      	mov	r3, r0
 800ef28:	6039      	str	r1, [r7, #0]
 800ef2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef2c:	79fb      	ldrb	r3, [r7, #7]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d105      	bne.n	800ef3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef32:	683a      	ldr	r2, [r7, #0]
 800ef34:	4907      	ldr	r1, [pc, #28]	; (800ef54 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef36:	4808      	ldr	r0, [pc, #32]	; (800ef58 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef38:	f7ff fd30 	bl	800e99c <USBD_GetString>
 800ef3c:	e004      	b.n	800ef48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef3e:	683a      	ldr	r2, [r7, #0]
 800ef40:	4904      	ldr	r1, [pc, #16]	; (800ef54 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef42:	4805      	ldr	r0, [pc, #20]	; (800ef58 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef44:	f7ff fd2a 	bl	800e99c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef48:	4b02      	ldr	r3, [pc, #8]	; (800ef54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	20003878 	.word	0x20003878
 800ef58:	08012624 	.word	0x08012624

0800ef5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	4603      	mov	r3, r0
 800ef64:	6039      	str	r1, [r7, #0]
 800ef66:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ef68:	683a      	ldr	r2, [r7, #0]
 800ef6a:	4904      	ldr	r1, [pc, #16]	; (800ef7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ef6c:	4804      	ldr	r0, [pc, #16]	; (800ef80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ef6e:	f7ff fd15 	bl	800e99c <USBD_GetString>
  return USBD_StrDesc;
 800ef72:	4b02      	ldr	r3, [pc, #8]	; (800ef7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	20003878 	.word	0x20003878
 800ef80:	0801263c 	.word	0x0801263c

0800ef84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	6039      	str	r1, [r7, #0]
 800ef8e:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	221a      	movs	r2, #26
 800ef94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef96:	f000 f843 	bl	800f020 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800ef9a:	4b02      	ldr	r3, [pc, #8]	; (800efa4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	2000018c 	.word	0x2000018c

0800efa8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	4603      	mov	r3, r0
 800efb0:	6039      	str	r1, [r7, #0]
 800efb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800efb4:	79fb      	ldrb	r3, [r7, #7]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d105      	bne.n	800efc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	4907      	ldr	r1, [pc, #28]	; (800efdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800efbe:	4808      	ldr	r0, [pc, #32]	; (800efe0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efc0:	f7ff fcec 	bl	800e99c <USBD_GetString>
 800efc4:	e004      	b.n	800efd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efc6:	683a      	ldr	r2, [r7, #0]
 800efc8:	4904      	ldr	r1, [pc, #16]	; (800efdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800efca:	4805      	ldr	r0, [pc, #20]	; (800efe0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efcc:	f7ff fce6 	bl	800e99c <USBD_GetString>
  }
  return USBD_StrDesc;
 800efd0:	4b02      	ldr	r3, [pc, #8]	; (800efdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	20003878 	.word	0x20003878
 800efe0:	08012650 	.word	0x08012650

0800efe4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	6039      	str	r1, [r7, #0]
 800efee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eff0:	79fb      	ldrb	r3, [r7, #7]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d105      	bne.n	800f002 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	4907      	ldr	r1, [pc, #28]	; (800f018 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800effa:	4808      	ldr	r0, [pc, #32]	; (800f01c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800effc:	f7ff fcce 	bl	800e99c <USBD_GetString>
 800f000:	e004      	b.n	800f00c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f002:	683a      	ldr	r2, [r7, #0]
 800f004:	4904      	ldr	r1, [pc, #16]	; (800f018 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f006:	4805      	ldr	r0, [pc, #20]	; (800f01c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f008:	f7ff fcc8 	bl	800e99c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f00c:	4b02      	ldr	r3, [pc, #8]	; (800f018 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	20003878 	.word	0x20003878
 800f01c:	0801265c 	.word	0x0801265c

0800f020 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f026:	4b0f      	ldr	r3, [pc, #60]	; (800f064 <Get_SerialNum+0x44>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f02c:	4b0e      	ldr	r3, [pc, #56]	; (800f068 <Get_SerialNum+0x48>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f032:	4b0e      	ldr	r3, [pc, #56]	; (800f06c <Get_SerialNum+0x4c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f038:	68fa      	ldr	r2, [r7, #12]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4413      	add	r3, r2
 800f03e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d009      	beq.n	800f05a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f046:	2208      	movs	r2, #8
 800f048:	4909      	ldr	r1, [pc, #36]	; (800f070 <Get_SerialNum+0x50>)
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f000 f814 	bl	800f078 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f050:	2204      	movs	r2, #4
 800f052:	4908      	ldr	r1, [pc, #32]	; (800f074 <Get_SerialNum+0x54>)
 800f054:	68b8      	ldr	r0, [r7, #8]
 800f056:	f000 f80f 	bl	800f078 <IntToUnicode>
  }
}
 800f05a:	bf00      	nop
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	1ffff7e8 	.word	0x1ffff7e8
 800f068:	1ffff7ec 	.word	0x1ffff7ec
 800f06c:	1ffff7f0 	.word	0x1ffff7f0
 800f070:	2000018e 	.word	0x2000018e
 800f074:	2000019e 	.word	0x2000019e

0800f078 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f078:	b480      	push	{r7}
 800f07a:	b087      	sub	sp, #28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	4613      	mov	r3, r2
 800f084:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f086:	2300      	movs	r3, #0
 800f088:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f08a:	2300      	movs	r3, #0
 800f08c:	75fb      	strb	r3, [r7, #23]
 800f08e:	e027      	b.n	800f0e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	0f1b      	lsrs	r3, r3, #28
 800f094:	2b09      	cmp	r3, #9
 800f096:	d80b      	bhi.n	800f0b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	0f1b      	lsrs	r3, r3, #28
 800f09c:	b2da      	uxtb	r2, r3
 800f09e:	7dfb      	ldrb	r3, [r7, #23]
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	440b      	add	r3, r1
 800f0a8:	3230      	adds	r2, #48	; 0x30
 800f0aa:	b2d2      	uxtb	r2, r2
 800f0ac:	701a      	strb	r2, [r3, #0]
 800f0ae:	e00a      	b.n	800f0c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	0f1b      	lsrs	r3, r3, #28
 800f0b4:	b2da      	uxtb	r2, r3
 800f0b6:	7dfb      	ldrb	r3, [r7, #23]
 800f0b8:	005b      	lsls	r3, r3, #1
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	440b      	add	r3, r1
 800f0c0:	3237      	adds	r2, #55	; 0x37
 800f0c2:	b2d2      	uxtb	r2, r2
 800f0c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	011b      	lsls	r3, r3, #4
 800f0ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f0cc:	7dfb      	ldrb	r3, [r7, #23]
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	68ba      	ldr	r2, [r7, #8]
 800f0d4:	4413      	add	r3, r2
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f0da:	7dfb      	ldrb	r3, [r7, #23]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	75fb      	strb	r3, [r7, #23]
 800f0e0:	7dfa      	ldrb	r2, [r7, #23]
 800f0e2:	79fb      	ldrb	r3, [r7, #7]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d3d3      	bcc.n	800f090 <IntToUnicode+0x18>
  }
}
 800f0e8:	bf00      	nop
 800f0ea:	371c      	adds	r7, #28
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bc80      	pop	{r7}
 800f0f0:	4770      	bx	lr
	...

0800f0f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b084      	sub	sp, #16
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a0d      	ldr	r2, [pc, #52]	; (800f138 <HAL_PCD_MspInit+0x44>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d113      	bne.n	800f12e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f106:	4b0d      	ldr	r3, [pc, #52]	; (800f13c <HAL_PCD_MspInit+0x48>)
 800f108:	69db      	ldr	r3, [r3, #28]
 800f10a:	4a0c      	ldr	r2, [pc, #48]	; (800f13c <HAL_PCD_MspInit+0x48>)
 800f10c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f110:	61d3      	str	r3, [r2, #28]
 800f112:	4b0a      	ldr	r3, [pc, #40]	; (800f13c <HAL_PCD_MspInit+0x48>)
 800f114:	69db      	ldr	r3, [r3, #28]
 800f116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f11a:	60fb      	str	r3, [r7, #12]
 800f11c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800f11e:	2200      	movs	r2, #0
 800f120:	2100      	movs	r1, #0
 800f122:	2014      	movs	r0, #20
 800f124:	f7f9 ff47 	bl	8008fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800f128:	2014      	movs	r0, #20
 800f12a:	f7f9 ff60 	bl	8008fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f12e:	bf00      	nop
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	40005c00 	.word	0x40005c00
 800f13c:	40021000 	.word	0x40021000

0800f140 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800f154:	4619      	mov	r1, r3
 800f156:	4610      	mov	r0, r2
 800f158:	f7fe fe6e 	bl	800de38 <USBD_LL_SetupStage>
}
 800f15c:	bf00      	nop
 800f15e:	3708      	adds	r7, #8
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	460b      	mov	r3, r1
 800f16e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 800f176:	78fb      	ldrb	r3, [r7, #3]
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	015b      	lsls	r3, r3, #5
 800f17c:	4413      	add	r3, r2
 800f17e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	78fb      	ldrb	r3, [r7, #3]
 800f186:	4619      	mov	r1, r3
 800f188:	f7fe fea0 	bl	800decc <USBD_LL_DataOutStage>
}
 800f18c:	bf00      	nop
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	460b      	mov	r3, r1
 800f19e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 800f1a6:	78fb      	ldrb	r3, [r7, #3]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	015b      	lsls	r3, r3, #5
 800f1ac:	4413      	add	r3, r2
 800f1ae:	333c      	adds	r3, #60	; 0x3c
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	78fb      	ldrb	r3, [r7, #3]
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	f7fe fee4 	bl	800df82 <USBD_LL_DataInStage>
}
 800f1ba:	bf00      	nop
 800f1bc:	3708      	adds	r7, #8
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	b082      	sub	sp, #8
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7fe ffc7 	bl	800e164 <USBD_LL_SOF>
}
 800f1d6:	bf00      	nop
 800f1d8:	3708      	adds	r7, #8
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b084      	sub	sp, #16
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	2b02      	cmp	r3, #2
 800f1f0:	d001      	beq.n	800f1f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f1f2:	f7f6 ff17 	bl	8006024 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800f1fc:	7bfa      	ldrb	r2, [r7, #15]
 800f1fe:	4611      	mov	r1, r2
 800f200:	4618      	mov	r0, r3
 800f202:	f7fe ff7c 	bl	800e0fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fe ff47 	bl	800e0a0 <USBD_LL_Reset>
}
 800f212:	bf00      	nop
 800f214:	3710      	adds	r7, #16
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
	...

0800f21c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fe ff76 	bl	800e11c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	699b      	ldr	r3, [r3, #24]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d005      	beq.n	800f244 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f238:	4b04      	ldr	r3, [pc, #16]	; (800f24c <HAL_PCD_SuspendCallback+0x30>)
 800f23a:	691b      	ldr	r3, [r3, #16]
 800f23c:	4a03      	ldr	r2, [pc, #12]	; (800f24c <HAL_PCD_SuspendCallback+0x30>)
 800f23e:	f043 0306 	orr.w	r3, r3, #6
 800f242:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f244:	bf00      	nop
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	e000ed00 	.word	0xe000ed00

0800f250 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fe ff70 	bl	800e144 <USBD_LL_Resume>
}
 800f264:	bf00      	nop
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800f274:	4a28      	ldr	r2, [pc, #160]	; (800f318 <USBD_LL_Init+0xac>)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4a26      	ldr	r2, [pc, #152]	; (800f318 <USBD_LL_Init+0xac>)
 800f280:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 800f284:	4b24      	ldr	r3, [pc, #144]	; (800f318 <USBD_LL_Init+0xac>)
 800f286:	4a25      	ldr	r2, [pc, #148]	; (800f31c <USBD_LL_Init+0xb0>)
 800f288:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f28a:	4b23      	ldr	r3, [pc, #140]	; (800f318 <USBD_LL_Init+0xac>)
 800f28c:	2208      	movs	r2, #8
 800f28e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f290:	4b21      	ldr	r3, [pc, #132]	; (800f318 <USBD_LL_Init+0xac>)
 800f292:	2202      	movs	r2, #2
 800f294:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f296:	4b20      	ldr	r3, [pc, #128]	; (800f318 <USBD_LL_Init+0xac>)
 800f298:	2200      	movs	r2, #0
 800f29a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f29c:	4b1e      	ldr	r3, [pc, #120]	; (800f318 <USBD_LL_Init+0xac>)
 800f29e:	2200      	movs	r2, #0
 800f2a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f2a2:	4b1d      	ldr	r3, [pc, #116]	; (800f318 <USBD_LL_Init+0xac>)
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f2a8:	481b      	ldr	r0, [pc, #108]	; (800f318 <USBD_LL_Init+0xac>)
 800f2aa:	f7fa fdf2 	bl	8009e92 <HAL_PCD_Init>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d001      	beq.n	800f2b8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800f2b4:	f7f6 feb6 	bl	8006024 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f2be:	2318      	movs	r3, #24
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	2100      	movs	r1, #0
 800f2c4:	f7fb fcfa 	bl	800acbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f2ce:	2358      	movs	r3, #88	; 0x58
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	2180      	movs	r1, #128	; 0x80
 800f2d4:	f7fb fcf2 	bl	800acbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f2de:	23c0      	movs	r3, #192	; 0xc0
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	2181      	movs	r1, #129	; 0x81
 800f2e4:	f7fb fcea 	bl	800acbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f2ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	2101      	movs	r1, #1
 800f2f6:	f7fb fce1 	bl	800acbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f300:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f304:	2200      	movs	r2, #0
 800f306:	2182      	movs	r1, #130	; 0x82
 800f308:	f7fb fcd8 	bl	800acbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f30c:	2300      	movs	r3, #0
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3708      	adds	r7, #8
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	20003a78 	.word	0x20003a78
 800f31c:	40005c00 	.word	0x40005c00

0800f320 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f328:	2300      	movs	r3, #0
 800f32a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f32c:	2300      	movs	r3, #0
 800f32e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f336:	4618      	mov	r0, r3
 800f338:	f7fa fe85 	bl	800a046 <HAL_PCD_Start>
 800f33c:	4603      	mov	r3, r0
 800f33e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f340:	7bfb      	ldrb	r3, [r7, #15]
 800f342:	4618      	mov	r0, r3
 800f344:	f000 f948 	bl	800f5d8 <USBD_Get_USB_Status>
 800f348:	4603      	mov	r3, r0
 800f34a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f34c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3710      	adds	r7, #16
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f356:	b580      	push	{r7, lr}
 800f358:	b084      	sub	sp, #16
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
 800f35e:	4608      	mov	r0, r1
 800f360:	4611      	mov	r1, r2
 800f362:	461a      	mov	r2, r3
 800f364:	4603      	mov	r3, r0
 800f366:	70fb      	strb	r3, [r7, #3]
 800f368:	460b      	mov	r3, r1
 800f36a:	70bb      	strb	r3, [r7, #2]
 800f36c:	4613      	mov	r3, r2
 800f36e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f370:	2300      	movs	r3, #0
 800f372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f374:	2300      	movs	r3, #0
 800f376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f37e:	78bb      	ldrb	r3, [r7, #2]
 800f380:	883a      	ldrh	r2, [r7, #0]
 800f382:	78f9      	ldrb	r1, [r7, #3]
 800f384:	f7fa ffac 	bl	800a2e0 <HAL_PCD_EP_Open>
 800f388:	4603      	mov	r3, r0
 800f38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f38c:	7bfb      	ldrb	r3, [r7, #15]
 800f38e:	4618      	mov	r0, r3
 800f390:	f000 f922 	bl	800f5d8 <USBD_Get_USB_Status>
 800f394:	4603      	mov	r3, r0
 800f396:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800f398:	7bbb      	ldrb	r3, [r7, #14]
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}

0800f3a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3a2:	b580      	push	{r7, lr}
 800f3a4:	b084      	sub	sp, #16
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	6078      	str	r0, [r7, #4]
 800f3aa:	460b      	mov	r3, r1
 800f3ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f3bc:	78fa      	ldrb	r2, [r7, #3]
 800f3be:	4611      	mov	r1, r2
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fa ffe2 	bl	800a38a <HAL_PCD_EP_Close>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3ca:	7bfb      	ldrb	r3, [r7, #15]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f000 f903 	bl	800f5d8 <USBD_Get_USB_Status>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800f3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3710      	adds	r7, #16
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f3fa:	78fa      	ldrb	r2, [r7, #3]
 800f3fc:	4611      	mov	r1, r2
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fb f895 	bl	800a52e <HAL_PCD_EP_SetStall>
 800f404:	4603      	mov	r3, r0
 800f406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f408:	7bfb      	ldrb	r3, [r7, #15]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f000 f8e4 	bl	800f5d8 <USBD_Get_USB_Status>
 800f410:	4603      	mov	r3, r0
 800f412:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800f414:	7bbb      	ldrb	r3, [r7, #14]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b084      	sub	sp, #16
 800f422:	af00      	add	r7, sp, #0
 800f424:	6078      	str	r0, [r7, #4]
 800f426:	460b      	mov	r3, r1
 800f428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f42a:	2300      	movs	r3, #0
 800f42c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f42e:	2300      	movs	r3, #0
 800f430:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f438:	78fa      	ldrb	r2, [r7, #3]
 800f43a:	4611      	mov	r1, r2
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fb f8cb 	bl	800a5d8 <HAL_PCD_EP_ClrStall>
 800f442:	4603      	mov	r3, r0
 800f444:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f446:	7bfb      	ldrb	r3, [r7, #15]
 800f448:	4618      	mov	r0, r3
 800f44a:	f000 f8c5 	bl	800f5d8 <USBD_Get_USB_Status>
 800f44e:	4603      	mov	r3, r0
 800f450:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800f452:	7bbb      	ldrb	r3, [r7, #14]
}
 800f454:	4618      	mov	r0, r3
 800f456:	3710      	adds	r7, #16
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b085      	sub	sp, #20
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	460b      	mov	r3, r1
 800f466:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f46e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800f470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f474:	2b00      	cmp	r3, #0
 800f476:	da08      	bge.n	800f48a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800f478:	78fb      	ldrb	r3, [r7, #3]
 800f47a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f47e:	68fa      	ldr	r2, [r7, #12]
 800f480:	015b      	lsls	r3, r3, #5
 800f482:	4413      	add	r3, r2
 800f484:	332a      	adds	r3, #42	; 0x2a
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	e008      	b.n	800f49c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800f48a:	78fb      	ldrb	r3, [r7, #3]
 800f48c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f490:	68fa      	ldr	r2, [r7, #12]
 800f492:	015b      	lsls	r3, r3, #5
 800f494:	4413      	add	r3, r2
 800f496:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800f49a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3714      	adds	r7, #20
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bc80      	pop	{r7}
 800f4a4:	4770      	bx	lr

0800f4a6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b084      	sub	sp, #16
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f4c0:	78fa      	ldrb	r2, [r7, #3]
 800f4c2:	4611      	mov	r1, r2
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7fa fee6 	bl	800a296 <HAL_PCD_SetAddress>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4ce:	7bfb      	ldrb	r3, [r7, #15]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f000 f881 	bl	800f5d8 <USBD_Get_USB_Status>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800f4da:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3710      	adds	r7, #16
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b086      	sub	sp, #24
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	607a      	str	r2, [r7, #4]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	72fb      	strb	r3, [r7, #11]
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f506:	893b      	ldrh	r3, [r7, #8]
 800f508:	7af9      	ldrb	r1, [r7, #11]
 800f50a:	687a      	ldr	r2, [r7, #4]
 800f50c:	f7fa ffd4 	bl	800a4b8 <HAL_PCD_EP_Transmit>
 800f510:	4603      	mov	r3, r0
 800f512:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f514:	7dfb      	ldrb	r3, [r7, #23]
 800f516:	4618      	mov	r0, r3
 800f518:	f000 f85e 	bl	800f5d8 <USBD_Get_USB_Status>
 800f51c:	4603      	mov	r3, r0
 800f51e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800f520:	7dbb      	ldrb	r3, [r7, #22]
}
 800f522:	4618      	mov	r0, r3
 800f524:	3718      	adds	r7, #24
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f52a:	b580      	push	{r7, lr}
 800f52c:	b086      	sub	sp, #24
 800f52e:	af00      	add	r7, sp, #0
 800f530:	60f8      	str	r0, [r7, #12]
 800f532:	607a      	str	r2, [r7, #4]
 800f534:	461a      	mov	r2, r3
 800f536:	460b      	mov	r3, r1
 800f538:	72fb      	strb	r3, [r7, #11]
 800f53a:	4613      	mov	r3, r2
 800f53c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f53e:	2300      	movs	r3, #0
 800f540:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f542:	2300      	movs	r3, #0
 800f544:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f54c:	893b      	ldrh	r3, [r7, #8]
 800f54e:	7af9      	ldrb	r1, [r7, #11]
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	f7fa ff60 	bl	800a416 <HAL_PCD_EP_Receive>
 800f556:	4603      	mov	r3, r0
 800f558:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f55a:	7dfb      	ldrb	r3, [r7, #23]
 800f55c:	4618      	mov	r0, r3
 800f55e:	f000 f83b 	bl	800f5d8 <USBD_Get_USB_Status>
 800f562:	4603      	mov	r3, r0
 800f564:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800f566:	7dbb      	ldrb	r3, [r7, #22]
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3718      	adds	r7, #24
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	460b      	mov	r3, r1
 800f57a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f582:	78fa      	ldrb	r2, [r7, #3]
 800f584:	4611      	mov	r1, r2
 800f586:	4618      	mov	r0, r3
 800f588:	f7fa ff81 	bl	800a48e <HAL_PCD_EP_GetRxCount>
 800f58c:	4603      	mov	r3, r0
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3708      	adds	r7, #8
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
	...

0800f598 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f5a0:	4b02      	ldr	r3, [pc, #8]	; (800f5ac <USBD_static_malloc+0x14>)
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	370c      	adds	r7, #12
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bc80      	pop	{r7}
 800f5aa:	4770      	bx	lr
 800f5ac:	2000261c 	.word	0x2000261c

0800f5b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]

}
 800f5b8:	bf00      	nop
 800f5ba:	370c      	adds	r7, #12
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bc80      	pop	{r7}
 800f5c0:	4770      	bx	lr

0800f5c2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5c2:	b480      	push	{r7}
 800f5c4:	b083      	sub	sp, #12
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
 800f5ca:	460b      	mov	r3, r1
 800f5cc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800f5ce:	bf00      	nop
 800f5d0:	370c      	adds	r7, #12
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bc80      	pop	{r7}
 800f5d6:	4770      	bx	lr

0800f5d8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	4603      	mov	r3, r0
 800f5e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f5e6:	79fb      	ldrb	r3, [r7, #7]
 800f5e8:	2b03      	cmp	r3, #3
 800f5ea:	d817      	bhi.n	800f61c <USBD_Get_USB_Status+0x44>
 800f5ec:	a201      	add	r2, pc, #4	; (adr r2, 800f5f4 <USBD_Get_USB_Status+0x1c>)
 800f5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f2:	bf00      	nop
 800f5f4:	0800f605 	.word	0x0800f605
 800f5f8:	0800f60b 	.word	0x0800f60b
 800f5fc:	0800f611 	.word	0x0800f611
 800f600:	0800f617 	.word	0x0800f617
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f604:	2300      	movs	r3, #0
 800f606:	73fb      	strb	r3, [r7, #15]
    break;
 800f608:	e00b      	b.n	800f622 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f60a:	2302      	movs	r3, #2
 800f60c:	73fb      	strb	r3, [r7, #15]
    break;
 800f60e:	e008      	b.n	800f622 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f610:	2301      	movs	r3, #1
 800f612:	73fb      	strb	r3, [r7, #15]
    break;
 800f614:	e005      	b.n	800f622 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f616:	2302      	movs	r3, #2
 800f618:	73fb      	strb	r3, [r7, #15]
    break;
 800f61a:	e002      	b.n	800f622 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f61c:	2302      	movs	r3, #2
 800f61e:	73fb      	strb	r3, [r7, #15]
    break;
 800f620:	bf00      	nop
  }
  return usb_status;
 800f622:	7bfb      	ldrb	r3, [r7, #15]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	bc80      	pop	{r7}
 800f62c:	4770      	bx	lr
 800f62e:	bf00      	nop

0800f630 <main>:
#include "main.h"

static void threadMain(void const *argument);

int main(void)
{
 800f630:	b5b0      	push	{r4, r5, r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
  hwInit();
 800f636:	f7f8 fa11 	bl	8007a5c <hwInit>
  apInit();
 800f63a:	f7f6 fb9b 	bl	8005d74 <apInit>

  osThreadDef(threadMain, threadMain, _HW_DEF_RTOS_THREAD_PRI_MAIN, 0, _HW_DEF_RTOS_THREAD_MEM_MAIN);
 800f63e:	4b0f      	ldr	r3, [pc, #60]	; (800f67c <main+0x4c>)
 800f640:	1d3c      	adds	r4, r7, #4
 800f642:	461d      	mov	r5, r3
 800f644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f648:	682b      	ldr	r3, [r5, #0]
 800f64a:	6023      	str	r3, [r4, #0]
  if (osThreadCreate(osThread(threadMain), NULL) != NULL)
 800f64c:	1d3b      	adds	r3, r7, #4
 800f64e:	2100      	movs	r1, #0
 800f650:	4618      	mov	r0, r3
 800f652:	f7f8 fa35 	bl	8007ac0 <osThreadCreate>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d003      	beq.n	800f664 <main+0x34>
  {
    logPrintf("threadMain \t\t: OK\r\n");
 800f65c:	4808      	ldr	r0, [pc, #32]	; (800f680 <main+0x50>)
 800f65e:	f000 f8b7 	bl	800f7d0 <puts>
 800f662:	e003      	b.n	800f66c <main+0x3c>
  }
  else
  {
    logPrintf("threadMain \t\t: Fail\r\n");
 800f664:	4807      	ldr	r0, [pc, #28]	; (800f684 <main+0x54>)
 800f666:	f000 f8b3 	bl	800f7d0 <puts>
    while(1);
 800f66a:	e7fe      	b.n	800f66a <main+0x3a>
  }

  osKernelStart();
 800f66c:	f7f8 fa21 	bl	8007ab2 <osKernelStart>
  return 0;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3718      	adds	r7, #24
 800f676:	46bd      	mov	sp, r7
 800f678:	bdb0      	pop	{r4, r5, r7, pc}
 800f67a:	bf00      	nop
 800f67c:	080126a4 	.word	0x080126a4
 800f680:	0801266c 	.word	0x0801266c
 800f684:	08012680 	.word	0x08012680

0800f688 <threadMain>:

static void threadMain(void const *argument)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  apMain();
 800f690:	f7f6 fba2 	bl	8005dd8 <apMain>
}
 800f694:	bf00      	nop
 800f696:	3708      	adds	r7, #8
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <__errno>:
 800f69c:	4b01      	ldr	r3, [pc, #4]	; (800f6a4 <__errno+0x8>)
 800f69e:	6818      	ldr	r0, [r3, #0]
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	200001a8 	.word	0x200001a8

0800f6a8 <__libc_init_array>:
 800f6a8:	b570      	push	{r4, r5, r6, lr}
 800f6aa:	2500      	movs	r5, #0
 800f6ac:	4e0c      	ldr	r6, [pc, #48]	; (800f6e0 <__libc_init_array+0x38>)
 800f6ae:	4c0d      	ldr	r4, [pc, #52]	; (800f6e4 <__libc_init_array+0x3c>)
 800f6b0:	1ba4      	subs	r4, r4, r6
 800f6b2:	10a4      	asrs	r4, r4, #2
 800f6b4:	42a5      	cmp	r5, r4
 800f6b6:	d109      	bne.n	800f6cc <__libc_init_array+0x24>
 800f6b8:	f002 fea6 	bl	8012408 <_init>
 800f6bc:	2500      	movs	r5, #0
 800f6be:	4e0a      	ldr	r6, [pc, #40]	; (800f6e8 <__libc_init_array+0x40>)
 800f6c0:	4c0a      	ldr	r4, [pc, #40]	; (800f6ec <__libc_init_array+0x44>)
 800f6c2:	1ba4      	subs	r4, r4, r6
 800f6c4:	10a4      	asrs	r4, r4, #2
 800f6c6:	42a5      	cmp	r5, r4
 800f6c8:	d105      	bne.n	800f6d6 <__libc_init_array+0x2e>
 800f6ca:	bd70      	pop	{r4, r5, r6, pc}
 800f6cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f6d0:	4798      	blx	r3
 800f6d2:	3501      	adds	r5, #1
 800f6d4:	e7ee      	b.n	800f6b4 <__libc_init_array+0xc>
 800f6d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f6da:	4798      	blx	r3
 800f6dc:	3501      	adds	r5, #1
 800f6de:	e7f2      	b.n	800f6c6 <__libc_init_array+0x1e>
 800f6e0:	080129d0 	.word	0x080129d0
 800f6e4:	080129d0 	.word	0x080129d0
 800f6e8:	080129d0 	.word	0x080129d0
 800f6ec:	080129d4 	.word	0x080129d4

0800f6f0 <memcpy>:
 800f6f0:	b510      	push	{r4, lr}
 800f6f2:	1e43      	subs	r3, r0, #1
 800f6f4:	440a      	add	r2, r1
 800f6f6:	4291      	cmp	r1, r2
 800f6f8:	d100      	bne.n	800f6fc <memcpy+0xc>
 800f6fa:	bd10      	pop	{r4, pc}
 800f6fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f700:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f704:	e7f7      	b.n	800f6f6 <memcpy+0x6>

0800f706 <memset>:
 800f706:	4603      	mov	r3, r0
 800f708:	4402      	add	r2, r0
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d100      	bne.n	800f710 <memset+0xa>
 800f70e:	4770      	bx	lr
 800f710:	f803 1b01 	strb.w	r1, [r3], #1
 800f714:	e7f9      	b.n	800f70a <memset+0x4>
	...

0800f718 <_puts_r>:
 800f718:	b570      	push	{r4, r5, r6, lr}
 800f71a:	460e      	mov	r6, r1
 800f71c:	4605      	mov	r5, r0
 800f71e:	b118      	cbz	r0, 800f728 <_puts_r+0x10>
 800f720:	6983      	ldr	r3, [r0, #24]
 800f722:	b90b      	cbnz	r3, 800f728 <_puts_r+0x10>
 800f724:	f001 f97e 	bl	8010a24 <__sinit>
 800f728:	69ab      	ldr	r3, [r5, #24]
 800f72a:	68ac      	ldr	r4, [r5, #8]
 800f72c:	b913      	cbnz	r3, 800f734 <_puts_r+0x1c>
 800f72e:	4628      	mov	r0, r5
 800f730:	f001 f978 	bl	8010a24 <__sinit>
 800f734:	4b23      	ldr	r3, [pc, #140]	; (800f7c4 <_puts_r+0xac>)
 800f736:	429c      	cmp	r4, r3
 800f738:	d117      	bne.n	800f76a <_puts_r+0x52>
 800f73a:	686c      	ldr	r4, [r5, #4]
 800f73c:	89a3      	ldrh	r3, [r4, #12]
 800f73e:	071b      	lsls	r3, r3, #28
 800f740:	d51d      	bpl.n	800f77e <_puts_r+0x66>
 800f742:	6923      	ldr	r3, [r4, #16]
 800f744:	b1db      	cbz	r3, 800f77e <_puts_r+0x66>
 800f746:	3e01      	subs	r6, #1
 800f748:	68a3      	ldr	r3, [r4, #8]
 800f74a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f74e:	3b01      	subs	r3, #1
 800f750:	60a3      	str	r3, [r4, #8]
 800f752:	b9e9      	cbnz	r1, 800f790 <_puts_r+0x78>
 800f754:	2b00      	cmp	r3, #0
 800f756:	da2e      	bge.n	800f7b6 <_puts_r+0x9e>
 800f758:	4622      	mov	r2, r4
 800f75a:	210a      	movs	r1, #10
 800f75c:	4628      	mov	r0, r5
 800f75e:	f000 ffb1 	bl	80106c4 <__swbuf_r>
 800f762:	3001      	adds	r0, #1
 800f764:	d011      	beq.n	800f78a <_puts_r+0x72>
 800f766:	200a      	movs	r0, #10
 800f768:	e011      	b.n	800f78e <_puts_r+0x76>
 800f76a:	4b17      	ldr	r3, [pc, #92]	; (800f7c8 <_puts_r+0xb0>)
 800f76c:	429c      	cmp	r4, r3
 800f76e:	d101      	bne.n	800f774 <_puts_r+0x5c>
 800f770:	68ac      	ldr	r4, [r5, #8]
 800f772:	e7e3      	b.n	800f73c <_puts_r+0x24>
 800f774:	4b15      	ldr	r3, [pc, #84]	; (800f7cc <_puts_r+0xb4>)
 800f776:	429c      	cmp	r4, r3
 800f778:	bf08      	it	eq
 800f77a:	68ec      	ldreq	r4, [r5, #12]
 800f77c:	e7de      	b.n	800f73c <_puts_r+0x24>
 800f77e:	4621      	mov	r1, r4
 800f780:	4628      	mov	r0, r5
 800f782:	f000 fff1 	bl	8010768 <__swsetup_r>
 800f786:	2800      	cmp	r0, #0
 800f788:	d0dd      	beq.n	800f746 <_puts_r+0x2e>
 800f78a:	f04f 30ff 	mov.w	r0, #4294967295
 800f78e:	bd70      	pop	{r4, r5, r6, pc}
 800f790:	2b00      	cmp	r3, #0
 800f792:	da04      	bge.n	800f79e <_puts_r+0x86>
 800f794:	69a2      	ldr	r2, [r4, #24]
 800f796:	429a      	cmp	r2, r3
 800f798:	dc06      	bgt.n	800f7a8 <_puts_r+0x90>
 800f79a:	290a      	cmp	r1, #10
 800f79c:	d004      	beq.n	800f7a8 <_puts_r+0x90>
 800f79e:	6823      	ldr	r3, [r4, #0]
 800f7a0:	1c5a      	adds	r2, r3, #1
 800f7a2:	6022      	str	r2, [r4, #0]
 800f7a4:	7019      	strb	r1, [r3, #0]
 800f7a6:	e7cf      	b.n	800f748 <_puts_r+0x30>
 800f7a8:	4622      	mov	r2, r4
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	f000 ff8a 	bl	80106c4 <__swbuf_r>
 800f7b0:	3001      	adds	r0, #1
 800f7b2:	d1c9      	bne.n	800f748 <_puts_r+0x30>
 800f7b4:	e7e9      	b.n	800f78a <_puts_r+0x72>
 800f7b6:	200a      	movs	r0, #10
 800f7b8:	6823      	ldr	r3, [r4, #0]
 800f7ba:	1c5a      	adds	r2, r3, #1
 800f7bc:	6022      	str	r2, [r4, #0]
 800f7be:	7018      	strb	r0, [r3, #0]
 800f7c0:	e7e5      	b.n	800f78e <_puts_r+0x76>
 800f7c2:	bf00      	nop
 800f7c4:	08012750 	.word	0x08012750
 800f7c8:	08012770 	.word	0x08012770
 800f7cc:	08012730 	.word	0x08012730

0800f7d0 <puts>:
 800f7d0:	4b02      	ldr	r3, [pc, #8]	; (800f7dc <puts+0xc>)
 800f7d2:	4601      	mov	r1, r0
 800f7d4:	6818      	ldr	r0, [r3, #0]
 800f7d6:	f7ff bf9f 	b.w	800f718 <_puts_r>
 800f7da:	bf00      	nop
 800f7dc:	200001a8 	.word	0x200001a8

0800f7e0 <strcpy>:
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7e6:	f803 2b01 	strb.w	r2, [r3], #1
 800f7ea:	2a00      	cmp	r2, #0
 800f7ec:	d1f9      	bne.n	800f7e2 <strcpy+0x2>
 800f7ee:	4770      	bx	lr

0800f7f0 <sulp>:
 800f7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f4:	460f      	mov	r7, r1
 800f7f6:	4690      	mov	r8, r2
 800f7f8:	f002 f80c 	bl	8011814 <__ulp>
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	460d      	mov	r5, r1
 800f800:	f1b8 0f00 	cmp.w	r8, #0
 800f804:	d011      	beq.n	800f82a <sulp+0x3a>
 800f806:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800f80a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f80e:	2b00      	cmp	r3, #0
 800f810:	dd0b      	ble.n	800f82a <sulp+0x3a>
 800f812:	2400      	movs	r4, #0
 800f814:	051b      	lsls	r3, r3, #20
 800f816:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f81a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f81e:	4622      	mov	r2, r4
 800f820:	462b      	mov	r3, r5
 800f822:	f7f5 fed3 	bl	80055cc <__aeabi_dmul>
 800f826:	4604      	mov	r4, r0
 800f828:	460d      	mov	r5, r1
 800f82a:	4620      	mov	r0, r4
 800f82c:	4629      	mov	r1, r5
 800f82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f832:	0000      	movs	r0, r0
 800f834:	0000      	movs	r0, r0
	...

0800f838 <_strtod_l>:
 800f838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83c:	461f      	mov	r7, r3
 800f83e:	2300      	movs	r3, #0
 800f840:	b0a1      	sub	sp, #132	; 0x84
 800f842:	4683      	mov	fp, r0
 800f844:	4638      	mov	r0, r7
 800f846:	460e      	mov	r6, r1
 800f848:	9217      	str	r2, [sp, #92]	; 0x5c
 800f84a:	931c      	str	r3, [sp, #112]	; 0x70
 800f84c:	f001 fc9f 	bl	801118e <__localeconv_l>
 800f850:	4680      	mov	r8, r0
 800f852:	6800      	ldr	r0, [r0, #0]
 800f854:	f7f5 fcf6 	bl	8005244 <strlen>
 800f858:	f04f 0900 	mov.w	r9, #0
 800f85c:	4604      	mov	r4, r0
 800f85e:	f04f 0a00 	mov.w	sl, #0
 800f862:	961b      	str	r6, [sp, #108]	; 0x6c
 800f864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f866:	781a      	ldrb	r2, [r3, #0]
 800f868:	2a0d      	cmp	r2, #13
 800f86a:	d832      	bhi.n	800f8d2 <_strtod_l+0x9a>
 800f86c:	2a09      	cmp	r2, #9
 800f86e:	d236      	bcs.n	800f8de <_strtod_l+0xa6>
 800f870:	2a00      	cmp	r2, #0
 800f872:	d03e      	beq.n	800f8f2 <_strtod_l+0xba>
 800f874:	2300      	movs	r3, #0
 800f876:	930d      	str	r3, [sp, #52]	; 0x34
 800f878:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f87a:	782b      	ldrb	r3, [r5, #0]
 800f87c:	2b30      	cmp	r3, #48	; 0x30
 800f87e:	f040 80ac 	bne.w	800f9da <_strtod_l+0x1a2>
 800f882:	786b      	ldrb	r3, [r5, #1]
 800f884:	2b58      	cmp	r3, #88	; 0x58
 800f886:	d001      	beq.n	800f88c <_strtod_l+0x54>
 800f888:	2b78      	cmp	r3, #120	; 0x78
 800f88a:	d167      	bne.n	800f95c <_strtod_l+0x124>
 800f88c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f88e:	9702      	str	r7, [sp, #8]
 800f890:	9301      	str	r3, [sp, #4]
 800f892:	ab1c      	add	r3, sp, #112	; 0x70
 800f894:	9300      	str	r3, [sp, #0]
 800f896:	4a89      	ldr	r2, [pc, #548]	; (800fabc <_strtod_l+0x284>)
 800f898:	ab1d      	add	r3, sp, #116	; 0x74
 800f89a:	a91b      	add	r1, sp, #108	; 0x6c
 800f89c:	4658      	mov	r0, fp
 800f89e:	f001 f99b 	bl	8010bd8 <__gethex>
 800f8a2:	f010 0407 	ands.w	r4, r0, #7
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	d005      	beq.n	800f8b6 <_strtod_l+0x7e>
 800f8aa:	2c06      	cmp	r4, #6
 800f8ac:	d12b      	bne.n	800f906 <_strtod_l+0xce>
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	3501      	adds	r5, #1
 800f8b2:	951b      	str	r5, [sp, #108]	; 0x6c
 800f8b4:	930d      	str	r3, [sp, #52]	; 0x34
 800f8b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f040 85a6 	bne.w	801040a <_strtod_l+0xbd2>
 800f8be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8c0:	b1e3      	cbz	r3, 800f8fc <_strtod_l+0xc4>
 800f8c2:	464a      	mov	r2, r9
 800f8c4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800f8c8:	4610      	mov	r0, r2
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	b021      	add	sp, #132	; 0x84
 800f8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d2:	2a2b      	cmp	r2, #43	; 0x2b
 800f8d4:	d015      	beq.n	800f902 <_strtod_l+0xca>
 800f8d6:	2a2d      	cmp	r2, #45	; 0x2d
 800f8d8:	d004      	beq.n	800f8e4 <_strtod_l+0xac>
 800f8da:	2a20      	cmp	r2, #32
 800f8dc:	d1ca      	bne.n	800f874 <_strtod_l+0x3c>
 800f8de:	3301      	adds	r3, #1
 800f8e0:	931b      	str	r3, [sp, #108]	; 0x6c
 800f8e2:	e7bf      	b.n	800f864 <_strtod_l+0x2c>
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	920d      	str	r2, [sp, #52]	; 0x34
 800f8e8:	1c5a      	adds	r2, r3, #1
 800f8ea:	921b      	str	r2, [sp, #108]	; 0x6c
 800f8ec:	785b      	ldrb	r3, [r3, #1]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d1c2      	bne.n	800f878 <_strtod_l+0x40>
 800f8f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8f4:	961b      	str	r6, [sp, #108]	; 0x6c
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	f040 8585 	bne.w	8010406 <_strtod_l+0xbce>
 800f8fc:	464a      	mov	r2, r9
 800f8fe:	4653      	mov	r3, sl
 800f900:	e7e2      	b.n	800f8c8 <_strtod_l+0x90>
 800f902:	2200      	movs	r2, #0
 800f904:	e7ef      	b.n	800f8e6 <_strtod_l+0xae>
 800f906:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f908:	b13a      	cbz	r2, 800f91a <_strtod_l+0xe2>
 800f90a:	2135      	movs	r1, #53	; 0x35
 800f90c:	a81e      	add	r0, sp, #120	; 0x78
 800f90e:	f002 f874 	bl	80119fa <__copybits>
 800f912:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f914:	4658      	mov	r0, fp
 800f916:	f001 fce7 	bl	80112e8 <_Bfree>
 800f91a:	3c01      	subs	r4, #1
 800f91c:	2c04      	cmp	r4, #4
 800f91e:	d806      	bhi.n	800f92e <_strtod_l+0xf6>
 800f920:	e8df f004 	tbb	[pc, r4]
 800f924:	1714030a 	.word	0x1714030a
 800f928:	0a          	.byte	0x0a
 800f929:	00          	.byte	0x00
 800f92a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800f92e:	0731      	lsls	r1, r6, #28
 800f930:	d5c1      	bpl.n	800f8b6 <_strtod_l+0x7e>
 800f932:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800f936:	e7be      	b.n	800f8b6 <_strtod_l+0x7e>
 800f938:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f93a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800f93e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f942:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f946:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800f94a:	e7f0      	b.n	800f92e <_strtod_l+0xf6>
 800f94c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800fac0 <_strtod_l+0x288>
 800f950:	e7ed      	b.n	800f92e <_strtod_l+0xf6>
 800f952:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800f956:	f04f 39ff 	mov.w	r9, #4294967295
 800f95a:	e7e8      	b.n	800f92e <_strtod_l+0xf6>
 800f95c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f95e:	1c5a      	adds	r2, r3, #1
 800f960:	921b      	str	r2, [sp, #108]	; 0x6c
 800f962:	785b      	ldrb	r3, [r3, #1]
 800f964:	2b30      	cmp	r3, #48	; 0x30
 800f966:	d0f9      	beq.n	800f95c <_strtod_l+0x124>
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d0a4      	beq.n	800f8b6 <_strtod_l+0x7e>
 800f96c:	2301      	movs	r3, #1
 800f96e:	2500      	movs	r5, #0
 800f970:	220a      	movs	r2, #10
 800f972:	9307      	str	r3, [sp, #28]
 800f974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f976:	9506      	str	r5, [sp, #24]
 800f978:	9308      	str	r3, [sp, #32]
 800f97a:	9504      	str	r5, [sp, #16]
 800f97c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f97e:	7807      	ldrb	r7, [r0, #0]
 800f980:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f984:	b2d9      	uxtb	r1, r3
 800f986:	2909      	cmp	r1, #9
 800f988:	d929      	bls.n	800f9de <_strtod_l+0x1a6>
 800f98a:	4622      	mov	r2, r4
 800f98c:	f8d8 1000 	ldr.w	r1, [r8]
 800f990:	f002 fc53 	bl	801223a <strncmp>
 800f994:	2800      	cmp	r0, #0
 800f996:	d031      	beq.n	800f9fc <_strtod_l+0x1c4>
 800f998:	2000      	movs	r0, #0
 800f99a:	463b      	mov	r3, r7
 800f99c:	4602      	mov	r2, r0
 800f99e:	9c04      	ldr	r4, [sp, #16]
 800f9a0:	9005      	str	r0, [sp, #20]
 800f9a2:	2b65      	cmp	r3, #101	; 0x65
 800f9a4:	d001      	beq.n	800f9aa <_strtod_l+0x172>
 800f9a6:	2b45      	cmp	r3, #69	; 0x45
 800f9a8:	d114      	bne.n	800f9d4 <_strtod_l+0x19c>
 800f9aa:	b924      	cbnz	r4, 800f9b6 <_strtod_l+0x17e>
 800f9ac:	b910      	cbnz	r0, 800f9b4 <_strtod_l+0x17c>
 800f9ae:	9b07      	ldr	r3, [sp, #28]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d09e      	beq.n	800f8f2 <_strtod_l+0xba>
 800f9b4:	2400      	movs	r4, #0
 800f9b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f9b8:	1c73      	adds	r3, r6, #1
 800f9ba:	931b      	str	r3, [sp, #108]	; 0x6c
 800f9bc:	7873      	ldrb	r3, [r6, #1]
 800f9be:	2b2b      	cmp	r3, #43	; 0x2b
 800f9c0:	d078      	beq.n	800fab4 <_strtod_l+0x27c>
 800f9c2:	2b2d      	cmp	r3, #45	; 0x2d
 800f9c4:	d070      	beq.n	800faa8 <_strtod_l+0x270>
 800f9c6:	f04f 0c00 	mov.w	ip, #0
 800f9ca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800f9ce:	2f09      	cmp	r7, #9
 800f9d0:	d97c      	bls.n	800facc <_strtod_l+0x294>
 800f9d2:	961b      	str	r6, [sp, #108]	; 0x6c
 800f9d4:	f04f 0e00 	mov.w	lr, #0
 800f9d8:	e09a      	b.n	800fb10 <_strtod_l+0x2d8>
 800f9da:	2300      	movs	r3, #0
 800f9dc:	e7c7      	b.n	800f96e <_strtod_l+0x136>
 800f9de:	9904      	ldr	r1, [sp, #16]
 800f9e0:	3001      	adds	r0, #1
 800f9e2:	2908      	cmp	r1, #8
 800f9e4:	bfd7      	itett	le
 800f9e6:	9906      	ldrle	r1, [sp, #24]
 800f9e8:	fb02 3505 	mlagt	r5, r2, r5, r3
 800f9ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800f9f0:	9306      	strle	r3, [sp, #24]
 800f9f2:	9b04      	ldr	r3, [sp, #16]
 800f9f4:	901b      	str	r0, [sp, #108]	; 0x6c
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	9304      	str	r3, [sp, #16]
 800f9fa:	e7bf      	b.n	800f97c <_strtod_l+0x144>
 800f9fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f9fe:	191a      	adds	r2, r3, r4
 800fa00:	921b      	str	r2, [sp, #108]	; 0x6c
 800fa02:	9a04      	ldr	r2, [sp, #16]
 800fa04:	5d1b      	ldrb	r3, [r3, r4]
 800fa06:	2a00      	cmp	r2, #0
 800fa08:	d037      	beq.n	800fa7a <_strtod_l+0x242>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	9c04      	ldr	r4, [sp, #16]
 800fa0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fa12:	2909      	cmp	r1, #9
 800fa14:	d913      	bls.n	800fa3e <_strtod_l+0x206>
 800fa16:	2101      	movs	r1, #1
 800fa18:	9105      	str	r1, [sp, #20]
 800fa1a:	e7c2      	b.n	800f9a2 <_strtod_l+0x16a>
 800fa1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fa1e:	3001      	adds	r0, #1
 800fa20:	1c5a      	adds	r2, r3, #1
 800fa22:	921b      	str	r2, [sp, #108]	; 0x6c
 800fa24:	785b      	ldrb	r3, [r3, #1]
 800fa26:	2b30      	cmp	r3, #48	; 0x30
 800fa28:	d0f8      	beq.n	800fa1c <_strtod_l+0x1e4>
 800fa2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fa2e:	2a08      	cmp	r2, #8
 800fa30:	f200 84f0 	bhi.w	8010414 <_strtod_l+0xbdc>
 800fa34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fa36:	9208      	str	r2, [sp, #32]
 800fa38:	4602      	mov	r2, r0
 800fa3a:	2000      	movs	r0, #0
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800fa42:	f100 0101 	add.w	r1, r0, #1
 800fa46:	d012      	beq.n	800fa6e <_strtod_l+0x236>
 800fa48:	440a      	add	r2, r1
 800fa4a:	270a      	movs	r7, #10
 800fa4c:	4621      	mov	r1, r4
 800fa4e:	eb00 0c04 	add.w	ip, r0, r4
 800fa52:	458c      	cmp	ip, r1
 800fa54:	d113      	bne.n	800fa7e <_strtod_l+0x246>
 800fa56:	1821      	adds	r1, r4, r0
 800fa58:	2908      	cmp	r1, #8
 800fa5a:	f104 0401 	add.w	r4, r4, #1
 800fa5e:	4404      	add	r4, r0
 800fa60:	dc19      	bgt.n	800fa96 <_strtod_l+0x25e>
 800fa62:	210a      	movs	r1, #10
 800fa64:	9b06      	ldr	r3, [sp, #24]
 800fa66:	fb01 e303 	mla	r3, r1, r3, lr
 800fa6a:	9306      	str	r3, [sp, #24]
 800fa6c:	2100      	movs	r1, #0
 800fa6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fa70:	1c58      	adds	r0, r3, #1
 800fa72:	901b      	str	r0, [sp, #108]	; 0x6c
 800fa74:	785b      	ldrb	r3, [r3, #1]
 800fa76:	4608      	mov	r0, r1
 800fa78:	e7c9      	b.n	800fa0e <_strtod_l+0x1d6>
 800fa7a:	9804      	ldr	r0, [sp, #16]
 800fa7c:	e7d3      	b.n	800fa26 <_strtod_l+0x1ee>
 800fa7e:	2908      	cmp	r1, #8
 800fa80:	f101 0101 	add.w	r1, r1, #1
 800fa84:	dc03      	bgt.n	800fa8e <_strtod_l+0x256>
 800fa86:	9b06      	ldr	r3, [sp, #24]
 800fa88:	437b      	muls	r3, r7
 800fa8a:	9306      	str	r3, [sp, #24]
 800fa8c:	e7e1      	b.n	800fa52 <_strtod_l+0x21a>
 800fa8e:	2910      	cmp	r1, #16
 800fa90:	bfd8      	it	le
 800fa92:	437d      	mulle	r5, r7
 800fa94:	e7dd      	b.n	800fa52 <_strtod_l+0x21a>
 800fa96:	2c10      	cmp	r4, #16
 800fa98:	bfdc      	itt	le
 800fa9a:	210a      	movle	r1, #10
 800fa9c:	fb01 e505 	mlale	r5, r1, r5, lr
 800faa0:	e7e4      	b.n	800fa6c <_strtod_l+0x234>
 800faa2:	2301      	movs	r3, #1
 800faa4:	9305      	str	r3, [sp, #20]
 800faa6:	e781      	b.n	800f9ac <_strtod_l+0x174>
 800faa8:	f04f 0c01 	mov.w	ip, #1
 800faac:	1cb3      	adds	r3, r6, #2
 800faae:	931b      	str	r3, [sp, #108]	; 0x6c
 800fab0:	78b3      	ldrb	r3, [r6, #2]
 800fab2:	e78a      	b.n	800f9ca <_strtod_l+0x192>
 800fab4:	f04f 0c00 	mov.w	ip, #0
 800fab8:	e7f8      	b.n	800faac <_strtod_l+0x274>
 800faba:	bf00      	nop
 800fabc:	080126e0 	.word	0x080126e0
 800fac0:	7ff00000 	.word	0x7ff00000
 800fac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fac6:	1c5f      	adds	r7, r3, #1
 800fac8:	971b      	str	r7, [sp, #108]	; 0x6c
 800faca:	785b      	ldrb	r3, [r3, #1]
 800facc:	2b30      	cmp	r3, #48	; 0x30
 800face:	d0f9      	beq.n	800fac4 <_strtod_l+0x28c>
 800fad0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800fad4:	2f08      	cmp	r7, #8
 800fad6:	f63f af7d 	bhi.w	800f9d4 <_strtod_l+0x19c>
 800fada:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fade:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fae0:	9309      	str	r3, [sp, #36]	; 0x24
 800fae2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fae4:	1c5f      	adds	r7, r3, #1
 800fae6:	971b      	str	r7, [sp, #108]	; 0x6c
 800fae8:	785b      	ldrb	r3, [r3, #1]
 800faea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800faee:	f1b8 0f09 	cmp.w	r8, #9
 800faf2:	d937      	bls.n	800fb64 <_strtod_l+0x32c>
 800faf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800faf6:	1a7f      	subs	r7, r7, r1
 800faf8:	2f08      	cmp	r7, #8
 800fafa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fafe:	dc37      	bgt.n	800fb70 <_strtod_l+0x338>
 800fb00:	45be      	cmp	lr, r7
 800fb02:	bfa8      	it	ge
 800fb04:	46be      	movge	lr, r7
 800fb06:	f1bc 0f00 	cmp.w	ip, #0
 800fb0a:	d001      	beq.n	800fb10 <_strtod_l+0x2d8>
 800fb0c:	f1ce 0e00 	rsb	lr, lr, #0
 800fb10:	2c00      	cmp	r4, #0
 800fb12:	d151      	bne.n	800fbb8 <_strtod_l+0x380>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	f47f aece 	bne.w	800f8b6 <_strtod_l+0x7e>
 800fb1a:	9a07      	ldr	r2, [sp, #28]
 800fb1c:	2a00      	cmp	r2, #0
 800fb1e:	f47f aeca 	bne.w	800f8b6 <_strtod_l+0x7e>
 800fb22:	9a05      	ldr	r2, [sp, #20]
 800fb24:	2a00      	cmp	r2, #0
 800fb26:	f47f aee4 	bne.w	800f8f2 <_strtod_l+0xba>
 800fb2a:	2b4e      	cmp	r3, #78	; 0x4e
 800fb2c:	d027      	beq.n	800fb7e <_strtod_l+0x346>
 800fb2e:	dc21      	bgt.n	800fb74 <_strtod_l+0x33c>
 800fb30:	2b49      	cmp	r3, #73	; 0x49
 800fb32:	f47f aede 	bne.w	800f8f2 <_strtod_l+0xba>
 800fb36:	49a4      	ldr	r1, [pc, #656]	; (800fdc8 <_strtod_l+0x590>)
 800fb38:	a81b      	add	r0, sp, #108	; 0x6c
 800fb3a:	f001 fa81 	bl	8011040 <__match>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	f43f aed7 	beq.w	800f8f2 <_strtod_l+0xba>
 800fb44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb46:	49a1      	ldr	r1, [pc, #644]	; (800fdcc <_strtod_l+0x594>)
 800fb48:	3b01      	subs	r3, #1
 800fb4a:	a81b      	add	r0, sp, #108	; 0x6c
 800fb4c:	931b      	str	r3, [sp, #108]	; 0x6c
 800fb4e:	f001 fa77 	bl	8011040 <__match>
 800fb52:	b910      	cbnz	r0, 800fb5a <_strtod_l+0x322>
 800fb54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb56:	3301      	adds	r3, #1
 800fb58:	931b      	str	r3, [sp, #108]	; 0x6c
 800fb5a:	f8df a284 	ldr.w	sl, [pc, #644]	; 800fde0 <_strtod_l+0x5a8>
 800fb5e:	f04f 0900 	mov.w	r9, #0
 800fb62:	e6a8      	b.n	800f8b6 <_strtod_l+0x7e>
 800fb64:	210a      	movs	r1, #10
 800fb66:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fb6a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fb6e:	e7b8      	b.n	800fae2 <_strtod_l+0x2aa>
 800fb70:	46be      	mov	lr, r7
 800fb72:	e7c8      	b.n	800fb06 <_strtod_l+0x2ce>
 800fb74:	2b69      	cmp	r3, #105	; 0x69
 800fb76:	d0de      	beq.n	800fb36 <_strtod_l+0x2fe>
 800fb78:	2b6e      	cmp	r3, #110	; 0x6e
 800fb7a:	f47f aeba 	bne.w	800f8f2 <_strtod_l+0xba>
 800fb7e:	4994      	ldr	r1, [pc, #592]	; (800fdd0 <_strtod_l+0x598>)
 800fb80:	a81b      	add	r0, sp, #108	; 0x6c
 800fb82:	f001 fa5d 	bl	8011040 <__match>
 800fb86:	2800      	cmp	r0, #0
 800fb88:	f43f aeb3 	beq.w	800f8f2 <_strtod_l+0xba>
 800fb8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	2b28      	cmp	r3, #40	; 0x28
 800fb92:	d10e      	bne.n	800fbb2 <_strtod_l+0x37a>
 800fb94:	aa1e      	add	r2, sp, #120	; 0x78
 800fb96:	498f      	ldr	r1, [pc, #572]	; (800fdd4 <_strtod_l+0x59c>)
 800fb98:	a81b      	add	r0, sp, #108	; 0x6c
 800fb9a:	f001 fa65 	bl	8011068 <__hexnan>
 800fb9e:	2805      	cmp	r0, #5
 800fba0:	d107      	bne.n	800fbb2 <_strtod_l+0x37a>
 800fba2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fba4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800fba8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800fbac:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800fbb0:	e681      	b.n	800f8b6 <_strtod_l+0x7e>
 800fbb2:	f8df a234 	ldr.w	sl, [pc, #564]	; 800fde8 <_strtod_l+0x5b0>
 800fbb6:	e7d2      	b.n	800fb5e <_strtod_l+0x326>
 800fbb8:	ebae 0302 	sub.w	r3, lr, r2
 800fbbc:	9307      	str	r3, [sp, #28]
 800fbbe:	9b04      	ldr	r3, [sp, #16]
 800fbc0:	9806      	ldr	r0, [sp, #24]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	bf08      	it	eq
 800fbc6:	4623      	moveq	r3, r4
 800fbc8:	2c10      	cmp	r4, #16
 800fbca:	9304      	str	r3, [sp, #16]
 800fbcc:	46a0      	mov	r8, r4
 800fbce:	bfa8      	it	ge
 800fbd0:	f04f 0810 	movge.w	r8, #16
 800fbd4:	f7f5 fc80 	bl	80054d8 <__aeabi_ui2d>
 800fbd8:	2c09      	cmp	r4, #9
 800fbda:	4681      	mov	r9, r0
 800fbdc:	468a      	mov	sl, r1
 800fbde:	dc13      	bgt.n	800fc08 <_strtod_l+0x3d0>
 800fbe0:	9b07      	ldr	r3, [sp, #28]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	f43f ae67 	beq.w	800f8b6 <_strtod_l+0x7e>
 800fbe8:	9b07      	ldr	r3, [sp, #28]
 800fbea:	dd7e      	ble.n	800fcea <_strtod_l+0x4b2>
 800fbec:	2b16      	cmp	r3, #22
 800fbee:	dc65      	bgt.n	800fcbc <_strtod_l+0x484>
 800fbf0:	4a79      	ldr	r2, [pc, #484]	; (800fdd8 <_strtod_l+0x5a0>)
 800fbf2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800fbf6:	464a      	mov	r2, r9
 800fbf8:	e9de 0100 	ldrd	r0, r1, [lr]
 800fbfc:	4653      	mov	r3, sl
 800fbfe:	f7f5 fce5 	bl	80055cc <__aeabi_dmul>
 800fc02:	4681      	mov	r9, r0
 800fc04:	468a      	mov	sl, r1
 800fc06:	e656      	b.n	800f8b6 <_strtod_l+0x7e>
 800fc08:	4b73      	ldr	r3, [pc, #460]	; (800fdd8 <_strtod_l+0x5a0>)
 800fc0a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fc0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fc12:	f7f5 fcdb 	bl	80055cc <__aeabi_dmul>
 800fc16:	4606      	mov	r6, r0
 800fc18:	4628      	mov	r0, r5
 800fc1a:	460f      	mov	r7, r1
 800fc1c:	f7f5 fc5c 	bl	80054d8 <__aeabi_ui2d>
 800fc20:	4602      	mov	r2, r0
 800fc22:	460b      	mov	r3, r1
 800fc24:	4630      	mov	r0, r6
 800fc26:	4639      	mov	r1, r7
 800fc28:	f7f5 fb1a 	bl	8005260 <__adddf3>
 800fc2c:	2c0f      	cmp	r4, #15
 800fc2e:	4681      	mov	r9, r0
 800fc30:	468a      	mov	sl, r1
 800fc32:	ddd5      	ble.n	800fbe0 <_strtod_l+0x3a8>
 800fc34:	9b07      	ldr	r3, [sp, #28]
 800fc36:	eba4 0808 	sub.w	r8, r4, r8
 800fc3a:	4498      	add	r8, r3
 800fc3c:	f1b8 0f00 	cmp.w	r8, #0
 800fc40:	f340 809a 	ble.w	800fd78 <_strtod_l+0x540>
 800fc44:	f018 030f 	ands.w	r3, r8, #15
 800fc48:	d00a      	beq.n	800fc60 <_strtod_l+0x428>
 800fc4a:	4963      	ldr	r1, [pc, #396]	; (800fdd8 <_strtod_l+0x5a0>)
 800fc4c:	464a      	mov	r2, r9
 800fc4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fc52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc56:	4653      	mov	r3, sl
 800fc58:	f7f5 fcb8 	bl	80055cc <__aeabi_dmul>
 800fc5c:	4681      	mov	r9, r0
 800fc5e:	468a      	mov	sl, r1
 800fc60:	f038 080f 	bics.w	r8, r8, #15
 800fc64:	d077      	beq.n	800fd56 <_strtod_l+0x51e>
 800fc66:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fc6a:	dd4b      	ble.n	800fd04 <_strtod_l+0x4cc>
 800fc6c:	f04f 0800 	mov.w	r8, #0
 800fc70:	f8cd 8010 	str.w	r8, [sp, #16]
 800fc74:	f8cd 8020 	str.w	r8, [sp, #32]
 800fc78:	f8cd 8018 	str.w	r8, [sp, #24]
 800fc7c:	2322      	movs	r3, #34	; 0x22
 800fc7e:	f04f 0900 	mov.w	r9, #0
 800fc82:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800fde0 <_strtod_l+0x5a8>
 800fc86:	f8cb 3000 	str.w	r3, [fp]
 800fc8a:	9b08      	ldr	r3, [sp, #32]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	f43f ae12 	beq.w	800f8b6 <_strtod_l+0x7e>
 800fc92:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fc94:	4658      	mov	r0, fp
 800fc96:	f001 fb27 	bl	80112e8 <_Bfree>
 800fc9a:	9906      	ldr	r1, [sp, #24]
 800fc9c:	4658      	mov	r0, fp
 800fc9e:	f001 fb23 	bl	80112e8 <_Bfree>
 800fca2:	9904      	ldr	r1, [sp, #16]
 800fca4:	4658      	mov	r0, fp
 800fca6:	f001 fb1f 	bl	80112e8 <_Bfree>
 800fcaa:	9908      	ldr	r1, [sp, #32]
 800fcac:	4658      	mov	r0, fp
 800fcae:	f001 fb1b 	bl	80112e8 <_Bfree>
 800fcb2:	4641      	mov	r1, r8
 800fcb4:	4658      	mov	r0, fp
 800fcb6:	f001 fb17 	bl	80112e8 <_Bfree>
 800fcba:	e5fc      	b.n	800f8b6 <_strtod_l+0x7e>
 800fcbc:	9a07      	ldr	r2, [sp, #28]
 800fcbe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	dbb6      	blt.n	800fc34 <_strtod_l+0x3fc>
 800fcc6:	4d44      	ldr	r5, [pc, #272]	; (800fdd8 <_strtod_l+0x5a0>)
 800fcc8:	f1c4 040f 	rsb	r4, r4, #15
 800fccc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800fcd0:	464a      	mov	r2, r9
 800fcd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcd6:	4653      	mov	r3, sl
 800fcd8:	f7f5 fc78 	bl	80055cc <__aeabi_dmul>
 800fcdc:	9b07      	ldr	r3, [sp, #28]
 800fcde:	1b1c      	subs	r4, r3, r4
 800fce0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800fce4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fce8:	e789      	b.n	800fbfe <_strtod_l+0x3c6>
 800fcea:	f113 0f16 	cmn.w	r3, #22
 800fcee:	dba1      	blt.n	800fc34 <_strtod_l+0x3fc>
 800fcf0:	4a39      	ldr	r2, [pc, #228]	; (800fdd8 <_strtod_l+0x5a0>)
 800fcf2:	4648      	mov	r0, r9
 800fcf4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800fcf8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800fcfc:	4651      	mov	r1, sl
 800fcfe:	f7f5 fd8f 	bl	8005820 <__aeabi_ddiv>
 800fd02:	e77e      	b.n	800fc02 <_strtod_l+0x3ca>
 800fd04:	2300      	movs	r3, #0
 800fd06:	4648      	mov	r0, r9
 800fd08:	4651      	mov	r1, sl
 800fd0a:	461d      	mov	r5, r3
 800fd0c:	4e33      	ldr	r6, [pc, #204]	; (800fddc <_strtod_l+0x5a4>)
 800fd0e:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fd12:	f1b8 0f01 	cmp.w	r8, #1
 800fd16:	dc21      	bgt.n	800fd5c <_strtod_l+0x524>
 800fd18:	b10b      	cbz	r3, 800fd1e <_strtod_l+0x4e6>
 800fd1a:	4681      	mov	r9, r0
 800fd1c:	468a      	mov	sl, r1
 800fd1e:	4b2f      	ldr	r3, [pc, #188]	; (800fddc <_strtod_l+0x5a4>)
 800fd20:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800fd24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800fd28:	464a      	mov	r2, r9
 800fd2a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fd2e:	4653      	mov	r3, sl
 800fd30:	f7f5 fc4c 	bl	80055cc <__aeabi_dmul>
 800fd34:	4b2a      	ldr	r3, [pc, #168]	; (800fde0 <_strtod_l+0x5a8>)
 800fd36:	460a      	mov	r2, r1
 800fd38:	400b      	ands	r3, r1
 800fd3a:	492a      	ldr	r1, [pc, #168]	; (800fde4 <_strtod_l+0x5ac>)
 800fd3c:	4681      	mov	r9, r0
 800fd3e:	428b      	cmp	r3, r1
 800fd40:	d894      	bhi.n	800fc6c <_strtod_l+0x434>
 800fd42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fd46:	428b      	cmp	r3, r1
 800fd48:	bf86      	itte	hi
 800fd4a:	f04f 39ff 	movhi.w	r9, #4294967295
 800fd4e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800fdec <_strtod_l+0x5b4>
 800fd52:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800fd56:	2300      	movs	r3, #0
 800fd58:	9305      	str	r3, [sp, #20]
 800fd5a:	e07b      	b.n	800fe54 <_strtod_l+0x61c>
 800fd5c:	f018 0f01 	tst.w	r8, #1
 800fd60:	d006      	beq.n	800fd70 <_strtod_l+0x538>
 800fd62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800fd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6a:	f7f5 fc2f 	bl	80055cc <__aeabi_dmul>
 800fd6e:	2301      	movs	r3, #1
 800fd70:	3501      	adds	r5, #1
 800fd72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fd76:	e7cc      	b.n	800fd12 <_strtod_l+0x4da>
 800fd78:	d0ed      	beq.n	800fd56 <_strtod_l+0x51e>
 800fd7a:	f1c8 0800 	rsb	r8, r8, #0
 800fd7e:	f018 020f 	ands.w	r2, r8, #15
 800fd82:	d00a      	beq.n	800fd9a <_strtod_l+0x562>
 800fd84:	4b14      	ldr	r3, [pc, #80]	; (800fdd8 <_strtod_l+0x5a0>)
 800fd86:	4648      	mov	r0, r9
 800fd88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd8c:	4651      	mov	r1, sl
 800fd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd92:	f7f5 fd45 	bl	8005820 <__aeabi_ddiv>
 800fd96:	4681      	mov	r9, r0
 800fd98:	468a      	mov	sl, r1
 800fd9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fd9e:	d0da      	beq.n	800fd56 <_strtod_l+0x51e>
 800fda0:	f1b8 0f1f 	cmp.w	r8, #31
 800fda4:	dd24      	ble.n	800fdf0 <_strtod_l+0x5b8>
 800fda6:	f04f 0800 	mov.w	r8, #0
 800fdaa:	f8cd 8010 	str.w	r8, [sp, #16]
 800fdae:	f8cd 8020 	str.w	r8, [sp, #32]
 800fdb2:	f8cd 8018 	str.w	r8, [sp, #24]
 800fdb6:	2322      	movs	r3, #34	; 0x22
 800fdb8:	f04f 0900 	mov.w	r9, #0
 800fdbc:	f04f 0a00 	mov.w	sl, #0
 800fdc0:	f8cb 3000 	str.w	r3, [fp]
 800fdc4:	e761      	b.n	800fc8a <_strtod_l+0x452>
 800fdc6:	bf00      	nop
 800fdc8:	080126d4 	.word	0x080126d4
 800fdcc:	080126d7 	.word	0x080126d7
 800fdd0:	080126dd 	.word	0x080126dd
 800fdd4:	080126f4 	.word	0x080126f4
 800fdd8:	080127c8 	.word	0x080127c8
 800fddc:	080127a0 	.word	0x080127a0
 800fde0:	7ff00000 	.word	0x7ff00000
 800fde4:	7ca00000 	.word	0x7ca00000
 800fde8:	fff80000 	.word	0xfff80000
 800fdec:	7fefffff 	.word	0x7fefffff
 800fdf0:	f018 0310 	ands.w	r3, r8, #16
 800fdf4:	bf18      	it	ne
 800fdf6:	236a      	movne	r3, #106	; 0x6a
 800fdf8:	4648      	mov	r0, r9
 800fdfa:	9305      	str	r3, [sp, #20]
 800fdfc:	4651      	mov	r1, sl
 800fdfe:	2300      	movs	r3, #0
 800fe00:	4da1      	ldr	r5, [pc, #644]	; (8010088 <_strtod_l+0x850>)
 800fe02:	f1b8 0f00 	cmp.w	r8, #0
 800fe06:	f300 8113 	bgt.w	8010030 <_strtod_l+0x7f8>
 800fe0a:	b10b      	cbz	r3, 800fe10 <_strtod_l+0x5d8>
 800fe0c:	4681      	mov	r9, r0
 800fe0e:	468a      	mov	sl, r1
 800fe10:	9b05      	ldr	r3, [sp, #20]
 800fe12:	b1bb      	cbz	r3, 800fe44 <_strtod_l+0x60c>
 800fe14:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800fe18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	4651      	mov	r1, sl
 800fe20:	dd10      	ble.n	800fe44 <_strtod_l+0x60c>
 800fe22:	2b1f      	cmp	r3, #31
 800fe24:	f340 8110 	ble.w	8010048 <_strtod_l+0x810>
 800fe28:	2b34      	cmp	r3, #52	; 0x34
 800fe2a:	bfd8      	it	le
 800fe2c:	f04f 32ff 	movle.w	r2, #4294967295
 800fe30:	f04f 0900 	mov.w	r9, #0
 800fe34:	bfcf      	iteee	gt
 800fe36:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800fe3a:	3b20      	suble	r3, #32
 800fe3c:	fa02 f303 	lslle.w	r3, r2, r3
 800fe40:	ea03 0a01 	andle.w	sl, r3, r1
 800fe44:	2200      	movs	r2, #0
 800fe46:	2300      	movs	r3, #0
 800fe48:	4648      	mov	r0, r9
 800fe4a:	4651      	mov	r1, sl
 800fe4c:	f7f5 fe26 	bl	8005a9c <__aeabi_dcmpeq>
 800fe50:	2800      	cmp	r0, #0
 800fe52:	d1a8      	bne.n	800fda6 <_strtod_l+0x56e>
 800fe54:	9b06      	ldr	r3, [sp, #24]
 800fe56:	9a04      	ldr	r2, [sp, #16]
 800fe58:	9300      	str	r3, [sp, #0]
 800fe5a:	9908      	ldr	r1, [sp, #32]
 800fe5c:	4623      	mov	r3, r4
 800fe5e:	4658      	mov	r0, fp
 800fe60:	f001 fa94 	bl	801138c <__s2b>
 800fe64:	9008      	str	r0, [sp, #32]
 800fe66:	2800      	cmp	r0, #0
 800fe68:	f43f af00 	beq.w	800fc6c <_strtod_l+0x434>
 800fe6c:	9a07      	ldr	r2, [sp, #28]
 800fe6e:	9b07      	ldr	r3, [sp, #28]
 800fe70:	2a00      	cmp	r2, #0
 800fe72:	f1c3 0300 	rsb	r3, r3, #0
 800fe76:	bfa8      	it	ge
 800fe78:	2300      	movge	r3, #0
 800fe7a:	f04f 0800 	mov.w	r8, #0
 800fe7e:	930e      	str	r3, [sp, #56]	; 0x38
 800fe80:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fe84:	9316      	str	r3, [sp, #88]	; 0x58
 800fe86:	f8cd 8010 	str.w	r8, [sp, #16]
 800fe8a:	9b08      	ldr	r3, [sp, #32]
 800fe8c:	4658      	mov	r0, fp
 800fe8e:	6859      	ldr	r1, [r3, #4]
 800fe90:	f001 f9f6 	bl	8011280 <_Balloc>
 800fe94:	9006      	str	r0, [sp, #24]
 800fe96:	2800      	cmp	r0, #0
 800fe98:	f43f aef0 	beq.w	800fc7c <_strtod_l+0x444>
 800fe9c:	9b08      	ldr	r3, [sp, #32]
 800fe9e:	300c      	adds	r0, #12
 800fea0:	691a      	ldr	r2, [r3, #16]
 800fea2:	f103 010c 	add.w	r1, r3, #12
 800fea6:	3202      	adds	r2, #2
 800fea8:	0092      	lsls	r2, r2, #2
 800feaa:	f7ff fc21 	bl	800f6f0 <memcpy>
 800feae:	ab1e      	add	r3, sp, #120	; 0x78
 800feb0:	9301      	str	r3, [sp, #4]
 800feb2:	ab1d      	add	r3, sp, #116	; 0x74
 800feb4:	9300      	str	r3, [sp, #0]
 800feb6:	464a      	mov	r2, r9
 800feb8:	4653      	mov	r3, sl
 800feba:	4658      	mov	r0, fp
 800febc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800fec0:	f001 fd1e 	bl	8011900 <__d2b>
 800fec4:	901c      	str	r0, [sp, #112]	; 0x70
 800fec6:	2800      	cmp	r0, #0
 800fec8:	f43f aed8 	beq.w	800fc7c <_strtod_l+0x444>
 800fecc:	2101      	movs	r1, #1
 800fece:	4658      	mov	r0, fp
 800fed0:	f001 fae8 	bl	80114a4 <__i2b>
 800fed4:	9004      	str	r0, [sp, #16]
 800fed6:	4603      	mov	r3, r0
 800fed8:	2800      	cmp	r0, #0
 800feda:	f43f aecf 	beq.w	800fc7c <_strtod_l+0x444>
 800fede:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800fee0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fee2:	2d00      	cmp	r5, #0
 800fee4:	bfab      	itete	ge
 800fee6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800fee8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800feea:	18ee      	addge	r6, r5, r3
 800feec:	1b5c      	sublt	r4, r3, r5
 800feee:	9b05      	ldr	r3, [sp, #20]
 800fef0:	bfa8      	it	ge
 800fef2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800fef4:	eba5 0503 	sub.w	r5, r5, r3
 800fef8:	4415      	add	r5, r2
 800fefa:	4b64      	ldr	r3, [pc, #400]	; (801008c <_strtod_l+0x854>)
 800fefc:	f105 35ff 	add.w	r5, r5, #4294967295
 800ff00:	bfb8      	it	lt
 800ff02:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800ff04:	429d      	cmp	r5, r3
 800ff06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ff0a:	f280 80af 	bge.w	801006c <_strtod_l+0x834>
 800ff0e:	1b5b      	subs	r3, r3, r5
 800ff10:	2b1f      	cmp	r3, #31
 800ff12:	eba2 0203 	sub.w	r2, r2, r3
 800ff16:	f04f 0701 	mov.w	r7, #1
 800ff1a:	f300 809c 	bgt.w	8010056 <_strtod_l+0x81e>
 800ff1e:	2500      	movs	r5, #0
 800ff20:	fa07 f303 	lsl.w	r3, r7, r3
 800ff24:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff26:	18b7      	adds	r7, r6, r2
 800ff28:	9b05      	ldr	r3, [sp, #20]
 800ff2a:	42be      	cmp	r6, r7
 800ff2c:	4414      	add	r4, r2
 800ff2e:	441c      	add	r4, r3
 800ff30:	4633      	mov	r3, r6
 800ff32:	bfa8      	it	ge
 800ff34:	463b      	movge	r3, r7
 800ff36:	42a3      	cmp	r3, r4
 800ff38:	bfa8      	it	ge
 800ff3a:	4623      	movge	r3, r4
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	bfc2      	ittt	gt
 800ff40:	1aff      	subgt	r7, r7, r3
 800ff42:	1ae4      	subgt	r4, r4, r3
 800ff44:	1af6      	subgt	r6, r6, r3
 800ff46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff48:	b1bb      	cbz	r3, 800ff7a <_strtod_l+0x742>
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	9904      	ldr	r1, [sp, #16]
 800ff4e:	4658      	mov	r0, fp
 800ff50:	f001 fb46 	bl	80115e0 <__pow5mult>
 800ff54:	9004      	str	r0, [sp, #16]
 800ff56:	2800      	cmp	r0, #0
 800ff58:	f43f ae90 	beq.w	800fc7c <_strtod_l+0x444>
 800ff5c:	4601      	mov	r1, r0
 800ff5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ff60:	4658      	mov	r0, fp
 800ff62:	f001 faa8 	bl	80114b6 <__multiply>
 800ff66:	9009      	str	r0, [sp, #36]	; 0x24
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	f43f ae87 	beq.w	800fc7c <_strtod_l+0x444>
 800ff6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ff70:	4658      	mov	r0, fp
 800ff72:	f001 f9b9 	bl	80112e8 <_Bfree>
 800ff76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff78:	931c      	str	r3, [sp, #112]	; 0x70
 800ff7a:	2f00      	cmp	r7, #0
 800ff7c:	dc7a      	bgt.n	8010074 <_strtod_l+0x83c>
 800ff7e:	9b07      	ldr	r3, [sp, #28]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	dd08      	ble.n	800ff96 <_strtod_l+0x75e>
 800ff84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ff86:	9906      	ldr	r1, [sp, #24]
 800ff88:	4658      	mov	r0, fp
 800ff8a:	f001 fb29 	bl	80115e0 <__pow5mult>
 800ff8e:	9006      	str	r0, [sp, #24]
 800ff90:	2800      	cmp	r0, #0
 800ff92:	f43f ae73 	beq.w	800fc7c <_strtod_l+0x444>
 800ff96:	2c00      	cmp	r4, #0
 800ff98:	dd08      	ble.n	800ffac <_strtod_l+0x774>
 800ff9a:	4622      	mov	r2, r4
 800ff9c:	9906      	ldr	r1, [sp, #24]
 800ff9e:	4658      	mov	r0, fp
 800ffa0:	f001 fb6c 	bl	801167c <__lshift>
 800ffa4:	9006      	str	r0, [sp, #24]
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	f43f ae68 	beq.w	800fc7c <_strtod_l+0x444>
 800ffac:	2e00      	cmp	r6, #0
 800ffae:	dd08      	ble.n	800ffc2 <_strtod_l+0x78a>
 800ffb0:	4632      	mov	r2, r6
 800ffb2:	9904      	ldr	r1, [sp, #16]
 800ffb4:	4658      	mov	r0, fp
 800ffb6:	f001 fb61 	bl	801167c <__lshift>
 800ffba:	9004      	str	r0, [sp, #16]
 800ffbc:	2800      	cmp	r0, #0
 800ffbe:	f43f ae5d 	beq.w	800fc7c <_strtod_l+0x444>
 800ffc2:	9a06      	ldr	r2, [sp, #24]
 800ffc4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ffc6:	4658      	mov	r0, fp
 800ffc8:	f001 fbc6 	bl	8011758 <__mdiff>
 800ffcc:	4680      	mov	r8, r0
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	f43f ae54 	beq.w	800fc7c <_strtod_l+0x444>
 800ffd4:	2400      	movs	r4, #0
 800ffd6:	68c3      	ldr	r3, [r0, #12]
 800ffd8:	9904      	ldr	r1, [sp, #16]
 800ffda:	60c4      	str	r4, [r0, #12]
 800ffdc:	930c      	str	r3, [sp, #48]	; 0x30
 800ffde:	f001 fba1 	bl	8011724 <__mcmp>
 800ffe2:	42a0      	cmp	r0, r4
 800ffe4:	da54      	bge.n	8010090 <_strtod_l+0x858>
 800ffe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ffe8:	b9f3      	cbnz	r3, 8010028 <_strtod_l+0x7f0>
 800ffea:	f1b9 0f00 	cmp.w	r9, #0
 800ffee:	d11b      	bne.n	8010028 <_strtod_l+0x7f0>
 800fff0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800fff4:	b9c3      	cbnz	r3, 8010028 <_strtod_l+0x7f0>
 800fff6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800fffa:	0d1b      	lsrs	r3, r3, #20
 800fffc:	051b      	lsls	r3, r3, #20
 800fffe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010002:	d911      	bls.n	8010028 <_strtod_l+0x7f0>
 8010004:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8010008:	b91b      	cbnz	r3, 8010012 <_strtod_l+0x7da>
 801000a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801000e:	2b01      	cmp	r3, #1
 8010010:	dd0a      	ble.n	8010028 <_strtod_l+0x7f0>
 8010012:	4641      	mov	r1, r8
 8010014:	2201      	movs	r2, #1
 8010016:	4658      	mov	r0, fp
 8010018:	f001 fb30 	bl	801167c <__lshift>
 801001c:	9904      	ldr	r1, [sp, #16]
 801001e:	4680      	mov	r8, r0
 8010020:	f001 fb80 	bl	8011724 <__mcmp>
 8010024:	2800      	cmp	r0, #0
 8010026:	dc68      	bgt.n	80100fa <_strtod_l+0x8c2>
 8010028:	9b05      	ldr	r3, [sp, #20]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d172      	bne.n	8010114 <_strtod_l+0x8dc>
 801002e:	e630      	b.n	800fc92 <_strtod_l+0x45a>
 8010030:	f018 0f01 	tst.w	r8, #1
 8010034:	d004      	beq.n	8010040 <_strtod_l+0x808>
 8010036:	e9d5 2300 	ldrd	r2, r3, [r5]
 801003a:	f7f5 fac7 	bl	80055cc <__aeabi_dmul>
 801003e:	2301      	movs	r3, #1
 8010040:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010044:	3508      	adds	r5, #8
 8010046:	e6dc      	b.n	800fe02 <_strtod_l+0x5ca>
 8010048:	f04f 32ff 	mov.w	r2, #4294967295
 801004c:	fa02 f303 	lsl.w	r3, r2, r3
 8010050:	ea03 0909 	and.w	r9, r3, r9
 8010054:	e6f6      	b.n	800fe44 <_strtod_l+0x60c>
 8010056:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 801005a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 801005e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8010062:	35e2      	adds	r5, #226	; 0xe2
 8010064:	fa07 f505 	lsl.w	r5, r7, r5
 8010068:	970f      	str	r7, [sp, #60]	; 0x3c
 801006a:	e75c      	b.n	800ff26 <_strtod_l+0x6ee>
 801006c:	2301      	movs	r3, #1
 801006e:	2500      	movs	r5, #0
 8010070:	930f      	str	r3, [sp, #60]	; 0x3c
 8010072:	e758      	b.n	800ff26 <_strtod_l+0x6ee>
 8010074:	463a      	mov	r2, r7
 8010076:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010078:	4658      	mov	r0, fp
 801007a:	f001 faff 	bl	801167c <__lshift>
 801007e:	901c      	str	r0, [sp, #112]	; 0x70
 8010080:	2800      	cmp	r0, #0
 8010082:	f47f af7c 	bne.w	800ff7e <_strtod_l+0x746>
 8010086:	e5f9      	b.n	800fc7c <_strtod_l+0x444>
 8010088:	08012708 	.word	0x08012708
 801008c:	fffffc02 	.word	0xfffffc02
 8010090:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010094:	f040 8089 	bne.w	80101aa <_strtod_l+0x972>
 8010098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801009a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 801009e:	b342      	cbz	r2, 80100f2 <_strtod_l+0x8ba>
 80100a0:	4aaf      	ldr	r2, [pc, #700]	; (8010360 <_strtod_l+0xb28>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d156      	bne.n	8010154 <_strtod_l+0x91c>
 80100a6:	9b05      	ldr	r3, [sp, #20]
 80100a8:	4648      	mov	r0, r9
 80100aa:	b1eb      	cbz	r3, 80100e8 <_strtod_l+0x8b0>
 80100ac:	4653      	mov	r3, sl
 80100ae:	4aad      	ldr	r2, [pc, #692]	; (8010364 <_strtod_l+0xb2c>)
 80100b0:	f04f 31ff 	mov.w	r1, #4294967295
 80100b4:	401a      	ands	r2, r3
 80100b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80100ba:	d818      	bhi.n	80100ee <_strtod_l+0x8b6>
 80100bc:	0d12      	lsrs	r2, r2, #20
 80100be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80100c2:	fa01 f303 	lsl.w	r3, r1, r3
 80100c6:	4298      	cmp	r0, r3
 80100c8:	d144      	bne.n	8010154 <_strtod_l+0x91c>
 80100ca:	4ba7      	ldr	r3, [pc, #668]	; (8010368 <_strtod_l+0xb30>)
 80100cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d102      	bne.n	80100d8 <_strtod_l+0x8a0>
 80100d2:	3001      	adds	r0, #1
 80100d4:	f43f add2 	beq.w	800fc7c <_strtod_l+0x444>
 80100d8:	4ba2      	ldr	r3, [pc, #648]	; (8010364 <_strtod_l+0xb2c>)
 80100da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100dc:	f04f 0900 	mov.w	r9, #0
 80100e0:	401a      	ands	r2, r3
 80100e2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80100e6:	e79f      	b.n	8010028 <_strtod_l+0x7f0>
 80100e8:	f04f 33ff 	mov.w	r3, #4294967295
 80100ec:	e7eb      	b.n	80100c6 <_strtod_l+0x88e>
 80100ee:	460b      	mov	r3, r1
 80100f0:	e7e9      	b.n	80100c6 <_strtod_l+0x88e>
 80100f2:	bb7b      	cbnz	r3, 8010154 <_strtod_l+0x91c>
 80100f4:	f1b9 0f00 	cmp.w	r9, #0
 80100f8:	d12c      	bne.n	8010154 <_strtod_l+0x91c>
 80100fa:	9905      	ldr	r1, [sp, #20]
 80100fc:	4653      	mov	r3, sl
 80100fe:	4a99      	ldr	r2, [pc, #612]	; (8010364 <_strtod_l+0xb2c>)
 8010100:	b1f1      	cbz	r1, 8010140 <_strtod_l+0x908>
 8010102:	ea02 010a 	and.w	r1, r2, sl
 8010106:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801010a:	dc19      	bgt.n	8010140 <_strtod_l+0x908>
 801010c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010110:	f77f ae51 	ble.w	800fdb6 <_strtod_l+0x57e>
 8010114:	2300      	movs	r3, #0
 8010116:	4a95      	ldr	r2, [pc, #596]	; (801036c <_strtod_l+0xb34>)
 8010118:	4648      	mov	r0, r9
 801011a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801011e:	4651      	mov	r1, sl
 8010120:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010124:	f7f5 fa52 	bl	80055cc <__aeabi_dmul>
 8010128:	4681      	mov	r9, r0
 801012a:	468a      	mov	sl, r1
 801012c:	2900      	cmp	r1, #0
 801012e:	f47f adb0 	bne.w	800fc92 <_strtod_l+0x45a>
 8010132:	2800      	cmp	r0, #0
 8010134:	f47f adad 	bne.w	800fc92 <_strtod_l+0x45a>
 8010138:	2322      	movs	r3, #34	; 0x22
 801013a:	f8cb 3000 	str.w	r3, [fp]
 801013e:	e5a8      	b.n	800fc92 <_strtod_l+0x45a>
 8010140:	4013      	ands	r3, r2
 8010142:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010146:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 801014a:	f04f 39ff 	mov.w	r9, #4294967295
 801014e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8010152:	e769      	b.n	8010028 <_strtod_l+0x7f0>
 8010154:	b19d      	cbz	r5, 801017e <_strtod_l+0x946>
 8010156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010158:	421d      	tst	r5, r3
 801015a:	f43f af65 	beq.w	8010028 <_strtod_l+0x7f0>
 801015e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010160:	9a05      	ldr	r2, [sp, #20]
 8010162:	4648      	mov	r0, r9
 8010164:	4651      	mov	r1, sl
 8010166:	b173      	cbz	r3, 8010186 <_strtod_l+0x94e>
 8010168:	f7ff fb42 	bl	800f7f0 <sulp>
 801016c:	4602      	mov	r2, r0
 801016e:	460b      	mov	r3, r1
 8010170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010174:	f7f5 f874 	bl	8005260 <__adddf3>
 8010178:	4681      	mov	r9, r0
 801017a:	468a      	mov	sl, r1
 801017c:	e754      	b.n	8010028 <_strtod_l+0x7f0>
 801017e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010180:	ea13 0f09 	tst.w	r3, r9
 8010184:	e7e9      	b.n	801015a <_strtod_l+0x922>
 8010186:	f7ff fb33 	bl	800f7f0 <sulp>
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010192:	f7f5 f863 	bl	800525c <__aeabi_dsub>
 8010196:	2200      	movs	r2, #0
 8010198:	2300      	movs	r3, #0
 801019a:	4681      	mov	r9, r0
 801019c:	468a      	mov	sl, r1
 801019e:	f7f5 fc7d 	bl	8005a9c <__aeabi_dcmpeq>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	f47f ae07 	bne.w	800fdb6 <_strtod_l+0x57e>
 80101a8:	e73e      	b.n	8010028 <_strtod_l+0x7f0>
 80101aa:	9904      	ldr	r1, [sp, #16]
 80101ac:	4640      	mov	r0, r8
 80101ae:	f001 fbf6 	bl	801199e <__ratio>
 80101b2:	2200      	movs	r2, #0
 80101b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101b8:	4606      	mov	r6, r0
 80101ba:	460f      	mov	r7, r1
 80101bc:	f7f5 fc82 	bl	8005ac4 <__aeabi_dcmple>
 80101c0:	2800      	cmp	r0, #0
 80101c2:	d075      	beq.n	80102b0 <_strtod_l+0xa78>
 80101c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d047      	beq.n	801025a <_strtod_l+0xa22>
 80101ca:	2600      	movs	r6, #0
 80101cc:	4f68      	ldr	r7, [pc, #416]	; (8010370 <_strtod_l+0xb38>)
 80101ce:	4d68      	ldr	r5, [pc, #416]	; (8010370 <_strtod_l+0xb38>)
 80101d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101d6:	0d1b      	lsrs	r3, r3, #20
 80101d8:	051b      	lsls	r3, r3, #20
 80101da:	930f      	str	r3, [sp, #60]	; 0x3c
 80101dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80101de:	4b65      	ldr	r3, [pc, #404]	; (8010374 <_strtod_l+0xb3c>)
 80101e0:	429a      	cmp	r2, r3
 80101e2:	f040 80cf 	bne.w	8010384 <_strtod_l+0xb4c>
 80101e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80101ea:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80101ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101f0:	4648      	mov	r0, r9
 80101f2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80101f6:	4651      	mov	r1, sl
 80101f8:	f001 fb0c 	bl	8011814 <__ulp>
 80101fc:	4602      	mov	r2, r0
 80101fe:	460b      	mov	r3, r1
 8010200:	4630      	mov	r0, r6
 8010202:	4639      	mov	r1, r7
 8010204:	f7f5 f9e2 	bl	80055cc <__aeabi_dmul>
 8010208:	464a      	mov	r2, r9
 801020a:	4653      	mov	r3, sl
 801020c:	f7f5 f828 	bl	8005260 <__adddf3>
 8010210:	460b      	mov	r3, r1
 8010212:	4954      	ldr	r1, [pc, #336]	; (8010364 <_strtod_l+0xb2c>)
 8010214:	4a58      	ldr	r2, [pc, #352]	; (8010378 <_strtod_l+0xb40>)
 8010216:	4019      	ands	r1, r3
 8010218:	4291      	cmp	r1, r2
 801021a:	4681      	mov	r9, r0
 801021c:	d95e      	bls.n	80102dc <_strtod_l+0xaa4>
 801021e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010220:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010224:	4293      	cmp	r3, r2
 8010226:	d103      	bne.n	8010230 <_strtod_l+0x9f8>
 8010228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801022a:	3301      	adds	r3, #1
 801022c:	f43f ad26 	beq.w	800fc7c <_strtod_l+0x444>
 8010230:	f04f 39ff 	mov.w	r9, #4294967295
 8010234:	f8df a130 	ldr.w	sl, [pc, #304]	; 8010368 <_strtod_l+0xb30>
 8010238:	991c      	ldr	r1, [sp, #112]	; 0x70
 801023a:	4658      	mov	r0, fp
 801023c:	f001 f854 	bl	80112e8 <_Bfree>
 8010240:	9906      	ldr	r1, [sp, #24]
 8010242:	4658      	mov	r0, fp
 8010244:	f001 f850 	bl	80112e8 <_Bfree>
 8010248:	9904      	ldr	r1, [sp, #16]
 801024a:	4658      	mov	r0, fp
 801024c:	f001 f84c 	bl	80112e8 <_Bfree>
 8010250:	4641      	mov	r1, r8
 8010252:	4658      	mov	r0, fp
 8010254:	f001 f848 	bl	80112e8 <_Bfree>
 8010258:	e617      	b.n	800fe8a <_strtod_l+0x652>
 801025a:	f1b9 0f00 	cmp.w	r9, #0
 801025e:	d119      	bne.n	8010294 <_strtod_l+0xa5c>
 8010260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010266:	b9e3      	cbnz	r3, 80102a2 <_strtod_l+0xa6a>
 8010268:	2200      	movs	r2, #0
 801026a:	4b41      	ldr	r3, [pc, #260]	; (8010370 <_strtod_l+0xb38>)
 801026c:	4630      	mov	r0, r6
 801026e:	4639      	mov	r1, r7
 8010270:	f7f5 fc1e 	bl	8005ab0 <__aeabi_dcmplt>
 8010274:	b9c8      	cbnz	r0, 80102aa <_strtod_l+0xa72>
 8010276:	2200      	movs	r2, #0
 8010278:	4b40      	ldr	r3, [pc, #256]	; (801037c <_strtod_l+0xb44>)
 801027a:	4630      	mov	r0, r6
 801027c:	4639      	mov	r1, r7
 801027e:	f7f5 f9a5 	bl	80055cc <__aeabi_dmul>
 8010282:	4604      	mov	r4, r0
 8010284:	460d      	mov	r5, r1
 8010286:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801028a:	9418      	str	r4, [sp, #96]	; 0x60
 801028c:	9319      	str	r3, [sp, #100]	; 0x64
 801028e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8010292:	e79d      	b.n	80101d0 <_strtod_l+0x998>
 8010294:	f1b9 0f01 	cmp.w	r9, #1
 8010298:	d103      	bne.n	80102a2 <_strtod_l+0xa6a>
 801029a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801029c:	2b00      	cmp	r3, #0
 801029e:	f43f ad8a 	beq.w	800fdb6 <_strtod_l+0x57e>
 80102a2:	2600      	movs	r6, #0
 80102a4:	4f36      	ldr	r7, [pc, #216]	; (8010380 <_strtod_l+0xb48>)
 80102a6:	2400      	movs	r4, #0
 80102a8:	e791      	b.n	80101ce <_strtod_l+0x996>
 80102aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80102ac:	4d33      	ldr	r5, [pc, #204]	; (801037c <_strtod_l+0xb44>)
 80102ae:	e7ea      	b.n	8010286 <_strtod_l+0xa4e>
 80102b0:	4b32      	ldr	r3, [pc, #200]	; (801037c <_strtod_l+0xb44>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	4630      	mov	r0, r6
 80102b6:	4639      	mov	r1, r7
 80102b8:	f7f5 f988 	bl	80055cc <__aeabi_dmul>
 80102bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102be:	4604      	mov	r4, r0
 80102c0:	460d      	mov	r5, r1
 80102c2:	b933      	cbnz	r3, 80102d2 <_strtod_l+0xa9a>
 80102c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102c8:	9010      	str	r0, [sp, #64]	; 0x40
 80102ca:	9311      	str	r3, [sp, #68]	; 0x44
 80102cc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80102d0:	e77e      	b.n	80101d0 <_strtod_l+0x998>
 80102d2:	4602      	mov	r2, r0
 80102d4:	460b      	mov	r3, r1
 80102d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80102da:	e7f7      	b.n	80102cc <_strtod_l+0xa94>
 80102dc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80102e0:	9b05      	ldr	r3, [sp, #20]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1a8      	bne.n	8010238 <_strtod_l+0xa00>
 80102e6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80102ea:	0d1b      	lsrs	r3, r3, #20
 80102ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80102ee:	051b      	lsls	r3, r3, #20
 80102f0:	429a      	cmp	r2, r3
 80102f2:	4656      	mov	r6, sl
 80102f4:	d1a0      	bne.n	8010238 <_strtod_l+0xa00>
 80102f6:	4629      	mov	r1, r5
 80102f8:	4620      	mov	r0, r4
 80102fa:	f7f5 fc17 	bl	8005b2c <__aeabi_d2iz>
 80102fe:	f7f5 f8fb 	bl	80054f8 <__aeabi_i2d>
 8010302:	460b      	mov	r3, r1
 8010304:	4602      	mov	r2, r0
 8010306:	4629      	mov	r1, r5
 8010308:	4620      	mov	r0, r4
 801030a:	f7f4 ffa7 	bl	800525c <__aeabi_dsub>
 801030e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010310:	4604      	mov	r4, r0
 8010312:	460d      	mov	r5, r1
 8010314:	b933      	cbnz	r3, 8010324 <_strtod_l+0xaec>
 8010316:	f1b9 0f00 	cmp.w	r9, #0
 801031a:	d103      	bne.n	8010324 <_strtod_l+0xaec>
 801031c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8010320:	2e00      	cmp	r6, #0
 8010322:	d06a      	beq.n	80103fa <_strtod_l+0xbc2>
 8010324:	a30a      	add	r3, pc, #40	; (adr r3, 8010350 <_strtod_l+0xb18>)
 8010326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032a:	4620      	mov	r0, r4
 801032c:	4629      	mov	r1, r5
 801032e:	f7f5 fbbf 	bl	8005ab0 <__aeabi_dcmplt>
 8010332:	2800      	cmp	r0, #0
 8010334:	f47f acad 	bne.w	800fc92 <_strtod_l+0x45a>
 8010338:	a307      	add	r3, pc, #28	; (adr r3, 8010358 <_strtod_l+0xb20>)
 801033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033e:	4620      	mov	r0, r4
 8010340:	4629      	mov	r1, r5
 8010342:	f7f5 fbd3 	bl	8005aec <__aeabi_dcmpgt>
 8010346:	2800      	cmp	r0, #0
 8010348:	f43f af76 	beq.w	8010238 <_strtod_l+0xa00>
 801034c:	e4a1      	b.n	800fc92 <_strtod_l+0x45a>
 801034e:	bf00      	nop
 8010350:	94a03595 	.word	0x94a03595
 8010354:	3fdfffff 	.word	0x3fdfffff
 8010358:	35afe535 	.word	0x35afe535
 801035c:	3fe00000 	.word	0x3fe00000
 8010360:	000fffff 	.word	0x000fffff
 8010364:	7ff00000 	.word	0x7ff00000
 8010368:	7fefffff 	.word	0x7fefffff
 801036c:	39500000 	.word	0x39500000
 8010370:	3ff00000 	.word	0x3ff00000
 8010374:	7fe00000 	.word	0x7fe00000
 8010378:	7c9fffff 	.word	0x7c9fffff
 801037c:	3fe00000 	.word	0x3fe00000
 8010380:	bff00000 	.word	0xbff00000
 8010384:	9b05      	ldr	r3, [sp, #20]
 8010386:	b313      	cbz	r3, 80103ce <_strtod_l+0xb96>
 8010388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801038a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801038e:	d81e      	bhi.n	80103ce <_strtod_l+0xb96>
 8010390:	a325      	add	r3, pc, #148	; (adr r3, 8010428 <_strtod_l+0xbf0>)
 8010392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010396:	4620      	mov	r0, r4
 8010398:	4629      	mov	r1, r5
 801039a:	f7f5 fb93 	bl	8005ac4 <__aeabi_dcmple>
 801039e:	b190      	cbz	r0, 80103c6 <_strtod_l+0xb8e>
 80103a0:	4629      	mov	r1, r5
 80103a2:	4620      	mov	r0, r4
 80103a4:	f7f5 fbea 	bl	8005b7c <__aeabi_d2uiz>
 80103a8:	2800      	cmp	r0, #0
 80103aa:	bf08      	it	eq
 80103ac:	2001      	moveq	r0, #1
 80103ae:	f7f5 f893 	bl	80054d8 <__aeabi_ui2d>
 80103b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103b4:	4604      	mov	r4, r0
 80103b6:	460d      	mov	r5, r1
 80103b8:	b9d3      	cbnz	r3, 80103f0 <_strtod_l+0xbb8>
 80103ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103be:	9012      	str	r0, [sp, #72]	; 0x48
 80103c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80103c2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80103c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80103c8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80103cc:	1a9f      	subs	r7, r3, r2
 80103ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80103d2:	f001 fa1f 	bl	8011814 <__ulp>
 80103d6:	4602      	mov	r2, r0
 80103d8:	460b      	mov	r3, r1
 80103da:	4630      	mov	r0, r6
 80103dc:	4639      	mov	r1, r7
 80103de:	f7f5 f8f5 	bl	80055cc <__aeabi_dmul>
 80103e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80103e6:	f7f4 ff3b 	bl	8005260 <__adddf3>
 80103ea:	4681      	mov	r9, r0
 80103ec:	468a      	mov	sl, r1
 80103ee:	e777      	b.n	80102e0 <_strtod_l+0xaa8>
 80103f0:	4602      	mov	r2, r0
 80103f2:	460b      	mov	r3, r1
 80103f4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80103f8:	e7e3      	b.n	80103c2 <_strtod_l+0xb8a>
 80103fa:	a30d      	add	r3, pc, #52	; (adr r3, 8010430 <_strtod_l+0xbf8>)
 80103fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010400:	f7f5 fb56 	bl	8005ab0 <__aeabi_dcmplt>
 8010404:	e79f      	b.n	8010346 <_strtod_l+0xb0e>
 8010406:	2300      	movs	r3, #0
 8010408:	930d      	str	r3, [sp, #52]	; 0x34
 801040a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801040c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801040e:	6013      	str	r3, [r2, #0]
 8010410:	f7ff ba55 	b.w	800f8be <_strtod_l+0x86>
 8010414:	2b65      	cmp	r3, #101	; 0x65
 8010416:	f04f 0200 	mov.w	r2, #0
 801041a:	f43f ab42 	beq.w	800faa2 <_strtod_l+0x26a>
 801041e:	2101      	movs	r1, #1
 8010420:	4614      	mov	r4, r2
 8010422:	9105      	str	r1, [sp, #20]
 8010424:	f7ff babf 	b.w	800f9a6 <_strtod_l+0x16e>
 8010428:	ffc00000 	.word	0xffc00000
 801042c:	41dfffff 	.word	0x41dfffff
 8010430:	94a03595 	.word	0x94a03595
 8010434:	3fcfffff 	.word	0x3fcfffff

08010438 <strtof>:
 8010438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801043c:	4e21      	ldr	r6, [pc, #132]	; (80104c4 <strtof+0x8c>)
 801043e:	4a22      	ldr	r2, [pc, #136]	; (80104c8 <strtof+0x90>)
 8010440:	6834      	ldr	r4, [r6, #0]
 8010442:	6a23      	ldr	r3, [r4, #32]
 8010444:	2b00      	cmp	r3, #0
 8010446:	bf08      	it	eq
 8010448:	4613      	moveq	r3, r2
 801044a:	460a      	mov	r2, r1
 801044c:	4601      	mov	r1, r0
 801044e:	4620      	mov	r0, r4
 8010450:	f7ff f9f2 	bl	800f838 <_strtod_l>
 8010454:	4605      	mov	r5, r0
 8010456:	460c      	mov	r4, r1
 8010458:	4602      	mov	r2, r0
 801045a:	460b      	mov	r3, r1
 801045c:	4628      	mov	r0, r5
 801045e:	4621      	mov	r1, r4
 8010460:	f7f5 fb4e 	bl	8005b00 <__aeabi_dcmpun>
 8010464:	b120      	cbz	r0, 8010470 <strtof+0x38>
 8010466:	2000      	movs	r0, #0
 8010468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801046c:	f001 be9e 	b.w	80121ac <nanf>
 8010470:	4621      	mov	r1, r4
 8010472:	4628      	mov	r0, r5
 8010474:	f7f5 fba2 	bl	8005bbc <__aeabi_d2f>
 8010478:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 801047c:	4607      	mov	r7, r0
 801047e:	4913      	ldr	r1, [pc, #76]	; (80104cc <strtof+0x94>)
 8010480:	4640      	mov	r0, r8
 8010482:	f7f5 fc61 	bl	8005d48 <__aeabi_fcmpun>
 8010486:	b9c8      	cbnz	r0, 80104bc <strtof+0x84>
 8010488:	4910      	ldr	r1, [pc, #64]	; (80104cc <strtof+0x94>)
 801048a:	4640      	mov	r0, r8
 801048c:	f7f5 fc3e 	bl	8005d0c <__aeabi_fcmple>
 8010490:	b9a0      	cbnz	r0, 80104bc <strtof+0x84>
 8010492:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010496:	f04f 32ff 	mov.w	r2, #4294967295
 801049a:	4b0d      	ldr	r3, [pc, #52]	; (80104d0 <strtof+0x98>)
 801049c:	4628      	mov	r0, r5
 801049e:	4621      	mov	r1, r4
 80104a0:	f7f5 fb2e 	bl	8005b00 <__aeabi_dcmpun>
 80104a4:	b938      	cbnz	r0, 80104b6 <strtof+0x7e>
 80104a6:	f04f 32ff 	mov.w	r2, #4294967295
 80104aa:	4b09      	ldr	r3, [pc, #36]	; (80104d0 <strtof+0x98>)
 80104ac:	4628      	mov	r0, r5
 80104ae:	4621      	mov	r1, r4
 80104b0:	f7f5 fb08 	bl	8005ac4 <__aeabi_dcmple>
 80104b4:	b110      	cbz	r0, 80104bc <strtof+0x84>
 80104b6:	2222      	movs	r2, #34	; 0x22
 80104b8:	6833      	ldr	r3, [r6, #0]
 80104ba:	601a      	str	r2, [r3, #0]
 80104bc:	4638      	mov	r0, r7
 80104be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104c2:	bf00      	nop
 80104c4:	200001a8 	.word	0x200001a8
 80104c8:	2000020c 	.word	0x2000020c
 80104cc:	7f7fffff 	.word	0x7f7fffff
 80104d0:	7fefffff 	.word	0x7fefffff

080104d4 <__strtok_r>:
 80104d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104d6:	b918      	cbnz	r0, 80104e0 <__strtok_r+0xc>
 80104d8:	6810      	ldr	r0, [r2, #0]
 80104da:	b908      	cbnz	r0, 80104e0 <__strtok_r+0xc>
 80104dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104de:	4620      	mov	r0, r4
 80104e0:	4604      	mov	r4, r0
 80104e2:	460f      	mov	r7, r1
 80104e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80104e8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80104ec:	b91e      	cbnz	r6, 80104f6 <__strtok_r+0x22>
 80104ee:	b96d      	cbnz	r5, 801050c <__strtok_r+0x38>
 80104f0:	6015      	str	r5, [r2, #0]
 80104f2:	4628      	mov	r0, r5
 80104f4:	e7f2      	b.n	80104dc <__strtok_r+0x8>
 80104f6:	42b5      	cmp	r5, r6
 80104f8:	d1f6      	bne.n	80104e8 <__strtok_r+0x14>
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d1ef      	bne.n	80104de <__strtok_r+0xa>
 80104fe:	6014      	str	r4, [r2, #0]
 8010500:	7003      	strb	r3, [r0, #0]
 8010502:	e7eb      	b.n	80104dc <__strtok_r+0x8>
 8010504:	462b      	mov	r3, r5
 8010506:	e00d      	b.n	8010524 <__strtok_r+0x50>
 8010508:	b926      	cbnz	r6, 8010514 <__strtok_r+0x40>
 801050a:	461c      	mov	r4, r3
 801050c:	4623      	mov	r3, r4
 801050e:	460f      	mov	r7, r1
 8010510:	f813 5b01 	ldrb.w	r5, [r3], #1
 8010514:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010518:	42b5      	cmp	r5, r6
 801051a:	d1f5      	bne.n	8010508 <__strtok_r+0x34>
 801051c:	2d00      	cmp	r5, #0
 801051e:	d0f1      	beq.n	8010504 <__strtok_r+0x30>
 8010520:	2100      	movs	r1, #0
 8010522:	7021      	strb	r1, [r4, #0]
 8010524:	6013      	str	r3, [r2, #0]
 8010526:	e7d9      	b.n	80104dc <__strtok_r+0x8>

08010528 <strtok_r>:
 8010528:	2301      	movs	r3, #1
 801052a:	f7ff bfd3 	b.w	80104d4 <__strtok_r>

0801052e <_strtoul_l.isra.0>:
 801052e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010532:	4680      	mov	r8, r0
 8010534:	4689      	mov	r9, r1
 8010536:	4692      	mov	sl, r2
 8010538:	461e      	mov	r6, r3
 801053a:	460f      	mov	r7, r1
 801053c:	463d      	mov	r5, r7
 801053e:	9808      	ldr	r0, [sp, #32]
 8010540:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010544:	f000 fe20 	bl	8011188 <__locale_ctype_ptr_l>
 8010548:	4420      	add	r0, r4
 801054a:	7843      	ldrb	r3, [r0, #1]
 801054c:	f013 0308 	ands.w	r3, r3, #8
 8010550:	d130      	bne.n	80105b4 <_strtoul_l.isra.0+0x86>
 8010552:	2c2d      	cmp	r4, #45	; 0x2d
 8010554:	d130      	bne.n	80105b8 <_strtoul_l.isra.0+0x8a>
 8010556:	2101      	movs	r1, #1
 8010558:	787c      	ldrb	r4, [r7, #1]
 801055a:	1cbd      	adds	r5, r7, #2
 801055c:	2e00      	cmp	r6, #0
 801055e:	d05c      	beq.n	801061a <_strtoul_l.isra.0+0xec>
 8010560:	2e10      	cmp	r6, #16
 8010562:	d109      	bne.n	8010578 <_strtoul_l.isra.0+0x4a>
 8010564:	2c30      	cmp	r4, #48	; 0x30
 8010566:	d107      	bne.n	8010578 <_strtoul_l.isra.0+0x4a>
 8010568:	782b      	ldrb	r3, [r5, #0]
 801056a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801056e:	2b58      	cmp	r3, #88	; 0x58
 8010570:	d14e      	bne.n	8010610 <_strtoul_l.isra.0+0xe2>
 8010572:	2610      	movs	r6, #16
 8010574:	786c      	ldrb	r4, [r5, #1]
 8010576:	3502      	adds	r5, #2
 8010578:	f04f 32ff 	mov.w	r2, #4294967295
 801057c:	fbb2 f2f6 	udiv	r2, r2, r6
 8010580:	2300      	movs	r3, #0
 8010582:	fb06 fc02 	mul.w	ip, r6, r2
 8010586:	4618      	mov	r0, r3
 8010588:	ea6f 0c0c 	mvn.w	ip, ip
 801058c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8010590:	2f09      	cmp	r7, #9
 8010592:	d817      	bhi.n	80105c4 <_strtoul_l.isra.0+0x96>
 8010594:	463c      	mov	r4, r7
 8010596:	42a6      	cmp	r6, r4
 8010598:	dd23      	ble.n	80105e2 <_strtoul_l.isra.0+0xb4>
 801059a:	2b00      	cmp	r3, #0
 801059c:	db1e      	blt.n	80105dc <_strtoul_l.isra.0+0xae>
 801059e:	4282      	cmp	r2, r0
 80105a0:	d31c      	bcc.n	80105dc <_strtoul_l.isra.0+0xae>
 80105a2:	d101      	bne.n	80105a8 <_strtoul_l.isra.0+0x7a>
 80105a4:	45a4      	cmp	ip, r4
 80105a6:	db19      	blt.n	80105dc <_strtoul_l.isra.0+0xae>
 80105a8:	2301      	movs	r3, #1
 80105aa:	fb00 4006 	mla	r0, r0, r6, r4
 80105ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105b2:	e7eb      	b.n	801058c <_strtoul_l.isra.0+0x5e>
 80105b4:	462f      	mov	r7, r5
 80105b6:	e7c1      	b.n	801053c <_strtoul_l.isra.0+0xe>
 80105b8:	2c2b      	cmp	r4, #43	; 0x2b
 80105ba:	bf04      	itt	eq
 80105bc:	1cbd      	addeq	r5, r7, #2
 80105be:	787c      	ldrbeq	r4, [r7, #1]
 80105c0:	4619      	mov	r1, r3
 80105c2:	e7cb      	b.n	801055c <_strtoul_l.isra.0+0x2e>
 80105c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80105c8:	2f19      	cmp	r7, #25
 80105ca:	d801      	bhi.n	80105d0 <_strtoul_l.isra.0+0xa2>
 80105cc:	3c37      	subs	r4, #55	; 0x37
 80105ce:	e7e2      	b.n	8010596 <_strtoul_l.isra.0+0x68>
 80105d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80105d4:	2f19      	cmp	r7, #25
 80105d6:	d804      	bhi.n	80105e2 <_strtoul_l.isra.0+0xb4>
 80105d8:	3c57      	subs	r4, #87	; 0x57
 80105da:	e7dc      	b.n	8010596 <_strtoul_l.isra.0+0x68>
 80105dc:	f04f 33ff 	mov.w	r3, #4294967295
 80105e0:	e7e5      	b.n	80105ae <_strtoul_l.isra.0+0x80>
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	da09      	bge.n	80105fa <_strtoul_l.isra.0+0xcc>
 80105e6:	2322      	movs	r3, #34	; 0x22
 80105e8:	f04f 30ff 	mov.w	r0, #4294967295
 80105ec:	f8c8 3000 	str.w	r3, [r8]
 80105f0:	f1ba 0f00 	cmp.w	sl, #0
 80105f4:	d107      	bne.n	8010606 <_strtoul_l.isra.0+0xd8>
 80105f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105fa:	b101      	cbz	r1, 80105fe <_strtoul_l.isra.0+0xd0>
 80105fc:	4240      	negs	r0, r0
 80105fe:	f1ba 0f00 	cmp.w	sl, #0
 8010602:	d0f8      	beq.n	80105f6 <_strtoul_l.isra.0+0xc8>
 8010604:	b10b      	cbz	r3, 801060a <_strtoul_l.isra.0+0xdc>
 8010606:	f105 39ff 	add.w	r9, r5, #4294967295
 801060a:	f8ca 9000 	str.w	r9, [sl]
 801060e:	e7f2      	b.n	80105f6 <_strtoul_l.isra.0+0xc8>
 8010610:	2430      	movs	r4, #48	; 0x30
 8010612:	2e00      	cmp	r6, #0
 8010614:	d1b0      	bne.n	8010578 <_strtoul_l.isra.0+0x4a>
 8010616:	2608      	movs	r6, #8
 8010618:	e7ae      	b.n	8010578 <_strtoul_l.isra.0+0x4a>
 801061a:	2c30      	cmp	r4, #48	; 0x30
 801061c:	d0a4      	beq.n	8010568 <_strtoul_l.isra.0+0x3a>
 801061e:	260a      	movs	r6, #10
 8010620:	e7aa      	b.n	8010578 <_strtoul_l.isra.0+0x4a>
	...

08010624 <strtoul>:
 8010624:	4b08      	ldr	r3, [pc, #32]	; (8010648 <strtoul+0x24>)
 8010626:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010628:	681c      	ldr	r4, [r3, #0]
 801062a:	4d08      	ldr	r5, [pc, #32]	; (801064c <strtoul+0x28>)
 801062c:	6a23      	ldr	r3, [r4, #32]
 801062e:	2b00      	cmp	r3, #0
 8010630:	bf08      	it	eq
 8010632:	462b      	moveq	r3, r5
 8010634:	9300      	str	r3, [sp, #0]
 8010636:	4613      	mov	r3, r2
 8010638:	460a      	mov	r2, r1
 801063a:	4601      	mov	r1, r0
 801063c:	4620      	mov	r0, r4
 801063e:	f7ff ff76 	bl	801052e <_strtoul_l.isra.0>
 8010642:	b003      	add	sp, #12
 8010644:	bd30      	pop	{r4, r5, pc}
 8010646:	bf00      	nop
 8010648:	200001a8 	.word	0x200001a8
 801064c:	2000020c 	.word	0x2000020c

08010650 <_vsniprintf_r>:
 8010650:	b530      	push	{r4, r5, lr}
 8010652:	1e14      	subs	r4, r2, #0
 8010654:	4605      	mov	r5, r0
 8010656:	b09b      	sub	sp, #108	; 0x6c
 8010658:	4618      	mov	r0, r3
 801065a:	da05      	bge.n	8010668 <_vsniprintf_r+0x18>
 801065c:	238b      	movs	r3, #139	; 0x8b
 801065e:	f04f 30ff 	mov.w	r0, #4294967295
 8010662:	602b      	str	r3, [r5, #0]
 8010664:	b01b      	add	sp, #108	; 0x6c
 8010666:	bd30      	pop	{r4, r5, pc}
 8010668:	f44f 7302 	mov.w	r3, #520	; 0x208
 801066c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010670:	bf0c      	ite	eq
 8010672:	4623      	moveq	r3, r4
 8010674:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010678:	9302      	str	r3, [sp, #8]
 801067a:	9305      	str	r3, [sp, #20]
 801067c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010680:	9100      	str	r1, [sp, #0]
 8010682:	9104      	str	r1, [sp, #16]
 8010684:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010688:	4602      	mov	r2, r0
 801068a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801068c:	4669      	mov	r1, sp
 801068e:	4628      	mov	r0, r5
 8010690:	f001 fafc 	bl	8011c8c <_svfiprintf_r>
 8010694:	1c43      	adds	r3, r0, #1
 8010696:	bfbc      	itt	lt
 8010698:	238b      	movlt	r3, #139	; 0x8b
 801069a:	602b      	strlt	r3, [r5, #0]
 801069c:	2c00      	cmp	r4, #0
 801069e:	d0e1      	beq.n	8010664 <_vsniprintf_r+0x14>
 80106a0:	2200      	movs	r2, #0
 80106a2:	9b00      	ldr	r3, [sp, #0]
 80106a4:	701a      	strb	r2, [r3, #0]
 80106a6:	e7dd      	b.n	8010664 <_vsniprintf_r+0x14>

080106a8 <vsniprintf>:
 80106a8:	b507      	push	{r0, r1, r2, lr}
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	4613      	mov	r3, r2
 80106ae:	460a      	mov	r2, r1
 80106b0:	4601      	mov	r1, r0
 80106b2:	4803      	ldr	r0, [pc, #12]	; (80106c0 <vsniprintf+0x18>)
 80106b4:	6800      	ldr	r0, [r0, #0]
 80106b6:	f7ff ffcb 	bl	8010650 <_vsniprintf_r>
 80106ba:	b003      	add	sp, #12
 80106bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80106c0:	200001a8 	.word	0x200001a8

080106c4 <__swbuf_r>:
 80106c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106c6:	460e      	mov	r6, r1
 80106c8:	4614      	mov	r4, r2
 80106ca:	4605      	mov	r5, r0
 80106cc:	b118      	cbz	r0, 80106d6 <__swbuf_r+0x12>
 80106ce:	6983      	ldr	r3, [r0, #24]
 80106d0:	b90b      	cbnz	r3, 80106d6 <__swbuf_r+0x12>
 80106d2:	f000 f9a7 	bl	8010a24 <__sinit>
 80106d6:	4b21      	ldr	r3, [pc, #132]	; (801075c <__swbuf_r+0x98>)
 80106d8:	429c      	cmp	r4, r3
 80106da:	d12a      	bne.n	8010732 <__swbuf_r+0x6e>
 80106dc:	686c      	ldr	r4, [r5, #4]
 80106de:	69a3      	ldr	r3, [r4, #24]
 80106e0:	60a3      	str	r3, [r4, #8]
 80106e2:	89a3      	ldrh	r3, [r4, #12]
 80106e4:	071a      	lsls	r2, r3, #28
 80106e6:	d52e      	bpl.n	8010746 <__swbuf_r+0x82>
 80106e8:	6923      	ldr	r3, [r4, #16]
 80106ea:	b363      	cbz	r3, 8010746 <__swbuf_r+0x82>
 80106ec:	6923      	ldr	r3, [r4, #16]
 80106ee:	6820      	ldr	r0, [r4, #0]
 80106f0:	b2f6      	uxtb	r6, r6
 80106f2:	1ac0      	subs	r0, r0, r3
 80106f4:	6963      	ldr	r3, [r4, #20]
 80106f6:	4637      	mov	r7, r6
 80106f8:	4283      	cmp	r3, r0
 80106fa:	dc04      	bgt.n	8010706 <__swbuf_r+0x42>
 80106fc:	4621      	mov	r1, r4
 80106fe:	4628      	mov	r0, r5
 8010700:	f000 f926 	bl	8010950 <_fflush_r>
 8010704:	bb28      	cbnz	r0, 8010752 <__swbuf_r+0x8e>
 8010706:	68a3      	ldr	r3, [r4, #8]
 8010708:	3001      	adds	r0, #1
 801070a:	3b01      	subs	r3, #1
 801070c:	60a3      	str	r3, [r4, #8]
 801070e:	6823      	ldr	r3, [r4, #0]
 8010710:	1c5a      	adds	r2, r3, #1
 8010712:	6022      	str	r2, [r4, #0]
 8010714:	701e      	strb	r6, [r3, #0]
 8010716:	6963      	ldr	r3, [r4, #20]
 8010718:	4283      	cmp	r3, r0
 801071a:	d004      	beq.n	8010726 <__swbuf_r+0x62>
 801071c:	89a3      	ldrh	r3, [r4, #12]
 801071e:	07db      	lsls	r3, r3, #31
 8010720:	d519      	bpl.n	8010756 <__swbuf_r+0x92>
 8010722:	2e0a      	cmp	r6, #10
 8010724:	d117      	bne.n	8010756 <__swbuf_r+0x92>
 8010726:	4621      	mov	r1, r4
 8010728:	4628      	mov	r0, r5
 801072a:	f000 f911 	bl	8010950 <_fflush_r>
 801072e:	b190      	cbz	r0, 8010756 <__swbuf_r+0x92>
 8010730:	e00f      	b.n	8010752 <__swbuf_r+0x8e>
 8010732:	4b0b      	ldr	r3, [pc, #44]	; (8010760 <__swbuf_r+0x9c>)
 8010734:	429c      	cmp	r4, r3
 8010736:	d101      	bne.n	801073c <__swbuf_r+0x78>
 8010738:	68ac      	ldr	r4, [r5, #8]
 801073a:	e7d0      	b.n	80106de <__swbuf_r+0x1a>
 801073c:	4b09      	ldr	r3, [pc, #36]	; (8010764 <__swbuf_r+0xa0>)
 801073e:	429c      	cmp	r4, r3
 8010740:	bf08      	it	eq
 8010742:	68ec      	ldreq	r4, [r5, #12]
 8010744:	e7cb      	b.n	80106de <__swbuf_r+0x1a>
 8010746:	4621      	mov	r1, r4
 8010748:	4628      	mov	r0, r5
 801074a:	f000 f80d 	bl	8010768 <__swsetup_r>
 801074e:	2800      	cmp	r0, #0
 8010750:	d0cc      	beq.n	80106ec <__swbuf_r+0x28>
 8010752:	f04f 37ff 	mov.w	r7, #4294967295
 8010756:	4638      	mov	r0, r7
 8010758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801075a:	bf00      	nop
 801075c:	08012750 	.word	0x08012750
 8010760:	08012770 	.word	0x08012770
 8010764:	08012730 	.word	0x08012730

08010768 <__swsetup_r>:
 8010768:	4b32      	ldr	r3, [pc, #200]	; (8010834 <__swsetup_r+0xcc>)
 801076a:	b570      	push	{r4, r5, r6, lr}
 801076c:	681d      	ldr	r5, [r3, #0]
 801076e:	4606      	mov	r6, r0
 8010770:	460c      	mov	r4, r1
 8010772:	b125      	cbz	r5, 801077e <__swsetup_r+0x16>
 8010774:	69ab      	ldr	r3, [r5, #24]
 8010776:	b913      	cbnz	r3, 801077e <__swsetup_r+0x16>
 8010778:	4628      	mov	r0, r5
 801077a:	f000 f953 	bl	8010a24 <__sinit>
 801077e:	4b2e      	ldr	r3, [pc, #184]	; (8010838 <__swsetup_r+0xd0>)
 8010780:	429c      	cmp	r4, r3
 8010782:	d10f      	bne.n	80107a4 <__swsetup_r+0x3c>
 8010784:	686c      	ldr	r4, [r5, #4]
 8010786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801078a:	b29a      	uxth	r2, r3
 801078c:	0715      	lsls	r5, r2, #28
 801078e:	d42c      	bmi.n	80107ea <__swsetup_r+0x82>
 8010790:	06d0      	lsls	r0, r2, #27
 8010792:	d411      	bmi.n	80107b8 <__swsetup_r+0x50>
 8010794:	2209      	movs	r2, #9
 8010796:	6032      	str	r2, [r6, #0]
 8010798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801079c:	81a3      	strh	r3, [r4, #12]
 801079e:	f04f 30ff 	mov.w	r0, #4294967295
 80107a2:	e03e      	b.n	8010822 <__swsetup_r+0xba>
 80107a4:	4b25      	ldr	r3, [pc, #148]	; (801083c <__swsetup_r+0xd4>)
 80107a6:	429c      	cmp	r4, r3
 80107a8:	d101      	bne.n	80107ae <__swsetup_r+0x46>
 80107aa:	68ac      	ldr	r4, [r5, #8]
 80107ac:	e7eb      	b.n	8010786 <__swsetup_r+0x1e>
 80107ae:	4b24      	ldr	r3, [pc, #144]	; (8010840 <__swsetup_r+0xd8>)
 80107b0:	429c      	cmp	r4, r3
 80107b2:	bf08      	it	eq
 80107b4:	68ec      	ldreq	r4, [r5, #12]
 80107b6:	e7e6      	b.n	8010786 <__swsetup_r+0x1e>
 80107b8:	0751      	lsls	r1, r2, #29
 80107ba:	d512      	bpl.n	80107e2 <__swsetup_r+0x7a>
 80107bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107be:	b141      	cbz	r1, 80107d2 <__swsetup_r+0x6a>
 80107c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107c4:	4299      	cmp	r1, r3
 80107c6:	d002      	beq.n	80107ce <__swsetup_r+0x66>
 80107c8:	4630      	mov	r0, r6
 80107ca:	f001 f95f 	bl	8011a8c <_free_r>
 80107ce:	2300      	movs	r3, #0
 80107d0:	6363      	str	r3, [r4, #52]	; 0x34
 80107d2:	89a3      	ldrh	r3, [r4, #12]
 80107d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80107d8:	81a3      	strh	r3, [r4, #12]
 80107da:	2300      	movs	r3, #0
 80107dc:	6063      	str	r3, [r4, #4]
 80107de:	6923      	ldr	r3, [r4, #16]
 80107e0:	6023      	str	r3, [r4, #0]
 80107e2:	89a3      	ldrh	r3, [r4, #12]
 80107e4:	f043 0308 	orr.w	r3, r3, #8
 80107e8:	81a3      	strh	r3, [r4, #12]
 80107ea:	6923      	ldr	r3, [r4, #16]
 80107ec:	b94b      	cbnz	r3, 8010802 <__swsetup_r+0x9a>
 80107ee:	89a3      	ldrh	r3, [r4, #12]
 80107f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80107f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107f8:	d003      	beq.n	8010802 <__swsetup_r+0x9a>
 80107fa:	4621      	mov	r1, r4
 80107fc:	4630      	mov	r0, r6
 80107fe:	f000 fced 	bl	80111dc <__smakebuf_r>
 8010802:	89a2      	ldrh	r2, [r4, #12]
 8010804:	f012 0301 	ands.w	r3, r2, #1
 8010808:	d00c      	beq.n	8010824 <__swsetup_r+0xbc>
 801080a:	2300      	movs	r3, #0
 801080c:	60a3      	str	r3, [r4, #8]
 801080e:	6963      	ldr	r3, [r4, #20]
 8010810:	425b      	negs	r3, r3
 8010812:	61a3      	str	r3, [r4, #24]
 8010814:	6923      	ldr	r3, [r4, #16]
 8010816:	b953      	cbnz	r3, 801082e <__swsetup_r+0xc6>
 8010818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801081c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010820:	d1ba      	bne.n	8010798 <__swsetup_r+0x30>
 8010822:	bd70      	pop	{r4, r5, r6, pc}
 8010824:	0792      	lsls	r2, r2, #30
 8010826:	bf58      	it	pl
 8010828:	6963      	ldrpl	r3, [r4, #20]
 801082a:	60a3      	str	r3, [r4, #8]
 801082c:	e7f2      	b.n	8010814 <__swsetup_r+0xac>
 801082e:	2000      	movs	r0, #0
 8010830:	e7f7      	b.n	8010822 <__swsetup_r+0xba>
 8010832:	bf00      	nop
 8010834:	200001a8 	.word	0x200001a8
 8010838:	08012750 	.word	0x08012750
 801083c:	08012770 	.word	0x08012770
 8010840:	08012730 	.word	0x08012730

08010844 <__sflush_r>:
 8010844:	898a      	ldrh	r2, [r1, #12]
 8010846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801084a:	4605      	mov	r5, r0
 801084c:	0710      	lsls	r0, r2, #28
 801084e:	460c      	mov	r4, r1
 8010850:	d458      	bmi.n	8010904 <__sflush_r+0xc0>
 8010852:	684b      	ldr	r3, [r1, #4]
 8010854:	2b00      	cmp	r3, #0
 8010856:	dc05      	bgt.n	8010864 <__sflush_r+0x20>
 8010858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801085a:	2b00      	cmp	r3, #0
 801085c:	dc02      	bgt.n	8010864 <__sflush_r+0x20>
 801085e:	2000      	movs	r0, #0
 8010860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010866:	2e00      	cmp	r6, #0
 8010868:	d0f9      	beq.n	801085e <__sflush_r+0x1a>
 801086a:	2300      	movs	r3, #0
 801086c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010870:	682f      	ldr	r7, [r5, #0]
 8010872:	6a21      	ldr	r1, [r4, #32]
 8010874:	602b      	str	r3, [r5, #0]
 8010876:	d032      	beq.n	80108de <__sflush_r+0x9a>
 8010878:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801087a:	89a3      	ldrh	r3, [r4, #12]
 801087c:	075a      	lsls	r2, r3, #29
 801087e:	d505      	bpl.n	801088c <__sflush_r+0x48>
 8010880:	6863      	ldr	r3, [r4, #4]
 8010882:	1ac0      	subs	r0, r0, r3
 8010884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010886:	b10b      	cbz	r3, 801088c <__sflush_r+0x48>
 8010888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801088a:	1ac0      	subs	r0, r0, r3
 801088c:	2300      	movs	r3, #0
 801088e:	4602      	mov	r2, r0
 8010890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010892:	6a21      	ldr	r1, [r4, #32]
 8010894:	4628      	mov	r0, r5
 8010896:	47b0      	blx	r6
 8010898:	1c43      	adds	r3, r0, #1
 801089a:	89a3      	ldrh	r3, [r4, #12]
 801089c:	d106      	bne.n	80108ac <__sflush_r+0x68>
 801089e:	6829      	ldr	r1, [r5, #0]
 80108a0:	291d      	cmp	r1, #29
 80108a2:	d848      	bhi.n	8010936 <__sflush_r+0xf2>
 80108a4:	4a29      	ldr	r2, [pc, #164]	; (801094c <__sflush_r+0x108>)
 80108a6:	40ca      	lsrs	r2, r1
 80108a8:	07d6      	lsls	r6, r2, #31
 80108aa:	d544      	bpl.n	8010936 <__sflush_r+0xf2>
 80108ac:	2200      	movs	r2, #0
 80108ae:	6062      	str	r2, [r4, #4]
 80108b0:	6922      	ldr	r2, [r4, #16]
 80108b2:	04d9      	lsls	r1, r3, #19
 80108b4:	6022      	str	r2, [r4, #0]
 80108b6:	d504      	bpl.n	80108c2 <__sflush_r+0x7e>
 80108b8:	1c42      	adds	r2, r0, #1
 80108ba:	d101      	bne.n	80108c0 <__sflush_r+0x7c>
 80108bc:	682b      	ldr	r3, [r5, #0]
 80108be:	b903      	cbnz	r3, 80108c2 <__sflush_r+0x7e>
 80108c0:	6560      	str	r0, [r4, #84]	; 0x54
 80108c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108c4:	602f      	str	r7, [r5, #0]
 80108c6:	2900      	cmp	r1, #0
 80108c8:	d0c9      	beq.n	801085e <__sflush_r+0x1a>
 80108ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108ce:	4299      	cmp	r1, r3
 80108d0:	d002      	beq.n	80108d8 <__sflush_r+0x94>
 80108d2:	4628      	mov	r0, r5
 80108d4:	f001 f8da 	bl	8011a8c <_free_r>
 80108d8:	2000      	movs	r0, #0
 80108da:	6360      	str	r0, [r4, #52]	; 0x34
 80108dc:	e7c0      	b.n	8010860 <__sflush_r+0x1c>
 80108de:	2301      	movs	r3, #1
 80108e0:	4628      	mov	r0, r5
 80108e2:	47b0      	blx	r6
 80108e4:	1c41      	adds	r1, r0, #1
 80108e6:	d1c8      	bne.n	801087a <__sflush_r+0x36>
 80108e8:	682b      	ldr	r3, [r5, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d0c5      	beq.n	801087a <__sflush_r+0x36>
 80108ee:	2b1d      	cmp	r3, #29
 80108f0:	d001      	beq.n	80108f6 <__sflush_r+0xb2>
 80108f2:	2b16      	cmp	r3, #22
 80108f4:	d101      	bne.n	80108fa <__sflush_r+0xb6>
 80108f6:	602f      	str	r7, [r5, #0]
 80108f8:	e7b1      	b.n	801085e <__sflush_r+0x1a>
 80108fa:	89a3      	ldrh	r3, [r4, #12]
 80108fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010900:	81a3      	strh	r3, [r4, #12]
 8010902:	e7ad      	b.n	8010860 <__sflush_r+0x1c>
 8010904:	690f      	ldr	r7, [r1, #16]
 8010906:	2f00      	cmp	r7, #0
 8010908:	d0a9      	beq.n	801085e <__sflush_r+0x1a>
 801090a:	0793      	lsls	r3, r2, #30
 801090c:	bf18      	it	ne
 801090e:	2300      	movne	r3, #0
 8010910:	680e      	ldr	r6, [r1, #0]
 8010912:	bf08      	it	eq
 8010914:	694b      	ldreq	r3, [r1, #20]
 8010916:	eba6 0807 	sub.w	r8, r6, r7
 801091a:	600f      	str	r7, [r1, #0]
 801091c:	608b      	str	r3, [r1, #8]
 801091e:	f1b8 0f00 	cmp.w	r8, #0
 8010922:	dd9c      	ble.n	801085e <__sflush_r+0x1a>
 8010924:	4643      	mov	r3, r8
 8010926:	463a      	mov	r2, r7
 8010928:	6a21      	ldr	r1, [r4, #32]
 801092a:	4628      	mov	r0, r5
 801092c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801092e:	47b0      	blx	r6
 8010930:	2800      	cmp	r0, #0
 8010932:	dc06      	bgt.n	8010942 <__sflush_r+0xfe>
 8010934:	89a3      	ldrh	r3, [r4, #12]
 8010936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801093a:	81a3      	strh	r3, [r4, #12]
 801093c:	f04f 30ff 	mov.w	r0, #4294967295
 8010940:	e78e      	b.n	8010860 <__sflush_r+0x1c>
 8010942:	4407      	add	r7, r0
 8010944:	eba8 0800 	sub.w	r8, r8, r0
 8010948:	e7e9      	b.n	801091e <__sflush_r+0xda>
 801094a:	bf00      	nop
 801094c:	20400001 	.word	0x20400001

08010950 <_fflush_r>:
 8010950:	b538      	push	{r3, r4, r5, lr}
 8010952:	690b      	ldr	r3, [r1, #16]
 8010954:	4605      	mov	r5, r0
 8010956:	460c      	mov	r4, r1
 8010958:	b1db      	cbz	r3, 8010992 <_fflush_r+0x42>
 801095a:	b118      	cbz	r0, 8010964 <_fflush_r+0x14>
 801095c:	6983      	ldr	r3, [r0, #24]
 801095e:	b90b      	cbnz	r3, 8010964 <_fflush_r+0x14>
 8010960:	f000 f860 	bl	8010a24 <__sinit>
 8010964:	4b0c      	ldr	r3, [pc, #48]	; (8010998 <_fflush_r+0x48>)
 8010966:	429c      	cmp	r4, r3
 8010968:	d109      	bne.n	801097e <_fflush_r+0x2e>
 801096a:	686c      	ldr	r4, [r5, #4]
 801096c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010970:	b17b      	cbz	r3, 8010992 <_fflush_r+0x42>
 8010972:	4621      	mov	r1, r4
 8010974:	4628      	mov	r0, r5
 8010976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801097a:	f7ff bf63 	b.w	8010844 <__sflush_r>
 801097e:	4b07      	ldr	r3, [pc, #28]	; (801099c <_fflush_r+0x4c>)
 8010980:	429c      	cmp	r4, r3
 8010982:	d101      	bne.n	8010988 <_fflush_r+0x38>
 8010984:	68ac      	ldr	r4, [r5, #8]
 8010986:	e7f1      	b.n	801096c <_fflush_r+0x1c>
 8010988:	4b05      	ldr	r3, [pc, #20]	; (80109a0 <_fflush_r+0x50>)
 801098a:	429c      	cmp	r4, r3
 801098c:	bf08      	it	eq
 801098e:	68ec      	ldreq	r4, [r5, #12]
 8010990:	e7ec      	b.n	801096c <_fflush_r+0x1c>
 8010992:	2000      	movs	r0, #0
 8010994:	bd38      	pop	{r3, r4, r5, pc}
 8010996:	bf00      	nop
 8010998:	08012750 	.word	0x08012750
 801099c:	08012770 	.word	0x08012770
 80109a0:	08012730 	.word	0x08012730

080109a4 <std>:
 80109a4:	2300      	movs	r3, #0
 80109a6:	b510      	push	{r4, lr}
 80109a8:	4604      	mov	r4, r0
 80109aa:	e9c0 3300 	strd	r3, r3, [r0]
 80109ae:	6083      	str	r3, [r0, #8]
 80109b0:	8181      	strh	r1, [r0, #12]
 80109b2:	6643      	str	r3, [r0, #100]	; 0x64
 80109b4:	81c2      	strh	r2, [r0, #14]
 80109b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109ba:	6183      	str	r3, [r0, #24]
 80109bc:	4619      	mov	r1, r3
 80109be:	2208      	movs	r2, #8
 80109c0:	305c      	adds	r0, #92	; 0x5c
 80109c2:	f7fe fea0 	bl	800f706 <memset>
 80109c6:	4b05      	ldr	r3, [pc, #20]	; (80109dc <std+0x38>)
 80109c8:	6224      	str	r4, [r4, #32]
 80109ca:	6263      	str	r3, [r4, #36]	; 0x24
 80109cc:	4b04      	ldr	r3, [pc, #16]	; (80109e0 <std+0x3c>)
 80109ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80109d0:	4b04      	ldr	r3, [pc, #16]	; (80109e4 <std+0x40>)
 80109d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80109d4:	4b04      	ldr	r3, [pc, #16]	; (80109e8 <std+0x44>)
 80109d6:	6323      	str	r3, [r4, #48]	; 0x30
 80109d8:	bd10      	pop	{r4, pc}
 80109da:	bf00      	nop
 80109dc:	080121b5 	.word	0x080121b5
 80109e0:	080121d7 	.word	0x080121d7
 80109e4:	0801220f 	.word	0x0801220f
 80109e8:	08012233 	.word	0x08012233

080109ec <_cleanup_r>:
 80109ec:	4901      	ldr	r1, [pc, #4]	; (80109f4 <_cleanup_r+0x8>)
 80109ee:	f000 b885 	b.w	8010afc <_fwalk_reent>
 80109f2:	bf00      	nop
 80109f4:	08010951 	.word	0x08010951

080109f8 <__sfmoreglue>:
 80109f8:	b570      	push	{r4, r5, r6, lr}
 80109fa:	2568      	movs	r5, #104	; 0x68
 80109fc:	1e4a      	subs	r2, r1, #1
 80109fe:	4355      	muls	r5, r2
 8010a00:	460e      	mov	r6, r1
 8010a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a06:	f001 f88d 	bl	8011b24 <_malloc_r>
 8010a0a:	4604      	mov	r4, r0
 8010a0c:	b140      	cbz	r0, 8010a20 <__sfmoreglue+0x28>
 8010a0e:	2100      	movs	r1, #0
 8010a10:	e9c0 1600 	strd	r1, r6, [r0]
 8010a14:	300c      	adds	r0, #12
 8010a16:	60a0      	str	r0, [r4, #8]
 8010a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010a1c:	f7fe fe73 	bl	800f706 <memset>
 8010a20:	4620      	mov	r0, r4
 8010a22:	bd70      	pop	{r4, r5, r6, pc}

08010a24 <__sinit>:
 8010a24:	6983      	ldr	r3, [r0, #24]
 8010a26:	b510      	push	{r4, lr}
 8010a28:	4604      	mov	r4, r0
 8010a2a:	bb33      	cbnz	r3, 8010a7a <__sinit+0x56>
 8010a2c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010a30:	6503      	str	r3, [r0, #80]	; 0x50
 8010a32:	4b12      	ldr	r3, [pc, #72]	; (8010a7c <__sinit+0x58>)
 8010a34:	4a12      	ldr	r2, [pc, #72]	; (8010a80 <__sinit+0x5c>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	6282      	str	r2, [r0, #40]	; 0x28
 8010a3a:	4298      	cmp	r0, r3
 8010a3c:	bf04      	itt	eq
 8010a3e:	2301      	moveq	r3, #1
 8010a40:	6183      	streq	r3, [r0, #24]
 8010a42:	f000 f81f 	bl	8010a84 <__sfp>
 8010a46:	6060      	str	r0, [r4, #4]
 8010a48:	4620      	mov	r0, r4
 8010a4a:	f000 f81b 	bl	8010a84 <__sfp>
 8010a4e:	60a0      	str	r0, [r4, #8]
 8010a50:	4620      	mov	r0, r4
 8010a52:	f000 f817 	bl	8010a84 <__sfp>
 8010a56:	2200      	movs	r2, #0
 8010a58:	60e0      	str	r0, [r4, #12]
 8010a5a:	2104      	movs	r1, #4
 8010a5c:	6860      	ldr	r0, [r4, #4]
 8010a5e:	f7ff ffa1 	bl	80109a4 <std>
 8010a62:	2201      	movs	r2, #1
 8010a64:	2109      	movs	r1, #9
 8010a66:	68a0      	ldr	r0, [r4, #8]
 8010a68:	f7ff ff9c 	bl	80109a4 <std>
 8010a6c:	2202      	movs	r2, #2
 8010a6e:	2112      	movs	r1, #18
 8010a70:	68e0      	ldr	r0, [r4, #12]
 8010a72:	f7ff ff97 	bl	80109a4 <std>
 8010a76:	2301      	movs	r3, #1
 8010a78:	61a3      	str	r3, [r4, #24]
 8010a7a:	bd10      	pop	{r4, pc}
 8010a7c:	080126d0 	.word	0x080126d0
 8010a80:	080109ed 	.word	0x080109ed

08010a84 <__sfp>:
 8010a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a86:	4b1b      	ldr	r3, [pc, #108]	; (8010af4 <__sfp+0x70>)
 8010a88:	4607      	mov	r7, r0
 8010a8a:	681e      	ldr	r6, [r3, #0]
 8010a8c:	69b3      	ldr	r3, [r6, #24]
 8010a8e:	b913      	cbnz	r3, 8010a96 <__sfp+0x12>
 8010a90:	4630      	mov	r0, r6
 8010a92:	f7ff ffc7 	bl	8010a24 <__sinit>
 8010a96:	3648      	adds	r6, #72	; 0x48
 8010a98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	d503      	bpl.n	8010aa8 <__sfp+0x24>
 8010aa0:	6833      	ldr	r3, [r6, #0]
 8010aa2:	b133      	cbz	r3, 8010ab2 <__sfp+0x2e>
 8010aa4:	6836      	ldr	r6, [r6, #0]
 8010aa6:	e7f7      	b.n	8010a98 <__sfp+0x14>
 8010aa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010aac:	b16d      	cbz	r5, 8010aca <__sfp+0x46>
 8010aae:	3468      	adds	r4, #104	; 0x68
 8010ab0:	e7f4      	b.n	8010a9c <__sfp+0x18>
 8010ab2:	2104      	movs	r1, #4
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	f7ff ff9f 	bl	80109f8 <__sfmoreglue>
 8010aba:	6030      	str	r0, [r6, #0]
 8010abc:	2800      	cmp	r0, #0
 8010abe:	d1f1      	bne.n	8010aa4 <__sfp+0x20>
 8010ac0:	230c      	movs	r3, #12
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	603b      	str	r3, [r7, #0]
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aca:	4b0b      	ldr	r3, [pc, #44]	; (8010af8 <__sfp+0x74>)
 8010acc:	6665      	str	r5, [r4, #100]	; 0x64
 8010ace:	e9c4 5500 	strd	r5, r5, [r4]
 8010ad2:	60a5      	str	r5, [r4, #8]
 8010ad4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010ad8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010adc:	2208      	movs	r2, #8
 8010ade:	4629      	mov	r1, r5
 8010ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ae4:	f7fe fe0f 	bl	800f706 <memset>
 8010ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010af0:	e7e9      	b.n	8010ac6 <__sfp+0x42>
 8010af2:	bf00      	nop
 8010af4:	080126d0 	.word	0x080126d0
 8010af8:	ffff0001 	.word	0xffff0001

08010afc <_fwalk_reent>:
 8010afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b00:	4680      	mov	r8, r0
 8010b02:	4689      	mov	r9, r1
 8010b04:	2600      	movs	r6, #0
 8010b06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010b0a:	b914      	cbnz	r4, 8010b12 <_fwalk_reent+0x16>
 8010b0c:	4630      	mov	r0, r6
 8010b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b12:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010b16:	3f01      	subs	r7, #1
 8010b18:	d501      	bpl.n	8010b1e <_fwalk_reent+0x22>
 8010b1a:	6824      	ldr	r4, [r4, #0]
 8010b1c:	e7f5      	b.n	8010b0a <_fwalk_reent+0xe>
 8010b1e:	89ab      	ldrh	r3, [r5, #12]
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d907      	bls.n	8010b34 <_fwalk_reent+0x38>
 8010b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	d003      	beq.n	8010b34 <_fwalk_reent+0x38>
 8010b2c:	4629      	mov	r1, r5
 8010b2e:	4640      	mov	r0, r8
 8010b30:	47c8      	blx	r9
 8010b32:	4306      	orrs	r6, r0
 8010b34:	3568      	adds	r5, #104	; 0x68
 8010b36:	e7ee      	b.n	8010b16 <_fwalk_reent+0x1a>

08010b38 <rshift>:
 8010b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b3a:	6906      	ldr	r6, [r0, #16]
 8010b3c:	114b      	asrs	r3, r1, #5
 8010b3e:	429e      	cmp	r6, r3
 8010b40:	f100 0414 	add.w	r4, r0, #20
 8010b44:	dd31      	ble.n	8010baa <rshift+0x72>
 8010b46:	f011 011f 	ands.w	r1, r1, #31
 8010b4a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010b4e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010b52:	d108      	bne.n	8010b66 <rshift+0x2e>
 8010b54:	4621      	mov	r1, r4
 8010b56:	42b2      	cmp	r2, r6
 8010b58:	460b      	mov	r3, r1
 8010b5a:	d211      	bcs.n	8010b80 <rshift+0x48>
 8010b5c:	f852 3b04 	ldr.w	r3, [r2], #4
 8010b60:	f841 3b04 	str.w	r3, [r1], #4
 8010b64:	e7f7      	b.n	8010b56 <rshift+0x1e>
 8010b66:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8010b6a:	4623      	mov	r3, r4
 8010b6c:	f1c1 0c20 	rsb	ip, r1, #32
 8010b70:	40cd      	lsrs	r5, r1
 8010b72:	3204      	adds	r2, #4
 8010b74:	42b2      	cmp	r2, r6
 8010b76:	4617      	mov	r7, r2
 8010b78:	d30d      	bcc.n	8010b96 <rshift+0x5e>
 8010b7a:	601d      	str	r5, [r3, #0]
 8010b7c:	b105      	cbz	r5, 8010b80 <rshift+0x48>
 8010b7e:	3304      	adds	r3, #4
 8010b80:	42a3      	cmp	r3, r4
 8010b82:	eba3 0204 	sub.w	r2, r3, r4
 8010b86:	bf08      	it	eq
 8010b88:	2300      	moveq	r3, #0
 8010b8a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010b8e:	6102      	str	r2, [r0, #16]
 8010b90:	bf08      	it	eq
 8010b92:	6143      	streq	r3, [r0, #20]
 8010b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b96:	683f      	ldr	r7, [r7, #0]
 8010b98:	fa07 f70c 	lsl.w	r7, r7, ip
 8010b9c:	433d      	orrs	r5, r7
 8010b9e:	f843 5b04 	str.w	r5, [r3], #4
 8010ba2:	f852 5b04 	ldr.w	r5, [r2], #4
 8010ba6:	40cd      	lsrs	r5, r1
 8010ba8:	e7e4      	b.n	8010b74 <rshift+0x3c>
 8010baa:	4623      	mov	r3, r4
 8010bac:	e7e8      	b.n	8010b80 <rshift+0x48>

08010bae <__hexdig_fun>:
 8010bae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010bb2:	2b09      	cmp	r3, #9
 8010bb4:	d802      	bhi.n	8010bbc <__hexdig_fun+0xe>
 8010bb6:	3820      	subs	r0, #32
 8010bb8:	b2c0      	uxtb	r0, r0
 8010bba:	4770      	bx	lr
 8010bbc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010bc0:	2b05      	cmp	r3, #5
 8010bc2:	d801      	bhi.n	8010bc8 <__hexdig_fun+0x1a>
 8010bc4:	3847      	subs	r0, #71	; 0x47
 8010bc6:	e7f7      	b.n	8010bb8 <__hexdig_fun+0xa>
 8010bc8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010bcc:	2b05      	cmp	r3, #5
 8010bce:	d801      	bhi.n	8010bd4 <__hexdig_fun+0x26>
 8010bd0:	3827      	subs	r0, #39	; 0x27
 8010bd2:	e7f1      	b.n	8010bb8 <__hexdig_fun+0xa>
 8010bd4:	2000      	movs	r0, #0
 8010bd6:	4770      	bx	lr

08010bd8 <__gethex>:
 8010bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bdc:	b08b      	sub	sp, #44	; 0x2c
 8010bde:	9002      	str	r0, [sp, #8]
 8010be0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010be2:	468a      	mov	sl, r1
 8010be4:	4690      	mov	r8, r2
 8010be6:	9306      	str	r3, [sp, #24]
 8010be8:	f000 fad1 	bl	801118e <__localeconv_l>
 8010bec:	6803      	ldr	r3, [r0, #0]
 8010bee:	f04f 0b00 	mov.w	fp, #0
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	9303      	str	r3, [sp, #12]
 8010bf6:	f7f4 fb25 	bl	8005244 <strlen>
 8010bfa:	9b03      	ldr	r3, [sp, #12]
 8010bfc:	9001      	str	r0, [sp, #4]
 8010bfe:	4403      	add	r3, r0
 8010c00:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010c04:	9307      	str	r3, [sp, #28]
 8010c06:	f8da 3000 	ldr.w	r3, [sl]
 8010c0a:	3302      	adds	r3, #2
 8010c0c:	461f      	mov	r7, r3
 8010c0e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010c12:	2830      	cmp	r0, #48	; 0x30
 8010c14:	d06c      	beq.n	8010cf0 <__gethex+0x118>
 8010c16:	f7ff ffca 	bl	8010bae <__hexdig_fun>
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	d16a      	bne.n	8010cf6 <__gethex+0x11e>
 8010c20:	9a01      	ldr	r2, [sp, #4]
 8010c22:	9903      	ldr	r1, [sp, #12]
 8010c24:	4638      	mov	r0, r7
 8010c26:	f001 fb08 	bl	801223a <strncmp>
 8010c2a:	2800      	cmp	r0, #0
 8010c2c:	d166      	bne.n	8010cfc <__gethex+0x124>
 8010c2e:	9b01      	ldr	r3, [sp, #4]
 8010c30:	5cf8      	ldrb	r0, [r7, r3]
 8010c32:	18fe      	adds	r6, r7, r3
 8010c34:	f7ff ffbb 	bl	8010bae <__hexdig_fun>
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	d062      	beq.n	8010d02 <__gethex+0x12a>
 8010c3c:	4633      	mov	r3, r6
 8010c3e:	7818      	ldrb	r0, [r3, #0]
 8010c40:	461f      	mov	r7, r3
 8010c42:	2830      	cmp	r0, #48	; 0x30
 8010c44:	f103 0301 	add.w	r3, r3, #1
 8010c48:	d0f9      	beq.n	8010c3e <__gethex+0x66>
 8010c4a:	f7ff ffb0 	bl	8010bae <__hexdig_fun>
 8010c4e:	fab0 f580 	clz	r5, r0
 8010c52:	4634      	mov	r4, r6
 8010c54:	f04f 0b01 	mov.w	fp, #1
 8010c58:	096d      	lsrs	r5, r5, #5
 8010c5a:	463a      	mov	r2, r7
 8010c5c:	4616      	mov	r6, r2
 8010c5e:	7830      	ldrb	r0, [r6, #0]
 8010c60:	3201      	adds	r2, #1
 8010c62:	f7ff ffa4 	bl	8010bae <__hexdig_fun>
 8010c66:	2800      	cmp	r0, #0
 8010c68:	d1f8      	bne.n	8010c5c <__gethex+0x84>
 8010c6a:	9a01      	ldr	r2, [sp, #4]
 8010c6c:	9903      	ldr	r1, [sp, #12]
 8010c6e:	4630      	mov	r0, r6
 8010c70:	f001 fae3 	bl	801223a <strncmp>
 8010c74:	b950      	cbnz	r0, 8010c8c <__gethex+0xb4>
 8010c76:	b954      	cbnz	r4, 8010c8e <__gethex+0xb6>
 8010c78:	9b01      	ldr	r3, [sp, #4]
 8010c7a:	18f4      	adds	r4, r6, r3
 8010c7c:	4622      	mov	r2, r4
 8010c7e:	4616      	mov	r6, r2
 8010c80:	7830      	ldrb	r0, [r6, #0]
 8010c82:	3201      	adds	r2, #1
 8010c84:	f7ff ff93 	bl	8010bae <__hexdig_fun>
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	d1f8      	bne.n	8010c7e <__gethex+0xa6>
 8010c8c:	b10c      	cbz	r4, 8010c92 <__gethex+0xba>
 8010c8e:	1ba4      	subs	r4, r4, r6
 8010c90:	00a4      	lsls	r4, r4, #2
 8010c92:	7833      	ldrb	r3, [r6, #0]
 8010c94:	2b50      	cmp	r3, #80	; 0x50
 8010c96:	d001      	beq.n	8010c9c <__gethex+0xc4>
 8010c98:	2b70      	cmp	r3, #112	; 0x70
 8010c9a:	d140      	bne.n	8010d1e <__gethex+0x146>
 8010c9c:	7873      	ldrb	r3, [r6, #1]
 8010c9e:	2b2b      	cmp	r3, #43	; 0x2b
 8010ca0:	d031      	beq.n	8010d06 <__gethex+0x12e>
 8010ca2:	2b2d      	cmp	r3, #45	; 0x2d
 8010ca4:	d033      	beq.n	8010d0e <__gethex+0x136>
 8010ca6:	f04f 0900 	mov.w	r9, #0
 8010caa:	1c71      	adds	r1, r6, #1
 8010cac:	7808      	ldrb	r0, [r1, #0]
 8010cae:	f7ff ff7e 	bl	8010bae <__hexdig_fun>
 8010cb2:	1e43      	subs	r3, r0, #1
 8010cb4:	b2db      	uxtb	r3, r3
 8010cb6:	2b18      	cmp	r3, #24
 8010cb8:	d831      	bhi.n	8010d1e <__gethex+0x146>
 8010cba:	f1a0 0210 	sub.w	r2, r0, #16
 8010cbe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010cc2:	f7ff ff74 	bl	8010bae <__hexdig_fun>
 8010cc6:	1e43      	subs	r3, r0, #1
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	2b18      	cmp	r3, #24
 8010ccc:	d922      	bls.n	8010d14 <__gethex+0x13c>
 8010cce:	f1b9 0f00 	cmp.w	r9, #0
 8010cd2:	d000      	beq.n	8010cd6 <__gethex+0xfe>
 8010cd4:	4252      	negs	r2, r2
 8010cd6:	4414      	add	r4, r2
 8010cd8:	f8ca 1000 	str.w	r1, [sl]
 8010cdc:	b30d      	cbz	r5, 8010d22 <__gethex+0x14a>
 8010cde:	f1bb 0f00 	cmp.w	fp, #0
 8010ce2:	bf0c      	ite	eq
 8010ce4:	2706      	moveq	r7, #6
 8010ce6:	2700      	movne	r7, #0
 8010ce8:	4638      	mov	r0, r7
 8010cea:	b00b      	add	sp, #44	; 0x2c
 8010cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cf0:	f10b 0b01 	add.w	fp, fp, #1
 8010cf4:	e78a      	b.n	8010c0c <__gethex+0x34>
 8010cf6:	2500      	movs	r5, #0
 8010cf8:	462c      	mov	r4, r5
 8010cfa:	e7ae      	b.n	8010c5a <__gethex+0x82>
 8010cfc:	463e      	mov	r6, r7
 8010cfe:	2501      	movs	r5, #1
 8010d00:	e7c7      	b.n	8010c92 <__gethex+0xba>
 8010d02:	4604      	mov	r4, r0
 8010d04:	e7fb      	b.n	8010cfe <__gethex+0x126>
 8010d06:	f04f 0900 	mov.w	r9, #0
 8010d0a:	1cb1      	adds	r1, r6, #2
 8010d0c:	e7ce      	b.n	8010cac <__gethex+0xd4>
 8010d0e:	f04f 0901 	mov.w	r9, #1
 8010d12:	e7fa      	b.n	8010d0a <__gethex+0x132>
 8010d14:	230a      	movs	r3, #10
 8010d16:	fb03 0202 	mla	r2, r3, r2, r0
 8010d1a:	3a10      	subs	r2, #16
 8010d1c:	e7cf      	b.n	8010cbe <__gethex+0xe6>
 8010d1e:	4631      	mov	r1, r6
 8010d20:	e7da      	b.n	8010cd8 <__gethex+0x100>
 8010d22:	4629      	mov	r1, r5
 8010d24:	1bf3      	subs	r3, r6, r7
 8010d26:	3b01      	subs	r3, #1
 8010d28:	2b07      	cmp	r3, #7
 8010d2a:	dc49      	bgt.n	8010dc0 <__gethex+0x1e8>
 8010d2c:	9802      	ldr	r0, [sp, #8]
 8010d2e:	f000 faa7 	bl	8011280 <_Balloc>
 8010d32:	f04f 0b00 	mov.w	fp, #0
 8010d36:	4605      	mov	r5, r0
 8010d38:	46da      	mov	sl, fp
 8010d3a:	9b01      	ldr	r3, [sp, #4]
 8010d3c:	f100 0914 	add.w	r9, r0, #20
 8010d40:	f1c3 0301 	rsb	r3, r3, #1
 8010d44:	f8cd 9010 	str.w	r9, [sp, #16]
 8010d48:	9308      	str	r3, [sp, #32]
 8010d4a:	42b7      	cmp	r7, r6
 8010d4c:	d33b      	bcc.n	8010dc6 <__gethex+0x1ee>
 8010d4e:	9804      	ldr	r0, [sp, #16]
 8010d50:	f840 ab04 	str.w	sl, [r0], #4
 8010d54:	eba0 0009 	sub.w	r0, r0, r9
 8010d58:	1080      	asrs	r0, r0, #2
 8010d5a:	6128      	str	r0, [r5, #16]
 8010d5c:	0147      	lsls	r7, r0, #5
 8010d5e:	4650      	mov	r0, sl
 8010d60:	f000 fb52 	bl	8011408 <__hi0bits>
 8010d64:	f8d8 6000 	ldr.w	r6, [r8]
 8010d68:	1a3f      	subs	r7, r7, r0
 8010d6a:	42b7      	cmp	r7, r6
 8010d6c:	dd64      	ble.n	8010e38 <__gethex+0x260>
 8010d6e:	1bbf      	subs	r7, r7, r6
 8010d70:	4639      	mov	r1, r7
 8010d72:	4628      	mov	r0, r5
 8010d74:	f000 fe5b 	bl	8011a2e <__any_on>
 8010d78:	4682      	mov	sl, r0
 8010d7a:	b178      	cbz	r0, 8010d9c <__gethex+0x1c4>
 8010d7c:	f04f 0a01 	mov.w	sl, #1
 8010d80:	1e7b      	subs	r3, r7, #1
 8010d82:	1159      	asrs	r1, r3, #5
 8010d84:	f003 021f 	and.w	r2, r3, #31
 8010d88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010d8c:	fa0a f202 	lsl.w	r2, sl, r2
 8010d90:	420a      	tst	r2, r1
 8010d92:	d003      	beq.n	8010d9c <__gethex+0x1c4>
 8010d94:	4553      	cmp	r3, sl
 8010d96:	dc46      	bgt.n	8010e26 <__gethex+0x24e>
 8010d98:	f04f 0a02 	mov.w	sl, #2
 8010d9c:	4639      	mov	r1, r7
 8010d9e:	4628      	mov	r0, r5
 8010da0:	f7ff feca 	bl	8010b38 <rshift>
 8010da4:	443c      	add	r4, r7
 8010da6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010daa:	42a3      	cmp	r3, r4
 8010dac:	da52      	bge.n	8010e54 <__gethex+0x27c>
 8010dae:	4629      	mov	r1, r5
 8010db0:	9802      	ldr	r0, [sp, #8]
 8010db2:	f000 fa99 	bl	80112e8 <_Bfree>
 8010db6:	2300      	movs	r3, #0
 8010db8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010dba:	27a3      	movs	r7, #163	; 0xa3
 8010dbc:	6013      	str	r3, [r2, #0]
 8010dbe:	e793      	b.n	8010ce8 <__gethex+0x110>
 8010dc0:	3101      	adds	r1, #1
 8010dc2:	105b      	asrs	r3, r3, #1
 8010dc4:	e7b0      	b.n	8010d28 <__gethex+0x150>
 8010dc6:	1e73      	subs	r3, r6, #1
 8010dc8:	9305      	str	r3, [sp, #20]
 8010dca:	9a07      	ldr	r2, [sp, #28]
 8010dcc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d018      	beq.n	8010e06 <__gethex+0x22e>
 8010dd4:	f1bb 0f20 	cmp.w	fp, #32
 8010dd8:	d107      	bne.n	8010dea <__gethex+0x212>
 8010dda:	9b04      	ldr	r3, [sp, #16]
 8010ddc:	f8c3 a000 	str.w	sl, [r3]
 8010de0:	f04f 0a00 	mov.w	sl, #0
 8010de4:	46d3      	mov	fp, sl
 8010de6:	3304      	adds	r3, #4
 8010de8:	9304      	str	r3, [sp, #16]
 8010dea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010dee:	f7ff fede 	bl	8010bae <__hexdig_fun>
 8010df2:	f000 000f 	and.w	r0, r0, #15
 8010df6:	fa00 f00b 	lsl.w	r0, r0, fp
 8010dfa:	ea4a 0a00 	orr.w	sl, sl, r0
 8010dfe:	f10b 0b04 	add.w	fp, fp, #4
 8010e02:	9b05      	ldr	r3, [sp, #20]
 8010e04:	e00d      	b.n	8010e22 <__gethex+0x24a>
 8010e06:	9b05      	ldr	r3, [sp, #20]
 8010e08:	9a08      	ldr	r2, [sp, #32]
 8010e0a:	4413      	add	r3, r2
 8010e0c:	42bb      	cmp	r3, r7
 8010e0e:	d3e1      	bcc.n	8010dd4 <__gethex+0x1fc>
 8010e10:	4618      	mov	r0, r3
 8010e12:	9a01      	ldr	r2, [sp, #4]
 8010e14:	9903      	ldr	r1, [sp, #12]
 8010e16:	9309      	str	r3, [sp, #36]	; 0x24
 8010e18:	f001 fa0f 	bl	801223a <strncmp>
 8010e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	d1d8      	bne.n	8010dd4 <__gethex+0x1fc>
 8010e22:	461e      	mov	r6, r3
 8010e24:	e791      	b.n	8010d4a <__gethex+0x172>
 8010e26:	1eb9      	subs	r1, r7, #2
 8010e28:	4628      	mov	r0, r5
 8010e2a:	f000 fe00 	bl	8011a2e <__any_on>
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	d0b2      	beq.n	8010d98 <__gethex+0x1c0>
 8010e32:	f04f 0a03 	mov.w	sl, #3
 8010e36:	e7b1      	b.n	8010d9c <__gethex+0x1c4>
 8010e38:	da09      	bge.n	8010e4e <__gethex+0x276>
 8010e3a:	1bf7      	subs	r7, r6, r7
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	463a      	mov	r2, r7
 8010e40:	9802      	ldr	r0, [sp, #8]
 8010e42:	f000 fc1b 	bl	801167c <__lshift>
 8010e46:	4605      	mov	r5, r0
 8010e48:	1be4      	subs	r4, r4, r7
 8010e4a:	f100 0914 	add.w	r9, r0, #20
 8010e4e:	f04f 0a00 	mov.w	sl, #0
 8010e52:	e7a8      	b.n	8010da6 <__gethex+0x1ce>
 8010e54:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010e58:	42a0      	cmp	r0, r4
 8010e5a:	dd6b      	ble.n	8010f34 <__gethex+0x35c>
 8010e5c:	1b04      	subs	r4, r0, r4
 8010e5e:	42a6      	cmp	r6, r4
 8010e60:	dc2e      	bgt.n	8010ec0 <__gethex+0x2e8>
 8010e62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e66:	2b02      	cmp	r3, #2
 8010e68:	d022      	beq.n	8010eb0 <__gethex+0x2d8>
 8010e6a:	2b03      	cmp	r3, #3
 8010e6c:	d024      	beq.n	8010eb8 <__gethex+0x2e0>
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	d115      	bne.n	8010e9e <__gethex+0x2c6>
 8010e72:	42a6      	cmp	r6, r4
 8010e74:	d113      	bne.n	8010e9e <__gethex+0x2c6>
 8010e76:	2e01      	cmp	r6, #1
 8010e78:	dc0b      	bgt.n	8010e92 <__gethex+0x2ba>
 8010e7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010e7e:	9a06      	ldr	r2, [sp, #24]
 8010e80:	2762      	movs	r7, #98	; 0x62
 8010e82:	6013      	str	r3, [r2, #0]
 8010e84:	2301      	movs	r3, #1
 8010e86:	612b      	str	r3, [r5, #16]
 8010e88:	f8c9 3000 	str.w	r3, [r9]
 8010e8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e8e:	601d      	str	r5, [r3, #0]
 8010e90:	e72a      	b.n	8010ce8 <__gethex+0x110>
 8010e92:	1e71      	subs	r1, r6, #1
 8010e94:	4628      	mov	r0, r5
 8010e96:	f000 fdca 	bl	8011a2e <__any_on>
 8010e9a:	2800      	cmp	r0, #0
 8010e9c:	d1ed      	bne.n	8010e7a <__gethex+0x2a2>
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	9802      	ldr	r0, [sp, #8]
 8010ea2:	f000 fa21 	bl	80112e8 <_Bfree>
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010eaa:	2750      	movs	r7, #80	; 0x50
 8010eac:	6013      	str	r3, [r2, #0]
 8010eae:	e71b      	b.n	8010ce8 <__gethex+0x110>
 8010eb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d0e1      	beq.n	8010e7a <__gethex+0x2a2>
 8010eb6:	e7f2      	b.n	8010e9e <__gethex+0x2c6>
 8010eb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d1dd      	bne.n	8010e7a <__gethex+0x2a2>
 8010ebe:	e7ee      	b.n	8010e9e <__gethex+0x2c6>
 8010ec0:	1e67      	subs	r7, r4, #1
 8010ec2:	f1ba 0f00 	cmp.w	sl, #0
 8010ec6:	d132      	bne.n	8010f2e <__gethex+0x356>
 8010ec8:	b127      	cbz	r7, 8010ed4 <__gethex+0x2fc>
 8010eca:	4639      	mov	r1, r7
 8010ecc:	4628      	mov	r0, r5
 8010ece:	f000 fdae 	bl	8011a2e <__any_on>
 8010ed2:	4682      	mov	sl, r0
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	117a      	asrs	r2, r7, #5
 8010ed8:	f007 071f 	and.w	r7, r7, #31
 8010edc:	fa03 f707 	lsl.w	r7, r3, r7
 8010ee0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	421f      	tst	r7, r3
 8010ee8:	f04f 0702 	mov.w	r7, #2
 8010eec:	4628      	mov	r0, r5
 8010eee:	bf18      	it	ne
 8010ef0:	f04a 0a02 	orrne.w	sl, sl, #2
 8010ef4:	1b36      	subs	r6, r6, r4
 8010ef6:	f7ff fe1f 	bl	8010b38 <rshift>
 8010efa:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010efe:	f1ba 0f00 	cmp.w	sl, #0
 8010f02:	d048      	beq.n	8010f96 <__gethex+0x3be>
 8010f04:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f08:	2b02      	cmp	r3, #2
 8010f0a:	d015      	beq.n	8010f38 <__gethex+0x360>
 8010f0c:	2b03      	cmp	r3, #3
 8010f0e:	d017      	beq.n	8010f40 <__gethex+0x368>
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	d109      	bne.n	8010f28 <__gethex+0x350>
 8010f14:	f01a 0f02 	tst.w	sl, #2
 8010f18:	d006      	beq.n	8010f28 <__gethex+0x350>
 8010f1a:	f8d9 3000 	ldr.w	r3, [r9]
 8010f1e:	ea4a 0a03 	orr.w	sl, sl, r3
 8010f22:	f01a 0f01 	tst.w	sl, #1
 8010f26:	d10e      	bne.n	8010f46 <__gethex+0x36e>
 8010f28:	f047 0710 	orr.w	r7, r7, #16
 8010f2c:	e033      	b.n	8010f96 <__gethex+0x3be>
 8010f2e:	f04f 0a01 	mov.w	sl, #1
 8010f32:	e7cf      	b.n	8010ed4 <__gethex+0x2fc>
 8010f34:	2701      	movs	r7, #1
 8010f36:	e7e2      	b.n	8010efe <__gethex+0x326>
 8010f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f3a:	f1c3 0301 	rsb	r3, r3, #1
 8010f3e:	9315      	str	r3, [sp, #84]	; 0x54
 8010f40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d0f0      	beq.n	8010f28 <__gethex+0x350>
 8010f46:	f04f 0c00 	mov.w	ip, #0
 8010f4a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010f4e:	f105 0314 	add.w	r3, r5, #20
 8010f52:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010f56:	eb03 010a 	add.w	r1, r3, sl
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f60:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010f64:	d01c      	beq.n	8010fa0 <__gethex+0x3c8>
 8010f66:	3201      	adds	r2, #1
 8010f68:	6002      	str	r2, [r0, #0]
 8010f6a:	2f02      	cmp	r7, #2
 8010f6c:	f105 0314 	add.w	r3, r5, #20
 8010f70:	d138      	bne.n	8010fe4 <__gethex+0x40c>
 8010f72:	f8d8 2000 	ldr.w	r2, [r8]
 8010f76:	3a01      	subs	r2, #1
 8010f78:	42b2      	cmp	r2, r6
 8010f7a:	d10a      	bne.n	8010f92 <__gethex+0x3ba>
 8010f7c:	2201      	movs	r2, #1
 8010f7e:	1171      	asrs	r1, r6, #5
 8010f80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f84:	f006 061f 	and.w	r6, r6, #31
 8010f88:	fa02 f606 	lsl.w	r6, r2, r6
 8010f8c:	421e      	tst	r6, r3
 8010f8e:	bf18      	it	ne
 8010f90:	4617      	movne	r7, r2
 8010f92:	f047 0720 	orr.w	r7, r7, #32
 8010f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f98:	601d      	str	r5, [r3, #0]
 8010f9a:	9b06      	ldr	r3, [sp, #24]
 8010f9c:	601c      	str	r4, [r3, #0]
 8010f9e:	e6a3      	b.n	8010ce8 <__gethex+0x110>
 8010fa0:	4299      	cmp	r1, r3
 8010fa2:	f843 cc04 	str.w	ip, [r3, #-4]
 8010fa6:	d8d8      	bhi.n	8010f5a <__gethex+0x382>
 8010fa8:	68ab      	ldr	r3, [r5, #8]
 8010faa:	4599      	cmp	r9, r3
 8010fac:	db12      	blt.n	8010fd4 <__gethex+0x3fc>
 8010fae:	6869      	ldr	r1, [r5, #4]
 8010fb0:	9802      	ldr	r0, [sp, #8]
 8010fb2:	3101      	adds	r1, #1
 8010fb4:	f000 f964 	bl	8011280 <_Balloc>
 8010fb8:	4683      	mov	fp, r0
 8010fba:	692a      	ldr	r2, [r5, #16]
 8010fbc:	f105 010c 	add.w	r1, r5, #12
 8010fc0:	3202      	adds	r2, #2
 8010fc2:	0092      	lsls	r2, r2, #2
 8010fc4:	300c      	adds	r0, #12
 8010fc6:	f7fe fb93 	bl	800f6f0 <memcpy>
 8010fca:	4629      	mov	r1, r5
 8010fcc:	9802      	ldr	r0, [sp, #8]
 8010fce:	f000 f98b 	bl	80112e8 <_Bfree>
 8010fd2:	465d      	mov	r5, fp
 8010fd4:	692b      	ldr	r3, [r5, #16]
 8010fd6:	1c5a      	adds	r2, r3, #1
 8010fd8:	612a      	str	r2, [r5, #16]
 8010fda:	2201      	movs	r2, #1
 8010fdc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010fe0:	615a      	str	r2, [r3, #20]
 8010fe2:	e7c2      	b.n	8010f6a <__gethex+0x392>
 8010fe4:	692a      	ldr	r2, [r5, #16]
 8010fe6:	454a      	cmp	r2, r9
 8010fe8:	dd0b      	ble.n	8011002 <__gethex+0x42a>
 8010fea:	2101      	movs	r1, #1
 8010fec:	4628      	mov	r0, r5
 8010fee:	f7ff fda3 	bl	8010b38 <rshift>
 8010ff2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ff6:	3401      	adds	r4, #1
 8010ff8:	42a3      	cmp	r3, r4
 8010ffa:	f6ff aed8 	blt.w	8010dae <__gethex+0x1d6>
 8010ffe:	2701      	movs	r7, #1
 8011000:	e7c7      	b.n	8010f92 <__gethex+0x3ba>
 8011002:	f016 061f 	ands.w	r6, r6, #31
 8011006:	d0fa      	beq.n	8010ffe <__gethex+0x426>
 8011008:	449a      	add	sl, r3
 801100a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801100e:	f000 f9fb 	bl	8011408 <__hi0bits>
 8011012:	f1c6 0620 	rsb	r6, r6, #32
 8011016:	42b0      	cmp	r0, r6
 8011018:	dbe7      	blt.n	8010fea <__gethex+0x412>
 801101a:	e7f0      	b.n	8010ffe <__gethex+0x426>

0801101c <L_shift>:
 801101c:	f1c2 0208 	rsb	r2, r2, #8
 8011020:	0092      	lsls	r2, r2, #2
 8011022:	b570      	push	{r4, r5, r6, lr}
 8011024:	f1c2 0620 	rsb	r6, r2, #32
 8011028:	6843      	ldr	r3, [r0, #4]
 801102a:	6804      	ldr	r4, [r0, #0]
 801102c:	fa03 f506 	lsl.w	r5, r3, r6
 8011030:	432c      	orrs	r4, r5
 8011032:	40d3      	lsrs	r3, r2
 8011034:	6004      	str	r4, [r0, #0]
 8011036:	f840 3f04 	str.w	r3, [r0, #4]!
 801103a:	4288      	cmp	r0, r1
 801103c:	d3f4      	bcc.n	8011028 <L_shift+0xc>
 801103e:	bd70      	pop	{r4, r5, r6, pc}

08011040 <__match>:
 8011040:	b530      	push	{r4, r5, lr}
 8011042:	6803      	ldr	r3, [r0, #0]
 8011044:	3301      	adds	r3, #1
 8011046:	f811 4b01 	ldrb.w	r4, [r1], #1
 801104a:	b914      	cbnz	r4, 8011052 <__match+0x12>
 801104c:	6003      	str	r3, [r0, #0]
 801104e:	2001      	movs	r0, #1
 8011050:	bd30      	pop	{r4, r5, pc}
 8011052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011056:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801105a:	2d19      	cmp	r5, #25
 801105c:	bf98      	it	ls
 801105e:	3220      	addls	r2, #32
 8011060:	42a2      	cmp	r2, r4
 8011062:	d0f0      	beq.n	8011046 <__match+0x6>
 8011064:	2000      	movs	r0, #0
 8011066:	e7f3      	b.n	8011050 <__match+0x10>

08011068 <__hexnan>:
 8011068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	2500      	movs	r5, #0
 801106e:	680b      	ldr	r3, [r1, #0]
 8011070:	4682      	mov	sl, r0
 8011072:	115f      	asrs	r7, r3, #5
 8011074:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8011078:	f013 031f 	ands.w	r3, r3, #31
 801107c:	bf18      	it	ne
 801107e:	3704      	addne	r7, #4
 8011080:	1f3e      	subs	r6, r7, #4
 8011082:	4690      	mov	r8, r2
 8011084:	46b1      	mov	r9, r6
 8011086:	4634      	mov	r4, r6
 8011088:	46ab      	mov	fp, r5
 801108a:	b087      	sub	sp, #28
 801108c:	6801      	ldr	r1, [r0, #0]
 801108e:	9301      	str	r3, [sp, #4]
 8011090:	f847 5c04 	str.w	r5, [r7, #-4]
 8011094:	9502      	str	r5, [sp, #8]
 8011096:	784a      	ldrb	r2, [r1, #1]
 8011098:	1c4b      	adds	r3, r1, #1
 801109a:	9303      	str	r3, [sp, #12]
 801109c:	b342      	cbz	r2, 80110f0 <__hexnan+0x88>
 801109e:	4610      	mov	r0, r2
 80110a0:	9105      	str	r1, [sp, #20]
 80110a2:	9204      	str	r2, [sp, #16]
 80110a4:	f7ff fd83 	bl	8010bae <__hexdig_fun>
 80110a8:	2800      	cmp	r0, #0
 80110aa:	d143      	bne.n	8011134 <__hexnan+0xcc>
 80110ac:	9a04      	ldr	r2, [sp, #16]
 80110ae:	9905      	ldr	r1, [sp, #20]
 80110b0:	2a20      	cmp	r2, #32
 80110b2:	d818      	bhi.n	80110e6 <__hexnan+0x7e>
 80110b4:	9b02      	ldr	r3, [sp, #8]
 80110b6:	459b      	cmp	fp, r3
 80110b8:	dd13      	ble.n	80110e2 <__hexnan+0x7a>
 80110ba:	454c      	cmp	r4, r9
 80110bc:	d206      	bcs.n	80110cc <__hexnan+0x64>
 80110be:	2d07      	cmp	r5, #7
 80110c0:	dc04      	bgt.n	80110cc <__hexnan+0x64>
 80110c2:	462a      	mov	r2, r5
 80110c4:	4649      	mov	r1, r9
 80110c6:	4620      	mov	r0, r4
 80110c8:	f7ff ffa8 	bl	801101c <L_shift>
 80110cc:	4544      	cmp	r4, r8
 80110ce:	d944      	bls.n	801115a <__hexnan+0xf2>
 80110d0:	2300      	movs	r3, #0
 80110d2:	f1a4 0904 	sub.w	r9, r4, #4
 80110d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80110da:	461d      	mov	r5, r3
 80110dc:	464c      	mov	r4, r9
 80110de:	f8cd b008 	str.w	fp, [sp, #8]
 80110e2:	9903      	ldr	r1, [sp, #12]
 80110e4:	e7d7      	b.n	8011096 <__hexnan+0x2e>
 80110e6:	2a29      	cmp	r2, #41	; 0x29
 80110e8:	d14a      	bne.n	8011180 <__hexnan+0x118>
 80110ea:	3102      	adds	r1, #2
 80110ec:	f8ca 1000 	str.w	r1, [sl]
 80110f0:	f1bb 0f00 	cmp.w	fp, #0
 80110f4:	d044      	beq.n	8011180 <__hexnan+0x118>
 80110f6:	454c      	cmp	r4, r9
 80110f8:	d206      	bcs.n	8011108 <__hexnan+0xa0>
 80110fa:	2d07      	cmp	r5, #7
 80110fc:	dc04      	bgt.n	8011108 <__hexnan+0xa0>
 80110fe:	462a      	mov	r2, r5
 8011100:	4649      	mov	r1, r9
 8011102:	4620      	mov	r0, r4
 8011104:	f7ff ff8a 	bl	801101c <L_shift>
 8011108:	4544      	cmp	r4, r8
 801110a:	d928      	bls.n	801115e <__hexnan+0xf6>
 801110c:	4643      	mov	r3, r8
 801110e:	f854 2b04 	ldr.w	r2, [r4], #4
 8011112:	42a6      	cmp	r6, r4
 8011114:	f843 2b04 	str.w	r2, [r3], #4
 8011118:	d2f9      	bcs.n	801110e <__hexnan+0xa6>
 801111a:	2200      	movs	r2, #0
 801111c:	f843 2b04 	str.w	r2, [r3], #4
 8011120:	429e      	cmp	r6, r3
 8011122:	d2fb      	bcs.n	801111c <__hexnan+0xb4>
 8011124:	6833      	ldr	r3, [r6, #0]
 8011126:	b91b      	cbnz	r3, 8011130 <__hexnan+0xc8>
 8011128:	4546      	cmp	r6, r8
 801112a:	d127      	bne.n	801117c <__hexnan+0x114>
 801112c:	2301      	movs	r3, #1
 801112e:	6033      	str	r3, [r6, #0]
 8011130:	2005      	movs	r0, #5
 8011132:	e026      	b.n	8011182 <__hexnan+0x11a>
 8011134:	3501      	adds	r5, #1
 8011136:	2d08      	cmp	r5, #8
 8011138:	f10b 0b01 	add.w	fp, fp, #1
 801113c:	dd06      	ble.n	801114c <__hexnan+0xe4>
 801113e:	4544      	cmp	r4, r8
 8011140:	d9cf      	bls.n	80110e2 <__hexnan+0x7a>
 8011142:	2300      	movs	r3, #0
 8011144:	2501      	movs	r5, #1
 8011146:	f844 3c04 	str.w	r3, [r4, #-4]
 801114a:	3c04      	subs	r4, #4
 801114c:	6822      	ldr	r2, [r4, #0]
 801114e:	f000 000f 	and.w	r0, r0, #15
 8011152:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011156:	6020      	str	r0, [r4, #0]
 8011158:	e7c3      	b.n	80110e2 <__hexnan+0x7a>
 801115a:	2508      	movs	r5, #8
 801115c:	e7c1      	b.n	80110e2 <__hexnan+0x7a>
 801115e:	9b01      	ldr	r3, [sp, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d0df      	beq.n	8011124 <__hexnan+0xbc>
 8011164:	f04f 32ff 	mov.w	r2, #4294967295
 8011168:	f1c3 0320 	rsb	r3, r3, #32
 801116c:	fa22 f303 	lsr.w	r3, r2, r3
 8011170:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011174:	401a      	ands	r2, r3
 8011176:	f847 2c04 	str.w	r2, [r7, #-4]
 801117a:	e7d3      	b.n	8011124 <__hexnan+0xbc>
 801117c:	3e04      	subs	r6, #4
 801117e:	e7d1      	b.n	8011124 <__hexnan+0xbc>
 8011180:	2004      	movs	r0, #4
 8011182:	b007      	add	sp, #28
 8011184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011188 <__locale_ctype_ptr_l>:
 8011188:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801118c:	4770      	bx	lr

0801118e <__localeconv_l>:
 801118e:	30f0      	adds	r0, #240	; 0xf0
 8011190:	4770      	bx	lr

08011192 <__swhatbuf_r>:
 8011192:	b570      	push	{r4, r5, r6, lr}
 8011194:	460e      	mov	r6, r1
 8011196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801119a:	b096      	sub	sp, #88	; 0x58
 801119c:	2900      	cmp	r1, #0
 801119e:	4614      	mov	r4, r2
 80111a0:	461d      	mov	r5, r3
 80111a2:	da07      	bge.n	80111b4 <__swhatbuf_r+0x22>
 80111a4:	2300      	movs	r3, #0
 80111a6:	602b      	str	r3, [r5, #0]
 80111a8:	89b3      	ldrh	r3, [r6, #12]
 80111aa:	061a      	lsls	r2, r3, #24
 80111ac:	d410      	bmi.n	80111d0 <__swhatbuf_r+0x3e>
 80111ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111b2:	e00e      	b.n	80111d2 <__swhatbuf_r+0x40>
 80111b4:	466a      	mov	r2, sp
 80111b6:	f001 f881 	bl	80122bc <_fstat_r>
 80111ba:	2800      	cmp	r0, #0
 80111bc:	dbf2      	blt.n	80111a4 <__swhatbuf_r+0x12>
 80111be:	9a01      	ldr	r2, [sp, #4]
 80111c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80111c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80111c8:	425a      	negs	r2, r3
 80111ca:	415a      	adcs	r2, r3
 80111cc:	602a      	str	r2, [r5, #0]
 80111ce:	e7ee      	b.n	80111ae <__swhatbuf_r+0x1c>
 80111d0:	2340      	movs	r3, #64	; 0x40
 80111d2:	2000      	movs	r0, #0
 80111d4:	6023      	str	r3, [r4, #0]
 80111d6:	b016      	add	sp, #88	; 0x58
 80111d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080111dc <__smakebuf_r>:
 80111dc:	898b      	ldrh	r3, [r1, #12]
 80111de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80111e0:	079d      	lsls	r5, r3, #30
 80111e2:	4606      	mov	r6, r0
 80111e4:	460c      	mov	r4, r1
 80111e6:	d507      	bpl.n	80111f8 <__smakebuf_r+0x1c>
 80111e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80111ec:	6023      	str	r3, [r4, #0]
 80111ee:	6123      	str	r3, [r4, #16]
 80111f0:	2301      	movs	r3, #1
 80111f2:	6163      	str	r3, [r4, #20]
 80111f4:	b002      	add	sp, #8
 80111f6:	bd70      	pop	{r4, r5, r6, pc}
 80111f8:	ab01      	add	r3, sp, #4
 80111fa:	466a      	mov	r2, sp
 80111fc:	f7ff ffc9 	bl	8011192 <__swhatbuf_r>
 8011200:	9900      	ldr	r1, [sp, #0]
 8011202:	4605      	mov	r5, r0
 8011204:	4630      	mov	r0, r6
 8011206:	f000 fc8d 	bl	8011b24 <_malloc_r>
 801120a:	b948      	cbnz	r0, 8011220 <__smakebuf_r+0x44>
 801120c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011210:	059a      	lsls	r2, r3, #22
 8011212:	d4ef      	bmi.n	80111f4 <__smakebuf_r+0x18>
 8011214:	f023 0303 	bic.w	r3, r3, #3
 8011218:	f043 0302 	orr.w	r3, r3, #2
 801121c:	81a3      	strh	r3, [r4, #12]
 801121e:	e7e3      	b.n	80111e8 <__smakebuf_r+0xc>
 8011220:	4b0d      	ldr	r3, [pc, #52]	; (8011258 <__smakebuf_r+0x7c>)
 8011222:	62b3      	str	r3, [r6, #40]	; 0x28
 8011224:	89a3      	ldrh	r3, [r4, #12]
 8011226:	6020      	str	r0, [r4, #0]
 8011228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801122c:	81a3      	strh	r3, [r4, #12]
 801122e:	9b00      	ldr	r3, [sp, #0]
 8011230:	6120      	str	r0, [r4, #16]
 8011232:	6163      	str	r3, [r4, #20]
 8011234:	9b01      	ldr	r3, [sp, #4]
 8011236:	b15b      	cbz	r3, 8011250 <__smakebuf_r+0x74>
 8011238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801123c:	4630      	mov	r0, r6
 801123e:	f001 f84f 	bl	80122e0 <_isatty_r>
 8011242:	b128      	cbz	r0, 8011250 <__smakebuf_r+0x74>
 8011244:	89a3      	ldrh	r3, [r4, #12]
 8011246:	f023 0303 	bic.w	r3, r3, #3
 801124a:	f043 0301 	orr.w	r3, r3, #1
 801124e:	81a3      	strh	r3, [r4, #12]
 8011250:	89a3      	ldrh	r3, [r4, #12]
 8011252:	431d      	orrs	r5, r3
 8011254:	81a5      	strh	r5, [r4, #12]
 8011256:	e7cd      	b.n	80111f4 <__smakebuf_r+0x18>
 8011258:	080109ed 	.word	0x080109ed

0801125c <__ascii_mbtowc>:
 801125c:	b082      	sub	sp, #8
 801125e:	b901      	cbnz	r1, 8011262 <__ascii_mbtowc+0x6>
 8011260:	a901      	add	r1, sp, #4
 8011262:	b142      	cbz	r2, 8011276 <__ascii_mbtowc+0x1a>
 8011264:	b14b      	cbz	r3, 801127a <__ascii_mbtowc+0x1e>
 8011266:	7813      	ldrb	r3, [r2, #0]
 8011268:	600b      	str	r3, [r1, #0]
 801126a:	7812      	ldrb	r2, [r2, #0]
 801126c:	1c10      	adds	r0, r2, #0
 801126e:	bf18      	it	ne
 8011270:	2001      	movne	r0, #1
 8011272:	b002      	add	sp, #8
 8011274:	4770      	bx	lr
 8011276:	4610      	mov	r0, r2
 8011278:	e7fb      	b.n	8011272 <__ascii_mbtowc+0x16>
 801127a:	f06f 0001 	mvn.w	r0, #1
 801127e:	e7f8      	b.n	8011272 <__ascii_mbtowc+0x16>

08011280 <_Balloc>:
 8011280:	b570      	push	{r4, r5, r6, lr}
 8011282:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011284:	4604      	mov	r4, r0
 8011286:	460e      	mov	r6, r1
 8011288:	b93d      	cbnz	r5, 801129a <_Balloc+0x1a>
 801128a:	2010      	movs	r0, #16
 801128c:	f001 f84a 	bl	8012324 <malloc>
 8011290:	6260      	str	r0, [r4, #36]	; 0x24
 8011292:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011296:	6005      	str	r5, [r0, #0]
 8011298:	60c5      	str	r5, [r0, #12]
 801129a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801129c:	68eb      	ldr	r3, [r5, #12]
 801129e:	b183      	cbz	r3, 80112c2 <_Balloc+0x42>
 80112a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80112a8:	b9b8      	cbnz	r0, 80112da <_Balloc+0x5a>
 80112aa:	2101      	movs	r1, #1
 80112ac:	fa01 f506 	lsl.w	r5, r1, r6
 80112b0:	1d6a      	adds	r2, r5, #5
 80112b2:	0092      	lsls	r2, r2, #2
 80112b4:	4620      	mov	r0, r4
 80112b6:	f000 fbdb 	bl	8011a70 <_calloc_r>
 80112ba:	b160      	cbz	r0, 80112d6 <_Balloc+0x56>
 80112bc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80112c0:	e00e      	b.n	80112e0 <_Balloc+0x60>
 80112c2:	2221      	movs	r2, #33	; 0x21
 80112c4:	2104      	movs	r1, #4
 80112c6:	4620      	mov	r0, r4
 80112c8:	f000 fbd2 	bl	8011a70 <_calloc_r>
 80112cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112ce:	60e8      	str	r0, [r5, #12]
 80112d0:	68db      	ldr	r3, [r3, #12]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d1e4      	bne.n	80112a0 <_Balloc+0x20>
 80112d6:	2000      	movs	r0, #0
 80112d8:	bd70      	pop	{r4, r5, r6, pc}
 80112da:	6802      	ldr	r2, [r0, #0]
 80112dc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80112e0:	2300      	movs	r3, #0
 80112e2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80112e6:	e7f7      	b.n	80112d8 <_Balloc+0x58>

080112e8 <_Bfree>:
 80112e8:	b570      	push	{r4, r5, r6, lr}
 80112ea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80112ec:	4606      	mov	r6, r0
 80112ee:	460d      	mov	r5, r1
 80112f0:	b93c      	cbnz	r4, 8011302 <_Bfree+0x1a>
 80112f2:	2010      	movs	r0, #16
 80112f4:	f001 f816 	bl	8012324 <malloc>
 80112f8:	6270      	str	r0, [r6, #36]	; 0x24
 80112fa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80112fe:	6004      	str	r4, [r0, #0]
 8011300:	60c4      	str	r4, [r0, #12]
 8011302:	b13d      	cbz	r5, 8011314 <_Bfree+0x2c>
 8011304:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011306:	686a      	ldr	r2, [r5, #4]
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801130e:	6029      	str	r1, [r5, #0]
 8011310:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011314:	bd70      	pop	{r4, r5, r6, pc}

08011316 <__multadd>:
 8011316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801131a:	461f      	mov	r7, r3
 801131c:	4606      	mov	r6, r0
 801131e:	460c      	mov	r4, r1
 8011320:	2300      	movs	r3, #0
 8011322:	690d      	ldr	r5, [r1, #16]
 8011324:	f101 0c14 	add.w	ip, r1, #20
 8011328:	f8dc 0000 	ldr.w	r0, [ip]
 801132c:	3301      	adds	r3, #1
 801132e:	b281      	uxth	r1, r0
 8011330:	fb02 7101 	mla	r1, r2, r1, r7
 8011334:	0c00      	lsrs	r0, r0, #16
 8011336:	0c0f      	lsrs	r7, r1, #16
 8011338:	fb02 7000 	mla	r0, r2, r0, r7
 801133c:	b289      	uxth	r1, r1
 801133e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011342:	429d      	cmp	r5, r3
 8011344:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011348:	f84c 1b04 	str.w	r1, [ip], #4
 801134c:	dcec      	bgt.n	8011328 <__multadd+0x12>
 801134e:	b1d7      	cbz	r7, 8011386 <__multadd+0x70>
 8011350:	68a3      	ldr	r3, [r4, #8]
 8011352:	42ab      	cmp	r3, r5
 8011354:	dc12      	bgt.n	801137c <__multadd+0x66>
 8011356:	6861      	ldr	r1, [r4, #4]
 8011358:	4630      	mov	r0, r6
 801135a:	3101      	adds	r1, #1
 801135c:	f7ff ff90 	bl	8011280 <_Balloc>
 8011360:	4680      	mov	r8, r0
 8011362:	6922      	ldr	r2, [r4, #16]
 8011364:	f104 010c 	add.w	r1, r4, #12
 8011368:	3202      	adds	r2, #2
 801136a:	0092      	lsls	r2, r2, #2
 801136c:	300c      	adds	r0, #12
 801136e:	f7fe f9bf 	bl	800f6f0 <memcpy>
 8011372:	4621      	mov	r1, r4
 8011374:	4630      	mov	r0, r6
 8011376:	f7ff ffb7 	bl	80112e8 <_Bfree>
 801137a:	4644      	mov	r4, r8
 801137c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011380:	3501      	adds	r5, #1
 8011382:	615f      	str	r7, [r3, #20]
 8011384:	6125      	str	r5, [r4, #16]
 8011386:	4620      	mov	r0, r4
 8011388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801138c <__s2b>:
 801138c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011390:	4615      	mov	r5, r2
 8011392:	2209      	movs	r2, #9
 8011394:	461f      	mov	r7, r3
 8011396:	3308      	adds	r3, #8
 8011398:	460c      	mov	r4, r1
 801139a:	fb93 f3f2 	sdiv	r3, r3, r2
 801139e:	4606      	mov	r6, r0
 80113a0:	2201      	movs	r2, #1
 80113a2:	2100      	movs	r1, #0
 80113a4:	429a      	cmp	r2, r3
 80113a6:	db20      	blt.n	80113ea <__s2b+0x5e>
 80113a8:	4630      	mov	r0, r6
 80113aa:	f7ff ff69 	bl	8011280 <_Balloc>
 80113ae:	9b08      	ldr	r3, [sp, #32]
 80113b0:	2d09      	cmp	r5, #9
 80113b2:	6143      	str	r3, [r0, #20]
 80113b4:	f04f 0301 	mov.w	r3, #1
 80113b8:	6103      	str	r3, [r0, #16]
 80113ba:	dd19      	ble.n	80113f0 <__s2b+0x64>
 80113bc:	f104 0809 	add.w	r8, r4, #9
 80113c0:	46c1      	mov	r9, r8
 80113c2:	442c      	add	r4, r5
 80113c4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80113c8:	4601      	mov	r1, r0
 80113ca:	3b30      	subs	r3, #48	; 0x30
 80113cc:	220a      	movs	r2, #10
 80113ce:	4630      	mov	r0, r6
 80113d0:	f7ff ffa1 	bl	8011316 <__multadd>
 80113d4:	45a1      	cmp	r9, r4
 80113d6:	d1f5      	bne.n	80113c4 <__s2b+0x38>
 80113d8:	eb08 0405 	add.w	r4, r8, r5
 80113dc:	3c08      	subs	r4, #8
 80113de:	1b2d      	subs	r5, r5, r4
 80113e0:	1963      	adds	r3, r4, r5
 80113e2:	42bb      	cmp	r3, r7
 80113e4:	db07      	blt.n	80113f6 <__s2b+0x6a>
 80113e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113ea:	0052      	lsls	r2, r2, #1
 80113ec:	3101      	adds	r1, #1
 80113ee:	e7d9      	b.n	80113a4 <__s2b+0x18>
 80113f0:	340a      	adds	r4, #10
 80113f2:	2509      	movs	r5, #9
 80113f4:	e7f3      	b.n	80113de <__s2b+0x52>
 80113f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80113fa:	4601      	mov	r1, r0
 80113fc:	3b30      	subs	r3, #48	; 0x30
 80113fe:	220a      	movs	r2, #10
 8011400:	4630      	mov	r0, r6
 8011402:	f7ff ff88 	bl	8011316 <__multadd>
 8011406:	e7eb      	b.n	80113e0 <__s2b+0x54>

08011408 <__hi0bits>:
 8011408:	0c02      	lsrs	r2, r0, #16
 801140a:	0412      	lsls	r2, r2, #16
 801140c:	4603      	mov	r3, r0
 801140e:	b9b2      	cbnz	r2, 801143e <__hi0bits+0x36>
 8011410:	0403      	lsls	r3, r0, #16
 8011412:	2010      	movs	r0, #16
 8011414:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011418:	bf04      	itt	eq
 801141a:	021b      	lsleq	r3, r3, #8
 801141c:	3008      	addeq	r0, #8
 801141e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011422:	bf04      	itt	eq
 8011424:	011b      	lsleq	r3, r3, #4
 8011426:	3004      	addeq	r0, #4
 8011428:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801142c:	bf04      	itt	eq
 801142e:	009b      	lsleq	r3, r3, #2
 8011430:	3002      	addeq	r0, #2
 8011432:	2b00      	cmp	r3, #0
 8011434:	db06      	blt.n	8011444 <__hi0bits+0x3c>
 8011436:	005b      	lsls	r3, r3, #1
 8011438:	d503      	bpl.n	8011442 <__hi0bits+0x3a>
 801143a:	3001      	adds	r0, #1
 801143c:	4770      	bx	lr
 801143e:	2000      	movs	r0, #0
 8011440:	e7e8      	b.n	8011414 <__hi0bits+0xc>
 8011442:	2020      	movs	r0, #32
 8011444:	4770      	bx	lr

08011446 <__lo0bits>:
 8011446:	6803      	ldr	r3, [r0, #0]
 8011448:	4601      	mov	r1, r0
 801144a:	f013 0207 	ands.w	r2, r3, #7
 801144e:	d00b      	beq.n	8011468 <__lo0bits+0x22>
 8011450:	07da      	lsls	r2, r3, #31
 8011452:	d423      	bmi.n	801149c <__lo0bits+0x56>
 8011454:	0798      	lsls	r0, r3, #30
 8011456:	bf49      	itett	mi
 8011458:	085b      	lsrmi	r3, r3, #1
 801145a:	089b      	lsrpl	r3, r3, #2
 801145c:	2001      	movmi	r0, #1
 801145e:	600b      	strmi	r3, [r1, #0]
 8011460:	bf5c      	itt	pl
 8011462:	600b      	strpl	r3, [r1, #0]
 8011464:	2002      	movpl	r0, #2
 8011466:	4770      	bx	lr
 8011468:	b298      	uxth	r0, r3
 801146a:	b9a8      	cbnz	r0, 8011498 <__lo0bits+0x52>
 801146c:	2010      	movs	r0, #16
 801146e:	0c1b      	lsrs	r3, r3, #16
 8011470:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011474:	bf04      	itt	eq
 8011476:	0a1b      	lsreq	r3, r3, #8
 8011478:	3008      	addeq	r0, #8
 801147a:	071a      	lsls	r2, r3, #28
 801147c:	bf04      	itt	eq
 801147e:	091b      	lsreq	r3, r3, #4
 8011480:	3004      	addeq	r0, #4
 8011482:	079a      	lsls	r2, r3, #30
 8011484:	bf04      	itt	eq
 8011486:	089b      	lsreq	r3, r3, #2
 8011488:	3002      	addeq	r0, #2
 801148a:	07da      	lsls	r2, r3, #31
 801148c:	d402      	bmi.n	8011494 <__lo0bits+0x4e>
 801148e:	085b      	lsrs	r3, r3, #1
 8011490:	d006      	beq.n	80114a0 <__lo0bits+0x5a>
 8011492:	3001      	adds	r0, #1
 8011494:	600b      	str	r3, [r1, #0]
 8011496:	4770      	bx	lr
 8011498:	4610      	mov	r0, r2
 801149a:	e7e9      	b.n	8011470 <__lo0bits+0x2a>
 801149c:	2000      	movs	r0, #0
 801149e:	4770      	bx	lr
 80114a0:	2020      	movs	r0, #32
 80114a2:	4770      	bx	lr

080114a4 <__i2b>:
 80114a4:	b510      	push	{r4, lr}
 80114a6:	460c      	mov	r4, r1
 80114a8:	2101      	movs	r1, #1
 80114aa:	f7ff fee9 	bl	8011280 <_Balloc>
 80114ae:	2201      	movs	r2, #1
 80114b0:	6144      	str	r4, [r0, #20]
 80114b2:	6102      	str	r2, [r0, #16]
 80114b4:	bd10      	pop	{r4, pc}

080114b6 <__multiply>:
 80114b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ba:	4614      	mov	r4, r2
 80114bc:	690a      	ldr	r2, [r1, #16]
 80114be:	6923      	ldr	r3, [r4, #16]
 80114c0:	4688      	mov	r8, r1
 80114c2:	429a      	cmp	r2, r3
 80114c4:	bfbe      	ittt	lt
 80114c6:	460b      	movlt	r3, r1
 80114c8:	46a0      	movlt	r8, r4
 80114ca:	461c      	movlt	r4, r3
 80114cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80114d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80114d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80114d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80114dc:	eb07 0609 	add.w	r6, r7, r9
 80114e0:	42b3      	cmp	r3, r6
 80114e2:	bfb8      	it	lt
 80114e4:	3101      	addlt	r1, #1
 80114e6:	f7ff fecb 	bl	8011280 <_Balloc>
 80114ea:	f100 0514 	add.w	r5, r0, #20
 80114ee:	462b      	mov	r3, r5
 80114f0:	2200      	movs	r2, #0
 80114f2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80114f6:	4573      	cmp	r3, lr
 80114f8:	d316      	bcc.n	8011528 <__multiply+0x72>
 80114fa:	f104 0214 	add.w	r2, r4, #20
 80114fe:	f108 0114 	add.w	r1, r8, #20
 8011502:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011506:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801150a:	9300      	str	r3, [sp, #0]
 801150c:	9b00      	ldr	r3, [sp, #0]
 801150e:	9201      	str	r2, [sp, #4]
 8011510:	4293      	cmp	r3, r2
 8011512:	d80c      	bhi.n	801152e <__multiply+0x78>
 8011514:	2e00      	cmp	r6, #0
 8011516:	dd03      	ble.n	8011520 <__multiply+0x6a>
 8011518:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801151c:	2b00      	cmp	r3, #0
 801151e:	d05d      	beq.n	80115dc <__multiply+0x126>
 8011520:	6106      	str	r6, [r0, #16]
 8011522:	b003      	add	sp, #12
 8011524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011528:	f843 2b04 	str.w	r2, [r3], #4
 801152c:	e7e3      	b.n	80114f6 <__multiply+0x40>
 801152e:	f8b2 b000 	ldrh.w	fp, [r2]
 8011532:	f1bb 0f00 	cmp.w	fp, #0
 8011536:	d023      	beq.n	8011580 <__multiply+0xca>
 8011538:	4689      	mov	r9, r1
 801153a:	46ac      	mov	ip, r5
 801153c:	f04f 0800 	mov.w	r8, #0
 8011540:	f859 4b04 	ldr.w	r4, [r9], #4
 8011544:	f8dc a000 	ldr.w	sl, [ip]
 8011548:	b2a3      	uxth	r3, r4
 801154a:	fa1f fa8a 	uxth.w	sl, sl
 801154e:	fb0b a303 	mla	r3, fp, r3, sl
 8011552:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011556:	f8dc 4000 	ldr.w	r4, [ip]
 801155a:	4443      	add	r3, r8
 801155c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011560:	fb0b 840a 	mla	r4, fp, sl, r8
 8011564:	46e2      	mov	sl, ip
 8011566:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801156a:	b29b      	uxth	r3, r3
 801156c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011570:	454f      	cmp	r7, r9
 8011572:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011576:	f84a 3b04 	str.w	r3, [sl], #4
 801157a:	d82b      	bhi.n	80115d4 <__multiply+0x11e>
 801157c:	f8cc 8004 	str.w	r8, [ip, #4]
 8011580:	9b01      	ldr	r3, [sp, #4]
 8011582:	3204      	adds	r2, #4
 8011584:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011588:	f1ba 0f00 	cmp.w	sl, #0
 801158c:	d020      	beq.n	80115d0 <__multiply+0x11a>
 801158e:	4689      	mov	r9, r1
 8011590:	46a8      	mov	r8, r5
 8011592:	f04f 0b00 	mov.w	fp, #0
 8011596:	682b      	ldr	r3, [r5, #0]
 8011598:	f8b9 c000 	ldrh.w	ip, [r9]
 801159c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	fb0a 440c 	mla	r4, sl, ip, r4
 80115a6:	46c4      	mov	ip, r8
 80115a8:	445c      	add	r4, fp
 80115aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80115ae:	f84c 3b04 	str.w	r3, [ip], #4
 80115b2:	f859 3b04 	ldr.w	r3, [r9], #4
 80115b6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80115ba:	0c1b      	lsrs	r3, r3, #16
 80115bc:	fb0a b303 	mla	r3, sl, r3, fp
 80115c0:	454f      	cmp	r7, r9
 80115c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80115c6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80115ca:	d805      	bhi.n	80115d8 <__multiply+0x122>
 80115cc:	f8c8 3004 	str.w	r3, [r8, #4]
 80115d0:	3504      	adds	r5, #4
 80115d2:	e79b      	b.n	801150c <__multiply+0x56>
 80115d4:	46d4      	mov	ip, sl
 80115d6:	e7b3      	b.n	8011540 <__multiply+0x8a>
 80115d8:	46e0      	mov	r8, ip
 80115da:	e7dd      	b.n	8011598 <__multiply+0xe2>
 80115dc:	3e01      	subs	r6, #1
 80115de:	e799      	b.n	8011514 <__multiply+0x5e>

080115e0 <__pow5mult>:
 80115e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115e4:	4615      	mov	r5, r2
 80115e6:	f012 0203 	ands.w	r2, r2, #3
 80115ea:	4606      	mov	r6, r0
 80115ec:	460f      	mov	r7, r1
 80115ee:	d007      	beq.n	8011600 <__pow5mult+0x20>
 80115f0:	4c21      	ldr	r4, [pc, #132]	; (8011678 <__pow5mult+0x98>)
 80115f2:	3a01      	subs	r2, #1
 80115f4:	2300      	movs	r3, #0
 80115f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80115fa:	f7ff fe8c 	bl	8011316 <__multadd>
 80115fe:	4607      	mov	r7, r0
 8011600:	10ad      	asrs	r5, r5, #2
 8011602:	d035      	beq.n	8011670 <__pow5mult+0x90>
 8011604:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011606:	b93c      	cbnz	r4, 8011618 <__pow5mult+0x38>
 8011608:	2010      	movs	r0, #16
 801160a:	f000 fe8b 	bl	8012324 <malloc>
 801160e:	6270      	str	r0, [r6, #36]	; 0x24
 8011610:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011614:	6004      	str	r4, [r0, #0]
 8011616:	60c4      	str	r4, [r0, #12]
 8011618:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801161c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011620:	b94c      	cbnz	r4, 8011636 <__pow5mult+0x56>
 8011622:	f240 2171 	movw	r1, #625	; 0x271
 8011626:	4630      	mov	r0, r6
 8011628:	f7ff ff3c 	bl	80114a4 <__i2b>
 801162c:	2300      	movs	r3, #0
 801162e:	4604      	mov	r4, r0
 8011630:	f8c8 0008 	str.w	r0, [r8, #8]
 8011634:	6003      	str	r3, [r0, #0]
 8011636:	f04f 0800 	mov.w	r8, #0
 801163a:	07eb      	lsls	r3, r5, #31
 801163c:	d50a      	bpl.n	8011654 <__pow5mult+0x74>
 801163e:	4639      	mov	r1, r7
 8011640:	4622      	mov	r2, r4
 8011642:	4630      	mov	r0, r6
 8011644:	f7ff ff37 	bl	80114b6 <__multiply>
 8011648:	4681      	mov	r9, r0
 801164a:	4639      	mov	r1, r7
 801164c:	4630      	mov	r0, r6
 801164e:	f7ff fe4b 	bl	80112e8 <_Bfree>
 8011652:	464f      	mov	r7, r9
 8011654:	106d      	asrs	r5, r5, #1
 8011656:	d00b      	beq.n	8011670 <__pow5mult+0x90>
 8011658:	6820      	ldr	r0, [r4, #0]
 801165a:	b938      	cbnz	r0, 801166c <__pow5mult+0x8c>
 801165c:	4622      	mov	r2, r4
 801165e:	4621      	mov	r1, r4
 8011660:	4630      	mov	r0, r6
 8011662:	f7ff ff28 	bl	80114b6 <__multiply>
 8011666:	6020      	str	r0, [r4, #0]
 8011668:	f8c0 8000 	str.w	r8, [r0]
 801166c:	4604      	mov	r4, r0
 801166e:	e7e4      	b.n	801163a <__pow5mult+0x5a>
 8011670:	4638      	mov	r0, r7
 8011672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011676:	bf00      	nop
 8011678:	08012890 	.word	0x08012890

0801167c <__lshift>:
 801167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011680:	460c      	mov	r4, r1
 8011682:	4607      	mov	r7, r0
 8011684:	4616      	mov	r6, r2
 8011686:	6923      	ldr	r3, [r4, #16]
 8011688:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801168c:	eb0a 0903 	add.w	r9, sl, r3
 8011690:	6849      	ldr	r1, [r1, #4]
 8011692:	68a3      	ldr	r3, [r4, #8]
 8011694:	f109 0501 	add.w	r5, r9, #1
 8011698:	42ab      	cmp	r3, r5
 801169a:	db32      	blt.n	8011702 <__lshift+0x86>
 801169c:	4638      	mov	r0, r7
 801169e:	f7ff fdef 	bl	8011280 <_Balloc>
 80116a2:	2300      	movs	r3, #0
 80116a4:	4680      	mov	r8, r0
 80116a6:	461a      	mov	r2, r3
 80116a8:	f100 0114 	add.w	r1, r0, #20
 80116ac:	4553      	cmp	r3, sl
 80116ae:	db2b      	blt.n	8011708 <__lshift+0x8c>
 80116b0:	6920      	ldr	r0, [r4, #16]
 80116b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80116b6:	f104 0314 	add.w	r3, r4, #20
 80116ba:	f016 021f 	ands.w	r2, r6, #31
 80116be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80116c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80116c6:	d025      	beq.n	8011714 <__lshift+0x98>
 80116c8:	2000      	movs	r0, #0
 80116ca:	f1c2 0e20 	rsb	lr, r2, #32
 80116ce:	468a      	mov	sl, r1
 80116d0:	681e      	ldr	r6, [r3, #0]
 80116d2:	4096      	lsls	r6, r2
 80116d4:	4330      	orrs	r0, r6
 80116d6:	f84a 0b04 	str.w	r0, [sl], #4
 80116da:	f853 0b04 	ldr.w	r0, [r3], #4
 80116de:	459c      	cmp	ip, r3
 80116e0:	fa20 f00e 	lsr.w	r0, r0, lr
 80116e4:	d814      	bhi.n	8011710 <__lshift+0x94>
 80116e6:	6048      	str	r0, [r1, #4]
 80116e8:	b108      	cbz	r0, 80116ee <__lshift+0x72>
 80116ea:	f109 0502 	add.w	r5, r9, #2
 80116ee:	3d01      	subs	r5, #1
 80116f0:	4638      	mov	r0, r7
 80116f2:	f8c8 5010 	str.w	r5, [r8, #16]
 80116f6:	4621      	mov	r1, r4
 80116f8:	f7ff fdf6 	bl	80112e8 <_Bfree>
 80116fc:	4640      	mov	r0, r8
 80116fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011702:	3101      	adds	r1, #1
 8011704:	005b      	lsls	r3, r3, #1
 8011706:	e7c7      	b.n	8011698 <__lshift+0x1c>
 8011708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801170c:	3301      	adds	r3, #1
 801170e:	e7cd      	b.n	80116ac <__lshift+0x30>
 8011710:	4651      	mov	r1, sl
 8011712:	e7dc      	b.n	80116ce <__lshift+0x52>
 8011714:	3904      	subs	r1, #4
 8011716:	f853 2b04 	ldr.w	r2, [r3], #4
 801171a:	459c      	cmp	ip, r3
 801171c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011720:	d8f9      	bhi.n	8011716 <__lshift+0x9a>
 8011722:	e7e4      	b.n	80116ee <__lshift+0x72>

08011724 <__mcmp>:
 8011724:	6903      	ldr	r3, [r0, #16]
 8011726:	690a      	ldr	r2, [r1, #16]
 8011728:	b530      	push	{r4, r5, lr}
 801172a:	1a9b      	subs	r3, r3, r2
 801172c:	d10c      	bne.n	8011748 <__mcmp+0x24>
 801172e:	0092      	lsls	r2, r2, #2
 8011730:	3014      	adds	r0, #20
 8011732:	3114      	adds	r1, #20
 8011734:	1884      	adds	r4, r0, r2
 8011736:	4411      	add	r1, r2
 8011738:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801173c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011740:	4295      	cmp	r5, r2
 8011742:	d003      	beq.n	801174c <__mcmp+0x28>
 8011744:	d305      	bcc.n	8011752 <__mcmp+0x2e>
 8011746:	2301      	movs	r3, #1
 8011748:	4618      	mov	r0, r3
 801174a:	bd30      	pop	{r4, r5, pc}
 801174c:	42a0      	cmp	r0, r4
 801174e:	d3f3      	bcc.n	8011738 <__mcmp+0x14>
 8011750:	e7fa      	b.n	8011748 <__mcmp+0x24>
 8011752:	f04f 33ff 	mov.w	r3, #4294967295
 8011756:	e7f7      	b.n	8011748 <__mcmp+0x24>

08011758 <__mdiff>:
 8011758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801175c:	460d      	mov	r5, r1
 801175e:	4607      	mov	r7, r0
 8011760:	4611      	mov	r1, r2
 8011762:	4628      	mov	r0, r5
 8011764:	4614      	mov	r4, r2
 8011766:	f7ff ffdd 	bl	8011724 <__mcmp>
 801176a:	1e06      	subs	r6, r0, #0
 801176c:	d108      	bne.n	8011780 <__mdiff+0x28>
 801176e:	4631      	mov	r1, r6
 8011770:	4638      	mov	r0, r7
 8011772:	f7ff fd85 	bl	8011280 <_Balloc>
 8011776:	2301      	movs	r3, #1
 8011778:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801177c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011780:	bfa4      	itt	ge
 8011782:	4623      	movge	r3, r4
 8011784:	462c      	movge	r4, r5
 8011786:	4638      	mov	r0, r7
 8011788:	6861      	ldr	r1, [r4, #4]
 801178a:	bfa6      	itte	ge
 801178c:	461d      	movge	r5, r3
 801178e:	2600      	movge	r6, #0
 8011790:	2601      	movlt	r6, #1
 8011792:	f7ff fd75 	bl	8011280 <_Balloc>
 8011796:	f04f 0e00 	mov.w	lr, #0
 801179a:	60c6      	str	r6, [r0, #12]
 801179c:	692b      	ldr	r3, [r5, #16]
 801179e:	6926      	ldr	r6, [r4, #16]
 80117a0:	f104 0214 	add.w	r2, r4, #20
 80117a4:	f105 0914 	add.w	r9, r5, #20
 80117a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80117ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80117b0:	f100 0114 	add.w	r1, r0, #20
 80117b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80117b8:	f859 5b04 	ldr.w	r5, [r9], #4
 80117bc:	fa1f f38a 	uxth.w	r3, sl
 80117c0:	4473      	add	r3, lr
 80117c2:	b2ac      	uxth	r4, r5
 80117c4:	1b1b      	subs	r3, r3, r4
 80117c6:	0c2c      	lsrs	r4, r5, #16
 80117c8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80117cc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80117d6:	45c8      	cmp	r8, r9
 80117d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80117dc:	4694      	mov	ip, r2
 80117de:	f841 4b04 	str.w	r4, [r1], #4
 80117e2:	d8e7      	bhi.n	80117b4 <__mdiff+0x5c>
 80117e4:	45bc      	cmp	ip, r7
 80117e6:	d304      	bcc.n	80117f2 <__mdiff+0x9a>
 80117e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80117ec:	b183      	cbz	r3, 8011810 <__mdiff+0xb8>
 80117ee:	6106      	str	r6, [r0, #16]
 80117f0:	e7c4      	b.n	801177c <__mdiff+0x24>
 80117f2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80117f6:	b2a2      	uxth	r2, r4
 80117f8:	4472      	add	r2, lr
 80117fa:	1413      	asrs	r3, r2, #16
 80117fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011800:	b292      	uxth	r2, r2
 8011802:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011806:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801180a:	f841 2b04 	str.w	r2, [r1], #4
 801180e:	e7e9      	b.n	80117e4 <__mdiff+0x8c>
 8011810:	3e01      	subs	r6, #1
 8011812:	e7e9      	b.n	80117e8 <__mdiff+0x90>

08011814 <__ulp>:
 8011814:	4b10      	ldr	r3, [pc, #64]	; (8011858 <__ulp+0x44>)
 8011816:	400b      	ands	r3, r1
 8011818:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801181c:	2b00      	cmp	r3, #0
 801181e:	dd02      	ble.n	8011826 <__ulp+0x12>
 8011820:	2000      	movs	r0, #0
 8011822:	4619      	mov	r1, r3
 8011824:	4770      	bx	lr
 8011826:	425b      	negs	r3, r3
 8011828:	151b      	asrs	r3, r3, #20
 801182a:	2b13      	cmp	r3, #19
 801182c:	f04f 0000 	mov.w	r0, #0
 8011830:	f04f 0100 	mov.w	r1, #0
 8011834:	dc04      	bgt.n	8011840 <__ulp+0x2c>
 8011836:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801183a:	fa42 f103 	asr.w	r1, r2, r3
 801183e:	4770      	bx	lr
 8011840:	2201      	movs	r2, #1
 8011842:	3b14      	subs	r3, #20
 8011844:	2b1e      	cmp	r3, #30
 8011846:	bfce      	itee	gt
 8011848:	4613      	movgt	r3, r2
 801184a:	f1c3 031f 	rsble	r3, r3, #31
 801184e:	fa02 f303 	lslle.w	r3, r2, r3
 8011852:	4618      	mov	r0, r3
 8011854:	4770      	bx	lr
 8011856:	bf00      	nop
 8011858:	7ff00000 	.word	0x7ff00000

0801185c <__b2d>:
 801185c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011860:	6907      	ldr	r7, [r0, #16]
 8011862:	f100 0914 	add.w	r9, r0, #20
 8011866:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801186a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801186e:	f1a7 0804 	sub.w	r8, r7, #4
 8011872:	4630      	mov	r0, r6
 8011874:	f7ff fdc8 	bl	8011408 <__hi0bits>
 8011878:	f1c0 0320 	rsb	r3, r0, #32
 801187c:	280a      	cmp	r0, #10
 801187e:	600b      	str	r3, [r1, #0]
 8011880:	491e      	ldr	r1, [pc, #120]	; (80118fc <__b2d+0xa0>)
 8011882:	dc17      	bgt.n	80118b4 <__b2d+0x58>
 8011884:	45c1      	cmp	r9, r8
 8011886:	bf28      	it	cs
 8011888:	2200      	movcs	r2, #0
 801188a:	f1c0 0c0b 	rsb	ip, r0, #11
 801188e:	fa26 f30c 	lsr.w	r3, r6, ip
 8011892:	bf38      	it	cc
 8011894:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8011898:	ea43 0501 	orr.w	r5, r3, r1
 801189c:	f100 0315 	add.w	r3, r0, #21
 80118a0:	fa06 f303 	lsl.w	r3, r6, r3
 80118a4:	fa22 f20c 	lsr.w	r2, r2, ip
 80118a8:	ea43 0402 	orr.w	r4, r3, r2
 80118ac:	4620      	mov	r0, r4
 80118ae:	4629      	mov	r1, r5
 80118b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118b4:	45c1      	cmp	r9, r8
 80118b6:	bf3a      	itte	cc
 80118b8:	f1a7 0808 	subcc.w	r8, r7, #8
 80118bc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80118c0:	2200      	movcs	r2, #0
 80118c2:	f1b0 030b 	subs.w	r3, r0, #11
 80118c6:	d015      	beq.n	80118f4 <__b2d+0x98>
 80118c8:	409e      	lsls	r6, r3
 80118ca:	f1c3 0720 	rsb	r7, r3, #32
 80118ce:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80118d2:	fa22 f107 	lsr.w	r1, r2, r7
 80118d6:	45c8      	cmp	r8, r9
 80118d8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80118dc:	ea46 0501 	orr.w	r5, r6, r1
 80118e0:	bf94      	ite	ls
 80118e2:	2100      	movls	r1, #0
 80118e4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80118e8:	fa02 f003 	lsl.w	r0, r2, r3
 80118ec:	40f9      	lsrs	r1, r7
 80118ee:	ea40 0401 	orr.w	r4, r0, r1
 80118f2:	e7db      	b.n	80118ac <__b2d+0x50>
 80118f4:	ea46 0501 	orr.w	r5, r6, r1
 80118f8:	4614      	mov	r4, r2
 80118fa:	e7d7      	b.n	80118ac <__b2d+0x50>
 80118fc:	3ff00000 	.word	0x3ff00000

08011900 <__d2b>:
 8011900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011904:	461c      	mov	r4, r3
 8011906:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 801190a:	2101      	movs	r1, #1
 801190c:	4690      	mov	r8, r2
 801190e:	f7ff fcb7 	bl	8011280 <_Balloc>
 8011912:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8011916:	f3c4 540a 	ubfx	r4, r4, #20, #11
 801191a:	4607      	mov	r7, r0
 801191c:	bb34      	cbnz	r4, 801196c <__d2b+0x6c>
 801191e:	9201      	str	r2, [sp, #4]
 8011920:	f1b8 0200 	subs.w	r2, r8, #0
 8011924:	d027      	beq.n	8011976 <__d2b+0x76>
 8011926:	a802      	add	r0, sp, #8
 8011928:	f840 2d08 	str.w	r2, [r0, #-8]!
 801192c:	f7ff fd8b 	bl	8011446 <__lo0bits>
 8011930:	9900      	ldr	r1, [sp, #0]
 8011932:	b1f0      	cbz	r0, 8011972 <__d2b+0x72>
 8011934:	9a01      	ldr	r2, [sp, #4]
 8011936:	f1c0 0320 	rsb	r3, r0, #32
 801193a:	fa02 f303 	lsl.w	r3, r2, r3
 801193e:	430b      	orrs	r3, r1
 8011940:	40c2      	lsrs	r2, r0
 8011942:	617b      	str	r3, [r7, #20]
 8011944:	9201      	str	r2, [sp, #4]
 8011946:	9b01      	ldr	r3, [sp, #4]
 8011948:	2b00      	cmp	r3, #0
 801194a:	bf14      	ite	ne
 801194c:	2102      	movne	r1, #2
 801194e:	2101      	moveq	r1, #1
 8011950:	61bb      	str	r3, [r7, #24]
 8011952:	6139      	str	r1, [r7, #16]
 8011954:	b1c4      	cbz	r4, 8011988 <__d2b+0x88>
 8011956:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801195a:	4404      	add	r4, r0
 801195c:	6034      	str	r4, [r6, #0]
 801195e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011962:	6028      	str	r0, [r5, #0]
 8011964:	4638      	mov	r0, r7
 8011966:	b002      	add	sp, #8
 8011968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801196c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011970:	e7d5      	b.n	801191e <__d2b+0x1e>
 8011972:	6179      	str	r1, [r7, #20]
 8011974:	e7e7      	b.n	8011946 <__d2b+0x46>
 8011976:	a801      	add	r0, sp, #4
 8011978:	f7ff fd65 	bl	8011446 <__lo0bits>
 801197c:	2101      	movs	r1, #1
 801197e:	9b01      	ldr	r3, [sp, #4]
 8011980:	6139      	str	r1, [r7, #16]
 8011982:	617b      	str	r3, [r7, #20]
 8011984:	3020      	adds	r0, #32
 8011986:	e7e5      	b.n	8011954 <__d2b+0x54>
 8011988:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801198c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011990:	6030      	str	r0, [r6, #0]
 8011992:	6918      	ldr	r0, [r3, #16]
 8011994:	f7ff fd38 	bl	8011408 <__hi0bits>
 8011998:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801199c:	e7e1      	b.n	8011962 <__d2b+0x62>

0801199e <__ratio>:
 801199e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a2:	4688      	mov	r8, r1
 80119a4:	4669      	mov	r1, sp
 80119a6:	4681      	mov	r9, r0
 80119a8:	f7ff ff58 	bl	801185c <__b2d>
 80119ac:	468b      	mov	fp, r1
 80119ae:	4606      	mov	r6, r0
 80119b0:	460f      	mov	r7, r1
 80119b2:	4640      	mov	r0, r8
 80119b4:	a901      	add	r1, sp, #4
 80119b6:	f7ff ff51 	bl	801185c <__b2d>
 80119ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80119c2:	460d      	mov	r5, r1
 80119c4:	eba3 0c02 	sub.w	ip, r3, r2
 80119c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80119cc:	1a9b      	subs	r3, r3, r2
 80119ce:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	bfd5      	itete	le
 80119d6:	460a      	movle	r2, r1
 80119d8:	463a      	movgt	r2, r7
 80119da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80119de:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80119e2:	bfd8      	it	le
 80119e4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80119e8:	462b      	mov	r3, r5
 80119ea:	4602      	mov	r2, r0
 80119ec:	4659      	mov	r1, fp
 80119ee:	4630      	mov	r0, r6
 80119f0:	f7f3 ff16 	bl	8005820 <__aeabi_ddiv>
 80119f4:	b003      	add	sp, #12
 80119f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080119fa <__copybits>:
 80119fa:	3901      	subs	r1, #1
 80119fc:	b510      	push	{r4, lr}
 80119fe:	1149      	asrs	r1, r1, #5
 8011a00:	6914      	ldr	r4, [r2, #16]
 8011a02:	3101      	adds	r1, #1
 8011a04:	f102 0314 	add.w	r3, r2, #20
 8011a08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a10:	42a3      	cmp	r3, r4
 8011a12:	4602      	mov	r2, r0
 8011a14:	d303      	bcc.n	8011a1e <__copybits+0x24>
 8011a16:	2300      	movs	r3, #0
 8011a18:	428a      	cmp	r2, r1
 8011a1a:	d305      	bcc.n	8011a28 <__copybits+0x2e>
 8011a1c:	bd10      	pop	{r4, pc}
 8011a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a22:	f840 2b04 	str.w	r2, [r0], #4
 8011a26:	e7f3      	b.n	8011a10 <__copybits+0x16>
 8011a28:	f842 3b04 	str.w	r3, [r2], #4
 8011a2c:	e7f4      	b.n	8011a18 <__copybits+0x1e>

08011a2e <__any_on>:
 8011a2e:	f100 0214 	add.w	r2, r0, #20
 8011a32:	6900      	ldr	r0, [r0, #16]
 8011a34:	114b      	asrs	r3, r1, #5
 8011a36:	4298      	cmp	r0, r3
 8011a38:	b510      	push	{r4, lr}
 8011a3a:	db11      	blt.n	8011a60 <__any_on+0x32>
 8011a3c:	dd0a      	ble.n	8011a54 <__any_on+0x26>
 8011a3e:	f011 011f 	ands.w	r1, r1, #31
 8011a42:	d007      	beq.n	8011a54 <__any_on+0x26>
 8011a44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a48:	fa24 f001 	lsr.w	r0, r4, r1
 8011a4c:	fa00 f101 	lsl.w	r1, r0, r1
 8011a50:	428c      	cmp	r4, r1
 8011a52:	d10b      	bne.n	8011a6c <__any_on+0x3e>
 8011a54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d803      	bhi.n	8011a64 <__any_on+0x36>
 8011a5c:	2000      	movs	r0, #0
 8011a5e:	bd10      	pop	{r4, pc}
 8011a60:	4603      	mov	r3, r0
 8011a62:	e7f7      	b.n	8011a54 <__any_on+0x26>
 8011a64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a68:	2900      	cmp	r1, #0
 8011a6a:	d0f5      	beq.n	8011a58 <__any_on+0x2a>
 8011a6c:	2001      	movs	r0, #1
 8011a6e:	e7f6      	b.n	8011a5e <__any_on+0x30>

08011a70 <_calloc_r>:
 8011a70:	b538      	push	{r3, r4, r5, lr}
 8011a72:	fb02 f401 	mul.w	r4, r2, r1
 8011a76:	4621      	mov	r1, r4
 8011a78:	f000 f854 	bl	8011b24 <_malloc_r>
 8011a7c:	4605      	mov	r5, r0
 8011a7e:	b118      	cbz	r0, 8011a88 <_calloc_r+0x18>
 8011a80:	4622      	mov	r2, r4
 8011a82:	2100      	movs	r1, #0
 8011a84:	f7fd fe3f 	bl	800f706 <memset>
 8011a88:	4628      	mov	r0, r5
 8011a8a:	bd38      	pop	{r3, r4, r5, pc}

08011a8c <_free_r>:
 8011a8c:	b538      	push	{r3, r4, r5, lr}
 8011a8e:	4605      	mov	r5, r0
 8011a90:	2900      	cmp	r1, #0
 8011a92:	d043      	beq.n	8011b1c <_free_r+0x90>
 8011a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a98:	1f0c      	subs	r4, r1, #4
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	bfb8      	it	lt
 8011a9e:	18e4      	addlt	r4, r4, r3
 8011aa0:	f000 fc6f 	bl	8012382 <__malloc_lock>
 8011aa4:	4a1e      	ldr	r2, [pc, #120]	; (8011b20 <_free_r+0x94>)
 8011aa6:	6813      	ldr	r3, [r2, #0]
 8011aa8:	4610      	mov	r0, r2
 8011aaa:	b933      	cbnz	r3, 8011aba <_free_r+0x2e>
 8011aac:	6063      	str	r3, [r4, #4]
 8011aae:	6014      	str	r4, [r2, #0]
 8011ab0:	4628      	mov	r0, r5
 8011ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ab6:	f000 bc65 	b.w	8012384 <__malloc_unlock>
 8011aba:	42a3      	cmp	r3, r4
 8011abc:	d90b      	bls.n	8011ad6 <_free_r+0x4a>
 8011abe:	6821      	ldr	r1, [r4, #0]
 8011ac0:	1862      	adds	r2, r4, r1
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	bf01      	itttt	eq
 8011ac6:	681a      	ldreq	r2, [r3, #0]
 8011ac8:	685b      	ldreq	r3, [r3, #4]
 8011aca:	1852      	addeq	r2, r2, r1
 8011acc:	6022      	streq	r2, [r4, #0]
 8011ace:	6063      	str	r3, [r4, #4]
 8011ad0:	6004      	str	r4, [r0, #0]
 8011ad2:	e7ed      	b.n	8011ab0 <_free_r+0x24>
 8011ad4:	4613      	mov	r3, r2
 8011ad6:	685a      	ldr	r2, [r3, #4]
 8011ad8:	b10a      	cbz	r2, 8011ade <_free_r+0x52>
 8011ada:	42a2      	cmp	r2, r4
 8011adc:	d9fa      	bls.n	8011ad4 <_free_r+0x48>
 8011ade:	6819      	ldr	r1, [r3, #0]
 8011ae0:	1858      	adds	r0, r3, r1
 8011ae2:	42a0      	cmp	r0, r4
 8011ae4:	d10b      	bne.n	8011afe <_free_r+0x72>
 8011ae6:	6820      	ldr	r0, [r4, #0]
 8011ae8:	4401      	add	r1, r0
 8011aea:	1858      	adds	r0, r3, r1
 8011aec:	4282      	cmp	r2, r0
 8011aee:	6019      	str	r1, [r3, #0]
 8011af0:	d1de      	bne.n	8011ab0 <_free_r+0x24>
 8011af2:	6810      	ldr	r0, [r2, #0]
 8011af4:	6852      	ldr	r2, [r2, #4]
 8011af6:	4401      	add	r1, r0
 8011af8:	6019      	str	r1, [r3, #0]
 8011afa:	605a      	str	r2, [r3, #4]
 8011afc:	e7d8      	b.n	8011ab0 <_free_r+0x24>
 8011afe:	d902      	bls.n	8011b06 <_free_r+0x7a>
 8011b00:	230c      	movs	r3, #12
 8011b02:	602b      	str	r3, [r5, #0]
 8011b04:	e7d4      	b.n	8011ab0 <_free_r+0x24>
 8011b06:	6820      	ldr	r0, [r4, #0]
 8011b08:	1821      	adds	r1, r4, r0
 8011b0a:	428a      	cmp	r2, r1
 8011b0c:	bf01      	itttt	eq
 8011b0e:	6811      	ldreq	r1, [r2, #0]
 8011b10:	6852      	ldreq	r2, [r2, #4]
 8011b12:	1809      	addeq	r1, r1, r0
 8011b14:	6021      	streq	r1, [r4, #0]
 8011b16:	6062      	str	r2, [r4, #4]
 8011b18:	605c      	str	r4, [r3, #4]
 8011b1a:	e7c9      	b.n	8011ab0 <_free_r+0x24>
 8011b1c:	bd38      	pop	{r3, r4, r5, pc}
 8011b1e:	bf00      	nop
 8011b20:	2000283c 	.word	0x2000283c

08011b24 <_malloc_r>:
 8011b24:	b570      	push	{r4, r5, r6, lr}
 8011b26:	1ccd      	adds	r5, r1, #3
 8011b28:	f025 0503 	bic.w	r5, r5, #3
 8011b2c:	3508      	adds	r5, #8
 8011b2e:	2d0c      	cmp	r5, #12
 8011b30:	bf38      	it	cc
 8011b32:	250c      	movcc	r5, #12
 8011b34:	2d00      	cmp	r5, #0
 8011b36:	4606      	mov	r6, r0
 8011b38:	db01      	blt.n	8011b3e <_malloc_r+0x1a>
 8011b3a:	42a9      	cmp	r1, r5
 8011b3c:	d903      	bls.n	8011b46 <_malloc_r+0x22>
 8011b3e:	230c      	movs	r3, #12
 8011b40:	6033      	str	r3, [r6, #0]
 8011b42:	2000      	movs	r0, #0
 8011b44:	bd70      	pop	{r4, r5, r6, pc}
 8011b46:	f000 fc1c 	bl	8012382 <__malloc_lock>
 8011b4a:	4a21      	ldr	r2, [pc, #132]	; (8011bd0 <_malloc_r+0xac>)
 8011b4c:	6814      	ldr	r4, [r2, #0]
 8011b4e:	4621      	mov	r1, r4
 8011b50:	b991      	cbnz	r1, 8011b78 <_malloc_r+0x54>
 8011b52:	4c20      	ldr	r4, [pc, #128]	; (8011bd4 <_malloc_r+0xb0>)
 8011b54:	6823      	ldr	r3, [r4, #0]
 8011b56:	b91b      	cbnz	r3, 8011b60 <_malloc_r+0x3c>
 8011b58:	4630      	mov	r0, r6
 8011b5a:	f000 fb17 	bl	801218c <_sbrk_r>
 8011b5e:	6020      	str	r0, [r4, #0]
 8011b60:	4629      	mov	r1, r5
 8011b62:	4630      	mov	r0, r6
 8011b64:	f000 fb12 	bl	801218c <_sbrk_r>
 8011b68:	1c43      	adds	r3, r0, #1
 8011b6a:	d124      	bne.n	8011bb6 <_malloc_r+0x92>
 8011b6c:	230c      	movs	r3, #12
 8011b6e:	4630      	mov	r0, r6
 8011b70:	6033      	str	r3, [r6, #0]
 8011b72:	f000 fc07 	bl	8012384 <__malloc_unlock>
 8011b76:	e7e4      	b.n	8011b42 <_malloc_r+0x1e>
 8011b78:	680b      	ldr	r3, [r1, #0]
 8011b7a:	1b5b      	subs	r3, r3, r5
 8011b7c:	d418      	bmi.n	8011bb0 <_malloc_r+0x8c>
 8011b7e:	2b0b      	cmp	r3, #11
 8011b80:	d90f      	bls.n	8011ba2 <_malloc_r+0x7e>
 8011b82:	600b      	str	r3, [r1, #0]
 8011b84:	18cc      	adds	r4, r1, r3
 8011b86:	50cd      	str	r5, [r1, r3]
 8011b88:	4630      	mov	r0, r6
 8011b8a:	f000 fbfb 	bl	8012384 <__malloc_unlock>
 8011b8e:	f104 000b 	add.w	r0, r4, #11
 8011b92:	1d23      	adds	r3, r4, #4
 8011b94:	f020 0007 	bic.w	r0, r0, #7
 8011b98:	1ac3      	subs	r3, r0, r3
 8011b9a:	d0d3      	beq.n	8011b44 <_malloc_r+0x20>
 8011b9c:	425a      	negs	r2, r3
 8011b9e:	50e2      	str	r2, [r4, r3]
 8011ba0:	e7d0      	b.n	8011b44 <_malloc_r+0x20>
 8011ba2:	684b      	ldr	r3, [r1, #4]
 8011ba4:	428c      	cmp	r4, r1
 8011ba6:	bf16      	itet	ne
 8011ba8:	6063      	strne	r3, [r4, #4]
 8011baa:	6013      	streq	r3, [r2, #0]
 8011bac:	460c      	movne	r4, r1
 8011bae:	e7eb      	b.n	8011b88 <_malloc_r+0x64>
 8011bb0:	460c      	mov	r4, r1
 8011bb2:	6849      	ldr	r1, [r1, #4]
 8011bb4:	e7cc      	b.n	8011b50 <_malloc_r+0x2c>
 8011bb6:	1cc4      	adds	r4, r0, #3
 8011bb8:	f024 0403 	bic.w	r4, r4, #3
 8011bbc:	42a0      	cmp	r0, r4
 8011bbe:	d005      	beq.n	8011bcc <_malloc_r+0xa8>
 8011bc0:	1a21      	subs	r1, r4, r0
 8011bc2:	4630      	mov	r0, r6
 8011bc4:	f000 fae2 	bl	801218c <_sbrk_r>
 8011bc8:	3001      	adds	r0, #1
 8011bca:	d0cf      	beq.n	8011b6c <_malloc_r+0x48>
 8011bcc:	6025      	str	r5, [r4, #0]
 8011bce:	e7db      	b.n	8011b88 <_malloc_r+0x64>
 8011bd0:	2000283c 	.word	0x2000283c
 8011bd4:	20002840 	.word	0x20002840

08011bd8 <__ssputs_r>:
 8011bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bdc:	688e      	ldr	r6, [r1, #8]
 8011bde:	4682      	mov	sl, r0
 8011be0:	429e      	cmp	r6, r3
 8011be2:	460c      	mov	r4, r1
 8011be4:	4690      	mov	r8, r2
 8011be6:	4699      	mov	r9, r3
 8011be8:	d837      	bhi.n	8011c5a <__ssputs_r+0x82>
 8011bea:	898a      	ldrh	r2, [r1, #12]
 8011bec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011bf0:	d031      	beq.n	8011c56 <__ssputs_r+0x7e>
 8011bf2:	2302      	movs	r3, #2
 8011bf4:	6825      	ldr	r5, [r4, #0]
 8011bf6:	6909      	ldr	r1, [r1, #16]
 8011bf8:	1a6f      	subs	r7, r5, r1
 8011bfa:	6965      	ldr	r5, [r4, #20]
 8011bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c00:	fb95 f5f3 	sdiv	r5, r5, r3
 8011c04:	f109 0301 	add.w	r3, r9, #1
 8011c08:	443b      	add	r3, r7
 8011c0a:	429d      	cmp	r5, r3
 8011c0c:	bf38      	it	cc
 8011c0e:	461d      	movcc	r5, r3
 8011c10:	0553      	lsls	r3, r2, #21
 8011c12:	d530      	bpl.n	8011c76 <__ssputs_r+0x9e>
 8011c14:	4629      	mov	r1, r5
 8011c16:	f7ff ff85 	bl	8011b24 <_malloc_r>
 8011c1a:	4606      	mov	r6, r0
 8011c1c:	b950      	cbnz	r0, 8011c34 <__ssputs_r+0x5c>
 8011c1e:	230c      	movs	r3, #12
 8011c20:	f04f 30ff 	mov.w	r0, #4294967295
 8011c24:	f8ca 3000 	str.w	r3, [sl]
 8011c28:	89a3      	ldrh	r3, [r4, #12]
 8011c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c2e:	81a3      	strh	r3, [r4, #12]
 8011c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c34:	463a      	mov	r2, r7
 8011c36:	6921      	ldr	r1, [r4, #16]
 8011c38:	f7fd fd5a 	bl	800f6f0 <memcpy>
 8011c3c:	89a3      	ldrh	r3, [r4, #12]
 8011c3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c46:	81a3      	strh	r3, [r4, #12]
 8011c48:	6126      	str	r6, [r4, #16]
 8011c4a:	443e      	add	r6, r7
 8011c4c:	6026      	str	r6, [r4, #0]
 8011c4e:	464e      	mov	r6, r9
 8011c50:	6165      	str	r5, [r4, #20]
 8011c52:	1bed      	subs	r5, r5, r7
 8011c54:	60a5      	str	r5, [r4, #8]
 8011c56:	454e      	cmp	r6, r9
 8011c58:	d900      	bls.n	8011c5c <__ssputs_r+0x84>
 8011c5a:	464e      	mov	r6, r9
 8011c5c:	4632      	mov	r2, r6
 8011c5e:	4641      	mov	r1, r8
 8011c60:	6820      	ldr	r0, [r4, #0]
 8011c62:	f000 fb75 	bl	8012350 <memmove>
 8011c66:	68a3      	ldr	r3, [r4, #8]
 8011c68:	2000      	movs	r0, #0
 8011c6a:	1b9b      	subs	r3, r3, r6
 8011c6c:	60a3      	str	r3, [r4, #8]
 8011c6e:	6823      	ldr	r3, [r4, #0]
 8011c70:	441e      	add	r6, r3
 8011c72:	6026      	str	r6, [r4, #0]
 8011c74:	e7dc      	b.n	8011c30 <__ssputs_r+0x58>
 8011c76:	462a      	mov	r2, r5
 8011c78:	f000 fb85 	bl	8012386 <_realloc_r>
 8011c7c:	4606      	mov	r6, r0
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	d1e2      	bne.n	8011c48 <__ssputs_r+0x70>
 8011c82:	6921      	ldr	r1, [r4, #16]
 8011c84:	4650      	mov	r0, sl
 8011c86:	f7ff ff01 	bl	8011a8c <_free_r>
 8011c8a:	e7c8      	b.n	8011c1e <__ssputs_r+0x46>

08011c8c <_svfiprintf_r>:
 8011c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c90:	461d      	mov	r5, r3
 8011c92:	898b      	ldrh	r3, [r1, #12]
 8011c94:	b09d      	sub	sp, #116	; 0x74
 8011c96:	061f      	lsls	r7, r3, #24
 8011c98:	4680      	mov	r8, r0
 8011c9a:	460c      	mov	r4, r1
 8011c9c:	4616      	mov	r6, r2
 8011c9e:	d50f      	bpl.n	8011cc0 <_svfiprintf_r+0x34>
 8011ca0:	690b      	ldr	r3, [r1, #16]
 8011ca2:	b96b      	cbnz	r3, 8011cc0 <_svfiprintf_r+0x34>
 8011ca4:	2140      	movs	r1, #64	; 0x40
 8011ca6:	f7ff ff3d 	bl	8011b24 <_malloc_r>
 8011caa:	6020      	str	r0, [r4, #0]
 8011cac:	6120      	str	r0, [r4, #16]
 8011cae:	b928      	cbnz	r0, 8011cbc <_svfiprintf_r+0x30>
 8011cb0:	230c      	movs	r3, #12
 8011cb2:	f8c8 3000 	str.w	r3, [r8]
 8011cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011cba:	e0c8      	b.n	8011e4e <_svfiprintf_r+0x1c2>
 8011cbc:	2340      	movs	r3, #64	; 0x40
 8011cbe:	6163      	str	r3, [r4, #20]
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8011cc4:	2320      	movs	r3, #32
 8011cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011cca:	2330      	movs	r3, #48	; 0x30
 8011ccc:	f04f 0b01 	mov.w	fp, #1
 8011cd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011cd4:	9503      	str	r5, [sp, #12]
 8011cd6:	4637      	mov	r7, r6
 8011cd8:	463d      	mov	r5, r7
 8011cda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011cde:	b10b      	cbz	r3, 8011ce4 <_svfiprintf_r+0x58>
 8011ce0:	2b25      	cmp	r3, #37	; 0x25
 8011ce2:	d13e      	bne.n	8011d62 <_svfiprintf_r+0xd6>
 8011ce4:	ebb7 0a06 	subs.w	sl, r7, r6
 8011ce8:	d00b      	beq.n	8011d02 <_svfiprintf_r+0x76>
 8011cea:	4653      	mov	r3, sl
 8011cec:	4632      	mov	r2, r6
 8011cee:	4621      	mov	r1, r4
 8011cf0:	4640      	mov	r0, r8
 8011cf2:	f7ff ff71 	bl	8011bd8 <__ssputs_r>
 8011cf6:	3001      	adds	r0, #1
 8011cf8:	f000 80a4 	beq.w	8011e44 <_svfiprintf_r+0x1b8>
 8011cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cfe:	4453      	add	r3, sl
 8011d00:	9309      	str	r3, [sp, #36]	; 0x24
 8011d02:	783b      	ldrb	r3, [r7, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	f000 809d 	beq.w	8011e44 <_svfiprintf_r+0x1b8>
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d14:	9304      	str	r3, [sp, #16]
 8011d16:	9307      	str	r3, [sp, #28]
 8011d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8011d1e:	462f      	mov	r7, r5
 8011d20:	2205      	movs	r2, #5
 8011d22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011d26:	4850      	ldr	r0, [pc, #320]	; (8011e68 <_svfiprintf_r+0x1dc>)
 8011d28:	f000 fb04 	bl	8012334 <memchr>
 8011d2c:	9b04      	ldr	r3, [sp, #16]
 8011d2e:	b9d0      	cbnz	r0, 8011d66 <_svfiprintf_r+0xda>
 8011d30:	06d9      	lsls	r1, r3, #27
 8011d32:	bf44      	itt	mi
 8011d34:	2220      	movmi	r2, #32
 8011d36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d3a:	071a      	lsls	r2, r3, #28
 8011d3c:	bf44      	itt	mi
 8011d3e:	222b      	movmi	r2, #43	; 0x2b
 8011d40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d44:	782a      	ldrb	r2, [r5, #0]
 8011d46:	2a2a      	cmp	r2, #42	; 0x2a
 8011d48:	d015      	beq.n	8011d76 <_svfiprintf_r+0xea>
 8011d4a:	462f      	mov	r7, r5
 8011d4c:	2000      	movs	r0, #0
 8011d4e:	250a      	movs	r5, #10
 8011d50:	9a07      	ldr	r2, [sp, #28]
 8011d52:	4639      	mov	r1, r7
 8011d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d58:	3b30      	subs	r3, #48	; 0x30
 8011d5a:	2b09      	cmp	r3, #9
 8011d5c:	d94d      	bls.n	8011dfa <_svfiprintf_r+0x16e>
 8011d5e:	b1b8      	cbz	r0, 8011d90 <_svfiprintf_r+0x104>
 8011d60:	e00f      	b.n	8011d82 <_svfiprintf_r+0xf6>
 8011d62:	462f      	mov	r7, r5
 8011d64:	e7b8      	b.n	8011cd8 <_svfiprintf_r+0x4c>
 8011d66:	4a40      	ldr	r2, [pc, #256]	; (8011e68 <_svfiprintf_r+0x1dc>)
 8011d68:	463d      	mov	r5, r7
 8011d6a:	1a80      	subs	r0, r0, r2
 8011d6c:	fa0b f000 	lsl.w	r0, fp, r0
 8011d70:	4318      	orrs	r0, r3
 8011d72:	9004      	str	r0, [sp, #16]
 8011d74:	e7d3      	b.n	8011d1e <_svfiprintf_r+0x92>
 8011d76:	9a03      	ldr	r2, [sp, #12]
 8011d78:	1d11      	adds	r1, r2, #4
 8011d7a:	6812      	ldr	r2, [r2, #0]
 8011d7c:	9103      	str	r1, [sp, #12]
 8011d7e:	2a00      	cmp	r2, #0
 8011d80:	db01      	blt.n	8011d86 <_svfiprintf_r+0xfa>
 8011d82:	9207      	str	r2, [sp, #28]
 8011d84:	e004      	b.n	8011d90 <_svfiprintf_r+0x104>
 8011d86:	4252      	negs	r2, r2
 8011d88:	f043 0302 	orr.w	r3, r3, #2
 8011d8c:	9207      	str	r2, [sp, #28]
 8011d8e:	9304      	str	r3, [sp, #16]
 8011d90:	783b      	ldrb	r3, [r7, #0]
 8011d92:	2b2e      	cmp	r3, #46	; 0x2e
 8011d94:	d10c      	bne.n	8011db0 <_svfiprintf_r+0x124>
 8011d96:	787b      	ldrb	r3, [r7, #1]
 8011d98:	2b2a      	cmp	r3, #42	; 0x2a
 8011d9a:	d133      	bne.n	8011e04 <_svfiprintf_r+0x178>
 8011d9c:	9b03      	ldr	r3, [sp, #12]
 8011d9e:	3702      	adds	r7, #2
 8011da0:	1d1a      	adds	r2, r3, #4
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	9203      	str	r2, [sp, #12]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	bfb8      	it	lt
 8011daa:	f04f 33ff 	movlt.w	r3, #4294967295
 8011dae:	9305      	str	r3, [sp, #20]
 8011db0:	4d2e      	ldr	r5, [pc, #184]	; (8011e6c <_svfiprintf_r+0x1e0>)
 8011db2:	2203      	movs	r2, #3
 8011db4:	7839      	ldrb	r1, [r7, #0]
 8011db6:	4628      	mov	r0, r5
 8011db8:	f000 fabc 	bl	8012334 <memchr>
 8011dbc:	b138      	cbz	r0, 8011dce <_svfiprintf_r+0x142>
 8011dbe:	2340      	movs	r3, #64	; 0x40
 8011dc0:	1b40      	subs	r0, r0, r5
 8011dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8011dc6:	9b04      	ldr	r3, [sp, #16]
 8011dc8:	3701      	adds	r7, #1
 8011dca:	4303      	orrs	r3, r0
 8011dcc:	9304      	str	r3, [sp, #16]
 8011dce:	7839      	ldrb	r1, [r7, #0]
 8011dd0:	2206      	movs	r2, #6
 8011dd2:	4827      	ldr	r0, [pc, #156]	; (8011e70 <_svfiprintf_r+0x1e4>)
 8011dd4:	1c7e      	adds	r6, r7, #1
 8011dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011dda:	f000 faab 	bl	8012334 <memchr>
 8011dde:	2800      	cmp	r0, #0
 8011de0:	d038      	beq.n	8011e54 <_svfiprintf_r+0x1c8>
 8011de2:	4b24      	ldr	r3, [pc, #144]	; (8011e74 <_svfiprintf_r+0x1e8>)
 8011de4:	bb13      	cbnz	r3, 8011e2c <_svfiprintf_r+0x1a0>
 8011de6:	9b03      	ldr	r3, [sp, #12]
 8011de8:	3307      	adds	r3, #7
 8011dea:	f023 0307 	bic.w	r3, r3, #7
 8011dee:	3308      	adds	r3, #8
 8011df0:	9303      	str	r3, [sp, #12]
 8011df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011df4:	444b      	add	r3, r9
 8011df6:	9309      	str	r3, [sp, #36]	; 0x24
 8011df8:	e76d      	b.n	8011cd6 <_svfiprintf_r+0x4a>
 8011dfa:	fb05 3202 	mla	r2, r5, r2, r3
 8011dfe:	2001      	movs	r0, #1
 8011e00:	460f      	mov	r7, r1
 8011e02:	e7a6      	b.n	8011d52 <_svfiprintf_r+0xc6>
 8011e04:	2300      	movs	r3, #0
 8011e06:	250a      	movs	r5, #10
 8011e08:	4619      	mov	r1, r3
 8011e0a:	3701      	adds	r7, #1
 8011e0c:	9305      	str	r3, [sp, #20]
 8011e0e:	4638      	mov	r0, r7
 8011e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e14:	3a30      	subs	r2, #48	; 0x30
 8011e16:	2a09      	cmp	r2, #9
 8011e18:	d903      	bls.n	8011e22 <_svfiprintf_r+0x196>
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d0c8      	beq.n	8011db0 <_svfiprintf_r+0x124>
 8011e1e:	9105      	str	r1, [sp, #20]
 8011e20:	e7c6      	b.n	8011db0 <_svfiprintf_r+0x124>
 8011e22:	fb05 2101 	mla	r1, r5, r1, r2
 8011e26:	2301      	movs	r3, #1
 8011e28:	4607      	mov	r7, r0
 8011e2a:	e7f0      	b.n	8011e0e <_svfiprintf_r+0x182>
 8011e2c:	ab03      	add	r3, sp, #12
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	4622      	mov	r2, r4
 8011e32:	4b11      	ldr	r3, [pc, #68]	; (8011e78 <_svfiprintf_r+0x1ec>)
 8011e34:	a904      	add	r1, sp, #16
 8011e36:	4640      	mov	r0, r8
 8011e38:	f3af 8000 	nop.w
 8011e3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011e40:	4681      	mov	r9, r0
 8011e42:	d1d6      	bne.n	8011df2 <_svfiprintf_r+0x166>
 8011e44:	89a3      	ldrh	r3, [r4, #12]
 8011e46:	065b      	lsls	r3, r3, #25
 8011e48:	f53f af35 	bmi.w	8011cb6 <_svfiprintf_r+0x2a>
 8011e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e4e:	b01d      	add	sp, #116	; 0x74
 8011e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e54:	ab03      	add	r3, sp, #12
 8011e56:	9300      	str	r3, [sp, #0]
 8011e58:	4622      	mov	r2, r4
 8011e5a:	4b07      	ldr	r3, [pc, #28]	; (8011e78 <_svfiprintf_r+0x1ec>)
 8011e5c:	a904      	add	r1, sp, #16
 8011e5e:	4640      	mov	r0, r8
 8011e60:	f000 f882 	bl	8011f68 <_printf_i>
 8011e64:	e7ea      	b.n	8011e3c <_svfiprintf_r+0x1b0>
 8011e66:	bf00      	nop
 8011e68:	0801289c 	.word	0x0801289c
 8011e6c:	080128a2 	.word	0x080128a2
 8011e70:	080128a6 	.word	0x080128a6
 8011e74:	00000000 	.word	0x00000000
 8011e78:	08011bd9 	.word	0x08011bd9

08011e7c <_printf_common>:
 8011e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e80:	4691      	mov	r9, r2
 8011e82:	461f      	mov	r7, r3
 8011e84:	688a      	ldr	r2, [r1, #8]
 8011e86:	690b      	ldr	r3, [r1, #16]
 8011e88:	4606      	mov	r6, r0
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	bfb8      	it	lt
 8011e8e:	4613      	movlt	r3, r2
 8011e90:	f8c9 3000 	str.w	r3, [r9]
 8011e94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e98:	460c      	mov	r4, r1
 8011e9a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e9e:	b112      	cbz	r2, 8011ea6 <_printf_common+0x2a>
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	f8c9 3000 	str.w	r3, [r9]
 8011ea6:	6823      	ldr	r3, [r4, #0]
 8011ea8:	0699      	lsls	r1, r3, #26
 8011eaa:	bf42      	ittt	mi
 8011eac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011eb0:	3302      	addmi	r3, #2
 8011eb2:	f8c9 3000 	strmi.w	r3, [r9]
 8011eb6:	6825      	ldr	r5, [r4, #0]
 8011eb8:	f015 0506 	ands.w	r5, r5, #6
 8011ebc:	d107      	bne.n	8011ece <_printf_common+0x52>
 8011ebe:	f104 0a19 	add.w	sl, r4, #25
 8011ec2:	68e3      	ldr	r3, [r4, #12]
 8011ec4:	f8d9 2000 	ldr.w	r2, [r9]
 8011ec8:	1a9b      	subs	r3, r3, r2
 8011eca:	42ab      	cmp	r3, r5
 8011ecc:	dc29      	bgt.n	8011f22 <_printf_common+0xa6>
 8011ece:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011ed2:	6822      	ldr	r2, [r4, #0]
 8011ed4:	3300      	adds	r3, #0
 8011ed6:	bf18      	it	ne
 8011ed8:	2301      	movne	r3, #1
 8011eda:	0692      	lsls	r2, r2, #26
 8011edc:	d42e      	bmi.n	8011f3c <_printf_common+0xc0>
 8011ede:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ee2:	4639      	mov	r1, r7
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	47c0      	blx	r8
 8011ee8:	3001      	adds	r0, #1
 8011eea:	d021      	beq.n	8011f30 <_printf_common+0xb4>
 8011eec:	6823      	ldr	r3, [r4, #0]
 8011eee:	68e5      	ldr	r5, [r4, #12]
 8011ef0:	f003 0306 	and.w	r3, r3, #6
 8011ef4:	2b04      	cmp	r3, #4
 8011ef6:	bf18      	it	ne
 8011ef8:	2500      	movne	r5, #0
 8011efa:	f8d9 2000 	ldr.w	r2, [r9]
 8011efe:	f04f 0900 	mov.w	r9, #0
 8011f02:	bf08      	it	eq
 8011f04:	1aad      	subeq	r5, r5, r2
 8011f06:	68a3      	ldr	r3, [r4, #8]
 8011f08:	6922      	ldr	r2, [r4, #16]
 8011f0a:	bf08      	it	eq
 8011f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f10:	4293      	cmp	r3, r2
 8011f12:	bfc4      	itt	gt
 8011f14:	1a9b      	subgt	r3, r3, r2
 8011f16:	18ed      	addgt	r5, r5, r3
 8011f18:	341a      	adds	r4, #26
 8011f1a:	454d      	cmp	r5, r9
 8011f1c:	d11a      	bne.n	8011f54 <_printf_common+0xd8>
 8011f1e:	2000      	movs	r0, #0
 8011f20:	e008      	b.n	8011f34 <_printf_common+0xb8>
 8011f22:	2301      	movs	r3, #1
 8011f24:	4652      	mov	r2, sl
 8011f26:	4639      	mov	r1, r7
 8011f28:	4630      	mov	r0, r6
 8011f2a:	47c0      	blx	r8
 8011f2c:	3001      	adds	r0, #1
 8011f2e:	d103      	bne.n	8011f38 <_printf_common+0xbc>
 8011f30:	f04f 30ff 	mov.w	r0, #4294967295
 8011f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f38:	3501      	adds	r5, #1
 8011f3a:	e7c2      	b.n	8011ec2 <_printf_common+0x46>
 8011f3c:	2030      	movs	r0, #48	; 0x30
 8011f3e:	18e1      	adds	r1, r4, r3
 8011f40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f44:	1c5a      	adds	r2, r3, #1
 8011f46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f4a:	4422      	add	r2, r4
 8011f4c:	3302      	adds	r3, #2
 8011f4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f52:	e7c4      	b.n	8011ede <_printf_common+0x62>
 8011f54:	2301      	movs	r3, #1
 8011f56:	4622      	mov	r2, r4
 8011f58:	4639      	mov	r1, r7
 8011f5a:	4630      	mov	r0, r6
 8011f5c:	47c0      	blx	r8
 8011f5e:	3001      	adds	r0, #1
 8011f60:	d0e6      	beq.n	8011f30 <_printf_common+0xb4>
 8011f62:	f109 0901 	add.w	r9, r9, #1
 8011f66:	e7d8      	b.n	8011f1a <_printf_common+0x9e>

08011f68 <_printf_i>:
 8011f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011f70:	460c      	mov	r4, r1
 8011f72:	7e09      	ldrb	r1, [r1, #24]
 8011f74:	b085      	sub	sp, #20
 8011f76:	296e      	cmp	r1, #110	; 0x6e
 8011f78:	4617      	mov	r7, r2
 8011f7a:	4606      	mov	r6, r0
 8011f7c:	4698      	mov	r8, r3
 8011f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f80:	f000 80b3 	beq.w	80120ea <_printf_i+0x182>
 8011f84:	d822      	bhi.n	8011fcc <_printf_i+0x64>
 8011f86:	2963      	cmp	r1, #99	; 0x63
 8011f88:	d036      	beq.n	8011ff8 <_printf_i+0x90>
 8011f8a:	d80a      	bhi.n	8011fa2 <_printf_i+0x3a>
 8011f8c:	2900      	cmp	r1, #0
 8011f8e:	f000 80b9 	beq.w	8012104 <_printf_i+0x19c>
 8011f92:	2958      	cmp	r1, #88	; 0x58
 8011f94:	f000 8083 	beq.w	801209e <_printf_i+0x136>
 8011f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011fa0:	e032      	b.n	8012008 <_printf_i+0xa0>
 8011fa2:	2964      	cmp	r1, #100	; 0x64
 8011fa4:	d001      	beq.n	8011faa <_printf_i+0x42>
 8011fa6:	2969      	cmp	r1, #105	; 0x69
 8011fa8:	d1f6      	bne.n	8011f98 <_printf_i+0x30>
 8011faa:	6820      	ldr	r0, [r4, #0]
 8011fac:	6813      	ldr	r3, [r2, #0]
 8011fae:	0605      	lsls	r5, r0, #24
 8011fb0:	f103 0104 	add.w	r1, r3, #4
 8011fb4:	d52a      	bpl.n	801200c <_printf_i+0xa4>
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	6011      	str	r1, [r2, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	da03      	bge.n	8011fc6 <_printf_i+0x5e>
 8011fbe:	222d      	movs	r2, #45	; 0x2d
 8011fc0:	425b      	negs	r3, r3
 8011fc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011fc6:	486f      	ldr	r0, [pc, #444]	; (8012184 <_printf_i+0x21c>)
 8011fc8:	220a      	movs	r2, #10
 8011fca:	e039      	b.n	8012040 <_printf_i+0xd8>
 8011fcc:	2973      	cmp	r1, #115	; 0x73
 8011fce:	f000 809d 	beq.w	801210c <_printf_i+0x1a4>
 8011fd2:	d808      	bhi.n	8011fe6 <_printf_i+0x7e>
 8011fd4:	296f      	cmp	r1, #111	; 0x6f
 8011fd6:	d020      	beq.n	801201a <_printf_i+0xb2>
 8011fd8:	2970      	cmp	r1, #112	; 0x70
 8011fda:	d1dd      	bne.n	8011f98 <_printf_i+0x30>
 8011fdc:	6823      	ldr	r3, [r4, #0]
 8011fde:	f043 0320 	orr.w	r3, r3, #32
 8011fe2:	6023      	str	r3, [r4, #0]
 8011fe4:	e003      	b.n	8011fee <_printf_i+0x86>
 8011fe6:	2975      	cmp	r1, #117	; 0x75
 8011fe8:	d017      	beq.n	801201a <_printf_i+0xb2>
 8011fea:	2978      	cmp	r1, #120	; 0x78
 8011fec:	d1d4      	bne.n	8011f98 <_printf_i+0x30>
 8011fee:	2378      	movs	r3, #120	; 0x78
 8011ff0:	4865      	ldr	r0, [pc, #404]	; (8012188 <_printf_i+0x220>)
 8011ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ff6:	e055      	b.n	80120a4 <_printf_i+0x13c>
 8011ff8:	6813      	ldr	r3, [r2, #0]
 8011ffa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ffe:	1d19      	adds	r1, r3, #4
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	6011      	str	r1, [r2, #0]
 8012004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012008:	2301      	movs	r3, #1
 801200a:	e08c      	b.n	8012126 <_printf_i+0x1be>
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012012:	6011      	str	r1, [r2, #0]
 8012014:	bf18      	it	ne
 8012016:	b21b      	sxthne	r3, r3
 8012018:	e7cf      	b.n	8011fba <_printf_i+0x52>
 801201a:	6813      	ldr	r3, [r2, #0]
 801201c:	6825      	ldr	r5, [r4, #0]
 801201e:	1d18      	adds	r0, r3, #4
 8012020:	6010      	str	r0, [r2, #0]
 8012022:	0628      	lsls	r0, r5, #24
 8012024:	d501      	bpl.n	801202a <_printf_i+0xc2>
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	e002      	b.n	8012030 <_printf_i+0xc8>
 801202a:	0668      	lsls	r0, r5, #25
 801202c:	d5fb      	bpl.n	8012026 <_printf_i+0xbe>
 801202e:	881b      	ldrh	r3, [r3, #0]
 8012030:	296f      	cmp	r1, #111	; 0x6f
 8012032:	bf14      	ite	ne
 8012034:	220a      	movne	r2, #10
 8012036:	2208      	moveq	r2, #8
 8012038:	4852      	ldr	r0, [pc, #328]	; (8012184 <_printf_i+0x21c>)
 801203a:	2100      	movs	r1, #0
 801203c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012040:	6865      	ldr	r5, [r4, #4]
 8012042:	2d00      	cmp	r5, #0
 8012044:	60a5      	str	r5, [r4, #8]
 8012046:	f2c0 8095 	blt.w	8012174 <_printf_i+0x20c>
 801204a:	6821      	ldr	r1, [r4, #0]
 801204c:	f021 0104 	bic.w	r1, r1, #4
 8012050:	6021      	str	r1, [r4, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d13d      	bne.n	80120d2 <_printf_i+0x16a>
 8012056:	2d00      	cmp	r5, #0
 8012058:	f040 808e 	bne.w	8012178 <_printf_i+0x210>
 801205c:	4665      	mov	r5, ip
 801205e:	2a08      	cmp	r2, #8
 8012060:	d10b      	bne.n	801207a <_printf_i+0x112>
 8012062:	6823      	ldr	r3, [r4, #0]
 8012064:	07db      	lsls	r3, r3, #31
 8012066:	d508      	bpl.n	801207a <_printf_i+0x112>
 8012068:	6923      	ldr	r3, [r4, #16]
 801206a:	6862      	ldr	r2, [r4, #4]
 801206c:	429a      	cmp	r2, r3
 801206e:	bfde      	ittt	le
 8012070:	2330      	movle	r3, #48	; 0x30
 8012072:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012076:	f105 35ff 	addle.w	r5, r5, #4294967295
 801207a:	ebac 0305 	sub.w	r3, ip, r5
 801207e:	6123      	str	r3, [r4, #16]
 8012080:	f8cd 8000 	str.w	r8, [sp]
 8012084:	463b      	mov	r3, r7
 8012086:	aa03      	add	r2, sp, #12
 8012088:	4621      	mov	r1, r4
 801208a:	4630      	mov	r0, r6
 801208c:	f7ff fef6 	bl	8011e7c <_printf_common>
 8012090:	3001      	adds	r0, #1
 8012092:	d14d      	bne.n	8012130 <_printf_i+0x1c8>
 8012094:	f04f 30ff 	mov.w	r0, #4294967295
 8012098:	b005      	add	sp, #20
 801209a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801209e:	4839      	ldr	r0, [pc, #228]	; (8012184 <_printf_i+0x21c>)
 80120a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80120a4:	6813      	ldr	r3, [r2, #0]
 80120a6:	6821      	ldr	r1, [r4, #0]
 80120a8:	1d1d      	adds	r5, r3, #4
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	6015      	str	r5, [r2, #0]
 80120ae:	060a      	lsls	r2, r1, #24
 80120b0:	d50b      	bpl.n	80120ca <_printf_i+0x162>
 80120b2:	07ca      	lsls	r2, r1, #31
 80120b4:	bf44      	itt	mi
 80120b6:	f041 0120 	orrmi.w	r1, r1, #32
 80120ba:	6021      	strmi	r1, [r4, #0]
 80120bc:	b91b      	cbnz	r3, 80120c6 <_printf_i+0x15e>
 80120be:	6822      	ldr	r2, [r4, #0]
 80120c0:	f022 0220 	bic.w	r2, r2, #32
 80120c4:	6022      	str	r2, [r4, #0]
 80120c6:	2210      	movs	r2, #16
 80120c8:	e7b7      	b.n	801203a <_printf_i+0xd2>
 80120ca:	064d      	lsls	r5, r1, #25
 80120cc:	bf48      	it	mi
 80120ce:	b29b      	uxthmi	r3, r3
 80120d0:	e7ef      	b.n	80120b2 <_printf_i+0x14a>
 80120d2:	4665      	mov	r5, ip
 80120d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80120d8:	fb02 3311 	mls	r3, r2, r1, r3
 80120dc:	5cc3      	ldrb	r3, [r0, r3]
 80120de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80120e2:	460b      	mov	r3, r1
 80120e4:	2900      	cmp	r1, #0
 80120e6:	d1f5      	bne.n	80120d4 <_printf_i+0x16c>
 80120e8:	e7b9      	b.n	801205e <_printf_i+0xf6>
 80120ea:	6813      	ldr	r3, [r2, #0]
 80120ec:	6825      	ldr	r5, [r4, #0]
 80120ee:	1d18      	adds	r0, r3, #4
 80120f0:	6961      	ldr	r1, [r4, #20]
 80120f2:	6010      	str	r0, [r2, #0]
 80120f4:	0628      	lsls	r0, r5, #24
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	d501      	bpl.n	80120fe <_printf_i+0x196>
 80120fa:	6019      	str	r1, [r3, #0]
 80120fc:	e002      	b.n	8012104 <_printf_i+0x19c>
 80120fe:	066a      	lsls	r2, r5, #25
 8012100:	d5fb      	bpl.n	80120fa <_printf_i+0x192>
 8012102:	8019      	strh	r1, [r3, #0]
 8012104:	2300      	movs	r3, #0
 8012106:	4665      	mov	r5, ip
 8012108:	6123      	str	r3, [r4, #16]
 801210a:	e7b9      	b.n	8012080 <_printf_i+0x118>
 801210c:	6813      	ldr	r3, [r2, #0]
 801210e:	1d19      	adds	r1, r3, #4
 8012110:	6011      	str	r1, [r2, #0]
 8012112:	681d      	ldr	r5, [r3, #0]
 8012114:	6862      	ldr	r2, [r4, #4]
 8012116:	2100      	movs	r1, #0
 8012118:	4628      	mov	r0, r5
 801211a:	f000 f90b 	bl	8012334 <memchr>
 801211e:	b108      	cbz	r0, 8012124 <_printf_i+0x1bc>
 8012120:	1b40      	subs	r0, r0, r5
 8012122:	6060      	str	r0, [r4, #4]
 8012124:	6863      	ldr	r3, [r4, #4]
 8012126:	6123      	str	r3, [r4, #16]
 8012128:	2300      	movs	r3, #0
 801212a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801212e:	e7a7      	b.n	8012080 <_printf_i+0x118>
 8012130:	6923      	ldr	r3, [r4, #16]
 8012132:	462a      	mov	r2, r5
 8012134:	4639      	mov	r1, r7
 8012136:	4630      	mov	r0, r6
 8012138:	47c0      	blx	r8
 801213a:	3001      	adds	r0, #1
 801213c:	d0aa      	beq.n	8012094 <_printf_i+0x12c>
 801213e:	6823      	ldr	r3, [r4, #0]
 8012140:	079b      	lsls	r3, r3, #30
 8012142:	d413      	bmi.n	801216c <_printf_i+0x204>
 8012144:	68e0      	ldr	r0, [r4, #12]
 8012146:	9b03      	ldr	r3, [sp, #12]
 8012148:	4298      	cmp	r0, r3
 801214a:	bfb8      	it	lt
 801214c:	4618      	movlt	r0, r3
 801214e:	e7a3      	b.n	8012098 <_printf_i+0x130>
 8012150:	2301      	movs	r3, #1
 8012152:	464a      	mov	r2, r9
 8012154:	4639      	mov	r1, r7
 8012156:	4630      	mov	r0, r6
 8012158:	47c0      	blx	r8
 801215a:	3001      	adds	r0, #1
 801215c:	d09a      	beq.n	8012094 <_printf_i+0x12c>
 801215e:	3501      	adds	r5, #1
 8012160:	68e3      	ldr	r3, [r4, #12]
 8012162:	9a03      	ldr	r2, [sp, #12]
 8012164:	1a9b      	subs	r3, r3, r2
 8012166:	42ab      	cmp	r3, r5
 8012168:	dcf2      	bgt.n	8012150 <_printf_i+0x1e8>
 801216a:	e7eb      	b.n	8012144 <_printf_i+0x1dc>
 801216c:	2500      	movs	r5, #0
 801216e:	f104 0919 	add.w	r9, r4, #25
 8012172:	e7f5      	b.n	8012160 <_printf_i+0x1f8>
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1ac      	bne.n	80120d2 <_printf_i+0x16a>
 8012178:	7803      	ldrb	r3, [r0, #0]
 801217a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801217e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012182:	e76c      	b.n	801205e <_printf_i+0xf6>
 8012184:	080128ad 	.word	0x080128ad
 8012188:	080128be 	.word	0x080128be

0801218c <_sbrk_r>:
 801218c:	b538      	push	{r3, r4, r5, lr}
 801218e:	2300      	movs	r3, #0
 8012190:	4c05      	ldr	r4, [pc, #20]	; (80121a8 <_sbrk_r+0x1c>)
 8012192:	4605      	mov	r5, r0
 8012194:	4608      	mov	r0, r1
 8012196:	6023      	str	r3, [r4, #0]
 8012198:	f7f4 f824 	bl	80061e4 <_sbrk>
 801219c:	1c43      	adds	r3, r0, #1
 801219e:	d102      	bne.n	80121a6 <_sbrk_r+0x1a>
 80121a0:	6823      	ldr	r3, [r4, #0]
 80121a2:	b103      	cbz	r3, 80121a6 <_sbrk_r+0x1a>
 80121a4:	602b      	str	r3, [r5, #0]
 80121a6:	bd38      	pop	{r3, r4, r5, pc}
 80121a8:	20003ed8 	.word	0x20003ed8

080121ac <nanf>:
 80121ac:	4800      	ldr	r0, [pc, #0]	; (80121b0 <nanf+0x4>)
 80121ae:	4770      	bx	lr
 80121b0:	7fc00000 	.word	0x7fc00000

080121b4 <__sread>:
 80121b4:	b510      	push	{r4, lr}
 80121b6:	460c      	mov	r4, r1
 80121b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121bc:	f000 f90a 	bl	80123d4 <_read_r>
 80121c0:	2800      	cmp	r0, #0
 80121c2:	bfab      	itete	ge
 80121c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80121c6:	89a3      	ldrhlt	r3, [r4, #12]
 80121c8:	181b      	addge	r3, r3, r0
 80121ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80121ce:	bfac      	ite	ge
 80121d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80121d2:	81a3      	strhlt	r3, [r4, #12]
 80121d4:	bd10      	pop	{r4, pc}

080121d6 <__swrite>:
 80121d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121da:	461f      	mov	r7, r3
 80121dc:	898b      	ldrh	r3, [r1, #12]
 80121de:	4605      	mov	r5, r0
 80121e0:	05db      	lsls	r3, r3, #23
 80121e2:	460c      	mov	r4, r1
 80121e4:	4616      	mov	r6, r2
 80121e6:	d505      	bpl.n	80121f4 <__swrite+0x1e>
 80121e8:	2302      	movs	r3, #2
 80121ea:	2200      	movs	r2, #0
 80121ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121f0:	f000 f886 	bl	8012300 <_lseek_r>
 80121f4:	89a3      	ldrh	r3, [r4, #12]
 80121f6:	4632      	mov	r2, r6
 80121f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80121fc:	81a3      	strh	r3, [r4, #12]
 80121fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012202:	463b      	mov	r3, r7
 8012204:	4628      	mov	r0, r5
 8012206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801220a:	f000 b835 	b.w	8012278 <_write_r>

0801220e <__sseek>:
 801220e:	b510      	push	{r4, lr}
 8012210:	460c      	mov	r4, r1
 8012212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012216:	f000 f873 	bl	8012300 <_lseek_r>
 801221a:	1c43      	adds	r3, r0, #1
 801221c:	89a3      	ldrh	r3, [r4, #12]
 801221e:	bf15      	itete	ne
 8012220:	6560      	strne	r0, [r4, #84]	; 0x54
 8012222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801222a:	81a3      	strheq	r3, [r4, #12]
 801222c:	bf18      	it	ne
 801222e:	81a3      	strhne	r3, [r4, #12]
 8012230:	bd10      	pop	{r4, pc}

08012232 <__sclose>:
 8012232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012236:	f000 b831 	b.w	801229c <_close_r>

0801223a <strncmp>:
 801223a:	b510      	push	{r4, lr}
 801223c:	b16a      	cbz	r2, 801225a <strncmp+0x20>
 801223e:	3901      	subs	r1, #1
 8012240:	1884      	adds	r4, r0, r2
 8012242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012246:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801224a:	4293      	cmp	r3, r2
 801224c:	d103      	bne.n	8012256 <strncmp+0x1c>
 801224e:	42a0      	cmp	r0, r4
 8012250:	d001      	beq.n	8012256 <strncmp+0x1c>
 8012252:	2b00      	cmp	r3, #0
 8012254:	d1f5      	bne.n	8012242 <strncmp+0x8>
 8012256:	1a98      	subs	r0, r3, r2
 8012258:	bd10      	pop	{r4, pc}
 801225a:	4610      	mov	r0, r2
 801225c:	e7fc      	b.n	8012258 <strncmp+0x1e>

0801225e <__ascii_wctomb>:
 801225e:	b149      	cbz	r1, 8012274 <__ascii_wctomb+0x16>
 8012260:	2aff      	cmp	r2, #255	; 0xff
 8012262:	bf8b      	itete	hi
 8012264:	238a      	movhi	r3, #138	; 0x8a
 8012266:	700a      	strbls	r2, [r1, #0]
 8012268:	6003      	strhi	r3, [r0, #0]
 801226a:	2001      	movls	r0, #1
 801226c:	bf88      	it	hi
 801226e:	f04f 30ff 	movhi.w	r0, #4294967295
 8012272:	4770      	bx	lr
 8012274:	4608      	mov	r0, r1
 8012276:	4770      	bx	lr

08012278 <_write_r>:
 8012278:	b538      	push	{r3, r4, r5, lr}
 801227a:	4605      	mov	r5, r0
 801227c:	4608      	mov	r0, r1
 801227e:	4611      	mov	r1, r2
 8012280:	2200      	movs	r2, #0
 8012282:	4c05      	ldr	r4, [pc, #20]	; (8012298 <_write_r+0x20>)
 8012284:	6022      	str	r2, [r4, #0]
 8012286:	461a      	mov	r2, r3
 8012288:	f7f3 ff5f 	bl	800614a <_write>
 801228c:	1c43      	adds	r3, r0, #1
 801228e:	d102      	bne.n	8012296 <_write_r+0x1e>
 8012290:	6823      	ldr	r3, [r4, #0]
 8012292:	b103      	cbz	r3, 8012296 <_write_r+0x1e>
 8012294:	602b      	str	r3, [r5, #0]
 8012296:	bd38      	pop	{r3, r4, r5, pc}
 8012298:	20003ed8 	.word	0x20003ed8

0801229c <_close_r>:
 801229c:	b538      	push	{r3, r4, r5, lr}
 801229e:	2300      	movs	r3, #0
 80122a0:	4c05      	ldr	r4, [pc, #20]	; (80122b8 <_close_r+0x1c>)
 80122a2:	4605      	mov	r5, r0
 80122a4:	4608      	mov	r0, r1
 80122a6:	6023      	str	r3, [r4, #0]
 80122a8:	f7f3 ff6b 	bl	8006182 <_close>
 80122ac:	1c43      	adds	r3, r0, #1
 80122ae:	d102      	bne.n	80122b6 <_close_r+0x1a>
 80122b0:	6823      	ldr	r3, [r4, #0]
 80122b2:	b103      	cbz	r3, 80122b6 <_close_r+0x1a>
 80122b4:	602b      	str	r3, [r5, #0]
 80122b6:	bd38      	pop	{r3, r4, r5, pc}
 80122b8:	20003ed8 	.word	0x20003ed8

080122bc <_fstat_r>:
 80122bc:	b538      	push	{r3, r4, r5, lr}
 80122be:	2300      	movs	r3, #0
 80122c0:	4c06      	ldr	r4, [pc, #24]	; (80122dc <_fstat_r+0x20>)
 80122c2:	4605      	mov	r5, r0
 80122c4:	4608      	mov	r0, r1
 80122c6:	4611      	mov	r1, r2
 80122c8:	6023      	str	r3, [r4, #0]
 80122ca:	f7f3 ff65 	bl	8006198 <_fstat>
 80122ce:	1c43      	adds	r3, r0, #1
 80122d0:	d102      	bne.n	80122d8 <_fstat_r+0x1c>
 80122d2:	6823      	ldr	r3, [r4, #0]
 80122d4:	b103      	cbz	r3, 80122d8 <_fstat_r+0x1c>
 80122d6:	602b      	str	r3, [r5, #0]
 80122d8:	bd38      	pop	{r3, r4, r5, pc}
 80122da:	bf00      	nop
 80122dc:	20003ed8 	.word	0x20003ed8

080122e0 <_isatty_r>:
 80122e0:	b538      	push	{r3, r4, r5, lr}
 80122e2:	2300      	movs	r3, #0
 80122e4:	4c05      	ldr	r4, [pc, #20]	; (80122fc <_isatty_r+0x1c>)
 80122e6:	4605      	mov	r5, r0
 80122e8:	4608      	mov	r0, r1
 80122ea:	6023      	str	r3, [r4, #0]
 80122ec:	f7f3 ff63 	bl	80061b6 <_isatty>
 80122f0:	1c43      	adds	r3, r0, #1
 80122f2:	d102      	bne.n	80122fa <_isatty_r+0x1a>
 80122f4:	6823      	ldr	r3, [r4, #0]
 80122f6:	b103      	cbz	r3, 80122fa <_isatty_r+0x1a>
 80122f8:	602b      	str	r3, [r5, #0]
 80122fa:	bd38      	pop	{r3, r4, r5, pc}
 80122fc:	20003ed8 	.word	0x20003ed8

08012300 <_lseek_r>:
 8012300:	b538      	push	{r3, r4, r5, lr}
 8012302:	4605      	mov	r5, r0
 8012304:	4608      	mov	r0, r1
 8012306:	4611      	mov	r1, r2
 8012308:	2200      	movs	r2, #0
 801230a:	4c05      	ldr	r4, [pc, #20]	; (8012320 <_lseek_r+0x20>)
 801230c:	6022      	str	r2, [r4, #0]
 801230e:	461a      	mov	r2, r3
 8012310:	f7f3 ff5b 	bl	80061ca <_lseek>
 8012314:	1c43      	adds	r3, r0, #1
 8012316:	d102      	bne.n	801231e <_lseek_r+0x1e>
 8012318:	6823      	ldr	r3, [r4, #0]
 801231a:	b103      	cbz	r3, 801231e <_lseek_r+0x1e>
 801231c:	602b      	str	r3, [r5, #0]
 801231e:	bd38      	pop	{r3, r4, r5, pc}
 8012320:	20003ed8 	.word	0x20003ed8

08012324 <malloc>:
 8012324:	4b02      	ldr	r3, [pc, #8]	; (8012330 <malloc+0xc>)
 8012326:	4601      	mov	r1, r0
 8012328:	6818      	ldr	r0, [r3, #0]
 801232a:	f7ff bbfb 	b.w	8011b24 <_malloc_r>
 801232e:	bf00      	nop
 8012330:	200001a8 	.word	0x200001a8

08012334 <memchr>:
 8012334:	b510      	push	{r4, lr}
 8012336:	b2c9      	uxtb	r1, r1
 8012338:	4402      	add	r2, r0
 801233a:	4290      	cmp	r0, r2
 801233c:	4603      	mov	r3, r0
 801233e:	d101      	bne.n	8012344 <memchr+0x10>
 8012340:	2300      	movs	r3, #0
 8012342:	e003      	b.n	801234c <memchr+0x18>
 8012344:	781c      	ldrb	r4, [r3, #0]
 8012346:	3001      	adds	r0, #1
 8012348:	428c      	cmp	r4, r1
 801234a:	d1f6      	bne.n	801233a <memchr+0x6>
 801234c:	4618      	mov	r0, r3
 801234e:	bd10      	pop	{r4, pc}

08012350 <memmove>:
 8012350:	4288      	cmp	r0, r1
 8012352:	b510      	push	{r4, lr}
 8012354:	eb01 0302 	add.w	r3, r1, r2
 8012358:	d807      	bhi.n	801236a <memmove+0x1a>
 801235a:	1e42      	subs	r2, r0, #1
 801235c:	4299      	cmp	r1, r3
 801235e:	d00a      	beq.n	8012376 <memmove+0x26>
 8012360:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012364:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012368:	e7f8      	b.n	801235c <memmove+0xc>
 801236a:	4283      	cmp	r3, r0
 801236c:	d9f5      	bls.n	801235a <memmove+0xa>
 801236e:	1881      	adds	r1, r0, r2
 8012370:	1ad2      	subs	r2, r2, r3
 8012372:	42d3      	cmn	r3, r2
 8012374:	d100      	bne.n	8012378 <memmove+0x28>
 8012376:	bd10      	pop	{r4, pc}
 8012378:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801237c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012380:	e7f7      	b.n	8012372 <memmove+0x22>

08012382 <__malloc_lock>:
 8012382:	4770      	bx	lr

08012384 <__malloc_unlock>:
 8012384:	4770      	bx	lr

08012386 <_realloc_r>:
 8012386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012388:	4607      	mov	r7, r0
 801238a:	4614      	mov	r4, r2
 801238c:	460e      	mov	r6, r1
 801238e:	b921      	cbnz	r1, 801239a <_realloc_r+0x14>
 8012390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012394:	4611      	mov	r1, r2
 8012396:	f7ff bbc5 	b.w	8011b24 <_malloc_r>
 801239a:	b922      	cbnz	r2, 80123a6 <_realloc_r+0x20>
 801239c:	f7ff fb76 	bl	8011a8c <_free_r>
 80123a0:	4625      	mov	r5, r4
 80123a2:	4628      	mov	r0, r5
 80123a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123a6:	f000 f827 	bl	80123f8 <_malloc_usable_size_r>
 80123aa:	42a0      	cmp	r0, r4
 80123ac:	d20f      	bcs.n	80123ce <_realloc_r+0x48>
 80123ae:	4621      	mov	r1, r4
 80123b0:	4638      	mov	r0, r7
 80123b2:	f7ff fbb7 	bl	8011b24 <_malloc_r>
 80123b6:	4605      	mov	r5, r0
 80123b8:	2800      	cmp	r0, #0
 80123ba:	d0f2      	beq.n	80123a2 <_realloc_r+0x1c>
 80123bc:	4631      	mov	r1, r6
 80123be:	4622      	mov	r2, r4
 80123c0:	f7fd f996 	bl	800f6f0 <memcpy>
 80123c4:	4631      	mov	r1, r6
 80123c6:	4638      	mov	r0, r7
 80123c8:	f7ff fb60 	bl	8011a8c <_free_r>
 80123cc:	e7e9      	b.n	80123a2 <_realloc_r+0x1c>
 80123ce:	4635      	mov	r5, r6
 80123d0:	e7e7      	b.n	80123a2 <_realloc_r+0x1c>
	...

080123d4 <_read_r>:
 80123d4:	b538      	push	{r3, r4, r5, lr}
 80123d6:	4605      	mov	r5, r0
 80123d8:	4608      	mov	r0, r1
 80123da:	4611      	mov	r1, r2
 80123dc:	2200      	movs	r2, #0
 80123de:	4c05      	ldr	r4, [pc, #20]	; (80123f4 <_read_r+0x20>)
 80123e0:	6022      	str	r2, [r4, #0]
 80123e2:	461a      	mov	r2, r3
 80123e4:	f7f3 fe94 	bl	8006110 <_read>
 80123e8:	1c43      	adds	r3, r0, #1
 80123ea:	d102      	bne.n	80123f2 <_read_r+0x1e>
 80123ec:	6823      	ldr	r3, [r4, #0]
 80123ee:	b103      	cbz	r3, 80123f2 <_read_r+0x1e>
 80123f0:	602b      	str	r3, [r5, #0]
 80123f2:	bd38      	pop	{r3, r4, r5, pc}
 80123f4:	20003ed8 	.word	0x20003ed8

080123f8 <_malloc_usable_size_r>:
 80123f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123fc:	1f18      	subs	r0, r3, #4
 80123fe:	2b00      	cmp	r3, #0
 8012400:	bfbc      	itt	lt
 8012402:	580b      	ldrlt	r3, [r1, r0]
 8012404:	18c0      	addlt	r0, r0, r3
 8012406:	4770      	bx	lr

08012408 <_init>:
 8012408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801240a:	bf00      	nop
 801240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801240e:	bc08      	pop	{r3}
 8012410:	469e      	mov	lr, r3
 8012412:	4770      	bx	lr

08012414 <_fini>:
 8012414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012416:	bf00      	nop
 8012418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801241a:	bc08      	pop	{r3}
 801241c:	469e      	mov	lr, r3
 801241e:	4770      	bx	lr
