
09_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a90  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d54  08007d54  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  08007d54  08007d54  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d54  08007d54  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d54  08007d54  00017d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d58  08007d58  00017d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08007d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001670  20000204  08007f60  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001874  08007f60  00021874  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b5d  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f2f  00000000  00000000  00041d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  00046cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  00047da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c6a1  00000000  00000000  00048c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018d59  00000000  00000000  000652f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007df24  00000000  00000000  0007e052  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fbf76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e8  00000000  00000000  000fbff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000204 	.word	0x20000204
 8000200:	00000000 	.word	0x00000000
 8000204:	08007c5c 	.word	0x08007c5c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000208 	.word	0x20000208
 8000220:	08007c5c 	.word	0x08007c5c

08000224 <apInit>:
extern uint8_t cdcRead(void);
extern void cdcDataIn(uint8_t rx_data);
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);

void apInit(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 57600);  // USB
 8000228:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800022c:	2000      	movs	r0, #0
 800022e:	f000 fbbb 	bl	80009a8 <uartOpen>
  uartOpen(_DEF_UART2, 57600);
 8000232:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000236:	2001      	movs	r0, #1
 8000238:	f000 fbb6 	bl	80009a8 <uartOpen>
}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}

08000240 <apMain>:

void apMain(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8000246:	f000 f84c 	bl	80002e2 <millis>
 800024a:	6078      	str	r0, [r7, #4]

  while(1)
  {
    if(millis()-pre_time >= 500)
 800024c:	f000 f849 	bl	80002e2 <millis>
 8000250:	4602      	mov	r2, r0
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800025a:	d305      	bcc.n	8000268 <apMain+0x28>
    {
      pre_time = millis();
 800025c:	f000 f841 	bl	80002e2 <millis>
 8000260:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED3);
 8000262:	2002      	movs	r0, #2
 8000264:	f000 faca 	bl	80007fc <ledToggle>

      //uartPrintf(_DEF_UART2, "Uart1 %d \n", millis());
    }

    if(uartAvailable(_DEF_UART1) > 0)
 8000268:	2000      	movs	r0, #0
 800026a:	f000 fc31 	bl	8000ad0 <uartAvailable>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d00a      	beq.n	800028a <apMain+0x4a>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 8000274:	2000      	movs	r0, #0
 8000276:	f000 fc5d 	bl	8000b34 <uartRead>
 800027a:	4603      	mov	r3, r0
 800027c:	70fb      	strb	r3, [r7, #3]
      uartPrintf(_DEF_UART1, "USB Rx %c %X \n", rx_data, rx_data);
 800027e:	78fa      	ldrb	r2, [r7, #3]
 8000280:	78fb      	ldrb	r3, [r7, #3]
 8000282:	490b      	ldr	r1, [pc, #44]	; (80002b0 <apMain+0x70>)
 8000284:	2000      	movs	r0, #0
 8000286:	f000 fca3 	bl	8000bd0 <uartPrintf>
    }

    if(uartAvailable(_DEF_UART2) > 0)
 800028a:	2001      	movs	r0, #1
 800028c:	f000 fc20 	bl	8000ad0 <uartAvailable>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0da      	beq.n	800024c <apMain+0xc>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART2);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 fc4c 	bl	8000b34 <uartRead>
 800029c:	4603      	mov	r3, r0
 800029e:	70bb      	strb	r3, [r7, #2]
      uartPrintf(_DEF_UART2, "Uart1 Rx %c %X \n", rx_data, rx_data);
 80002a0:	78ba      	ldrb	r2, [r7, #2]
 80002a2:	78bb      	ldrb	r3, [r7, #2]
 80002a4:	4903      	ldr	r1, [pc, #12]	; (80002b4 <apMain+0x74>)
 80002a6:	2001      	movs	r0, #1
 80002a8:	f000 fc92 	bl	8000bd0 <uartPrintf>
    if(millis()-pre_time >= 500)
 80002ac:	e7ce      	b.n	800024c <apMain+0xc>
 80002ae:	bf00      	nop
 80002b0:	08007c74 	.word	0x08007c74
 80002b4:	08007c84 	.word	0x08007c84

080002b8 <bspInit>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


void bspInit(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  HAL_Init();
 80002bc:	f000 fd80 	bl	8000dc0 <HAL_Init>

  SystemClock_Config();
 80002c0:	f000 f816 	bl	80002f0 <SystemClock_Config>

  MX_GPIO_Init();
 80002c4:	f000 f876 	bl	80003b4 <MX_GPIO_Init>

}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}

080002cc <delay>:

void delay(uint32_t ms)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f000 fdd5 	bl	8000e84 <HAL_Delay>
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <millis>:

uint32_t millis(void)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80002e6:	f000 fdc3 	bl	8000e70 <HAL_GetTick>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b096      	sub	sp, #88	; 0x58
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002fa:	2228      	movs	r2, #40	; 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f007 f878 	bl	80073f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	f107 031c 	add.w	r3, r7, #28
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]
 8000322:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000324:	2305      	movs	r3, #5
 8000326:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000332:	2301      	movs	r3, #1
 8000334:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	2301      	movs	r3, #1
 8000338:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033a:	2302      	movs	r3, #2
 800033c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000342:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000344:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000348:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800034e:	4618      	mov	r0, r3
 8000350:	f002 fc02 	bl	8002b58 <HAL_RCC_OscConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800035a:	f000 f86b 	bl	8000434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	230f      	movs	r3, #15
 8000360:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000362:	2302      	movs	r3, #2
 8000364:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800036a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800036e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000374:	f107 031c 	add.w	r3, r7, #28
 8000378:	2102      	movs	r1, #2
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fe50 	bl	8003020 <HAL_RCC_ClockConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000386:	f000 f855 	bl	8000434 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800038a:	2311      	movs	r3, #17
 800038c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800038e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000392:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fffe 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003a6:	f000 f845 	bl	8000434 <Error_Handler>
  }
}
 80003aa:	bf00      	nop
 80003ac:	3758      	adds	r7, #88	; 0x58
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_GPIO_Init+0x78>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a17      	ldr	r2, [pc, #92]	; (800042c <MX_GPIO_Init+0x78>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_GPIO_Init+0x78>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_GPIO_Init+0x78>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <MX_GPIO_Init+0x78>)
 80003e6:	f043 0304 	orr.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_GPIO_Init+0x78>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	603b      	str	r3, [r7, #0]
 80003f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80003fe:	480c      	ldr	r0, [pc, #48]	; (8000430 <MX_GPIO_Init+0x7c>)
 8000400:	f001 fc22 	bl	8001c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8000404:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000408:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2302      	movs	r3, #2
 8000414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000416:	f107 0308 	add.w	r3, r7, #8
 800041a:	4619      	mov	r1, r3
 800041c:	4804      	ldr	r0, [pc, #16]	; (8000430 <MX_GPIO_Init+0x7c>)
 800041e:	f001 faa5 	bl	800196c <HAL_GPIO_Init>
}
 8000422:	bf00      	nop
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	40010c00 	.word	0x40010c00

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <HAL_MspInit+0x5c>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_MspInit+0x5c>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <HAL_MspInit+0x60>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <HAL_MspInit+0x60>)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010000 	.word	0x40010000

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <HardFault_Handler+0x4>

080004b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <MemManage_Handler+0x4>

080004bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <BusFault_Handler+0x4>

080004c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <UsageFault_Handler+0x4>

080004c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f0:	f000 fcac 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <DMA1_Channel5_IRQHandler+0x10>)
 80004fe:	f000 ffcb 	bl	8001498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000594 	.word	0x20000594

0800050c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000512:	f001 fcc2 	bl	8001e9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20001410 	.word	0x20001410

08000520 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <USART1_IRQHandler+0x10>)
 8000526:	f003 fb89 	bl	8003c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200005d8 	.word	0x200005d8

08000534 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <_sbrk+0x50>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <_sbrk+0x16>
		heap_end = &end;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <_sbrk+0x50>)
 8000546:	4a10      	ldr	r2, [pc, #64]	; (8000588 <_sbrk+0x54>)
 8000548:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <_sbrk+0x50>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <_sbrk+0x50>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	466a      	mov	r2, sp
 800055a:	4293      	cmp	r3, r2
 800055c:	d907      	bls.n	800056e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800055e:	f006 ff1f 	bl	80073a0 <__errno>
 8000562:	4602      	mov	r2, r0
 8000564:	230c      	movs	r3, #12
 8000566:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000568:	f04f 33ff 	mov.w	r3, #4294967295
 800056c:	e006      	b.n	800057c <_sbrk+0x48>
	}

	heap_end += incr;
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <_sbrk+0x50>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	4a03      	ldr	r2, [pc, #12]	; (8000584 <_sbrk+0x50>)
 8000578:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000220 	.word	0x20000220
 8000588:	20001878 	.word	0x20001878

0800058c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <SystemInit+0x5c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <SystemInit+0x5c>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <SystemInit+0x5c>)
 800059e:	685a      	ldr	r2, [r3, #4]
 80005a0:	4911      	ldr	r1, [pc, #68]	; (80005e8 <SystemInit+0x5c>)
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <SystemInit+0x60>)
 80005a4:	4013      	ands	r3, r2
 80005a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <SystemInit+0x5c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <SystemInit+0x5c>)
 80005ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <SystemInit+0x5c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <SystemInit+0x5c>)
 80005be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <SystemInit+0x5c>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <SystemInit+0x5c>)
 80005ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <SystemInit+0x5c>)
 80005d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <SystemInit+0x64>)
 80005da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005de:	609a      	str	r2, [r3, #8]
#endif 
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000
 80005ec:	f8ff0000 	.word	0xf8ff0000
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005f6:	e003      	b.n	8000600 <LoopCopyDataInit>

080005f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005fe:	3104      	adds	r1, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000600:	480a      	ldr	r0, [pc, #40]	; (800062c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000604:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000606:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000608:	d3f6      	bcc.n	80005f8 <CopyDataInit>
  ldr r2, =_sbss
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800060c:	e002      	b.n	8000614 <LoopFillZerobss>

0800060e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000610:	f842 3b04 	str.w	r3, [r2], #4

08000614 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000616:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000618:	d3f9      	bcc.n	800060e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800061a:	f7ff ffb7 	bl	800058c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800061e:	f006 fec5 	bl	80073ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f006 feb1 	bl	8007388 <main>
  bx lr
 8000626:	4770      	bx	lr
  ldr r3, =_sidata
 8000628:	08007d5c 	.word	0x08007d5c
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000630:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 8000634:	20000204 	.word	0x20000204
  ldr r3, = _ebss
 8000638:	20001874 	.word	0x20001874

0800063c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC1_2_IRQHandler>

0800063e <qbufferCreate>:
#include "qbuffer.h"



bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800063e:	b480      	push	{r7}
 8000640:	b087      	sub	sp, #28
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
  bool ret    = true;
 800064a:	2301      	movs	r3, #1
 800064c:	75fb      	strb	r3, [r7, #23]

  p_node->in  = 0;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	60da      	str	r2, [r3, #12]
    p_node->len = 0;
    p_node->p_buf = NULL;
    ret = false;
  }
#endif
  return ret;
 8000666:	7dfb      	ldrb	r3, [r7, #23]
}
 8000668:	4618      	mov	r0, r3
 800066a:	371c      	adds	r7, #28
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000672:	b480      	push	{r7}
 8000674:	b087      	sub	sp, #28
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800067e:	2301      	movs	r3, #1
 8000680:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	e026      	b.n	80006d6 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d009      	beq.n	80006a4 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	68da      	ldr	r2, [r3, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	441a      	add	r2, r3
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	440b      	add	r3, r1
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d00c      	beq.n	80006ca <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	3301      	adds	r3, #1
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	6892      	ldr	r2, [r2, #8]
 80006ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80006be:	fb02 f201 	mul.w	r2, r2, r1
 80006c2:	1a9a      	subs	r2, r3, r2
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	e002      	b.n	80006d0 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75fb      	strb	r3, [r7, #23]
      break;
 80006ce:	e006      	b.n	80006de <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	3301      	adds	r3, #1
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d8d4      	bhi.n	8000688 <qbufferRead+0x16>
    }
  }

  return ret;
 80006de:	7dfb      	ldrb	r3, [r7, #23]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	371c      	adds	r7, #28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b085      	sub	sp, #20
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;  // + p_node->len **
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	441a      	add	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	6892      	ldr	r2, [r2, #8]
 8000706:	fbb3 f1f2 	udiv	r1, r3, r2
 800070a:	fb02 f201 	mul.w	r2, r2, r1
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	60fb      	str	r3, [r7, #12]

  return ret;
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
	...

08000720 <ledInit>:
		{GPIOB, GPIO_PIN_14, GPIO_PIN_SET, GPIO_PIN_RESET},
		{GPIOB, GPIO_PIN_15, GPIO_PIN_SET, GPIO_PIN_RESET},
};

void ledInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#endif
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <ledInit+0x94>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <ledInit+0x94>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <ledInit+0x94>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0308 	and.w	r3, r3, #8
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <ledInit+0x94>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <ledInit+0x94>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <ledInit+0x94>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  //GPIO_InitStruct.Pin = LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2302      	movs	r3, #2
 800076e:	61bb      	str	r3, [r7, #24]
  //HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
  for( int i=0; i<LED_MAX_CH; i++)
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
 8000774:	e017      	b.n	80007a6 <ledInit+0x86>
  {
  	GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000776:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <ledInit+0x98>)
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	4413      	add	r3, r2
 800077e:	889b      	ldrh	r3, [r3, #4]
 8000780:	60fb      	str	r3, [r7, #12]
  	HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000782:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <ledInit+0x98>)
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800078a:	f107 020c 	add.w	r2, r7, #12
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f001 f8eb 	bl	800196c <HAL_GPIO_Init>

  	ledOff(i);
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f80e 	bl	80007bc <ledOff>
  for( int i=0; i<LED_MAX_CH; i++)
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	3301      	adds	r3, #1
 80007a4:	61fb      	str	r3, [r7, #28]
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	dde4      	ble.n	8000776 <ledInit+0x56>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	20000004 	.word	0x20000004

080007bc <ledOff>:
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d811      	bhi.n	80007f0 <ledOff+0x34>
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <ledOff+0x3c>)
 80007d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <ledOff+0x3c>)
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	4413      	add	r3, r2
 80007dc:	8899      	ldrh	r1, [r3, #4]
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <ledOff+0x3c>)
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4413      	add	r3, r2
 80007e6:	79db      	ldrb	r3, [r3, #7]
 80007e8:	461a      	mov	r2, r3
 80007ea:	f001 fa2d 	bl	8001c48 <HAL_GPIO_WritePin>
 80007ee:	e000      	b.n	80007f2 <ledOff+0x36>
	if(ch >= LED_MAX_CH) return;
 80007f0:	bf00      	nop
}
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000004 	.word	0x20000004

080007fc <ledToggle>:

void ledToggle(uint8_t ch)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH) return;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b03      	cmp	r3, #3
 800080a:	d80c      	bhi.n	8000826 <ledToggle+0x2a>
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <ledToggle+0x34>)
 8000810:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4a06      	ldr	r2, [pc, #24]	; (8000830 <ledToggle+0x34>)
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	4413      	add	r3, r2
 800081c:	889b      	ldrh	r3, [r3, #4]
 800081e:	4619      	mov	r1, r3
 8000820:	f001 fa2a 	bl	8001c78 <HAL_GPIO_TogglePin>
 8000824:	e000      	b.n	8000828 <ledToggle+0x2c>
	if(ch >= LED_MAX_CH) return;
 8000826:	bf00      	nop
}
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000004 	.word	0x20000004

08000834 <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  bool ret = true;
 800083a:	2301      	movs	r3, #1
 800083c:	71fb      	strb	r3, [r7, #7]

  /* if reset pin on */
  if(RCC->CSR & (1<<26))
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <resetInit+0x50>)
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d012      	beq.n	8000870 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 800084a:	2001      	movs	r0, #1
 800084c:	f000 f84e 	bl	80008ec <rtcBackupRegRead>
 8000850:	4603      	mov	r3, r0
 8000852:	3301      	adds	r3, #1
 8000854:	4619      	mov	r1, r3
 8000856:	2001      	movs	r0, #1
 8000858:	f000 f858 	bl	800090c <rtcBackupRegWrite>
    delay(500);
 800085c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000860:	f7ff fd34 	bl	80002cc <delay>
    reset_count = rtcBackupRegRead(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f000 f841 	bl	80008ec <rtcBackupRegRead>
 800086a:	4602      	mov	r2, r0
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <resetInit+0x54>)
 800086e:	601a      	str	r2, [r3, #0]
  }

  rtcBackupRegWrite(1, 0);
 8000870:	2100      	movs	r1, #0
 8000872:	2001      	movs	r0, #1
 8000874:	f000 f84a 	bl	800090c <rtcBackupRegWrite>

  return ret;
 8000878:	79fb      	ldrb	r3, [r7, #7]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000
 8000888:	20000224 	.word	0x20000224

0800088c <rtcInit>:


RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  bool ret = true;
 8000892:	2301      	movs	r3, #1
 8000894:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <rtcInit+0x54>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <rtcInit+0x54>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <rtcInit+0x54>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /** Initialize RTC Only */
  hrtc.Instance           = RTC;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <rtcInit+0x58>)
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <rtcInit+0x5c>)
 80008b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv  = RTC_AUTO_1_SECOND;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <rtcInit+0x58>)
 80008b6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut        = RTC_OUTPUTSOURCE_ALARM;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <rtcInit+0x58>)
 80008be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <rtcInit+0x58>)
 80008c6:	f002 ff09 	bl	80036dc <HAL_RTC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <rtcInit+0x48>
  {
    Error_Handler();
 80008d0:	f7ff fdb0 	bl	8000434 <Error_Handler>
  }

  return ret;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000
 80008e4:	20000580 	.word	0x20000580
 80008e8:	40002800 	.word	0x40002800

080008ec <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	4804      	ldr	r0, [pc, #16]	; (8000908 <rtcBackupRegRead+0x1c>)
 80008f8:	f003 f81e 	bl	8003938 <HAL_RTCEx_BKUPRead>
 80008fc:	4603      	mov	r3, r0

}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000580 	.word	0x20000580

0800090c <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <rtcBackupRegWrite+0x1c>)
 800091c:	f002 fff2 	bl	8003904 <HAL_RTCEx_BKUPWrite>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000580 	.word	0x20000580

0800092c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <HAL_RTC_MspInit+0x3c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d110      	bne.n	8000960 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800093e:	f002 f8ff 	bl	8002b40 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_RTC_MspInit+0x40>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a09      	ldr	r2, [pc, #36]	; (800096c <HAL_RTC_MspInit+0x40>)
 8000948:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <HAL_RTC_MspInit+0x40>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_RTC_MspInit+0x44>)
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40002800 	.word	0x40002800
 800096c:	40021000 	.word	0x40021000
 8000970:	4242043c 	.word	0x4242043c

08000974 <uartInit>:
DMA_HandleTypeDef  hdma_usart1_rx;



bool uartInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	e007      	b.n	8000990 <uartInit+0x1c>
  {
    is_open[i] = false;
 8000980:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <uartInit+0x30>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3301      	adds	r3, #1
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b01      	cmp	r3, #1
 8000994:	ddf4      	ble.n	8000980 <uartInit+0xc>
  }


  return true;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000228 	.word	0x20000228

080009a8 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <uartOpen+0x1c>
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d007      	beq.n	80009d2 <uartOpen+0x2a>
 80009c2:	e071      	b.n	8000aa8 <uartOpen+0x100>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4a3b      	ldr	r2, [pc, #236]	; (8000ab4 <uartOpen+0x10c>)
 80009c8:	2101      	movs	r1, #1
 80009ca:	54d1      	strb	r1, [r2, r3]
      ret = true;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
      break;
 80009d0:	e06a      	b.n	8000aa8 <uartOpen+0x100>

    case _DEF_UART2:
      huart1.Instance = USART1;
 80009d2:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <uartOpen+0x110>)
 80009d4:	4a39      	ldr	r2, [pc, #228]	; (8000abc <uartOpen+0x114>)
 80009d6:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 80009d8:	4a37      	ldr	r2, [pc, #220]	; (8000ab8 <uartOpen+0x110>)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <uartOpen+0x110>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <uartOpen+0x110>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <uartOpen+0x110>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <uartOpen+0x110>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <uartOpen+0x110>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <uartOpen+0x110>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	011b      	lsls	r3, r3, #4
 8000a06:	4a2e      	ldr	r2, [pc, #184]	; (8000ac0 <uartOpen+0x118>)
 8000a08:	4413      	add	r3, r2
 8000a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a0e:	492d      	ldr	r1, [pc, #180]	; (8000ac4 <uartOpen+0x11c>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fe14 	bl	800063e <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA1_CLK_ENABLE();
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <uartOpen+0x120>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a2b      	ldr	r2, [pc, #172]	; (8000ac8 <uartOpen+0x120>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6153      	str	r3, [r2, #20]
 8000a22:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <uartOpen+0x120>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]

      /* DMA interrupt init */
      /* DMA1_Channel5_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	200f      	movs	r0, #15
 8000a34:	f000 fb1b 	bl	800106e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000a38:	200f      	movs	r0, #15
 8000a3a:	f000 fb34 	bl	80010a6 <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3e:	481e      	ldr	r0, [pc, #120]	; (8000ab8 <uartOpen+0x110>)
 8000a40:	f002 ff96 	bl	8003970 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <uartOpen+0xa8>
      {
        ret = false;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
      }
      break;
 8000a4e:	e02a      	b.n	8000aa6 <uartOpen+0xfe>
        ret = true;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <uartOpen+0x10c>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a60:	4918      	ldr	r1, [pc, #96]	; (8000ac4 <uartOpen+0x11c>)
 8000a62:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <uartOpen+0x110>)
 8000a64:	f003 f86a 	bl	8003b3c <HAL_UART_Receive_DMA>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <uartOpen+0xca>
          ret = false;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73fb      	strb	r3, [r7, #15]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <uartOpen+0x118>)
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	4413      	add	r3, r2
 8000a7a:	3308      	adds	r3, #8
 8000a7c:	6819      	ldr	r1, [r3, #0]
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <uartOpen+0x124>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	1a8a      	subs	r2, r1, r2
 8000a88:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <uartOpen+0x118>)
 8000a8a:	011b      	lsls	r3, r3, #4
 8000a8c:	440b      	add	r3, r1
 8000a8e:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;    // for flush
 8000a90:	79fa      	ldrb	r2, [r7, #7]
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	490a      	ldr	r1, [pc, #40]	; (8000ac0 <uartOpen+0x118>)
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	440a      	add	r2, r1
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <uartOpen+0x118>)
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	440b      	add	r3, r1
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	601a      	str	r2, [r3, #0]
      break;
 8000aa6:	bf00      	nop
  }

  return ret;
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000228 	.word	0x20000228
 8000ab8:	200005d8 	.word	0x200005d8
 8000abc:	40013800 	.word	0x40013800
 8000ac0:	2000022c 	.word	0x2000022c
 8000ac4:	2000024c 	.word	0x2000024c
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	20000594 	.word	0x20000594

08000ad0 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <uartAvailable+0x1a>
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d004      	beq.n	8000af2 <uartAvailable+0x22>
 8000ae8:	e01b      	b.n	8000b22 <uartAvailable+0x52>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 8000aea:	f005 ff45 	bl	8006978 <cdcAvailable>
 8000aee:	60f8      	str	r0, [r7, #12]
      break;
 8000af0:	e017      	b.n	8000b22 <uartAvailable+0x52>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <uartAvailable+0x5c>)
 8000af6:	011b      	lsls	r3, r3, #4
 8000af8:	4413      	add	r3, r2
 8000afa:	3308      	adds	r3, #8
 8000afc:	6819      	ldr	r1, [r3, #0]
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <uartAvailable+0x60>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	1a8a      	subs	r2, r1, r2
 8000b08:	4908      	ldr	r1, [pc, #32]	; (8000b2c <uartAvailable+0x5c>)
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	440b      	add	r3, r1
 8000b0e:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <uartAvailable+0x5c>)
 8000b16:	4413      	add	r3, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fde6 	bl	80006ea <qbufferAvailable>
 8000b1e:	60f8      	str	r0, [r7, #12]
      break;
 8000b20:	bf00      	nop

  }

  return ret;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2000022c 	.word	0x2000022c
 8000b30:	20000594 	.word	0x20000594

08000b34 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <uartRead+0x1a>
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d005      	beq.n	8000b58 <uartRead+0x24>
 8000b4c:	e00c      	b.n	8000b68 <uartRead+0x34>
  {
    case _DEF_UART1:
      ret = cdcRead();
 8000b4e:	f005 ff2f 	bl	80069b0 <cdcRead>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73fb      	strb	r3, [r7, #15]
      break;
 8000b56:	e007      	b.n	8000b68 <uartRead+0x34>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8000b58:	f107 030f 	add.w	r3, r7, #15
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <uartRead+0x40>)
 8000b62:	f7ff fd86 	bl	8000672 <qbufferRead>
      break;
 8000b66:	bf00      	nop

  }

  return ret;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000023c 	.word	0x2000023c

08000b78 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <uartWrite+0x1e>
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d006      	beq.n	8000ba2 <uartWrite+0x2a>
 8000b94:	e014      	b.n	8000bc0 <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	68b8      	ldr	r0, [r7, #8]
 8000b9a:	f005 ff5b 	bl	8006a54 <cdcWrite>
 8000b9e:	6178      	str	r0, [r7, #20]
      break;
 8000ba0:	e00e      	b.n	8000bc0 <uartWrite+0x48>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	2364      	movs	r3, #100	; 0x64
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	4808      	ldr	r0, [pc, #32]	; (8000bcc <uartWrite+0x54>)
 8000bac:	f002 ff2d 	bl	8003a0a <HAL_UART_Transmit>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8000bb4:	7cfb      	ldrb	r3, [r7, #19]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <uartWrite+0x46>
      {
        ret = length;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	617b      	str	r3, [r7, #20]
      }
      break;
 8000bbe:	bf00      	nop

  }

  return ret;
 8000bc0:	697b      	ldr	r3, [r7, #20]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200005d8 	.word	0x200005d8

08000bd0 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8000bd0:	b40e      	push	{r1, r2, r3}
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b0c7      	sub	sp, #284	; 0x11c
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4602      	mov	r2, r0
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8000bde:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	f107 0010 	add.w	r0, r7, #16
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	f006 fc2f 	bl	800745c <vsniprintf>
 8000bfe:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8000c02:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000c06:	f107 0110 	add.w	r1, r7, #16
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ffb2 	bl	8000b78 <uartWrite>
 8000c14:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8000c18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000c22:	46bd      	mov	sp, r7
 8000c24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c28:	b003      	add	sp, #12
 8000c2a:	4770      	bx	lr

08000c2c <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a33      	ldr	r2, [pc, #204]	; (8000d38 <HAL_UART_MspInit+0xe8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d15f      	bne.n	8000d30 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <HAL_UART_MspInit+0xec>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a31      	ldr	r2, [pc, #196]	; (8000d3c <HAL_UART_MspInit+0xec>)
 8000c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <HAL_UART_MspInit+0xec>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <HAL_UART_MspInit+0xec>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a2b      	ldr	r2, [pc, #172]	; (8000d3c <HAL_UART_MspInit+0xec>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <HAL_UART_MspInit+0xec>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4822      	ldr	r0, [pc, #136]	; (8000d40 <HAL_UART_MspInit+0xf0>)
 8000cb6:	f000 fe59 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481c      	ldr	r0, [pc, #112]	; (8000d40 <HAL_UART_MspInit+0xf0>)
 8000cd0:	f000 fe4c 	bl	800196c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <HAL_UART_MspInit+0xf8>)
 8000cd8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000d06:	f000 f9e9 	bl	80010dc <HAL_DMA_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000d10:	f7ff fb90 	bl	8000434 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2025      	movs	r0, #37	; 0x25
 8000d26:	f000 f9a2 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d2a:	2025      	movs	r0, #37	; 0x25
 8000d2c:	f000 f9bb 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	20000594 	.word	0x20000594
 8000d48:	40020058 	.word	0x40020058

08000d4c <usbInit>:




bool usbInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
  bool ret = true;
 8000d52:	2301      	movs	r3, #1
 8000d54:	75fb      	strb	r3, [r7, #23]


  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d68:	2311      	movs	r3, #17
 8000d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2302      	movs	r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <usbInit+0x50>)
 8000d7a:	f000 fdf7 	bl	800196c <HAL_GPIO_Init>
#if 0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
  delay(200);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
#endif
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <usbInit+0x50>)
 8000d88:	f000 fdf0 	bl	800196c <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 8000d8c:	f005 fdc4 	bl	8006918 <MX_USB_DEVICE_Init>

  return ret;
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40010800 	.word	0x40010800

08000da0 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  bspInit();
 8000da4:	f7ff fa88 	bl	80002b8 <bspInit>
  rtcInit();
 8000da8:	f7ff fd70 	bl	800088c <rtcInit>

  resetInit();
 8000dac:	f7ff fd42 	bl	8000834 <resetInit>
  ledInit();
 8000db0:	f7ff fcb6 	bl	8000720 <ledInit>
  usbInit();
 8000db4:	f7ff ffca 	bl	8000d4c <usbInit>
  uartInit();
 8000db8:	f7ff fddc 	bl	8000974 <uartInit>

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x28>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x28>)
 8000dca:	f043 0310 	orr.w	r3, r3, #16
 8000dce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f941 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fb30 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40022000 	.word	0x40022000

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f959 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f000 f921 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000028 	.word	0x20000028
 8000e48:	20000024 	.word	0x20000024

08000e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_IncTick+0x1c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_IncTick+0x20>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a03      	ldr	r2, [pc, #12]	; (8000e6c <HAL_IncTick+0x20>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	20000028 	.word	0x20000028
 8000e6c:	20000618 	.word	0x20000618

08000e70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <HAL_GetTick+0x10>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	20000618 	.word	0x20000618

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff fff0 	bl	8000e70 <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_Delay+0x40>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eaa:	bf00      	nop
 8000eac:	f7ff ffe0 	bl	8000e70 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000028 	.word	0x20000028

08000ec8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4906      	ldr	r1, [pc, #24]	; (8000f58 <NVIC_EnableIRQ+0x2c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da0b      	bge.n	8000f88 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <NVIC_SetPriority+0x4c>)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 030f 	and.w	r3, r3, #15
 8000f7c:	3b04      	subs	r3, #4
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f86:	e009      	b.n	8000f9c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <NVIC_SetPriority+0x50>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff90 	bl	8000f5c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff31 	bl	8000ec8 <NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff46 	bl	8000f10 <NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff90 	bl	8000fb0 <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5f 	bl	8000f5c <NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff39 	bl	8000f2c <NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa2 	bl	8001014 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e059      	b.n	80011a6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_DMA_Init+0xd4>)
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d80f      	bhi.n	800111e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_DMA_Init+0xd8>)
 8001106:	4413      	add	r3, r2
 8001108:	4a2b      	ldr	r2, [pc, #172]	; (80011b8 <HAL_DMA_Init+0xdc>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	009a      	lsls	r2, r3, #2
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a28      	ldr	r2, [pc, #160]	; (80011bc <HAL_DMA_Init+0xe0>)
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c
 800111c:	e00e      	b.n	800113c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_DMA_Init+0xe4>)
 8001126:	4413      	add	r3, r2
 8001128:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <HAL_DMA_Init+0xdc>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	009a      	lsls	r2, r3, #2
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a22      	ldr	r2, [pc, #136]	; (80011c4 <HAL_DMA_Init+0xe8>)
 800113a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001152:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001156:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001160:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001178:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	40020407 	.word	0x40020407
 80011b4:	bffdfff8 	.word	0xbffdfff8
 80011b8:	cccccccd 	.word	0xcccccccd
 80011bc:	40020000 	.word	0x40020000
 80011c0:	bffdfbf8 	.word	0xbffdfbf8
 80011c4:	40020400 	.word	0x40020400

080011c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_DMA_Start_IT+0x20>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e04a      	b.n	800127e <HAL_DMA_Start_IT+0xb6>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d13a      	bne.n	8001270 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2202      	movs	r2, #2
 80011fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 fb76 	bl	8001910 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 020e 	orr.w	r2, r2, #14
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e00f      	b.n	800125e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0204 	bic.w	r2, r2, #4
 800124c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f042 020a 	orr.w	r2, r2, #10
 800125c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0201 	orr.w	r2, r2, #1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e005      	b.n	800127c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001278:	2302      	movs	r3, #2
 800127a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800127c:	7dfb      	ldrb	r3, [r7, #23]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800129a:	2b02      	cmp	r3, #2
 800129c:	d005      	beq.n	80012aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2204      	movs	r2, #4
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e0d6      	b.n	8001458 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 020e 	bic.w	r2, r2, #14
 80012b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b64      	ldr	r3, [pc, #400]	; (8001464 <HAL_DMA_Abort_IT+0x1dc>)
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d958      	bls.n	8001388 <HAL_DMA_Abort_IT+0x100>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a63      	ldr	r2, [pc, #396]	; (8001468 <HAL_DMA_Abort_IT+0x1e0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d04f      	beq.n	8001380 <HAL_DMA_Abort_IT+0xf8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a61      	ldr	r2, [pc, #388]	; (800146c <HAL_DMA_Abort_IT+0x1e4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d048      	beq.n	800137c <HAL_DMA_Abort_IT+0xf4>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a60      	ldr	r2, [pc, #384]	; (8001470 <HAL_DMA_Abort_IT+0x1e8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d040      	beq.n	8001376 <HAL_DMA_Abort_IT+0xee>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a5e      	ldr	r2, [pc, #376]	; (8001474 <HAL_DMA_Abort_IT+0x1ec>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d038      	beq.n	8001370 <HAL_DMA_Abort_IT+0xe8>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a5d      	ldr	r2, [pc, #372]	; (8001478 <HAL_DMA_Abort_IT+0x1f0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d030      	beq.n	800136a <HAL_DMA_Abort_IT+0xe2>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a5b      	ldr	r2, [pc, #364]	; (800147c <HAL_DMA_Abort_IT+0x1f4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d028      	beq.n	8001364 <HAL_DMA_Abort_IT+0xdc>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_DMA_Abort_IT+0x1dc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d020      	beq.n	800135e <HAL_DMA_Abort_IT+0xd6>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a57      	ldr	r2, [pc, #348]	; (8001480 <HAL_DMA_Abort_IT+0x1f8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d019      	beq.n	800135a <HAL_DMA_Abort_IT+0xd2>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a56      	ldr	r2, [pc, #344]	; (8001484 <HAL_DMA_Abort_IT+0x1fc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d012      	beq.n	8001356 <HAL_DMA_Abort_IT+0xce>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a54      	ldr	r2, [pc, #336]	; (8001488 <HAL_DMA_Abort_IT+0x200>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00a      	beq.n	8001350 <HAL_DMA_Abort_IT+0xc8>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a53      	ldr	r2, [pc, #332]	; (800148c <HAL_DMA_Abort_IT+0x204>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d102      	bne.n	800134a <HAL_DMA_Abort_IT+0xc2>
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	e01b      	b.n	8001382 <HAL_DMA_Abort_IT+0xfa>
 800134a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134e:	e018      	b.n	8001382 <HAL_DMA_Abort_IT+0xfa>
 8001350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001354:	e015      	b.n	8001382 <HAL_DMA_Abort_IT+0xfa>
 8001356:	2310      	movs	r3, #16
 8001358:	e013      	b.n	8001382 <HAL_DMA_Abort_IT+0xfa>
 800135a:	2301      	movs	r3, #1
 800135c:	e011      	b.n	8001382 <HAL_DMA_Abort_IT+0xfa>
 800135e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001362:	e00e      	b.n	8001382 <HAL_DMA_Abort_IT+0xfa>
 8001364:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001368:	e00b      	b.n	8001382 <HAL_DMA_Abort_IT+0xfa>
 800136a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136e:	e008      	b.n	8001382 <HAL_DMA_Abort_IT+0xfa>
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	e005      	b.n	8001382 <HAL_DMA_Abort_IT+0xfa>
 8001376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137a:	e002      	b.n	8001382 <HAL_DMA_Abort_IT+0xfa>
 800137c:	2310      	movs	r3, #16
 800137e:	e000      	b.n	8001382 <HAL_DMA_Abort_IT+0xfa>
 8001380:	2301      	movs	r3, #1
 8001382:	4a43      	ldr	r2, [pc, #268]	; (8001490 <HAL_DMA_Abort_IT+0x208>)
 8001384:	6053      	str	r3, [r2, #4]
 8001386:	e057      	b.n	8001438 <HAL_DMA_Abort_IT+0x1b0>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a36      	ldr	r2, [pc, #216]	; (8001468 <HAL_DMA_Abort_IT+0x1e0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d04f      	beq.n	8001432 <HAL_DMA_Abort_IT+0x1aa>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a35      	ldr	r2, [pc, #212]	; (800146c <HAL_DMA_Abort_IT+0x1e4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d048      	beq.n	800142e <HAL_DMA_Abort_IT+0x1a6>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a33      	ldr	r2, [pc, #204]	; (8001470 <HAL_DMA_Abort_IT+0x1e8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d040      	beq.n	8001428 <HAL_DMA_Abort_IT+0x1a0>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a32      	ldr	r2, [pc, #200]	; (8001474 <HAL_DMA_Abort_IT+0x1ec>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d038      	beq.n	8001422 <HAL_DMA_Abort_IT+0x19a>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a30      	ldr	r2, [pc, #192]	; (8001478 <HAL_DMA_Abort_IT+0x1f0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d030      	beq.n	800141c <HAL_DMA_Abort_IT+0x194>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a2f      	ldr	r2, [pc, #188]	; (800147c <HAL_DMA_Abort_IT+0x1f4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d028      	beq.n	8001416 <HAL_DMA_Abort_IT+0x18e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a26      	ldr	r2, [pc, #152]	; (8001464 <HAL_DMA_Abort_IT+0x1dc>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d020      	beq.n	8001410 <HAL_DMA_Abort_IT+0x188>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a2b      	ldr	r2, [pc, #172]	; (8001480 <HAL_DMA_Abort_IT+0x1f8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d019      	beq.n	800140c <HAL_DMA_Abort_IT+0x184>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a29      	ldr	r2, [pc, #164]	; (8001484 <HAL_DMA_Abort_IT+0x1fc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d012      	beq.n	8001408 <HAL_DMA_Abort_IT+0x180>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a28      	ldr	r2, [pc, #160]	; (8001488 <HAL_DMA_Abort_IT+0x200>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00a      	beq.n	8001402 <HAL_DMA_Abort_IT+0x17a>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a26      	ldr	r2, [pc, #152]	; (800148c <HAL_DMA_Abort_IT+0x204>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d102      	bne.n	80013fc <HAL_DMA_Abort_IT+0x174>
 80013f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fa:	e01b      	b.n	8001434 <HAL_DMA_Abort_IT+0x1ac>
 80013fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001400:	e018      	b.n	8001434 <HAL_DMA_Abort_IT+0x1ac>
 8001402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001406:	e015      	b.n	8001434 <HAL_DMA_Abort_IT+0x1ac>
 8001408:	2310      	movs	r3, #16
 800140a:	e013      	b.n	8001434 <HAL_DMA_Abort_IT+0x1ac>
 800140c:	2301      	movs	r3, #1
 800140e:	e011      	b.n	8001434 <HAL_DMA_Abort_IT+0x1ac>
 8001410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001414:	e00e      	b.n	8001434 <HAL_DMA_Abort_IT+0x1ac>
 8001416:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800141a:	e00b      	b.n	8001434 <HAL_DMA_Abort_IT+0x1ac>
 800141c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001420:	e008      	b.n	8001434 <HAL_DMA_Abort_IT+0x1ac>
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001426:	e005      	b.n	8001434 <HAL_DMA_Abort_IT+0x1ac>
 8001428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142c:	e002      	b.n	8001434 <HAL_DMA_Abort_IT+0x1ac>
 800142e:	2310      	movs	r3, #16
 8001430:	e000      	b.n	8001434 <HAL_DMA_Abort_IT+0x1ac>
 8001432:	2301      	movs	r3, #1
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_DMA_Abort_IT+0x20c>)
 8001436:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	4798      	blx	r3
    } 
  }
  return status;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40020080 	.word	0x40020080
 8001468:	40020008 	.word	0x40020008
 800146c:	4002001c 	.word	0x4002001c
 8001470:	40020030 	.word	0x40020030
 8001474:	40020044 	.word	0x40020044
 8001478:	40020058 	.word	0x40020058
 800147c:	4002006c 	.word	0x4002006c
 8001480:	40020408 	.word	0x40020408
 8001484:	4002041c 	.word	0x4002041c
 8001488:	40020430 	.word	0x40020430
 800148c:	40020444 	.word	0x40020444
 8001490:	40020400 	.word	0x40020400
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	2204      	movs	r2, #4
 80014b6:	409a      	lsls	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 80d6 	beq.w	800166e <HAL_DMA_IRQHandler+0x1d6>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80d0 	beq.w	800166e <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d107      	bne.n	80014ec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0204 	bic.w	r2, r2, #4
 80014ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b9b      	ldr	r3, [pc, #620]	; (8001760 <HAL_DMA_IRQHandler+0x2c8>)
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d958      	bls.n	80015aa <HAL_DMA_IRQHandler+0x112>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a99      	ldr	r2, [pc, #612]	; (8001764 <HAL_DMA_IRQHandler+0x2cc>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d04f      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x10a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a98      	ldr	r2, [pc, #608]	; (8001768 <HAL_DMA_IRQHandler+0x2d0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d048      	beq.n	800159e <HAL_DMA_IRQHandler+0x106>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a96      	ldr	r2, [pc, #600]	; (800176c <HAL_DMA_IRQHandler+0x2d4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d040      	beq.n	8001598 <HAL_DMA_IRQHandler+0x100>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a95      	ldr	r2, [pc, #596]	; (8001770 <HAL_DMA_IRQHandler+0x2d8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d038      	beq.n	8001592 <HAL_DMA_IRQHandler+0xfa>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a93      	ldr	r2, [pc, #588]	; (8001774 <HAL_DMA_IRQHandler+0x2dc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d030      	beq.n	800158c <HAL_DMA_IRQHandler+0xf4>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a92      	ldr	r2, [pc, #584]	; (8001778 <HAL_DMA_IRQHandler+0x2e0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d028      	beq.n	8001586 <HAL_DMA_IRQHandler+0xee>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a89      	ldr	r2, [pc, #548]	; (8001760 <HAL_DMA_IRQHandler+0x2c8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d020      	beq.n	8001580 <HAL_DMA_IRQHandler+0xe8>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a8e      	ldr	r2, [pc, #568]	; (800177c <HAL_DMA_IRQHandler+0x2e4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d019      	beq.n	800157c <HAL_DMA_IRQHandler+0xe4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a8c      	ldr	r2, [pc, #560]	; (8001780 <HAL_DMA_IRQHandler+0x2e8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d012      	beq.n	8001578 <HAL_DMA_IRQHandler+0xe0>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a8b      	ldr	r2, [pc, #556]	; (8001784 <HAL_DMA_IRQHandler+0x2ec>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00a      	beq.n	8001572 <HAL_DMA_IRQHandler+0xda>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a89      	ldr	r2, [pc, #548]	; (8001788 <HAL_DMA_IRQHandler+0x2f0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d102      	bne.n	800156c <HAL_DMA_IRQHandler+0xd4>
 8001566:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800156a:	e01b      	b.n	80015a4 <HAL_DMA_IRQHandler+0x10c>
 800156c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001570:	e018      	b.n	80015a4 <HAL_DMA_IRQHandler+0x10c>
 8001572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001576:	e015      	b.n	80015a4 <HAL_DMA_IRQHandler+0x10c>
 8001578:	2340      	movs	r3, #64	; 0x40
 800157a:	e013      	b.n	80015a4 <HAL_DMA_IRQHandler+0x10c>
 800157c:	2304      	movs	r3, #4
 800157e:	e011      	b.n	80015a4 <HAL_DMA_IRQHandler+0x10c>
 8001580:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001584:	e00e      	b.n	80015a4 <HAL_DMA_IRQHandler+0x10c>
 8001586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800158a:	e00b      	b.n	80015a4 <HAL_DMA_IRQHandler+0x10c>
 800158c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001590:	e008      	b.n	80015a4 <HAL_DMA_IRQHandler+0x10c>
 8001592:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001596:	e005      	b.n	80015a4 <HAL_DMA_IRQHandler+0x10c>
 8001598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800159c:	e002      	b.n	80015a4 <HAL_DMA_IRQHandler+0x10c>
 800159e:	2340      	movs	r3, #64	; 0x40
 80015a0:	e000      	b.n	80015a4 <HAL_DMA_IRQHandler+0x10c>
 80015a2:	2304      	movs	r3, #4
 80015a4:	4a79      	ldr	r2, [pc, #484]	; (800178c <HAL_DMA_IRQHandler+0x2f4>)
 80015a6:	6053      	str	r3, [r2, #4]
 80015a8:	e057      	b.n	800165a <HAL_DMA_IRQHandler+0x1c2>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6d      	ldr	r2, [pc, #436]	; (8001764 <HAL_DMA_IRQHandler+0x2cc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d04f      	beq.n	8001654 <HAL_DMA_IRQHandler+0x1bc>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a6b      	ldr	r2, [pc, #428]	; (8001768 <HAL_DMA_IRQHandler+0x2d0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d048      	beq.n	8001650 <HAL_DMA_IRQHandler+0x1b8>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a6a      	ldr	r2, [pc, #424]	; (800176c <HAL_DMA_IRQHandler+0x2d4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d040      	beq.n	800164a <HAL_DMA_IRQHandler+0x1b2>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a68      	ldr	r2, [pc, #416]	; (8001770 <HAL_DMA_IRQHandler+0x2d8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d038      	beq.n	8001644 <HAL_DMA_IRQHandler+0x1ac>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a67      	ldr	r2, [pc, #412]	; (8001774 <HAL_DMA_IRQHandler+0x2dc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d030      	beq.n	800163e <HAL_DMA_IRQHandler+0x1a6>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a65      	ldr	r2, [pc, #404]	; (8001778 <HAL_DMA_IRQHandler+0x2e0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d028      	beq.n	8001638 <HAL_DMA_IRQHandler+0x1a0>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a5d      	ldr	r2, [pc, #372]	; (8001760 <HAL_DMA_IRQHandler+0x2c8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d020      	beq.n	8001632 <HAL_DMA_IRQHandler+0x19a>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a61      	ldr	r2, [pc, #388]	; (800177c <HAL_DMA_IRQHandler+0x2e4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d019      	beq.n	800162e <HAL_DMA_IRQHandler+0x196>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a60      	ldr	r2, [pc, #384]	; (8001780 <HAL_DMA_IRQHandler+0x2e8>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d012      	beq.n	800162a <HAL_DMA_IRQHandler+0x192>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a5e      	ldr	r2, [pc, #376]	; (8001784 <HAL_DMA_IRQHandler+0x2ec>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00a      	beq.n	8001624 <HAL_DMA_IRQHandler+0x18c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a5d      	ldr	r2, [pc, #372]	; (8001788 <HAL_DMA_IRQHandler+0x2f0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d102      	bne.n	800161e <HAL_DMA_IRQHandler+0x186>
 8001618:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161c:	e01b      	b.n	8001656 <HAL_DMA_IRQHandler+0x1be>
 800161e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001622:	e018      	b.n	8001656 <HAL_DMA_IRQHandler+0x1be>
 8001624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001628:	e015      	b.n	8001656 <HAL_DMA_IRQHandler+0x1be>
 800162a:	2340      	movs	r3, #64	; 0x40
 800162c:	e013      	b.n	8001656 <HAL_DMA_IRQHandler+0x1be>
 800162e:	2304      	movs	r3, #4
 8001630:	e011      	b.n	8001656 <HAL_DMA_IRQHandler+0x1be>
 8001632:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001636:	e00e      	b.n	8001656 <HAL_DMA_IRQHandler+0x1be>
 8001638:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800163c:	e00b      	b.n	8001656 <HAL_DMA_IRQHandler+0x1be>
 800163e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001642:	e008      	b.n	8001656 <HAL_DMA_IRQHandler+0x1be>
 8001644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001648:	e005      	b.n	8001656 <HAL_DMA_IRQHandler+0x1be>
 800164a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164e:	e002      	b.n	8001656 <HAL_DMA_IRQHandler+0x1be>
 8001650:	2340      	movs	r3, #64	; 0x40
 8001652:	e000      	b.n	8001656 <HAL_DMA_IRQHandler+0x1be>
 8001654:	2304      	movs	r3, #4
 8001656:	4a4e      	ldr	r2, [pc, #312]	; (8001790 <HAL_DMA_IRQHandler+0x2f8>)
 8001658:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8136 	beq.w	80018d0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800166c:	e130      	b.n	80018d0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	2202      	movs	r2, #2
 8001674:	409a      	lsls	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80f8 	beq.w	8001870 <HAL_DMA_IRQHandler+0x3d8>
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80f2 	beq.w	8001870 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10b      	bne.n	80016b2 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 020a 	bic.w	r2, r2, #10
 80016a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b29      	ldr	r3, [pc, #164]	; (8001760 <HAL_DMA_IRQHandler+0x2c8>)
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d973      	bls.n	80017a6 <HAL_DMA_IRQHandler+0x30e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a28      	ldr	r2, [pc, #160]	; (8001764 <HAL_DMA_IRQHandler+0x2cc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d06a      	beq.n	800179e <HAL_DMA_IRQHandler+0x306>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a26      	ldr	r2, [pc, #152]	; (8001768 <HAL_DMA_IRQHandler+0x2d0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d063      	beq.n	800179a <HAL_DMA_IRQHandler+0x302>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a25      	ldr	r2, [pc, #148]	; (800176c <HAL_DMA_IRQHandler+0x2d4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d05b      	beq.n	8001794 <HAL_DMA_IRQHandler+0x2fc>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a23      	ldr	r2, [pc, #140]	; (8001770 <HAL_DMA_IRQHandler+0x2d8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d038      	beq.n	8001758 <HAL_DMA_IRQHandler+0x2c0>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a22      	ldr	r2, [pc, #136]	; (8001774 <HAL_DMA_IRQHandler+0x2dc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d030      	beq.n	8001752 <HAL_DMA_IRQHandler+0x2ba>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a20      	ldr	r2, [pc, #128]	; (8001778 <HAL_DMA_IRQHandler+0x2e0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d028      	beq.n	800174c <HAL_DMA_IRQHandler+0x2b4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <HAL_DMA_IRQHandler+0x2c8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d020      	beq.n	8001746 <HAL_DMA_IRQHandler+0x2ae>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1c      	ldr	r2, [pc, #112]	; (800177c <HAL_DMA_IRQHandler+0x2e4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d019      	beq.n	8001742 <HAL_DMA_IRQHandler+0x2aa>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <HAL_DMA_IRQHandler+0x2e8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d012      	beq.n	800173e <HAL_DMA_IRQHandler+0x2a6>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_DMA_IRQHandler+0x2ec>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00a      	beq.n	8001738 <HAL_DMA_IRQHandler+0x2a0>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_DMA_IRQHandler+0x2f0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d102      	bne.n	8001732 <HAL_DMA_IRQHandler+0x29a>
 800172c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001730:	e036      	b.n	80017a0 <HAL_DMA_IRQHandler+0x308>
 8001732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001736:	e033      	b.n	80017a0 <HAL_DMA_IRQHandler+0x308>
 8001738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173c:	e030      	b.n	80017a0 <HAL_DMA_IRQHandler+0x308>
 800173e:	2320      	movs	r3, #32
 8001740:	e02e      	b.n	80017a0 <HAL_DMA_IRQHandler+0x308>
 8001742:	2302      	movs	r3, #2
 8001744:	e02c      	b.n	80017a0 <HAL_DMA_IRQHandler+0x308>
 8001746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800174a:	e029      	b.n	80017a0 <HAL_DMA_IRQHandler+0x308>
 800174c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001750:	e026      	b.n	80017a0 <HAL_DMA_IRQHandler+0x308>
 8001752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001756:	e023      	b.n	80017a0 <HAL_DMA_IRQHandler+0x308>
 8001758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175c:	e020      	b.n	80017a0 <HAL_DMA_IRQHandler+0x308>
 800175e:	bf00      	nop
 8001760:	40020080 	.word	0x40020080
 8001764:	40020008 	.word	0x40020008
 8001768:	4002001c 	.word	0x4002001c
 800176c:	40020030 	.word	0x40020030
 8001770:	40020044 	.word	0x40020044
 8001774:	40020058 	.word	0x40020058
 8001778:	4002006c 	.word	0x4002006c
 800177c:	40020408 	.word	0x40020408
 8001780:	4002041c 	.word	0x4002041c
 8001784:	40020430 	.word	0x40020430
 8001788:	40020444 	.word	0x40020444
 800178c:	40020400 	.word	0x40020400
 8001790:	40020000 	.word	0x40020000
 8001794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001798:	e002      	b.n	80017a0 <HAL_DMA_IRQHandler+0x308>
 800179a:	2320      	movs	r3, #32
 800179c:	e000      	b.n	80017a0 <HAL_DMA_IRQHandler+0x308>
 800179e:	2302      	movs	r3, #2
 80017a0:	4a4e      	ldr	r2, [pc, #312]	; (80018dc <HAL_DMA_IRQHandler+0x444>)
 80017a2:	6053      	str	r3, [r2, #4]
 80017a4:	e057      	b.n	8001856 <HAL_DMA_IRQHandler+0x3be>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a4d      	ldr	r2, [pc, #308]	; (80018e0 <HAL_DMA_IRQHandler+0x448>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d04f      	beq.n	8001850 <HAL_DMA_IRQHandler+0x3b8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a4b      	ldr	r2, [pc, #300]	; (80018e4 <HAL_DMA_IRQHandler+0x44c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d048      	beq.n	800184c <HAL_DMA_IRQHandler+0x3b4>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <HAL_DMA_IRQHandler+0x450>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d040      	beq.n	8001846 <HAL_DMA_IRQHandler+0x3ae>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_DMA_IRQHandler+0x454>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d038      	beq.n	8001840 <HAL_DMA_IRQHandler+0x3a8>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a47      	ldr	r2, [pc, #284]	; (80018f0 <HAL_DMA_IRQHandler+0x458>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d030      	beq.n	800183a <HAL_DMA_IRQHandler+0x3a2>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a45      	ldr	r2, [pc, #276]	; (80018f4 <HAL_DMA_IRQHandler+0x45c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d028      	beq.n	8001834 <HAL_DMA_IRQHandler+0x39c>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a44      	ldr	r2, [pc, #272]	; (80018f8 <HAL_DMA_IRQHandler+0x460>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d020      	beq.n	800182e <HAL_DMA_IRQHandler+0x396>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a42      	ldr	r2, [pc, #264]	; (80018fc <HAL_DMA_IRQHandler+0x464>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_DMA_IRQHandler+0x392>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a41      	ldr	r2, [pc, #260]	; (8001900 <HAL_DMA_IRQHandler+0x468>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d012      	beq.n	8001826 <HAL_DMA_IRQHandler+0x38e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a3f      	ldr	r2, [pc, #252]	; (8001904 <HAL_DMA_IRQHandler+0x46c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00a      	beq.n	8001820 <HAL_DMA_IRQHandler+0x388>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a3e      	ldr	r2, [pc, #248]	; (8001908 <HAL_DMA_IRQHandler+0x470>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d102      	bne.n	800181a <HAL_DMA_IRQHandler+0x382>
 8001814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001818:	e01b      	b.n	8001852 <HAL_DMA_IRQHandler+0x3ba>
 800181a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800181e:	e018      	b.n	8001852 <HAL_DMA_IRQHandler+0x3ba>
 8001820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001824:	e015      	b.n	8001852 <HAL_DMA_IRQHandler+0x3ba>
 8001826:	2320      	movs	r3, #32
 8001828:	e013      	b.n	8001852 <HAL_DMA_IRQHandler+0x3ba>
 800182a:	2302      	movs	r3, #2
 800182c:	e011      	b.n	8001852 <HAL_DMA_IRQHandler+0x3ba>
 800182e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001832:	e00e      	b.n	8001852 <HAL_DMA_IRQHandler+0x3ba>
 8001834:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001838:	e00b      	b.n	8001852 <HAL_DMA_IRQHandler+0x3ba>
 800183a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183e:	e008      	b.n	8001852 <HAL_DMA_IRQHandler+0x3ba>
 8001840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001844:	e005      	b.n	8001852 <HAL_DMA_IRQHandler+0x3ba>
 8001846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184a:	e002      	b.n	8001852 <HAL_DMA_IRQHandler+0x3ba>
 800184c:	2320      	movs	r3, #32
 800184e:	e000      	b.n	8001852 <HAL_DMA_IRQHandler+0x3ba>
 8001850:	2302      	movs	r3, #2
 8001852:	4a2e      	ldr	r2, [pc, #184]	; (800190c <HAL_DMA_IRQHandler+0x474>)
 8001854:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	2b00      	cmp	r3, #0
 8001864:	d034      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800186e:	e02f      	b.n	80018d0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	2208      	movs	r2, #8
 8001876:	409a      	lsls	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d028      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x43a>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d023      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 020e 	bic.w	r2, r2, #14
 8001898:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f202 	lsl.w	r2, r1, r2
 80018a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4798      	blx	r3
    }
  }
  return;
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
}
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40020008 	.word	0x40020008
 80018e4:	4002001c 	.word	0x4002001c
 80018e8:	40020030 	.word	0x40020030
 80018ec:	40020044 	.word	0x40020044
 80018f0:	40020058 	.word	0x40020058
 80018f4:	4002006c 	.word	0x4002006c
 80018f8:	40020080 	.word	0x40020080
 80018fc:	40020408 	.word	0x40020408
 8001900:	4002041c 	.word	0x4002041c
 8001904:	40020430 	.word	0x40020430
 8001908:	40020444 	.word	0x40020444
 800190c:	40020000 	.word	0x40020000

08001910 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b10      	cmp	r3, #16
 800193c:	d108      	bne.n	8001950 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800194e:	e007      	b.n	8001960 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	60da      	str	r2, [r3, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
	...

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b08b      	sub	sp, #44	; 0x2c
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	e133      	b.n	8001bf8 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001990:	2201      	movs	r2, #1
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f040 8122 	bne.w	8001bf2 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d034      	beq.n	8001a20 <HAL_GPIO_Init+0xb4>
 80019b6:	2b12      	cmp	r3, #18
 80019b8:	d80d      	bhi.n	80019d6 <HAL_GPIO_Init+0x6a>
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d02b      	beq.n	8001a16 <HAL_GPIO_Init+0xaa>
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d804      	bhi.n	80019cc <HAL_GPIO_Init+0x60>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d031      	beq.n	8001a2a <HAL_GPIO_Init+0xbe>
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d01c      	beq.n	8001a04 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ca:	e048      	b.n	8001a5e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d043      	beq.n	8001a58 <HAL_GPIO_Init+0xec>
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d01b      	beq.n	8001a0c <HAL_GPIO_Init+0xa0>
          break;
 80019d4:	e043      	b.n	8001a5e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80019d6:	4a8d      	ldr	r2, [pc, #564]	; (8001c0c <HAL_GPIO_Init+0x2a0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d026      	beq.n	8001a2a <HAL_GPIO_Init+0xbe>
 80019dc:	4a8b      	ldr	r2, [pc, #556]	; (8001c0c <HAL_GPIO_Init+0x2a0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d806      	bhi.n	80019f0 <HAL_GPIO_Init+0x84>
 80019e2:	4a8b      	ldr	r2, [pc, #556]	; (8001c10 <HAL_GPIO_Init+0x2a4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d020      	beq.n	8001a2a <HAL_GPIO_Init+0xbe>
 80019e8:	4a8a      	ldr	r2, [pc, #552]	; (8001c14 <HAL_GPIO_Init+0x2a8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01d      	beq.n	8001a2a <HAL_GPIO_Init+0xbe>
          break;
 80019ee:	e036      	b.n	8001a5e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80019f0:	4a89      	ldr	r2, [pc, #548]	; (8001c18 <HAL_GPIO_Init+0x2ac>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d019      	beq.n	8001a2a <HAL_GPIO_Init+0xbe>
 80019f6:	4a89      	ldr	r2, [pc, #548]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d016      	beq.n	8001a2a <HAL_GPIO_Init+0xbe>
 80019fc:	4a88      	ldr	r2, [pc, #544]	; (8001c20 <HAL_GPIO_Init+0x2b4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0xbe>
          break;
 8001a02:	e02c      	b.n	8001a5e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	623b      	str	r3, [r7, #32]
          break;
 8001a0a:	e028      	b.n	8001a5e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	3304      	adds	r3, #4
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e023      	b.n	8001a5e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e01e      	b.n	8001a5e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	330c      	adds	r3, #12
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e019      	b.n	8001a5e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a32:	2304      	movs	r3, #4
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e012      	b.n	8001a5e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d105      	bne.n	8001a4c <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a40:	2308      	movs	r3, #8
 8001a42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	611a      	str	r2, [r3, #16]
          break;
 8001a4a:	e008      	b.n	8001a5e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	615a      	str	r2, [r3, #20]
          break;
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2bff      	cmp	r3, #255	; 0xff
 8001a62:	d801      	bhi.n	8001a68 <HAL_GPIO_Init+0xfc>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	e001      	b.n	8001a6c <HAL_GPIO_Init+0x100>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2bff      	cmp	r3, #255	; 0xff
 8001a72:	d802      	bhi.n	8001a7a <HAL_GPIO_Init+0x10e>
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x114>
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	3b08      	subs	r3, #8
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	210f      	movs	r1, #15
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	401a      	ands	r2, r3
 8001a92:	6a39      	ldr	r1, [r7, #32]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a2 	beq.w	8001bf2 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aae:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <HAL_GPIO_Init+0x2b8>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a5c      	ldr	r2, [pc, #368]	; (8001c24 <HAL_GPIO_Init+0x2b8>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	4b5a      	ldr	r3, [pc, #360]	; (8001c24 <HAL_GPIO_Init+0x2b8>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001ac6:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4f      	ldr	r2, [pc, #316]	; (8001c2c <HAL_GPIO_Init+0x2c0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01f      	beq.n	8001b32 <HAL_GPIO_Init+0x1c6>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4e      	ldr	r2, [pc, #312]	; (8001c30 <HAL_GPIO_Init+0x2c4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x1c2>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4d      	ldr	r2, [pc, #308]	; (8001c34 <HAL_GPIO_Init+0x2c8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x1be>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4c      	ldr	r2, [pc, #304]	; (8001c38 <HAL_GPIO_Init+0x2cc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x1ba>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x1b6>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4a      	ldr	r2, [pc, #296]	; (8001c40 <HAL_GPIO_Init+0x2d4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x1b2>
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	e00a      	b.n	8001b34 <HAL_GPIO_Init+0x1c8>
 8001b1e:	2306      	movs	r3, #6
 8001b20:	e008      	b.n	8001b34 <HAL_GPIO_Init+0x1c8>
 8001b22:	2304      	movs	r3, #4
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x1c8>
 8001b26:	2303      	movs	r3, #3
 8001b28:	e004      	b.n	8001b34 <HAL_GPIO_Init+0x1c8>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_Init+0x1c8>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_GPIO_Init+0x1c8>
 8001b32:	2300      	movs	r3, #0
 8001b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b36:	f002 0203 	and.w	r2, r2, #3
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001b44:	4938      	ldr	r1, [pc, #224]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d006      	beq.n	8001b6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b5e:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4938      	ldr	r1, [pc, #224]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
 8001b6a:	e006      	b.n	8001b7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b6c:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	4933      	ldr	r1, [pc, #204]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	492e      	ldr	r1, [pc, #184]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
 8001b92:	e006      	b.n	8001ba2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	4929      	ldr	r1, [pc, #164]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bae:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	4924      	ldr	r1, [pc, #144]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
 8001bba:	e006      	b.n	8001bca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	491f      	ldr	r1, [pc, #124]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d006      	beq.n	8001be4 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	491a      	ldr	r1, [pc, #104]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60cb      	str	r3, [r1, #12]
 8001be2:	e006      	b.n	8001bf2 <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	4915      	ldr	r1, [pc, #84]	; (8001c44 <HAL_GPIO_Init+0x2d8>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	f67f aec8 	bls.w	8001990 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	372c      	adds	r7, #44	; 0x2c
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	10210000 	.word	0x10210000
 8001c10:	10110000 	.word	0x10110000
 8001c14:	10120000 	.word	0x10120000
 8001c18:	10310000 	.word	0x10310000
 8001c1c:	10320000 	.word	0x10320000
 8001c20:	10220000 	.word	0x10220000
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40010800 	.word	0x40010800
 8001c30:	40010c00 	.word	0x40010c00
 8001c34:	40011000 	.word	0x40011000
 8001c38:	40011400 	.word	0x40011400
 8001c3c:	40011800 	.word	0x40011800
 8001c40:	40011c00 	.word	0x40011c00
 8001c44:	40010400 	.word	0x40010400

08001c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
 8001c54:	4613      	mov	r3, r2
 8001c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c58:	787b      	ldrb	r3, [r7, #1]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c64:	e003      	b.n	8001c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	041a      	lsls	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	611a      	str	r2, [r3, #16]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	887b      	ldrh	r3, [r7, #2]
 8001c8a:	405a      	eors	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	60da      	str	r2, [r3, #12]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9c:	b08b      	sub	sp, #44	; 0x2c
 8001c9e:	af06      	add	r7, sp, #24
 8001ca0:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0ca      	b.n	8001e46 <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d106      	bne.n	8001cca <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f005 f8c1 	bl	8006e4c <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 fc0a 	bl	80044f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	687e      	ldr	r6, [r7, #4]
 8001ce4:	466d      	mov	r5, sp
 8001ce6:	f106 0410 	add.w	r4, r6, #16
 8001cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	1d33      	adds	r3, r6, #4
 8001cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf6:	6838      	ldr	r0, [r7, #0]
 8001cf8:	f002 fbd0 	bl	800449c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 fc10 	bl	8004528 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e037      	b.n	8001d7e <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	015b      	lsls	r3, r3, #5
 8001d14:	4413      	add	r3, r2
 8001d16:	3329      	adds	r3, #41	; 0x29
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	b2d9      	uxtb	r1, r3
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	015b      	lsls	r3, r3, #5
 8001d26:	4413      	add	r3, r2
 8001d28:	3328      	adds	r3, #40	; 0x28
 8001d2a:	460a      	mov	r2, r1
 8001d2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	b299      	uxth	r1, r3
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	015b      	lsls	r3, r3, #5
 8001d38:	4413      	add	r3, r2
 8001d3a:	3334      	adds	r3, #52	; 0x34
 8001d3c:	460a      	mov	r2, r1
 8001d3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015b      	lsls	r3, r3, #5
 8001d46:	4413      	add	r3, r2
 8001d48:	332b      	adds	r3, #43	; 0x2b
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	015b      	lsls	r3, r3, #5
 8001d54:	4413      	add	r3, r2
 8001d56:	3338      	adds	r3, #56	; 0x38
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	015b      	lsls	r3, r3, #5
 8001d62:	4413      	add	r3, r2
 8001d64:	333c      	adds	r3, #60	; 0x3c
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3302      	adds	r3, #2
 8001d70:	015b      	lsls	r3, r3, #5
 8001d72:	4413      	add	r3, r2
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b0e      	cmp	r3, #14
 8001d82:	d9c4      	bls.n	8001d0e <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e03c      	b.n	8001e04 <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	015b      	lsls	r3, r3, #5
 8001d90:	4413      	add	r3, r2
 8001d92:	f203 2329 	addw	r3, r3, #553	; 0x229
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	b2d9      	uxtb	r1, r3
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015b      	lsls	r3, r3, #5
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001daa:	460a      	mov	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	b299      	uxth	r1, r3
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015b      	lsls	r3, r3, #5
 8001db8:	4413      	add	r3, r2
 8001dba:	3334      	adds	r3, #52	; 0x34
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015b      	lsls	r3, r3, #5
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3312      	adds	r3, #18
 8001df6:	015b      	lsls	r3, r3, #5
 8001df8:	4413      	add	r3, r2
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3301      	adds	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b0e      	cmp	r3, #14
 8001e08:	d9bf      	bls.n	8001d8a <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	687e      	ldr	r6, [r7, #4]
 8001e12:	466d      	mov	r5, sp
 8001e14:	f106 0410 	add.w	r4, r6, #16
 8001e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	602b      	str	r3, [r5, #0]
 8001e20:	1d33      	adds	r3, r6, #4
 8001e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e24:	6838      	ldr	r0, [r7, #0]
 8001e26:	f002 fb8b 	bl	8004540 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fb75 	bl	800552e <USB_DevDisconnect>
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e4e <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_PCD_Start+0x16>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e016      	b.n	8001e92 <HAL_PCD_Start+0x44>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f005 fa53 	bl	800731a <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fb4e 	bl	800551a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fb1a 	bl	80044bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 fb4b 	bl	8005542 <USB_ReadInterrupts>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eb6:	d102      	bne.n	8001ebe <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fad9 	bl	8002470 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fb3d 	bl	8005542 <USB_ReadInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed2:	d112      	bne.n	8001efa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f005 f822 	bl	8006f36 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f8d2 	bl	800209e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fb1f 	bl	8005542 <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f0e:	d10b      	bne.n	8001f28 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f22:	b292      	uxth	r2, r2
 8001f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 fb08 	bl	8005542 <USB_ReadInterrupts>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3c:	d10b      	bne.n	8001f56 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f50:	b292      	uxth	r2, r2
 8001f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 faf1 	bl	8005542 <USB_ReadInterrupts>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f6a:	d126      	bne.n	8001fba <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0204 	bic.w	r2, r2, #4
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0208 	bic.w	r2, r2, #8
 8001f96:	b292      	uxth	r2, r2
 8001f98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f005 f803 	bl	8006fa8 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fb4:	b292      	uxth	r2, r2
 8001fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fabf 	bl	8005542 <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fce:	d131      	bne.n	8002034 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0208 	orr.w	r2, r2, #8
 8001fe2:	b292      	uxth	r2, r2
 8001fe4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002008:	b29a      	uxth	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0204 	orr.w	r2, r2, #4
 8002012:	b292      	uxth	r2, r2
 8002014:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fa90 	bl	8005542 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202c:	d002      	beq.n	8002034 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f004 ffa0 	bl	8006f74 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f003 fa82 	bl	8005542 <USB_ReadInterrupts>
 800203e:	4603      	mov	r3, r0
 8002040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002048:	d10e      	bne.n	8002068 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800205c:	b292      	uxth	r2, r2
 800205e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f004 ff59 	bl	8006f1a <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fa68 	bl	8005542 <USB_ReadInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207c:	d10b      	bne.n	8002096 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002086:	b29a      	uxth	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002090:	b292      	uxth	r2, r2
 8002092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_PCD_SetAddress+0x1a>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e013      	b.n	80020e0 <HAL_PCD_SetAddress+0x42>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 fa0f 	bl	80054f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	70fb      	strb	r3, [r7, #3]
 80020fa:	460b      	mov	r3, r1
 80020fc:	803b      	strh	r3, [r7, #0]
 80020fe:	4613      	mov	r3, r2
 8002100:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 800210a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210e:	2b00      	cmp	r3, #0
 8002110:	da08      	bge.n	8002124 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002118:	015b      	lsls	r3, r3, #5
 800211a:	3328      	adds	r3, #40	; 0x28
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	e008      	b.n	8002136 <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800213c:	b2da      	uxtb	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	09db      	lsrs	r3, r3, #7
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8002152:	883a      	ldrh	r2, [r7, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	78ba      	ldrb	r2, [r7, #2]
 800215c:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_PCD_EP_Open+0x84>
 8002168:	2302      	movs	r3, #2
 800216a:	e00e      	b.n	800218a <HAL_PCD_EP_Open+0xa2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68f9      	ldr	r1, [r7, #12]
 800217a:	4618      	mov	r0, r3
 800217c:	f002 fa04 	bl	8004588 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 8002188:	7afb      	ldrb	r3, [r7, #11]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 80021a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da08      	bge.n	80021bc <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b0:	015b      	lsls	r3, r3, #5
 80021b2:	3328      	adds	r3, #40	; 0x28
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e008      	b.n	80021ce <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c2:	015b      	lsls	r3, r3, #5
 80021c4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80021da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	09db      	lsrs	r3, r3, #7
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_PCD_EP_Close+0x66>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e00e      	b.n	8002216 <HAL_PCD_EP_Close+0x84>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	4618      	mov	r0, r3
 8002208:	f002 fc80 	bl	8004b0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	460b      	mov	r3, r1
 800222c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002232:	7afb      	ldrb	r3, [r7, #11]
 8002234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002238:	015b      	lsls	r3, r3, #5
 800223a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4413      	add	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2200      	movs	r2, #0
 800225a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800225c:	7afb      	ldrb	r3, [r7, #11]
 800225e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002262:	b2da      	uxtb	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6979      	ldr	r1, [r7, #20]
 8002278:	4618      	mov	r0, r3
 800227a:	f002 fdcf 	bl	8004e1c <USB_EPStartXfer>
 800227e:	e005      	b.n	800228c <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6979      	ldr	r1, [r7, #20]
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fdc8 	bl	8004e1c <USB_EPStartXfer>
  }

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	3312      	adds	r3, #18
 80022ac:	015b      	lsls	r3, r3, #5
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	460b      	mov	r3, r1
 80022ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80022d4:	7afb      	ldrb	r3, [r7, #11]
 80022d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022da:	015b      	lsls	r3, r3, #5
 80022dc:	3328      	adds	r3, #40	; 0x28
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4413      	add	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2201      	movs	r2, #1
 80022fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80022fc:	7afb      	ldrb	r3, [r7, #11]
 80022fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002302:	b2da      	uxtb	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8002308:	7afb      	ldrb	r3, [r7, #11]
 800230a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6979      	ldr	r1, [r7, #20]
 8002318:	4618      	mov	r0, r3
 800231a:	f002 fd7f 	bl	8004e1c <USB_EPStartXfer>
 800231e:	e005      	b.n	800232c <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6979      	ldr	r1, [r7, #20]
 8002326:	4618      	mov	r0, r3
 8002328:	f002 fd78 	bl	8004e1c <USB_EPStartXfer>
  }

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8002346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234a:	2b00      	cmp	r3, #0
 800234c:	da08      	bge.n	8002360 <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002354:	015b      	lsls	r3, r3, #5
 8002356:	3328      	adds	r3, #40	; 0x28
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	e006      	b.n	800236e <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	015b      	lsls	r3, r3, #5
 8002364:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	09db      	lsrs	r3, r3, #7
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_PCD_EP_SetStall+0x68>
 800239a:	2302      	movs	r3, #2
 800239c:	e01c      	b.n	80023d8 <HAL_PCD_EP_SetStall+0xa2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68f9      	ldr	r1, [r7, #12]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 ffb7 	bl	8005320 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d108      	bne.n	80023ce <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f003 f8cb 	bl	8005564 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 80023f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da08      	bge.n	800240a <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023fe:	015b      	lsls	r3, r3, #5
 8002400:	3328      	adds	r3, #40	; 0x28
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e006      	b.n	8002418 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	015b      	lsls	r3, r3, #5
 800240e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002424:	b2da      	uxtb	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800242a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	09db      	lsrs	r3, r3, #7
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_PCD_EP_ClrStall+0x68>
 8002444:	2302      	movs	r3, #2
 8002446:	e00e      	b.n	8002466 <HAL_PCD_EP_ClrStall+0x86>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68f9      	ldr	r1, [r7, #12]
 8002456:	4618      	mov	r0, r3
 8002458:	f002 ffc2 	bl	80053e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
  uint16_t count = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	837b      	strh	r3, [r7, #26]
  uint8_t epindex = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	767b      	strb	r3, [r7, #25]
  __IO uint16_t wIstr = 0;  
 8002484:	2300      	movs	r3, #0
 8002486:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800248c:	e308      	b.n	8002aa0 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800248e:	89fb      	ldrh	r3, [r7, #14]
 8002490:	b29b      	uxth	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	767b      	strb	r3, [r7, #25]
    
    if (epindex == 0)
 800249a:	7e7b      	ldrb	r3, [r7, #25]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 812a 	bne.w	80026f6 <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80024a2:	89fb      	ldrh	r3, [r7, #14]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d14d      	bne.n	800254a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3328      	adds	r3, #40	; 0x28
 80024ca:	61fb      	str	r3, [r7, #28]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	3302      	adds	r3, #2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	441a      	add	r2, r3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002508:	2100      	movs	r1, #0
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f004 fcee 	bl	8006eec <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 82c1 	beq.w	8002aa0 <PCD_EP_ISR_Handler+0x630>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 82bc 	bne.w	8002aa0 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002534:	b2da      	uxtb	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b292      	uxth	r2, r2
 800253c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002548:	e2aa      	b.n	8002aa0 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002550:	61fb      	str	r3, [r7, #28]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800255c:	89bb      	ldrh	r3, [r7, #12]
 800255e:	b29b      	uxth	r3, r3
 8002560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002564:	2b00      	cmp	r3, #0
 8002566:	d031      	beq.n	80025cc <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002570:	b29b      	uxth	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	3306      	adds	r3, #6
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	889a      	ldrh	r2, [r3, #4]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f003 f82c 	bl	8005606 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b299      	uxth	r1, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025be:	400b      	ands	r3, r1
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f004 fc67 	bl	8006e98 <HAL_PCD_SetupStageCallback>
 80025ca:	e269      	b.n	8002aa0 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025cc:	89bb      	ldrh	r3, [r7, #12]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b21b      	sxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f280 8264 	bge.w	8002aa0 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b299      	uxth	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025e8:	400b      	ands	r3, r1
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	3306      	adds	r3, #6
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	4413      	add	r3, r2
 800260c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d011      	beq.n	8002648 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	6959      	ldr	r1, [r3, #20]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	889a      	ldrh	r2, [r3, #4]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	b29b      	uxth	r3, r3
 8002636:	f002 ffe6 	bl	8005606 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	441a      	add	r2, r3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002648:	2100      	movs	r1, #0
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f004 fc36 	bl	8006ebc <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002658:	b29b      	uxth	r3, r3
 800265a:	3306      	adds	r3, #6
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b3e      	cmp	r3, #62	; 0x3e
 8002670:	d918      	bls.n	80026a4 <PCD_EP_ISR_Handler+0x234>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	82fb      	strh	r3, [r7, #22]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <PCD_EP_ISR_Handler+0x21c>
 8002686:	8afb      	ldrh	r3, [r7, #22]
 8002688:	3b01      	subs	r3, #1
 800268a:	82fb      	strh	r3, [r7, #22]
 800268c:	8afb      	ldrh	r3, [r7, #22]
 800268e:	029b      	lsls	r3, r3, #10
 8002690:	b29b      	uxth	r3, r3
 8002692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800269a:	b29b      	uxth	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e012      	b.n	80026ca <PCD_EP_ISR_Handler+0x25a>
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	82fb      	strh	r3, [r7, #22]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <PCD_EP_ISR_Handler+0x24e>
 80026b8:	8afb      	ldrh	r3, [r7, #22]
 80026ba:	3301      	adds	r3, #1
 80026bc:	82fb      	strh	r3, [r7, #22]
 80026be:	8afb      	ldrh	r3, [r7, #22]
 80026c0:	029b      	lsls	r3, r3, #10
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	b29c      	uxth	r4, r3
 80026dc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80026e0:	b29c      	uxth	r4, r3
 80026e2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80026e6:	b29c      	uxth	r4, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b98      	ldr	r3, [pc, #608]	; (8002950 <PCD_EP_ISR_Handler+0x4e0>)
 80026ee:	4323      	orrs	r3, r4
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	8013      	strh	r3, [r2, #0]
 80026f4:	e1d4      	b.n	8002aa0 <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	7e7b      	ldrb	r3, [r7, #25]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002708:	89bb      	ldrh	r3, [r7, #12]
 800270a:	b29b      	uxth	r3, r3
 800270c:	b21b      	sxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	f280 80d0 	bge.w	80028b4 <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	7e7b      	ldrb	r3, [r7, #25]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b299      	uxth	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	7e7b      	ldrb	r3, [r7, #25]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	441a      	add	r2, r3
 8002730:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002734:	400b      	ands	r3, r1
 8002736:	b29b      	uxth	r3, r3
 8002738:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 800273a:	7e7b      	ldrb	r3, [r7, #25]
 800273c:	015b      	lsls	r3, r3, #5
 800273e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	61fb      	str	r3, [r7, #28]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	7a9b      	ldrb	r3, [r3, #10]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d122      	bne.n	8002796 <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002758:	b29b      	uxth	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	3306      	adds	r3, #6
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277a:	837b      	strh	r3, [r7, #26]
          if (count != 0U)
 800277c:	8b7b      	ldrh	r3, [r7, #26]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d073      	beq.n	800286a <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	6959      	ldr	r1, [r3, #20]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	889a      	ldrh	r2, [r3, #4]
 800278e:	8b7b      	ldrh	r3, [r7, #26]
 8002790:	f002 ff39 	bl	8005606 <USB_ReadPMA>
 8002794:	e069      	b.n	800286a <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d022      	beq.n	80027f6 <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	3302      	adds	r3, #2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027da:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 80027dc:	8b7b      	ldrh	r3, [r7, #26]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d02b      	beq.n	800283a <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	6959      	ldr	r1, [r3, #20]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	88da      	ldrh	r2, [r3, #6]
 80027ee:	8b7b      	ldrh	r3, [r7, #26]
 80027f0:	f002 ff09 	bl	8005606 <USB_ReadPMA>
 80027f4:	e021      	b.n	800283a <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	3306      	adds	r3, #6
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	4413      	add	r3, r2
 8002814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002820:	837b      	strh	r3, [r7, #26]
            if (count != 0U)
 8002822:	8b7b      	ldrh	r3, [r7, #26]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	6959      	ldr	r1, [r3, #20]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	891a      	ldrh	r2, [r3, #8]
 8002834:	8b7b      	ldrh	r3, [r7, #26]
 8002836:	f002 fee6 	bl	8005606 <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29a      	uxth	r2, r3
 800284c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002850:	4013      	ands	r3, r2
 8002852:	b299      	uxth	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	441a      	add	r2, r3
 8002862:	4b3c      	ldr	r3, [pc, #240]	; (8002954 <PCD_EP_ISR_Handler+0x4e4>)
 8002864:	430b      	orrs	r3, r1
 8002866:	b29b      	uxth	r3, r3
 8002868:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	8b7b      	ldrh	r3, [r7, #26]
 8002870:	441a      	add	r2, r3
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	8b7b      	ldrh	r3, [r7, #26]
 800287c:	441a      	add	r2, r3
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <PCD_EP_ISR_Handler+0x424>
 800288a:	8b7a      	ldrh	r2, [r7, #26]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	429a      	cmp	r2, r3
 8002892:	d206      	bcs.n	80028a2 <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f004 fb0e 	bl	8006ebc <HAL_PCD_DataOutStageCallback>
 80028a0:	e008      	b.n	80028b4 <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	7819      	ldrb	r1, [r3, #0]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fcb5 	bl	800221e <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028b4:	89bb      	ldrh	r3, [r7, #12]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80ef 	beq.w	8002aa0 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 80028c2:	7e7b      	ldrb	r3, [r7, #25]
 80028c4:	015b      	lsls	r3, r3, #5
 80028c6:	3328      	adds	r3, #40	; 0x28
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	61fb      	str	r3, [r7, #28]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	7e7b      	ldrb	r3, [r7, #25]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	4611      	mov	r1, r2
 80028e4:	7e7a      	ldrb	r2, [r7, #25]
 80028e6:	0092      	lsls	r2, r2, #2
 80028e8:	440a      	add	r2, r1
 80028ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	7a9b      	ldrb	r3, [r3, #10]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d12c      	bne.n	8002958 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002906:	b29b      	uxth	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	3302      	adds	r3, #2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8083 	beq.w	8002a3c <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	6959      	ldr	r1, [r3, #20]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	889a      	ldrh	r2, [r3, #4]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f002 fe17 	bl	800557a <USB_WritePMA>
 800294c:	e076      	b.n	8002a3c <PCD_EP_ISR_Handler+0x5cc>
 800294e:	bf00      	nop
 8002950:	ffff8080 	.word	0xffff8080
 8002954:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d026      	beq.n	80029c0 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	3302      	adds	r3, #2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d031      	beq.n	8002a0c <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	6959      	ldr	r1, [r3, #20]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	88da      	ldrh	r2, [r3, #6]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	f002 fdde 	bl	800557a <USB_WritePMA>
 80029be:	e025      	b.n	8002a0c <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	3306      	adds	r3, #6
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	6959      	ldr	r1, [r3, #20]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	891a      	ldrh	r2, [r3, #8]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f002 fdb7 	bl	800557a <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002a22:	4013      	ands	r3, r2
 8002a24:	b299      	uxth	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	441a      	add	r2, r3
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <PCD_EP_ISR_Handler+0x650>)
 8002a36:	430b      	orrs	r3, r1
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3302      	adds	r3, #2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	441a      	add	r2, r3
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f004 fa30 	bl	8006eec <HAL_PCD_DataInStageCallback>
 8002a8c:	e008      	b.n	8002aa0 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	7819      	ldrb	r1, [r3, #0]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff fc10 	bl	80022c0 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	81fa      	strh	r2, [r7, #14]
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f6ff acec 	blt.w	800248e <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3724      	adds	r7, #36	; 0x24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}
 8002ac0:	ffffc080 	.word	0xffffc080

08002ac4 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8002ada:	897b      	ldrh	r3, [r7, #10]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002ae4:	897b      	ldrh	r3, [r7, #10]
 8002ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aea:	015b      	lsls	r3, r3, #5
 8002aec:	3328      	adds	r3, #40	; 0x28
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e006      	b.n	8002b04 <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002af6:	897b      	ldrh	r3, [r7, #10]
 8002af8:	015b      	lsls	r3, r3, #5
 8002afa:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4413      	add	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b04:	893b      	ldrh	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d107      	bne.n	8002b1a <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	809a      	strh	r2, [r3, #4]
 8002b18:	e00b      	b.n	8002b32 <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	420e0020 	.word	0x420e0020

08002b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8087 	beq.w	8002c80 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b72:	4b92      	ldr	r3, [pc, #584]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d00c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b7e:	4b8f      	ldr	r3, [pc, #572]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d112      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x58>
 8002b8a:	4b8c      	ldr	r3, [pc, #560]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	4b88      	ldr	r3, [pc, #544]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d06c      	beq.n	8002c7e <HAL_RCC_OscConfig+0x126>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d168      	bne.n	8002c7e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e22d      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x70>
 8002bba:	4b80      	ldr	r3, [pc, #512]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7f      	ldr	r2, [pc, #508]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e02e      	b.n	8002c26 <HAL_RCC_OscConfig+0xce>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10c      	bne.n	8002bea <HAL_RCC_OscConfig+0x92>
 8002bd0:	4b7a      	ldr	r3, [pc, #488]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a79      	ldr	r2, [pc, #484]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b77      	ldr	r3, [pc, #476]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a76      	ldr	r2, [pc, #472]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e01d      	b.n	8002c26 <HAL_RCC_OscConfig+0xce>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf2:	d10c      	bne.n	8002c0e <HAL_RCC_OscConfig+0xb6>
 8002bf4:	4b71      	ldr	r3, [pc, #452]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a70      	ldr	r2, [pc, #448]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b6e      	ldr	r3, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a6d      	ldr	r2, [pc, #436]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e00b      	b.n	8002c26 <HAL_RCC_OscConfig+0xce>
 8002c0e:	4b6b      	ldr	r3, [pc, #428]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a6a      	ldr	r2, [pc, #424]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a67      	ldr	r2, [pc, #412]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d013      	beq.n	8002c56 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7fe f91f 	bl	8000e70 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c36:	f7fe f91b 	bl	8000e70 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	; 0x64
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e1e1      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c48:	4b5c      	ldr	r3, [pc, #368]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0xde>
 8002c54:	e014      	b.n	8002c80 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe f90b 	bl	8000e70 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c5e:	f7fe f907 	bl	8000e70 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b64      	cmp	r3, #100	; 0x64
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1cd      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c70:	4b52      	ldr	r3, [pc, #328]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x106>
 8002c7c:	e000      	b.n	8002c80 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d063      	beq.n	8002d54 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c98:	4b48      	ldr	r3, [pc, #288]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d11c      	bne.n	8002cde <HAL_RCC_OscConfig+0x186>
 8002ca4:	4b45      	ldr	r3, [pc, #276]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d116      	bne.n	8002cde <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb0:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x170>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e1a1      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b3c      	ldr	r3, [pc, #240]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4939      	ldr	r1, [pc, #228]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cdc:	e03a      	b.n	8002d54 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d020      	beq.n	8002d28 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce6:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <HAL_RCC_OscConfig+0x268>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe f8c0 	bl	8000e70 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7fe f8bc 	bl	8000e70 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e182      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4926      	ldr	r1, [pc, #152]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
 8002d26:	e015      	b.n	8002d54 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_RCC_OscConfig+0x268>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe f89f 	bl	8000e70 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d36:	f7fe f89b 	bl	8000e70 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e161      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d039      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d019      	beq.n	8002d9c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe f87f 	bl	8000e70 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d76:	f7fe f87b 	bl	8000e70 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e141      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_RCC_OscConfig+0x264>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002d94:	2001      	movs	r0, #1
 8002d96:	f000 fae3 	bl	8003360 <RCC_Delay>
 8002d9a:	e01b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fe f865 	bl	8000e70 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	e00e      	b.n	8002dc8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002daa:	f7fe f861 	bl	8000e70 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d907      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e127      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	42420000 	.word	0x42420000
 8002dc4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	4b92      	ldr	r3, [pc, #584]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ea      	bne.n	8002daa <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80a6 	beq.w	8002f2e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b8b      	ldr	r3, [pc, #556]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b88      	ldr	r3, [pc, #544]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4a87      	ldr	r2, [pc, #540]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	61d3      	str	r3, [r2, #28]
 8002dfe:	4b85      	ldr	r3, [pc, #532]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b82      	ldr	r3, [pc, #520]	; (8003018 <HAL_RCC_OscConfig+0x4c0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d118      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1a:	4b7f      	ldr	r3, [pc, #508]	; (8003018 <HAL_RCC_OscConfig+0x4c0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a7e      	ldr	r2, [pc, #504]	; (8003018 <HAL_RCC_OscConfig+0x4c0>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7fe f823 	bl	8000e70 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7fe f81f 	bl	8000e70 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b64      	cmp	r3, #100	; 0x64
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0e5      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	4b75      	ldr	r3, [pc, #468]	; (8003018 <HAL_RCC_OscConfig+0x4c0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x30a>
 8002e54:	4b6f      	ldr	r3, [pc, #444]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4a6e      	ldr	r2, [pc, #440]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	e02d      	b.n	8002ebe <HAL_RCC_OscConfig+0x366>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x32c>
 8002e6a:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4a69      	ldr	r2, [pc, #420]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6213      	str	r3, [r2, #32]
 8002e76:	4b67      	ldr	r3, [pc, #412]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4a66      	ldr	r2, [pc, #408]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002e7c:	f023 0304 	bic.w	r3, r3, #4
 8002e80:	6213      	str	r3, [r2, #32]
 8002e82:	e01c      	b.n	8002ebe <HAL_RCC_OscConfig+0x366>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x34e>
 8002e8c:	4b61      	ldr	r3, [pc, #388]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4a60      	ldr	r2, [pc, #384]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	6213      	str	r3, [r2, #32]
 8002e98:	4b5e      	ldr	r3, [pc, #376]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a5d      	ldr	r2, [pc, #372]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	e00b      	b.n	8002ebe <HAL_RCC_OscConfig+0x366>
 8002ea6:	4b5b      	ldr	r3, [pc, #364]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a5a      	ldr	r2, [pc, #360]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	4b58      	ldr	r3, [pc, #352]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a57      	ldr	r2, [pc, #348]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d015      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7fd ffd3 	bl	8000e70 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fd ffcf 	bl	8000e70 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e093      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee4:	4b4b      	ldr	r3, [pc, #300]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ee      	beq.n	8002ece <HAL_RCC_OscConfig+0x376>
 8002ef0:	e014      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fd ffbd 	bl	8000e70 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fd ffb9 	bl	8000e70 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e07d      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f10:	4b40      	ldr	r3, [pc, #256]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ee      	bne.n	8002efa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f22:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4a3b      	ldr	r2, [pc, #236]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d069      	beq.n	800300a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f36:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d061      	beq.n	8003006 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d146      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fd ff8e 	bl	8000e70 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fd ff8a 	bl	8000e70 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e050      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6a:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7e:	d108      	bne.n	8002f92 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f80:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4921      	ldr	r1, [pc, #132]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a19      	ldr	r1, [r3, #32]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	491b      	ldr	r1, [pc, #108]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fd ff5e 	bl	8000e70 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fd ff5a 	bl	8000e70 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e020      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x460>
 8002fd6:	e018      	b.n	800300a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd8:	4b10      	ldr	r3, [pc, #64]	; (800301c <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fd ff47 	bl	8000e70 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fd ff43 	bl	8000e70 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e009      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCC_OscConfig+0x4bc>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f0      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x48e>
 8003004:	e001      	b.n	800300a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	40007000 	.word	0x40007000
 800301c:	42420060 	.word	0x42420060

08003020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800302e:	4b7e      	ldr	r3, [pc, #504]	; (8003228 <HAL_RCC_ClockConfig+0x208>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d910      	bls.n	800305e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303c:	4b7a      	ldr	r3, [pc, #488]	; (8003228 <HAL_RCC_ClockConfig+0x208>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 0207 	bic.w	r2, r3, #7
 8003044:	4978      	ldr	r1, [pc, #480]	; (8003228 <HAL_RCC_ClockConfig+0x208>)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800304c:	4b76      	ldr	r3, [pc, #472]	; (8003228 <HAL_RCC_ClockConfig+0x208>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d001      	beq.n	800305e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e0e0      	b.n	8003220 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d020      	beq.n	80030ac <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003076:	4b6d      	ldr	r3, [pc, #436]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a6c      	ldr	r2, [pc, #432]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 800307c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003080:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800308e:	4b67      	ldr	r3, [pc, #412]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4a66      	ldr	r2, [pc, #408]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 8003094:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003098:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800309a:	4b64      	ldr	r3, [pc, #400]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	4961      	ldr	r1, [pc, #388]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d06a      	beq.n	800318e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c0:	4b5a      	ldr	r3, [pc, #360]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d115      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0a7      	b.n	8003220 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d107      	bne.n	80030e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d8:	4b54      	ldr	r3, [pc, #336]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e09b      	b.n	8003220 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e8:	4b50      	ldr	r3, [pc, #320]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e093      	b.n	8003220 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f8:	4b4c      	ldr	r3, [pc, #304]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 0203 	bic.w	r2, r3, #3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4949      	ldr	r1, [pc, #292]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800310a:	f7fd feb1 	bl	8000e70 <HAL_GetTick>
 800310e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d112      	bne.n	800313e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311a:	f7fd fea9 	bl	8000e70 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	; 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e077      	b.n	8003220 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003130:	4b3e      	ldr	r3, [pc, #248]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b04      	cmp	r3, #4
 800313a:	d1ee      	bne.n	800311a <HAL_RCC_ClockConfig+0xfa>
 800313c:	e027      	b.n	800318e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d11d      	bne.n	8003182 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003146:	e00a      	b.n	800315e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003148:	f7fd fe92 	bl	8000e70 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e060      	b.n	8003220 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800315e:	4b33      	ldr	r3, [pc, #204]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b08      	cmp	r3, #8
 8003168:	d1ee      	bne.n	8003148 <HAL_RCC_ClockConfig+0x128>
 800316a:	e010      	b.n	800318e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7fd fe80 	bl	8000e70 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e04e      	b.n	8003220 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003182:	4b2a      	ldr	r3, [pc, #168]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ee      	bne.n	800316c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCC_ClockConfig+0x208>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d210      	bcs.n	80031be <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319c:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_RCC_ClockConfig+0x208>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 0207 	bic.w	r2, r3, #7
 80031a4:	4920      	ldr	r1, [pc, #128]	; (8003228 <HAL_RCC_ClockConfig+0x208>)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031ac:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <HAL_RCC_ClockConfig+0x208>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e030      	b.n	8003220 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	4915      	ldr	r1, [pc, #84]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031e8:	4b10      	ldr	r3, [pc, #64]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	490d      	ldr	r1, [pc, #52]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031fc:	f000 f81c 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 8003200:	4601      	mov	r1, r0
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_RCC_ClockConfig+0x20c>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	4a08      	ldr	r2, [pc, #32]	; (8003230 <HAL_RCC_ClockConfig+0x210>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	fa21 f303 	lsr.w	r3, r1, r3
 8003214:	4a07      	ldr	r2, [pc, #28]	; (8003234 <HAL_RCC_ClockConfig+0x214>)
 8003216:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003218:	2000      	movs	r0, #0
 800321a:	f7fd fde7 	bl	8000dec <HAL_InitTick>
  
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40022000 	.word	0x40022000
 800322c:	40021000 	.word	0x40021000
 8003230:	08007d08 	.word	0x08007d08
 8003234:	20000000 	.word	0x20000000

08003238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	b490      	push	{r4, r7}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800323e:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003240:	1d3c      	adds	r4, r7, #4
 8003242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003248:	4b28      	ldr	r3, [pc, #160]	; (80032ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003262:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b04      	cmp	r3, #4
 8003270:	d002      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x40>
 8003272:	2b08      	cmp	r3, #8
 8003274:	d003      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x46>
 8003276:	e02d      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800327a:	623b      	str	r3, [r7, #32]
      break;
 800327c:	e02d      	b.n	80032da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	0c9b      	lsrs	r3, r3, #18
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800328a:	4413      	add	r3, r2
 800328c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003290:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800329c:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	0c5b      	lsrs	r3, r3, #17
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032aa:	4413      	add	r3, r2
 80032ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032b0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	4a0f      	ldr	r2, [pc, #60]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032b6:	fb02 f203 	mul.w	r2, r2, r3
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
 80032c2:	e004      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	623b      	str	r3, [r7, #32]
      break;
 80032d2:	e002      	b.n	80032da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032d6:	623b      	str	r3, [r7, #32]
      break;
 80032d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032da:	6a3b      	ldr	r3, [r7, #32]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3728      	adds	r7, #40	; 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc90      	pop	{r4, r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	08007c98 	.word	0x08007c98
 80032ec:	08007ca8 	.word	0x08007ca8
 80032f0:	40021000 	.word	0x40021000
 80032f4:	007a1200 	.word	0x007a1200
 80032f8:	003d0900 	.word	0x003d0900

080032fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b02      	ldr	r3, [pc, #8]	; (800330c <HAL_RCC_GetHCLKFreq+0x10>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	20000000 	.word	0x20000000

08003310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003314:	f7ff fff2 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003318:	4601      	mov	r1, r0
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4a03      	ldr	r2, [pc, #12]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000
 8003334:	08007d18 	.word	0x08007d18

08003338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800333c:	f7ff ffde 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003340:	4601      	mov	r1, r0
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	0adb      	lsrs	r3, r3, #11
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4a03      	ldr	r2, [pc, #12]	; (800335c <HAL_RCC_GetPCLK2Freq+0x24>)
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	08007d18 	.word	0x08007d18

08003360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <RCC_Delay+0x34>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <RCC_Delay+0x38>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0a5b      	lsrs	r3, r3, #9
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800337c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1e5a      	subs	r2, r3, #1
 8003382:	60fa      	str	r2, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f9      	bne.n	800337c <RCC_Delay+0x1c>
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000000 	.word	0x20000000
 8003398:	10624dd3 	.word	0x10624dd3

0800339c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d07d      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80033b8:	2300      	movs	r3, #0
 80033ba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033bc:	4b4f      	ldr	r3, [pc, #316]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10d      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033c8:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	4a4b      	ldr	r2, [pc, #300]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	61d3      	str	r3, [r2, #28]
 80033d4:	4b49      	ldr	r3, [pc, #292]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e0:	2301      	movs	r3, #1
 80033e2:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	4b46      	ldr	r3, [pc, #280]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d118      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a42      	ldr	r2, [pc, #264]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fc:	f7fd fd38 	bl	8000e70 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003402:	e008      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003404:	f7fd fd34 	bl	8000e70 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e06d      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003416:	4b3a      	ldr	r3, [pc, #232]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003422:	4b36      	ldr	r3, [pc, #216]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d02e      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	429a      	cmp	r2, r3
 800343e:	d027      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003440:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003448:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800344a:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003450:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003456:	4a29      	ldr	r2, [pc, #164]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d014      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fd fd03 	bl	8000e70 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	e00a      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fd fcff 	bl	8000e70 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e036      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ee      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4917      	ldr	r1, [pc, #92]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d105      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	490b      	ldr	r1, [pc, #44]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	4904      	ldr	r1, [pc, #16]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	40007000 	.word	0x40007000
 8003504:	42420440 	.word	0x42420440

08003508 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b08d      	sub	sp, #52	; 0x34
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003510:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003512:	f107 040c 	add.w	r4, r7, #12
 8003516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800351c:	4b6a      	ldr	r3, [pc, #424]	; (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	2300      	movs	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352a:	2300      	movs	r3, #0
 800352c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	2300      	movs	r3, #0
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3b01      	subs	r3, #1
 800353a:	2b0f      	cmp	r3, #15
 800353c:	f200 80b9 	bhi.w	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8003540:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	0800362b 	.word	0x0800362b
 800354c:	08003697 	.word	0x08003697
 8003550:	080036b3 	.word	0x080036b3
 8003554:	0800361b 	.word	0x0800361b
 8003558:	080036b3 	.word	0x080036b3
 800355c:	080036b3 	.word	0x080036b3
 8003560:	080036b3 	.word	0x080036b3
 8003564:	08003623 	.word	0x08003623
 8003568:	080036b3 	.word	0x080036b3
 800356c:	080036b3 	.word	0x080036b3
 8003570:	080036b3 	.word	0x080036b3
 8003574:	080036b3 	.word	0x080036b3
 8003578:	080036b3 	.word	0x080036b3
 800357c:	080036b3 	.word	0x080036b3
 8003580:	080036b3 	.word	0x080036b3
 8003584:	08003589 	.word	0x08003589
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	61fb      	str	r3, [r7, #28]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800358e:	4b4f      	ldr	r3, [pc, #316]	; (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 808d 	beq.w	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	0c9b      	lsrs	r3, r3, #18
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035a8:	4413      	add	r3, r2
 80035aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035ae:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d018      	beq.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ba:	4b44      	ldr	r3, [pc, #272]	; (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	0c5b      	lsrs	r3, r3, #17
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035c8:	4413      	add	r3, r2
 80035ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00d      	beq.n	80035f6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80035da:	4a3d      	ldr	r2, [pc, #244]	; (80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	fb02 f303 	mul.w	r3, r2, r3
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ea:	e004      	b.n	80035f6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	4a39      	ldr	r2, [pc, #228]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80035f6:	4b35      	ldr	r3, [pc, #212]	; (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003602:	d102      	bne.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003608:	e055      	b.n	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
          frequency = (pllclk * 2) / 3;
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4a32      	ldr	r2, [pc, #200]	; (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>)
 8003610:	fba2 2303 	umull	r2, r3, r2, r3
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003618:	e04d      	b.n	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800361a:	f7ff fe0d 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 800361e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003620:	e04a      	b.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003622:	f7ff fe09 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 8003626:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003628:	e046      	b.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800362a:	4b28      	ldr	r3, [pc, #160]	; (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363a:	d108      	bne.n	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8003646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
 800364c:	e022      	b.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003658:	d109      	bne.n	800366e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8003666:	f649 4340 	movw	r3, #40000	; 0x9c40
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
 800366c:	e012      	b.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003678:	d109      	bne.n	800368e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        frequency = HSE_VALUE / 128U;
 8003686:	f24f 4324 	movw	r3, #62500	; 0xf424
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
 800368c:	e002      	b.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8003692:	e011      	b.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8003694:	e010      	b.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003696:	f7ff fe4f 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	0b9b      	lsrs	r3, r3, #14
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	3301      	adds	r3, #1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036b0:	e002      	b.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
    }
  default: 
    {
      break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      break;
 80036b6:	bf00      	nop
    }
  }
  return(frequency);
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3734      	adds	r7, #52	; 0x34
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}
 80036c2:	bf00      	nop
 80036c4:	08007cac 	.word	0x08007cac
 80036c8:	08007cbc 	.word	0x08007cbc
 80036cc:	40021000 	.word	0x40021000
 80036d0:	007a1200 	.word	0x007a1200
 80036d4:	003d0900 	.word	0x003d0900
 80036d8:	aaaaaaab 	.word	0xaaaaaaab

080036dc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e084      	b.n	80037fc <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7c5b      	ldrb	r3, [r3, #17]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd f912 	bl	800092c <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f87a 	bl	8003808 <HAL_RTC_WaitForSynchro>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2204      	movs	r2, #4
 800371e:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e06b      	b.n	80037fc <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f89c 	bl	8003862 <RTC_EnterInitMode>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2204      	movs	r2, #4
 8003734:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e060      	b.n	80037fc <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0207 	bic.w	r2, r2, #7
 8003748:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003752:	4b2c      	ldr	r3, [pc, #176]	; (8003804 <HAL_RTC_Init+0x128>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a2b      	ldr	r2, [pc, #172]	; (8003804 <HAL_RTC_Init+0x128>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800375e:	4b29      	ldr	r3, [pc, #164]	; (8003804 <HAL_RTC_Init+0x128>)
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	4926      	ldr	r1, [pc, #152]	; (8003804 <HAL_RTC_Init+0x128>)
 800376c:	4313      	orrs	r3, r2
 800376e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d003      	beq.n	8003782 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e00e      	b.n	80037a0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003782:	2001      	movs	r0, #1
 8003784:	f7ff fec0 	bl	8003508 <HAL_RCCEx_GetPeriphCLKFreq>
 8003788:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2204      	movs	r2, #4
 8003794:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e030      	b.n	80037fc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3b01      	subs	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 010f 	bic.w	r1, r3, #15
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	0c1a      	lsrs	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	041b      	lsls	r3, r3, #16
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	b291      	uxth	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	430b      	orrs	r3, r1
 80037ca:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f870 	bl	80038b2 <RTC_ExitInitMode>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2204      	movs	r2, #4
 80037dc:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e00c      	b.n	80037fc <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40006c00 	.word	0x40006c00

08003808 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e01d      	b.n	800385a <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0208 	bic.w	r2, r2, #8
 800382c:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 800382e:	f7fd fb1f 	bl	8000e70 <HAL_GetTick>
 8003832:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003834:	e009      	b.n	800384a <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8003836:	f7fd fb1b 	bl	8000e70 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003844:	d901      	bls.n	800384a <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e007      	b.n	800385a <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ee      	beq.n	8003836 <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 800386e:	f7fd faff 	bl	8000e70 <HAL_GetTick>
 8003872:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003874:	e009      	b.n	800388a <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003876:	f7fd fafb 	bl	8000e70 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003884:	d901      	bls.n	800388a <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e00f      	b.n	80038aa <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ee      	beq.n	8003876 <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0210 	orr.w	r2, r2, #16
 80038a6:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0210 	bic.w	r2, r2, #16
 80038cc:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 80038ce:	f7fd facf 	bl	8000e70 <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80038d4:	e009      	b.n	80038ea <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80038d6:	f7fd facb 	bl	8000e70 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038e4:	d901      	bls.n	80038ea <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e007      	b.n	80038fa <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0ee      	beq.n	80038d6 <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 8003914:	4b07      	ldr	r3, [pc, #28]	; (8003934 <HAL_RTCEx_BKUPWrite+0x30>)
 8003916:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4413      	add	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	b292      	uxth	r2, r2
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	40006c00 	.word	0x40006c00

08003938 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <HAL_RTCEx_BKUPRead+0x34>)
 800394c:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003960:	68bb      	ldr	r3, [r7, #8]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	40006c00 	.word	0x40006c00

08003970 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e03f      	b.n	8003a02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd f95a 	bl	8000c50 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2224      	movs	r2, #36	; 0x24
 80039a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039b2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fc59 	bl	800426c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039d8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039e8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b088      	sub	sp, #32
 8003a0e:	af02      	add	r7, sp, #8
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	f040 8083 	bne.w	8003b32 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_UART_Transmit+0x2e>
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e07b      	b.n	8003b34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_UART_Transmit+0x40>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e074      	b.n	8003b34 <HAL_UART_Transmit+0x12a>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2221      	movs	r2, #33	; 0x21
 8003a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a60:	f7fd fa06 	bl	8000e70 <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	88fa      	ldrh	r2, [r7, #6]
 8003a6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003a72:	e042      	b.n	8003afa <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8a:	d122      	bne.n	8003ad2 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2200      	movs	r2, #0
 8003a94:	2180      	movs	r1, #128	; 0x80
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fa6a 	bl	8003f70 <UART_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e046      	b.n	8003b34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	e017      	b.n	8003afa <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	3301      	adds	r3, #1
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	e013      	b.n	8003afa <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fa47 	bl	8003f70 <UART_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e023      	b.n	8003b34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	60ba      	str	r2, [r7, #8]
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1b7      	bne.n	8003a74 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2140      	movs	r1, #64	; 0x40
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fa2e 	bl	8003f70 <UART_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e00a      	b.n	8003b34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e000      	b.n	8003b34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d166      	bne.n	8003c24 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL) || (Size == 0U))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_UART_Receive_DMA+0x26>
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e05f      	b.n	8003c26 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UART_Receive_DMA+0x38>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e058      	b.n	8003c26 <HAL_UART_Receive_DMA+0xea>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	88fa      	ldrh	r2, [r7, #6]
 8003b86:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2222      	movs	r2, #34	; 0x22
 8003b92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <HAL_UART_Receive_DMA+0xf4>)
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <HAL_UART_Receive_DMA+0xf8>)
 8003ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <HAL_UART_Receive_DMA+0xfc>)
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 8003bb6:	f107 0308 	add.w	r3, r7, #8
 8003bba:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	f7fd fafb 	bl	80011c8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bfe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c1e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	08003e59 	.word	0x08003e59
 8003c34:	08003ec1 	.word	0x08003ec1
 8003c38:	08003edd 	.word	0x08003edd

08003c3c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10d      	bne.n	8003c8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_UART_IRQHandler+0x52>
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa6f 	bl	800416a <UART_Receive_IT>
      return;
 8003c8c:	e0cc      	b.n	8003e28 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80ab 	beq.w	8003dec <HAL_UART_IRQHandler+0x1b0>
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d105      	bne.n	8003cac <HAL_UART_IRQHandler+0x70>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 80a0 	beq.w	8003dec <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_UART_IRQHandler+0x90>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc4:	f043 0201 	orr.w	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_UART_IRQHandler+0xb0>
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	f043 0202 	orr.w	r2, r3, #2
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_UART_IRQHandler+0xd0>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d04:	f043 0204 	orr.w	r2, r3, #4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_UART_IRQHandler+0xf0>
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	f043 0208 	orr.w	r2, r3, #8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d078      	beq.n	8003e26 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <HAL_UART_IRQHandler+0x112>
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fa0e 	bl	800416a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf14      	ite	ne
 8003d5c:	2301      	movne	r3, #1
 8003d5e:	2300      	moveq	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <HAL_UART_IRQHandler+0x13a>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d031      	beq.n	8003dda <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f959 	bl	800402e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d023      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d98:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d013      	beq.n	8003dca <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	4a22      	ldr	r2, [pc, #136]	; (8003e30 <HAL_UART_IRQHandler+0x1f4>)
 8003da8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd fa6a 	bl	8001288 <HAL_DMA_Abort_IT>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d016      	beq.n	8003de8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e00e      	b.n	8003de8 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fc ff2e 	bl	8000c2c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	e00a      	b.n	8003de8 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fc ff2a 	bl	8000c2c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	e006      	b.n	8003de8 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fc ff26 	bl	8000c2c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003de6:	e01e      	b.n	8003e26 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	bf00      	nop
    return;
 8003dea:	e01c      	b.n	8003e26 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <HAL_UART_IRQHandler+0x1cc>
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f945 	bl	8004090 <UART_Transmit_IT>
    return;
 8003e06:	e00f      	b.n	8003e28 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_UART_IRQHandler+0x1ec>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f98c 	bl	800413a <UART_EndTransmit_IT>
    return;
 8003e22:	bf00      	nop
 8003e24:	e000      	b.n	8003e28 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003e26:	bf00      	nop
  }
}
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	08004069 	.word	0x08004069

08003e34 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d11e      	bne.n	8003eb2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e88:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7fc fec3 	bl	8000c3e <HAL_UART_RxCpltCallback>
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	60fb      	str	r3, [r7, #12]
  HAL_UART_RxHalfCpltCallback(huart); 
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff ffb9 	bl	8003e46 <HAL_UART_RxHalfCpltCallback>
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf14      	ite	ne
 8003efc:	2301      	movne	r3, #1
 8003efe:	2300      	moveq	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b21      	cmp	r3, #33	; 0x21
 8003f0e:	d108      	bne.n	8003f22 <UART_DMAError+0x46>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f1c:	68b8      	ldr	r0, [r7, #8]
 8003f1e:	f000 f871 	bl	8004004 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b22      	cmp	r3, #34	; 0x22
 8003f42:	d108      	bne.n	8003f56 <UART_DMAError+0x7a>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f50:	68b8      	ldr	r0, [r7, #8]
 8003f52:	f000 f86c 	bl	800402e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	f043 0210 	orr.w	r2, r3, #16
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003f62:	68b8      	ldr	r0, [r7, #8]
 8003f64:	f7fc fe62 	bl	8000c2c <HAL_UART_ErrorCallback>
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003f80:	e02c      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d028      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f90:	f7fc ff6e 	bl	8000e70 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d21d      	bcs.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e00f      	b.n	8003ffc <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d0c3      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800401a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004044:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7fc fdd2 	bl	8000c2c <HAL_UART_ErrorCallback>
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b21      	cmp	r3, #33	; 0x21
 80040a2:	d144      	bne.n	800412e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ac:	d11a      	bne.n	80040e4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c2:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	1c9a      	adds	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	621a      	str	r2, [r3, #32]
 80040d6:	e00e      	b.n	80040f6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	621a      	str	r2, [r3, #32]
 80040e2:	e008      	b.n	80040f6 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	1c59      	adds	r1, r3, #1
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6211      	str	r1, [r2, #32]
 80040ee:	781a      	ldrb	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29b      	uxth	r3, r3
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4619      	mov	r1, r3
 8004104:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004118:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004128:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e000      	b.n	8004130 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004150:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fe6a 	bl	8003e34 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b22      	cmp	r3, #34	; 0x22
 800417c:	d171      	bne.n	8004262 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004186:	d123      	bne.n	80041d0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10e      	bne.n	80041b4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	b29b      	uxth	r3, r3
 800419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	1c9a      	adds	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28
 80041b2:	e029      	b.n	8004208 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28
 80041ce:	e01b      	b.n	8004208 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6858      	ldr	r0, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	1c59      	adds	r1, r3, #1
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6291      	str	r1, [r2, #40]	; 0x28
 80041e8:	b2c2      	uxtb	r2, r0
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e00c      	b.n	8004208 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	1c58      	adds	r0, r3, #1
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	6288      	str	r0, [r1, #40]	; 0x28
 8004200:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29b      	uxth	r3, r3
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4619      	mov	r1, r3
 8004216:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004218:	2b00      	cmp	r3, #0
 800421a:	d120      	bne.n	800425e <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0220 	bic.w	r2, r2, #32
 800422a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800423a:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7fc fcf2 	bl	8000c3e <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e002      	b.n	8004264 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e000      	b.n	8004264 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004262:	2302      	movs	r3, #2
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800426c:	b5b0      	push	{r4, r5, r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042ae:	f023 030c 	bic.w	r3, r3, #12
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a6f      	ldr	r2, [pc, #444]	; (8004494 <UART_SetConfig+0x228>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d16b      	bne.n	80043b4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80042dc:	f7ff f82c 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 80042e0:	4602      	mov	r2, r0
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009a      	lsls	r2, r3, #2
 80042ea:	441a      	add	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	4a68      	ldr	r2, [pc, #416]	; (8004498 <UART_SetConfig+0x22c>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	011c      	lsls	r4, r3, #4
 8004300:	f7ff f81a 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 8004304:	4602      	mov	r2, r0
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	009a      	lsls	r2, r3, #2
 800430e:	441a      	add	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	fbb2 f5f3 	udiv	r5, r2, r3
 800431a:	f7ff f80d 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 800431e:	4602      	mov	r2, r0
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009a      	lsls	r2, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	4a58      	ldr	r2, [pc, #352]	; (8004498 <UART_SetConfig+0x22c>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2264      	movs	r2, #100	; 0x64
 800433e:	fb02 f303 	mul.w	r3, r2, r3
 8004342:	1aeb      	subs	r3, r5, r3
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	3332      	adds	r3, #50	; 0x32
 8004348:	4a53      	ldr	r2, [pc, #332]	; (8004498 <UART_SetConfig+0x22c>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004354:	441c      	add	r4, r3
 8004356:	f7fe ffef 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 800435a:	4602      	mov	r2, r0
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	009a      	lsls	r2, r3, #2
 8004364:	441a      	add	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004370:	f7fe ffe2 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 8004374:	4602      	mov	r2, r0
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	009a      	lsls	r2, r3, #2
 800437e:	441a      	add	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	4a43      	ldr	r2, [pc, #268]	; (8004498 <UART_SetConfig+0x22c>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	2264      	movs	r2, #100	; 0x64
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	1aeb      	subs	r3, r5, r3
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	3332      	adds	r3, #50	; 0x32
 800439e:	4a3e      	ldr	r2, [pc, #248]	; (8004498 <UART_SetConfig+0x22c>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	f003 020f 	and.w	r2, r3, #15
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4422      	add	r2, r4
 80043b0:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80043b2:	e06a      	b.n	800448a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80043b4:	f7fe ffac 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009a      	lsls	r2, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	4a32      	ldr	r2, [pc, #200]	; (8004498 <UART_SetConfig+0x22c>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	011c      	lsls	r4, r3, #4
 80043d8:	f7fe ff9a 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	009a      	lsls	r2, r3, #2
 80043e6:	441a      	add	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80043f2:	f7fe ff8d 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 80043f6:	4602      	mov	r2, r0
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	009a      	lsls	r2, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	4a22      	ldr	r2, [pc, #136]	; (8004498 <UART_SetConfig+0x22c>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2264      	movs	r2, #100	; 0x64
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	1aeb      	subs	r3, r5, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	; 0x32
 8004420:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <UART_SetConfig+0x22c>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442c:	441c      	add	r4, r3
 800442e:	f7fe ff6f 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 8004432:	4602      	mov	r2, r0
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009a      	lsls	r2, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	fbb2 f5f3 	udiv	r5, r2, r3
 8004448:	f7fe ff62 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 800444c:	4602      	mov	r2, r0
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009a      	lsls	r2, r3, #2
 8004456:	441a      	add	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <UART_SetConfig+0x22c>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	2264      	movs	r2, #100	; 0x64
 800446c:	fb02 f303 	mul.w	r3, r2, r3
 8004470:	1aeb      	subs	r3, r5, r3
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	3332      	adds	r3, #50	; 0x32
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <UART_SetConfig+0x22c>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4422      	add	r2, r4
 8004488:	609a      	str	r2, [r3, #8]
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bdb0      	pop	{r4, r5, r7, pc}
 8004492:	bf00      	nop
 8004494:	40013800 	.word	0x40013800
 8004498:	51eb851f 	.word	0x51eb851f

0800449c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800449c:	b084      	sub	sp, #16
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	f107 0014 	add.w	r0, r7, #20
 80044aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	b004      	add	sp, #16
 80044ba:	4770      	bx	lr

080044bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 80044c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044cc:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	4313      	orrs	r3, r2
 80044dc:	b29a      	uxth	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 80044fc:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8004500:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	b29b      	uxth	r3, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	b29b      	uxth	r3, r3
 8004512:	4013      	ands	r3, r2
 8004514:	b29a      	uxth	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004540:	b084      	sub	sp, #16
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	f107 0014 	add.w	r0, r7, #20
 800454e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ffa2 	bl	80044bc <USB_EnableGlobalInt>
    
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004584:	b004      	add	sp, #16
 8004586:	4770      	bx	lr

08004588 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004588:	b490      	push	{r4, r7}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	78db      	ldrb	r3, [r3, #3]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d85f      	bhi.n	800465a <USB_ActivateEndpoint+0xd2>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <USB_ActivateEndpoint+0x18>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	0800462f 	.word	0x0800462f
 80045a8:	080045dd 	.word	0x080045dd
 80045ac:	08004603 	.word	0x08004603
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d6:	b292      	uxth	r2, r2
 80045d8:	801a      	strh	r2, [r3, #0]
    break;
 80045da:	e03f      	b.n	800465c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	7812      	ldrb	r2, [r2, #0]
 80045f0:	0092      	lsls	r2, r2, #2
 80045f2:	440a      	add	r2, r1
 80045f4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	8013      	strh	r3, [r2, #0]
    break;
 8004600:	e02c      	b.n	800465c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004618:	b29a      	uxth	r2, r3
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8004628:	b292      	uxth	r2, r2
 800462a:	801a      	strh	r2, [r3, #0]
    break;
 800462c:	e016      	b.n	800465c <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004644:	b29a      	uxth	r2, r3
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004654:	b292      	uxth	r2, r2
 8004656:	801a      	strh	r2, [r3, #0]
    break;
 8004658:	e000      	b.n	800465c <USB_ActivateEndpoint+0xd4>
  default:
      break;
 800465a:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29a      	uxth	r2, r3
 800466a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800466e:	4013      	ands	r3, r2
 8004670:	b29a      	uxth	r2, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	4313      	orrs	r3, r2
 800467a:	b299      	uxth	r1, r3
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	4b75      	ldr	r3, [pc, #468]	; (800485c <USB_ActivateEndpoint+0x2d4>)
 8004688:	430b      	orrs	r3, r1
 800468a:	b29b      	uxth	r3, r3
 800468c:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	7a9b      	ldrb	r3, [r3, #10]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f040 80e8 	bne.w	8004868 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d04c      	beq.n	800473a <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	889b      	ldrh	r3, [r3, #4]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	0059      	lsls	r1, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4413      	add	r3, r2
 80046bc:	005a      	lsls	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046c6:	460a      	mov	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d013      	beq.n	8004708 <USB_ActivateEndpoint+0x180>
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	f640 730f 	movw	r3, #3855	; 0xf0f
 80046f2:	4013      	ands	r3, r2
 80046f4:	b299      	uxth	r1, r3
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	441a      	add	r2, r3
 8004700:	4b57      	ldr	r3, [pc, #348]	; (8004860 <USB_ActivateEndpoint+0x2d8>)
 8004702:	430b      	orrs	r3, r1
 8004704:	b29b      	uxth	r3, r3
 8004706:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471e:	b29c      	uxth	r4, r3
 8004720:	f084 0320 	eor.w	r3, r4, #32
 8004724:	b29c      	uxth	r4, r3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	4b4a      	ldr	r3, [pc, #296]	; (800485c <USB_ActivateEndpoint+0x2d4>)
 8004732:	4323      	orrs	r3, r4
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]
 8004738:	e1d9      	b.n	8004aee <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	889b      	ldrh	r3, [r3, #4]
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	b29b      	uxth	r3, r3
 8004742:	0059      	lsls	r1, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474a:	b29b      	uxth	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	3304      	adds	r3, #4
 8004758:	005a      	lsls	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004762:	460a      	mov	r2, r1
 8004764:	601a      	str	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800476c:	b29b      	uxth	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	3306      	adds	r3, #6
 800477a:	005a      	lsls	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b3e      	cmp	r3, #62	; 0x3e
 800478c:	d918      	bls.n	80047c0 <USB_ActivateEndpoint+0x238>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	81fb      	strh	r3, [r7, #14]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <USB_ActivateEndpoint+0x220>
 80047a2:	89fb      	ldrh	r3, [r7, #14]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	81fb      	strh	r3, [r7, #14]
 80047a8:	89fb      	ldrh	r3, [r7, #14]
 80047aa:	029b      	lsls	r3, r3, #10
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e012      	b.n	80047e6 <USB_ActivateEndpoint+0x25e>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	81fb      	strh	r3, [r7, #14]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <USB_ActivateEndpoint+0x252>
 80047d4:	89fb      	ldrh	r3, [r7, #14]
 80047d6:	3301      	adds	r3, #1
 80047d8:	81fb      	strh	r3, [r7, #14]
 80047da:	89fb      	ldrh	r3, [r7, #14]
 80047dc:	029b      	lsls	r3, r3, #10
 80047de:	b29b      	uxth	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d013      	beq.n	8004824 <USB_ActivateEndpoint+0x29c>
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29a      	uxth	r2, r3
 800480a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800480e:	4013      	ands	r3, r2
 8004810:	b299      	uxth	r1, r3
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	441a      	add	r2, r3
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <USB_ActivateEndpoint+0x2dc>)
 800481e:	430b      	orrs	r3, r1
 8004820:	b29b      	uxth	r3, r3
 8004822:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	b29c      	uxth	r4, r3
 800483c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004840:	b29c      	uxth	r4, r3
 8004842:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004846:	b29c      	uxth	r4, r3
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	4b02      	ldr	r3, [pc, #8]	; (800485c <USB_ActivateEndpoint+0x2d4>)
 8004854:	4323      	orrs	r3, r4
 8004856:	b29b      	uxth	r3, r3
 8004858:	8013      	strh	r3, [r2, #0]
 800485a:	e148      	b.n	8004aee <USB_ActivateEndpoint+0x566>
 800485c:	ffff8080 	.word	0xffff8080
 8004860:	ffff80c0 	.word	0xffff80c0
 8004864:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29a      	uxth	r2, r3
 8004876:	f640 630f 	movw	r3, #3599	; 0xe0f
 800487a:	4013      	ands	r3, r2
 800487c:	b299      	uxth	r1, r3
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	4b9c      	ldr	r3, [pc, #624]	; (8004afc <USB_ActivateEndpoint+0x574>)
 800488a:	430b      	orrs	r3, r1
 800488c:	b29b      	uxth	r3, r3
 800488e:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	88db      	ldrh	r3, [r3, #6]
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	b29b      	uxth	r3, r3
 8004898:	0059      	lsls	r1, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	4413      	add	r3, r2
 80048ac:	005a      	lsls	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b6:	460a      	mov	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	891b      	ldrh	r3, [r3, #8]
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	0059      	lsls	r1, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4413      	add	r3, r2
 80048d6:	3304      	adds	r3, #4
 80048d8:	005a      	lsls	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048e2:	460a      	mov	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]
    
    if (ep->is_in==0)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	785b      	ldrb	r3, [r3, #1]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 8083 	bne.w	80049f6 <USB_ActivateEndpoint+0x46e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d013      	beq.n	800492e <USB_ActivateEndpoint+0x3a6>
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29a      	uxth	r2, r3
 8004914:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004918:	4013      	ands	r3, r2
 800491a:	b299      	uxth	r1, r3
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	441a      	add	r2, r3
 8004926:	4b76      	ldr	r3, [pc, #472]	; (8004b00 <USB_ActivateEndpoint+0x578>)
 8004928:	430b      	orrs	r3, r1
 800492a:	b29b      	uxth	r3, r3
 800492c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <USB_ActivateEndpoint+0x3e4>
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29a      	uxth	r2, r3
 8004952:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004956:	4013      	ands	r3, r2
 8004958:	b299      	uxth	r1, r3
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	441a      	add	r2, r3
 8004964:	4b67      	ldr	r3, [pc, #412]	; (8004b04 <USB_ActivateEndpoint+0x57c>)
 8004966:	430b      	orrs	r3, r1
 8004968:	b29b      	uxth	r3, r3
 800496a:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29a      	uxth	r2, r3
 800497a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800497e:	4013      	ands	r3, r2
 8004980:	b299      	uxth	r1, r3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	441a      	add	r2, r3
 800498c:	4b5d      	ldr	r3, [pc, #372]	; (8004b04 <USB_ActivateEndpoint+0x57c>)
 800498e:	430b      	orrs	r3, r1
 8004990:	b29b      	uxth	r3, r3
 8004992:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	b29c      	uxth	r4, r3
 80049ac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80049b0:	b29c      	uxth	r4, r3
 80049b2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80049b6:	b29c      	uxth	r4, r3
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	4b51      	ldr	r3, [pc, #324]	; (8004b08 <USB_ActivateEndpoint+0x580>)
 80049c4:	4323      	orrs	r3, r4
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e0:	b29c      	uxth	r4, r3
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	4b46      	ldr	r3, [pc, #280]	; (8004b08 <USB_ActivateEndpoint+0x580>)
 80049ee:	4323      	orrs	r3, r4
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	8013      	strh	r3, [r2, #0]
 80049f4:	e07b      	b.n	8004aee <USB_ActivateEndpoint+0x566>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d013      	beq.n	8004a34 <USB_ActivateEndpoint+0x4ac>
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004a1e:	4013      	ands	r3, r2
 8004a20:	b299      	uxth	r1, r3
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <USB_ActivateEndpoint+0x578>)
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d013      	beq.n	8004a72 <USB_ActivateEndpoint+0x4ea>
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	b299      	uxth	r1, r3
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	441a      	add	r2, r3
 8004a6a:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <USB_ActivateEndpoint+0x57c>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004a84:	4013      	ands	r3, r2
 8004a86:	b299      	uxth	r1, r3
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <USB_ActivateEndpoint+0x578>)
 8004a94:	430b      	orrs	r3, r1
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab0:	b29c      	uxth	r4, r3
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <USB_ActivateEndpoint+0x580>)
 8004abe:	4323      	orrs	r3, r4
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	b29c      	uxth	r4, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <USB_ActivateEndpoint+0x580>)
 8004ae8:	4323      	orrs	r3, r4
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc90      	pop	{r4, r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	ffff8180 	.word	0xffff8180
 8004b00:	ffffc080 	.word	0xffffc080
 8004b04:	ffff80c0 	.word	0xffff80c0
 8004b08:	ffff8080 	.word	0xffff8080

08004b0c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b0c:	b490      	push	{r4, r7}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	7a9b      	ldrb	r3, [r3, #10]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d16d      	bne.n	8004bfa <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	785b      	ldrb	r3, [r3, #1]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d034      	beq.n	8004b90 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d013      	beq.n	8004b64 <USB_DeactivateEndpoint+0x58>
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004b4e:	4013      	ands	r3, r2
 8004b50:	b299      	uxth	r1, r3
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	4b68      	ldr	r3, [pc, #416]	; (8004d00 <USB_DeactivateEndpoint+0x1f4>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7a:	b29c      	uxth	r4, r3
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	4b5f      	ldr	r3, [pc, #380]	; (8004d04 <USB_DeactivateEndpoint+0x1f8>)
 8004b88:	4323      	orrs	r3, r4
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]
 8004b8e:	e139      	b.n	8004e04 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d013      	beq.n	8004bce <USB_DeactivateEndpoint+0xc2>
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004bb8:	4013      	ands	r3, r2
 8004bba:	b299      	uxth	r1, r3
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <USB_DeactivateEndpoint+0x1fc>)
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	b29c      	uxth	r4, r3
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	4b44      	ldr	r3, [pc, #272]	; (8004d04 <USB_DeactivateEndpoint+0x1f8>)
 8004bf2:	4323      	orrs	r3, r4
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	8013      	strh	r3, [r2, #0]
 8004bf8:	e104      	b.n	8004e04 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	785b      	ldrb	r3, [r3, #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f040 8084 	bne.w	8004d0c <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d013      	beq.n	8004c42 <USB_DeactivateEndpoint+0x136>
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b299      	uxth	r1, r3
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	4b33      	ldr	r3, [pc, #204]	; (8004d08 <USB_DeactivateEndpoint+0x1fc>)
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <USB_DeactivateEndpoint+0x174>
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	b299      	uxth	r1, r3
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	4b21      	ldr	r3, [pc, #132]	; (8004d00 <USB_DeactivateEndpoint+0x1f4>)
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004c92:	4013      	ands	r3, r2
 8004c94:	b299      	uxth	r1, r3
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <USB_DeactivateEndpoint+0x1f4>)
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	b29c      	uxth	r4, r3
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <USB_DeactivateEndpoint+0x1f8>)
 8004ccc:	4323      	orrs	r3, r4
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce8:	b29c      	uxth	r4, r3
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	441a      	add	r2, r3
 8004cf4:	4b03      	ldr	r3, [pc, #12]	; (8004d04 <USB_DeactivateEndpoint+0x1f8>)
 8004cf6:	4323      	orrs	r3, r4
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]
 8004cfc:	e082      	b.n	8004e04 <USB_DeactivateEndpoint+0x2f8>
 8004cfe:	bf00      	nop
 8004d00:	ffff80c0 	.word	0xffff80c0
 8004d04:	ffff8080 	.word	0xffff8080
 8004d08:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d013      	beq.n	8004d4a <USB_DeactivateEndpoint+0x23e>
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004d34:	4013      	ands	r3, r2
 8004d36:	b299      	uxth	r1, r3
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	4b33      	ldr	r3, [pc, #204]	; (8004e10 <USB_DeactivateEndpoint+0x304>)
 8004d44:	430b      	orrs	r3, r1
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d013      	beq.n	8004d88 <USB_DeactivateEndpoint+0x27c>
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004d72:	4013      	ands	r3, r2
 8004d74:	b299      	uxth	r1, r3
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	4b24      	ldr	r3, [pc, #144]	; (8004e14 <USB_DeactivateEndpoint+0x308>)
 8004d82:	430b      	orrs	r3, r1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b299      	uxth	r1, r3
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <USB_DeactivateEndpoint+0x304>)
 8004daa:	430b      	orrs	r3, r1
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc6:	b29c      	uxth	r4, r3
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	441a      	add	r2, r3
 8004dd2:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <USB_DeactivateEndpoint+0x30c>)
 8004dd4:	4323      	orrs	r3, r4
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df0:	b29c      	uxth	r4, r3
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	441a      	add	r2, r3
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <USB_DeactivateEndpoint+0x30c>)
 8004dfe:	4323      	orrs	r3, r4
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc90      	pop	{r4, r7}
 8004e0e:	4770      	bx	lr
 8004e10:	ffffc080 	.word	0xffffc080
 8004e14:	ffff80c0 	.word	0xffff80c0
 8004e18:	ffff8080 	.word	0xffff8080

08004e1c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b08d      	sub	sp, #52	; 0x34
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	785b      	ldrb	r3, [r3, #1]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	f040 8149 	bne.w	80050cc <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d909      	bls.n	8004e5a <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	1ad2      	subs	r2, r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	619a      	str	r2, [r3, #24]
 8004e58:	e005      	b.n	8004e66 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2200      	movs	r2, #0
 8004e64:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	7a9b      	ldrb	r3, [r3, #10]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d11b      	bne.n	8004ea6 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6959      	ldr	r1, [r3, #20]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	889a      	ldrh	r2, [r3, #4]
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fb7d 	bl	800557a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	3302      	adds	r3, #2
 8004e94:	005a      	lsls	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	e0f6      	b.n	8005094 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d059      	beq.n	8004f70 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d13b      	bne.n	8004f3c <USB_EPStartXfer+0x120>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3306      	adds	r3, #6
 8004ed8:	005a      	lsls	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee8:	d916      	bls.n	8004f18 <USB_EPStartXfer+0xfc>
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <USB_EPStartXfer+0xe4>
 8004efa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004efc:	3b01      	subs	r3, #1
 8004efe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f02:	029b      	lsls	r3, r3, #10
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e027      	b.n	8004f68 <USB_EPStartXfer+0x14c>
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <USB_EPStartXfer+0x112>
 8004f28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f30:	029b      	lsls	r3, r3, #10
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	e015      	b.n	8004f68 <USB_EPStartXfer+0x14c>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d111      	bne.n	8004f68 <USB_EPStartXfer+0x14c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4413      	add	r3, r2
 8004f56:	3302      	adds	r3, #2
 8004f58:	005a      	lsls	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f62:	461a      	mov	r2, r3
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	891b      	ldrh	r3, [r3, #8]
 8004f6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f6e:	e058      	b.n	8005022 <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d13b      	bne.n	8004ff0 <USB_EPStartXfer+0x1d4>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4413      	add	r3, r2
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	005a      	lsls	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f9c:	d916      	bls.n	8004fcc <USB_EPStartXfer+0x1b0>
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	f003 031f 	and.w	r3, r3, #31
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <USB_EPStartXfer+0x198>
 8004fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fb6:	029b      	lsls	r3, r3, #10
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e027      	b.n	800501c <USB_EPStartXfer+0x200>
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <USB_EPStartXfer+0x1c6>
 8004fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fde:	3301      	adds	r3, #1
 8004fe0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e015      	b.n	800501c <USB_EPStartXfer+0x200>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d111      	bne.n	800501c <USB_EPStartXfer+0x200>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	3302      	adds	r3, #2
 800500c:	005a      	lsls	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005016:	461a      	mov	r2, r3
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	88db      	ldrh	r3, [r3, #6]
 8005020:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6959      	ldr	r1, [r3, #20]
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	b29b      	uxth	r3, r3
 800502a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 faa4 	bl	800557a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d114      	bne.n	8005064 <USB_EPStartXfer+0x248>
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29a      	uxth	r2, r3
 8005048:	f640 730f 	movw	r3, #3855	; 0xf0f
 800504c:	4013      	ands	r3, r2
 800504e:	b299      	uxth	r1, r3
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	4b92      	ldr	r3, [pc, #584]	; (80052a4 <USB_EPStartXfer+0x488>)
 800505c:	430b      	orrs	r3, r1
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]
 8005062:	e017      	b.n	8005094 <USB_EPStartXfer+0x278>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d113      	bne.n	8005094 <USB_EPStartXfer+0x278>
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29a      	uxth	r2, r3
 800507a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800507e:	4013      	ands	r3, r2
 8005080:	b299      	uxth	r1, r3
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	441a      	add	r2, r3
 800508c:	4b86      	ldr	r3, [pc, #536]	; (80052a8 <USB_EPStartXfer+0x48c>)
 800508e:	430b      	orrs	r3, r1
 8005090:	b29b      	uxth	r3, r3
 8005092:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050aa:	b29c      	uxth	r4, r3
 80050ac:	f084 0310 	eor.w	r3, r4, #16
 80050b0:	b29c      	uxth	r4, r3
 80050b2:	f084 0320 	eor.w	r3, r4, #32
 80050b6:	b29c      	uxth	r4, r3
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	441a      	add	r2, r3
 80050c2:	4b7a      	ldr	r3, [pc, #488]	; (80052ac <USB_EPStartXfer+0x490>)
 80050c4:	4323      	orrs	r3, r4
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	8013      	strh	r3, [r2, #0]
 80050ca:	e122      	b.n	8005312 <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d909      	bls.n	80050ec <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	1ad2      	subs	r2, r2, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	619a      	str	r2, [r3, #24]
 80050ea:	e005      	b.n	80050f8 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2200      	movs	r2, #0
 80050f6:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	7a9b      	ldrb	r3, [r3, #10]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d13b      	bne.n	8005178 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4413      	add	r3, r2
 8005112:	3306      	adds	r3, #6
 8005114:	005a      	lsls	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	2b3e      	cmp	r3, #62	; 0x3e
 8005124:	d916      	bls.n	8005154 <USB_EPStartXfer+0x338>
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	847b      	strh	r3, [r7, #34]	; 0x22
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <USB_EPStartXfer+0x320>
 8005136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005138:	3b01      	subs	r3, #1
 800513a:	847b      	strh	r3, [r7, #34]	; 0x22
 800513c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800513e:	029b      	lsls	r3, r3, #10
 8005140:	b29b      	uxth	r3, r3
 8005142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514a:	b29b      	uxth	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e0c3      	b.n	80052dc <USB_EPStartXfer+0x4c0>
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	847b      	strh	r3, [r7, #34]	; 0x22
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <USB_EPStartXfer+0x34e>
 8005164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005166:	3301      	adds	r3, #1
 8005168:	847b      	strh	r3, [r7, #34]	; 0x22
 800516a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800516c:	029b      	lsls	r3, r3, #10
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	e0b1      	b.n	80052dc <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	785b      	ldrb	r3, [r3, #1]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d13b      	bne.n	80051f8 <USB_EPStartXfer+0x3dc>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005186:	b29b      	uxth	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	3302      	adds	r3, #2
 8005194:	005a      	lsls	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	2b3e      	cmp	r3, #62	; 0x3e
 80051a4:	d916      	bls.n	80051d4 <USB_EPStartXfer+0x3b8>
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	843b      	strh	r3, [r7, #32]
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d102      	bne.n	80051bc <USB_EPStartXfer+0x3a0>
 80051b6:	8c3b      	ldrh	r3, [r7, #32]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	843b      	strh	r3, [r7, #32]
 80051bc:	8c3b      	ldrh	r3, [r7, #32]
 80051be:	029b      	lsls	r3, r3, #10
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e027      	b.n	8005224 <USB_EPStartXfer+0x408>
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	843b      	strh	r3, [r7, #32]
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <USB_EPStartXfer+0x3ce>
 80051e4:	8c3b      	ldrh	r3, [r7, #32]
 80051e6:	3301      	adds	r3, #1
 80051e8:	843b      	strh	r3, [r7, #32]
 80051ea:	8c3b      	ldrh	r3, [r7, #32]
 80051ec:	029b      	lsls	r3, r3, #10
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e015      	b.n	8005224 <USB_EPStartXfer+0x408>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d111      	bne.n	8005224 <USB_EPStartXfer+0x408>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005206:	b29b      	uxth	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	3302      	adds	r3, #2
 8005214:	005a      	lsls	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521e:	461a      	mov	r2, r3
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d141      	bne.n	80052b0 <USB_EPStartXfer+0x494>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005232:	b29b      	uxth	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4413      	add	r3, r2
 800523e:	3306      	adds	r3, #6
 8005240:	005a      	lsls	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	2b3e      	cmp	r3, #62	; 0x3e
 8005250:	d916      	bls.n	8005280 <USB_EPStartXfer+0x464>
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	83fb      	strh	r3, [r7, #30]
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <USB_EPStartXfer+0x44c>
 8005262:	8bfb      	ldrh	r3, [r7, #30]
 8005264:	3b01      	subs	r3, #1
 8005266:	83fb      	strh	r3, [r7, #30]
 8005268:	8bfb      	ldrh	r3, [r7, #30]
 800526a:	029b      	lsls	r3, r3, #10
 800526c:	b29b      	uxth	r3, r3
 800526e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005276:	b29b      	uxth	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e02d      	b.n	80052dc <USB_EPStartXfer+0x4c0>
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	83fb      	strh	r3, [r7, #30]
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <USB_EPStartXfer+0x47a>
 8005290:	8bfb      	ldrh	r3, [r7, #30]
 8005292:	3301      	adds	r3, #1
 8005294:	83fb      	strh	r3, [r7, #30]
 8005296:	8bfb      	ldrh	r3, [r7, #30]
 8005298:	029b      	lsls	r3, r3, #10
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e01b      	b.n	80052dc <USB_EPStartXfer+0x4c0>
 80052a4:	ffff80c0 	.word	0xffff80c0
 80052a8:	ffffc080 	.word	0xffffc080
 80052ac:	ffff8080 	.word	0xffff8080
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d111      	bne.n	80052dc <USB_EPStartXfer+0x4c0>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052be:	b29b      	uxth	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4413      	add	r3, r2
 80052ca:	3302      	adds	r3, #2
 80052cc:	005a      	lsls	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d6:	461a      	mov	r2, r3
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f2:	b29c      	uxth	r4, r3
 80052f4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80052f8:	b29c      	uxth	r4, r3
 80052fa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80052fe:	b29c      	uxth	r4, r3
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	441a      	add	r2, r3
 800530a:	4b04      	ldr	r3, [pc, #16]	; (800531c <USB_EPStartXfer+0x500>)
 800530c:	4323      	orrs	r3, r4
 800530e:	b29b      	uxth	r3, r3
 8005310:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3734      	adds	r7, #52	; 0x34
 8005318:	46bd      	mov	sp, r7
 800531a:	bd90      	pop	{r4, r7, pc}
 800531c:	ffff8080 	.word	0xffff8080

08005320 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 8005320:	b490      	push	{r4, r7}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d118      	bne.n	8005364 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8005344:	401c      	ands	r4, r3
 8005346:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800534a:	f084 0410 	eor.w	r4, r4, #16
 800534e:	b2a1      	uxth	r1, r4
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	4b20      	ldr	r3, [pc, #128]	; (80053dc <USB_EPSetStall+0xbc>)
 800535c:	430b      	orrs	r3, r1
 800535e:	b29b      	uxth	r3, r3
 8005360:	8013      	strh	r3, [r2, #0]
 8005362:	e034      	b.n	80053ce <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d018      	beq.n	800539e <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005382:	b29c      	uxth	r4, r3
 8005384:	f084 0310 	eor.w	r3, r4, #16
 8005388:	b29c      	uxth	r4, r3
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <USB_EPSetStall+0xbc>)
 8005396:	4323      	orrs	r3, r4
 8005398:	b29b      	uxth	r3, r3
 800539a:	8013      	strh	r3, [r2, #0]
 800539c:	e017      	b.n	80053ce <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b4:	b29c      	uxth	r4, r3
 80053b6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80053ba:	b29c      	uxth	r4, r3
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	441a      	add	r2, r3
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <USB_EPSetStall+0xbc>)
 80053c8:	4323      	orrs	r3, r4
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc90      	pop	{r4, r7}
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	ffff8080 	.word	0xffff8080

080053e0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053e0:	b490      	push	{r4, r7}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	785b      	ldrb	r3, [r3, #1]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d03a      	beq.n	8005468 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d013      	beq.n	8005430 <USB_EPClearStall+0x50>
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29a      	uxth	r2, r3
 8005416:	f640 730f 	movw	r3, #3855	; 0xf0f
 800541a:	4013      	ands	r3, r2
 800541c:	b299      	uxth	r1, r3
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	4b2f      	ldr	r3, [pc, #188]	; (80054e8 <USB_EPClearStall+0x108>)
 800542a:	430b      	orrs	r3, r1
 800542c:	b29b      	uxth	r3, r3
 800542e:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005446:	b29c      	uxth	r4, r3
 8005448:	f084 0310 	eor.w	r3, r4, #16
 800544c:	b29c      	uxth	r4, r3
 800544e:	f084 0320 	eor.w	r3, r4, #32
 8005452:	b29c      	uxth	r4, r3
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	441a      	add	r2, r3
 800545e:	4b23      	ldr	r3, [pc, #140]	; (80054ec <USB_EPClearStall+0x10c>)
 8005460:	4323      	orrs	r3, r4
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]
 8005466:	e039      	b.n	80054dc <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d013      	beq.n	80054a6 <USB_EPClearStall+0xc6>
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29a      	uxth	r2, r3
 800548c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005490:	4013      	ands	r3, r2
 8005492:	b299      	uxth	r1, r3
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	4b14      	ldr	r3, [pc, #80]	; (80054f0 <USB_EPClearStall+0x110>)
 80054a0:	430b      	orrs	r3, r1
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054bc:	b29c      	uxth	r4, r3
 80054be:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80054c2:	b29c      	uxth	r4, r3
 80054c4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80054c8:	b29c      	uxth	r4, r3
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <USB_EPClearStall+0x10c>)
 80054d6:	4323      	orrs	r3, r4
 80054d8:	b29b      	uxth	r3, r3
 80054da:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc90      	pop	{r4, r7}
 80054e6:	4770      	bx	lr
 80054e8:	ffff80c0 	.word	0xffff80c0
 80054ec:	ffff8080 	.word	0xffff8080
 80054f0:	ffffc080 	.word	0xffffc080

080054f4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2280      	movs	r2, #128	; 0x80
 800550a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr

08005542 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 8005542:	b480      	push	{r7}
 8005544:	b085      	sub	sp, #20
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005554:	b29b      	uxth	r3, r3
 8005556:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005558:	68fb      	ldr	r3, [r7, #12]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr

0800557a <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800557a:	b480      	push	{r7}
 800557c:	b08b      	sub	sp, #44	; 0x2c
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	4611      	mov	r1, r2
 8005586:	461a      	mov	r2, r3
 8005588:	460b      	mov	r3, r1
 800558a:	80fb      	strh	r3, [r7, #6]
 800558c:	4613      	mov	r3, r2
 800558e:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8005590:	88bb      	ldrh	r3, [r7, #4]
 8005592:	3301      	adds	r3, #1
 8005594:	105b      	asrs	r3, r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
 800559c:	2300      	movs	r3, #0
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	461a      	mov	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b6:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
 80055bc:	e01b      	b.n	80055f6 <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	461a      	mov	r2, r3
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	1c9a      	adds	r2, r3, #2
 80055dc:	623a      	str	r2, [r7, #32]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	b292      	uxth	r2, r2
 80055e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	3302      	adds	r3, #2
 80055e8:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	3301      	adds	r3, #1
 80055ee:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	3b01      	subs	r3, #1
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e0      	bne.n	80055be <USB_WritePMA+0x44>
  }
}
 80055fc:	bf00      	nop
 80055fe:	372c      	adds	r7, #44	; 0x2c
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr

08005606 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005606:	b480      	push	{r7}
 8005608:	b089      	sub	sp, #36	; 0x24
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	4611      	mov	r1, r2
 8005612:	461a      	mov	r2, r3
 8005614:	460b      	mov	r3, r1
 8005616:	80fb      	strh	r3, [r7, #6]
 8005618:	4613      	mov	r3, r2
 800561a:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800561c:	88bb      	ldrh	r3, [r7, #4]
 800561e:	3301      	adds	r3, #1
 8005620:	105b      	asrs	r3, r3, #1
 8005622:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 8005628:	2300      	movs	r3, #0
 800562a:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800562c:	88fb      	ldrh	r3, [r7, #6]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	461a      	mov	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800563a:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	e00e      	b.n	8005660 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	1d1a      	adds	r2, r3, #4
 8005646:	61ba      	str	r2, [r7, #24]
 8005648:	6819      	ldr	r1, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	60ba      	str	r2, [r7, #8]
 8005650:	b28a      	uxth	r2, r1
 8005652:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	3301      	adds	r3, #1
 8005658:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	3b01      	subs	r3, #1
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1ed      	bne.n	8005642 <USB_ReadPMA+0x3c>
  }
}
 8005666:	bf00      	nop
 8005668:	3724      	adds	r7, #36	; 0x24
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800567c:	2300      	movs	r3, #0
 800567e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	7c1b      	ldrb	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10e      	bne.n	80056a6 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800568c:	2202      	movs	r2, #2
 800568e:	2181      	movs	r1, #129	; 0x81
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f001 fd0c 	bl	80070ae <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8005696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800569a:	2202      	movs	r2, #2
 800569c:	2101      	movs	r1, #1
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f001 fd05 	bl	80070ae <USBD_LL_OpenEP>
 80056a4:	e00b      	b.n	80056be <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80056a6:	2340      	movs	r3, #64	; 0x40
 80056a8:	2202      	movs	r2, #2
 80056aa:	2181      	movs	r1, #129	; 0x81
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f001 fcfe 	bl	80070ae <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80056b2:	2340      	movs	r3, #64	; 0x40
 80056b4:	2202      	movs	r2, #2
 80056b6:	2101      	movs	r1, #1
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f001 fcf8 	bl	80070ae <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80056be:	2308      	movs	r3, #8
 80056c0:	2203      	movs	r2, #3
 80056c2:	2182      	movs	r1, #130	; 0x82
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 fcf2 	bl	80070ae <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80056ca:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80056ce:	f001 fe0f 	bl	80072f0 <USBD_static_malloc>
 80056d2:	4602      	mov	r2, r0
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
 80056e8:	e026      	b.n	8005738 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056f0:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2200      	movs	r2, #0
 8005708:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	7c1b      	ldrb	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800571a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800571e:	2101      	movs	r1, #1
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f001 fdae 	bl	8007282 <USBD_LL_PrepareReceive>
 8005726:	e007      	b.n	8005738 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800572e:	2340      	movs	r3, #64	; 0x40
 8005730:	2101      	movs	r1, #1
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 fda5 	bl	8007282 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	460b      	mov	r3, r1
 800574c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8005752:	2181      	movs	r1, #129	; 0x81
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 fcd0 	bl	80070fa <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800575a:	2101      	movs	r1, #1
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f001 fccc 	bl	80070fa <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8005762:	2182      	movs	r1, #130	; 0x82
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 fcc8 	bl	80070fa <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00e      	beq.n	8005792 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005784:	4618      	mov	r0, r3
 8005786:	f001 fdbf 	bl	8007308 <USBD_static_free>
    pdev->pClassData = NULL;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8005792:	7bfb      	ldrb	r3, [r7, #15]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80057ac:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d03a      	beq.n	8005830 <USBD_CDC_Setup+0x94>
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d000      	beq.n	80057c0 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 80057be:	e043      	b.n	8005848 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	88db      	ldrh	r3, [r3, #6]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d029      	beq.n	800581c <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	b25b      	sxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	da11      	bge.n	80057f6 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80057de:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	88d2      	ldrh	r2, [r2, #6]
 80057e4:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 80057e6:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	88db      	ldrh	r3, [r3, #6]
 80057ec:	461a      	mov	r2, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f001 f80e 	bl	8006810 <USBD_CtlSendData>
    break;
 80057f4:	e029      	b.n	800584a <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	785a      	ldrb	r2, [r3, #1]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	88db      	ldrh	r3, [r3, #6]
 8005804:	b2da      	uxtb	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 800580c:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	88db      	ldrh	r3, [r3, #6]
 8005812:	461a      	mov	r2, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 f829 	bl	800686c <USBD_CtlPrepareRx>
    break;
 800581a:	e016      	b.n	800584a <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	7850      	ldrb	r0, [r2, #1]
 8005828:	2200      	movs	r2, #0
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	4798      	blx	r3
    break;
 800582e:	e00c      	b.n	800584a <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b0a      	cmp	r3, #10
 8005836:	d001      	beq.n	800583c <USBD_CDC_Setup+0xa0>
 8005838:	2b0b      	cmp	r3, #11
      break;
 800583a:	e005      	b.n	8005848 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 800583c:	2201      	movs	r2, #1
 800583e:	4905      	ldr	r1, [pc, #20]	; (8005854 <USBD_CDC_Setup+0xb8>)
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 ffe5 	bl	8006810 <USBD_CtlSendData>
      break;
 8005846:	bf00      	nop
    break;
 8005848:	bf00      	nop
  }
  return USBD_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	2000034c 	.word	0x2000034c

08005858 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800586a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e000      	b.n	8005884 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8005882:	2302      	movs	r3, #2
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr

0800588e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	460b      	mov	r3, r1
 8005898:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80058a0:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 fd0e 	bl	80072c8 <USBD_LL_GetRxDataSize>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00d      	beq.n	80058da <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058d2:	4611      	mov	r1, r2
 80058d4:	4798      	blx	r3

    return USBD_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e000      	b.n	80058dc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80058da:	2302      	movs	r3, #2
  }
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80058f2:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d015      	beq.n	800592a <USBD_CDC_EP0_RxReady+0x46>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005904:	2bff      	cmp	r3, #255	; 0xff
 8005906:	d010      	beq.n	800592a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005916:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800591e:	b292      	uxth	r2, r2
 8005920:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	22ff      	movs	r2, #255	; 0xff
 8005926:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2243      	movs	r2, #67	; 0x43
 8005940:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005942:	4b03      	ldr	r3, [pc, #12]	; (8005950 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	200000b4 	.word	0x200000b4

08005954 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2243      	movs	r2, #67	; 0x43
 8005960:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005962:	4b03      	ldr	r3, [pc, #12]	; (8005970 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20000070 	.word	0x20000070

08005974 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2243      	movs	r2, #67	; 0x43
 8005980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005982:	4b03      	ldr	r3, [pc, #12]	; (8005990 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	200000f8 	.word	0x200000f8

08005994 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	220a      	movs	r2, #10
 80059a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80059a2:	4b03      	ldr	r3, [pc, #12]	; (80059b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	2000002c 	.word	0x2000002c

080059b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80059be:	2302      	movs	r3, #2
 80059c0:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 80059d0:	2300      	movs	r3, #0
 80059d2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	4613      	mov	r3, r2
 80059ec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80059f4:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr

08005a12 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a22:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a46:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d017      	beq.n	8005a82 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d110      	bne.n	8005a7e <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2181      	movs	r1, #129	; 0x81
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fbe1 	bl	800723c <USBD_LL_Transmit>
      
      return USBD_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e002      	b.n	8005a84 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8005a82:	2302      	movs	r3, #2
  }
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a9a:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d017      	beq.n	8005ad6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	7c1b      	ldrb	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ab8:	2101      	movs	r1, #1
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 fbe1 	bl	8007282 <USBD_LL_PrepareReceive>
 8005ac0:	e007      	b.n	8005ad2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ac8:	2340      	movs	r3, #64	; 0x40
 8005aca:	2101      	movs	r1, #1
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 fbd8 	bl	8007282 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e000      	b.n	8005ad8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005ad6:	2302      	movs	r3, #2
  }
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8005af4:	2302      	movs	r3, #2
 8005af6:	e01a      	b.n	8005b2e <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	79fa      	ldrb	r2, [r7, #7]
 8005b24:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f001 fa4c 	bl	8006fc4 <USBD_LL_Init>
  
  return USBD_OK; 
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d006      	beq.n	8005b58 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	73fb      	strb	r3, [r7, #15]
 8005b56:	e001      	b.n	8005b5c <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8005b58:	2302      	movs	r3, #2
 8005b5a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 fa81 	bl	8007078 <USBD_LL_Start>
  
  return USBD_OK;  
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	78fa      	ldrb	r2, [r7, #3]
 8005bb8:	4611      	mov	r1, r2
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	78fa      	ldrb	r2, [r7, #3]
 8005be8:	4611      	mov	r1, r2
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
  return USBD_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fd59 	bl	80066c2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005c1e:	461a      	mov	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005c2c:	f003 031f 	and.w	r3, r3, #31
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d00b      	beq.n	8005c4c <USBD_LL_SetupStage+0x54>
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d011      	beq.n	8005c5c <USBD_LL_SetupStage+0x64>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d117      	bne.n	8005c6c <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f987 	bl	8005f58 <USBD_StdDevReq>
    break;
 8005c4a:	e01a      	b.n	8005c82 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f9cf 	bl	8005ff8 <USBD_StdItfReq>
    break;
 8005c5a:	e012      	b.n	8005c82 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f9fa 	bl	800605e <USBD_StdEPReq>
    break;
 8005c6a:	e00a      	b.n	8005c82 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005c72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f001 fa5c 	bl	8007138 <USBD_LL_StallEP>
    break;
 8005c80:	bf00      	nop
  }  
  return USBD_OK;  
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	460b      	mov	r3, r1
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8005c9a:	7afb      	ldrb	r3, [r7, #11]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d138      	bne.n	8005d12 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005ca6:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d142      	bne.n	8005d38 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d914      	bls.n	8005ce8 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	1ad2      	subs	r2, r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	bf28      	it	cs
 8005cd8:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fde1 	bl	80068a8 <USBD_CtlContinueRx>
 8005ce6:	e027      	b.n	8005d38 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d105      	bne.n	8005d0a <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 fdde 	bl	80068cc <USBD_CtlSendStatus>
 8005d10:	e012      	b.n	8005d38 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00c      	beq.n	8005d38 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d107      	bne.n	8005d38 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	7afa      	ldrb	r2, [r7, #11]
 8005d32:	4611      	mov	r1, r2
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	4798      	blx	r3
  }  
  return USBD_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b086      	sub	sp, #24
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	607a      	str	r2, [r7, #4]
 8005d4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8005d50:	7afb      	ldrb	r3, [r7, #11]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d16c      	bne.n	8005e30 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3314      	adds	r3, #20
 8005d5a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d157      	bne.n	8005e16 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d915      	bls.n	8005d9e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	1ad2      	subs	r2, r2, r3
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fd5c 	bl	8006848 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005d90:	2300      	movs	r3, #0
 8005d92:	2200      	movs	r2, #0
 8005d94:	2100      	movs	r1, #0
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f001 fa73 	bl	8007282 <USBD_LL_PrepareReceive>
 8005d9c:	e03b      	b.n	8005e16 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	68d2      	ldr	r2, [r2, #12]
 8005da6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005daa:	fb02 f201 	mul.w	r2, r2, r1
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11c      	bne.n	8005dee <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d316      	bcc.n	8005dee <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d20f      	bcs.n	8005dee <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fd38 	bl	8006848 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005de0:	2300      	movs	r3, #0
 8005de2:	2200      	movs	r2, #0
 8005de4:	2100      	movs	r1, #0
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f001 fa4b 	bl	8007282 <USBD_LL_PrepareReceive>
 8005dec:	e013      	b.n	8005e16 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d105      	bne.n	8005e10 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 fd6e 	bl	80068f2 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d11a      	bne.n	8005e56 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f7ff fead 	bl	8005b80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8005e2e:	e012      	b.n	8005e56 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00c      	beq.n	8005e56 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d107      	bne.n	8005e56 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	7afa      	ldrb	r2, [r7, #11]
 8005e50:	4611      	mov	r1, r2
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	4798      	blx	r3
  }  
  return USBD_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005e68:	2340      	movs	r3, #64	; 0x40
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 f91d 	bl	80070ae <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2240      	movs	r2, #64	; 0x40
 8005e78:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005e7c:	2340      	movs	r3, #64	; 0x40
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2180      	movs	r1, #128	; 0x80
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 f913 	bl	80070ae <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2240      	movs	r2, #64	; 0x40
 8005e8c:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6852      	ldr	r2, [r2, #4]
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	4611      	mov	r1, r2
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
 
  
  return USBD_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	78fa      	ldrb	r2, [r7, #3]
 8005ece:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr

08005edc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr

08005f04 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr

08005f24 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d10b      	bne.n	8005f4e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d839      	bhi.n	8005fe2 <USBD_StdDevReq+0x8a>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <USBD_StdDevReq+0x1c>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005fc5 	.word	0x08005fc5
 8005f78:	08005fd9 	.word	0x08005fd9
 8005f7c:	08005fe3 	.word	0x08005fe3
 8005f80:	08005fcf 	.word	0x08005fcf
 8005f84:	08005fe3 	.word	0x08005fe3
 8005f88:	08005fa7 	.word	0x08005fa7
 8005f8c:	08005f9d 	.word	0x08005f9d
 8005f90:	08005fe3 	.word	0x08005fe3
 8005f94:	08005fbb 	.word	0x08005fbb
 8005f98:	08005fb1 	.word	0x08005fb1
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f936 	bl	8006210 <USBD_GetDescriptor>
    break;
 8005fa4:	e022      	b.n	8005fec <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fa25 	bl	80063f8 <USBD_SetAddress>
    break;
 8005fae:	e01d      	b.n	8005fec <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa5e 	bl	8006474 <USBD_SetConfig>
    break;
 8005fb8:	e018      	b.n	8005fec <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fae1 	bl	8006584 <USBD_GetConfig>
    break;
 8005fc2:	e013      	b.n	8005fec <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fb0e 	bl	80065e8 <USBD_GetStatus>
    break;
 8005fcc:	e00e      	b.n	8005fec <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fb33 	bl	800663c <USBD_SetFeature>
    break;
 8005fd6:	e009      	b.n	8005fec <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fb49 	bl	8006672 <USBD_ClrFeature>
    break;
 8005fe0:	e004      	b.n	8005fec <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8005fe2:	6839      	ldr	r1, [r7, #0]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fba8 	bl	800673a <USBD_CtlError>
    break;
 8005fea:	bf00      	nop
  }
  
  return ret;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop

08005ff8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8006002:	2300      	movs	r3, #0
 8006004:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800600c:	2b03      	cmp	r3, #3
 800600e:	d11b      	bne.n	8006048 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	889b      	ldrh	r3, [r3, #4]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b01      	cmp	r3, #1
 8006018:	d811      	bhi.n	800603e <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	88db      	ldrh	r3, [r3, #6]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d110      	bne.n	8006052 <USBD_StdItfReq+0x5a>
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10d      	bne.n	8006052 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fc48 	bl	80068cc <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800603c:	e009      	b.n	8006052 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fb7a 	bl	800673a <USBD_CtlError>
    break;
 8006046:	e004      	b.n	8006052 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fb75 	bl	800673a <USBD_CtlError>
    break;
 8006050:	e000      	b.n	8006054 <USBD_StdItfReq+0x5c>
    break;
 8006052:	bf00      	nop
  }
  return USBD_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8006068:	2300      	movs	r3, #0
 800606a:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	889b      	ldrh	r3, [r3, #4]
 8006070:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800607a:	2b20      	cmp	r3, #32
 800607c:	d108      	bne.n	8006090 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
    
    return USBD_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	e0ba      	b.n	8006206 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d039      	beq.n	800610c <USBD_StdEPReq+0xae>
 8006098:	2b03      	cmp	r3, #3
 800609a:	d002      	beq.n	80060a2 <USBD_StdEPReq+0x44>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d06b      	beq.n	8006178 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 80060a0:	e0b0      	b.n	8006204 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d002      	beq.n	80060b2 <USBD_StdEPReq+0x54>
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d00c      	beq.n	80060ca <USBD_StdEPReq+0x6c>
 80060b0:	e025      	b.n	80060fe <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d027      	beq.n	8006108 <USBD_StdEPReq+0xaa>
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	2b80      	cmp	r3, #128	; 0x80
 80060bc:	d024      	beq.n	8006108 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 f838 	bl	8007138 <USBD_LL_StallEP>
      break;	
 80060c8:	e01e      	b.n	8006108 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	885b      	ldrh	r3, [r3, #2]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <USBD_StdEPReq+0x8a>
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	2b80      	cmp	r3, #128	; 0x80
 80060dc:	d004      	beq.n	80060e8 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 80060de:	7bbb      	ldrb	r3, [r7, #14]
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 f828 	bl	8007138 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fbe8 	bl	80068cc <USBD_CtlSendStatus>
      break;
 80060fc:	e005      	b.n	800610a <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fb1a 	bl	800673a <USBD_CtlError>
      break;    
 8006106:	e000      	b.n	800610a <USBD_StdEPReq+0xac>
      break;	
 8006108:	bf00      	nop
    break;
 800610a:	e07b      	b.n	8006204 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006112:	2b02      	cmp	r3, #2
 8006114:	d002      	beq.n	800611c <USBD_StdEPReq+0xbe>
 8006116:	2b03      	cmp	r3, #3
 8006118:	d00c      	beq.n	8006134 <USBD_StdEPReq+0xd6>
 800611a:	e024      	b.n	8006166 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d026      	beq.n	8006170 <USBD_StdEPReq+0x112>
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b80      	cmp	r3, #128	; 0x80
 8006126:	d023      	beq.n	8006170 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 f803 	bl	8007138 <USBD_LL_StallEP>
      break;	
 8006132:	e01d      	b.n	8006170 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	885b      	ldrh	r3, [r3, #2]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d11b      	bne.n	8006174 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8006146:	7bbb      	ldrb	r3, [r7, #14]
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 f813 	bl	8007176 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fbb4 	bl	80068cc <USBD_CtlSendStatus>
      break;
 8006164:	e006      	b.n	8006174 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fae6 	bl	800673a <USBD_CtlError>
      break;    
 800616e:	e002      	b.n	8006176 <USBD_StdEPReq+0x118>
      break;	
 8006170:	bf00      	nop
 8006172:	e047      	b.n	8006204 <USBD_StdEPReq+0x1a6>
      break;
 8006174:	bf00      	nop
    break;
 8006176:	e045      	b.n	8006204 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800617e:	2b02      	cmp	r3, #2
 8006180:	d002      	beq.n	8006188 <USBD_StdEPReq+0x12a>
 8006182:	2b03      	cmp	r3, #3
 8006184:	d00b      	beq.n	800619e <USBD_StdEPReq+0x140>
 8006186:	e036      	b.n	80061f6 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8006188:	7bbb      	ldrb	r3, [r7, #14]
 800618a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618e:	2b00      	cmp	r3, #0
 8006190:	d036      	beq.n	8006200 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8006192:	7bbb      	ldrb	r3, [r7, #14]
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 ffce 	bl	8007138 <USBD_LL_StallEP>
      break;	
 800619c:	e030      	b.n	8006200 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800619e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da08      	bge.n	80061b8 <USBD_StdEPReq+0x15a>
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ac:	3301      	adds	r3, #1
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4413      	add	r3, r2
 80061b4:	3304      	adds	r3, #4
 80061b6:	e007      	b.n	80061c8 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80061be:	3310      	adds	r3, #16
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4413      	add	r3, r2
 80061c6:	3304      	adds	r3, #4
 80061c8:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fff0 	bl	80071b4 <USBD_LL_IsStallEP>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2201      	movs	r2, #1
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	e002      	b.n	80061e8 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80061e8:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 80061ea:	2202      	movs	r2, #2
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fb0e 	bl	8006810 <USBD_CtlSendData>
      break;
 80061f4:	e005      	b.n	8006202 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fa9e 	bl	800673a <USBD_CtlError>
      break;
 80061fe:	e000      	b.n	8006202 <USBD_StdEPReq+0x1a4>
      break;	
 8006200:	bf00      	nop
    break;
 8006202:	bf00      	nop
  }
  return ret;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	885b      	ldrh	r3, [r3, #2]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	2b06      	cmp	r3, #6
 8006226:	f200 80c9 	bhi.w	80063bc <USBD_GetDescriptor+0x1ac>
 800622a:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <USBD_GetDescriptor+0x20>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	0800624d 	.word	0x0800624d
 8006234:	08006265 	.word	0x08006265
 8006238:	080062a5 	.word	0x080062a5
 800623c:	080063bd 	.word	0x080063bd
 8006240:	080063bd 	.word	0x080063bd
 8006244:	08006369 	.word	0x08006369
 8006248:	0800638f 	.word	0x0800638f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	7c12      	ldrb	r2, [r2, #16]
 8006258:	f107 010a 	add.w	r1, r7, #10
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
 8006260:	60f8      	str	r0, [r7, #12]
    break;
 8006262:	e0b0      	b.n	80063c6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	7c1b      	ldrb	r3, [r3, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10d      	bne.n	8006288 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	f107 020a 	add.w	r2, r7, #10
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
 800627c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	2202      	movs	r2, #2
 8006284:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006286:	e09e      	b.n	80063c6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	f107 020a 	add.w	r2, r7, #10
 8006294:	4610      	mov	r0, r2
 8006296:	4798      	blx	r3
 8006298:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	2202      	movs	r2, #2
 80062a0:	701a      	strb	r2, [r3, #0]
    break;
 80062a2:	e090      	b.n	80063c6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	885b      	ldrh	r3, [r3, #2]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d856      	bhi.n	800635c <USBD_GetDescriptor+0x14c>
 80062ae:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <USBD_GetDescriptor+0xa4>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	080062cd 	.word	0x080062cd
 80062b8:	080062e5 	.word	0x080062e5
 80062bc:	080062fd 	.word	0x080062fd
 80062c0:	08006315 	.word	0x08006315
 80062c4:	0800632d 	.word	0x0800632d
 80062c8:	08006345 	.word	0x08006345
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	7c12      	ldrb	r2, [r2, #16]
 80062d8:	f107 010a 	add.w	r1, r7, #10
 80062dc:	4610      	mov	r0, r2
 80062de:	4798      	blx	r3
 80062e0:	60f8      	str	r0, [r7, #12]
      break;
 80062e2:	e040      	b.n	8006366 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	7c12      	ldrb	r2, [r2, #16]
 80062f0:	f107 010a 	add.w	r1, r7, #10
 80062f4:	4610      	mov	r0, r2
 80062f6:	4798      	blx	r3
 80062f8:	60f8      	str	r0, [r7, #12]
      break;
 80062fa:	e034      	b.n	8006366 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	7c12      	ldrb	r2, [r2, #16]
 8006308:	f107 010a 	add.w	r1, r7, #10
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
 8006310:	60f8      	str	r0, [r7, #12]
      break;
 8006312:	e028      	b.n	8006366 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	7c12      	ldrb	r2, [r2, #16]
 8006320:	f107 010a 	add.w	r1, r7, #10
 8006324:	4610      	mov	r0, r2
 8006326:	4798      	blx	r3
 8006328:	60f8      	str	r0, [r7, #12]
      break;
 800632a:	e01c      	b.n	8006366 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	7c12      	ldrb	r2, [r2, #16]
 8006338:	f107 010a 	add.w	r1, r7, #10
 800633c:	4610      	mov	r0, r2
 800633e:	4798      	blx	r3
 8006340:	60f8      	str	r0, [r7, #12]
      break;
 8006342:	e010      	b.n	8006366 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	7c12      	ldrb	r2, [r2, #16]
 8006350:	f107 010a 	add.w	r1, r7, #10
 8006354:	4610      	mov	r0, r2
 8006356:	4798      	blx	r3
 8006358:	60f8      	str	r0, [r7, #12]
      break;
 800635a:	e004      	b.n	8006366 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9eb 	bl	800673a <USBD_CtlError>
      return;
 8006364:	e044      	b.n	80063f0 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8006366:	e02e      	b.n	80063c6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	7c1b      	ldrb	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d109      	bne.n	8006384 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006378:	f107 020a 	add.w	r2, r7, #10
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
 8006380:	60f8      	str	r0, [r7, #12]
      break;
 8006382:	e020      	b.n	80063c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9d7 	bl	800673a <USBD_CtlError>
      return;
 800638c:	e030      	b.n	80063f0 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	7c1b      	ldrb	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10d      	bne.n	80063b2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	f107 020a 	add.w	r2, r7, #10
 80063a2:	4610      	mov	r0, r2
 80063a4:	4798      	blx	r3
 80063a6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	2207      	movs	r2, #7
 80063ae:	701a      	strb	r2, [r3, #0]
      break; 
 80063b0:	e009      	b.n	80063c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f9c0 	bl	800673a <USBD_CtlError>
      return;
 80063ba:	e019      	b.n	80063f0 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f9bb 	bl	800673a <USBD_CtlError>
    return;
 80063c4:	e014      	b.n	80063f0 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80063c6:	897b      	ldrh	r3, [r7, #10]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d011      	beq.n	80063f0 <USBD_GetDescriptor+0x1e0>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	88db      	ldrh	r3, [r3, #6]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	88da      	ldrh	r2, [r3, #6]
 80063d8:	897b      	ldrh	r3, [r7, #10]
 80063da:	4293      	cmp	r3, r2
 80063dc:	bf28      	it	cs
 80063de:	4613      	movcs	r3, r2
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80063e4:	897b      	ldrh	r3, [r7, #10]
 80063e6:	461a      	mov	r2, r3
 80063e8:	68f9      	ldr	r1, [r7, #12]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa10 	bl	8006810 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop

080063f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	889b      	ldrh	r3, [r3, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d12c      	bne.n	8006464 <USBD_SetAddress+0x6c>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	88db      	ldrh	r3, [r3, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d128      	bne.n	8006464 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	885b      	ldrh	r3, [r3, #2]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800641c:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006424:	2b03      	cmp	r3, #3
 8006426:	d104      	bne.n	8006432 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f985 	bl	800673a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006430:	e01c      	b.n	800646c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	7bfa      	ldrb	r2, [r7, #15]
 8006436:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	4619      	mov	r1, r3
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fedd 	bl	80071fe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fa41 	bl	80068cc <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006458:	e008      	b.n	800646c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006462:	e003      	b.n	800646c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f967 	bl	800673a <USBD_CtlError>
  } 
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	885b      	ldrh	r3, [r3, #2]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	4b3e      	ldr	r3, [pc, #248]	; (8006580 <USBD_SetConfig+0x10c>)
 8006486:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8006488:	4b3d      	ldr	r3, [pc, #244]	; (8006580 <USBD_SetConfig+0x10c>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d904      	bls.n	800649a <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f951 	bl	800673a <USBD_CtlError>
 8006498:	e06f      	b.n	800657a <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d002      	beq.n	80064aa <USBD_SetConfig+0x36>
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d023      	beq.n	80064f0 <USBD_SetConfig+0x7c>
 80064a8:	e062      	b.n	8006570 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80064aa:	4b35      	ldr	r3, [pc, #212]	; (8006580 <USBD_SetConfig+0x10c>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d01a      	beq.n	80064e8 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80064b2:	4b33      	ldr	r3, [pc, #204]	; (8006580 <USBD_SetConfig+0x10c>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2203      	movs	r2, #3
 80064c0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80064c4:	4b2e      	ldr	r3, [pc, #184]	; (8006580 <USBD_SetConfig+0x10c>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff fb62 	bl	8005b94 <USBD_SetClassConfig>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d104      	bne.n	80064e0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f92e 	bl	800673a <USBD_CtlError>
          return;
 80064de:	e04c      	b.n	800657a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f9f3 	bl	80068cc <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80064e6:	e048      	b.n	800657a <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f9ef 	bl	80068cc <USBD_CtlSendStatus>
      break;
 80064ee:	e044      	b.n	800657a <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80064f0:	4b23      	ldr	r3, [pc, #140]	; (8006580 <USBD_SetConfig+0x10c>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d112      	bne.n	800651e <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8006500:	4b1f      	ldr	r3, [pc, #124]	; (8006580 <USBD_SetConfig+0x10c>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800650a:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <USBD_SetConfig+0x10c>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff fb5e 	bl	8005bd2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f9d8 	bl	80068cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800651c:	e02d      	b.n	800657a <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800651e:	4b18      	ldr	r3, [pc, #96]	; (8006580 <USBD_SetConfig+0x10c>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	429a      	cmp	r2, r3
 800652a:	d01d      	beq.n	8006568 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fb4c 	bl	8005bd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <USBD_SetConfig+0x10c>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <USBD_SetConfig+0x10c>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fb22 	bl	8005b94 <USBD_SetClassConfig>
 8006550:	4603      	mov	r3, r0
 8006552:	2b02      	cmp	r3, #2
 8006554:	d104      	bne.n	8006560 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f8ee 	bl	800673a <USBD_CtlError>
          return;
 800655e:	e00c      	b.n	800657a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f9b3 	bl	80068cc <USBD_CtlSendStatus>
      break;
 8006566:	e008      	b.n	800657a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f9af 	bl	80068cc <USBD_CtlSendStatus>
      break;
 800656e:	e004      	b.n	800657a <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f8e1 	bl	800673a <USBD_CtlError>
      break;
 8006578:	bf00      	nop
    }
  }
}
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	2000034d 	.word	0x2000034d

08006584 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	88db      	ldrh	r3, [r3, #6]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d004      	beq.n	80065a0 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f8ce 	bl	800673a <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800659e:	e01f      	b.n	80065e0 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d002      	beq.n	80065b0 <USBD_GetConfig+0x2c>
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d00b      	beq.n	80065c6 <USBD_GetConfig+0x42>
 80065ae:	e012      	b.n	80065d6 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80065ba:	2201      	movs	r2, #1
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f926 	bl	8006810 <USBD_CtlSendData>
      break;
 80065c4:	e00c      	b.n	80065e0 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80065ca:	2201      	movs	r2, #1
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f91e 	bl	8006810 <USBD_CtlSendData>
      break;
 80065d4:	e004      	b.n	80065e0 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f8ae 	bl	800673a <USBD_CtlError>
      break;
 80065de:	bf00      	nop
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80065f8:	3b02      	subs	r3, #2
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d815      	bhi.n	800662a <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f043 0202 	orr.w	r2, r3, #2
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800661e:	2202      	movs	r2, #2
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f8f4 	bl	8006810 <USBD_CtlSendData>
                      2);
    break;
 8006628:	e004      	b.n	8006634 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f884 	bl	800673a <USBD_CtlError>
    break;
 8006632:	bf00      	nop
  }
}
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	885b      	ldrh	r3, [r3, #2]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d10d      	bne.n	800666a <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f931 	bl	80068cc <USBD_CtlSendStatus>
  }

}
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006682:	3b02      	subs	r3, #2
 8006684:	2b01      	cmp	r3, #1
 8006686:	d812      	bhi.n	80066ae <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	885b      	ldrh	r3, [r3, #2]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d113      	bne.n	80066b8 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f910 	bl	80068cc <USBD_CtlSendStatus>
    }
    break;
 80066ac:	e004      	b.n	80066b8 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f842 	bl	800673a <USBD_CtlError>
    break;
 80066b6:	e000      	b.n	80066ba <USBD_ClrFeature+0x48>
    break;
 80066b8:	bf00      	nop
  }
}
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781a      	ldrb	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	785a      	ldrb	r2, [r3, #1]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	3302      	adds	r3, #2
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	3303      	adds	r3, #3
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	4413      	add	r3, r2
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	3304      	adds	r3, #4
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b29a      	uxth	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	3305      	adds	r3, #5
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	b29b      	uxth	r3, r3
 800670c:	4413      	add	r3, r2
 800670e:	b29a      	uxth	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	3306      	adds	r3, #6
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	b29a      	uxth	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	3307      	adds	r3, #7
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	b29b      	uxth	r3, r3
 8006728:	4413      	add	r3, r2
 800672a:	b29a      	uxth	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	80da      	strh	r2, [r3, #6]

}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b082      	sub	sp, #8
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8006744:	2180      	movs	r1, #128	; 0x80
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fcf6 	bl	8007138 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800674c:	2100      	movs	r1, #0
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fcf2 	bl	8007138 <USBD_LL_StallEP>
}
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d033      	beq.n	80067da <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f835 	bl	80067e2 <USBD_GetLen>
 8006778:	4603      	mov	r3, r0
 800677a:	3301      	adds	r3, #1
 800677c:	b29b      	uxth	r3, r3
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	881a      	ldrh	r2, [r3, #0]
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	1c59      	adds	r1, r3, #1
 800678e:	75f9      	strb	r1, [r7, #23]
 8006790:	4619      	mov	r1, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	440b      	add	r3, r1
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	75fa      	strb	r2, [r7, #23]
 80067a0:	461a      	mov	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4413      	add	r3, r2
 80067a6:	2203      	movs	r2, #3
 80067a8:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80067aa:	e012      	b.n	80067d2 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	60fa      	str	r2, [r7, #12]
 80067b2:	7dfa      	ldrb	r2, [r7, #23]
 80067b4:	1c51      	adds	r1, r2, #1
 80067b6:	75f9      	strb	r1, [r7, #23]
 80067b8:	4611      	mov	r1, r2
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	440a      	add	r2, r1
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	75fa      	strb	r2, [r7, #23]
 80067c8:	461a      	mov	r2, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	4413      	add	r3, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e8      	bne.n	80067ac <USBD_GetString+0x50>
    }
  } 
}
 80067da:	bf00      	nop
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 80067ee:	e005      	b.n	80067fc <USBD_GetLen+0x1a>
    {
        len++;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	3301      	adds	r3, #1
 80067f4:	73fb      	strb	r3, [r7, #15]
        buf++;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3301      	adds	r3, #1
 80067fa:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f5      	bne.n	80067f0 <USBD_GetLen+0xe>
    }

    return len;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr

08006810 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	4613      	mov	r3, r2
 800681c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2202      	movs	r2, #2
 8006822:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8006826:	88fa      	ldrh	r2, [r7, #6]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800682c:	88fa      	ldrh	r2, [r7, #6]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	2100      	movs	r1, #0
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fcff 	bl	800723c <USBD_LL_Transmit>
  
  return USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	2100      	movs	r1, #0
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fced 	bl	800723c <USBD_LL_Transmit>
  
  return USBD_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2203      	movs	r2, #3
 800687e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8006882:	88fa      	ldrh	r2, [r7, #6]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	2100      	movs	r1, #0
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fcf2 	bl	8007282 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4613      	mov	r3, r2
 80068b4:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	2100      	movs	r1, #0
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fce0 	bl	8007282 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2204      	movs	r2, #4
 80068d8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80068dc:	2300      	movs	r3, #0
 80068de:	2200      	movs	r2, #0
 80068e0:	2100      	movs	r1, #0
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fcaa 	bl	800723c <USBD_LL_Transmit>
  
  return USBD_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2205      	movs	r2, #5
 80068fe:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8006902:	2300      	movs	r3, #0
 8006904:	2200      	movs	r2, #0
 8006906:	2100      	movs	r1, #0
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fcba 	bl	8007282 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800691c:	2200      	movs	r2, #0
 800691e:	4912      	ldr	r1, [pc, #72]	; (8006968 <MX_USB_DEVICE_Init+0x50>)
 8006920:	4812      	ldr	r0, [pc, #72]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006922:	f7ff f8dd 	bl	8005ae0 <USBD_Init>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800692c:	f7f9 fd82 	bl	8000434 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006930:	490f      	ldr	r1, [pc, #60]	; (8006970 <MX_USB_DEVICE_Init+0x58>)
 8006932:	480e      	ldr	r0, [pc, #56]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006934:	f7ff f8ff 	bl	8005b36 <USBD_RegisterClass>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800693e:	f7f9 fd79 	bl	8000434 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006942:	490c      	ldr	r1, [pc, #48]	; (8006974 <MX_USB_DEVICE_Init+0x5c>)
 8006944:	4809      	ldr	r0, [pc, #36]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006946:	f7ff f835 	bl	80059b4 <USBD_CDC_RegisterInterface>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006950:	f7f9 fd70 	bl	8000434 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006954:	4805      	ldr	r0, [pc, #20]	; (800696c <MX_USB_DEVICE_Init+0x54>)
 8006956:	f7ff f907 	bl	8005b68 <USBD_Start>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006960:	f7f9 fd68 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006964:	bf00      	nop
 8006966:	bd80      	pop	{r7, pc}
 8006968:	20000150 	.word	0x20000150
 800696c:	2000061c 	.word	0x2000061c
 8006970:	20000038 	.word	0x20000038
 8006974:	20000140 	.word	0x20000140

08006978 <cdcAvailable>:
uint32_t rx_out = 0;
uint32_t rx_len = 512;
uint8_t rx_buf[512];

uint32_t cdcAvailable(void)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 800697e:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <cdcAvailable+0x2c>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <cdcAvailable+0x30>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	4a08      	ldr	r2, [pc, #32]	; (80069ac <cdcAvailable+0x34>)
 800698a:	6812      	ldr	r2, [r2, #0]
 800698c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006990:	fb02 f201 	mul.w	r2, r2, r1
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	607b      	str	r3, [r7, #4]

  return ret;
 8006998:	687b      	ldr	r3, [r7, #4]
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr
 80069a4:	20000350 	.word	0x20000350
 80069a8:	20000354 	.word	0x20000354
 80069ac:	2000013c 	.word	0x2000013c

080069b0 <cdcRead>:

uint8_t cdcRead(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 80069b6:	4b0e      	ldr	r3, [pc, #56]	; (80069f0 <cdcRead+0x40>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a0e      	ldr	r2, [pc, #56]	; (80069f4 <cdcRead+0x44>)
 80069bc:	5cd3      	ldrb	r3, [r2, r3]
 80069be:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <cdcRead+0x40>)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <cdcRead+0x48>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d00b      	beq.n	80069e4 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 80069cc:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <cdcRead+0x40>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3301      	adds	r3, #1
 80069d2:	4a0a      	ldr	r2, [pc, #40]	; (80069fc <cdcRead+0x4c>)
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80069da:	fb02 f201 	mul.w	r2, r2, r1
 80069de:	1a9b      	subs	r3, r3, r2
 80069e0:	4a03      	ldr	r2, [pc, #12]	; (80069f0 <cdcRead+0x40>)
 80069e2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80069e4:	79fb      	ldrb	r3, [r7, #7]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr
 80069f0:	20000354 	.word	0x20000354
 80069f4:	20001010 	.word	0x20001010
 80069f8:	20000350 	.word	0x20000350
 80069fc:	2000013c 	.word	0x2000013c

08006a00 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	4603      	mov	r3, r0
 8006a08:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;    // overwrite
 8006a0a:	4b0e      	ldr	r3, [pc, #56]	; (8006a44 <cdcDataIn+0x44>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	490e      	ldr	r1, [pc, #56]	; (8006a48 <cdcDataIn+0x48>)
 8006a10:	79fa      	ldrb	r2, [r7, #7]
 8006a12:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 8006a14:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <cdcDataIn+0x44>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	4a0c      	ldr	r2, [pc, #48]	; (8006a4c <cdcDataIn+0x4c>)
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a22:	fb02 f201 	mul.w	r2, r2, r1
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <cdcDataIn+0x50>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d002      	beq.n	8006a3a <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8006a34:	4a03      	ldr	r2, [pc, #12]	; (8006a44 <cdcDataIn+0x44>)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6013      	str	r3, [r2, #0]
  }
}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr
 8006a44:	20000350 	.word	0x20000350
 8006a48:	20001010 	.word	0x20001010
 8006a4c:	2000013c 	.word	0x2000013c
 8006a50:	20000354 	.word	0x20000354

08006a54 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8006a5e:	f7f9 fc40 	bl	80002e2 <millis>
 8006a62:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f8ba 	bl	8006be4 <CDC_Transmit_FS>
 8006a70:	4603      	mov	r3, r0
 8006a72:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 8006a74:	7afb      	ldrb	r3, [r7, #11]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <cdcWrite+0x2a>
    {
      return length;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	e00e      	b.n	8006a9c <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 8006a7e:	7afb      	ldrb	r3, [r7, #11]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d101      	bne.n	8006a88 <cdcWrite+0x34>
    {
      return 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	e009      	b.n	8006a9c <cdcWrite+0x48>
    }

    if(millis() - pre_time >= 100)    // time out handling.
 8006a88:	f7f9 fc2b 	bl	80002e2 <millis>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b63      	cmp	r3, #99	; 0x63
 8006a94:	d800      	bhi.n	8006a98 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8006a96:	e7e5      	b.n	8006a64 <cdcWrite+0x10>
    {
      break;
 8006a98:	bf00      	nop
    }
  }
  return 0;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4905      	ldr	r1, [pc, #20]	; (8006ac0 <CDC_Init_FS+0x1c>)
 8006aac:	4805      	ldr	r0, [pc, #20]	; (8006ac4 <CDC_Init_FS+0x20>)
 8006aae:	f7fe ff97 	bl	80059e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006ab2:	4905      	ldr	r1, [pc, #20]	; (8006ac8 <CDC_Init_FS+0x24>)
 8006ab4:	4803      	ldr	r0, [pc, #12]	; (8006ac4 <CDC_Init_FS+0x20>)
 8006ab6:	f7fe ffac 	bl	8005a12 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006aba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20000c28 	.word	0x20000c28
 8006ac4:	2000061c 	.word	0x2000061c
 8006ac8:	20000840 	.word	0x20000840

08006acc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ad0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr
	...

08006adc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	6039      	str	r1, [r7, #0]
 8006ae6:	71fb      	strb	r3, [r7, #7]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	2b23      	cmp	r3, #35	; 0x23
 8006af0:	d84a      	bhi.n	8006b88 <CDC_Control_FS+0xac>
 8006af2:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <CDC_Control_FS+0x1c>)
 8006af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af8:	08006b89 	.word	0x08006b89
 8006afc:	08006b89 	.word	0x08006b89
 8006b00:	08006b89 	.word	0x08006b89
 8006b04:	08006b89 	.word	0x08006b89
 8006b08:	08006b89 	.word	0x08006b89
 8006b0c:	08006b89 	.word	0x08006b89
 8006b10:	08006b89 	.word	0x08006b89
 8006b14:	08006b89 	.word	0x08006b89
 8006b18:	08006b89 	.word	0x08006b89
 8006b1c:	08006b89 	.word	0x08006b89
 8006b20:	08006b89 	.word	0x08006b89
 8006b24:	08006b89 	.word	0x08006b89
 8006b28:	08006b89 	.word	0x08006b89
 8006b2c:	08006b89 	.word	0x08006b89
 8006b30:	08006b89 	.word	0x08006b89
 8006b34:	08006b89 	.word	0x08006b89
 8006b38:	08006b89 	.word	0x08006b89
 8006b3c:	08006b89 	.word	0x08006b89
 8006b40:	08006b89 	.word	0x08006b89
 8006b44:	08006b89 	.word	0x08006b89
 8006b48:	08006b89 	.word	0x08006b89
 8006b4c:	08006b89 	.word	0x08006b89
 8006b50:	08006b89 	.word	0x08006b89
 8006b54:	08006b89 	.word	0x08006b89
 8006b58:	08006b89 	.word	0x08006b89
 8006b5c:	08006b89 	.word	0x08006b89
 8006b60:	08006b89 	.word	0x08006b89
 8006b64:	08006b89 	.word	0x08006b89
 8006b68:	08006b89 	.word	0x08006b89
 8006b6c:	08006b89 	.word	0x08006b89
 8006b70:	08006b89 	.word	0x08006b89
 8006b74:	08006b89 	.word	0x08006b89
 8006b78:	08006b89 	.word	0x08006b89
 8006b7c:	08006b89 	.word	0x08006b89
 8006b80:	08006b89 	.word	0x08006b89
 8006b84:	08006b89 	.word	0x08006b89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006b88:	bf00      	nop
  }

  return (USBD_OK);
 8006b8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc80      	pop	{r7}
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop

08006b98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	480e      	ldr	r0, [pc, #56]	; (8006be0 <CDC_Receive_FS+0x48>)
 8006ba6:	f7fe ff34 	bl	8005a12 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006baa:	480d      	ldr	r0, [pc, #52]	; (8006be0 <CDC_Receive_FS+0x48>)
 8006bac:	f7fe ff6e 	bl	8005a8c <USBD_CDC_ReceivePacket>

  for(int i=0; i<*Len; i++)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e009      	b.n	8006bca <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4413      	add	r3, r2
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff ff1e 	bl	8006a00 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d8f0      	bhi.n	8006bb6 <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 8006bd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	2000061c 	.word	0x2000061c

08006be4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006bf4:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <CDC_Transmit_FS+0x48>)
 8006bf6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006bfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e00b      	b.n	8006c22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006c0a:	887b      	ldrh	r3, [r7, #2]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	4806      	ldr	r0, [pc, #24]	; (8006c2c <CDC_Transmit_FS+0x48>)
 8006c12:	f7fe fee5 	bl	80059e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c16:	4805      	ldr	r0, [pc, #20]	; (8006c2c <CDC_Transmit_FS+0x48>)
 8006c18:	f7fe ff0e 	bl	8005a38 <USBD_CDC_TransmitPacket>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	2000061c 	.word	0x2000061c

08006c30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	6039      	str	r1, [r7, #0]
 8006c3a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2212      	movs	r2, #18
 8006c40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006c42:	4b03      	ldr	r3, [pc, #12]	; (8006c50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	2000016c 	.word	0x2000016c

08006c54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	6039      	str	r1, [r7, #0]
 8006c5e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2204      	movs	r2, #4
 8006c64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c66:	4b03      	ldr	r3, [pc, #12]	; (8006c74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20000180 	.word	0x20000180

08006c78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	6039      	str	r1, [r7, #0]
 8006c82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d105      	bne.n	8006c96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	4907      	ldr	r1, [pc, #28]	; (8006cac <USBD_FS_ProductStrDescriptor+0x34>)
 8006c8e:	4808      	ldr	r0, [pc, #32]	; (8006cb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c90:	f7ff fd64 	bl	800675c <USBD_GetString>
 8006c94:	e004      	b.n	8006ca0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	4904      	ldr	r1, [pc, #16]	; (8006cac <USBD_FS_ProductStrDescriptor+0x34>)
 8006c9a:	4805      	ldr	r0, [pc, #20]	; (8006cb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c9c:	f7ff fd5e 	bl	800675c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ca0:	4b02      	ldr	r3, [pc, #8]	; (8006cac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20001210 	.word	0x20001210
 8006cb0:	08007cc0 	.word	0x08007cc0

08006cb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	6039      	str	r1, [r7, #0]
 8006cbe:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	4904      	ldr	r1, [pc, #16]	; (8006cd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006cc4:	4804      	ldr	r0, [pc, #16]	; (8006cd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006cc6:	f7ff fd49 	bl	800675c <USBD_GetString>
  return USBD_StrDesc;
 8006cca:	4b02      	ldr	r3, [pc, #8]	; (8006cd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20001210 	.word	0x20001210
 8006cd8:	08007cd8 	.word	0x08007cd8

08006cdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	6039      	str	r1, [r7, #0]
 8006ce6:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	221a      	movs	r2, #26
 8006cec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006cee:	f000 f843 	bl	8006d78 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8006cf2:	4b02      	ldr	r3, [pc, #8]	; (8006cfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20000184 	.word	0x20000184

08006d00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4603      	mov	r3, r0
 8006d08:	6039      	str	r1, [r7, #0]
 8006d0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d105      	bne.n	8006d1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	4907      	ldr	r1, [pc, #28]	; (8006d34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d16:	4808      	ldr	r0, [pc, #32]	; (8006d38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d18:	f7ff fd20 	bl	800675c <USBD_GetString>
 8006d1c:	e004      	b.n	8006d28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	4904      	ldr	r1, [pc, #16]	; (8006d34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d22:	4805      	ldr	r0, [pc, #20]	; (8006d38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d24:	f7ff fd1a 	bl	800675c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d28:	4b02      	ldr	r3, [pc, #8]	; (8006d34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20001210 	.word	0x20001210
 8006d38:	08007cec 	.word	0x08007cec

08006d3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	6039      	str	r1, [r7, #0]
 8006d46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d48:	79fb      	ldrb	r3, [r7, #7]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d105      	bne.n	8006d5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	4907      	ldr	r1, [pc, #28]	; (8006d70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d52:	4808      	ldr	r0, [pc, #32]	; (8006d74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d54:	f7ff fd02 	bl	800675c <USBD_GetString>
 8006d58:	e004      	b.n	8006d64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	4904      	ldr	r1, [pc, #16]	; (8006d70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d5e:	4805      	ldr	r0, [pc, #20]	; (8006d74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d60:	f7ff fcfc 	bl	800675c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d64:	4b02      	ldr	r3, [pc, #8]	; (8006d70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20001210 	.word	0x20001210
 8006d74:	08007cf8 	.word	0x08007cf8

08006d78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d7e:	4b0f      	ldr	r3, [pc, #60]	; (8006dbc <Get_SerialNum+0x44>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d84:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <Get_SerialNum+0x48>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <Get_SerialNum+0x4c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4413      	add	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d009      	beq.n	8006db2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d9e:	2208      	movs	r2, #8
 8006da0:	4909      	ldr	r1, [pc, #36]	; (8006dc8 <Get_SerialNum+0x50>)
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 f814 	bl	8006dd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006da8:	2204      	movs	r2, #4
 8006daa:	4908      	ldr	r1, [pc, #32]	; (8006dcc <Get_SerialNum+0x54>)
 8006dac:	68b8      	ldr	r0, [r7, #8]
 8006dae:	f000 f80f 	bl	8006dd0 <IntToUnicode>
  }
}
 8006db2:	bf00      	nop
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	1ffff7e8 	.word	0x1ffff7e8
 8006dc0:	1ffff7ec 	.word	0x1ffff7ec
 8006dc4:	1ffff7f0 	.word	0x1ffff7f0
 8006dc8:	20000186 	.word	0x20000186
 8006dcc:	20000196 	.word	0x20000196

08006dd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006de2:	2300      	movs	r3, #0
 8006de4:	75fb      	strb	r3, [r7, #23]
 8006de6:	e027      	b.n	8006e38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	0f1b      	lsrs	r3, r3, #28
 8006dec:	2b09      	cmp	r3, #9
 8006dee:	d80b      	bhi.n	8006e08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	0f1b      	lsrs	r3, r3, #28
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	440b      	add	r3, r1
 8006e00:	3230      	adds	r2, #48	; 0x30
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	e00a      	b.n	8006e1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	0f1b      	lsrs	r3, r3, #28
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	4619      	mov	r1, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	440b      	add	r3, r1
 8006e18:	3237      	adds	r2, #55	; 0x37
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	3301      	adds	r3, #1
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	3301      	adds	r3, #1
 8006e36:	75fb      	strb	r3, [r7, #23]
 8006e38:	7dfa      	ldrb	r2, [r7, #23]
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d3d3      	bcc.n	8006de8 <IntToUnicode+0x18>
  }
}
 8006e40:	bf00      	nop
 8006e42:	371c      	adds	r7, #28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr
	...

08006e4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a0d      	ldr	r2, [pc, #52]	; (8006e90 <HAL_PCD_MspInit+0x44>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d113      	bne.n	8006e86 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <HAL_PCD_MspInit+0x48>)
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	4a0c      	ldr	r2, [pc, #48]	; (8006e94 <HAL_PCD_MspInit+0x48>)
 8006e64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e68:	61d3      	str	r3, [r2, #28]
 8006e6a:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <HAL_PCD_MspInit+0x48>)
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006e76:	2200      	movs	r2, #0
 8006e78:	2100      	movs	r1, #0
 8006e7a:	2014      	movs	r0, #20
 8006e7c:	f7fa f8f7 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006e80:	2014      	movs	r0, #20
 8006e82:	f7fa f910 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006e86:	bf00      	nop
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	40005c00 	.word	0x40005c00
 8006e94:	40021000 	.word	0x40021000

08006e98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f7fe fea2 	bl	8005bf8 <USBD_LL_SetupStage>
}
 8006eb4:	bf00      	nop
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8006ece:	78fb      	ldrb	r3, [r7, #3]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	015b      	lsls	r3, r3, #5
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	78fb      	ldrb	r3, [r7, #3]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	f7fe fed4 	bl	8005c8c <USBD_LL_DataOutStage>
}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8006efe:	78fb      	ldrb	r3, [r7, #3]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	015b      	lsls	r3, r3, #5
 8006f04:	4413      	add	r3, r2
 8006f06:	333c      	adds	r3, #60	; 0x3c
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	f7fe ff18 	bl	8005d42 <USBD_LL_DataInStage>
}
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe fffb 	bl	8005f24 <USBD_LL_SOF>
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d001      	beq.n	8006f4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006f4a:	f7f9 fa73 	bl	8000434 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006f54:	7bfa      	ldrb	r2, [r7, #15]
 8006f56:	4611      	mov	r1, r2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe ffb0 	bl	8005ebe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe ff7b 	bl	8005e60 <USBD_LL_Reset>
}
 8006f6a:	bf00      	nop
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe ffaa 	bl	8005edc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f90:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <HAL_PCD_SuspendCallback+0x30>)
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	4a03      	ldr	r2, [pc, #12]	; (8006fa4 <HAL_PCD_SuspendCallback+0x30>)
 8006f96:	f043 0306 	orr.w	r3, r3, #6
 8006f9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	e000ed00 	.word	0xe000ed00

08006fa8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe ffa4 	bl	8005f04 <USBD_LL_Resume>
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006fcc:	4a28      	ldr	r2, [pc, #160]	; (8007070 <USBD_LL_Init+0xac>)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a26      	ldr	r2, [pc, #152]	; (8007070 <USBD_LL_Init+0xac>)
 8006fd8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8006fdc:	4b24      	ldr	r3, [pc, #144]	; (8007070 <USBD_LL_Init+0xac>)
 8006fde:	4a25      	ldr	r2, [pc, #148]	; (8007074 <USBD_LL_Init+0xb0>)
 8006fe0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006fe2:	4b23      	ldr	r3, [pc, #140]	; (8007070 <USBD_LL_Init+0xac>)
 8006fe4:	2208      	movs	r2, #8
 8006fe6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006fe8:	4b21      	ldr	r3, [pc, #132]	; (8007070 <USBD_LL_Init+0xac>)
 8006fea:	2202      	movs	r2, #2
 8006fec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006fee:	4b20      	ldr	r3, [pc, #128]	; (8007070 <USBD_LL_Init+0xac>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006ff4:	4b1e      	ldr	r3, [pc, #120]	; (8007070 <USBD_LL_Init+0xac>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006ffa:	4b1d      	ldr	r3, [pc, #116]	; (8007070 <USBD_LL_Init+0xac>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007000:	481b      	ldr	r0, [pc, #108]	; (8007070 <USBD_LL_Init+0xac>)
 8007002:	f7fa fe4a 	bl	8001c9a <HAL_PCD_Init>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800700c:	f7f9 fa12 	bl	8000434 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007016:	2318      	movs	r3, #24
 8007018:	2200      	movs	r2, #0
 800701a:	2100      	movs	r1, #0
 800701c:	f7fb fd52 	bl	8002ac4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007026:	2358      	movs	r3, #88	; 0x58
 8007028:	2200      	movs	r2, #0
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	f7fb fd4a 	bl	8002ac4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007036:	23c0      	movs	r3, #192	; 0xc0
 8007038:	2200      	movs	r2, #0
 800703a:	2181      	movs	r1, #129	; 0x81
 800703c:	f7fb fd42 	bl	8002ac4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007046:	f44f 7388 	mov.w	r3, #272	; 0x110
 800704a:	2200      	movs	r2, #0
 800704c:	2101      	movs	r1, #1
 800704e:	f7fb fd39 	bl	8002ac4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800705c:	2200      	movs	r2, #0
 800705e:	2182      	movs	r1, #130	; 0x82
 8007060:	f7fb fd30 	bl	8002ac4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20001410 	.word	0x20001410
 8007074:	40005c00 	.word	0x40005c00

08007078 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800708e:	4618      	mov	r0, r3
 8007090:	f7fa fedd 	bl	8001e4e <HAL_PCD_Start>
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 f948 	bl	8007330 <USBD_Get_USB_Status>
 80070a0:	4603      	mov	r3, r0
 80070a2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	4608      	mov	r0, r1
 80070b8:	4611      	mov	r1, r2
 80070ba:	461a      	mov	r2, r3
 80070bc:	4603      	mov	r3, r0
 80070be:	70fb      	strb	r3, [r7, #3]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70bb      	strb	r3, [r7, #2]
 80070c4:	4613      	mov	r3, r2
 80070c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80070d6:	78bb      	ldrb	r3, [r7, #2]
 80070d8:	883a      	ldrh	r2, [r7, #0]
 80070da:	78f9      	ldrb	r1, [r7, #3]
 80070dc:	f7fb f804 	bl	80020e8 <HAL_PCD_EP_Open>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 f922 	bl	8007330 <USBD_Get_USB_Status>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	4611      	mov	r1, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f7fb f83a 	bl	8002192 <HAL_PCD_EP_Close>
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	4618      	mov	r0, r3
 8007126:	f000 f903 	bl	8007330 <USBD_Get_USB_Status>
 800712a:	4603      	mov	r3, r0
 800712c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800712e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007152:	78fa      	ldrb	r2, [r7, #3]
 8007154:	4611      	mov	r1, r2
 8007156:	4618      	mov	r0, r3
 8007158:	f7fb f8ed 	bl	8002336 <HAL_PCD_EP_SetStall>
 800715c:	4603      	mov	r3, r0
 800715e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 f8e4 	bl	8007330 <USBD_Get_USB_Status>
 8007168:	4603      	mov	r3, r0
 800716a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800716c:	7bbb      	ldrb	r3, [r7, #14]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007190:	78fa      	ldrb	r2, [r7, #3]
 8007192:	4611      	mov	r1, r2
 8007194:	4618      	mov	r0, r3
 8007196:	f7fb f923 	bl	80023e0 <HAL_PCD_EP_ClrStall>
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 f8c5 	bl	8007330 <USBD_Get_USB_Status>
 80071a6:	4603      	mov	r3, r0
 80071a8:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80071c6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80071c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	da08      	bge.n	80071e2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	015b      	lsls	r3, r3, #5
 80071da:	4413      	add	r3, r2
 80071dc:	332a      	adds	r3, #42	; 0x2a
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	e008      	b.n	80071f4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	015b      	lsls	r3, r3, #5
 80071ec:	4413      	add	r3, r2
 80071ee:	f203 232a 	addw	r3, r3, #554	; 0x22a
 80071f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr

080071fe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007218:	78fa      	ldrb	r2, [r7, #3]
 800721a:	4611      	mov	r1, r2
 800721c:	4618      	mov	r0, r3
 800721e:	f7fa ff3e 	bl	800209e <HAL_PCD_SetAddress>
 8007222:	4603      	mov	r3, r0
 8007224:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	4618      	mov	r0, r3
 800722a:	f000 f881 	bl	8007330 <USBD_Get_USB_Status>
 800722e:	4603      	mov	r3, r0
 8007230:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007232:	7bbb      	ldrb	r3, [r7, #14]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	607a      	str	r2, [r7, #4]
 8007246:	461a      	mov	r2, r3
 8007248:	460b      	mov	r3, r1
 800724a:	72fb      	strb	r3, [r7, #11]
 800724c:	4613      	mov	r3, r2
 800724e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800725e:	893b      	ldrh	r3, [r7, #8]
 8007260:	7af9      	ldrb	r1, [r7, #11]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	f7fb f82c 	bl	80022c0 <HAL_PCD_EP_Transmit>
 8007268:	4603      	mov	r3, r0
 800726a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	4618      	mov	r0, r3
 8007270:	f000 f85e 	bl	8007330 <USBD_Get_USB_Status>
 8007274:	4603      	mov	r3, r0
 8007276:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007278:	7dbb      	ldrb	r3, [r7, #22]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b086      	sub	sp, #24
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	461a      	mov	r2, r3
 800728e:	460b      	mov	r3, r1
 8007290:	72fb      	strb	r3, [r7, #11]
 8007292:	4613      	mov	r3, r2
 8007294:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80072a4:	893b      	ldrh	r3, [r7, #8]
 80072a6:	7af9      	ldrb	r1, [r7, #11]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	f7fa ffb8 	bl	800221e <HAL_PCD_EP_Receive>
 80072ae:	4603      	mov	r3, r0
 80072b0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 f83b 	bl	8007330 <USBD_Get_USB_Status>
 80072ba:	4603      	mov	r3, r0
 80072bc:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80072be:	7dbb      	ldrb	r3, [r7, #22]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fa ffd9 	bl	8002296 <HAL_PCD_EP_GetRxCount>
 80072e4:	4603      	mov	r3, r0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80072f8:	4b02      	ldr	r3, [pc, #8]	; (8007304 <USBD_static_malloc+0x14>)
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr
 8007304:	20000358 	.word	0x20000358

08007308 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]

}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	bc80      	pop	{r7}
 8007318:	4770      	bx	lr

0800731a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	460b      	mov	r3, r1
 8007324:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr

08007330 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	2b03      	cmp	r3, #3
 8007342:	d817      	bhi.n	8007374 <USBD_Get_USB_Status+0x44>
 8007344:	a201      	add	r2, pc, #4	; (adr r2, 800734c <USBD_Get_USB_Status+0x1c>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	0800735d 	.word	0x0800735d
 8007350:	08007363 	.word	0x08007363
 8007354:	08007369 	.word	0x08007369
 8007358:	0800736f 	.word	0x0800736f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]
    break;
 8007360:	e00b      	b.n	800737a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007362:	2302      	movs	r3, #2
 8007364:	73fb      	strb	r3, [r7, #15]
    break;
 8007366:	e008      	b.n	800737a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007368:	2301      	movs	r3, #1
 800736a:	73fb      	strb	r3, [r7, #15]
    break;
 800736c:	e005      	b.n	800737a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800736e:	2302      	movs	r3, #2
 8007370:	73fb      	strb	r3, [r7, #15]
    break;
 8007372:	e002      	b.n	800737a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007374:	2302      	movs	r3, #2
 8007376:	73fb      	strb	r3, [r7, #15]
    break;
 8007378:	bf00      	nop
  }
  return usb_status;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	bc80      	pop	{r7}
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop

08007388 <main>:
 */

#include "main.h"

int main(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  hwInit();
 800738c:	f7f9 fd08 	bl	8000da0 <hwInit>
  apInit();
 8007390:	f7f8 ff48 	bl	8000224 <apInit>

  apMain();
 8007394:	f7f8 ff54 	bl	8000240 <apMain>

  return 0;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <__errno>:
 80073a0:	4b01      	ldr	r3, [pc, #4]	; (80073a8 <__errno+0x8>)
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	200001a0 	.word	0x200001a0

080073ac <__libc_init_array>:
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	2500      	movs	r5, #0
 80073b0:	4e0c      	ldr	r6, [pc, #48]	; (80073e4 <__libc_init_array+0x38>)
 80073b2:	4c0d      	ldr	r4, [pc, #52]	; (80073e8 <__libc_init_array+0x3c>)
 80073b4:	1ba4      	subs	r4, r4, r6
 80073b6:	10a4      	asrs	r4, r4, #2
 80073b8:	42a5      	cmp	r5, r4
 80073ba:	d109      	bne.n	80073d0 <__libc_init_array+0x24>
 80073bc:	f000 fc4e 	bl	8007c5c <_init>
 80073c0:	2500      	movs	r5, #0
 80073c2:	4e0a      	ldr	r6, [pc, #40]	; (80073ec <__libc_init_array+0x40>)
 80073c4:	4c0a      	ldr	r4, [pc, #40]	; (80073f0 <__libc_init_array+0x44>)
 80073c6:	1ba4      	subs	r4, r4, r6
 80073c8:	10a4      	asrs	r4, r4, #2
 80073ca:	42a5      	cmp	r5, r4
 80073cc:	d105      	bne.n	80073da <__libc_init_array+0x2e>
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073d4:	4798      	blx	r3
 80073d6:	3501      	adds	r5, #1
 80073d8:	e7ee      	b.n	80073b8 <__libc_init_array+0xc>
 80073da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073de:	4798      	blx	r3
 80073e0:	3501      	adds	r5, #1
 80073e2:	e7f2      	b.n	80073ca <__libc_init_array+0x1e>
 80073e4:	08007d54 	.word	0x08007d54
 80073e8:	08007d54 	.word	0x08007d54
 80073ec:	08007d54 	.word	0x08007d54
 80073f0:	08007d58 	.word	0x08007d58

080073f4 <memset>:
 80073f4:	4603      	mov	r3, r0
 80073f6:	4402      	add	r2, r0
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d100      	bne.n	80073fe <memset+0xa>
 80073fc:	4770      	bx	lr
 80073fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007402:	e7f9      	b.n	80073f8 <memset+0x4>

08007404 <_vsniprintf_r>:
 8007404:	b530      	push	{r4, r5, lr}
 8007406:	1e14      	subs	r4, r2, #0
 8007408:	4605      	mov	r5, r0
 800740a:	b09b      	sub	sp, #108	; 0x6c
 800740c:	4618      	mov	r0, r3
 800740e:	da05      	bge.n	800741c <_vsniprintf_r+0x18>
 8007410:	238b      	movs	r3, #139	; 0x8b
 8007412:	f04f 30ff 	mov.w	r0, #4294967295
 8007416:	602b      	str	r3, [r5, #0]
 8007418:	b01b      	add	sp, #108	; 0x6c
 800741a:	bd30      	pop	{r4, r5, pc}
 800741c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007420:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007424:	bf0c      	ite	eq
 8007426:	4623      	moveq	r3, r4
 8007428:	f104 33ff 	addne.w	r3, r4, #4294967295
 800742c:	9302      	str	r3, [sp, #8]
 800742e:	9305      	str	r3, [sp, #20]
 8007430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007434:	9100      	str	r1, [sp, #0]
 8007436:	9104      	str	r1, [sp, #16]
 8007438:	f8ad 300e 	strh.w	r3, [sp, #14]
 800743c:	4602      	mov	r2, r0
 800743e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007440:	4669      	mov	r1, sp
 8007442:	4628      	mov	r0, r5
 8007444:	f000 f872 	bl	800752c <_svfiprintf_r>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	bfbc      	itt	lt
 800744c:	238b      	movlt	r3, #139	; 0x8b
 800744e:	602b      	strlt	r3, [r5, #0]
 8007450:	2c00      	cmp	r4, #0
 8007452:	d0e1      	beq.n	8007418 <_vsniprintf_r+0x14>
 8007454:	2200      	movs	r2, #0
 8007456:	9b00      	ldr	r3, [sp, #0]
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	e7dd      	b.n	8007418 <_vsniprintf_r+0x14>

0800745c <vsniprintf>:
 800745c:	b507      	push	{r0, r1, r2, lr}
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	4613      	mov	r3, r2
 8007462:	460a      	mov	r2, r1
 8007464:	4601      	mov	r1, r0
 8007466:	4803      	ldr	r0, [pc, #12]	; (8007474 <vsniprintf+0x18>)
 8007468:	6800      	ldr	r0, [r0, #0]
 800746a:	f7ff ffcb 	bl	8007404 <_vsniprintf_r>
 800746e:	b003      	add	sp, #12
 8007470:	f85d fb04 	ldr.w	pc, [sp], #4
 8007474:	200001a0 	.word	0x200001a0

08007478 <__ssputs_r>:
 8007478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800747c:	688e      	ldr	r6, [r1, #8]
 800747e:	4682      	mov	sl, r0
 8007480:	429e      	cmp	r6, r3
 8007482:	460c      	mov	r4, r1
 8007484:	4690      	mov	r8, r2
 8007486:	4699      	mov	r9, r3
 8007488:	d837      	bhi.n	80074fa <__ssputs_r+0x82>
 800748a:	898a      	ldrh	r2, [r1, #12]
 800748c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007490:	d031      	beq.n	80074f6 <__ssputs_r+0x7e>
 8007492:	2302      	movs	r3, #2
 8007494:	6825      	ldr	r5, [r4, #0]
 8007496:	6909      	ldr	r1, [r1, #16]
 8007498:	1a6f      	subs	r7, r5, r1
 800749a:	6965      	ldr	r5, [r4, #20]
 800749c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80074a4:	f109 0301 	add.w	r3, r9, #1
 80074a8:	443b      	add	r3, r7
 80074aa:	429d      	cmp	r5, r3
 80074ac:	bf38      	it	cc
 80074ae:	461d      	movcc	r5, r3
 80074b0:	0553      	lsls	r3, r2, #21
 80074b2:	d530      	bpl.n	8007516 <__ssputs_r+0x9e>
 80074b4:	4629      	mov	r1, r5
 80074b6:	f000 fb37 	bl	8007b28 <_malloc_r>
 80074ba:	4606      	mov	r6, r0
 80074bc:	b950      	cbnz	r0, 80074d4 <__ssputs_r+0x5c>
 80074be:	230c      	movs	r3, #12
 80074c0:	f04f 30ff 	mov.w	r0, #4294967295
 80074c4:	f8ca 3000 	str.w	r3, [sl]
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d4:	463a      	mov	r2, r7
 80074d6:	6921      	ldr	r1, [r4, #16]
 80074d8:	f000 fab6 	bl	8007a48 <memcpy>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	6126      	str	r6, [r4, #16]
 80074ea:	443e      	add	r6, r7
 80074ec:	6026      	str	r6, [r4, #0]
 80074ee:	464e      	mov	r6, r9
 80074f0:	6165      	str	r5, [r4, #20]
 80074f2:	1bed      	subs	r5, r5, r7
 80074f4:	60a5      	str	r5, [r4, #8]
 80074f6:	454e      	cmp	r6, r9
 80074f8:	d900      	bls.n	80074fc <__ssputs_r+0x84>
 80074fa:	464e      	mov	r6, r9
 80074fc:	4632      	mov	r2, r6
 80074fe:	4641      	mov	r1, r8
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	f000 faac 	bl	8007a5e <memmove>
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	2000      	movs	r0, #0
 800750a:	1b9b      	subs	r3, r3, r6
 800750c:	60a3      	str	r3, [r4, #8]
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	441e      	add	r6, r3
 8007512:	6026      	str	r6, [r4, #0]
 8007514:	e7dc      	b.n	80074d0 <__ssputs_r+0x58>
 8007516:	462a      	mov	r2, r5
 8007518:	f000 fb60 	bl	8007bdc <_realloc_r>
 800751c:	4606      	mov	r6, r0
 800751e:	2800      	cmp	r0, #0
 8007520:	d1e2      	bne.n	80074e8 <__ssputs_r+0x70>
 8007522:	6921      	ldr	r1, [r4, #16]
 8007524:	4650      	mov	r0, sl
 8007526:	f000 fab3 	bl	8007a90 <_free_r>
 800752a:	e7c8      	b.n	80074be <__ssputs_r+0x46>

0800752c <_svfiprintf_r>:
 800752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	461d      	mov	r5, r3
 8007532:	898b      	ldrh	r3, [r1, #12]
 8007534:	b09d      	sub	sp, #116	; 0x74
 8007536:	061f      	lsls	r7, r3, #24
 8007538:	4680      	mov	r8, r0
 800753a:	460c      	mov	r4, r1
 800753c:	4616      	mov	r6, r2
 800753e:	d50f      	bpl.n	8007560 <_svfiprintf_r+0x34>
 8007540:	690b      	ldr	r3, [r1, #16]
 8007542:	b96b      	cbnz	r3, 8007560 <_svfiprintf_r+0x34>
 8007544:	2140      	movs	r1, #64	; 0x40
 8007546:	f000 faef 	bl	8007b28 <_malloc_r>
 800754a:	6020      	str	r0, [r4, #0]
 800754c:	6120      	str	r0, [r4, #16]
 800754e:	b928      	cbnz	r0, 800755c <_svfiprintf_r+0x30>
 8007550:	230c      	movs	r3, #12
 8007552:	f8c8 3000 	str.w	r3, [r8]
 8007556:	f04f 30ff 	mov.w	r0, #4294967295
 800755a:	e0c8      	b.n	80076ee <_svfiprintf_r+0x1c2>
 800755c:	2340      	movs	r3, #64	; 0x40
 800755e:	6163      	str	r3, [r4, #20]
 8007560:	2300      	movs	r3, #0
 8007562:	9309      	str	r3, [sp, #36]	; 0x24
 8007564:	2320      	movs	r3, #32
 8007566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800756a:	2330      	movs	r3, #48	; 0x30
 800756c:	f04f 0b01 	mov.w	fp, #1
 8007570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007574:	9503      	str	r5, [sp, #12]
 8007576:	4637      	mov	r7, r6
 8007578:	463d      	mov	r5, r7
 800757a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800757e:	b10b      	cbz	r3, 8007584 <_svfiprintf_r+0x58>
 8007580:	2b25      	cmp	r3, #37	; 0x25
 8007582:	d13e      	bne.n	8007602 <_svfiprintf_r+0xd6>
 8007584:	ebb7 0a06 	subs.w	sl, r7, r6
 8007588:	d00b      	beq.n	80075a2 <_svfiprintf_r+0x76>
 800758a:	4653      	mov	r3, sl
 800758c:	4632      	mov	r2, r6
 800758e:	4621      	mov	r1, r4
 8007590:	4640      	mov	r0, r8
 8007592:	f7ff ff71 	bl	8007478 <__ssputs_r>
 8007596:	3001      	adds	r0, #1
 8007598:	f000 80a4 	beq.w	80076e4 <_svfiprintf_r+0x1b8>
 800759c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759e:	4453      	add	r3, sl
 80075a0:	9309      	str	r3, [sp, #36]	; 0x24
 80075a2:	783b      	ldrb	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 809d 	beq.w	80076e4 <_svfiprintf_r+0x1b8>
 80075aa:	2300      	movs	r3, #0
 80075ac:	f04f 32ff 	mov.w	r2, #4294967295
 80075b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	9307      	str	r3, [sp, #28]
 80075b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075bc:	931a      	str	r3, [sp, #104]	; 0x68
 80075be:	462f      	mov	r7, r5
 80075c0:	2205      	movs	r2, #5
 80075c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80075c6:	4850      	ldr	r0, [pc, #320]	; (8007708 <_svfiprintf_r+0x1dc>)
 80075c8:	f000 fa30 	bl	8007a2c <memchr>
 80075cc:	9b04      	ldr	r3, [sp, #16]
 80075ce:	b9d0      	cbnz	r0, 8007606 <_svfiprintf_r+0xda>
 80075d0:	06d9      	lsls	r1, r3, #27
 80075d2:	bf44      	itt	mi
 80075d4:	2220      	movmi	r2, #32
 80075d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075da:	071a      	lsls	r2, r3, #28
 80075dc:	bf44      	itt	mi
 80075de:	222b      	movmi	r2, #43	; 0x2b
 80075e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075e4:	782a      	ldrb	r2, [r5, #0]
 80075e6:	2a2a      	cmp	r2, #42	; 0x2a
 80075e8:	d015      	beq.n	8007616 <_svfiprintf_r+0xea>
 80075ea:	462f      	mov	r7, r5
 80075ec:	2000      	movs	r0, #0
 80075ee:	250a      	movs	r5, #10
 80075f0:	9a07      	ldr	r2, [sp, #28]
 80075f2:	4639      	mov	r1, r7
 80075f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075f8:	3b30      	subs	r3, #48	; 0x30
 80075fa:	2b09      	cmp	r3, #9
 80075fc:	d94d      	bls.n	800769a <_svfiprintf_r+0x16e>
 80075fe:	b1b8      	cbz	r0, 8007630 <_svfiprintf_r+0x104>
 8007600:	e00f      	b.n	8007622 <_svfiprintf_r+0xf6>
 8007602:	462f      	mov	r7, r5
 8007604:	e7b8      	b.n	8007578 <_svfiprintf_r+0x4c>
 8007606:	4a40      	ldr	r2, [pc, #256]	; (8007708 <_svfiprintf_r+0x1dc>)
 8007608:	463d      	mov	r5, r7
 800760a:	1a80      	subs	r0, r0, r2
 800760c:	fa0b f000 	lsl.w	r0, fp, r0
 8007610:	4318      	orrs	r0, r3
 8007612:	9004      	str	r0, [sp, #16]
 8007614:	e7d3      	b.n	80075be <_svfiprintf_r+0x92>
 8007616:	9a03      	ldr	r2, [sp, #12]
 8007618:	1d11      	adds	r1, r2, #4
 800761a:	6812      	ldr	r2, [r2, #0]
 800761c:	9103      	str	r1, [sp, #12]
 800761e:	2a00      	cmp	r2, #0
 8007620:	db01      	blt.n	8007626 <_svfiprintf_r+0xfa>
 8007622:	9207      	str	r2, [sp, #28]
 8007624:	e004      	b.n	8007630 <_svfiprintf_r+0x104>
 8007626:	4252      	negs	r2, r2
 8007628:	f043 0302 	orr.w	r3, r3, #2
 800762c:	9207      	str	r2, [sp, #28]
 800762e:	9304      	str	r3, [sp, #16]
 8007630:	783b      	ldrb	r3, [r7, #0]
 8007632:	2b2e      	cmp	r3, #46	; 0x2e
 8007634:	d10c      	bne.n	8007650 <_svfiprintf_r+0x124>
 8007636:	787b      	ldrb	r3, [r7, #1]
 8007638:	2b2a      	cmp	r3, #42	; 0x2a
 800763a:	d133      	bne.n	80076a4 <_svfiprintf_r+0x178>
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	3702      	adds	r7, #2
 8007640:	1d1a      	adds	r2, r3, #4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	9203      	str	r2, [sp, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	bfb8      	it	lt
 800764a:	f04f 33ff 	movlt.w	r3, #4294967295
 800764e:	9305      	str	r3, [sp, #20]
 8007650:	4d2e      	ldr	r5, [pc, #184]	; (800770c <_svfiprintf_r+0x1e0>)
 8007652:	2203      	movs	r2, #3
 8007654:	7839      	ldrb	r1, [r7, #0]
 8007656:	4628      	mov	r0, r5
 8007658:	f000 f9e8 	bl	8007a2c <memchr>
 800765c:	b138      	cbz	r0, 800766e <_svfiprintf_r+0x142>
 800765e:	2340      	movs	r3, #64	; 0x40
 8007660:	1b40      	subs	r0, r0, r5
 8007662:	fa03 f000 	lsl.w	r0, r3, r0
 8007666:	9b04      	ldr	r3, [sp, #16]
 8007668:	3701      	adds	r7, #1
 800766a:	4303      	orrs	r3, r0
 800766c:	9304      	str	r3, [sp, #16]
 800766e:	7839      	ldrb	r1, [r7, #0]
 8007670:	2206      	movs	r2, #6
 8007672:	4827      	ldr	r0, [pc, #156]	; (8007710 <_svfiprintf_r+0x1e4>)
 8007674:	1c7e      	adds	r6, r7, #1
 8007676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800767a:	f000 f9d7 	bl	8007a2c <memchr>
 800767e:	2800      	cmp	r0, #0
 8007680:	d038      	beq.n	80076f4 <_svfiprintf_r+0x1c8>
 8007682:	4b24      	ldr	r3, [pc, #144]	; (8007714 <_svfiprintf_r+0x1e8>)
 8007684:	bb13      	cbnz	r3, 80076cc <_svfiprintf_r+0x1a0>
 8007686:	9b03      	ldr	r3, [sp, #12]
 8007688:	3307      	adds	r3, #7
 800768a:	f023 0307 	bic.w	r3, r3, #7
 800768e:	3308      	adds	r3, #8
 8007690:	9303      	str	r3, [sp, #12]
 8007692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007694:	444b      	add	r3, r9
 8007696:	9309      	str	r3, [sp, #36]	; 0x24
 8007698:	e76d      	b.n	8007576 <_svfiprintf_r+0x4a>
 800769a:	fb05 3202 	mla	r2, r5, r2, r3
 800769e:	2001      	movs	r0, #1
 80076a0:	460f      	mov	r7, r1
 80076a2:	e7a6      	b.n	80075f2 <_svfiprintf_r+0xc6>
 80076a4:	2300      	movs	r3, #0
 80076a6:	250a      	movs	r5, #10
 80076a8:	4619      	mov	r1, r3
 80076aa:	3701      	adds	r7, #1
 80076ac:	9305      	str	r3, [sp, #20]
 80076ae:	4638      	mov	r0, r7
 80076b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b4:	3a30      	subs	r2, #48	; 0x30
 80076b6:	2a09      	cmp	r2, #9
 80076b8:	d903      	bls.n	80076c2 <_svfiprintf_r+0x196>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0c8      	beq.n	8007650 <_svfiprintf_r+0x124>
 80076be:	9105      	str	r1, [sp, #20]
 80076c0:	e7c6      	b.n	8007650 <_svfiprintf_r+0x124>
 80076c2:	fb05 2101 	mla	r1, r5, r1, r2
 80076c6:	2301      	movs	r3, #1
 80076c8:	4607      	mov	r7, r0
 80076ca:	e7f0      	b.n	80076ae <_svfiprintf_r+0x182>
 80076cc:	ab03      	add	r3, sp, #12
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	4622      	mov	r2, r4
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <_svfiprintf_r+0x1ec>)
 80076d4:	a904      	add	r1, sp, #16
 80076d6:	4640      	mov	r0, r8
 80076d8:	f3af 8000 	nop.w
 80076dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076e0:	4681      	mov	r9, r0
 80076e2:	d1d6      	bne.n	8007692 <_svfiprintf_r+0x166>
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	065b      	lsls	r3, r3, #25
 80076e8:	f53f af35 	bmi.w	8007556 <_svfiprintf_r+0x2a>
 80076ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076ee:	b01d      	add	sp, #116	; 0x74
 80076f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f4:	ab03      	add	r3, sp, #12
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	4622      	mov	r2, r4
 80076fa:	4b07      	ldr	r3, [pc, #28]	; (8007718 <_svfiprintf_r+0x1ec>)
 80076fc:	a904      	add	r1, sp, #16
 80076fe:	4640      	mov	r0, r8
 8007700:	f000 f882 	bl	8007808 <_printf_i>
 8007704:	e7ea      	b.n	80076dc <_svfiprintf_r+0x1b0>
 8007706:	bf00      	nop
 8007708:	08007d20 	.word	0x08007d20
 800770c:	08007d26 	.word	0x08007d26
 8007710:	08007d2a 	.word	0x08007d2a
 8007714:	00000000 	.word	0x00000000
 8007718:	08007479 	.word	0x08007479

0800771c <_printf_common>:
 800771c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007720:	4691      	mov	r9, r2
 8007722:	461f      	mov	r7, r3
 8007724:	688a      	ldr	r2, [r1, #8]
 8007726:	690b      	ldr	r3, [r1, #16]
 8007728:	4606      	mov	r6, r0
 800772a:	4293      	cmp	r3, r2
 800772c:	bfb8      	it	lt
 800772e:	4613      	movlt	r3, r2
 8007730:	f8c9 3000 	str.w	r3, [r9]
 8007734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007738:	460c      	mov	r4, r1
 800773a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800773e:	b112      	cbz	r2, 8007746 <_printf_common+0x2a>
 8007740:	3301      	adds	r3, #1
 8007742:	f8c9 3000 	str.w	r3, [r9]
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	0699      	lsls	r1, r3, #26
 800774a:	bf42      	ittt	mi
 800774c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007750:	3302      	addmi	r3, #2
 8007752:	f8c9 3000 	strmi.w	r3, [r9]
 8007756:	6825      	ldr	r5, [r4, #0]
 8007758:	f015 0506 	ands.w	r5, r5, #6
 800775c:	d107      	bne.n	800776e <_printf_common+0x52>
 800775e:	f104 0a19 	add.w	sl, r4, #25
 8007762:	68e3      	ldr	r3, [r4, #12]
 8007764:	f8d9 2000 	ldr.w	r2, [r9]
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	42ab      	cmp	r3, r5
 800776c:	dc29      	bgt.n	80077c2 <_printf_common+0xa6>
 800776e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007772:	6822      	ldr	r2, [r4, #0]
 8007774:	3300      	adds	r3, #0
 8007776:	bf18      	it	ne
 8007778:	2301      	movne	r3, #1
 800777a:	0692      	lsls	r2, r2, #26
 800777c:	d42e      	bmi.n	80077dc <_printf_common+0xc0>
 800777e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007782:	4639      	mov	r1, r7
 8007784:	4630      	mov	r0, r6
 8007786:	47c0      	blx	r8
 8007788:	3001      	adds	r0, #1
 800778a:	d021      	beq.n	80077d0 <_printf_common+0xb4>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	68e5      	ldr	r5, [r4, #12]
 8007790:	f003 0306 	and.w	r3, r3, #6
 8007794:	2b04      	cmp	r3, #4
 8007796:	bf18      	it	ne
 8007798:	2500      	movne	r5, #0
 800779a:	f8d9 2000 	ldr.w	r2, [r9]
 800779e:	f04f 0900 	mov.w	r9, #0
 80077a2:	bf08      	it	eq
 80077a4:	1aad      	subeq	r5, r5, r2
 80077a6:	68a3      	ldr	r3, [r4, #8]
 80077a8:	6922      	ldr	r2, [r4, #16]
 80077aa:	bf08      	it	eq
 80077ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b0:	4293      	cmp	r3, r2
 80077b2:	bfc4      	itt	gt
 80077b4:	1a9b      	subgt	r3, r3, r2
 80077b6:	18ed      	addgt	r5, r5, r3
 80077b8:	341a      	adds	r4, #26
 80077ba:	454d      	cmp	r5, r9
 80077bc:	d11a      	bne.n	80077f4 <_printf_common+0xd8>
 80077be:	2000      	movs	r0, #0
 80077c0:	e008      	b.n	80077d4 <_printf_common+0xb8>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4652      	mov	r2, sl
 80077c6:	4639      	mov	r1, r7
 80077c8:	4630      	mov	r0, r6
 80077ca:	47c0      	blx	r8
 80077cc:	3001      	adds	r0, #1
 80077ce:	d103      	bne.n	80077d8 <_printf_common+0xbc>
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
 80077d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d8:	3501      	adds	r5, #1
 80077da:	e7c2      	b.n	8007762 <_printf_common+0x46>
 80077dc:	2030      	movs	r0, #48	; 0x30
 80077de:	18e1      	adds	r1, r4, r3
 80077e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077ea:	4422      	add	r2, r4
 80077ec:	3302      	adds	r3, #2
 80077ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077f2:	e7c4      	b.n	800777e <_printf_common+0x62>
 80077f4:	2301      	movs	r3, #1
 80077f6:	4622      	mov	r2, r4
 80077f8:	4639      	mov	r1, r7
 80077fa:	4630      	mov	r0, r6
 80077fc:	47c0      	blx	r8
 80077fe:	3001      	adds	r0, #1
 8007800:	d0e6      	beq.n	80077d0 <_printf_common+0xb4>
 8007802:	f109 0901 	add.w	r9, r9, #1
 8007806:	e7d8      	b.n	80077ba <_printf_common+0x9e>

08007808 <_printf_i>:
 8007808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800780c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007810:	460c      	mov	r4, r1
 8007812:	7e09      	ldrb	r1, [r1, #24]
 8007814:	b085      	sub	sp, #20
 8007816:	296e      	cmp	r1, #110	; 0x6e
 8007818:	4617      	mov	r7, r2
 800781a:	4606      	mov	r6, r0
 800781c:	4698      	mov	r8, r3
 800781e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007820:	f000 80b3 	beq.w	800798a <_printf_i+0x182>
 8007824:	d822      	bhi.n	800786c <_printf_i+0x64>
 8007826:	2963      	cmp	r1, #99	; 0x63
 8007828:	d036      	beq.n	8007898 <_printf_i+0x90>
 800782a:	d80a      	bhi.n	8007842 <_printf_i+0x3a>
 800782c:	2900      	cmp	r1, #0
 800782e:	f000 80b9 	beq.w	80079a4 <_printf_i+0x19c>
 8007832:	2958      	cmp	r1, #88	; 0x58
 8007834:	f000 8083 	beq.w	800793e <_printf_i+0x136>
 8007838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800783c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007840:	e032      	b.n	80078a8 <_printf_i+0xa0>
 8007842:	2964      	cmp	r1, #100	; 0x64
 8007844:	d001      	beq.n	800784a <_printf_i+0x42>
 8007846:	2969      	cmp	r1, #105	; 0x69
 8007848:	d1f6      	bne.n	8007838 <_printf_i+0x30>
 800784a:	6820      	ldr	r0, [r4, #0]
 800784c:	6813      	ldr	r3, [r2, #0]
 800784e:	0605      	lsls	r5, r0, #24
 8007850:	f103 0104 	add.w	r1, r3, #4
 8007854:	d52a      	bpl.n	80078ac <_printf_i+0xa4>
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6011      	str	r1, [r2, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	da03      	bge.n	8007866 <_printf_i+0x5e>
 800785e:	222d      	movs	r2, #45	; 0x2d
 8007860:	425b      	negs	r3, r3
 8007862:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007866:	486f      	ldr	r0, [pc, #444]	; (8007a24 <_printf_i+0x21c>)
 8007868:	220a      	movs	r2, #10
 800786a:	e039      	b.n	80078e0 <_printf_i+0xd8>
 800786c:	2973      	cmp	r1, #115	; 0x73
 800786e:	f000 809d 	beq.w	80079ac <_printf_i+0x1a4>
 8007872:	d808      	bhi.n	8007886 <_printf_i+0x7e>
 8007874:	296f      	cmp	r1, #111	; 0x6f
 8007876:	d020      	beq.n	80078ba <_printf_i+0xb2>
 8007878:	2970      	cmp	r1, #112	; 0x70
 800787a:	d1dd      	bne.n	8007838 <_printf_i+0x30>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	f043 0320 	orr.w	r3, r3, #32
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	e003      	b.n	800788e <_printf_i+0x86>
 8007886:	2975      	cmp	r1, #117	; 0x75
 8007888:	d017      	beq.n	80078ba <_printf_i+0xb2>
 800788a:	2978      	cmp	r1, #120	; 0x78
 800788c:	d1d4      	bne.n	8007838 <_printf_i+0x30>
 800788e:	2378      	movs	r3, #120	; 0x78
 8007890:	4865      	ldr	r0, [pc, #404]	; (8007a28 <_printf_i+0x220>)
 8007892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007896:	e055      	b.n	8007944 <_printf_i+0x13c>
 8007898:	6813      	ldr	r3, [r2, #0]
 800789a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800789e:	1d19      	adds	r1, r3, #4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6011      	str	r1, [r2, #0]
 80078a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078a8:	2301      	movs	r3, #1
 80078aa:	e08c      	b.n	80079c6 <_printf_i+0x1be>
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078b2:	6011      	str	r1, [r2, #0]
 80078b4:	bf18      	it	ne
 80078b6:	b21b      	sxthne	r3, r3
 80078b8:	e7cf      	b.n	800785a <_printf_i+0x52>
 80078ba:	6813      	ldr	r3, [r2, #0]
 80078bc:	6825      	ldr	r5, [r4, #0]
 80078be:	1d18      	adds	r0, r3, #4
 80078c0:	6010      	str	r0, [r2, #0]
 80078c2:	0628      	lsls	r0, r5, #24
 80078c4:	d501      	bpl.n	80078ca <_printf_i+0xc2>
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	e002      	b.n	80078d0 <_printf_i+0xc8>
 80078ca:	0668      	lsls	r0, r5, #25
 80078cc:	d5fb      	bpl.n	80078c6 <_printf_i+0xbe>
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	296f      	cmp	r1, #111	; 0x6f
 80078d2:	bf14      	ite	ne
 80078d4:	220a      	movne	r2, #10
 80078d6:	2208      	moveq	r2, #8
 80078d8:	4852      	ldr	r0, [pc, #328]	; (8007a24 <_printf_i+0x21c>)
 80078da:	2100      	movs	r1, #0
 80078dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078e0:	6865      	ldr	r5, [r4, #4]
 80078e2:	2d00      	cmp	r5, #0
 80078e4:	60a5      	str	r5, [r4, #8]
 80078e6:	f2c0 8095 	blt.w	8007a14 <_printf_i+0x20c>
 80078ea:	6821      	ldr	r1, [r4, #0]
 80078ec:	f021 0104 	bic.w	r1, r1, #4
 80078f0:	6021      	str	r1, [r4, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d13d      	bne.n	8007972 <_printf_i+0x16a>
 80078f6:	2d00      	cmp	r5, #0
 80078f8:	f040 808e 	bne.w	8007a18 <_printf_i+0x210>
 80078fc:	4665      	mov	r5, ip
 80078fe:	2a08      	cmp	r2, #8
 8007900:	d10b      	bne.n	800791a <_printf_i+0x112>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	07db      	lsls	r3, r3, #31
 8007906:	d508      	bpl.n	800791a <_printf_i+0x112>
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	6862      	ldr	r2, [r4, #4]
 800790c:	429a      	cmp	r2, r3
 800790e:	bfde      	ittt	le
 8007910:	2330      	movle	r3, #48	; 0x30
 8007912:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007916:	f105 35ff 	addle.w	r5, r5, #4294967295
 800791a:	ebac 0305 	sub.w	r3, ip, r5
 800791e:	6123      	str	r3, [r4, #16]
 8007920:	f8cd 8000 	str.w	r8, [sp]
 8007924:	463b      	mov	r3, r7
 8007926:	aa03      	add	r2, sp, #12
 8007928:	4621      	mov	r1, r4
 800792a:	4630      	mov	r0, r6
 800792c:	f7ff fef6 	bl	800771c <_printf_common>
 8007930:	3001      	adds	r0, #1
 8007932:	d14d      	bne.n	80079d0 <_printf_i+0x1c8>
 8007934:	f04f 30ff 	mov.w	r0, #4294967295
 8007938:	b005      	add	sp, #20
 800793a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800793e:	4839      	ldr	r0, [pc, #228]	; (8007a24 <_printf_i+0x21c>)
 8007940:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007944:	6813      	ldr	r3, [r2, #0]
 8007946:	6821      	ldr	r1, [r4, #0]
 8007948:	1d1d      	adds	r5, r3, #4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6015      	str	r5, [r2, #0]
 800794e:	060a      	lsls	r2, r1, #24
 8007950:	d50b      	bpl.n	800796a <_printf_i+0x162>
 8007952:	07ca      	lsls	r2, r1, #31
 8007954:	bf44      	itt	mi
 8007956:	f041 0120 	orrmi.w	r1, r1, #32
 800795a:	6021      	strmi	r1, [r4, #0]
 800795c:	b91b      	cbnz	r3, 8007966 <_printf_i+0x15e>
 800795e:	6822      	ldr	r2, [r4, #0]
 8007960:	f022 0220 	bic.w	r2, r2, #32
 8007964:	6022      	str	r2, [r4, #0]
 8007966:	2210      	movs	r2, #16
 8007968:	e7b7      	b.n	80078da <_printf_i+0xd2>
 800796a:	064d      	lsls	r5, r1, #25
 800796c:	bf48      	it	mi
 800796e:	b29b      	uxthmi	r3, r3
 8007970:	e7ef      	b.n	8007952 <_printf_i+0x14a>
 8007972:	4665      	mov	r5, ip
 8007974:	fbb3 f1f2 	udiv	r1, r3, r2
 8007978:	fb02 3311 	mls	r3, r2, r1, r3
 800797c:	5cc3      	ldrb	r3, [r0, r3]
 800797e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007982:	460b      	mov	r3, r1
 8007984:	2900      	cmp	r1, #0
 8007986:	d1f5      	bne.n	8007974 <_printf_i+0x16c>
 8007988:	e7b9      	b.n	80078fe <_printf_i+0xf6>
 800798a:	6813      	ldr	r3, [r2, #0]
 800798c:	6825      	ldr	r5, [r4, #0]
 800798e:	1d18      	adds	r0, r3, #4
 8007990:	6961      	ldr	r1, [r4, #20]
 8007992:	6010      	str	r0, [r2, #0]
 8007994:	0628      	lsls	r0, r5, #24
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	d501      	bpl.n	800799e <_printf_i+0x196>
 800799a:	6019      	str	r1, [r3, #0]
 800799c:	e002      	b.n	80079a4 <_printf_i+0x19c>
 800799e:	066a      	lsls	r2, r5, #25
 80079a0:	d5fb      	bpl.n	800799a <_printf_i+0x192>
 80079a2:	8019      	strh	r1, [r3, #0]
 80079a4:	2300      	movs	r3, #0
 80079a6:	4665      	mov	r5, ip
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	e7b9      	b.n	8007920 <_printf_i+0x118>
 80079ac:	6813      	ldr	r3, [r2, #0]
 80079ae:	1d19      	adds	r1, r3, #4
 80079b0:	6011      	str	r1, [r2, #0]
 80079b2:	681d      	ldr	r5, [r3, #0]
 80079b4:	6862      	ldr	r2, [r4, #4]
 80079b6:	2100      	movs	r1, #0
 80079b8:	4628      	mov	r0, r5
 80079ba:	f000 f837 	bl	8007a2c <memchr>
 80079be:	b108      	cbz	r0, 80079c4 <_printf_i+0x1bc>
 80079c0:	1b40      	subs	r0, r0, r5
 80079c2:	6060      	str	r0, [r4, #4]
 80079c4:	6863      	ldr	r3, [r4, #4]
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	2300      	movs	r3, #0
 80079ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ce:	e7a7      	b.n	8007920 <_printf_i+0x118>
 80079d0:	6923      	ldr	r3, [r4, #16]
 80079d2:	462a      	mov	r2, r5
 80079d4:	4639      	mov	r1, r7
 80079d6:	4630      	mov	r0, r6
 80079d8:	47c0      	blx	r8
 80079da:	3001      	adds	r0, #1
 80079dc:	d0aa      	beq.n	8007934 <_printf_i+0x12c>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	079b      	lsls	r3, r3, #30
 80079e2:	d413      	bmi.n	8007a0c <_printf_i+0x204>
 80079e4:	68e0      	ldr	r0, [r4, #12]
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	4298      	cmp	r0, r3
 80079ea:	bfb8      	it	lt
 80079ec:	4618      	movlt	r0, r3
 80079ee:	e7a3      	b.n	8007938 <_printf_i+0x130>
 80079f0:	2301      	movs	r3, #1
 80079f2:	464a      	mov	r2, r9
 80079f4:	4639      	mov	r1, r7
 80079f6:	4630      	mov	r0, r6
 80079f8:	47c0      	blx	r8
 80079fa:	3001      	adds	r0, #1
 80079fc:	d09a      	beq.n	8007934 <_printf_i+0x12c>
 80079fe:	3501      	adds	r5, #1
 8007a00:	68e3      	ldr	r3, [r4, #12]
 8007a02:	9a03      	ldr	r2, [sp, #12]
 8007a04:	1a9b      	subs	r3, r3, r2
 8007a06:	42ab      	cmp	r3, r5
 8007a08:	dcf2      	bgt.n	80079f0 <_printf_i+0x1e8>
 8007a0a:	e7eb      	b.n	80079e4 <_printf_i+0x1dc>
 8007a0c:	2500      	movs	r5, #0
 8007a0e:	f104 0919 	add.w	r9, r4, #25
 8007a12:	e7f5      	b.n	8007a00 <_printf_i+0x1f8>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1ac      	bne.n	8007972 <_printf_i+0x16a>
 8007a18:	7803      	ldrb	r3, [r0, #0]
 8007a1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a22:	e76c      	b.n	80078fe <_printf_i+0xf6>
 8007a24:	08007d31 	.word	0x08007d31
 8007a28:	08007d42 	.word	0x08007d42

08007a2c <memchr>:
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	b2c9      	uxtb	r1, r1
 8007a30:	4402      	add	r2, r0
 8007a32:	4290      	cmp	r0, r2
 8007a34:	4603      	mov	r3, r0
 8007a36:	d101      	bne.n	8007a3c <memchr+0x10>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e003      	b.n	8007a44 <memchr+0x18>
 8007a3c:	781c      	ldrb	r4, [r3, #0]
 8007a3e:	3001      	adds	r0, #1
 8007a40:	428c      	cmp	r4, r1
 8007a42:	d1f6      	bne.n	8007a32 <memchr+0x6>
 8007a44:	4618      	mov	r0, r3
 8007a46:	bd10      	pop	{r4, pc}

08007a48 <memcpy>:
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	1e43      	subs	r3, r0, #1
 8007a4c:	440a      	add	r2, r1
 8007a4e:	4291      	cmp	r1, r2
 8007a50:	d100      	bne.n	8007a54 <memcpy+0xc>
 8007a52:	bd10      	pop	{r4, pc}
 8007a54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a5c:	e7f7      	b.n	8007a4e <memcpy+0x6>

08007a5e <memmove>:
 8007a5e:	4288      	cmp	r0, r1
 8007a60:	b510      	push	{r4, lr}
 8007a62:	eb01 0302 	add.w	r3, r1, r2
 8007a66:	d807      	bhi.n	8007a78 <memmove+0x1a>
 8007a68:	1e42      	subs	r2, r0, #1
 8007a6a:	4299      	cmp	r1, r3
 8007a6c:	d00a      	beq.n	8007a84 <memmove+0x26>
 8007a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a72:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007a76:	e7f8      	b.n	8007a6a <memmove+0xc>
 8007a78:	4283      	cmp	r3, r0
 8007a7a:	d9f5      	bls.n	8007a68 <memmove+0xa>
 8007a7c:	1881      	adds	r1, r0, r2
 8007a7e:	1ad2      	subs	r2, r2, r3
 8007a80:	42d3      	cmn	r3, r2
 8007a82:	d100      	bne.n	8007a86 <memmove+0x28>
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a8a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007a8e:	e7f7      	b.n	8007a80 <memmove+0x22>

08007a90 <_free_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4605      	mov	r5, r0
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d043      	beq.n	8007b20 <_free_r+0x90>
 8007a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a9c:	1f0c      	subs	r4, r1, #4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bfb8      	it	lt
 8007aa2:	18e4      	addlt	r4, r4, r3
 8007aa4:	f000 f8d0 	bl	8007c48 <__malloc_lock>
 8007aa8:	4a1e      	ldr	r2, [pc, #120]	; (8007b24 <_free_r+0x94>)
 8007aaa:	6813      	ldr	r3, [r2, #0]
 8007aac:	4610      	mov	r0, r2
 8007aae:	b933      	cbnz	r3, 8007abe <_free_r+0x2e>
 8007ab0:	6063      	str	r3, [r4, #4]
 8007ab2:	6014      	str	r4, [r2, #0]
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aba:	f000 b8c6 	b.w	8007c4a <__malloc_unlock>
 8007abe:	42a3      	cmp	r3, r4
 8007ac0:	d90b      	bls.n	8007ada <_free_r+0x4a>
 8007ac2:	6821      	ldr	r1, [r4, #0]
 8007ac4:	1862      	adds	r2, r4, r1
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	bf01      	itttt	eq
 8007aca:	681a      	ldreq	r2, [r3, #0]
 8007acc:	685b      	ldreq	r3, [r3, #4]
 8007ace:	1852      	addeq	r2, r2, r1
 8007ad0:	6022      	streq	r2, [r4, #0]
 8007ad2:	6063      	str	r3, [r4, #4]
 8007ad4:	6004      	str	r4, [r0, #0]
 8007ad6:	e7ed      	b.n	8007ab4 <_free_r+0x24>
 8007ad8:	4613      	mov	r3, r2
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	b10a      	cbz	r2, 8007ae2 <_free_r+0x52>
 8007ade:	42a2      	cmp	r2, r4
 8007ae0:	d9fa      	bls.n	8007ad8 <_free_r+0x48>
 8007ae2:	6819      	ldr	r1, [r3, #0]
 8007ae4:	1858      	adds	r0, r3, r1
 8007ae6:	42a0      	cmp	r0, r4
 8007ae8:	d10b      	bne.n	8007b02 <_free_r+0x72>
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	4401      	add	r1, r0
 8007aee:	1858      	adds	r0, r3, r1
 8007af0:	4282      	cmp	r2, r0
 8007af2:	6019      	str	r1, [r3, #0]
 8007af4:	d1de      	bne.n	8007ab4 <_free_r+0x24>
 8007af6:	6810      	ldr	r0, [r2, #0]
 8007af8:	6852      	ldr	r2, [r2, #4]
 8007afa:	4401      	add	r1, r0
 8007afc:	6019      	str	r1, [r3, #0]
 8007afe:	605a      	str	r2, [r3, #4]
 8007b00:	e7d8      	b.n	8007ab4 <_free_r+0x24>
 8007b02:	d902      	bls.n	8007b0a <_free_r+0x7a>
 8007b04:	230c      	movs	r3, #12
 8007b06:	602b      	str	r3, [r5, #0]
 8007b08:	e7d4      	b.n	8007ab4 <_free_r+0x24>
 8007b0a:	6820      	ldr	r0, [r4, #0]
 8007b0c:	1821      	adds	r1, r4, r0
 8007b0e:	428a      	cmp	r2, r1
 8007b10:	bf01      	itttt	eq
 8007b12:	6811      	ldreq	r1, [r2, #0]
 8007b14:	6852      	ldreq	r2, [r2, #4]
 8007b16:	1809      	addeq	r1, r1, r0
 8007b18:	6021      	streq	r1, [r4, #0]
 8007b1a:	6062      	str	r2, [r4, #4]
 8007b1c:	605c      	str	r4, [r3, #4]
 8007b1e:	e7c9      	b.n	8007ab4 <_free_r+0x24>
 8007b20:	bd38      	pop	{r3, r4, r5, pc}
 8007b22:	bf00      	nop
 8007b24:	20000578 	.word	0x20000578

08007b28 <_malloc_r>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	1ccd      	adds	r5, r1, #3
 8007b2c:	f025 0503 	bic.w	r5, r5, #3
 8007b30:	3508      	adds	r5, #8
 8007b32:	2d0c      	cmp	r5, #12
 8007b34:	bf38      	it	cc
 8007b36:	250c      	movcc	r5, #12
 8007b38:	2d00      	cmp	r5, #0
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	db01      	blt.n	8007b42 <_malloc_r+0x1a>
 8007b3e:	42a9      	cmp	r1, r5
 8007b40:	d903      	bls.n	8007b4a <_malloc_r+0x22>
 8007b42:	230c      	movs	r3, #12
 8007b44:	6033      	str	r3, [r6, #0]
 8007b46:	2000      	movs	r0, #0
 8007b48:	bd70      	pop	{r4, r5, r6, pc}
 8007b4a:	f000 f87d 	bl	8007c48 <__malloc_lock>
 8007b4e:	4a21      	ldr	r2, [pc, #132]	; (8007bd4 <_malloc_r+0xac>)
 8007b50:	6814      	ldr	r4, [r2, #0]
 8007b52:	4621      	mov	r1, r4
 8007b54:	b991      	cbnz	r1, 8007b7c <_malloc_r+0x54>
 8007b56:	4c20      	ldr	r4, [pc, #128]	; (8007bd8 <_malloc_r+0xb0>)
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	b91b      	cbnz	r3, 8007b64 <_malloc_r+0x3c>
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f000 f863 	bl	8007c28 <_sbrk_r>
 8007b62:	6020      	str	r0, [r4, #0]
 8007b64:	4629      	mov	r1, r5
 8007b66:	4630      	mov	r0, r6
 8007b68:	f000 f85e 	bl	8007c28 <_sbrk_r>
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	d124      	bne.n	8007bba <_malloc_r+0x92>
 8007b70:	230c      	movs	r3, #12
 8007b72:	4630      	mov	r0, r6
 8007b74:	6033      	str	r3, [r6, #0]
 8007b76:	f000 f868 	bl	8007c4a <__malloc_unlock>
 8007b7a:	e7e4      	b.n	8007b46 <_malloc_r+0x1e>
 8007b7c:	680b      	ldr	r3, [r1, #0]
 8007b7e:	1b5b      	subs	r3, r3, r5
 8007b80:	d418      	bmi.n	8007bb4 <_malloc_r+0x8c>
 8007b82:	2b0b      	cmp	r3, #11
 8007b84:	d90f      	bls.n	8007ba6 <_malloc_r+0x7e>
 8007b86:	600b      	str	r3, [r1, #0]
 8007b88:	18cc      	adds	r4, r1, r3
 8007b8a:	50cd      	str	r5, [r1, r3]
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f000 f85c 	bl	8007c4a <__malloc_unlock>
 8007b92:	f104 000b 	add.w	r0, r4, #11
 8007b96:	1d23      	adds	r3, r4, #4
 8007b98:	f020 0007 	bic.w	r0, r0, #7
 8007b9c:	1ac3      	subs	r3, r0, r3
 8007b9e:	d0d3      	beq.n	8007b48 <_malloc_r+0x20>
 8007ba0:	425a      	negs	r2, r3
 8007ba2:	50e2      	str	r2, [r4, r3]
 8007ba4:	e7d0      	b.n	8007b48 <_malloc_r+0x20>
 8007ba6:	684b      	ldr	r3, [r1, #4]
 8007ba8:	428c      	cmp	r4, r1
 8007baa:	bf16      	itet	ne
 8007bac:	6063      	strne	r3, [r4, #4]
 8007bae:	6013      	streq	r3, [r2, #0]
 8007bb0:	460c      	movne	r4, r1
 8007bb2:	e7eb      	b.n	8007b8c <_malloc_r+0x64>
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	6849      	ldr	r1, [r1, #4]
 8007bb8:	e7cc      	b.n	8007b54 <_malloc_r+0x2c>
 8007bba:	1cc4      	adds	r4, r0, #3
 8007bbc:	f024 0403 	bic.w	r4, r4, #3
 8007bc0:	42a0      	cmp	r0, r4
 8007bc2:	d005      	beq.n	8007bd0 <_malloc_r+0xa8>
 8007bc4:	1a21      	subs	r1, r4, r0
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f000 f82e 	bl	8007c28 <_sbrk_r>
 8007bcc:	3001      	adds	r0, #1
 8007bce:	d0cf      	beq.n	8007b70 <_malloc_r+0x48>
 8007bd0:	6025      	str	r5, [r4, #0]
 8007bd2:	e7db      	b.n	8007b8c <_malloc_r+0x64>
 8007bd4:	20000578 	.word	0x20000578
 8007bd8:	2000057c 	.word	0x2000057c

08007bdc <_realloc_r>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	4607      	mov	r7, r0
 8007be0:	4614      	mov	r4, r2
 8007be2:	460e      	mov	r6, r1
 8007be4:	b921      	cbnz	r1, 8007bf0 <_realloc_r+0x14>
 8007be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007bea:	4611      	mov	r1, r2
 8007bec:	f7ff bf9c 	b.w	8007b28 <_malloc_r>
 8007bf0:	b922      	cbnz	r2, 8007bfc <_realloc_r+0x20>
 8007bf2:	f7ff ff4d 	bl	8007a90 <_free_r>
 8007bf6:	4625      	mov	r5, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bfc:	f000 f826 	bl	8007c4c <_malloc_usable_size_r>
 8007c00:	42a0      	cmp	r0, r4
 8007c02:	d20f      	bcs.n	8007c24 <_realloc_r+0x48>
 8007c04:	4621      	mov	r1, r4
 8007c06:	4638      	mov	r0, r7
 8007c08:	f7ff ff8e 	bl	8007b28 <_malloc_r>
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d0f2      	beq.n	8007bf8 <_realloc_r+0x1c>
 8007c12:	4631      	mov	r1, r6
 8007c14:	4622      	mov	r2, r4
 8007c16:	f7ff ff17 	bl	8007a48 <memcpy>
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4638      	mov	r0, r7
 8007c1e:	f7ff ff37 	bl	8007a90 <_free_r>
 8007c22:	e7e9      	b.n	8007bf8 <_realloc_r+0x1c>
 8007c24:	4635      	mov	r5, r6
 8007c26:	e7e7      	b.n	8007bf8 <_realloc_r+0x1c>

08007c28 <_sbrk_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	4c05      	ldr	r4, [pc, #20]	; (8007c44 <_sbrk_r+0x1c>)
 8007c2e:	4605      	mov	r5, r0
 8007c30:	4608      	mov	r0, r1
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	f7f8 fc7e 	bl	8000534 <_sbrk>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_sbrk_r+0x1a>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_sbrk_r+0x1a>
 8007c40:	602b      	str	r3, [r5, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	20001870 	.word	0x20001870

08007c48 <__malloc_lock>:
 8007c48:	4770      	bx	lr

08007c4a <__malloc_unlock>:
 8007c4a:	4770      	bx	lr

08007c4c <_malloc_usable_size_r>:
 8007c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c50:	1f18      	subs	r0, r3, #4
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	bfbc      	itt	lt
 8007c56:	580b      	ldrlt	r3, [r1, r0]
 8007c58:	18c0      	addlt	r0, r0, r3
 8007c5a:	4770      	bx	lr

08007c5c <_init>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	bf00      	nop
 8007c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c62:	bc08      	pop	{r3}
 8007c64:	469e      	mov	lr, r3
 8007c66:	4770      	bx	lr

08007c68 <_fini>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr
